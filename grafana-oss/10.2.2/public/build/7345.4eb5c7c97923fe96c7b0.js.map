{"version":3,"file":"7345.4eb5c7c97923fe96c7b0.js","mappings":"yLAgCA,QAvByBA,GAA+B,CACtD,KAAM,CAAE,qBAAAC,CAAqB,KAAI,MAAgB,EAC3C,CAAE,KAAAC,EAAM,UAAAC,EAAW,MAAAC,CAAM,KAAI,KAAsBH,CAAoB,EAE7E,OAAIE,GAAa,CAACD,EACT,aAGLE,EAEA,gBAAC,IAAK,CAAC,SAAS,QAAQ,MAAM,iCAC3B,OAAOA,CAAK,CACf,EAICF,EAIE,gBAAC,IAAe,CAAC,OAAQA,EAAM,uBAAwBD,CAAA,CAAuB,EAH5E,IAIX,C,mFChBO,MAAMI,EAAkB,CAAC,CAAE,uBAAAC,EAAwB,OAAAC,CAAO,IAC3DD,IAA2B,KACtB,gBAAC,IAAmB,CAAC,uBAAAA,EAAgD,OAAAC,CAAA,CAAgB,EAErF,gBAAC,IAAiB,CAAC,uBAAAD,EAAgD,OAAAC,CAAA,CAAgB,C,kDCPvF,SAASC,EAAsBC,EAAuBC,EAAmB,CAC9E,MAAMC,EAAc,kBAAgB,UAAU,6BAA6B,SAASF,GAAgB,GAAI,CACtG,GAAGC,EACH,KAAM,CAACD,CACT,CAAC,EAED,MAAO,CACL,GAAGE,EAEH,MAAOA,EAAY,KACrB,CACF,C","sources":["webpack://grafana/./public/app/features/alerting/unified/components/contact-points/NewContactPoint.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/NewReceiverView.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertmanagerConfig.ts"],"sourcesContent":["import React from 'react';\nimport { RouteChildrenProps } from 'react-router-dom';\n\nimport { Alert } from '@grafana/ui';\n\nimport { useAlertmanagerConfig } from '../../hooks/useAlertmanagerConfig';\nimport { useAlertmanager } from '../../state/AlertmanagerContext';\nimport { NewReceiverView } from '../receivers/NewReceiverView';\n\nconst NewContactPoint = (_props: RouteChildrenProps) => {\n  const { selectedAlertmanager } = useAlertmanager();\n  const { data, isLoading, error } = useAlertmanagerConfig(selectedAlertmanager);\n\n  if (isLoading && !data) {\n    return 'loading...';\n  }\n\n  if (error) {\n    return (\n      <Alert severity=\"error\" title=\"Failed to fetch contact point\">\n        {String(error)}\n      </Alert>\n    );\n  }\n\n  if (!data) {\n    return null;\n  }\n\n  return <NewReceiverView config={data} alertManagerSourceName={selectedAlertmanager!} />;\n};\n\nexport default NewContactPoint;\n","import React from 'react';\n\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\n\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\n\nimport { CloudReceiverForm } from './form/CloudReceiverForm';\nimport { GrafanaReceiverForm } from './form/GrafanaReceiverForm';\n\ninterface Props {\n  config: AlertManagerCortexConfig;\n  alertManagerSourceName: string;\n}\n\nexport const NewReceiverView = ({ alertManagerSourceName, config }: Props) => {\n  if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n    return <GrafanaReceiverForm alertManagerSourceName={alertManagerSourceName} config={config} />;\n  } else {\n    return <CloudReceiverForm alertManagerSourceName={alertManagerSourceName} config={config} />;\n  }\n};\n","import { SerializedError } from '@reduxjs/toolkit';\n\nimport { alertmanagerApi } from '../api/alertmanagerApi';\n\ntype Options = {\n  refetchOnFocus: boolean;\n  refetchOnReconnect: boolean;\n};\n\n// TODO refactor this so we can just call \"alertmanagerApi.endpoints.getAlertmanagerConfiguration\" everywhere\n// and remove this hook since it adds little value\nexport function useAlertmanagerConfig(amSourceName?: string, options?: Options) {\n  const fetchConfig = alertmanagerApi.endpoints.getAlertmanagerConfiguration.useQuery(amSourceName ?? '', {\n    ...options,\n    skip: !amSourceName,\n  });\n\n  return {\n    ...fetchConfig,\n    // TODO refactor to get rid of this type assertion\n    error: fetchConfig.error as SerializedError,\n  };\n}\n"],"names":["_props","selectedAlertmanager","data","isLoading","error","NewReceiverView","alertManagerSourceName","config","useAlertmanagerConfig","amSourceName","options","fetchConfig"],"sourceRoot":""}