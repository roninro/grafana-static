{"version":3,"file":"6934.daaea2b9654f8f72e68b.js","mappings":"4LAKIA,EAAY,OAAO,eACnBC,EAAa,OAAO,iBACpBC,EAAoB,OAAO,0BAC3BC,EAAsB,OAAO,sBAC7BC,EAAe,OAAO,UAAU,eAChCC,EAAe,OAAO,UAAU,qBAChCC,EAAkB,CAACC,EAAKC,EAAKC,IAAUD,KAAOD,EAAMP,EAAUO,EAAKC,EAAK,CAAE,WAAY,GAAM,aAAc,GAAM,SAAU,GAAM,MAAAC,CAAM,CAAC,EAAIF,EAAIC,CAAG,EAAIC,EACtJC,EAAiB,CAACC,EAAGC,IAAM,CAC7B,QAASC,KAAQD,IAAMA,EAAI,CAAC,GACtBR,EAAa,KAAKQ,EAAGC,CAAI,GAC3BP,EAAgBK,EAAGE,EAAMD,EAAEC,CAAI,CAAC,EACpC,GAAIV,EACF,QAASU,KAAQV,EAAoBS,CAAC,EAChCP,EAAa,KAAKO,EAAGC,CAAI,GAC3BP,EAAgBK,EAAGE,EAAMD,EAAEC,CAAI,CAAC,EAEtC,OAAOF,CACT,EACIG,EAAgB,CAACH,EAAGC,IAAMX,EAAWU,EAAGT,EAAkBU,CAAC,CAAC,EAChE,MAAMG,GAAuB,CAAC,CAC5B,OAAAC,EACA,SAAAC,EACA,UAAAC,CACF,IAAM,CACJ,MAAMC,GAAmBC,GAAY,CACnCH,EAASH,EAAcJ,EAAe,CAAC,EAAGM,CAAM,EAAG,CACjD,SAAUF,EAAcJ,EAAe,CAAC,EAAGM,EAAO,QAAQ,EAAG,CAC3D,YAAaI,CACf,CAAC,CACH,CAAC,CAAC,CACJ,EACMC,EAAmBC,GAAU,CACjCL,EAASH,EAAcJ,EAAe,CAAC,EAAGM,CAAM,EAAG,CACjD,SAAUF,EAAcJ,EAAe,CAAC,EAAGM,EAAO,QAAQ,EAAG,CAC3D,QAAS,SAASM,EAAM,cAAc,MAAO,EAAE,CACjD,CAAC,CACH,CAAC,CAAC,CACJ,EACMC,GAAS,CACb,aAAW,OAAI,CACb,SAAU,GACZ,CAAC,CACH,EACA,OAAuB,gBAA6B,IAAkB,CAAE,MAAO,yBAA0B,aAAW,MAAGA,GAAO,UAAWL,CAAS,CAAE,EAAmB,gBACrK,IACA,CACE,QAAS,wBACT,MAAO,kBACP,WAAY,GACZ,QAAS,2HACT,SAAUF,EAAO,SACjB,KAAM,EACR,EACgB,gBACd,IACA,CACE,GAAI,wBACJ,YAAa,gCACb,KAAMA,EAAO,SAAS,YACtB,SAAUG,EACZ,CACF,CACF,EAAmB,gBACjB,IACA,CACE,QAAS,wBACT,MAAO,UACP,WAAY,GACZ,QAAS,kCACT,SAAUH,EAAO,SACjB,KAAM,EACR,EACgB,gBACd,IACA,CACE,GAAI,wBACJ,KAAM,SACN,IAAK,EACL,YAAa,qBACb,aAAc,qBACd,MAAOA,EAAO,SAAS,QACvB,SAAUK,CACZ,CACF,CACF,CAAC,CACH,C,yECpFO,MAAMG,EAAU,CAAC,CAAE,SAAAC,EAAW,EAAM,IAAM,CAC/C,MAAMF,KAAS,MAAWG,CAAS,EAEnC,OAAID,EACK,gBAAC,MAAG,UAAWF,EAAO,gBAAiB,EAGzC,gBAAC,MAAG,UAAWA,EAAO,QAAS,CACxC,EAEMG,EAAaC,IAA0B,CAC3C,WAAS;AAAA,cACGA,EAAM,QAAQ,EAAG,CAAC;AAAA,IAE9B,mBAAiB;AAAA;AAAA,cAELA,EAAM,QAAQ,EAAG,CAAC;AAAA,GAEhC,E,8DCpBA,MAAMC,EAAQ,OAAW,IAAM,wDAAuE,EAEzFC,EAAwBC,GAEjC,gBAAC,WAAQ,CAAC,SAAU,MAClB,gBAACF,EAAA,CAAO,GAAGE,CAAA,CAAO,CACpB,ECCSC,EAA2BD,GAAiB,CACvD,MAAME,KAAkB,UAAsB,IAAI,EAC5C,CAAE,WAAAC,EAAY,SAAAhB,EAAU,GAAGiB,CAAK,EAAIJ,EAEpCK,EAAkB1B,GAAkB,CACxCuB,EAAgB,QAAUvB,EAC1BQ,EAASR,CAAK,EACdwB,EAAW,CACb,EAEMG,EAAc3B,GAAkB,CACpCQ,EAASR,CAAK,CAChB,EAEA,OAAO,gBAACoB,EAAoB,CAAC,WAAYM,EAAgB,OAAQC,EAAY,SAAAnB,EAAqB,GAAGiB,CAAA,CAAM,CAC7G,ECNO,MAAMG,UAAuB,eAA8D,CAGhG,YAAYP,EAA4B,CACtC,MAAMA,CAAK,EAHb,gBAAa,GAgCb,mBAAgB,CAACrB,EAAe6B,IAAuB,CAErD,KAAM,CAAE,MAAAC,EAAO,SAAAtB,EAAU,WAAAgB,CAAW,EAAI,KAAK,MAC7C,GAAIhB,EAAU,CACZ,MAAMuB,EAAY,CAAE,GAAGD,EAAO,KAAM9B,CAAM,EAC1CQ,EAASuB,CAAS,EAEdF,GAAYL,GACdA,EAAW,EAGjB,EAtCE,KAAK,MAAQ,CAAE,aAAc,EAAM,CACrC,CAEA,MAAM,mBAAoB,CACxB,KAAK,WAAa,GAClB,MAAM,KAAK,MAAM,WAAW,iBAAiB,MAAM,EAC/C,KAAK,YACP,KAAK,SAAS,CAAE,aAAc,EAAK,CAAC,CAExC,CAEA,sBAAuB,CACrB,KAAK,WAAa,EACpB,CAEA,mBAAmBQ,EAAgC,CACjD,KAAM,CACJ,MAAAC,EACA,WAAY,CAAE,iBAAAC,CAAiB,CACjC,EAAI,KAAK,SACa,MAAoBD,EAAOD,EAAU,KAAK,GAG9DE,EAAiB,YAAY,CAEjC,CAeA,QAAS,CACP,KAAM,CAAE,kBAAAC,EAAmB,MAAAL,EAAO,WAAAM,EAAY,QAAAC,EAAS,WAAAb,CAAW,EAAI,KAAK,MACrEc,EAAc,KAAK,MAAM,aAAe,4CAE9C,OACE,gCACE,gBAAC,OACC,UAAU,iEACV,cAAa,KAAK,MAAM,aAAa,GAErC,gBAAC,OAAI,UAAU,4CACb,gBAAChB,EAAA,CACC,WAAAc,EACA,QAASC,GAAW,CAAC,EACrB,SAAU,KAAK,cACf,WAAAb,EACA,aAAcM,EAAM,MAAQ,GAC5B,YAAAQ,CAAA,CACF,CACF,CACF,EACCH,CACH,CAEJ,CACF,C,2FCzFA,SAASI,EAAaC,EAA8B,CAClD,OAAOC,EAAcD,EAAe,GAAI,CAC1C,CAEA,SAASC,EAAcC,EAAyB,CAC9C,OAAO,KAAK,MAAMA,EAAU,EAAE,CAChC,CAEO,SAASC,EAAoBV,EAAmBW,EAAgC,CACrF,GAAIX,GAASW,EAAW,CACtB,MAAMC,EAAiBN,EAAaN,EAAM,KAAK,QAAQ,CAAC,IAAMM,EAAaK,EAAU,KAAK,QAAQ,CAAC,EAC7FE,EAAeP,EAAaN,EAAM,GAAG,QAAQ,CAAC,IAAMM,EAAaK,EAAU,GAAG,QAAQ,CAAC,EAE7F,MAAO,EAAEC,GAAkBC,GAE7B,MAAO,EACT,CAMA,MAAMC,EAAqB,uBAC3B,SAASC,EAAiBhD,EAAuB,CAC/C,OAAOA,EAAM,QAAQ+C,EAAoB,MAAM,CACjD,CAMO,SAASE,EAAgCC,EAA4B,CAC1E,OAAOA,EAAW,QAAQ,MAAO,MAAM,EAAE,QAAQ,MAAO,KAAK,EAAE,QAAQ,KAAM,KAAK,CACpF,CAEO,SAASC,EAAmBD,EAA4B,CAC7D,OAAOA,EAAW,QAAQ,OAAQ;AAAA,CAAI,EAAE,QAAQ,OAAQ,GAAG,EAAE,QAAQ,QAAS,IAAI,CACpF,CAEO,SAASE,EAAgCF,EAA4B,CAC1E,OAAOD,EAAgCD,EAAiBE,CAAU,CAAC,CACrE,CAEO,SAASG,EAA2BH,EAAoBI,EAA2B,CACxF,OAAOC,EAAgBD,CAAQ,EAC3BF,EAAgCF,CAAU,EAC1CD,EAAgCC,CAAU,CAChD,CAEO,SAASK,EAAgBD,EAAmB,CACjD,MAAI,GAAAA,IAAaA,EAAS,SAAS,IAAI,GAAKA,EAAS,SAAS,IAAI,GAIpE,CAEO,SAASE,EAAcC,EAAgB,CAC5C,MAAMC,EAAiB,CACrB,IACA,MACA,MACA,KACA,KACA,MACA,MACA,KACA,KACA,MACA,MACA,KACA,KACA,MACA,MACA,KACA,KACA,MACA,MACA,KACA,KACA,MACA,MACA,KACA,IACF,EACMC,EAAQ,IAAI,OAAO,6BAA6BD,EAAe,KAAK,GAAG,KAAK,EAElF,MAAO,CAAC,CADMD,EAAO,MAAME,CAAK,CAElC,C,uHChFA,MAAMC,EAAmB,CAAC,4BAA4B,EAChDC,EAAmB,CAAC,MAAO,MAAO,SAAS,EAC3CC,EAAiB,EAEjBC,EAAiB,CACrB,CACE,MAAO,eACP,WAAY,uDACZ,MACE,kIACJ,EACA,CACE,MAAO,kBACP,WAAY,qCACZ,MAAO,qFACT,EACA,CACE,MAAO,OACP,WAAY,qDACZ,MACE,8GACJ,EACA,CACE,MAAO,8BACP,WAAY,qDACZ,MAAO,wEACT,CACF,EAEe,MAAMC,UAAuB,eAA2E,CAAvH,kCAEE,WAAQ,CACN,aAAc,CAAC,CACjB,EAeA,qBAAkB,SAAY,CAE5B,MAAMC,EAAiC,KAAK,MAAM,YAAY,iBAC9D,GAAIA,EAAS,QAAS,CACpB,MAAMC,EAASD,EAAS,aAAa,GAAK,CAAC,EACrCE,EAAiBN,EAAiB,KAAM,GAAMK,EAAO,SAAS,CAAC,CAAC,EACtE,GAAIC,EAAgB,CAClB,MAAMC,EAAS,MAAMH,EAAS,eAAeE,CAAc,EACrDE,KAAe,WAAQD,CAAM,EAChC,MAAM,EAAGN,CAAc,EACvB,IAAK9D,GAAU,IAAImE,MAAmBnE,KAAS,EAClD,KAAK,SAAS,CAAE,aAAAqE,CAAa,CAAC,QAGhC,KAAK,0BAA0B,CAEnC,EA7BA,mBAAoB,CAClB,KAAK,0BAA0B,KAC/B,MAAkB,iCAAkC,CAAC,CAAC,CACxD,CAEA,sBAAuB,CACrB,aAAa,KAAK,cAAc,CAClC,CAEA,2BAA4B,CAC1B,KAAK,eAAiB,WAAW,KAAK,gBAAiB,GAAI,CAC7D,CAoBA,iBAAiBC,EAAc,CAC7B,KAAM,CAAE,eAAAC,CAAe,EAAI,KAAK,MAC1BC,EAAW1C,GAAqB,CACpCyC,EAAezC,CAAK,KACpB,MAAkB,0CAA2C,CAAC,CAAC,CACjE,EAEA,OACE,gBAAC,UACC,KAAK,SACL,UAAU,4BACV,IAAKwC,EACL,QAAUG,GAAMD,EAAQ,CAAE,MAAO,IAAK,KAAAF,CAAK,CAAC,GAE5C,gBAAC,YAAMA,CAAK,CACd,CAEJ,CAEA,QAAS,CACP,KAAM,CAAE,aAAAD,CAAa,EAAI,KAAK,MACxBK,EAAkBL,EAAa,OAAS,EAE9C,OACE,gBAAC,WACC,gBAAC,UAAG,kBAAgB,EACpB,gBAAC,OAAI,UAAU,oBACb,gBAAC,OAAI,UAAU,2BAA0B,eAAa,EACtD,gBAAC,OAAI,UAAU,2BAA0B,gIAGzC,EACCK,EACC,gBAAC,WACC,gBAAC,OAAI,UAAU,2BAA0B,+CAA6C,EACrFL,EAAa,IAAKM,GAAY,KAAK,iBAAiBA,CAAO,CAAC,CAC/D,EAEA,gBAAC,WACC,gBAAC,OAAI,UAAU,2BAA0B,qCAAmC,EAC3E,KAAK,iBAAiBf,EAAiB,CAAC,CAAC,CAC5C,CAEJ,EACA,gBAAC,OAAI,UAAU,oBACb,gBAAC,OAAI,UAAU,2BAA0B,0BAAwB,EAChE,KAAK,iBAAiB,oCAAoC,EAC3D,gBAAC,OAAI,UAAU,2BAA0B,2DAAyD,CACpG,EAEA,gBAAC,OAAI,UAAU,oBACb,gBAAC,OAAI,UAAU,2BAA0B,6BAA2B,EACnE,KAAK,iBAAiB,6DAA6D,EACnF,KAAK,iBAAiB,oCAAoC,EAC1D,KAAK,iBAAiB,qCAAqC,EAC5D,gBAAC,OAAI,UAAU,2BACb,gBAAC,KAAE,KAAK,2DAA2D,OAAO,SAAQ,OAElF,EAAK,IAAI,gDAEX,CACF,EACCG,EAAe,IAAKa,GACnB,gBAAC,OAAI,UAAU,mBAAmB,IAAKA,EAAK,YAC1C,gBAAC,OAAI,UAAU,2BAA2BA,EAAK,KAAM,EACpD,KAAK,iBAAiBA,EAAK,UAAU,EACtC,gBAAC,OAAI,UAAU,2BAA2BA,EAAK,KAAM,CACvD,CACD,CACH,CAEJ,CACF,C,qUC3HA,MAAMC,GAAkB,IAClBC,GAAkB,IAClBC,GAAkB,EAClBC,GAAiB,KAuChB,SAASC,EAAcf,EAAmC,CAC/D,MAAMgB,EAAiB,CAAC,EACxB,UAAWC,KAASjB,EAClB,GAAIiB,EAAM,UAAYA,EAAM,QAAUA,EAAM,OAAO,OAAS,EAAG,CAC7D,MAAMC,EAAiBD,EAAM,OAAO,OAAQnF,GAAUA,EAAM,QAAQ,EAAE,IAAKA,GAAUA,EAAM,IAAI,EAC3FoF,EAAe,OAAS,EAC1BF,EAAe,KAAK,GAAGC,EAAM,UAAUC,EAAe,IAAI,KAA+B,EAAE,KAAK,GAAG,IAAI,EAC9FA,EAAe,SAAW,GACnCF,EAAe,KAAK,GAAGC,EAAM,YAAS,OAAgCC,EAAe,CAAC,CAAC,IAAI,EAIjG,MAAO,CAAC,IAAKF,EAAe,KAAK,GAAG,EAAG,GAAG,EAAE,KAAK,EAAE,CACrD,CAEO,SAASG,GACdnB,EACAoB,EACAC,EACmB,CACnB,OAAOrB,EAAO,IAAKiB,GAAU,CAC3B,MAAMK,EAAiBF,EAAeH,EAAM,IAAI,EAChD,GAAIK,EAAgB,CAClB,IAAIC,EACJ,GAAIN,EAAM,OAASI,GAAgBJ,EAAM,OAEvCM,EAAiBN,EAAM,WAClB,CAEL,MAAMC,EAA8B,IAAI,IACtCD,EAAM,QAAQ,OAAQnF,GAAUA,EAAM,QAAQ,EAAE,IAAKA,GAAUA,EAAM,IAAI,GAAK,CAAC,CACjF,EAEAyF,EAAiBD,EAAe,IAAKxF,IAAW,CAAE,KAAMA,EAAO,SAAUoF,EAAe,IAAIpF,CAAK,CAAE,EAAE,EAEvG,MAAO,CAAE,GAAGmF,EAAO,QAAS,GAAO,OAAQM,EAAgB,OAAQA,EAAe,MAAO,EAI3F,MAAO,CAAE,GAAGN,EAAO,QAAS,GAAO,OAAQ,CAACK,EAAgB,OAAQ,OAAW,OAAQ,CAAE,CAC3F,CAAC,CACH,CAEA,MAAMvE,GAAaC,IAA0B,CAC3C,WAAS;AAAA,wBACaA,EAAM,OAAO,WAAW;AAAA;AAAA,IAG9C,kBAAgB;AAAA,eACHA,EAAM,QAAQ,CAAC;AAAA,IAE5B,QAAM;AAAA,kBACUA,EAAM,QAAQ,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,IAM/B,WAAS;AAAA;AAAA,gBAEKA,EAAM,QAAQ,EAAG,CAAC;AAAA;AAAA;AAAA;AAAA,IAKhC,uBAAqB;AAAA,eACRA,EAAM,QAAQ,CAAC;AAAA,wBACNA,EAAM,OAAO,WAAW;AAAA;AAAA,eAEjCA,EAAM,QAAQ,CAAC;AAAA;AAAA,IAG5B,YAAU;AAAA,mBACOA,EAAM,WAAW;AAAA,qBACfA,EAAM,QAAQ,CAAC;AAAA;AAAA,IAGlC,UAAQ;AAAA,qBACWA,EAAM,QAAQ,CAAC;AAAA,aACvBA,EAAM,OAAO,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAMdA,EAAM,WAAW,UAAU;AAAA,mBACzBA,EAAM,WAAW,UAAU;AAAA,IAE5C,iBAAe;AAAA;AAAA,IAGf,SAAO;AAAA,aACIA,EAAM,OAAO,MAAM;AAAA,IAE9B,aAAW;AAAA,oBACOA,EAAM,QAAQ,CAAC;AAAA;AAAA,IAGjC,oBAAkB;AAAA,6BACSA,EAAM,OAAO,OAAO;AAAA,cACnCA,EAAM,QAAQ,EAAG,CAAC;AAAA,eACjBA,EAAM,QAAQ,EAAG,EAAG,EAAG,CAAC;AAAA,IAErC,iBAAe;AAAA;AAAA;AAAA,kBAGCA,EAAM,QAAQ,CAAC;AAAA,IAE/B,cAAY;AAAA,oBACMA,EAAM,QAAQ,EAAG;AAAA,qBAChBA,EAAM,QAAQ,CAAC;AAAA,IAElC,oBAAkB;AAAA,eACLA,EAAM,QAAQ,EAAG;AAAA,qBACXA,EAAM,QAAQ,CAAC;AAAA,aACvBA,EAAM,OAAO,KAAK;AAAA;AAAA;AAAA;AAAA,GAK/B,GAEO,MAAMwE,WAAiC,WAA4C,CAAnF,kCACL,WAAsB,CACpB,OAAQ,CAAC,EACT,WAAY,GACZ,OAAQ,QACR,MAAO,GACP,iBAAkB,EACpB,EAEA,oBAAkB7E,GAAyC,CACzD,KAAK,SAAS,CAAE,WAAYA,EAAM,OAAO,KAAM,CAAC,CAClD,EAEA,yBAAsB,IAAM,IAC1B,MAAkB,oCAAqC,CACrD,IAAK,KAAK,MAAM,IAChB,UAAW,gBACb,CAAC,EACD,MAAMyC,EAAW2B,EAAc,KAAK,MAAM,MAAM,EAChD,KAAK,MAAM,SAAS3B,CAAQ,CAC9B,EAEA,4BAAyB,IAAM,IAC7B,MAAkB,oCAAqC,CACrD,IAAK,KAAK,MAAM,IAChB,UAAW,oBACb,CAAC,EAED,MAAMxB,EAAQ,QADGmD,EAAc,KAAK,MAAM,MAAM,cAEhD,KAAK,MAAM,SAASnD,CAAK,CAC3B,EAEA,kBAAe,IAAM,CACnB,KAAK,SAAU6D,IASN,CAAE,OARyBA,EAAM,OAAO,IAAKR,IAAW,CAC7D,GAAGA,EACH,OAAQ,OACR,SAAU,GACV,QAAS,GACT,OAAQ,GACR,OAAQ,MACV,EAAE,EACe,WAAY,GAAI,OAAQ,GAAI,MAAO,GAAI,iBAAkB,EAAG,EAC9E,EACD,KAAK,MAAM,qBAAqB,CAClC,EAEA,kBAAe,CAACS,EAAc5F,EAA2Ba,IAAyC,CAChG,MAAMsE,EAAQ,KAAK,MAAM,OAAO,KAAMU,GAAMA,EAAE,OAASD,CAAI,EAC3D,GAAI,CAACT,EACH,OAGF,MAAMW,EAAW,CAACX,EAAM,SACxB,IAAIY,EAAsC,CAAE,SAAAD,CAAS,EACrD,GAAIX,EAAM,QAAU,CAACW,EAAU,CAE7B,MAAM1B,EAASe,EAAM,OAAO,IAAKnF,IAAW,CAAE,GAAGA,EAAO,SAAU,EAAM,EAAE,EAC1E+F,EAAY,CAAE,GAAGA,EAAW,OAAQ,EAAG,OAAA3B,CAAO,EAGhD,KAAK,SAAS,CAAE,WAAY,EAAG,CAAC,EAChC,KAAK,iBAAiBwB,EAAMG,EAAW,GAAI,IAAM,KAAK,oBAAoBH,CAAI,CAAC,CACjF,EAEA,kBAAe,CAACA,EAAc5F,EAA2Ba,IAAyC,CAChG,MAAMsE,EAAQ,KAAK,MAAM,OAAO,KAAMU,GAAMA,EAAE,OAASD,CAAI,EAC3D,GAAI,CAACT,GAAS,CAACA,EAAM,OACnB,OAGF,KAAK,SAAS,CAAE,WAAY,EAAG,CAAC,EAEhC,MAAMf,EAASe,EAAM,OAAO,IAAKa,IAAO,CAAE,GAAGA,EAAG,SAAUA,EAAE,OAAShG,EAAQ,CAACgG,EAAE,SAAWA,EAAE,QAAS,EAAE,EACxG,KAAK,iBAAiBJ,EAAM,CAAE,OAAAxB,CAAO,EAAG,GAAI,IAAM,KAAK,YAAYwB,CAAI,CAAC,CAC1E,EAEA,qBAAkB,IAAM,CACtB,MAAMtC,EAAW2B,EAAc,KAAK,MAAM,MAAM,EAChD,KAAK,iBAAiB3B,CAAQ,CAChC,EA+DA,iBAAeiC,GAA0B,CACvC,MAAMjC,EAAW2B,EAAc,KAAK,MAAM,MAAM,EAChD,GAAI3B,IAAa0B,GAAgB,CAE/B,MAAMd,EAA4B,KAAK,MAAM,OAAO,IAAKiB,IAChD,CAAE,GAAGA,EAAO,OAAQ,EAAG,OAAQ,OAAW,OAAQ,EAAM,EAChE,EACD,KAAK,SAAS,CAAE,OAAAjB,CAAO,EAAG,IAAM,CAE9B,KAAK,MAAM,OAAO,QAASiB,GAAUA,EAAM,UAAY,KAAK,YAAYA,EAAM,KAAM7B,CAAQ,CAAC,CAC/F,CAAC,OAGD,KAAK,YAAYA,EAAUiC,CAAY,CAE3C,EA5EA,iBAAiBK,EAAcK,EAAyCC,EAAS,GAAIC,EAAiB,CACpG,KAAK,SAAUR,GAAU,CACvB,MAAMzB,EAA4ByB,EAAM,OAAO,IAAKR,GAC9CA,EAAM,OAASS,EACV,CAAE,GAAGT,EAAO,GAAGc,CAAc,EAE/Bd,CACR,EAEKiB,EAAQF,EAAS,GAAKP,EAAM,MAClC,MAAO,CAAE,OAAAzB,EAAQ,OAAAgC,EAAQ,MAAAE,EAAO,iBAAkB,EAAG,CACvD,EAAGD,CAAE,CACP,CAEA,mBAAoB,CAClB,KAAM,CAAE,iBAAAjE,EAAkB,WAAAmE,EAAatB,GAAiB,eAAAuB,CAAe,EAAI,KAAK,MAChF,GAAIpE,EAAkB,CACpB,MAAMgD,EAA2BoB,EACjCpE,EAAiB,MAAM,EAAE,KAAK,IAAM,CAClC,IAAIqE,EAAsBrE,EAAiB,aAAa,EACxD,GAAIqE,EAAU,OAAS1B,GAAiB,CACtC,MAAMuB,EAAQ,uCAAuCvB,SAAsB0B,EAAU,UACrFA,EAAYA,EAAU,MAAM,EAAG1B,EAAe,EAC9C,KAAK,SAAS,CAAE,MAAAuB,CAAM,CAAC,EAGzB,MAAMlC,EAA4BqC,EAAU,IAAI,CAACpB,EAAOqB,EAAGC,KAAS,CAClE,KAAMtB,EACN,SAAWsB,EAAI,QAAUJ,GAAcnB,EAAe,SAAW,GAAMA,EAAe,SAASC,CAAK,EACpG,QAAS,EACX,EAAE,EAEF,KAAK,SAAS,CAAE,OAAAjB,CAAO,EAAG,IAAM,CAC9B,KAAK,MAAM,OAAO,QAASiB,GAAU,CAC/BA,EAAM,UACR,KAAK,YAAYA,EAAM,KAAMH,EAAc,CAE/C,CAAC,CACH,CAAC,CACH,CAAC,EAEL,CAEA,oBAAoBY,EAAc,CAChC,MAAMT,EAAQ,KAAK,MAAM,OAAO,KAAM,GAAM,EAAE,OAASS,CAAI,EAC3D,GAAI,CAACT,EACH,OAEF,MAAMD,EAAiB,KAAK,MAAM,OAAO,OAAQC,GAAUA,EAAM,QAAQ,EAAE,IAAKA,GAAUA,EAAM,IAAI,EACpG,KAAK,MAAM,oBAAoBD,CAAc,EACzCC,EAAM,SAEHA,EAAM,QACT,KAAK,YAAYS,EAAMX,EAAc,KAAK,MAAM,MAAM,CAAC,EAIzD,KAAK,YAAY,CAErB,CAmBA,MAAM,YAAYW,EAActC,EAAkB,CAChD,KAAM,CAAE,iBAAApB,CAAiB,EAAI,KAAK,MAClC,KAAK,iBAAiB0D,EAAM,CAAE,QAAS,EAAK,EAAG,uBAAuBA,GAAM,EAC5E,GAAI,CACF,IAAIc,EAAY,MAAMxE,EAAiB,eAAe0D,CAAI,EAE1D,GAAItC,IAAa2B,EAAc,KAAK,MAAM,MAAM,EAAG,CACjD,KAAK,iBAAiBW,EAAM,CAAE,QAAS,EAAM,EAAG,EAAE,EAClD,OAEF,GAAIc,EAAU,OAAS5B,GAAiB,CACtC,MAAMsB,EAAQ,uBAAuBR,mBAAsBd,SAAsB4B,EAAU,UAC3FA,EAAYA,EAAU,MAAM,EAAG5B,EAAe,EAC9C,KAAK,SAAS,CAAE,MAAAsB,CAAM,CAAC,EAEzB,MAAMhC,EAA4BsC,EAAU,IAAK1G,IAAW,CAAE,KAAMA,CAAM,EAAE,EAC5E,KAAK,iBAAiB4F,EAAM,CAAE,OAAAxB,EAAQ,QAAS,EAAM,CAAC,CACxD,OAASgC,EAAP,CACA,QAAQ,MAAMA,CAAK,CACrB,CACF,CAEA,MAAM,YAAY9C,EAAkBiC,EAAuB,CACzD,KAAM,CAAE,iBAAArD,CAAiB,EAAI,KAAK,MAC9BqD,GACF,KAAK,iBAAiBA,EAAc,CAAE,QAAS,EAAK,EAAG,sBAAsBjC,GAAU,EAEzF,GAAI,CACF,MAAMgC,EAAiB,MAAMpD,EAAiB,kBAAkBoB,EAAU,EAAI,EAE9E,GAAIA,IAAa2B,EAAc,KAAK,MAAM,MAAM,EAAG,CAC7CM,GACF,KAAK,iBAAiBA,EAAc,CAAE,QAAS,EAAM,CAAC,EAExD,OAEF,GAAI,OAAO,KAAKD,CAAc,EAAE,SAAW,EAAG,CAC5C,KAAK,SAAS,CAAE,MAAO,wCAAwChC,GAAW,CAAC,EAC3E,OAEF,MAAMY,EAA4BmB,GAAY,KAAK,MAAM,OAAQC,EAAgBC,CAAY,EAC7F,KAAK,SAAS,CAAE,OAAArB,EAAQ,MAAO,EAAG,CAAC,EAC/BqB,GACF,KAAK,iBAAiBA,EAAc,CAAE,QAAS,EAAM,CAAC,CAE1D,OAASa,EAAP,CACA,QAAQ,MAAMA,CAAK,CACrB,CACF,CAEA,MAAM,iBAAiB9C,EAAkB,CACvC,KAAM,CAAE,iBAAApB,CAAiB,EAAI,KAAK,MAClC,KAAK,SAAS,CAAE,iBAAkB,uBAAuBoB,IAAY,MAAO,EAAG,CAAC,EAChF,MAAMqD,EAAU,MAAMzE,EAAiB,YAAYoB,CAAQ,EAC3D,KAAK,SAAS,CAAE,iBAAkB,sBAAsBqD,EAAQ,uBAAwB,CAAC,CAC3F,CAEA,QAAS,CACP,KAAM,CAAE,MAAAzF,CAAM,EAAI,KAAK,MACjB,CAAE,OAAAgD,EAAQ,WAAA0C,EAAY,OAAAV,EAAQ,MAAAE,EAAO,iBAAAS,CAAiB,EAAI,KAAK,MACrE,GAAI3C,EAAO,SAAW,EACpB,OAAO,gBAAC4C,GAAA,EAAkB,CAAC,KAAK,mBAAoB,GAEtD,MAAMhG,EAASG,GAAUC,CAAK,EACxBoC,EAAW2B,EAAc,KAAK,MAAM,MAAM,EAC1C8B,EAAQzD,IAAa0B,GAE3B,IAAIE,EAAiBhB,EAAO,OAAQiB,GAAUA,EAAM,UAAYA,EAAM,MAAM,EAC5E,OAAIyB,EACF1B,EAAiBA,EAAe,IAAKC,GAAU,CAC7C,MAAM6B,EAAgB7B,EAAM,OAAQ,OAAQnF,GAAU,CAEpD,GAAIA,EAAM,SACR,OAAAA,EAAM,eAAiB,OAChB,GAET,MAAMiH,KAAmBC,GAAA,GAAWlH,EAAM,KAAK,YAAY,EAAG4G,EAAW,YAAY,CAAC,EACtF,OAAIK,EAAiB,OACnBjH,EAAM,eAAiBiH,EAAiB,OACxCjH,EAAM,MAAQiH,EAAiB,SACxB,IAEA,EAEX,CAAC,EACD,MAAO,CACL,GAAG9B,EACH,UAAQ,UAAO6B,EAAgBhH,GAAWA,EAAM,SAAW,KAAYA,EAAM,KAAM,CACrF,CACF,CAAC,EAGDkF,EAAiB,KAAK,MAAM,OACzB,OAAQC,GAAUA,EAAM,UAAYA,EAAM,MAAM,EAChD,IAAKA,IAAW,CACf,GAAGA,EACH,OAAQA,GAAO,OAASA,EAAM,OAAO,IAAKnF,IAAW,CAAE,GAAGA,EAAO,eAAgB,MAAU,EAAE,EAAI,CAAC,CACpG,EAAE,EAIJ,gCACE,gBAAC,OAAI,UAAWc,EAAO,SACrB,gBAAC,OAAI,aAAW,MAAGA,EAAO,QAASA,EAAO,cAAc,GACtD,gBAACqG,GAAA,EAAK,CAAC,YAAY,4DAA2D,+BAE9E,EACA,gBAAC,OAAI,UAAWrG,EAAO,MACpBoD,EAAO,IAAKiB,GACX,gBAAC,MACC,IAAKA,EAAM,KACX,KAAMA,EAAM,KACZ,QAASA,EAAM,QACf,OAAQA,EAAM,SACd,OAAQA,EAAM,OACd,OAAQA,EAAM,OACd,QAAS,KAAK,aAChB,CACD,CACH,CACF,EACA,gBAAC,OAAI,aAAW,MAAGrE,EAAO,QAASA,EAAO,cAAc,GACtD,gBAACqG,GAAA,EAAK,CAAC,YAAY,iIAAgI,wCAEnJ,EACA,gBAAC,WACC,gBAACC,GAAA,GACC,SAAU,KAAK,eACf,aAAW,+BACX,MAAOR,EACP,YAAa,sBACf,CACF,EACA,gBAAC,OAAI,UAAW9F,EAAO,eACpBoE,EAAe,IAAKC,GACnB,gBAAC,OAAI,KAAK,OAAO,IAAKA,EAAM,KAAM,UAAWrE,EAAO,kBAClD,gBAAC,OAAI,UAAWA,EAAO,WAAY,aAAY,cAAcqE,EAAM,QACjE,gBAAC,MACC,KAAMA,EAAM,KACZ,QAASA,EAAM,QACf,OAAQA,EAAM,SACd,OAAQA,EAAM,OAEd,OAAQA,EAAM,QAAUA,EAAM,QAAQ,OACtC,QAAS,KAAK,aAChB,CACF,EACA,gBAAC,OACC,OAAQ,IACR,UAAWA,EAAM,QAAQ,QAAU,EACnC,SAAU,GACV,QAAUqB,GAAOrB,EAAM,OAA6BqB,CAAC,EAAE,KACvD,MAAO,IACP,UAAW1F,EAAO,WAEjB,CAAC,CAAE,MAAAuG,EAAO,MAAAC,CAAM,IAAM,CACrB,MAAMtH,EAAQmF,EAAM,SAASkC,CAAK,EAClC,OAAKrH,EAIH,gBAAC,OAAI,MAAAsH,CAAA,EACH,gBAAC,MACC,KAAMnC,EAAM,KACZ,MAAOnF,GAAO,KACd,OAAQA,GAAO,SACf,eAAgBA,GAAO,eACvB,QAAS,KAAK,aACd,WAAA4G,CAAA,CACF,CACF,EAZO,IAcX,CACF,CACF,CACD,CACH,CACF,CACF,EACA,gBAAC,OAAI,UAAW9F,EAAO,qBACrB,gBAACqG,GAAA,EAAK,KAAC,uBAAqB,EAC5B,gBAAC,OAAI,aAAW,WAAW,UAAWrG,EAAO,UAC1CwC,CACH,EACCuD,GAAoB,gBAAC,OAAI,UAAW/F,EAAO,kBAAmB+F,CAAiB,EAChF,gBAAC,OAAI,aAAW,MAAG/F,EAAO,QAASoF,GAAUE,IAAUtF,EAAO,aAAa,GACzE,gBAAC,QAAK,UAAWsF,EAAQtF,EAAO,MAAQ,IAAKsF,GAASF,CAAO,CAC/D,EACA,gBAAC,MAAe,KACd,gBAACqB,EAAA,GAAM,CAAC,aAAW,8BAA8B,SAAUR,EAAO,QAAS,KAAK,qBAAqB,WAErG,EACA,gBAACQ,EAAA,IACC,aAAW,iCACX,QAAQ,YACR,SAAUR,EACV,QAAS,KAAK,wBACf,gBAED,EACA,gBAACQ,EAAA,IACC,aAAW,yBACX,QAAQ,YACR,SAAUR,EACV,QAAS,KAAK,iBACf,mBAED,EACA,gBAACQ,EAAA,GAAM,CAAC,aAAW,wBAAwB,QAAQ,YAAY,QAAS,KAAK,cAAc,OAE3F,CACF,CACF,CACF,CAEJ,CACF,CAEO,MAAMC,MAAmB,MAAW9B,EAAwB,EChiBtD+B,GAAqBpG,GAAiB,CACjD,KAAM,CAAE,OAAAqG,EAAQ,QAAAC,EAAS,WAAAvF,EAAY,IAAAwF,CAAI,EAAIvG,EACvC,CAACwG,EAAcC,CAAe,KAAI,YAAS,EAAK,EAChD,CAACC,EAAcC,CAAe,KAAI,YAAS,EAAK,EAChDC,EAAuB,0CAEvBnH,KAAS,MAAW,EAAS,KAEnC,aAAU,IAAM,CACT4G,GAILtF,EAAW,iBAAiB,YAAY,EAAE,KAAM8B,GAAW,CACzD4D,EAAgB,EAAI,EACpBE,EAAgB9D,EAAO,OAAS,CAAC,CACnC,CAAC,CACH,EAAG,CAAC9B,EAAYsF,CAAM,CAAC,EAEvB,MAAMQ,EAAelI,GAAkB,CACrC,KAAM,CAAE,MAAA8B,EAAO,SAAAtB,EAAU,WAAAgB,CAAW,EAAIH,EAClCU,EAAY,CAAE,GAAGD,EAAO,KAAM9B,CAAM,EAC1CQ,EAASuB,CAAS,EAClBP,EAAW,CACb,EAEMhB,EAAY8C,GAAqB,CACrC4E,EAAY5E,CAAQ,EACpBqE,EAAQ,CACV,EAEMQ,EAA4B,IAAM,IACtC,MAAkB,oCAAqC,CACrD,IAAAP,EACA,UAAW,YACb,CAAC,EACDD,EAAQ,CACV,EAEA,OACE,gBAACS,GAAA,EAAK,CAAC,OAAAV,EAAgB,MAAM,gBAAgB,UAAWS,EAA2B,UAAWrH,EAAO,OAClG,CAAC+G,GAAgB,gBAACf,GAAA,EAAkB,CAAC,KAAK,mBAAoB,GAC9De,GAAgB,CAACE,GAAgB,gBAAC,SAAE,kBAAgB,EACpDF,GAAgBE,GACf,gBAACM,GAAA,EAAyB,CAAW,WAAYJ,EAAsB,aAAc,CAAC,GACnF,CAAC3B,EAAgBgC,EAAsBC,IAEpC,gBAACf,GAAA,CACC,iBAAkBpF,EAAW,iBAC7B,SAAA5B,EACA,eAAA8F,EACA,oBAAqBgC,EACrB,qBAAsBC,EACtB,IAAAX,CAAA,CACF,CAGN,CAEJ,CAEJ,EAEM,GAAa1G,IACV,CACL,SAAO;AAAA;AAAA,QAEHA,EAAM,YAAY,KAAK,IAAI;AAAA;AAAA;AAAA,KAIjC,G,oLCrEK,SAASsH,GAAgB,CAC9B,KAAA5D,EACA,MAAA6D,EACA,UAAAC,EACA,SAAAlI,EACA,SAAAmI,EACA,gBAAAC,EACA,iBAAAC,EACA,aAAAC,EACA,aAAAC,CACF,EAAU,CACR,KAAM,CAACpD,EAAOqD,CAAQ,KAAI,YAKvB,CAAC,CAAC,EAIC,CAACC,EAAoBC,CAAqB,KAAI,YAAS,EAAK,EAC5D,CAACC,EAAqBC,CAAsB,KAAI,YAAS,EAAK,EAC9DC,EAAyC,qCAEzCC,EAAgB,CAACC,EAAW3E,EAAK,KAC9B4E,GAAU,KAAMC,GAAOA,EAAG,QAAUF,CAAQ,GAAG,aAGlDG,EAA8B9E,GAC9BA,EACEA,EAAK,QAAQ,GAAG,EAAI,EACfA,EAAK,MAAM,GAAG,EAEhB,CAACA,CAAI,EAEP,CAAC,EAGJ+E,EAAa,IAAyB,CAC1C,MAAMC,EAAcjE,EAAM,YAAc,CAAC,GAAGA,EAAM,WAAW,EAAI,CAAC,EAC5DkE,EAAkBH,EAA2B9E,GAAM,KAAK,EAAE,IAAI,IAAQ,EAG5E,SAAO,UAAO,CAAC,GAAGiF,EAAiB,GAAGD,CAAW,EAAG,OAAO,CAC7D,EAEME,KAAgB,OAAsBlF,EAAM6D,CAAK,EAEvD,OACE,gBAAC,OAAI,cAAY,qCACf,gBAACsB,GAAA,EAAW,CAAC,MAAOV,EAAwC,QAASS,EAAgB,GAAO,QAC1F,gBAACE,GAAA,EAAU,KACT,gBAACC,GAAA,IACC,YAAY,eACZ,aAAYC,EAAA,GAAU,WAAW,aAAa,YAC9C,QAAQ,wCACR,MAAM,OACN,MAAOtF,EAAK,SAAQ,MAASA,EAAK,KAAK,EAAI,KAC3C,iBAAgB,GAChB,WAAY,SAAY,CACtBoE,EAAS,CAAE,oBAAqB,EAAK,CAAC,EACtC,MAAMmB,EAAa,MAAMvB,EAAgBhE,CAAI,EAC7CsE,EAAsB,EAAI,EAC1BF,EAAS,CAAE,WAAAmB,EAAY,oBAAqB,MAAU,CAAC,CACzD,EACA,YAAa,IAAM,CACjBjB,EAAsB,EAAK,CAC7B,EACA,OAAQD,EACR,UAAWtD,EAAM,oBACjB,QAASA,EAAM,WACf,SAAWyE,GAAW,CAChBA,EAAO,OACT5J,EAAS,CACP,GAAGoE,EACH,GAAIA,EAAK,IAAM8D,EACf,MAAO0B,EAAO,KAChB,CAAuC,CAE3C,EACA,QAASN,GAAiBhB,CAAA,CAC5B,EAEA,gBAACmB,GAAA,IACC,aAAYC,EAAA,GAAU,WAAW,aAAa,oBAC9C,SAAO,MAAStF,EAAK,IAAM8D,CAAS,EACpC,QAASc,GACT,MAAM,OACN,SAAWY,GAAW,CAChBA,EAAO,OAAS,MAClB5J,EAAS,CACP,GAAGoE,EACH,GAAIwF,EAAO,MACX,MAAOd,EAAcc,EAAO,KAAK,EAAIxF,EAAK,MAAQ8E,EAA2B9E,GAAM,KAAK,EAAE,CAAC,CAC7F,CAAuC,CAE3C,EACA,QAASkF,CAAA,CACX,EAEA,gBAACG,GAAA,IACC,YAAY,eACZ,aAAYC,EAAA,GAAU,WAAW,aAAa,YAC9C,QAAQ,0CACR,MAAM,OACN,MACEZ,EAAc,EACVI,EAA2B9E,GAAM,KAAK,EAAE,IAAI,IAAQ,EACpD8E,EAA2B9E,GAAM,KAAK,EAAE,IAAI,IAAQ,EAAE,CAAC,EAE7D,iBAAgB,GAChB,WAAY,SAAY,CACtBoE,EAAS,CAAE,qBAAsB,EAAK,CAAC,EACvC,MAAMY,EAAc,MAAMf,EAAiBjE,CAAI,EAC/CoE,EAAS,CACP,GAAGrD,EACH,YAAAiE,EACA,qBAAsB,MACxB,CAAC,EACDR,EAAuB,EAAI,CAC7B,EACA,YAAa,IAAM,CACjBA,EAAuB,EAAK,CAC9B,EACA,OAAQD,EACR,QAASG,EAAc,EACvB,UAAW3D,EAAM,qBACjB,QAASgE,EAAW,EACpB,SAAWS,GAAW,CACpB,GAAIA,EAAO,MACT5J,EAAS,CACP,GAAGoE,EACH,MAAOwF,EAAO,MACd,GAAIxF,EAAK,IAAM8D,CACjB,CAAuC,MAClC,CACL,MAAM2B,EAAUD,EACb,IAAKA,IACGA,GAAO,KACf,EACA,KAAK,GAAG,EACX5J,EAAS,CAAE,GAAGoE,EAAM,MAAOyF,EAAS,GAAIzF,EAAK,IAAM8D,CAAU,CAAuC,EAExG,EACA,QAASoB,GAAiBf,CAAA,CAC5B,EACA,gBAACuB,GAAA,EAAe,CAAC,aAAW,SAAS,KAAK,QAAQ,QAAQ,YAAY,QAAS3B,CAAA,CAAU,CAC3F,CACF,CACF,CAEJ,CAEA,MAAMa,GAAY,CAChB,MAAc,OACd,MAAc,aACd,MAAc,aACd,MAAc,iBAChB,EC5Kae,GAAqC,mDAW3C,SAASC,GAAa,CAC3B,cAAAC,EACA,SAAAjK,EACA,gBAAAoI,EACA,iBAAAC,EACA,oBAAA6B,CACF,EAAU,CACR,MAAMhC,EAAY,IACZ,CAACD,EAAOkC,CAAQ,KAAI,YAAkD,CAAC,CAAE,GAAIjC,CAAU,CAAC,CAAC,KAE/F,aAAU,IAAM,CACV+B,EAAc,OAAS,EACzBE,EAASF,CAAa,EAEtBE,EAAS,CAAC,CAAE,GAAIjC,CAAU,CAAC,CAAC,CAEhC,EAAG,CAAC+B,CAAa,CAAC,EAElB,MAAMG,EAAkBC,GAAsD,CAC5EF,EAASE,CAAQ,EAGjB,MAAMC,EAAYD,EAAS,OAAQE,GAAMA,EAAE,OAAS,MAAQA,EAAE,OAAS,IAAI,KACtE,WAAQD,EAAWL,CAAa,GACnCjK,EAASsK,CAAsC,CAEnD,EAEME,EAAiBvC,EAAM,KAAM7D,GAASA,EAAK,OAASA,EAAK,KAAK,EAEpE,OACE,gBAACqG,GAAA,EAAgB,KACf,gBAACC,EAAA,GACC,MAAM,gBACN,MAAOX,GACP,QAASG,GAAuB,CAACM,CAAA,EAEjC,gBAACG,GAAA,GACC,MAAA1C,EACA,SAAUmC,EACV,WAAY,CAAChG,EAAwCwG,EAAczC,IACjE,gBAACH,GAAA,CACC,KAAA5D,EACA,MAAA6D,EACA,UAAAC,EACA,SAAU0C,EACV,SAAAzC,EACA,gBAAAC,EACA,iBAAAC,EACA,aAAc6B,GAAuB,CAAC9F,EAAK,MAC3C,aAAc8F,GAAuB,CAAC9F,EAAK,MAC7C,EAEJ,CACF,CACF,CAEJ,C,sFClEO,MAAMyG,GAA+B,8CAM/BC,GAA4B,OAAkB,CAAC,CAAE,MAAAxJ,CAAM,IAAM,CACxE,MAAMyJ,KAAW,MAA2BzJ,GAAS,EAAE,EAAE,MACnD0J,EAAO,CAAE,QAAS,MAAa,KAAM,QAAS,EAEpD,OACE,gBAACC,EAAA,EAAK,CAAC,IAAK,EAAG,UAAU,UACvB,gBAACC,GAAA,GACC,WAAY,EACZ,MAAO,gBAACC,GAAA,EAAQ,CAAC,MAAO,GAAG,IAAkB,aAAaJ,EAAS,MAAM,IAAK,KAAAC,CAAA,CAAY,GAEzFH,EACH,EACA,gBAACO,GAAA,GACC,WAAY,EACZ,cAAe,IACf,MAAOL,EACP,KAAAC,CAAA,CACF,CACF,CAEJ,CAAC,EAEDF,GAA0B,YAAc,4B,wCCjBjC,MAAMO,GAAc,OACzB,CAAC,CAAE,YAAAC,EAAa,MAAAzE,EAAO,WAAAjF,EAAY,SAAA5B,EAAU,SAAAuL,EAAU,WAAAvK,EAAY,YAAAwK,CAAY,IAAM,CACnF,MAAMlL,KAAS,MAAW,EAAS,EAEnC,OACE,gBAAC,OAAI,UAAWA,EAAO,MACrB,gBAAC,OAAI,UAAWA,EAAO,QACrB,gBAAC,OAAI,UAAWA,EAAO,MAAM,UAAQ,EACrC,gBAACmJ,GAAA,IACC,aAAW,kBACX,MAAM,OACN,QAAS,GACT,SAAO,MAAS6B,EAAY,QAAQ,EACpC,SAAW9L,GAAU,CACnBQ,EAAS6G,EAAO,CACd,GAAGyE,EACH,SAAU9L,EAAM,KAClB,CAAC,CACH,EACF,EACA,gBAAC,OAAI,UAAWc,EAAO,MAAM,gBAAc,EAC3C,gBAAC,OAAI,UAAWA,EAAO,oBACrB,gBAACmJ,GAAA,IACC,MAAM,OACN,MAAO6B,EAAY,mBAAqB,KACxC,iBAAgB,GAChB,QAAS,CACP,CAAE,MAAO,KAAM,MAAO,IAAK,EAC3B,CAAE,MAAO,WAAY,MAAO,UAAW,CACzC,EACA,SAAWG,GAAQ,CACjBzL,EAAS6G,EAAO,CACd,GAAGyE,EACH,kBAAmBG,EAAI,KACzB,CAAC,CACH,EACF,EACA,gBAACC,GAAA,GACC,UAAWpL,EAAO,iBAClB,SAAU,GACV,aAAcgL,EAAY,cAC1B,eAAiBK,GAAQ,CACvB3L,EAAS6G,EAAO,CACd,GAAGyE,EACH,cAAeK,EAAI,cAAc,MACjC,kBAAmBL,EAAY,mBAAqB,IACtD,CAAC,CACH,EACF,CACF,EACA,gBAACM,EAAA,EAAQ,CAAC,KAAM,EAAG,EACnB,gBAACC,GAAA,EAAU,CAAC,KAAK,QAAQ,KAAK,KAAK,QAAS,IAAMN,EAAS1E,CAAK,EAAG,QAAQ,qBAAsB,EACnG,EACA,gBAAC,OAAI,UAAWvG,EAAO,MACrB,gBAACwL,GAAA,EAAU,KACT,gBAACC,GAAA,CACC,YAAAP,EACA,MAAOF,EAAY,MACnB,WAAA1J,EACA,WAAAZ,EACA,SAAWgL,GAAW,CACpBhM,EAAS6G,EAAO,CAAE,GAAGyE,EAAa,MAAOU,CAAO,CAAC,CACnD,EACF,CACF,CACF,CACF,CAEJ,CACF,EAEM,GAAY,KAAiB,IAAKC,IAAS,CAAE,MAAOA,EAAI,KAAM,MAAOA,EAAI,IAAK,EAAE,EAEtFZ,GAAY,YAAc,cAE1B,MAAM,GAAa3K,IACV,CACL,QAAM,OAAI,CACR,MAAO,OACP,QAAS,OACT,cAAe,SACf,IAAKA,EAAM,QAAQ,EAAG,CACxB,CAAC,EACD,UAAQ,OAAI,CACV,MAAO,SACP,QAASA,EAAM,QAAQ,GAAK,GAAK,GAAK,CAAC,EACvC,IAAKA,EAAM,QAAQ,CAAC,EACpB,QAAS,OACT,WAAY,QACd,CAAC,EACD,QAAM,OAAI,CACR,MAAO,OACP,WAAY,QACd,CAAC,EACD,QAAM,OAAI,CACR,MAAO,OACP,YAAaA,EAAM,QAAQ,CAAC,CAC9B,CAAC,EACD,oBAAkB,OAAI,CACpB,MAAO,mBACP,WAAY,EACd,CAAC,EACD,sBAAoB,OAAI,CACtB,MAAO,qBACP,QAAS,MACX,CAAC,CACH,GChHK,SAASwL,GAAgB,CAAE,MAAA5K,EAAO,WAAAM,EAAY,SAAA5B,EAAU,WAAAgB,EAAY,YAAAwK,CAAY,EAAU,CAC/F,MAAMW,EAAgB7K,EAAM,eAAiB,CAAC,EAExC8K,EAAsB,CAACvF,EAAemF,IAAkC,CAC5E,MAAMK,EAAc,CAAC,GAAGF,CAAa,EACrCE,EAAY,OAAOxF,EAAO,EAAGmF,CAAM,EACnChM,EAAS,CAAE,GAAGsB,EAAO,cAAe+K,CAAY,CAAC,CACnD,EAEMd,EAAY1E,GAAkB,CAClC,MAAMwF,EAAc,CAAC,GAAGF,EAAc,MAAM,EAAGtF,CAAK,EAAG,GAAGsF,EAAc,MAAMtF,EAAQ,CAAC,CAAC,EACxF7G,EAAS,CAAE,GAAGsB,EAAO,cAAe+K,CAAY,CAAC,CACnD,EAEA,OACE,gBAACpB,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,GAC5BkB,EAAc,IAAI,CAACb,EAAazE,IAC/B,gBAACwE,GAAA,CACC,IAAKxE,EAAM,SAAS,EACpB,YAAAyE,EACA,MAAAzE,EACA,SAAUuF,EACV,WAAAxK,EACA,SAAA2J,EACA,WAAAvK,EACA,YAAAwK,CAAA,CACF,CACD,CACH,CAEJ,CCbO,MAAMO,GAAmB,OAAkB,CAAC,CAAE,WAAAnK,EAAY,MAAAN,EAAO,SAAAtB,EAAU,WAAAgB,EAAY,YAAAwK,CAAY,IAAM,CAC9G,KAAM,CAACc,EAAYC,CAAa,KAAI,YAAoB,EAClD,CAACC,EAAeC,CAAgB,KAAI,YAA4C,MAAS,EAEzFC,EAAkBhJ,GAAsC,CAC5D1D,EAAS,CAAE,GAAGsB,EAAO,OAAAoC,CAAO,CAAC,CAC/B,EAEMiJ,EAA8B,MAAOC,GAAkE,CAC3G,MAAMC,EAAU,MAAMD,EACtB,MAAO,CAAC,GAAGhL,EAAW,aAAa,EAAG,GAAGiL,CAAO,EAAE,IAAKrN,IAAW,CAAE,MAAOA,EAAO,MAAAA,CAAM,EAAE,CAC5F,EAEM4I,EAAkB,MAAO0E,GAAkE,CAC/F,MAAMC,EAAmBzL,EAAM,OAAO,OAAQiJ,GAAMA,IAAMuC,CAAQ,EAElE,GAAIC,EAAiB,SAAW,EAC9B,OAAO,MAAMnL,EAAW,iBAAiB,YAAY,EAGvD,MAAMkC,EAAO,IAAkB,aAAaiJ,CAAgB,EACtDC,EAAS,MAAMpL,EAAW,iBAAiB,kBAAkBkC,CAAI,EACjEmJ,EAAwBF,EAAiB,IAAK1H,GAAMA,EAAE,KAAK,EAOjE,OALmB,OAAO,KAAK2H,CAAM,EAElC,OAAQ5H,GAAS,CAAC6H,EAAsB,SAAS7H,CAAI,CAAC,EACtD,KAAK,CAGV,EAEMiD,EAAmB,MAAOyE,GAA+C,CAC7E,GAAI,CAACA,EAAS,MACZ,MAAO,CAAC,EAGV,IAAIlJ,EACJ,MAAMmJ,EAAmBzL,EAAM,OAAO,OAAQiJ,GAAMA,IAAMuC,CAAQ,EAClE,GAAIC,EAAiB,SAAW,EAC9BnJ,EAAS,MAAMhC,EAAW,iBAAiB,iBAAiBkL,EAAS,KAAK,MACrE,CACL,MAAMhJ,EAAO,IAAkB,aAAaiJ,CAAgB,EAE5DnJ,GADe,MAAMhC,EAAW,iBAAiB,kBAAkBkC,CAAI,GACvDlC,EAAW,kBAAkBkL,EAAS,KAAK,CAAC,EAG9D,OAAOlJ,EAASA,EAAO,IAAK4B,MAAM,OAA2BA,EAAGsH,EAAS,EAAE,CAAC,EAAI,CAAC,CACnF,EAEM5C,KAA+B,WAAQ,IAAM,CACjD,KAAM,CAAE,OAAAxG,EAAQ,WAAYuF,CAAG,EAAI3H,EACnC,MAAI,CAACoC,EAAO,QAAUuF,EAAG,OAEnB,EAAAA,EAAG,SAAW,GAAKA,EAAG,CAAC,EAAE,KAAO,MAAgB,cAAgBA,EAAG,CAAC,EAAE,OAAO,CAAC,IAAM,IAKnF,EACT,EAAG,CAAC3H,CAAK,CAAC,KAEV,aAAU,IAAM,EACU,SAAY,CAClC,MAAM4L,EAAY,CAAE,KAAM,IAAkB,YAAY5L,CAAK,EAAG,MAAO,cAAe,EAEhFgL,EAAa,CAAE,OADN,MAAM1K,EAAW,eAAesL,CAAS,EAC3B,MAAO,KAAa,KAAM,aAAW,OAAoB,CAAE,EACxFX,EAAcD,CAAU,CAC1B,GAEgB,EAAE,MAAM,QAAQ,KAAK,CACvC,EAAG,CAAC1K,EAAYN,CAAK,CAAC,EAEtB,MAAM0J,EAAO,CAAE,QAAS,MAAc,KAAM,OAAQ,EACpD,OACE,gBAAC,OAAI,cAAamC,GAAQ,QACxB,gBAACC,GAAA,EAAS,KACR,gBAACpD,GAAA,CACC,gBAAkB8C,GAChBH,EAA4BvE,EAAgB0E,CAAQ,CAAC,EAEvD,iBAAmBA,GACjBH,EAA4BtE,EAAiByE,CAAQ,CAAC,EAExD,cAAexL,EAAM,OACrB,SAAUoL,EACV,oBAAAxC,CAAA,CACF,CACF,EACCsB,GACC,gBAACN,GAAA,GACC,WAAY,EACZ,MAAO,gBAACC,GAAA,EAAQ,CAAC,MAAO,GAAG,IAAkB,aAAa7J,EAAM,MAAM,IAAK,KAAA0J,CAAA,CAAY,GAEtFH,EACH,EAEF,gBAACwC,GAAA,EAAmB,KAClB,gBAACC,GAAA,GACC,cAAe,IACf,MAAAhM,EACA,SAAAtB,EACA,WAAAgB,EACA,WAAAY,EACA,cAAA4K,CAAA,CACF,EACA,gBAACe,GAAA,GACC,WAAA3L,EACA,MAAAN,EACA,SAAAtB,EACA,KAAMsM,EACN,cAAe,IACf,2BAA0B,IAA1B,CACF,CACF,EACCd,GACC,gBAACJ,GAAA,GACC,WAAY,EACZ,cAAe,IACf,MAAA9J,EACA,KAAA0J,EACA,aAAe/B,GAAO,CACpBwD,EAAiBxD,CAAE,CACrB,EACA,aAAc,IAAM,CAClBwD,EAAiB,MAAS,CAC5B,EACF,EAEDnL,EAAM,eAAiBA,EAAM,cAAc,OAAS,GACnD,gBAAC4K,GAAA,CACC,MAAA5K,EACA,WAAAM,EACA,SAAA5B,EACA,WAAAgB,EACA,YAAAwK,CAAA,CACF,CAEJ,CAEJ,CAAC,EAEDO,GAAiB,YAAc,mBCrKxB,SAASyB,GAAa,CAAE,MAAAlM,CAAM,EAAU,CAC7C,OACE,gBAAC8L,GAAA,EAAS,KACR,gBAAC3C,GAAA,EAAgB,KACf,gBAACU,GAAA,EAAQ,CAAC,MAAA7J,EAAc,KAAM,CAAE,QAAS,MAAa,KAAM,QAAS,EAAG,CAC1E,CACF,CAEJ,CCUO,SAASmM,GAA0B5M,EAAc,CACtD,KAAM,CAAE,MAAAS,EAAO,SAAAtB,EAAU,WAAAgB,EAAY,WAAAY,EAAY,YAAA4J,CAAY,EAAI3K,EAC3D,CAACsE,EAAOuI,CAAQ,KAAI,cAAWC,GAAW,QAAS,CACvD,KAAMrM,EAAM,KAEZ,SACEA,EAAM,OAAS,GACX,CACE,OAAQ,CAAC,EACT,WAAY,CAAC,CAAE,GAAI,kBAAmB,OAAQ,CAAC,EAAE,CAAE,CAAC,CACtD,EACA,MACR,CAAC,KAGD,aAAU,IAAM,CACdoM,EAASE,GAAYtM,EAAM,IAAI,CAAC,CAClC,EAAG,CAACA,EAAM,IAAI,CAAC,EAEf,MAAMuM,EAAoB9C,GAA8B,CACtD,MAAMjH,EAAO,IAAkB,YAAYiH,CAAQ,EACnD2C,EAASI,GAAkB,CAAE,SAAA/C,EAAU,KAAAjH,CAAK,CAAC,CAAC,EAC9C9D,EAAS,CAAE,GAAGa,EAAM,MAAO,KAAAiD,CAAW,CAAC,CACzC,EAEA,OAAKqB,EAAM,SAKT,gCACE,gBAAC4G,GAAA,CACC,MAAO5G,EAAM,SACb,WAAAvD,EACA,SAAUiM,EACV,WAAA7M,EACA,YAAAwK,EACA,cAAa2B,GAAQ,OACvB,EACC7L,EAAM,OAAS,IAAM,gBAACkM,GAAY,CAAC,MAAOlM,EAAM,KAAM,CACzD,EAdO,IAgBX,CAEA,MAAMyM,GAAsB,CAAE,KAAM,EAAG,EAEjCJ,MAAa,OAAY,CAC7B,KAAM,yBACN,aAAAI,GACA,SAAU,CACR,kBAAmB,CAAC5I,EAAO6I,IAAuE,CAChG7I,EAAM,KAAO6I,EAAO,QAAQ,KAC5B7I,EAAM,SAAW6I,EAAO,QAAQ,QAClC,EACA,YAAa,CAAC7I,EAAO6I,IAAkC,CACrD,GAAI,CAAC7I,EAAM,UAAYA,EAAM,OAAS6I,EAAO,QAAS,CACpD7I,EAAM,KAAO6I,EAAO,QACpB,MAAMC,KAAc,MAA2BD,EAAO,OAAO,EAC7D7I,EAAM,SAAW8I,EAAY,MAEjC,CACF,CACF,CAAC,EAEK,CAAE,kBAAAH,GAAmB,YAAAF,EAAY,EAAID,GAAW,Q,0ECvE/C,MAAMO,GAA0B,OACrC,CAAC,CAAE,IAAA9G,EAAK,MAAA9F,EAAO,SAAAtB,EAAU,WAAAgB,EAAY,SAAAmN,EAAU,WAAAC,CAAW,IAAM,CAC9D,KAAM,CAACC,EAAoBC,CAAqB,KAAI,YAAS,EAAI,EAE3DC,EAAqB/O,GAAyB,CAClDQ,EAAS,CAAE,GAAGsB,EAAO,UAAW9B,CAAM,CAAC,EACvCwB,EAAW,CACb,EAEMwN,EAAsBC,GAAoC,IAC9D,MAAkB,kCAAmC,CACnD,IAAArH,EACA,WAAYqH,EAAO,KACrB,CAAC,EACDzO,EAAS,CAAE,GAAGsB,EAAO,WAAYmN,EAAO,KAAM,CAAC,EAC/CzN,EAAW,CACb,EAEM0N,EAAsB/C,GAA2C,CACrE,MAAMnM,EAAQmM,EAAI,cAAc,MAChC,GAAI,IAAC,OAAgBnM,CAAK,EAAG,CAC3B8O,EAAsB,EAAK,EAC3B,OAEFA,EAAsB,EAAI,EAC1BtO,EAAS,CAAE,GAAGsB,EAAO,cAAe9B,CAAM,CAAC,EAC3CwB,EAAW,CACb,EAEM2N,EAAyBhD,GAA2C,CACxE3L,EAAS,CAAE,GAAGsB,EAAO,aAAcqK,EAAI,cAAc,KAAM,CAAC,EAC5D3K,EAAW,CACb,EAEA,SAAS4N,EAAiB3K,EAA2C,CACnE,MAAM4K,KAAc,OAAmB5K,EAAE,cAAc,KAAK,EACxD3C,EAAM,WAAauN,IACrB7O,EAAS,CAAE,GAAGsB,EAAO,SAAUuN,CAAY,CAAC,EAC5C7N,EAAW,EAEf,CAEA,SAAS8N,EAAa7K,EAA2C,CAC/DjE,EAAS,CAAE,GAAGsB,EAAO,QAAM,QAAK2C,EAAE,cAAc,KAAK,CAAE,CAAC,EACxDjD,EAAW,CACb,CAEA,MAAM+N,KAAY,OAAiBzN,CAAK,EAClC0N,KAAa,OAAY1N,EAAM,IAAI,EAEnC2N,KAAc,WAAQ,IACtB,IAAC3N,EAAM,SAAQ,OAAuBA,EAAM,IAAI,GAAK,CAAC,MAAM,OAAOA,EAAM,IAAI,CAAC,GAIjF,CAACA,EAAM,IAAI,CAAC,EAEf,OACE,gBAAC8L,GAAA,EAAS,KACR,gBAAC8B,GAAA,GACC,MAAM,UACN,cAAeC,GAAiB7N,EAAOyN,EAAWZ,EAAUa,EAAYC,CAAW,EACnF,WAAAb,CAAA,EAEA,gBAAC1D,EAAA,GACC,MAAM,SACN,QAAQ,sGAER,gBAACgB,GAAA,GACC,YAAY,YACZ,KAAK,SACL,SAAU,GACV,aAAcpK,EAAM,aACpB,eAAgBqN,CAAA,CAClB,CACF,EACA,gBAACjE,EAAA,EAAW,CAAC,MAAM,QACjB,gBAAC0E,GAAA,EAAgB,CAAC,QAAS,MAAkB,MAAOL,EAAW,SAAUR,CAAA,CAAmB,CAC9F,EACCS,GACC,gBAACtE,EAAA,EAAW,CAAC,MAAM,aAAa,QAAQ,0DACtC,gBAACgB,GAAA,GACC,UAAU,UACV,YAAayC,EAAS,SAAS,EAC/B,KAAK,SACL,IAAK,EACL,aAAc7M,EAAM,UAAU,SAAS,GAAK,GAC5C,eAAgBsN,CAAA,CAClB,CACF,EAED,CAACI,GACA,gCACE,gBAACtE,EAAA,GACC,MAAM,OACN,QAAQ,+JACR,QAAS,CAACuE,EACV,MAAO,wDAEP,gBAACvD,GAAA,GACC,UAAU,UACV,YAAa,OACb,KAAK,SACL,aAAcpK,EAAM,MAAQ,GAC5B,eAAgBwN,CAAA,CAClB,CACF,EACCxN,EAAM,aAAe,QAAaA,EAAM,WAAa,GACpD,gCACE,gBAACoJ,EAAA,GACC,MAAM,aACN,QAAQ,gNAER,gBAACjB,GAAA,IACC,aAAc,GACd,SAAU+E,EACV,QAAS,MACT,MAAOlN,EAAM,YAAc,EAC3B,aAAW,oBACb,CACF,EACA,gBAAC+N,GAAA,GACC,SAAS,UACT,MAAM,sFACR,CACF,CAEJ,EAEDtP,EAAO,sBAAe,0BAA4BA,EAAO,sBAAe,oBACvE,gBAAC2K,EAAA,GACC,MAAM,iBACN,QAAQ,2EAER,gBAACgB,GAAA,GACC,SAAU,GACV,KAAK,SACL,IAAK,EACL,aAAcpK,EAAM,eAAiB,KACrC,eAAgBoN,EAChB,QAAS,CAACL,CAAA,CACZ,CACF,CAEJ,CACF,CAEJ,CACF,EAEA,SAASc,GACP7N,EACAyN,EACAZ,EACAa,EACAC,EACU,CACV,MAAMK,EAAiB,MAAiB,KAAM/E,GAAMA,EAAE,QAAUwE,CAAS,EACnEQ,EAAkB,MAAmB,KAAMhF,GAAMA,EAAE,SAAWjJ,EAAM,YAAc,EAAE,EAEpF2G,EAAkB,CAAC,EAEzB,OAAI3G,EAAM,cACR2G,EAAM,KAAK,WAAW3G,EAAM,cAAc,EAG5C2G,EAAM,KAAK,SAASqH,GAAgB,OAAO,EAEvCN,GACF/G,EAAM,KAAK,eAAe3G,EAAM,UAAY6M,GAAU,EAGnDa,IACC1N,EAAM,MACR2G,EAAM,KAAK,SAASgH,EAAc3N,EAAM,KAAO,iBAAiB,EAG9DA,EAAM,YACR2G,EAAM,KAAK,eAAesH,GAAiB,OAAO,GAI/CtH,CACT,CAEAiG,GAAwB,YAAc,0B,oDC5L/B,SAASsB,GAAoB,CAClC,MAAAlO,EACA,WAAAM,EACA,MAAAH,EACA,WAAAT,EACA,SAAAhB,EACA,KAAAyP,EACA,IAAArI,EACA,YAAAoE,EACA,QAAA3J,CACF,EAAU,CACR,MAAMvB,KAAS,MAAW,EAAS,EAE7BoP,EAAkB3P,EAAO,sBAAe,gBACxC4P,EAA2B,SAAY3P,EAAS,CAAE,GAAGsB,EAAO,QAAM,OAAiBA,EAAM,KAAMM,CAAU,CAAE,CAAC,EAElH,OACE,gBAAC,OAAI,UAAWtB,EAAO,SACrB,gBAACc,GAAA,GACC,WAAAQ,EACA,MAAAN,EACA,MAAAG,EACA,WAAAT,EACA,SAAAhB,EACA,QAAA6B,EACA,KAAA4N,EACA,IAAArI,EACA,cAAa+F,GAAQ,OACrB,kBACE,gCACGuC,GACC,gBAAC,OAAI,UAAWpP,EAAO,aACrB,gBAAC,WACC,gBAAC,MAAe,CAAC,QAAQ,MACvB,gBAACuL,GAAA,GACC,QAAS8D,EACT,KAAK,iBACL,KAAK,KACL,QAAQ,eACV,EACA,gBAACC,GAAA,EAAO,CAAC,QAAS,UAAO,OAAU,eACjC,gBAACC,GAAA,EAAI,CAAC,UAAWvP,EAAO,KAAM,KAAK,UAAW,EAChD,CACF,CACF,CACF,CAEJ,EAEJ,EACCkL,GAAe,gBAACV,GAAyB,CAAC,MAAOxJ,EAAM,KAAM,CAChE,CAEJ,CAEA,MAAM,GAAaZ,IACV,CACL,WAAS;AAAA;AAAA;AAAA;AAAA;AAAA,MAMT,eAAa;AAAA,0BACSA,EAAM,OAAO,OAAO;AAAA;AAAA,iBAE7BA,EAAM,QAAQ,GAAK,GAAK,GAAK,EAAG;AAAA,uBAC1BA,EAAM,QAAQ,EAAG;AAAA;AAAA;AAAA;AAAA,mBAIrBA,EAAM,WAAW,UAAU;AAAA,MAE1C,QAAM;AAAA,eACKA,EAAM,OAAO,KAAK;AAAA;AAAA;AAAA,KAI/B,G,uCC7EK,MAAMoP,GAAgBjP,GAAiB,CAC5C,KAAM,CAAE,QAAAkP,EAAS,gBAAAC,EAAiB,kBAAAC,EAAmB,iBAAAC,EAAkB,oBAAAC,EAAqB,uBAAAC,CAAuB,EACjHvP,EAEIP,KAAS,MAAW,EAAS,EAC7B0K,EAAO,CAAE,QAAS,MAAc,KAAM,OAAQ,EAEpD,OACE,gBAACqF,GAAA,EAAI,CAAC,UAAW/P,EAAO,MACtB,gBAAC+P,GAAA,EAAK,QAAL,KAAcN,EAAQ,IAAK,EAC5B,gBAAC,OAAI,UAAWzP,EAAO,mBACrB,gBAAC6K,GAAA,GACC,MAAO,IAAkB,YAAY,CAAE,OAAQ,CAAC,EAAG,WAAY4E,EAAQ,UAAW,CAAC,EACnF,KAAA/E,EACA,UAAW1K,EAAO,SACpB,CACF,EACA,gBAAC+P,GAAA,EAAK,QAAL,KACEF,IAAwBJ,EAAQ,KAC/B,gBAAChJ,EAAA,IACC,KAAK,KACL,QAAS,IAAM,CACTmJ,EAEFE,EAAuBL,EAAQ,IAAI,EAEnCC,EAAgBD,CAAO,CAE3B,GACD,gBAED,EAEA,gCACE,gBAAC,OAAI,UAAWzP,EAAO,SACpB,wCACC2P,EACI,kEACA,wCAER,EACA,gBAAClJ,EAAA,GAAM,CAAC,KAAK,KAAK,KAAK,UAAU,QAAS,IAAMqJ,EAAuB,IAAI,GAAG,MAE9E,EACA,gBAACrJ,EAAA,IACC,KAAK,KACL,QAAS,IAAM,CACbiJ,EAAgBD,CAAO,CACzB,GACD,eAED,EACCE,GACC,gBAAClJ,EAAA,IACC,KAAK,KACL,QAAS,IAAM,CACbiJ,EAAgBD,EAAS,EAAI,CAC/B,GACD,kBAED,CAEJ,CAEJ,CACF,CAEJ,EAEM,GAAarP,IACV,CACL,QAAM;AAAA;AAAA;AAAA;AAAA,MAKN,qBAAmB;AAAA;AAAA,MAGnB,YAAU;AAAA,0BACYA,EAAM,OAAO,WAAW;AAAA,iBACjCA,EAAM,QAAQ,CAAC;AAAA,oBACZA,EAAM,QAAQ,CAAC;AAAA,MAE/B,WAAS;AAAA,uBACUA,EAAM,QAAQ,CAAC;AAAA,KAEpC,GCjFW4P,GAAsBzP,GAAiB,CAClD,KAAM,CAAE,OAAAqG,EAAQ,QAAAC,EAAS,SAAAnH,EAAU,WAAAuQ,EAAY,MAAAjP,EAAO,QAAAkP,EAAS,IAAApJ,CAAI,EAAIvG,EACjE,CAAC4P,EAAUC,CAAW,KAAI,YAAmB,CAAC,CAAC,EAC/C,CAACP,EAAqBC,CAAsB,KAAI,YAAwB,IAAI,EAE5E9P,KAAS,MAAW,EAAS,EAC7B2P,EAAoB,CAAC,CAACM,EACtBL,KAAmB,WACvB,OAAM,MAA2B5O,EAAM,IAAI,EAAE,MAAM,WAAW,OAAS,EACvE,CAACA,EAAM,IAAI,CACb,EAEM0O,EAAkB,CAACD,EAA2BY,EAAmB,KAAU,CAC/E,MAAMC,KAAc,MAA2BD,EAAmB,GAAKrP,EAAM,IAAI,KACjF,MAAkB,uCAAwC,CACxD,QAAS,KACT,IAAK8F,GAAO,GACZ,WAAY9F,EAAM,WAClB,gBAAiByO,EAAQ,KACzB,2BAA4Ba,EAAY,MAAM,WAAW,OACzD,uBAAwBA,EAAY,MAAM,OAAO,OACjD,eAAgBX,GAAqBU,CACvC,CAAC,EAEDC,EAAY,MAAM,WAAab,EAAQ,WACnCE,GAAqBU,EACvBJ,EAAW,CACT,GAAGjP,EACH,SAAO,OAAiBkP,GAAW,CAAClP,CAAK,CAAC,EAC1C,KAAM,IAAkB,YAAYsP,EAAY,KAAK,CACvD,CAAC,EAED5Q,EAAS,CACP,GAAGsB,EACH,KAAM,IAAkB,YAAYsP,EAAY,KAAK,CACvD,CAAC,EAEHR,EAAuB,IAAI,EAC3BjJ,EAAQ,CACV,EAEA,OACE,gBAACS,GAAA,EAAK,CAAC,OAAAV,EAAgB,MAAM,wBAAwB,UAAWC,EAAS,UAAW7G,EAAO,OACzF,gBAAC,OAAI,UAAWA,EAAO,SAAS,wGAEhC,EACC,OAAO,OAAO,KAAoB,EAAE,IAAKuQ,GAEtC,gBAACC,GAAA,GACC,IAAKD,EACL,MAAO,MAAG,cAAWA,CAAW,mBAChC,OAAQJ,EAAS,SAASI,CAAW,EACrC,YAAa,GACb,SAAU,IACRH,EAAaK,GAEXA,EAAK,SAASF,CAAW,EAAIE,EAAK,OAAQC,GAAMA,IAAMH,CAAW,EAAI,CAAC,GAAGE,EAAMF,CAAW,CAC5F,GAGF,gBAAC,OAAI,UAAWvQ,EAAO,gBACpB,IACE,iBAAiB,EACjB,OAAQyP,GAAYA,EAAQ,OAASc,CAAW,EAChD,IAAKd,GACJ,gBAACD,GAAA,CACC,IAAKC,EAAQ,KACb,QAAAA,EACA,kBAAAE,EACA,iBAAAC,EACA,gBAAAF,EACA,oBAAAG,EACA,uBAAAC,CAAA,CACF,CACD,CACL,CACF,CAEH,EACD,gBAACrJ,EAAA,GAAM,CAAC,QAAQ,YAAY,QAASI,CAAA,EAAS,OAE9C,CACF,CAEJ,EAEM,GAAazG,IACV,CACL,kBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA,MAMhB,WAAS;AAAA,uBACUA,EAAM,QAAQ,CAAC;AAAA,MAElC,SAAO;AAAA;AAAA,QAEHA,EAAM,YAAY,KAAK,IAAI;AAAA;AAAA;AAAA,KAIjC,G,4BC5HF,MAAMuQ,GAAwC,6BAEvC,SAASC,GAAiB5P,EAAkB6P,EAA6BnR,EAAsC,CAEhHsB,EAAM,OAAS,IACjB8P,GAAA,EAAM,IAAIH,GAAuCE,CAAU,EAG7DnR,EAAS,CAAE,GAAGsB,EAAO,WAAA6P,CAAW,CAAC,CACnC,CAEO,SAASE,GAAqBvN,EAAc,CAEjD,GAAIA,GAAQ,MAAQA,IAAS,GAC3B,OAAO,IAAgB,KAIzB,OADkCsN,GAAA,EAAM,IAAIH,EAAqC,EAClE,CACb,IAAK,OACH,OAAO,IAAgB,KAEzB,IAAK,UACL,QACE,OAAO,IAAgB,OAC3B,CACF,CAKO,SAASK,GAAqBhQ,EAA6B,CAEhE,IAAIiQ,EAASjQ,EAEb,OAAKA,EAAM,aACTiQ,EAAS,CAAE,GAAGjQ,EAAO,WAAY+P,GAAqB/P,EAAM,IAAI,CAAE,GAGhEA,EAAM,MAAQ,OAChBiQ,EAAS,CAAE,GAAGA,EAAQ,KAAM,EAAG,GAG7BjQ,EAAM,WAAa,OAErBiQ,EAAS,CAAE,GAAGA,EAAQ,UAAW,MAAc,KAAM,GAGhDA,CACT,C,gBC5CA,SAASC,GAAYC,EAAsCC,EAAsC,CAC/F,MAAI,CAACD,GAAS,CAACC,EACN,MAGU,OAAWD,CAAK,EAG1BA,EAAM,OAAOC,CAAK,EAGpBD,IAAUC,CACnB,CAEO,SAASC,GACdrQ,EACAsQ,EACAC,EACAC,EACA/C,EACAgD,EACS,CACT,OAAIH,IAAc,QAAatQ,EAAM,KAAK,IAAMsQ,EAAU,KAAK,GAAK7C,IAAcgD,EACzE,GAIP,EAAAP,GAAYK,GAAW,IAAI,KAAMC,GAAe,IAAI,IAAI,GACxDN,GAAYK,GAAW,IAAI,GAAIC,GAAe,IAAI,EAAE,EAMxD,CClBO,MAAM3E,GAAU,CACrB,OAAQ,aACV,EAEa6E,GAAkB,OAAkCnR,GAAU,CACzE,KAAM,CAAE,SAAAb,EAAU,WAAAgB,EAAY,WAAAuP,EAAY,KAAAd,EAAM,IAAArI,EAAK,QAAAoJ,EAAS,WAAA5O,EAAY,MAAOiQ,CAAU,EAAIhR,EACzF,CAACoR,EAAgBC,CAAiB,KAAI,YAAS,EAAK,EACpD,CAACC,EAAwBC,CAAyB,KAAI,YAAS,EAAK,EACpE,CAACC,EAAaC,CAAc,KAAI,YAAS,EAAK,EAC9C,CAACC,EAAqBC,CAAsB,KAAI,YAAS,EAAK,EAC9D,CAACpE,EAAYqE,CAAa,KAAI,YAA4B,IAAI,EAC9D,CAAE,KAAMC,EAAS,QAASC,CAAW,KAAIC,GAAA,IAAQ,KAAyB,EAE1EC,EAAuBjR,EAAW,qBAClCkR,MAAoBC,EAAA,GAAYlB,CAAS,EAEzCvQ,EAAQgQ,GAAqBzQ,EAAM,KAAK,EAC1Cd,EAAO,sBAAe,0BAA4B,CAACuB,EAAM,MAAQuR,IACnEvR,EAAM,KAAO,MAAMuR,KAErB,MAAMG,MAAoBD,EAAA,GAAYzR,EAAM,IAAI,EAC1C2R,MAAoBF,EAAA,GAAYzR,EAAM,SAAS,EAG/C6P,GAAa7P,EAAM,WAEnB4R,GAAmB7S,GAA4C,CACnEsS,EAAWtS,EAAM,cAAc,OAAO,CACxC,EAEM8S,MAAqB,eACxBC,GAAmC,CAQlC,MAPA,MAAkB,mCAAoC,CACpD,UAAWA,EACX,eAAgB9R,EAAM,YAAc,GACpC,SAAU,CAACA,EAAM,KACjB,IAAK8F,GAAO,EACd,CAAC,EAEGgM,IAAkB,IAAgB,YACrB,MAA2B9R,EAAM,MAAQ,EAAE,EAE/C,OAAO,OAAQ,CACxB4Q,EAAkB,EAAI,EACtB,OAGJhB,GAAiB5P,EAAO8R,EAAepT,CAAQ,CACjD,EACA,CAACA,EAAUsB,EAAO8F,CAAG,CACvB,KAEA,aAAU,IAAM,CACdkL,EAAe,EAAK,CACtB,EAAG,CAAC7C,CAAI,CAAC,EAET,MAAM4D,GAAoB/R,GAAqB,IACxC,WAAQA,EAAOT,EAAM,KAAK,GAC7ByR,EAAe,EAAI,EAErBtS,EAASsB,CAAK,CAChB,EAEMgS,GAA4B,IAAM,IACtC,MAAkB,oCAAqC,CACrD,IAAAlM,CACF,CAAC,EAEDoL,EAAwBe,GAAY,CAACA,CAAO,CAC9C,EAEA,sBAAU,IAAM,CACC5B,GACbrQ,EAAM,KACN0R,GACAnB,EACAiB,GACAxR,EAAM,UACN2R,EACF,IAE2B,SAAY,CACnC,MAAMO,GAAQ,MAAM5R,EAAW,SAASN,CAAK,EAC7CmR,EAAce,EAAK,CACrB,GACiB,CAErB,EAAG,CAAC5R,EAAYiQ,EAAWiB,GAAmBxR,EAAO0R,GAAmBC,GAAmBR,CAAa,CAAC,EAGvG,gCACE,gBAACgB,GAAA,GACC,OAAQxB,EACR,MAAM,gBACN,KAAK,oHACL,YAAY,WACZ,UAAW,IAAM,CACfjS,EAAS,CAAE,GAAGsB,EAAO,WAAY,IAAgB,OAAQ,CAAC,EAC1D4Q,EAAkB,EAAK,CACzB,EACA,UAAW,IAAMA,EAAkB,EAAK,EAC1C,EACA,gBAAC5B,GAAA,CACC,OAAQ6B,EACR,QAAS,IAAMC,EAA0B,EAAK,EAC9C,MAAA9Q,EACA,QAAAkP,EACA,IAAApJ,EACA,SAAApH,EACA,WAAAuQ,CAAA,CACF,EACA,gBAACtJ,GAAA,CACC,OAAQsL,EACR,WAAA3Q,EACA,MAAAN,EACA,IAAA8F,EACA,QAAS,IAAMoL,EAAuB,EAAK,EAC3C,SAAUa,GACV,WAAArS,CAAA,CACF,EACA,gBAAC0S,GAAA,EAAY,KACX,gBAACzI,EAAA,EAAK,CAAC,IAAK,GACV,gBAAClE,EAAA,IACC,aAAY2C,EAAA,GAAU,WAAW,aAAa,cAC9C,QAAQ,YACR,KAAK,KACL,QAAS,IAAM,CACb0I,EAA2BuB,IAAc,CAACA,EAAS,EAEnD,MAAM/C,KAAc,MAA2BtP,EAAM,MAAQ,EAAE,KAC/D,MAAkB,qCAAsC,CACtD,QAAS,KACT,IAAK8F,GAAO,GACZ,WAAY9F,EAAM,WAClB,2BAA4BsP,EAAY,MAAM,WAAW,OACzD,uBAAwBA,EAAY,MAAM,OAAO,MACnD,CAAC,CACH,GACD,uBAED,EACA,gBAAC7J,EAAA,GAAM,CAAC,QAAQ,YAAY,KAAK,KAAK,QAASuM,GAA2B,cAAY,wBAAuB,eAE7G,CACF,EACA,gBAACM,GAAA,EAAiB,CAAC,MAAM,gBAAgB,MAAOlB,EAAS,SAAUQ,EAAA,CAAiB,EACpF,gBAACtH,EAAA,EAAQ,CAAC,KAAM,EAAG,EAClBxE,IAAQ,KAAQ,SAAWA,IAAQ,KAAQ,cAC1C,gBAACL,EAAA,IACC,QAASsL,EAAc,UAAY,YACnC,KAAK,KACL,QAASrR,EACT,KAAMyO,GAAM,QAAU,KAAa,QAAU,gBAAkB,OAC/D,SAAUA,GAAM,QAAU,KAAa,SAEtCe,GAAWA,EAAQ,OAAS,EAAI,cAAgB,WACnD,EAEF,gBAACqD,GAAA,EAAqB,CAAC,KAAM1C,GAAa,SAAUgC,EAAA,CAAoB,CAC1E,EACA,gBAACW,EAAA,EAAK,CAAC,EAAG,GAAK,EACf,gBAAChI,GAAA,EAAU,KACRqF,KAAe,IAAgB,MAC9B,gBAAC3B,GAAmB,CAAE,GAAG3O,EAAO,MAAAS,EAAc,SAAU+R,GAAkB,YAAaX,CAAA,CAAS,EAEjGvB,KAAe,IAAgB,SAC9B,gBAAC1D,GAAA,CACC,WAAY5M,EAAM,WAClB,MAAAS,EACA,SAAU+R,GACV,WAAYxS,EAAM,WAClB,YAAa6R,CAAA,CACf,EAEF,gBAACxE,GAAA,CACC,MAAA5M,EACA,SAAAtB,EACA,WAAAgB,EACA,IAAAoG,EACA,SAAUxF,EAAW,SACrB,WAAAwM,CAAA,CACF,CACF,CACF,CAEJ,CAAC,EAED4D,GAAgB,YAAc,kBChNvB,SAAS+B,GAA2BlT,EAA6B,CACtE,KAAM,CAAE,MAAAS,EAAO,KAAAmO,EAAM,WAAA7N,EAAY,SAAA5B,EAAU,WAAAgB,EAAY,QAAAa,CAAQ,EAAIhB,EAEnE,OACE,gBAACO,GAAA,GACC,WAAAQ,EACA,MAAAN,EACA,SAAAtB,EACA,WAAAgB,EACA,QAAAa,EACA,KAAA4N,EACA,YAAY,qBACZ,cAAa,GAAQ,OACvB,CAEJ,CAEO,MAAM,GAAU,CACrB,OAAQ,4BACV,EChBO,SAASuE,GAAqBnT,EAA6B,CAChE,KAAM,CAAE,IAAAuG,CAAI,EAAIvG,EAEhB,OAAQuG,EAAK,CACX,KAAK,KAAQ,cACX,OAAO,gBAAC2M,GAA0B,CAAE,GAAGlT,CAAA,CAAO,EAChD,QACE,OAAO,gBAACmR,GAAe,CAAE,GAAGnR,CAAA,CAAO,CACvC,CACF,CAEA,YAAe,QAAKmT,EAAoB,EAE3B,GAAU,CACrB,OAAQ,aACV,E,wIChBO,SAASC,GAAiB,CAC/B,QAAApH,EACA,gBAAAqH,CACF,EAA4E,CAC1E,OACE,gBAACC,GAAA,GACC,MAAM,WACN,YACE,gBAACC,GAAA,GACC,YAAY,+CACZ,OAAO,4CACP,QAAQ,WACV,GAGF,gBAAC7K,GAAA,GACC,WAAY,GACZ,MAAM,oCACN,SAAUsD,EAAQ,SAClB,QAAQ,iHAER,gBAAC,MACC,MAAOA,EAAQ,SAAS,eAAiB,GACzC,SAAWxM,GACT6T,EAAgB,CACd,GAAGrH,EACH,SAAU,CAAE,GAAGA,EAAQ,SAAU,aAAcxM,EAAO,cAAc,OAAQ,CAC9E,CAAC,EAEL,CACF,CACF,CAEJ,C,gEC5BO,MAAMgU,GAAgBxT,GAAiB,CAC5C,KAAM,CAAE,cAAAyT,EAAe,UAAArU,CAAU,EAAIY,EAC/B,CAAC0T,EAAWC,CAAY,KAAI,YAAS,EAAE,EAE7C,IAAIC,EAA4B,CAAC,EACjC,OAAIF,GAAaD,IACfG,EAAcC,GAAgBJ,EAAeC,CAAS,GAItD,gBAAC,OAAI,UAAAtU,CAAA,EACH,gBAACsJ,GAAA,EAAW,CAAC,MAAM,oBAAoB,WAAY,GAAI,KAAI,IACzD,gBAACoL,GAAA,GACC,KAAK,OACL,aAAW,mBACX,YAAY,wFACZ,MAAOJ,EACP,SAAWlU,GAAUmU,EAAanU,EAAM,cAAc,KAAK,EAC7D,CACF,EACC,CAAC,CAACoU,EAAY,QAAU,gBAACG,GAAA,CAAY,OAAQH,CAAA,CAAa,CAC7D,CAEJ,EAKMG,GAAc,CAAC,CAAE,OAAAC,CAAO,IAE1B,gBAAC,SAAM,UAAW,gBAChB,gBAAC,aACC,gBAAC,UACC,gBAAC,UAAG,MAAI,EACR,gBAAC,UAAG,OAAK,EACT,gBAAC,UAAG,KAAG,CACT,CACF,EACA,gBAAC,aACEA,EAAO,IAAKC,GAAU,CACrB,IAAItV,EAAmBsV,EAAM,MAC7B,OAAIA,EAAM,OAASA,EAAM,iBAAiB,MACxCtV,EAAQsV,EAAM,MAAM,QACXA,EAAM,OACftV,EAAQ,gBAAC,KAAE,KAAMsV,EAAM,MAAOtV,CAAM,GAGpC,gBAAC,MAAG,IAAK,GAAGsV,EAAM,QAAQA,EAAM,SAC9B,gBAAC,UAAIA,EAAM,IAAK,EAChB,gBAAC,UAAItV,CAAM,EACX,gBAAC,UAAIsV,EAAM,KAAO,gBAAC,KAAE,KAAMA,EAAM,MAAOA,EAAM,IAAK,EAAO,EAAG,CAC/D,CAEJ,CAAC,CACH,CACF,EAWJ,SAASJ,GAAgBJ,EAAqCC,EAAiC,CAC7F,OAAOD,EACJ,OAAQQ,GAAUA,EAAM,MAAQA,EAAM,YAAY,EAClD,IAAKA,GAAU,CACd,GAAI,CACF,MAAMC,EAAYR,EAAU,MAAMO,EAAM,YAAY,EAC9CtV,EAAQuV,GAAaA,EAAU,CAAC,EACtC,IAAIC,EAAgC,KAEpC,OAAIF,EAAM,KAAOtV,IACfwV,KAAO,OAAwB,CAC7B,MAAO,CACL,KAAM,GACN,KAAM,MAAU,OAChB,OAAQ,CAACxV,CAAK,EACd,OAAQ,CACN,MAAO,CAAC,CAAE,MAAO,GAAI,IAAKsV,EAAM,GAAI,CAAC,CACvC,CACF,EACA,SAAU,EACV,MAAO,CAAC,CACV,CAAC,EAAE,CAAC,GAGqB,CACzB,KAAMA,EAAM,KACZ,MAAOtV,GAAS,aAChB,KAAMwV,EAAOA,EAAK,KAAO,MAC3B,CAEF,OAASpP,EAAP,CAKA,MAJ2B,CACzB,KAAMkP,EAAM,KACZ,MAAAlP,CACF,CAEF,CACF,CAAC,CACL,C,uCC1GA,MAAM,GAAalF,IAA0B,CAC3C,OAAK;AAAA;AAAA;AAAA,IAIL,aAAW;AAAA;AAAA,oBAEOA,EAAM,QAAQ,EAAG;AAAA,IAEnC,cAAY;AAAA;AAAA,oBAEMA,EAAM,QAAQ,EAAG;AAAA,IAEnC,YAAU;AAAA;AAAA,oBAEQA,EAAM,QAAQ,EAAG;AAAA,IAEnC,wBAAsB;AAAA;AAAA,IAGtB,gBAAc;AAAA,oBACIA,EAAM,QAAQ,CAAC;AAAA,IAEjC,cAAY,QACd,GAUauU,GAAgBpU,GAAiB,CAC5C,KAAM,CAAE,MAAArB,EAAO,SAAAQ,EAAU,SAAAmI,EAAU,YAAA+M,EAAa,UAAAjV,EAAW,aAAAkV,CAAa,EAAItU,EACtEP,KAAS,MAAW,EAAS,EAC7B,CAAC8U,EAAkBC,CAAmB,KAAI,YAAS,CAAC,CAAC7V,EAAM,aAAa,EACxE8V,KAAcvC,EAAA,GAAYvT,EAAM,aAAa,KAGnD,aAAU,IAAM,CACV,CAAC8V,GAAe9V,EAAM,eAAiB,CAAC4V,GAC1CC,EAAoB,EAAI,EAEtBC,GAAe,CAAC9V,EAAM,eAAiB4V,GACzCC,EAAoB,EAAK,CAE7B,EAAG,CAACC,EAAa9V,EAAM,cAAe4V,CAAgB,CAAC,EAEvD,MAAMG,EAAgBT,GAA+BzU,GAA+C,CAClGL,EAAS,CACP,GAAGR,EACH,CAACsV,CAAK,EAAGzU,EAAM,cAAc,KAC/B,CAAC,CACH,EAEMmV,EAAc,CAACL,EAAa3V,EAAM,IAAI,EAE5C,OACE,gBAAC,OAAI,UAAAS,EAAsB,cAAY,iBACrC,gBAAC,OAAI,UAAU,WACb,gBAACU,EAAA,EAAK,CAAC,UAAWL,EAAO,UAAW,MAAM,OAAO,QAASkV,EAAa,MAAM,8BAC3E,gBAAC5O,GAAA,EAAK,CAAC,MAAOpH,EAAM,KAAM,SAAU+V,EAAa,MAAM,EAAG,YAAY,aAAa,QAASC,CAAA,CAAa,CAC3G,EACA,gBAAC7U,EAAA,GACC,UAAWL,EAAO,WAClB,MACE,gBAACmV,GAAA,CACC,MAAM,QACN,QAAQ,0GACV,GAGF,gBAAC7O,GAAA,EAAK,CAAC,MAAOpH,EAAM,aAAc,SAAU+V,EAAa,cAAc,EAAG,CAC5E,EACA,gBAAC5U,EAAA,EAAK,CAAC,MAAM,IACX,gBAACoG,EAAA,IACC,QAAQ,cACR,MAAM,eACN,KAAK,QACL,QAAU1G,GAAU,CAClBA,EAAM,eAAe,EACrB8H,EAAS,CACX,EACF,CACF,CACF,EAEA,gBAAC,OAAI,UAAU,WACb,gBAACxH,EAAA,EAAK,CAAC,MAAOyU,EAAmB,QAAU,MAAO,UAAW9U,EAAO,UAClE,gBAACoV,GAAA,GACC,YAAaN,EAAmB,iBAAmB,oCACnD,MAAO5V,EAAM,KAAO,GACpB,SAAWmW,GACT3V,EAAS,CACP,GAAGR,EACH,IAAKmW,CACP,CAAC,EAEH,YAAAT,CAAA,CACF,CACF,EACA,gBAACvU,EAAA,GACC,UAAWL,EAAO,qBAClB,MACE,gBAACmV,GAAA,CACC,MAAM,YACN,QAAQ,8EACV,GAGF,gBAAC7O,GAAA,EAAK,CAAC,MAAOpH,EAAM,gBAAiB,SAAU+V,EAAa,iBAAiB,EAAG,CAClF,CACF,EAEA,gBAAC,OAAI,UAAU,WACb,gBAAC5U,EAAA,EAAK,CAAC,MAAM,gBAAgB,UAAWL,EAAO,cAC7C,gBAACsV,GAAA,GACC,MAAOR,EACP,SAAWnR,GAAqC,CAC9C,KAAM,CAAE,QAAA4R,CAAQ,EAAI5R,EAAE,cACjB4R,GACH7V,EAAS,CACP,GAAGR,EACH,cAAe,MACjB,CAAC,EAEH6V,EAAoBQ,CAAO,CAC7B,EACF,CACF,EAECT,GACC,gBAACzU,EAAA,EAAK,CAAC,MAAM,GAAG,UAAWL,EAAO,YAChC,gBAACwV,GAAA,GACC,QAAS,GACT,SAAWC,GACT/V,EAAS,CACP,GAAGR,EACH,cAAeuW,EAAG,GACpB,CAAC,EAEH,QAASvW,EAAM,cACf,UAAS,GACX,CACF,CAEJ,CACF,CAEJ,EAEMiW,GAAe,CAAC,CAAE,QAAAO,EAAS,MAAArR,CAAM,IACrC,gBAACgC,GAAA,EAAK,KACHhC,EACD,gBAACiL,GAAA,EAAO,CAAC,UAAU,MAAM,QAAAoG,EAAkB,MAAM,QAC/C,gBAACnG,GAAA,EAAI,CAAC,SAAU,EAAG,KAAK,cAAc,KAAK,KAAK,MAAO,CAAE,WAAY,MAAO,EAAG,CACjF,CACF,EC5JI,GAAanP,IAA0B,CAC3C,aAAW;AAAA;AAAA,IAGX,gBAAc;AAAA,qBACKA,EAAM,QAAQ,CAAC;AAAA,IAElC,aAAW;AAAA,qBACQA,EAAM,QAAQ,CAAC;AAAA,IAElC,gBAAc;AAAA,kBACEA,EAAM,QAAQ,CAAC;AAAA,GAEjC,GAOauV,GAAgB,CAAC,CAAE,OAAApB,EAAS,CAAC,EAAG,SAAA7U,CAAS,IAAa,CACjE,MAAMU,KAAQ,MAAU,EAClBJ,EAAS,GAAUI,CAAK,EAExB,CAACwV,EAAWC,CAAY,KAAI,YAAS,EAAK,EAE1ChB,KAAe,eAClB/P,GACQyP,EAAO,OAAQC,GAAUA,EAAM,MAAQA,EAAM,OAAS1P,CAAI,EAAE,QAAU,EAE/E,CAACyP,CAAM,CACT,EAEA,OACE,gBAACV,GAAA,GACC,MAAM,iBACN,YACE,gBAACC,GAAA,GACC,YAAY,wGACZ,OAAO,kDACP,QAAQ,iBACV,GAGF,gBAAC,OAAI,UAAW9T,EAAO,WACpBuU,EAAO,IAAI,CAACC,EAAOjO,IAEhB,gBAACoO,GAAA,CACC,UAAW3U,EAAO,aAClB,IAAKuG,EACL,MAAOiO,EACP,SAAWsB,GAAa,CACtB,MAAMC,EAAmB,CAAC,GAAGxB,CAAM,EACnCwB,EAAiB,OAAOxP,EAAO,EAAGuP,CAAQ,EAC1CpW,EAASqW,CAAgB,CAC3B,EACA,SAAU,IAAM,CACd,MAAMA,EAAmB,CAAC,GAAGxB,CAAM,EACnCwB,EAAiB,OAAOxP,EAAO,CAAC,EAChC7G,EAASqW,CAAgB,CAC3B,EACA,aAAAlB,EACA,YAAa,CACX,CACE,MAAO,KAAoB,SAC3B,MAAO,YACP,cAAe,kDACf,OAAQ,MAAe,KACzB,CACF,EACF,CAEH,EACD,gBAAC,WACC,gBAACpO,EAAA,IACC,QAAQ,YACR,UAAWzG,EAAO,UAClB,KAAK,OACL,QAAUD,GAAU,CAClBA,EAAM,eAAe,EACrB,MAAMgW,EAAmB,CAAC,GAAGxB,EAAQ,CAAE,KAAM,GAAI,aAAc,GAAI,gBAAiB,GAAI,IAAK,EAAG,CAAC,EACjG7U,EAASqW,CAAgB,CAC3B,GACD,KAED,EAECxB,EAAO,OAAS,GACf,gBAAC9N,EAAA,GAAM,CAAC,QAAQ,YAAY,KAAK,SAAS,QAAS,IAAMoP,EAAa,CAACD,CAAS,GAC7EA,EAAY,2BAA6B,0BAC5C,CAEJ,EAECA,GACC,gBAAC,OAAI,UAAW5V,EAAO,cACrB,gBAAC+T,GAAA,CACC,aAAW;AAAA;AAAA,gBAGX,cAAeQ,CAAA,CACjB,CACF,CAEJ,CACF,CAEJ,E,4BC1GO,MAAMyB,GAAiBzV,GAAiB,CAC7C,KAAM,CAAE,SAAAsN,EAAU,iBAAAoI,EAAkB,qBAAA1D,EAAsB,6BAAA2D,CAA6B,EAAI3V,EAC3F,OACE,gBAACsT,GAAA,GACC,MAAM,UACN,YACE,gBAACC,GAAA,GACC,YAAY,4DACZ,OAAO,2CACP,QAAQ,iBACV,GAGF,gBAAC7K,GAAA,GACC,MAAM,gBACN,QAAQ,uBACR,WAAY,GACZ,QACE,gCAAE,uPAIF,GAGF,gBAAC3C,GAAA,GACC,KAAK,SACL,GAAG,uBACH,MAAOuH,EACP,SAAW9N,GAA6CkW,EAAiBlW,EAAM,cAAc,KAAK,EAClG,MAAO,GACP,YAAY,OACZ,WAAY,GACd,CACF,EAECN,EAAO,sBAAe,0BACrB,gBAAC0W,GAAA,EAAc,KACb,gBAAClN,GAAA,GACC,MAAM,wBACN,QAAQ,mCACR,WAAY,GACZ,QACE,gCAEI,2PAEJ,GAGF,gBAAC3C,GAAA,GACC,KAAK,SACL,GAAG,mCACH,MAAOiM,EACP,SAAWxS,GACTmW,EAA6BnW,EAAM,cAAc,KAAK,EAExD,MAAO,GACP,YAAY,yBACZ,WAAY,GACd,CACF,EACA,gBAACkJ,GAAA,EAAW,KACV,gBAACmN,GAAA,GACC,KAAK,eACL,MAAM,SACN,KAAK,uBACL,QAAQ,kFACV,CACF,CACF,CAEJ,CAEJ,ECjEMC,GACY7B,GAChB,CAACjI,EAA0CrN,KAClC,CACL,GAAGqN,EACH,SAAU,CACR,GAAGA,EAAQ,SACX,CAACiI,CAAK,EAAGtV,CACX,CACF,GAGEoX,GAAcD,GAAgB,UAAU,EACxCE,GAA0BF,GAAgB,sBAAsB,EAChEG,GAAmBH,GAAgB,eAAe,EAE3CI,GAAgBlW,GAAiB,CAC5C,KAAM,CAAE,QAAAgM,EAAS,gBAAAqH,CAAgB,EAAIrT,EAE/BmW,KAA6B,eAChCxX,GAAkB,IACjB,MAAkB,6CAA8C,CAAE,MAAAA,CAAM,CAAC,EACzE0U,EAAgB2C,GAAwBhK,EAASrN,CAAK,CAAC,CACzD,EACA,CAACqN,EAASqH,CAAe,CAC3B,EAEA,OACE,gCACE,gBAAC+C,GAAA,GACC,eAAe,OACf,SAAS,uFACT,kBAAmB,GACrB,EACA,gBAAC1W,GAAA,EAAO,IAAC,EACT,gBAAC2W,GAAA,EAAkB,CAAC,OAAQrK,EAAS,SAAUqH,EAAiB,eAAe,uBAAwB,GACvG,gBAAC3T,GAAA,EAAO,IAAC,EACT,gBAAC4W,GAAA,GACE,MAAG,OAAuB,CACzB,OAAQtK,EACR,SAAUqH,CACZ,CAAC,EACH,EACA,gBAAC3T,GAAA,EAAO,IAAC,EACT,gBAAC6W,GAAA,GACC,MAAM,sBACN,YAAY,2GACZ,cAAe,GACf,gBAAe,IAEf,gBAACtX,GAAA,EAAoB,CAAC,OAAQ+M,EAAS,SAAUqH,CAAA,CAAiB,EAClE,gBAAC3T,GAAA,EAAO,CAAC,SAAQ,GAAC,EACjBR,EAAO,kCACN,gBAACsX,GAAA,EAAwB,CAAC,QAAAxK,EAAkB,gBAAAqH,CAAA,CAAkC,EAEhF,gBAACD,GAAgB,CAAC,QAAApH,EAAkB,gBAAAqH,CAAA,CAAkC,EACtE,gBAAC3T,GAAA,EAAO,CAAC,SAAQ,GAAC,EAClB,gBAAC+V,GAAA,CACC,SAAUzJ,EAAQ,SAAS,UAAY,GACvC,iBAAmBrN,GAAU0U,EAAgB0C,GAAY/J,EAASrN,CAAK,CAAC,EACxE,qBAAsBqN,EAAQ,SAAS,sBAAwB,GAC/D,6BAA8BmK,CAAA,CAChC,EACA,gBAACzW,GAAA,EAAO,CAAC,SAAQ,GAAC,EAClB,gBAAC0V,GAAA,CACC,OAAQpJ,EAAQ,SAAS,cACzB,SAAWrN,GAAU0U,EAAgB4C,GAAiBjK,EAASrN,CAAK,CAAC,EACvE,CACF,CACF,CAEJ,E,4BCpFO,MAAM,GAAS,IAAI,KAAiB,KAAc,EACtD,eAAe,EAAoB,EACnC,gBAAgBuX,EAAY,EAC5B,mBAAmBvT,CAAc,KAGpC,MAAa,EAAE,UAA2C,KAAsB,KAAwB,C","sources":["webpack://grafana/./.yarn/__virtual__/@grafana-experimental-virtual-4d6787efaa/0/cache/@grafana-experimental-npm-1.7.0-bca9c8fecc-f418072aab.zip/node_modules/@grafana/experimental/dist/esm/ConfigEditor/AdvancedSettings/AdvancedHttpSettings.js","webpack://grafana/./public/app/core/components/Divider.tsx","webpack://grafana/./public/app/plugins/datasource/loki/components/monaco-query-field/MonacoQueryFieldLazy.tsx","webpack://grafana/./public/app/plugins/datasource/loki/components/monaco-query-field/MonacoQueryFieldWrapper.tsx","webpack://grafana/./public/app/plugins/datasource/loki/components/LokiQueryField.tsx","webpack://grafana/./public/app/plugins/datasource/loki/languageUtils.ts","webpack://grafana/./public/app/plugins/datasource/loki/components/LokiCheatSheet.tsx","webpack://grafana/./public/app/plugins/datasource/loki/components/LokiLabelBrowser.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/LabelBrowserModal.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/LabelFilterItem.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/LabelFilters.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/LokiQueryBuilderExplained.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/NestedQuery.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/NestedQueryList.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/LokiQueryBuilder.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/QueryPreview.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/LokiQueryBuilderContainer.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/LokiQueryBuilderOptions.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/LokiQueryCodeEditor.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/QueryPattern.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/QueryPatternsModal.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/state.ts","webpack://grafana/./public/app/plugins/datasource/loki/components/stats.ts","webpack://grafana/./public/app/plugins/datasource/loki/components/LokiQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/loki/components/LokiQueryEditorForAlerting.tsx","webpack://grafana/./public/app/plugins/datasource/loki/components/LokiQueryEditorByApp.tsx","webpack://grafana/./public/app/plugins/datasource/loki/configuration/AlertingSettings.tsx","webpack://grafana/./public/app/plugins/datasource/loki/configuration/DebugSection.tsx","webpack://grafana/./public/app/plugins/datasource/loki/configuration/DerivedField.tsx","webpack://grafana/./public/app/plugins/datasource/loki/configuration/DerivedFields.tsx","webpack://grafana/./public/app/plugins/datasource/loki/configuration/QuerySettings.tsx","webpack://grafana/./public/app/plugins/datasource/loki/configuration/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/loki/module.ts"],"sourcesContent":["import React__default from 'react';\nimport { css, cx } from '@emotion/css';\nimport { InlineField, TagsInput, Input } from '@grafana/ui';\nimport { ConfigSubSection } from '../ConfigSection/ConfigSubSection.js';\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst AdvancedHttpSettings = ({\n  config,\n  onChange,\n  className\n}) => {\n  const onCookiesChange = (cookies) => {\n    onChange(__spreadProps(__spreadValues({}, config), {\n      jsonData: __spreadProps(__spreadValues({}, config.jsonData), {\n        keepCookies: cookies\n      })\n    }));\n  };\n  const onTimeoutChange = (event) => {\n    onChange(__spreadProps(__spreadValues({}, config), {\n      jsonData: __spreadProps(__spreadValues({}, config.jsonData), {\n        timeout: parseInt(event.currentTarget.value, 10)\n      })\n    }));\n  };\n  const styles = {\n    container: css({\n      maxWidth: 578\n    })\n  };\n  return /* @__PURE__ */ React__default.createElement(ConfigSubSection, { title: \"Advanced HTTP settings\", className: cx(styles.container, className) }, /* @__PURE__ */ React__default.createElement(\n    InlineField,\n    {\n      htmlFor: \"advanced-http-cookies\",\n      label: \"Allowed cookies\",\n      labelWidth: 24,\n      tooltip: \"Grafana proxy deletes forwarded cookies by default. Specify cookies by name that should be forwarded to the data source.\",\n      disabled: config.readOnly,\n      grow: true\n    },\n    /* @__PURE__ */ React__default.createElement(\n      TagsInput,\n      {\n        id: \"advanced-http-cookies\",\n        placeholder: \"New cookie (hit enter to add)\",\n        tags: config.jsonData.keepCookies,\n        onChange: onCookiesChange\n      }\n    )\n  ), /* @__PURE__ */ React__default.createElement(\n    InlineField,\n    {\n      htmlFor: \"advanced-http-timeout\",\n      label: \"Timeout\",\n      labelWidth: 24,\n      tooltip: \"HTTP request timeout in seconds\",\n      disabled: config.readOnly,\n      grow: true\n    },\n    /* @__PURE__ */ React__default.createElement(\n      Input,\n      {\n        id: \"advanced-http-timeout\",\n        type: \"number\",\n        min: 0,\n        placeholder: \"Timeout in seconds\",\n        \"aria-label\": \"Timeout in seconds\",\n        value: config.jsonData.timeout,\n        onChange: onTimeoutChange\n      }\n    )\n  ));\n};\n\nexport { AdvancedHttpSettings };\n//# sourceMappingURL=AdvancedHttpSettings.js.map\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nexport const Divider = ({ hideLine = false }) => {\n  const styles = useStyles2(getStyles);\n\n  if (hideLine) {\n    return <hr className={styles.dividerHideLine} />;\n  }\n\n  return <hr className={styles.divider} />;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  divider: css`\n    margin: ${theme.spacing(4, 0)};\n  `,\n  dividerHideLine: css`\n    border: none;\n    margin: ${theme.spacing(3, 0)};\n  `,\n});\n","import React, { Suspense } from 'react';\n\nimport { Props } from './MonacoQueryFieldProps';\n\nconst Field = React.lazy(() => import(/* webpackChunkName: \"loki-query-field\" */ './MonacoQueryField'));\n\nexport const MonacoQueryFieldLazy = (props: Props) => {\n  return (\n    <Suspense fallback={null}>\n      <Field {...props} />\n    </Suspense>\n  );\n};\n","import React, { useRef } from 'react';\n\nimport { MonacoQueryFieldLazy } from './MonacoQueryFieldLazy';\nimport { Props as MonacoProps } from './MonacoQueryFieldProps';\n\nexport type Props = Omit<MonacoProps, 'onRunQuery' | 'onBlur'> & {\n  onChange: (query: string) => void;\n  onRunQuery: () => void;\n  onQueryType?: (query: string) => void;\n};\n\nexport const MonacoQueryFieldWrapper = (props: Props) => {\n  const lastRunValueRef = useRef<string | null>(null);\n  const { onRunQuery, onChange, ...rest } = props;\n\n  const handleRunQuery = (value: string) => {\n    lastRunValueRef.current = value;\n    onChange(value);\n    onRunQuery();\n  };\n\n  const handleBlur = (value: string) => {\n    onChange(value);\n  };\n\n  return <MonacoQueryFieldLazy onRunQuery={handleRunQuery} onBlur={handleBlur} onChange={onChange} {...rest} />;\n};\n","import React, { ReactNode } from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\n\nimport { LokiDatasource } from '../datasource';\nimport { shouldRefreshLabels } from '../languageUtils';\nimport { LokiQuery, LokiOptions } from '../types';\n\nimport { MonacoQueryFieldWrapper } from './monaco-query-field/MonacoQueryFieldWrapper';\n\nexport interface LokiQueryFieldProps extends QueryEditorProps<LokiDatasource, LokiQuery, LokiOptions> {\n  ExtraFieldElement?: ReactNode;\n  placeholder?: string;\n  'data-testid'?: string;\n}\n\ninterface LokiQueryFieldState {\n  labelsLoaded: boolean;\n}\n\nexport class LokiQueryField extends React.PureComponent<LokiQueryFieldProps, LokiQueryFieldState> {\n  _isMounted = false;\n\n  constructor(props: LokiQueryFieldProps) {\n    super(props);\n\n    this.state = { labelsLoaded: false };\n  }\n\n  async componentDidMount() {\n    this._isMounted = true;\n    await this.props.datasource.languageProvider.start();\n    if (this._isMounted) {\n      this.setState({ labelsLoaded: true });\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  componentDidUpdate(prevProps: LokiQueryFieldProps) {\n    const {\n      range,\n      datasource: { languageProvider },\n    } = this.props;\n    const refreshLabels = shouldRefreshLabels(range, prevProps.range);\n    // We want to refresh labels when range changes (we round up intervals to a minute)\n    if (refreshLabels) {\n      languageProvider.fetchLabels();\n    }\n  }\n\n  onChangeQuery = (value: string, override?: boolean) => {\n    // Send text change to parent\n    const { query, onChange, onRunQuery } = this.props;\n    if (onChange) {\n      const nextQuery = { ...query, expr: value };\n      onChange(nextQuery);\n\n      if (override && onRunQuery) {\n        onRunQuery();\n      }\n    }\n  };\n\n  render() {\n    const { ExtraFieldElement, query, datasource, history, onRunQuery } = this.props;\n    const placeholder = this.props.placeholder ?? 'Enter a Loki query (run with Shift+Enter)';\n\n    return (\n      <>\n        <div\n          className=\"gf-form-inline gf-form-inline--xs-view-flex-column flex-grow-1\"\n          data-testid={this.props['data-testid']}\n        >\n          <div className=\"gf-form--grow flex-shrink-1 min-width-15\">\n            <MonacoQueryFieldWrapper\n              datasource={datasource}\n              history={history ?? []}\n              onChange={this.onChangeQuery}\n              onRunQuery={onRunQuery}\n              initialValue={query.expr ?? ''}\n              placeholder={placeholder}\n            />\n          </div>\n        </div>\n        {ExtraFieldElement}\n      </>\n    );\n  }\n}\n","import { TimeRange } from '@grafana/data';\n\nfunction roundMsToMin(milliseconds: number): number {\n  return roundSecToMin(milliseconds / 1000);\n}\n\nfunction roundSecToMin(seconds: number): number {\n  return Math.floor(seconds / 60);\n}\n\nexport function shouldRefreshLabels(range?: TimeRange, prevRange?: TimeRange): boolean {\n  if (range && prevRange) {\n    const sameMinuteFrom = roundMsToMin(range.from.valueOf()) === roundMsToMin(prevRange.from.valueOf());\n    const sameMinuteTo = roundMsToMin(range.to.valueOf()) === roundMsToMin(prevRange.to.valueOf());\n    // If both are same, don't need to refresh\n    return !(sameMinuteFrom && sameMinuteTo);\n  }\n  return false;\n}\n\n// Loki regular-expressions use the RE2 syntax (https://github.com/google/re2/wiki/Syntax),\n// so every character that matches something in that list has to be escaped.\n// the list of meta characters is: *+?()|\\.[]{}^$\n// we make a javascript regular expression that matches those characters:\nconst RE2_METACHARACTERS = /[*+?()|\\\\.\\[\\]{}^$]/g;\nfunction escapeLokiRegexp(value: string): string {\n  return value.replace(RE2_METACHARACTERS, '\\\\$&');\n}\n\n// based on the openmetrics-documentation, the 3 symbols we have to handle are:\n// - \\n ... the newline character\n// - \\  ... the backslash character\n// - \"  ... the double-quote character\nexport function escapeLabelValueInExactSelector(labelValue: string): string {\n  return labelValue.replace(/\\\\/g, '\\\\\\\\').replace(/\\n/g, '\\\\n').replace(/\"/g, '\\\\\"');\n}\n\nexport function unescapeLabelValue(labelValue: string): string {\n  return labelValue.replace(/\\\\n/g, '\\n').replace(/\\\\\"/g, '\"').replace(/\\\\\\\\/g, '\\\\');\n}\n\nexport function escapeLabelValueInRegexSelector(labelValue: string): string {\n  return escapeLabelValueInExactSelector(escapeLokiRegexp(labelValue));\n}\n\nexport function escapeLabelValueInSelector(labelValue: string, selector?: string): string {\n  return isRegexSelector(selector)\n    ? escapeLabelValueInRegexSelector(labelValue)\n    : escapeLabelValueInExactSelector(labelValue);\n}\n\nexport function isRegexSelector(selector?: string) {\n  if (selector && (selector.includes('=~') || selector.includes('!~'))) {\n    return true;\n  }\n  return false;\n}\n\nexport function isBytesString(string: string) {\n  const BYTES_KEYWORDS = [\n    'b',\n    'kib',\n    'Kib',\n    'kb',\n    'KB',\n    'mib',\n    'Mib',\n    'mb',\n    'MB',\n    'gib',\n    'Gib',\n    'gb',\n    'GB',\n    'tib',\n    'Tib',\n    'tb',\n    'TB',\n    'pib',\n    'Pib',\n    'pb',\n    'PB',\n    'eib',\n    'Eib',\n    'eb',\n    'EB',\n  ];\n  const regex = new RegExp(`^(?:-?\\\\d+(?:\\\\.\\\\d+)?)(?:${BYTES_KEYWORDS.join('|')})$`);\n  const match = string.match(regex);\n  return !!match;\n}\n","import { shuffle } from 'lodash';\nimport React, { PureComponent } from 'react';\n\nimport { QueryEditorHelpProps } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\n\nimport LokiLanguageProvider from '../LanguageProvider';\nimport { LokiQuery } from '../types';\n\nconst DEFAULT_EXAMPLES = ['{job=\"default/prometheus\"}'];\nconst PREFERRED_LABELS = ['job', 'app', 'k8s_app'];\nconst EXAMPLES_LIMIT = 5;\n\nconst LOGQL_EXAMPLES = [\n  {\n    title: 'Log pipeline',\n    expression: '{job=\"mysql\"} |= \"metrics\" | logfmt | duration > 10s',\n    label:\n      'This query targets the MySQL job, keeps logs that contain the substring \"metrics\", and then parses and filters the logs further.',\n  },\n  {\n    title: 'Count over time',\n    expression: 'count_over_time({job=\"mysql\"}[5m])',\n    label: 'This query counts all the log lines within the last five minutes for the MySQL job.',\n  },\n  {\n    title: 'Rate',\n    expression: 'rate(({job=\"mysql\"} |= \"error\" != \"timeout\")[10s])',\n    label:\n      'This query gets the per-second rate of all non-timeout errors within the last ten seconds for the MySQL job.',\n  },\n  {\n    title: 'Aggregate, count, and group',\n    expression: 'sum(count_over_time({job=\"mysql\"}[5m])) by (level)',\n    label: 'Get the count of logs during the last five minutes, grouping by level.',\n  },\n];\n\nexport default class LokiCheatSheet extends PureComponent<QueryEditorHelpProps<LokiQuery>, { userExamples: string[] }> {\n  declare userLabelTimer: ReturnType<typeof setTimeout>;\n  state = {\n    userExamples: [],\n  };\n\n  componentDidMount() {\n    this.scheduleUserLabelChecking();\n    reportInteraction('grafana_loki_cheatsheet_opened', {});\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.userLabelTimer);\n  }\n\n  scheduleUserLabelChecking() {\n    this.userLabelTimer = setTimeout(this.checkUserLabels, 1000);\n  }\n\n  checkUserLabels = async () => {\n    // Set example from user labels\n    const provider: LokiLanguageProvider = this.props.datasource?.languageProvider;\n    if (provider.started) {\n      const labels = provider.getLabelKeys() || [];\n      const preferredLabel = PREFERRED_LABELS.find((l) => labels.includes(l));\n      if (preferredLabel) {\n        const values = await provider.getLabelValues(preferredLabel);\n        const userExamples = shuffle(values)\n          .slice(0, EXAMPLES_LIMIT)\n          .map((value) => `{${preferredLabel}=\"${value}\"}`);\n        this.setState({ userExamples });\n      }\n    } else {\n      this.scheduleUserLabelChecking();\n    }\n  };\n\n  renderExpression(expr: string) {\n    const { onClickExample } = this.props;\n    const onClick = (query: LokiQuery) => {\n      onClickExample(query);\n      reportInteraction('grafana_loki_cheatsheet_example_clicked', {});\n    };\n\n    return (\n      <button\n        type=\"button\"\n        className=\"cheat-sheet-item__example\"\n        key={expr}\n        onClick={(e) => onClick({ refId: 'A', expr })}\n      >\n        <code>{expr}</code>\n      </button>\n    );\n  }\n\n  render() {\n    const { userExamples } = this.state;\n    const hasUserExamples = userExamples.length > 0;\n\n    return (\n      <div>\n        <h2>Loki Cheat Sheet</h2>\n        <div className=\"cheat-sheet-item\">\n          <div className=\"cheat-sheet-item__title\">See your logs</div>\n          <div className=\"cheat-sheet-item__label\">\n            Start by selecting a log stream from the Label browser, or alternatively you can write a stream selector\n            into the query field.\n          </div>\n          {hasUserExamples ? (\n            <div>\n              <div className=\"cheat-sheet-item__label\">Here are some example streams from your logs:</div>\n              {userExamples.map((example) => this.renderExpression(example))}\n            </div>\n          ) : (\n            <div>\n              <div className=\"cheat-sheet-item__label\">Here is an example of a log stream:</div>\n              {this.renderExpression(DEFAULT_EXAMPLES[0])}\n            </div>\n          )}\n        </div>\n        <div className=\"cheat-sheet-item\">\n          <div className=\"cheat-sheet-item__title\">Combine stream selectors</div>\n          {this.renderExpression('{app=\"cassandra\",namespace=\"prod\"}')}\n          <div className=\"cheat-sheet-item__label\">Returns all log lines from streams that have both labels.</div>\n        </div>\n\n        <div className=\"cheat-sheet-item\">\n          <div className=\"cheat-sheet-item__title\">Filtering for search terms.</div>\n          {this.renderExpression('{app=\"cassandra\"} |~ \"(duration|latency)s*(=|is|of)s*[d.]+\"')}\n          {this.renderExpression('{app=\"cassandra\"} |= \"exact match\"')}\n          {this.renderExpression('{app=\"cassandra\"} != \"do not match\"')}\n          <div className=\"cheat-sheet-item__label\">\n            <a href=\"https://grafana.com/docs/loki/latest/logql/#log-pipeline\" target=\"logql\">\n              LogQL\n            </a>{' '}\n            supports exact and regular expression filters.\n          </div>\n        </div>\n        {LOGQL_EXAMPLES.map((item) => (\n          <div className=\"cheat-sheet-item\" key={item.expression}>\n            <div className=\"cheat-sheet-item__title\">{item.title}</div>\n            {this.renderExpression(item.expression)}\n            <div className=\"cheat-sheet-item__label\">{item.label}</div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n","import { css, cx } from '@emotion/css';\nimport { sortBy } from 'lodash';\nimport React, { ChangeEvent } from 'react';\nimport { FixedSizeList } from 'react-window';\n\nimport { CoreApp, GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport {\n  Button,\n  HighlightPart,\n  HorizontalGroup,\n  Input,\n  Label,\n  LoadingPlaceholder,\n  withTheme2,\n  BrowserLabel as LokiLabel,\n  fuzzyMatch,\n} from '@grafana/ui';\n\nimport PromQlLanguageProvider from '../../prometheus/language_provider';\nimport LokiLanguageProvider from '../LanguageProvider';\nimport { escapeLabelValueInExactSelector, escapeLabelValueInRegexSelector } from '../languageUtils';\n\n// Hard limit on labels to render\nconst MAX_LABEL_COUNT = 1000;\nconst MAX_VALUE_COUNT = 10000;\nconst MAX_AUTO_SELECT = 4;\nconst EMPTY_SELECTOR = '{}';\n\nexport interface BrowserProps {\n  // TODO #33976: Is it possible to use a common interface here? For example: LabelsLanguageProvider\n  languageProvider: LokiLanguageProvider | PromQlLanguageProvider;\n  onChange: (selector: string) => void;\n  theme: GrafanaTheme2;\n  app?: CoreApp;\n  autoSelect?: number;\n  hide?: () => void;\n  lastUsedLabels: string[];\n  storeLastUsedLabels: (labels: string[]) => void;\n  deleteLastUsedLabels: () => void;\n}\n\ninterface BrowserState {\n  labels: SelectableLabel[];\n  searchTerm: string;\n  status: string;\n  error: string;\n  validationStatus: string;\n}\n\ninterface FacettableValue {\n  name: string;\n  selected?: boolean;\n  highlightParts?: HighlightPart[];\n  order?: number;\n}\n\nexport interface SelectableLabel {\n  name: string;\n  selected?: boolean;\n  loading?: boolean;\n  values?: FacettableValue[];\n  hidden?: boolean;\n  facets?: number;\n}\n\nexport function buildSelector(labels: SelectableLabel[]): string {\n  const selectedLabels = [];\n  for (const label of labels) {\n    if (label.selected && label.values && label.values.length > 0) {\n      const selectedValues = label.values.filter((value) => value.selected).map((value) => value.name);\n      if (selectedValues.length > 1) {\n        selectedLabels.push(`${label.name}=~\"${selectedValues.map(escapeLabelValueInRegexSelector).join('|')}\"`);\n      } else if (selectedValues.length === 1) {\n        selectedLabels.push(`${label.name}=\"${escapeLabelValueInExactSelector(selectedValues[0])}\"`);\n      }\n    }\n  }\n  return ['{', selectedLabels.join(','), '}'].join('');\n}\n\nexport function facetLabels(\n  labels: SelectableLabel[],\n  possibleLabels: Record<string, string[]>,\n  lastFacetted?: string\n): SelectableLabel[] {\n  return labels.map((label) => {\n    const possibleValues = possibleLabels[label.name];\n    if (possibleValues) {\n      let existingValues: FacettableValue[];\n      if (label.name === lastFacetted && label.values) {\n        // Facetting this label, show all values\n        existingValues = label.values;\n      } else {\n        // Keep selection in other facets\n        const selectedValues: Set<string> = new Set(\n          label.values?.filter((value) => value.selected).map((value) => value.name) || []\n        );\n        // Values for this label have not been requested yet, let's use the facetted ones as the initial values\n        existingValues = possibleValues.map((value) => ({ name: value, selected: selectedValues.has(value) }));\n      }\n      return { ...label, loading: false, values: existingValues, facets: existingValues.length };\n    }\n\n    // Label is facetted out, hide all values\n    return { ...label, loading: false, hidden: !possibleValues, values: undefined, facets: 0 };\n  });\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    background-color: ${theme.colors.background.secondary};\n    width: 100%;\n  `,\n  wrapperPadding: css`\n    padding: ${theme.spacing(2)};\n  `,\n  list: css`\n    margin-top: ${theme.spacing(1)};\n    display: flex;\n    flex-wrap: wrap;\n    max-height: 200px;\n    overflow: auto;\n  `,\n  section: css`\n    & + & {\n      margin: ${theme.spacing(2, 0)};\n    }\n\n    position: relative;\n  `,\n  footerSectionStyles: css`\n    padding: ${theme.spacing(1)};\n    background-color: ${theme.colors.background.primary};\n    position: sticky;\n    bottom: -${theme.spacing(3)}; /* offset the padding on modal */\n    left: 0;\n  `,\n  selector: css`\n    font-family: ${theme.typography.fontFamilyMonospace};\n    margin-bottom: ${theme.spacing(1)};\n    width: 100%;\n  `,\n  status: css`\n    margin-bottom: ${theme.spacing(1)};\n    color: ${theme.colors.text.secondary};\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    transition: opacity 100ms linear;\n    opacity: 0;\n    font-size: ${theme.typography.bodySmall.fontSize};\n    height: calc(${theme.typography.bodySmall.fontSize} + 10px);\n  `,\n  statusShowing: css`\n    opacity: 1;\n  `,\n  error: css`\n    color: ${theme.colors.error.main};\n  `,\n  valueList: css`\n    margin-right: ${theme.spacing(1)};\n    resize: horizontal;\n  `,\n  valueListWrapper: css`\n    border-left: 1px solid ${theme.colors.border.medium};\n    margin: ${theme.spacing(1, 0)};\n    padding: ${theme.spacing(1, 0, 1, 1)};\n  `,\n  valueListArea: css`\n    display: flex;\n    flex-wrap: wrap;\n    margin-top: ${theme.spacing(1)};\n  `,\n  valueTitle: css`\n    margin-left: -${theme.spacing(0.5)};\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  validationStatus: css`\n    padding: ${theme.spacing(0.5)};\n    margin-bottom: ${theme.spacing(1)};\n    color: ${theme.colors.text.maxContrast};\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  `,\n});\n\nexport class UnthemedLokiLabelBrowser extends React.Component<BrowserProps, BrowserState> {\n  state: BrowserState = {\n    labels: [] as SelectableLabel[],\n    searchTerm: '',\n    status: 'Ready',\n    error: '',\n    validationStatus: '',\n  };\n\n  onChangeSearch = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ searchTerm: event.target.value });\n  };\n\n  onClickRunLogsQuery = () => {\n    reportInteraction('grafana_loki_label_browser_closed', {\n      app: this.props.app,\n      closeType: 'showLogsButton',\n    });\n    const selector = buildSelector(this.state.labels);\n    this.props.onChange(selector);\n  };\n\n  onClickRunMetricsQuery = () => {\n    reportInteraction('grafana_loki_label_browser_closed', {\n      app: this.props.app,\n      closeType: 'showLogsRateButton',\n    });\n    const selector = buildSelector(this.state.labels);\n    const query = `rate(${selector}[$__auto])`;\n    this.props.onChange(query);\n  };\n\n  onClickClear = () => {\n    this.setState((state) => {\n      const labels: SelectableLabel[] = state.labels.map((label) => ({\n        ...label,\n        values: undefined,\n        selected: false,\n        loading: false,\n        hidden: false,\n        facets: undefined,\n      }));\n      return { labels, searchTerm: '', status: '', error: '', validationStatus: '' };\n    });\n    this.props.deleteLastUsedLabels();\n  };\n\n  onClickLabel = (name: string, value: string | undefined, event: React.MouseEvent<HTMLElement>) => {\n    const label = this.state.labels.find((l) => l.name === name);\n    if (!label) {\n      return;\n    }\n    // Toggle selected state\n    const selected = !label.selected;\n    let nextValue: Partial<SelectableLabel> = { selected };\n    if (label.values && !selected) {\n      // Deselect all values if label was deselected\n      const values = label.values.map((value) => ({ ...value, selected: false }));\n      nextValue = { ...nextValue, facets: 0, values };\n    }\n    // Resetting search to prevent empty results\n    this.setState({ searchTerm: '' });\n    this.updateLabelState(name, nextValue, '', () => this.doFacettingForLabel(name));\n  };\n\n  onClickValue = (name: string, value: string | undefined, event: React.MouseEvent<HTMLElement>) => {\n    const label = this.state.labels.find((l) => l.name === name);\n    if (!label || !label.values) {\n      return;\n    }\n    // Resetting search to prevent empty results\n    this.setState({ searchTerm: '' });\n    // Toggling value for selected label, leaving other values intact\n    const values = label.values.map((v) => ({ ...v, selected: v.name === value ? !v.selected : v.selected }));\n    this.updateLabelState(name, { values }, '', () => this.doFacetting(name));\n  };\n\n  onClickValidate = () => {\n    const selector = buildSelector(this.state.labels);\n    this.validateSelector(selector);\n  };\n\n  updateLabelState(name: string, updatedFields: Partial<SelectableLabel>, status = '', cb?: () => void) {\n    this.setState((state) => {\n      const labels: SelectableLabel[] = state.labels.map((label) => {\n        if (label.name === name) {\n          return { ...label, ...updatedFields };\n        }\n        return label;\n      });\n      // New status overrides errors\n      const error = status ? '' : state.error;\n      return { labels, status, error, validationStatus: '' };\n    }, cb);\n  }\n\n  componentDidMount() {\n    const { languageProvider, autoSelect = MAX_AUTO_SELECT, lastUsedLabels } = this.props;\n    if (languageProvider) {\n      const selectedLabels: string[] = lastUsedLabels;\n      languageProvider.start().then(() => {\n        let rawLabels: string[] = languageProvider.getLabelKeys();\n        if (rawLabels.length > MAX_LABEL_COUNT) {\n          const error = `Too many labels found (showing only ${MAX_LABEL_COUNT} of ${rawLabels.length})`;\n          rawLabels = rawLabels.slice(0, MAX_LABEL_COUNT);\n          this.setState({ error });\n        }\n        // Auto-select all labels if label list is small enough\n        const labels: SelectableLabel[] = rawLabels.map((label, i, arr) => ({\n          name: label,\n          selected: (arr.length <= autoSelect && selectedLabels.length === 0) || selectedLabels.includes(label),\n          loading: false,\n        }));\n        // Pre-fetch values for selected labels\n        this.setState({ labels }, () => {\n          this.state.labels.forEach((label) => {\n            if (label.selected) {\n              this.fetchValues(label.name, EMPTY_SELECTOR);\n            }\n          });\n        });\n      });\n    }\n  }\n\n  doFacettingForLabel(name: string) {\n    const label = this.state.labels.find((l) => l.name === name);\n    if (!label) {\n      return;\n    }\n    const selectedLabels = this.state.labels.filter((label) => label.selected).map((label) => label.name);\n    this.props.storeLastUsedLabels(selectedLabels);\n    if (label.selected) {\n      // Refetch values for newly selected label...\n      if (!label.values) {\n        this.fetchValues(name, buildSelector(this.state.labels));\n      }\n    } else {\n      // Only need to facet when deselecting labels\n      this.doFacetting();\n    }\n  }\n\n  doFacetting = (lastFacetted?: string) => {\n    const selector = buildSelector(this.state.labels);\n    if (selector === EMPTY_SELECTOR) {\n      // Clear up facetting\n      const labels: SelectableLabel[] = this.state.labels.map((label) => {\n        return { ...label, facets: 0, values: undefined, hidden: false };\n      });\n      this.setState({ labels }, () => {\n        // Get fresh set of values\n        this.state.labels.forEach((label) => label.selected && this.fetchValues(label.name, selector));\n      });\n    } else {\n      // Do facetting\n      this.fetchSeries(selector, lastFacetted);\n    }\n  };\n\n  async fetchValues(name: string, selector: string) {\n    const { languageProvider } = this.props;\n    this.updateLabelState(name, { loading: true }, `Fetching values for ${name}`);\n    try {\n      let rawValues = await languageProvider.getLabelValues(name);\n      // If selector changed, clear loading state and discard result by returning early\n      if (selector !== buildSelector(this.state.labels)) {\n        this.updateLabelState(name, { loading: false }, '');\n        return;\n      }\n      if (rawValues.length > MAX_VALUE_COUNT) {\n        const error = `Too many values for ${name} (showing only ${MAX_VALUE_COUNT} of ${rawValues.length})`;\n        rawValues = rawValues.slice(0, MAX_VALUE_COUNT);\n        this.setState({ error });\n      }\n      const values: FacettableValue[] = rawValues.map((value) => ({ name: value }));\n      this.updateLabelState(name, { values, loading: false });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async fetchSeries(selector: string, lastFacetted?: string) {\n    const { languageProvider } = this.props;\n    if (lastFacetted) {\n      this.updateLabelState(lastFacetted, { loading: true }, `Loading labels for ${selector}`);\n    }\n    try {\n      const possibleLabels = await languageProvider.fetchSeriesLabels(selector, true);\n      // If selector changed, clear loading state and discard result by returning early\n      if (selector !== buildSelector(this.state.labels)) {\n        if (lastFacetted) {\n          this.updateLabelState(lastFacetted, { loading: false });\n        }\n        return;\n      }\n      if (Object.keys(possibleLabels).length === 0) {\n        this.setState({ error: `Empty results, no matching label for ${selector}` });\n        return;\n      }\n      const labels: SelectableLabel[] = facetLabels(this.state.labels, possibleLabels, lastFacetted);\n      this.setState({ labels, error: '' });\n      if (lastFacetted) {\n        this.updateLabelState(lastFacetted, { loading: false });\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async validateSelector(selector: string) {\n    const { languageProvider } = this.props;\n    this.setState({ validationStatus: `Validating selector ${selector}`, error: '' });\n    const streams = await languageProvider.fetchSeries(selector);\n    this.setState({ validationStatus: `Selector is valid (${streams.length} streams found)` });\n  }\n\n  render() {\n    const { theme } = this.props;\n    const { labels, searchTerm, status, error, validationStatus } = this.state;\n    if (labels.length === 0) {\n      return <LoadingPlaceholder text=\"Loading labels...\" />;\n    }\n    const styles = getStyles(theme);\n    const selector = buildSelector(this.state.labels);\n    const empty = selector === EMPTY_SELECTOR;\n\n    let selectedLabels = labels.filter((label) => label.selected && label.values);\n    if (searchTerm) {\n      selectedLabels = selectedLabels.map((label) => {\n        const searchResults = label.values!.filter((value) => {\n          // Always return selected values\n          if (value.selected) {\n            value.highlightParts = undefined;\n            return true;\n          }\n          const fuzzyMatchResult = fuzzyMatch(value.name.toLowerCase(), searchTerm.toLowerCase());\n          if (fuzzyMatchResult.found) {\n            value.highlightParts = fuzzyMatchResult.ranges;\n            value.order = fuzzyMatchResult.distance;\n            return true;\n          } else {\n            return false;\n          }\n        });\n        return {\n          ...label,\n          values: sortBy(searchResults, (value) => (value.selected ? -Infinity : value.order)),\n        };\n      });\n    } else {\n      // Clear highlight parts when searchTerm is cleared\n      selectedLabels = this.state.labels\n        .filter((label) => label.selected && label.values)\n        .map((label) => ({\n          ...label,\n          values: label?.values ? label.values.map((value) => ({ ...value, highlightParts: undefined })) : [],\n        }));\n    }\n\n    return (\n      <>\n        <div className={styles.wrapper}>\n          <div className={cx(styles.section, styles.wrapperPadding)}>\n            <Label description=\"Which labels would you like to consider for your search?\">\n              1. Select labels to search in\n            </Label>\n            <div className={styles.list}>\n              {labels.map((label) => (\n                <LokiLabel\n                  key={label.name}\n                  name={label.name}\n                  loading={label.loading}\n                  active={label.selected}\n                  hidden={label.hidden}\n                  facets={label.facets}\n                  onClick={this.onClickLabel}\n                />\n              ))}\n            </div>\n          </div>\n          <div className={cx(styles.section, styles.wrapperPadding)}>\n            <Label description=\"Choose the label values that you would like to use for the query. Use the search field to find values across selected labels.\">\n              2. Find values for the selected labels\n            </Label>\n            <div>\n              <Input\n                onChange={this.onChangeSearch}\n                aria-label=\"Filter expression for values\"\n                value={searchTerm}\n                placeholder={'Enter a label value'}\n              />\n            </div>\n            <div className={styles.valueListArea}>\n              {selectedLabels.map((label) => (\n                <div role=\"list\" key={label.name} className={styles.valueListWrapper}>\n                  <div className={styles.valueTitle} aria-label={`Values for ${label.name}`}>\n                    <LokiLabel\n                      name={label.name}\n                      loading={label.loading}\n                      active={label.selected}\n                      hidden={label.hidden}\n                      //If no facets, we want to show number of all label values\n                      facets={label.facets || label.values?.length}\n                      onClick={this.onClickLabel}\n                    />\n                  </div>\n                  <FixedSizeList\n                    height={200}\n                    itemCount={label.values?.length || 0}\n                    itemSize={28}\n                    itemKey={(i) => (label.values as FacettableValue[])[i].name}\n                    width={200}\n                    className={styles.valueList}\n                  >\n                    {({ index, style }) => {\n                      const value = label.values?.[index];\n                      if (!value) {\n                        return null;\n                      }\n                      return (\n                        <div style={style}>\n                          <LokiLabel\n                            name={label.name}\n                            value={value?.name}\n                            active={value?.selected}\n                            highlightParts={value?.highlightParts}\n                            onClick={this.onClickValue}\n                            searchTerm={searchTerm}\n                          />\n                        </div>\n                      );\n                    }}\n                  </FixedSizeList>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n        <div className={styles.footerSectionStyles}>\n          <Label>3. Resulting selector</Label>\n          <pre aria-label=\"selector\" className={styles.selector}>\n            {selector}\n          </pre>\n          {validationStatus && <div className={styles.validationStatus}>{validationStatus}</div>}\n          <div className={cx(styles.status, (status || error) && styles.statusShowing)}>\n            <span className={error ? styles.error : ''}>{error || status}</span>\n          </div>\n          <HorizontalGroup>\n            <Button aria-label=\"Use selector as logs button\" disabled={empty} onClick={this.onClickRunLogsQuery}>\n              Show logs\n            </Button>\n            <Button\n              aria-label=\"Use selector as metrics button\"\n              variant=\"secondary\"\n              disabled={empty}\n              onClick={this.onClickRunMetricsQuery}\n            >\n              Show logs rate\n            </Button>\n            <Button\n              aria-label=\"Validate submit button\"\n              variant=\"secondary\"\n              disabled={empty}\n              onClick={this.onClickValidate}\n            >\n              Validate selector\n            </Button>\n            <Button aria-label=\"Selector clear button\" variant=\"secondary\" onClick={this.onClickClear}>\n              Clear\n            </Button>\n          </HorizontalGroup>\n        </div>\n      </>\n    );\n  }\n}\n\nexport const LokiLabelBrowser = withTheme2(UnthemedLokiLabelBrowser);\n","import { css } from '@emotion/css';\nimport React, { useState, useEffect } from 'react';\n\nimport { CoreApp, GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { LoadingPlaceholder, Modal, useStyles2 } from '@grafana/ui';\nimport { LocalStorageValueProvider } from 'app/core/components/LocalStorageValueProvider';\n\nimport { LokiLabelBrowser } from '../../components/LokiLabelBrowser';\nimport { LokiDatasource } from '../../datasource';\nimport { LokiQuery } from '../../types';\n\nexport interface Props {\n  isOpen: boolean;\n  datasource: LokiDatasource;\n  query: LokiQuery;\n  app?: CoreApp;\n  onClose: () => void;\n  onChange: (query: LokiQuery) => void;\n  onRunQuery: () => void;\n}\n\nexport const LabelBrowserModal = (props: Props) => {\n  const { isOpen, onClose, datasource, app } = props;\n  const [labelsLoaded, setLabelsLoaded] = useState(false);\n  const [hasLogLabels, setHasLogLabels] = useState(false);\n  const LAST_USED_LABELS_KEY = 'grafana.datasources.loki.browser.labels';\n\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    if (!isOpen) {\n      return;\n    }\n\n    datasource.languageProvider.fetchLabels().then((labels) => {\n      setLabelsLoaded(true);\n      setHasLogLabels(labels.length > 0);\n    });\n  }, [datasource, isOpen]);\n\n  const changeQuery = (value: string) => {\n    const { query, onChange, onRunQuery } = props;\n    const nextQuery = { ...query, expr: value };\n    onChange(nextQuery);\n    onRunQuery();\n  };\n\n  const onChange = (selector: string) => {\n    changeQuery(selector);\n    onClose();\n  };\n\n  const reportInteractionAndClose = () => {\n    reportInteraction('grafana_loki_label_browser_closed', {\n      app,\n      closeType: 'modalClose',\n    });\n    onClose();\n  };\n\n  return (\n    <Modal isOpen={isOpen} title=\"Label browser\" onDismiss={reportInteractionAndClose} className={styles.modal}>\n      {!labelsLoaded && <LoadingPlaceholder text=\"Loading labels...\" />}\n      {labelsLoaded && !hasLogLabels && <p>No labels found.</p>}\n      {labelsLoaded && hasLogLabels && (\n        <LocalStorageValueProvider<string[]> storageKey={LAST_USED_LABELS_KEY} defaultValue={[]}>\n          {(lastUsedLabels, onLastUsedLabelsSave, onLastUsedLabelsDelete) => {\n            return (\n              <LokiLabelBrowser\n                languageProvider={datasource.languageProvider}\n                onChange={onChange}\n                lastUsedLabels={lastUsedLabels}\n                storeLastUsedLabels={onLastUsedLabelsSave}\n                deleteLastUsedLabels={onLastUsedLabelsDelete}\n                app={app}\n              />\n            );\n          }}\n        </LocalStorageValueProvider>\n      )}\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    modal: css`\n      width: 85vw;\n      ${theme.breakpoints.down('md')} {\n        width: 100%;\n      }\n    `,\n  };\n};\n","import { uniqBy } from 'lodash';\nimport React, { useState } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { AccessoryButton, InputGroup } from '@grafana/experimental';\nimport { InlineField, Select } from '@grafana/ui';\nimport { lokiOperators } from 'app/plugins/datasource/loki/querybuilder/types';\n\nimport { isConflictingSelector } from './operationUtils';\nimport { QueryBuilderLabelFilter } from './types';\n\nexport interface Props {\n  defaultOp: string;\n  item: Partial<QueryBuilderLabelFilter>;\n  items: Array<Partial<QueryBuilderLabelFilter>>;\n  onChange: (value: QueryBuilderLabelFilter) => void;\n  onGetLabelNames: (forLabel: Partial<QueryBuilderLabelFilter>) => Promise<SelectableValue[]>;\n  onGetLabelValues: (forLabel: Partial<QueryBuilderLabelFilter>) => Promise<SelectableValue[]>;\n  onDelete: () => void;\n  invalidLabel?: boolean;\n  invalidValue?: boolean;\n}\n\nexport function LabelFilterItem({\n  item,\n  items,\n  defaultOp,\n  onChange,\n  onDelete,\n  onGetLabelNames,\n  onGetLabelValues,\n  invalidLabel,\n  invalidValue,\n}: Props) {\n  const [state, setState] = useState<{\n    labelNames?: SelectableValue[];\n    labelValues?: SelectableValue[];\n    isLoadingLabelNames?: boolean;\n    isLoadingLabelValues?: boolean;\n  }>({});\n  // there's a bug in react-select where the menu doesn't recalculate its position when the options are loaded asynchronously\n  // see https://github.com/grafana/grafana/issues/63558\n  // instead, we explicitly control the menu visibility and prevent showing it until the options have fully loaded\n  const [labelNamesMenuOpen, setLabelNamesMenuOpen] = useState(false);\n  const [labelValuesMenuOpen, setLabelValuesMenuOpen] = useState(false);\n  const CONFLICTING_LABEL_FILTER_ERROR_MESSAGE = 'You have conflicting label filters';\n\n  const isMultiSelect = (operator = item.op) => {\n    return operators.find((op) => op.label === operator)?.isMultiValue;\n  };\n\n  const getSelectOptionsFromString = (item?: string): string[] => {\n    if (item) {\n      if (item.indexOf('|') > 0) {\n        return item.split('|');\n      }\n      return [item];\n    }\n    return [];\n  };\n\n  const getOptions = (): SelectableValue[] => {\n    const labelValues = state.labelValues ? [...state.labelValues] : [];\n    const selectedOptions = getSelectOptionsFromString(item?.value).map(toOption);\n\n    // Remove possible duplicated values\n    return uniqBy([...selectedOptions, ...labelValues], 'value');\n  };\n\n  const isConflicting = isConflictingSelector(item, items);\n\n  return (\n    <div data-testid=\"prometheus-dimensions-filter-item\">\n      <InlineField error={CONFLICTING_LABEL_FILTER_ERROR_MESSAGE} invalid={isConflicting ? true : undefined}>\n        <InputGroup>\n          <Select\n            placeholder=\"Select label\"\n            aria-label={selectors.components.QueryBuilder.labelSelect}\n            inputId=\"prometheus-dimensions-filter-item-key\"\n            width=\"auto\"\n            value={item.label ? toOption(item.label) : null}\n            allowCustomValue\n            onOpenMenu={async () => {\n              setState({ isLoadingLabelNames: true });\n              const labelNames = await onGetLabelNames(item);\n              setLabelNamesMenuOpen(true);\n              setState({ labelNames, isLoadingLabelNames: undefined });\n            }}\n            onCloseMenu={() => {\n              setLabelNamesMenuOpen(false);\n            }}\n            isOpen={labelNamesMenuOpen}\n            isLoading={state.isLoadingLabelNames}\n            options={state.labelNames}\n            onChange={(change) => {\n              if (change.label) {\n                onChange({\n                  ...item,\n                  op: item.op ?? defaultOp,\n                  label: change.label,\n                } as unknown as QueryBuilderLabelFilter);\n              }\n            }}\n            invalid={isConflicting || invalidLabel}\n          />\n\n          <Select\n            aria-label={selectors.components.QueryBuilder.matchOperatorSelect}\n            value={toOption(item.op ?? defaultOp)}\n            options={operators}\n            width=\"auto\"\n            onChange={(change) => {\n              if (change.value != null) {\n                onChange({\n                  ...item,\n                  op: change.value,\n                  value: isMultiSelect(change.value) ? item.value : getSelectOptionsFromString(item?.value)[0],\n                } as unknown as QueryBuilderLabelFilter);\n              }\n            }}\n            invalid={isConflicting}\n          />\n\n          <Select\n            placeholder=\"Select value\"\n            aria-label={selectors.components.QueryBuilder.valueSelect}\n            inputId=\"prometheus-dimensions-filter-item-value\"\n            width=\"auto\"\n            value={\n              isMultiSelect()\n                ? getSelectOptionsFromString(item?.value).map(toOption)\n                : getSelectOptionsFromString(item?.value).map(toOption)[0]\n            }\n            allowCustomValue\n            onOpenMenu={async () => {\n              setState({ isLoadingLabelValues: true });\n              const labelValues = await onGetLabelValues(item);\n              setState({\n                ...state,\n                labelValues,\n                isLoadingLabelValues: undefined,\n              });\n              setLabelValuesMenuOpen(true);\n            }}\n            onCloseMenu={() => {\n              setLabelValuesMenuOpen(false);\n            }}\n            isOpen={labelValuesMenuOpen}\n            isMulti={isMultiSelect()}\n            isLoading={state.isLoadingLabelValues}\n            options={getOptions()}\n            onChange={(change) => {\n              if (change.value) {\n                onChange({\n                  ...item,\n                  value: change.value,\n                  op: item.op ?? defaultOp,\n                } as unknown as QueryBuilderLabelFilter);\n              } else {\n                const changes = change\n                  .map((change: any) => {\n                    return change.label;\n                  })\n                  .join('|');\n                onChange({ ...item, value: changes, op: item.op ?? defaultOp } as unknown as QueryBuilderLabelFilter);\n              }\n            }}\n            invalid={isConflicting || invalidValue}\n          />\n          <AccessoryButton aria-label=\"remove\" icon=\"times\" variant=\"secondary\" onClick={onDelete} />\n        </InputGroup>\n      </InlineField>\n    </div>\n  );\n}\n\nconst operators = [\n  lokiOperators.equals,\n  lokiOperators.doesNotEqual,\n  lokiOperators.matchesRegex,\n  lokiOperators.doesNotMatchRegex,\n];\n","import { isEqual } from 'lodash';\nimport React, { useEffect, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorFieldGroup, EditorField, EditorList } from '@grafana/experimental';\n\nimport { QueryBuilderLabelFilter } from '../shared/types';\n\nimport { LabelFilterItem } from './LabelFilterItem';\n\nexport const MISSING_LABEL_FILTER_ERROR_MESSAGE = 'Select at least 1 label filter (label and value)';\n\nexport interface Props {\n  labelsFilters: QueryBuilderLabelFilter[];\n  onChange: (labelFilters: QueryBuilderLabelFilter[]) => void;\n  onGetLabelNames: (forLabel: Partial<QueryBuilderLabelFilter>) => Promise<SelectableValue[]>;\n  onGetLabelValues: (forLabel: Partial<QueryBuilderLabelFilter>) => Promise<SelectableValue[]>;\n  /** If set to true, component will show error message until at least 1 filter is selected */\n  labelFilterRequired?: boolean;\n}\n\nexport function LabelFilters({\n  labelsFilters,\n  onChange,\n  onGetLabelNames,\n  onGetLabelValues,\n  labelFilterRequired,\n}: Props) {\n  const defaultOp = '=';\n  const [items, setItems] = useState<Array<Partial<QueryBuilderLabelFilter>>>([{ op: defaultOp }]);\n\n  useEffect(() => {\n    if (labelsFilters.length > 0) {\n      setItems(labelsFilters);\n    } else {\n      setItems([{ op: defaultOp }]);\n    }\n  }, [labelsFilters]);\n\n  const onLabelsChange = (newItems: Array<Partial<QueryBuilderLabelFilter>>) => {\n    setItems(newItems);\n\n    // Extract full label filters with both label & value\n    const newLabels = newItems.filter((x) => x.label != null && x.value != null);\n    if (!isEqual(newLabels, labelsFilters)) {\n      onChange(newLabels as QueryBuilderLabelFilter[]);\n    }\n  };\n\n  const hasLabelFilter = items.some((item) => item.label && item.value);\n\n  return (\n    <EditorFieldGroup>\n      <EditorField\n        label=\"Label filters\"\n        error={MISSING_LABEL_FILTER_ERROR_MESSAGE}\n        invalid={labelFilterRequired && !hasLabelFilter}\n      >\n        <EditorList\n          items={items}\n          onChange={onLabelsChange}\n          renderItem={(item: Partial<QueryBuilderLabelFilter>, onChangeItem, onDelete) => (\n            <LabelFilterItem\n              item={item}\n              items={items}\n              defaultOp={defaultOp}\n              onChange={onChangeItem}\n              onDelete={onDelete}\n              onGetLabelNames={onGetLabelNames}\n              onGetLabelValues={onGetLabelValues}\n              invalidLabel={labelFilterRequired && !item.label}\n              invalidValue={labelFilterRequired && !item.value}\n            />\n          )}\n        />\n      </EditorField>\n    </EditorFieldGroup>\n  );\n}\n","import React from 'react';\n\nimport { Stack } from '@grafana/experimental';\nimport { OperationExplainedBox } from 'app/plugins/datasource/prometheus/querybuilder/shared/OperationExplainedBox';\nimport { OperationListExplained } from 'app/plugins/datasource/prometheus/querybuilder/shared/OperationListExplained';\nimport { RawQuery } from 'app/plugins/datasource/prometheus/querybuilder/shared/RawQuery';\n\nimport { lokiGrammar } from '../../syntax';\nimport { lokiQueryModeller } from '../LokiQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { LokiVisualQuery } from '../types';\n\nexport const EXPLAIN_LABEL_FILTER_CONTENT = 'Fetch all log lines matching label filters.';\n\nexport interface Props {\n  query: string;\n}\n\nexport const LokiQueryBuilderExplained = React.memo<Props>(({ query }) => {\n  const visQuery = buildVisualQueryFromString(query || '').query;\n  const lang = { grammar: lokiGrammar, name: 'lokiql' };\n\n  return (\n    <Stack gap={0} direction=\"column\">\n      <OperationExplainedBox\n        stepNumber={1}\n        title={<RawQuery query={`${lokiQueryModeller.renderLabels(visQuery.labels)}`} lang={lang} />}\n      >\n        {EXPLAIN_LABEL_FILTER_CONTENT}\n      </OperationExplainedBox>\n      <OperationListExplained<LokiVisualQuery>\n        stepNumber={2}\n        queryModeller={lokiQueryModeller}\n        query={visQuery}\n        lang={lang}\n      />\n    </Stack>\n  );\n});\n\nLokiQueryBuilderExplained.displayName = 'LokiQueryBuilderExplained';\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, toOption } from '@grafana/data';\nimport { EditorRows, FlexItem } from '@grafana/experimental';\nimport { AutoSizeInput, IconButton, Select, useStyles2 } from '@grafana/ui';\n\nimport { LokiDatasource } from '../../datasource';\nimport { binaryScalarDefs } from '../binaryScalarOperations';\nimport { LokiVisualQueryBinary } from '../types';\n\nimport { LokiQueryBuilder } from './LokiQueryBuilder';\n\nexport interface Props {\n  nestedQuery: LokiVisualQueryBinary;\n  datasource: LokiDatasource;\n  index: number;\n  showExplain: boolean;\n  onChange: (index: number, update: LokiVisualQueryBinary) => void;\n  onRemove: (index: number) => void;\n  onRunQuery: () => void;\n}\n\nexport const NestedQuery = React.memo<Props>(\n  ({ nestedQuery, index, datasource, onChange, onRemove, onRunQuery, showExplain }) => {\n    const styles = useStyles2(getStyles);\n\n    return (\n      <div className={styles.card}>\n        <div className={styles.header}>\n          <div className={styles.name}>Operator</div>\n          <Select\n            aria-label=\"Select operator\"\n            width=\"auto\"\n            options={operators}\n            value={toOption(nestedQuery.operator)}\n            onChange={(value) => {\n              onChange(index, {\n                ...nestedQuery,\n                operator: value.value!,\n              });\n            }}\n          />\n          <div className={styles.name}>Vector matches</div>\n          <div className={styles.vectorMatchWrapper}>\n            <Select<LokiVisualQueryBinary['vectorMatchesType']>\n              width=\"auto\"\n              value={nestedQuery.vectorMatchesType || 'on'}\n              allowCustomValue\n              options={[\n                { value: 'on', label: 'on' },\n                { value: 'ignoring', label: 'ignoring' },\n              ]}\n              onChange={(val) => {\n                onChange(index, {\n                  ...nestedQuery,\n                  vectorMatchesType: val.value,\n                });\n              }}\n            />\n            <AutoSizeInput\n              className={styles.vectorMatchInput}\n              minWidth={20}\n              defaultValue={nestedQuery.vectorMatches}\n              onCommitChange={(evt) => {\n                onChange(index, {\n                  ...nestedQuery,\n                  vectorMatches: evt.currentTarget.value,\n                  vectorMatchesType: nestedQuery.vectorMatchesType || 'on',\n                });\n              }}\n            />\n          </div>\n          <FlexItem grow={1} />\n          <IconButton name=\"times\" size=\"sm\" onClick={() => onRemove(index)} tooltip=\"Remove nested query\" />\n        </div>\n        <div className={styles.body}>\n          <EditorRows>\n            <LokiQueryBuilder\n              showExplain={showExplain}\n              query={nestedQuery.query}\n              datasource={datasource}\n              onRunQuery={onRunQuery}\n              onChange={(update) => {\n                onChange(index, { ...nestedQuery, query: update });\n              }}\n            />\n          </EditorRows>\n        </div>\n      </div>\n    );\n  }\n);\n\nconst operators = binaryScalarDefs.map((def) => ({ label: def.sign, value: def.sign }));\n\nNestedQuery.displayName = 'NestedQuery';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    card: css({\n      label: 'card',\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(0.5),\n    }),\n    header: css({\n      label: 'header',\n      padding: theme.spacing(0.5, 0.5, 0.5, 1),\n      gap: theme.spacing(1),\n      display: 'flex',\n      alignItems: 'center',\n    }),\n    name: css({\n      label: 'name',\n      whiteSpace: 'nowrap',\n    }),\n    body: css({\n      label: 'body',\n      paddingLeft: theme.spacing(2),\n    }),\n    vectorMatchInput: css({\n      label: 'vectorMatchInput',\n      marginLeft: -1,\n    }),\n    vectorMatchWrapper: css({\n      label: 'vectorMatchWrapper',\n      display: 'flex',\n    }),\n  };\n};\n","import React from 'react';\n\nimport { Stack } from '@grafana/experimental';\n\nimport { LokiDatasource } from '../../datasource';\nimport { LokiVisualQuery, LokiVisualQueryBinary } from '../types';\n\nimport { NestedQuery } from './NestedQuery';\n\nexport interface Props {\n  query: LokiVisualQuery;\n  datasource: LokiDatasource;\n  showExplain: boolean;\n  onChange: (query: LokiVisualQuery) => void;\n  onRunQuery: () => void;\n}\n\nexport function NestedQueryList({ query, datasource, onChange, onRunQuery, showExplain }: Props) {\n  const nestedQueries = query.binaryQueries ?? [];\n\n  const onNestedQueryUpdate = (index: number, update: LokiVisualQueryBinary) => {\n    const updatedList = [...nestedQueries];\n    updatedList.splice(index, 1, update);\n    onChange({ ...query, binaryQueries: updatedList });\n  };\n\n  const onRemove = (index: number) => {\n    const updatedList = [...nestedQueries.slice(0, index), ...nestedQueries.slice(index + 1)];\n    onChange({ ...query, binaryQueries: updatedList });\n  };\n\n  return (\n    <Stack direction=\"column\" gap={1}>\n      {nestedQueries.map((nestedQuery, index) => (\n        <NestedQuery\n          key={index.toString()}\n          nestedQuery={nestedQuery}\n          index={index}\n          onChange={onNestedQueryUpdate}\n          datasource={datasource}\n          onRemove={onRemove}\n          onRunQuery={onRunQuery}\n          showExplain={showExplain}\n        />\n      ))}\n    </Stack>\n  );\n}\n","import React, { useEffect, useMemo, useState } from 'react';\n\nimport { DataSourceApi, getDefaultTimeRange, LoadingState, PanelData, SelectableValue } from '@grafana/data';\nimport { EditorRow } from '@grafana/experimental';\nimport { LabelFilters } from 'app/plugins/datasource/prometheus/querybuilder/shared/LabelFilters';\nimport { OperationExplainedBox } from 'app/plugins/datasource/prometheus/querybuilder/shared/OperationExplainedBox';\nimport { OperationList } from 'app/plugins/datasource/prometheus/querybuilder/shared/OperationList';\nimport { OperationListExplained } from 'app/plugins/datasource/prometheus/querybuilder/shared/OperationListExplained';\nimport { OperationsEditorRow } from 'app/plugins/datasource/prometheus/querybuilder/shared/OperationsEditorRow';\nimport { QueryBuilderHints } from 'app/plugins/datasource/prometheus/querybuilder/shared/QueryBuilderHints';\nimport { RawQuery } from 'app/plugins/datasource/prometheus/querybuilder/shared/RawQuery';\nimport {\n  QueryBuilderLabelFilter,\n  QueryBuilderOperation,\n} from 'app/plugins/datasource/prometheus/querybuilder/shared/types';\n\nimport { testIds } from '../../components/LokiQueryEditor';\nimport { LokiDatasource } from '../../datasource';\nimport { escapeLabelValueInSelector } from '../../languageUtils';\nimport logqlGrammar from '../../syntax';\nimport { lokiQueryModeller } from '../LokiQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { LokiOperationId, LokiVisualQuery } from '../types';\n\nimport { EXPLAIN_LABEL_FILTER_CONTENT } from './LokiQueryBuilderExplained';\nimport { NestedQueryList } from './NestedQueryList';\n\nexport interface Props {\n  query: LokiVisualQuery;\n  datasource: LokiDatasource;\n  showExplain: boolean;\n  onChange: (update: LokiVisualQuery) => void;\n  onRunQuery: () => void;\n}\nexport const LokiQueryBuilder = React.memo<Props>(({ datasource, query, onChange, onRunQuery, showExplain }) => {\n  const [sampleData, setSampleData] = useState<PanelData>();\n  const [highlightedOp, setHighlightedOp] = useState<QueryBuilderOperation | undefined>(undefined);\n\n  const onChangeLabels = (labels: QueryBuilderLabelFilter[]) => {\n    onChange({ ...query, labels });\n  };\n\n  const withTemplateVariableOptions = async (optionsPromise: Promise<string[]>): Promise<SelectableValue[]> => {\n    const options = await optionsPromise;\n    return [...datasource.getVariables(), ...options].map((value) => ({ label: value, value }));\n  };\n\n  const onGetLabelNames = async (forLabel: Partial<QueryBuilderLabelFilter>): Promise<string[]> => {\n    const labelsToConsider = query.labels.filter((x) => x !== forLabel);\n\n    if (labelsToConsider.length === 0) {\n      return await datasource.languageProvider.fetchLabels();\n    }\n\n    const expr = lokiQueryModeller.renderLabels(labelsToConsider);\n    const series = await datasource.languageProvider.fetchSeriesLabels(expr);\n    const labelsNamesToConsider = labelsToConsider.map((l) => l.label);\n\n    const labelNames = Object.keys(series)\n      // Filter out label names that are already selected\n      .filter((name) => !labelsNamesToConsider.includes(name))\n      .sort();\n\n    return labelNames;\n  };\n\n  const onGetLabelValues = async (forLabel: Partial<QueryBuilderLabelFilter>) => {\n    if (!forLabel.label) {\n      return [];\n    }\n\n    let values;\n    const labelsToConsider = query.labels.filter((x) => x !== forLabel);\n    if (labelsToConsider.length === 0) {\n      values = await datasource.languageProvider.fetchLabelValues(forLabel.label);\n    } else {\n      const expr = lokiQueryModeller.renderLabels(labelsToConsider);\n      const result = await datasource.languageProvider.fetchSeriesLabels(expr);\n      values = result[datasource.interpolateString(forLabel.label)];\n    }\n\n    return values ? values.map((v) => escapeLabelValueInSelector(v, forLabel.op)) : []; // Escape values in return\n  };\n\n  const labelFilterRequired: boolean = useMemo(() => {\n    const { labels, operations: op } = query;\n    if (!labels.length && op.length) {\n      // Filter is required when operations are present (empty line contains operation is exception)\n      if (op.length === 1 && op[0].id === LokiOperationId.LineContains && op[0].params[0] === '') {\n        return false;\n      }\n      return true;\n    }\n    return false;\n  }, [query]);\n\n  useEffect(() => {\n    const onGetSampleData = async () => {\n      const lokiQuery = { expr: lokiQueryModeller.renderQuery(query), refId: 'data-samples' };\n      const series = await datasource.getDataSamples(lokiQuery);\n      const sampleData = { series, state: LoadingState.Done, timeRange: getDefaultTimeRange() };\n      setSampleData(sampleData);\n    };\n\n    onGetSampleData().catch(console.error);\n  }, [datasource, query]);\n\n  const lang = { grammar: logqlGrammar, name: 'logql' };\n  return (\n    <div data-testid={testIds.editor}>\n      <EditorRow>\n        <LabelFilters\n          onGetLabelNames={(forLabel: Partial<QueryBuilderLabelFilter>) =>\n            withTemplateVariableOptions(onGetLabelNames(forLabel))\n          }\n          onGetLabelValues={(forLabel: Partial<QueryBuilderLabelFilter>) =>\n            withTemplateVariableOptions(onGetLabelValues(forLabel))\n          }\n          labelsFilters={query.labels}\n          onChange={onChangeLabels}\n          labelFilterRequired={labelFilterRequired}\n        />\n      </EditorRow>\n      {showExplain && (\n        <OperationExplainedBox\n          stepNumber={1}\n          title={<RawQuery query={`${lokiQueryModeller.renderLabels(query.labels)}`} lang={lang} />}\n        >\n          {EXPLAIN_LABEL_FILTER_CONTENT}\n        </OperationExplainedBox>\n      )}\n      <OperationsEditorRow>\n        <OperationList\n          queryModeller={lokiQueryModeller}\n          query={query}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          datasource={datasource as DataSourceApi}\n          highlightedOp={highlightedOp}\n        />\n        <QueryBuilderHints<LokiVisualQuery>\n          datasource={datasource}\n          query={query}\n          onChange={onChange}\n          data={sampleData}\n          queryModeller={lokiQueryModeller}\n          buildVisualQueryFromString={buildVisualQueryFromString}\n        />\n      </OperationsEditorRow>\n      {showExplain && (\n        <OperationListExplained<LokiVisualQuery>\n          stepNumber={2}\n          queryModeller={lokiQueryModeller}\n          query={query}\n          lang={lang}\n          onMouseEnter={(op) => {\n            setHighlightedOp(op);\n          }}\n          onMouseLeave={() => {\n            setHighlightedOp(undefined);\n          }}\n        />\n      )}\n      {query.binaryQueries && query.binaryQueries.length > 0 && (\n        <NestedQueryList\n          query={query}\n          datasource={datasource}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          showExplain={showExplain}\n        />\n      )}\n    </div>\n  );\n});\n\nLokiQueryBuilder.displayName = 'LokiQueryBuilder';\n","import React from 'react';\n\nimport { EditorRow, EditorFieldGroup } from '@grafana/experimental';\n\nimport { RawQuery } from '../../../prometheus/querybuilder/shared/RawQuery';\nimport { lokiGrammar } from '../../syntax';\n\nexport interface Props {\n  query: string;\n}\n\nexport function QueryPreview({ query }: Props) {\n  return (\n    <EditorRow>\n      <EditorFieldGroup>\n        <RawQuery query={query} lang={{ grammar: lokiGrammar, name: 'lokiql' }} />\n      </EditorFieldGroup>\n    </EditorRow>\n  );\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport React, { useEffect, useReducer } from 'react';\n\nimport { testIds } from '../../components/LokiQueryEditor';\nimport { LokiDatasource } from '../../datasource';\nimport { LokiQuery } from '../../types';\nimport { lokiQueryModeller } from '../LokiQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { LokiVisualQuery } from '../types';\n\nimport { LokiQueryBuilder } from './LokiQueryBuilder';\nimport { QueryPreview } from './QueryPreview';\n\nexport interface Props {\n  query: LokiQuery;\n  datasource: LokiDatasource;\n  onChange: (update: LokiQuery) => void;\n  onRunQuery: () => void;\n  showExplain: boolean;\n}\n\nexport interface State {\n  visQuery?: LokiVisualQuery;\n  expr: string;\n}\n\n/**\n * This component is here just to contain the translation logic between string query and the visual query builder model.\n */\nexport function LokiQueryBuilderContainer(props: Props) {\n  const { query, onChange, onRunQuery, datasource, showExplain } = props;\n  const [state, dispatch] = useReducer(stateSlice.reducer, {\n    expr: query.expr,\n    // Use initial visual query only if query.expr is empty string\n    visQuery:\n      query.expr === ''\n        ? {\n            labels: [],\n            operations: [{ id: '__line_contains', params: [''] }],\n          }\n        : undefined,\n  });\n\n  // Only rebuild visual query if expr changes from outside\n  useEffect(() => {\n    dispatch(exprChanged(query.expr));\n  }, [query.expr]);\n\n  const onVisQueryChange = (visQuery: LokiVisualQuery) => {\n    const expr = lokiQueryModeller.renderQuery(visQuery);\n    dispatch(visualQueryChange({ visQuery, expr }));\n    onChange({ ...props.query, expr: expr });\n  };\n\n  if (!state.visQuery) {\n    return null;\n  }\n\n  return (\n    <>\n      <LokiQueryBuilder\n        query={state.visQuery}\n        datasource={datasource}\n        onChange={onVisQueryChange}\n        onRunQuery={onRunQuery}\n        showExplain={showExplain}\n        data-testid={testIds.editor}\n      />\n      {query.expr !== '' && <QueryPreview query={query.expr} />}\n    </>\n  );\n}\n\nconst initialState: State = { expr: '' };\n\nconst stateSlice = createSlice({\n  name: 'loki-builder-container',\n  initialState,\n  reducers: {\n    visualQueryChange: (state, action: PayloadAction<{ visQuery: LokiVisualQuery; expr: string }>) => {\n      state.expr = action.payload.expr;\n      state.visQuery = action.payload.visQuery;\n    },\n    exprChanged: (state, action: PayloadAction<string>) => {\n      if (!state.visQuery || state.expr !== action.payload) {\n        state.expr = action.payload;\n        const parseResult = buildVisualQueryFromString(action.payload);\n        state.visQuery = parseResult.query;\n      }\n    },\n  },\n});\n\nconst { visualQueryChange, exprChanged } = stateSlice.actions;\n","import { trim } from 'lodash';\nimport React, { useMemo, useState } from 'react';\n\nimport { CoreApp, isValidDuration, isValidGrafanaDuration, SelectableValue } from '@grafana/data';\nimport { EditorField, EditorRow } from '@grafana/experimental';\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { Alert, AutoSizeInput, RadioButtonGroup, Select } from '@grafana/ui';\nimport { QueryOptionGroup } from 'app/plugins/datasource/prometheus/querybuilder/shared/QueryOptionGroup';\n\nimport { preprocessMaxLines, queryTypeOptions, RESOLUTION_OPTIONS } from '../../components/LokiOptionFields';\nimport { getLokiQueryType, isLogsQuery } from '../../queryUtils';\nimport { LokiQuery, LokiQueryType, QueryStats } from '../../types';\n\nexport interface Props {\n  query: LokiQuery;\n  onChange: (update: LokiQuery) => void;\n  onRunQuery: () => void;\n  maxLines: number;\n  app?: CoreApp;\n  queryStats: QueryStats | null;\n}\n\nexport const LokiQueryBuilderOptions = React.memo<Props>(\n  ({ app, query, onChange, onRunQuery, maxLines, queryStats }) => {\n    const [splitDurationValid, setSplitDurationValid] = useState(true);\n\n    const onQueryTypeChange = (value: LokiQueryType) => {\n      onChange({ ...query, queryType: value });\n      onRunQuery();\n    };\n\n    const onResolutionChange = (option: SelectableValue<number>) => {\n      reportInteraction('grafana_loki_resolution_clicked', {\n        app,\n        resolution: option.value,\n      });\n      onChange({ ...query, resolution: option.value });\n      onRunQuery();\n    };\n\n    const onChunkRangeChange = (evt: React.FormEvent<HTMLInputElement>) => {\n      const value = evt.currentTarget.value;\n      if (!isValidDuration(value)) {\n        setSplitDurationValid(false);\n        return;\n      }\n      setSplitDurationValid(true);\n      onChange({ ...query, splitDuration: value });\n      onRunQuery();\n    };\n\n    const onLegendFormatChanged = (evt: React.FormEvent<HTMLInputElement>) => {\n      onChange({ ...query, legendFormat: evt.currentTarget.value });\n      onRunQuery();\n    };\n\n    function onMaxLinesChange(e: React.SyntheticEvent<HTMLInputElement>) {\n      const newMaxLines = preprocessMaxLines(e.currentTarget.value);\n      if (query.maxLines !== newMaxLines) {\n        onChange({ ...query, maxLines: newMaxLines });\n        onRunQuery();\n      }\n    }\n\n    function onStepChange(e: React.SyntheticEvent<HTMLInputElement>) {\n      onChange({ ...query, step: trim(e.currentTarget.value) });\n      onRunQuery();\n    }\n\n    const queryType = getLokiQueryType(query);\n    const isLogQuery = isLogsQuery(query.expr);\n\n    const isValidStep = useMemo(() => {\n      if (!query.step || isValidGrafanaDuration(query.step) || !isNaN(Number(query.step))) {\n        return true;\n      }\n      return false;\n    }, [query.step]);\n\n    return (\n      <EditorRow>\n        <QueryOptionGroup\n          title=\"Options\"\n          collapsedInfo={getCollapsedInfo(query, queryType, maxLines, isLogQuery, isValidStep)}\n          queryStats={queryStats}\n        >\n          <EditorField\n            label=\"Legend\"\n            tooltip=\"Series name override or template. Ex. {{hostname}} will be replaced with label value for hostname.\"\n          >\n            <AutoSizeInput\n              placeholder=\"{{label}}\"\n              type=\"string\"\n              minWidth={14}\n              defaultValue={query.legendFormat}\n              onCommitChange={onLegendFormatChanged}\n            />\n          </EditorField>\n          <EditorField label=\"Type\">\n            <RadioButtonGroup options={queryTypeOptions} value={queryType} onChange={onQueryTypeChange} />\n          </EditorField>\n          {isLogQuery && (\n            <EditorField label=\"Line limit\" tooltip=\"Upper limit for number of log lines returned by query.\">\n              <AutoSizeInput\n                className=\"width-4\"\n                placeholder={maxLines.toString()}\n                type=\"number\"\n                min={0}\n                defaultValue={query.maxLines?.toString() ?? ''}\n                onCommitChange={onMaxLinesChange}\n              />\n            </EditorField>\n          )}\n          {!isLogQuery && (\n            <>\n              <EditorField\n                label=\"Step\"\n                tooltip=\"Use the step parameter when making metric queries to Loki. If not filled, Grafana's calculated interval will be used. Example valid values: 1s, 5m, 10h, 1d.\"\n                invalid={!isValidStep}\n                error={'Invalid step. Example valid values: 1s, 5m, 10h, 1d.'}\n              >\n                <AutoSizeInput\n                  className=\"width-6\"\n                  placeholder={'auto'}\n                  type=\"string\"\n                  defaultValue={query.step ?? ''}\n                  onCommitChange={onStepChange}\n                />\n              </EditorField>\n              {query.resolution !== undefined && query.resolution > 1 && (\n                <>\n                  <EditorField\n                    label=\"Resolution\"\n                    tooltip=\"Changes the step parameter of Loki metrics range queries. With a resolution of 1/1, each pixel corresponds to one data point. 1/10 retrieves one data point per 10 pixels. Lower resolutions perform better.\"\n                  >\n                    <Select\n                      isSearchable={false}\n                      onChange={onResolutionChange}\n                      options={RESOLUTION_OPTIONS}\n                      value={query.resolution || 1}\n                      aria-label=\"Select resolution\"\n                    />\n                  </EditorField>\n                  <Alert\n                    severity=\"warning\"\n                    title=\"The 'Resolution' is deprecated. Use 'Step' editor instead to change step parameter.\"\n                  />\n                </>\n              )}\n            </>\n          )}\n          {config.featureToggles.lokiQuerySplittingConfig && config.featureToggles.lokiQuerySplitting && (\n            <EditorField\n              label=\"Split Duration\"\n              tooltip=\"Defines the duration of a single query when query splitting is enabled.\"\n            >\n              <AutoSizeInput\n                minWidth={14}\n                type=\"string\"\n                min={0}\n                defaultValue={query.splitDuration ?? '1d'}\n                onCommitChange={onChunkRangeChange}\n                invalid={!splitDurationValid}\n              />\n            </EditorField>\n          )}\n        </QueryOptionGroup>\n      </EditorRow>\n    );\n  }\n);\n\nfunction getCollapsedInfo(\n  query: LokiQuery,\n  queryType: LokiQueryType,\n  maxLines: number,\n  isLogQuery: boolean,\n  isValidStep: boolean\n): string[] {\n  const queryTypeLabel = queryTypeOptions.find((x) => x.value === queryType);\n  const resolutionLabel = RESOLUTION_OPTIONS.find((x) => x.value === (query.resolution ?? 1));\n\n  const items: string[] = [];\n\n  if (query.legendFormat) {\n    items.push(`Legend: ${query.legendFormat}`);\n  }\n\n  items.push(`Type: ${queryTypeLabel?.label}`);\n\n  if (isLogQuery) {\n    items.push(`Line limit: ${query.maxLines ?? maxLines}`);\n  }\n\n  if (!isLogQuery) {\n    if (query.step) {\n      items.push(`Step: ${isValidStep ? query.step : 'Invalid value'}`);\n    }\n\n    if (query.resolution) {\n      items.push(`Resolution: ${resolutionLabel?.label}`);\n    }\n  }\n\n  return items;\n}\n\nLokiQueryBuilderOptions.displayName = 'LokiQueryBuilderOptions';\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { useStyles2, HorizontalGroup, IconButton, Tooltip, Icon } from '@grafana/ui';\nimport { getModKey } from 'app/core/utils/browser';\n\nimport { testIds } from '../../components/LokiQueryEditor';\nimport { LokiQueryField } from '../../components/LokiQueryField';\nimport { LokiQueryEditorProps } from '../../components/types';\nimport { formatLogqlQuery } from '../../queryUtils';\n\nimport { LokiQueryBuilderExplained } from './LokiQueryBuilderExplained';\n\ntype Props = LokiQueryEditorProps & {\n  showExplain: boolean;\n};\n\nexport function LokiQueryCodeEditor({\n  query,\n  datasource,\n  range,\n  onRunQuery,\n  onChange,\n  data,\n  app,\n  showExplain,\n  history,\n}: Props) {\n  const styles = useStyles2(getStyles);\n\n  const lokiFormatQuery = config.featureToggles.lokiFormatQuery;\n  const onClickFormatQueryButton = async () => onChange({ ...query, expr: formatLogqlQuery(query.expr, datasource) });\n\n  return (\n    <div className={styles.wrapper}>\n      <LokiQueryField\n        datasource={datasource}\n        query={query}\n        range={range}\n        onRunQuery={onRunQuery}\n        onChange={onChange}\n        history={history}\n        data={data}\n        app={app}\n        data-testid={testIds.editor}\n        ExtraFieldElement={\n          <>\n            {lokiFormatQuery && (\n              <div className={styles.buttonGroup}>\n                <div>\n                  <HorizontalGroup spacing=\"sm\">\n                    <IconButton\n                      onClick={onClickFormatQueryButton}\n                      name=\"brackets-curly\"\n                      size=\"xs\"\n                      tooltip=\"Format query\"\n                    />\n                    <Tooltip content={`Use ${getModKey()}+z to undo`}>\n                      <Icon className={styles.hint} name=\"keyboard\" />\n                    </Tooltip>\n                  </HorizontalGroup>\n                </div>\n              </div>\n            )}\n          </>\n        }\n      />\n      {showExplain && <LokiQueryBuilderExplained query={query.expr} />}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css`\n      max-width: 100%;\n      .gf-form {\n        margin-bottom: 0.5;\n      }\n    `,\n    buttonGroup: css`\n      border: 1px solid ${theme.colors.border.medium};\n      border-top: none;\n      padding: ${theme.spacing(0.5, 0.5, 0.5, 0.5)};\n      margin-bottom: ${theme.spacing(0.5)};\n      display: flex;\n      flex-grow: 1;\n      justify-content: end;\n      font-size: ${theme.typography.bodySmall.fontSize};\n    `,\n    hint: css`\n      color: ${theme.colors.text.disabled};\n      white-space: nowrap;\n      cursor: help;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Card, useStyles2 } from '@grafana/ui';\nimport { RawQuery } from 'app/plugins/datasource/prometheus/querybuilder/shared/RawQuery';\n\nimport logqlGrammar from '../../syntax';\nimport { lokiQueryModeller } from '../LokiQueryModeller';\nimport { LokiQueryPattern } from '../types';\n\ntype Props = {\n  pattern: LokiQueryPattern;\n  hasNewQueryOption: boolean;\n  hasPreviousQuery: boolean;\n  selectedPatternName: string | null;\n  setSelectedPatternName: (name: string | null) => void;\n  onPatternSelect: (pattern: LokiQueryPattern, selectAsNewQuery?: boolean) => void;\n};\n\nexport const QueryPattern = (props: Props) => {\n  const { pattern, onPatternSelect, hasNewQueryOption, hasPreviousQuery, selectedPatternName, setSelectedPatternName } =\n    props;\n\n  const styles = useStyles2(getStyles);\n  const lang = { grammar: logqlGrammar, name: 'logql' };\n\n  return (\n    <Card className={styles.card}>\n      <Card.Heading>{pattern.name}</Card.Heading>\n      <div className={styles.rawQueryContainer}>\n        <RawQuery\n          query={lokiQueryModeller.renderQuery({ labels: [], operations: pattern.operations })}\n          lang={lang}\n          className={styles.rawQuery}\n        />\n      </div>\n      <Card.Actions>\n        {selectedPatternName !== pattern.name ? (\n          <Button\n            size=\"sm\"\n            onClick={() => {\n              if (hasPreviousQuery) {\n                // If user has previous query, we need to confirm that they want to replace it\n                setSelectedPatternName(pattern.name);\n              } else {\n                onPatternSelect(pattern);\n              }\n            }}\n          >\n            Use this query\n          </Button>\n        ) : (\n          <>\n            <div className={styles.spacing}>\n              {`If you would like to use this query, ${\n                hasNewQueryOption\n                  ? 'you can either replace your current query or create a new query'\n                  : 'your current query will be replaced'\n              }.`}\n            </div>\n            <Button size=\"sm\" fill=\"outline\" onClick={() => setSelectedPatternName(null)}>\n              Back\n            </Button>\n            <Button\n              size=\"sm\"\n              onClick={() => {\n                onPatternSelect(pattern);\n              }}\n            >\n              Replace query\n            </Button>\n            {hasNewQueryOption && (\n              <Button\n                size=\"sm\"\n                onClick={() => {\n                  onPatternSelect(pattern, true);\n                }}\n              >\n                Create new query\n              </Button>\n            )}\n          </>\n        )}\n      </Card.Actions>\n    </Card>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    card: css`\n      width: 49.5%;\n      display: flex;\n      flex-direction: column;\n    `,\n    rawQueryContainer: css`\n      flex-grow: 1;\n    `,\n    rawQuery: css`\n      background-color: ${theme.colors.background.primary};\n      padding: ${theme.spacing(1)};\n      margin-top: ${theme.spacing(1)};\n    `,\n    spacing: css`\n      margin-bottom: ${theme.spacing(1)};\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport { capitalize } from 'lodash';\nimport React, { useMemo, useState } from 'react';\n\nimport { CoreApp, DataQuery, GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, Collapse, Modal, useStyles2 } from '@grafana/ui';\nimport { getNextRefIdChar } from 'app/core/utils/query';\n\nimport { LokiQuery } from '../../types';\nimport { lokiQueryModeller } from '../LokiQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { LokiQueryPattern, LokiQueryPatternType } from '../types';\n\nimport { QueryPattern } from './QueryPattern';\n\ntype Props = {\n  isOpen: boolean;\n  query: LokiQuery;\n  queries: DataQuery[] | undefined;\n  app?: CoreApp;\n  onClose: () => void;\n  onChange: (query: LokiQuery) => void;\n  onAddQuery?: (query: LokiQuery) => void;\n};\n\nexport const QueryPatternsModal = (props: Props) => {\n  const { isOpen, onClose, onChange, onAddQuery, query, queries, app } = props;\n  const [openTabs, setOpenTabs] = useState<string[]>([]);\n  const [selectedPatternName, setSelectedPatternName] = useState<string | null>(null);\n\n  const styles = useStyles2(getStyles);\n  const hasNewQueryOption = !!onAddQuery;\n  const hasPreviousQuery = useMemo(\n    () => buildVisualQueryFromString(query.expr).query.operations.length > 0,\n    [query.expr]\n  );\n\n  const onPatternSelect = (pattern: LokiQueryPattern, selectAsNewQuery = false) => {\n    const visualQuery = buildVisualQueryFromString(selectAsNewQuery ? '' : query.expr);\n    reportInteraction('grafana_loki_query_patterns_selected', {\n      version: 'v2',\n      app: app ?? '',\n      editorMode: query.editorMode,\n      selectedPattern: pattern.name,\n      preSelectedOperationsCount: visualQuery.query.operations.length,\n      preSelectedLabelsCount: visualQuery.query.labels.length,\n      createNewQuery: hasNewQueryOption && selectAsNewQuery,\n    });\n\n    visualQuery.query.operations = pattern.operations;\n    if (hasNewQueryOption && selectAsNewQuery) {\n      onAddQuery({\n        ...query,\n        refId: getNextRefIdChar(queries ?? [query]),\n        expr: lokiQueryModeller.renderQuery(visualQuery.query),\n      });\n    } else {\n      onChange({\n        ...query,\n        expr: lokiQueryModeller.renderQuery(visualQuery.query),\n      });\n    }\n    setSelectedPatternName(null);\n    onClose();\n  };\n\n  return (\n    <Modal isOpen={isOpen} title=\"Kick start your query\" onDismiss={onClose} className={styles.modal}>\n      <div className={styles.spacing}>\n        Kick start your query by selecting one of these queries. You can then continue to complete your query.\n      </div>\n      {Object.values(LokiQueryPatternType).map((patternType) => {\n        return (\n          <Collapse\n            key={patternType}\n            label={`${capitalize(patternType)} query starters`}\n            isOpen={openTabs.includes(patternType)}\n            collapsible={true}\n            onToggle={() =>\n              setOpenTabs((tabs) =>\n                // close tab if it's already open, otherwise open it\n                tabs.includes(patternType) ? tabs.filter((t) => t !== patternType) : [...tabs, patternType]\n              )\n            }\n          >\n            <div className={styles.cardsContainer}>\n              {lokiQueryModeller\n                .getQueryPatterns()\n                .filter((pattern) => pattern.type === patternType)\n                .map((pattern) => (\n                  <QueryPattern\n                    key={pattern.name}\n                    pattern={pattern}\n                    hasNewQueryOption={hasNewQueryOption}\n                    hasPreviousQuery={hasPreviousQuery}\n                    onPatternSelect={onPatternSelect}\n                    selectedPatternName={selectedPatternName}\n                    setSelectedPatternName={setSelectedPatternName}\n                  />\n                ))}\n            </div>\n          </Collapse>\n        );\n      })}\n      <Button variant=\"secondary\" onClick={onClose}>\n        Close\n      </Button>\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    cardsContainer: css`\n      display: flex;\n      flex-direction: row;\n      flex-wrap: wrap;\n      justify-content: space-between;\n    `,\n    spacing: css`\n      margin-bottom: ${theme.spacing(1)};\n    `,\n    modal: css`\n      width: 85vw;\n      ${theme.breakpoints.down('md')} {\n        width: 100%;\n      }\n    `,\n  };\n};\n","import store from 'app/core/store';\n\nimport { QueryEditorMode } from '../../prometheus/querybuilder/shared/types';\nimport { LokiQuery, LokiQueryType } from '../types';\n\nconst queryEditorModeDefaultLocalStorageKey = 'LokiQueryEditorModeDefault';\n\nexport function changeEditorMode(query: LokiQuery, editorMode: QueryEditorMode, onChange: (query: LokiQuery) => void) {\n  // If empty query store new mode as default\n  if (query.expr === '') {\n    store.set(queryEditorModeDefaultLocalStorageKey, editorMode);\n  }\n\n  onChange({ ...query, editorMode });\n}\n\nexport function getDefaultEditorMode(expr: string) {\n  // If we already have an expression default to code view\n  if (expr != null && expr !== '') {\n    return QueryEditorMode.Code;\n  }\n\n  const value: string | undefined = store.get(queryEditorModeDefaultLocalStorageKey);\n  switch (value) {\n    case 'code':\n      return QueryEditorMode.Code;\n\n    case 'builder':\n    default:\n      return QueryEditorMode.Builder;\n  }\n}\n\n/**\n * Returns query with defaults, and boolean true/false depending on change was required\n */\nexport function getQueryWithDefaults(query: LokiQuery): LokiQuery {\n  // If no expr (ie new query) then default to builder\n  let result = query;\n\n  if (!query.editorMode) {\n    result = { ...query, editorMode: getDefaultEditorMode(query.expr) };\n  }\n\n  if (query.expr == null) {\n    result = { ...result, expr: '' };\n  }\n\n  if (query.queryType == null) {\n    // Default to range query\n    result = { ...result, queryType: LokiQueryType.Range };\n  }\n\n  return result;\n}\n","import { DateTime, isDateTime, TimeRange } from '@grafana/data';\n\nimport { LokiQueryType } from '../types';\n\n/**\n * This function compares two time values. If the first is absolute, it compares them using `DateTime.isSame`.\n *\n * @param {(DateTime | string)} time1\n * @param {(DateTime | string | undefined)} time2\n */\nfunction compareTime(time1: DateTime | string | undefined, time2: DateTime | string | undefined) {\n  if (!time1 || !time2) {\n    return false;\n  }\n\n  const isAbsolute = isDateTime(time1);\n\n  if (isAbsolute) {\n    return time1.isSame(time2);\n  }\n\n  return time1 === time2;\n}\n\nexport function shouldUpdateStats(\n  query: string,\n  prevQuery: string | undefined,\n  timeRange: TimeRange | undefined,\n  prevTimeRange: TimeRange | undefined,\n  queryType: LokiQueryType | undefined,\n  prevQueryType: LokiQueryType | undefined\n): boolean {\n  if (prevQuery === undefined || query.trim() !== prevQuery.trim() || queryType !== prevQueryType) {\n    return true;\n  }\n\n  if (\n    compareTime(timeRange?.raw.from, prevTimeRange?.raw.from) &&\n    compareTime(timeRange?.raw.to, prevTimeRange?.raw.to)\n  ) {\n    return false;\n  }\n\n  return true;\n}\n","import { isEqual } from 'lodash';\nimport React, { SyntheticEvent, useCallback, useEffect, useState } from 'react';\nimport { usePrevious } from 'react-use';\n\nimport { CoreApp, LoadingState } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorHeader, EditorRows, FlexItem, Space, Stack } from '@grafana/experimental';\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { Button, ConfirmModal } from '@grafana/ui';\nimport { QueryEditorModeToggle } from 'app/plugins/datasource/prometheus/querybuilder/shared/QueryEditorModeToggle';\nimport { QueryHeaderSwitch } from 'app/plugins/datasource/prometheus/querybuilder/shared/QueryHeaderSwitch';\nimport { QueryEditorMode } from 'app/plugins/datasource/prometheus/querybuilder/shared/types';\n\nimport { lokiQueryEditorExplainKey, useFlag } from '../../prometheus/querybuilder/shared/hooks/useFlag';\nimport { LabelBrowserModal } from '../querybuilder/components/LabelBrowserModal';\nimport { LokiQueryBuilderContainer } from '../querybuilder/components/LokiQueryBuilderContainer';\nimport { LokiQueryBuilderOptions } from '../querybuilder/components/LokiQueryBuilderOptions';\nimport { LokiQueryCodeEditor } from '../querybuilder/components/LokiQueryCodeEditor';\nimport { QueryPatternsModal } from '../querybuilder/components/QueryPatternsModal';\nimport { buildVisualQueryFromString } from '../querybuilder/parsing';\nimport { changeEditorMode, getQueryWithDefaults } from '../querybuilder/state';\nimport { LokiQuery, QueryStats } from '../types';\n\nimport { shouldUpdateStats } from './stats';\nimport { LokiQueryEditorProps } from './types';\n\nexport const testIds = {\n  editor: 'loki-editor',\n};\n\nexport const LokiQueryEditor = React.memo<LokiQueryEditorProps>((props) => {\n  const { onChange, onRunQuery, onAddQuery, data, app, queries, datasource, range: timeRange } = props;\n  const [parseModalOpen, setParseModalOpen] = useState(false);\n  const [queryPatternsModalOpen, setQueryPatternsModalOpen] = useState(false);\n  const [dataIsStale, setDataIsStale] = useState(false);\n  const [labelBrowserVisible, setLabelBrowserVisible] = useState(false);\n  const [queryStats, setQueryStats] = useState<QueryStats | null>(null);\n  const { flag: explain, setFlag: setExplain } = useFlag(lokiQueryEditorExplainKey);\n\n  const predefinedOperations = datasource.predefinedOperations;\n  const previousTimeRange = usePrevious(timeRange);\n\n  const query = getQueryWithDefaults(props.query);\n  if (config.featureToggles.lokiPredefinedOperations && !query.expr && predefinedOperations) {\n    query.expr = `{} ${predefinedOperations}`;\n  }\n  const previousQueryExpr = usePrevious(query.expr);\n  const previousQueryType = usePrevious(query.queryType);\n\n  // This should be filled in from the defaults by now.\n  const editorMode = query.editorMode!;\n\n  const onExplainChange = (event: SyntheticEvent<HTMLInputElement>) => {\n    setExplain(event.currentTarget.checked);\n  };\n\n  const onEditorModeChange = useCallback(\n    (newEditorMode: QueryEditorMode) => {\n      reportInteraction('grafana_loki_editor_mode_clicked', {\n        newEditor: newEditorMode,\n        previousEditor: query.editorMode ?? '',\n        newQuery: !query.expr,\n        app: app ?? '',\n      });\n\n      if (newEditorMode === QueryEditorMode.Builder) {\n        const result = buildVisualQueryFromString(query.expr || '');\n        // If there are errors, give user a chance to decide if they want to go to builder as that can lose some data.\n        if (result.errors.length) {\n          setParseModalOpen(true);\n          return;\n        }\n      }\n      changeEditorMode(query, newEditorMode, onChange);\n    },\n    [onChange, query, app]\n  );\n\n  useEffect(() => {\n    setDataIsStale(false);\n  }, [data]);\n\n  const onChangeInternal = (query: LokiQuery) => {\n    if (!isEqual(query, props.query)) {\n      setDataIsStale(true);\n    }\n    onChange(query);\n  };\n\n  const onClickLabelBrowserButton = () => {\n    reportInteraction('grafana_loki_label_browser_opened', {\n      app: app,\n    });\n\n    setLabelBrowserVisible((visible) => !visible);\n  };\n\n  useEffect(() => {\n    const update = shouldUpdateStats(\n      query.expr,\n      previousQueryExpr,\n      timeRange,\n      previousTimeRange,\n      query.queryType,\n      previousQueryType\n    );\n    if (update) {\n      const makeAsyncRequest = async () => {\n        const stats = await datasource.getStats(query);\n        setQueryStats(stats);\n      };\n      makeAsyncRequest();\n    }\n  }, [datasource, timeRange, previousTimeRange, query, previousQueryExpr, previousQueryType, setQueryStats]);\n\n  return (\n    <>\n      <ConfirmModal\n        isOpen={parseModalOpen}\n        title=\"Query parsing\"\n        body=\"There were errors while trying to parse the query. Continuing to visual builder may lose some parts of the query.\"\n        confirmText=\"Continue\"\n        onConfirm={() => {\n          onChange({ ...query, editorMode: QueryEditorMode.Builder });\n          setParseModalOpen(false);\n        }}\n        onDismiss={() => setParseModalOpen(false)}\n      />\n      <QueryPatternsModal\n        isOpen={queryPatternsModalOpen}\n        onClose={() => setQueryPatternsModalOpen(false)}\n        query={query}\n        queries={queries}\n        app={app}\n        onChange={onChange}\n        onAddQuery={onAddQuery}\n      />\n      <LabelBrowserModal\n        isOpen={labelBrowserVisible}\n        datasource={datasource}\n        query={query}\n        app={app}\n        onClose={() => setLabelBrowserVisible(false)}\n        onChange={onChangeInternal}\n        onRunQuery={onRunQuery}\n      />\n      <EditorHeader>\n        <Stack gap={1}>\n          <Button\n            aria-label={selectors.components.QueryBuilder.queryPatterns}\n            variant=\"secondary\"\n            size=\"sm\"\n            onClick={() => {\n              setQueryPatternsModalOpen((prevValue) => !prevValue);\n\n              const visualQuery = buildVisualQueryFromString(query.expr || '');\n              reportInteraction('grafana_loki_query_patterns_opened', {\n                version: 'v2',\n                app: app ?? '',\n                editorMode: query.editorMode,\n                preSelectedOperationsCount: visualQuery.query.operations.length,\n                preSelectedLabelsCount: visualQuery.query.labels.length,\n              });\n            }}\n          >\n            Kick start your query\n          </Button>\n          <Button variant=\"secondary\" size=\"sm\" onClick={onClickLabelBrowserButton} data-testid=\"label-browser-button\">\n            Label browser\n          </Button>\n        </Stack>\n        <QueryHeaderSwitch label=\"Explain query\" value={explain} onChange={onExplainChange} />\n        <FlexItem grow={1} />\n        {app !== CoreApp.Explore && app !== CoreApp.Correlations && (\n          <Button\n            variant={dataIsStale ? 'primary' : 'secondary'}\n            size=\"sm\"\n            onClick={onRunQuery}\n            icon={data?.state === LoadingState.Loading ? 'fa fa-spinner' : undefined}\n            disabled={data?.state === LoadingState.Loading}\n          >\n            {queries && queries.length > 1 ? `Run queries` : `Run query`}\n          </Button>\n        )}\n        <QueryEditorModeToggle mode={editorMode!} onChange={onEditorModeChange} />\n      </EditorHeader>\n      <Space v={0.5} />\n      <EditorRows>\n        {editorMode === QueryEditorMode.Code && (\n          <LokiQueryCodeEditor {...props} query={query} onChange={onChangeInternal} showExplain={explain} />\n        )}\n        {editorMode === QueryEditorMode.Builder && (\n          <LokiQueryBuilderContainer\n            datasource={props.datasource}\n            query={query}\n            onChange={onChangeInternal}\n            onRunQuery={props.onRunQuery}\n            showExplain={explain}\n          />\n        )}\n        <LokiQueryBuilderOptions\n          query={query}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          app={app}\n          maxLines={datasource.maxLines}\n          queryStats={queryStats}\n        />\n      </EditorRows>\n    </>\n  );\n});\n\nLokiQueryEditor.displayName = 'LokiQueryEditor';\n","import React from 'react';\n\nimport { LokiQueryField } from './LokiQueryField';\nimport { LokiQueryEditorProps } from './types';\n\nexport function LokiQueryEditorForAlerting(props: LokiQueryEditorProps) {\n  const { query, data, datasource, onChange, onRunQuery, history } = props;\n\n  return (\n    <LokiQueryField\n      datasource={datasource}\n      query={query}\n      onChange={onChange}\n      onRunQuery={onRunQuery}\n      history={history}\n      data={data}\n      placeholder=\"Enter a Loki query\"\n      data-testid={testIds.editor}\n    />\n  );\n}\n\nexport const testIds = {\n  editor: 'loki-editor-cloud-alerting',\n};\n","import React, { memo } from 'react';\n\nimport { CoreApp } from '@grafana/data';\n\nimport { LokiQueryEditor } from './LokiQueryEditor';\nimport { LokiQueryEditorForAlerting } from './LokiQueryEditorForAlerting';\nimport { LokiQueryEditorProps } from './types';\n\nexport function LokiQueryEditorByApp(props: LokiQueryEditorProps) {\n  const { app } = props;\n\n  switch (app) {\n    case CoreApp.CloudAlerting:\n      return <LokiQueryEditorForAlerting {...props} />;\n    default:\n      return <LokiQueryEditor {...props} />;\n  }\n}\n\nexport default memo(LokiQueryEditorByApp);\n\nexport const testIds = {\n  editor: 'loki-editor',\n};\n","import React from 'react';\n\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { ConfigSubSection } from '@grafana/experimental';\nimport { InlineField, InlineSwitch } from '@grafana/ui';\nimport { ConfigDescriptionLink } from 'app/core/components/ConfigDescriptionLink';\n\nexport function AlertingSettings({\n  options,\n  onOptionsChange,\n}: Pick<DataSourcePluginOptionsEditorProps, 'options' | 'onOptionsChange'>) {\n  return (\n    <ConfigSubSection\n      title=\"Alerting\"\n      description={\n        <ConfigDescriptionLink\n          description=\"Manage alert rules for the Loki data source.\"\n          suffix=\"loki/configure-loki-data-source/#alerting\"\n          feature=\"alerting\"\n        />\n      }\n    >\n      <InlineField\n        labelWidth={29}\n        label=\"Manage alert rules in Alerting UI\"\n        disabled={options.readOnly}\n        tooltip=\"Manage alert rules for this data source. To manage other alerting resources, add an Alertmanager data source.\"\n      >\n        <InlineSwitch\n          value={options.jsonData.manageAlerts !== false}\n          onChange={(event) =>\n            onOptionsChange({\n              ...options,\n              jsonData: { ...options.jsonData, manageAlerts: event!.currentTarget.checked },\n            })\n          }\n        />\n      </InlineField>\n    </ConfigSubSection>\n  );\n}\n","import React, { ReactNode, useState } from 'react';\n\nimport { Field, FieldType, LinkModel } from '@grafana/data';\nimport { InlineField, TextArea } from '@grafana/ui';\n\nimport { getFieldLinksForExplore } from '../../../../features/explore/utils/links';\nimport { DerivedFieldConfig } from '../types';\n\ntype Props = {\n  derivedFields?: DerivedFieldConfig[];\n  className?: string;\n};\nexport const DebugSection = (props: Props) => {\n  const { derivedFields, className } = props;\n  const [debugText, setDebugText] = useState('');\n\n  let debugFields: DebugField[] = [];\n  if (debugText && derivedFields) {\n    debugFields = makeDebugFields(derivedFields, debugText);\n  }\n\n  return (\n    <div className={className}>\n      <InlineField label=\"Debug log message\" labelWidth={24} grow>\n        <TextArea\n          type=\"text\"\n          aria-label=\"Prometheus Query\"\n          placeholder=\"Paste an example log line here to test the regular expressions of your derived fields\"\n          value={debugText}\n          onChange={(event) => setDebugText(event.currentTarget.value)}\n        />\n      </InlineField>\n      {!!debugFields.length && <DebugFields fields={debugFields} />}\n    </div>\n  );\n};\n\ntype DebugFieldItemProps = {\n  fields: DebugField[];\n};\nconst DebugFields = ({ fields }: DebugFieldItemProps) => {\n  return (\n    <table className={'filter-table'}>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Value</th>\n          <th>Url</th>\n        </tr>\n      </thead>\n      <tbody>\n        {fields.map((field) => {\n          let value: ReactNode = field.value;\n          if (field.error && field.error instanceof Error) {\n            value = field.error.message;\n          } else if (field.href) {\n            value = <a href={field.href}>{value}</a>;\n          }\n          return (\n            <tr key={`${field.name}=${field.value}`}>\n              <td>{field.name}</td>\n              <td>{value}</td>\n              <td>{field.href ? <a href={field.href}>{field.href}</a> : ''}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\ntype DebugField = {\n  name: string;\n  error?: unknown;\n  value?: string;\n  href?: string;\n};\n\nfunction makeDebugFields(derivedFields: DerivedFieldConfig[], debugText: string): DebugField[] {\n  return derivedFields\n    .filter((field) => field.name && field.matcherRegex)\n    .map((field) => {\n      try {\n        const testMatch = debugText.match(field.matcherRegex);\n        const value = testMatch && testMatch[1];\n        let link: LinkModel<Field> | null = null;\n\n        if (field.url && value) {\n          link = getFieldLinksForExplore({\n            field: {\n              name: '',\n              type: FieldType.string,\n              values: [value],\n              config: {\n                links: [{ title: '', url: field.url }],\n              },\n            },\n            rowIndex: 0,\n            range: {} as any,\n          })[0];\n        }\n\n        const result: DebugField = {\n          name: field.name,\n          value: value || '<no match>',\n          href: link ? link.href : undefined,\n        };\n        return result;\n      } catch (error) {\n        const result: DebugField = {\n          name: field.name,\n          error,\n        };\n        return result;\n      }\n    });\n}\n","import { css } from '@emotion/css';\nimport React, { ChangeEvent, useEffect, useState } from 'react';\nimport { usePrevious } from 'react-use';\n\nimport { GrafanaTheme2, DataSourceInstanceSettings, VariableSuggestion } from '@grafana/data';\nimport { Button, DataLinkInput, Field, Icon, Input, Label, Tooltip, useStyles2, Switch } from '@grafana/ui';\nimport { DataSourcePicker } from 'app/features/datasources/components/picker/DataSourcePicker';\n\nimport { DerivedFieldConfig } from '../types';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  row: css`\n    display: flex;\n    align-items: baseline;\n  `,\n  nameField: css`\n    flex: 2;\n    margin-right: ${theme.spacing(0.5)};\n  `,\n  regexField: css`\n    flex: 3;\n    margin-right: ${theme.spacing(0.5)};\n  `,\n  urlField: css`\n    flex: 1;\n    margin-right: ${theme.spacing(0.5)};\n  `,\n  urlDisplayLabelField: css`\n    flex: 1;\n  `,\n  internalLink: css`\n    margin-right: ${theme.spacing(1)};\n  `,\n  dataSource: css``,\n});\n\ntype Props = {\n  value: DerivedFieldConfig;\n  onChange: (value: DerivedFieldConfig) => void;\n  onDelete: () => void;\n  suggestions: VariableSuggestion[];\n  className?: string;\n  validateName: (name: string) => boolean;\n};\nexport const DerivedField = (props: Props) => {\n  const { value, onChange, onDelete, suggestions, className, validateName } = props;\n  const styles = useStyles2(getStyles);\n  const [showInternalLink, setShowInternalLink] = useState(!!value.datasourceUid);\n  const previousUid = usePrevious(value.datasourceUid);\n\n  // Force internal link visibility change if uid changed outside of this component.\n  useEffect(() => {\n    if (!previousUid && value.datasourceUid && !showInternalLink) {\n      setShowInternalLink(true);\n    }\n    if (previousUid && !value.datasourceUid && showInternalLink) {\n      setShowInternalLink(false);\n    }\n  }, [previousUid, value.datasourceUid, showInternalLink]);\n\n  const handleChange = (field: keyof typeof value) => (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange({\n      ...value,\n      [field]: event.currentTarget.value,\n    });\n  };\n\n  const invalidName = !validateName(value.name);\n\n  return (\n    <div className={className} data-testid=\"derived-field\">\n      <div className=\"gf-form\">\n        <Field className={styles.nameField} label=\"Name\" invalid={invalidName} error=\"The name is already in use\">\n          <Input value={value.name} onChange={handleChange('name')} placeholder=\"Field name\" invalid={invalidName} />\n        </Field>\n        <Field\n          className={styles.regexField}\n          label={\n            <TooltipLabel\n              label=\"Regex\"\n              content=\"Use to parse and capture some part of the log message. You can use the captured groups in the template.\"\n            />\n          }\n        >\n          <Input value={value.matcherRegex} onChange={handleChange('matcherRegex')} />\n        </Field>\n        <Field label=\"\">\n          <Button\n            variant=\"destructive\"\n            title=\"Remove field\"\n            icon=\"times\"\n            onClick={(event) => {\n              event.preventDefault();\n              onDelete();\n            }}\n          />\n        </Field>\n      </div>\n\n      <div className=\"gf-form\">\n        <Field label={showInternalLink ? 'Query' : 'URL'} className={styles.urlField}>\n          <DataLinkInput\n            placeholder={showInternalLink ? '${__value.raw}' : 'http://example.com/${__value.raw}'}\n            value={value.url || ''}\n            onChange={(newValue) =>\n              onChange({\n                ...value,\n                url: newValue,\n              })\n            }\n            suggestions={suggestions}\n          />\n        </Field>\n        <Field\n          className={styles.urlDisplayLabelField}\n          label={\n            <TooltipLabel\n              label=\"URL Label\"\n              content=\"Use to override the button label when this derived field is found in a log.\"\n            />\n          }\n        >\n          <Input value={value.urlDisplayLabel} onChange={handleChange('urlDisplayLabel')} />\n        </Field>\n      </div>\n\n      <div className=\"gf-form\">\n        <Field label=\"Internal link\" className={styles.internalLink}>\n          <Switch\n            value={showInternalLink}\n            onChange={(e: ChangeEvent<HTMLInputElement>) => {\n              const { checked } = e.currentTarget;\n              if (!checked) {\n                onChange({\n                  ...value,\n                  datasourceUid: undefined,\n                });\n              }\n              setShowInternalLink(checked);\n            }}\n          />\n        </Field>\n\n        {showInternalLink && (\n          <Field label=\"\" className={styles.dataSource}>\n            <DataSourcePicker\n              tracing={true}\n              onChange={(ds: DataSourceInstanceSettings) =>\n                onChange({\n                  ...value,\n                  datasourceUid: ds.uid,\n                })\n              }\n              current={value.datasourceUid}\n              noDefault\n            />\n          </Field>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst TooltipLabel = ({ content, label }: { content: string; label: string }) => (\n  <Label>\n    {label}\n    <Tooltip placement=\"top\" content={content} theme=\"info\">\n      <Icon tabIndex={0} name=\"info-circle\" size=\"sm\" style={{ marginLeft: '10px' }} />\n    </Tooltip>\n  </Label>\n);\n","import { css } from '@emotion/css';\nimport React, { useCallback, useState } from 'react';\n\nimport { GrafanaTheme2, VariableOrigin, DataLinkBuiltInVars } from '@grafana/data';\nimport { ConfigSubSection } from '@grafana/experimental';\nimport { Button, useTheme2 } from '@grafana/ui';\nimport { ConfigDescriptionLink } from 'app/core/components/ConfigDescriptionLink';\n\nimport { DerivedFieldConfig } from '../types';\n\nimport { DebugSection } from './DebugSection';\nimport { DerivedField } from './DerivedField';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  addButton: css`\n    margin-right: 10px;\n  `,\n  derivedField: css`\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  container: css`\n    margin-bottom: ${theme.spacing(4)};\n  `,\n  debugSection: css`\n    margin-top: ${theme.spacing(4)};\n  `,\n});\n\ntype Props = {\n  fields?: DerivedFieldConfig[];\n  onChange: (value: DerivedFieldConfig[]) => void;\n};\n\nexport const DerivedFields = ({ fields = [], onChange }: Props) => {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  const [showDebug, setShowDebug] = useState(false);\n\n  const validateName = useCallback(\n    (name: string) => {\n      return fields.filter((field) => field.name && field.name === name).length <= 1;\n    },\n    [fields]\n  );\n\n  return (\n    <ConfigSubSection\n      title=\"Derived fields\"\n      description={\n        <ConfigDescriptionLink\n          description=\"Derived fields can be used to extract new fields from a log message and create a link from its value.\"\n          suffix=\"loki/configure-loki-data-source/#derived-fields\"\n          feature=\"derived fields\"\n        />\n      }\n    >\n      <div className={styles.container}>\n        {fields.map((field, index) => {\n          return (\n            <DerivedField\n              className={styles.derivedField}\n              key={index}\n              value={field}\n              onChange={(newField) => {\n                const newDerivedFields = [...fields];\n                newDerivedFields.splice(index, 1, newField);\n                onChange(newDerivedFields);\n              }}\n              onDelete={() => {\n                const newDerivedFields = [...fields];\n                newDerivedFields.splice(index, 1);\n                onChange(newDerivedFields);\n              }}\n              validateName={validateName}\n              suggestions={[\n                {\n                  value: DataLinkBuiltInVars.valueRaw,\n                  label: 'Raw value',\n                  documentation: 'Exact string captured by the regular expression',\n                  origin: VariableOrigin.Value,\n                },\n              ]}\n            />\n          );\n        })}\n        <div>\n          <Button\n            variant=\"secondary\"\n            className={styles.addButton}\n            icon=\"plus\"\n            onClick={(event) => {\n              event.preventDefault();\n              const newDerivedFields = [...fields, { name: '', matcherRegex: '', urlDisplayLabel: '', url: '' }];\n              onChange(newDerivedFields);\n            }}\n          >\n            Add\n          </Button>\n\n          {fields.length > 0 && (\n            <Button variant=\"secondary\" type=\"button\" onClick={() => setShowDebug(!showDebug)}>\n              {showDebug ? 'Hide example log message' : 'Show example log message'}\n            </Button>\n          )}\n        </div>\n\n        {showDebug && (\n          <div className={styles.debugSection}>\n            <DebugSection\n              className={css`\n                margin-bottom: 10px;\n              `}\n              derivedFields={fields}\n            />\n          </div>\n        )}\n      </div>\n    </ConfigSubSection>\n  );\n};\n","import React from 'react';\n\nimport { ConfigSubSection } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { Badge, InlineField, InlineFieldRow, Input } from '@grafana/ui';\nimport { ConfigDescriptionLink } from 'app/core/components/ConfigDescriptionLink';\n\ntype Props = {\n  maxLines: string;\n  onMaxLinedChange: (value: string) => void;\n  predefinedOperations: string;\n  onPredefinedOperationsChange: (value: string) => void;\n};\n\nexport const QuerySettings = (props: Props) => {\n  const { maxLines, onMaxLinedChange, predefinedOperations, onPredefinedOperationsChange } = props;\n  return (\n    <ConfigSubSection\n      title=\"Queries\"\n      description={\n        <ConfigDescriptionLink\n          description=\"Additional options to customize your querying experience.\"\n          suffix=\"loki/configure-loki-data-source/#queries\"\n          feature=\"query settings\"\n        />\n      }\n    >\n      <InlineField\n        label=\"Maximum lines\"\n        htmlFor=\"loki_config_maxLines\"\n        labelWidth={22}\n        tooltip={\n          <>\n            Loki queries must contain a limit of the maximum number of lines returned (default: 1000). Increase this\n            limit to have a bigger result set for ad-hoc analysis. Decrease this limit if your browser becomes sluggish\n            when displaying the log results.\n          </>\n        }\n      >\n        <Input\n          type=\"number\"\n          id=\"loki_config_maxLines\"\n          value={maxLines}\n          onChange={(event: React.FormEvent<HTMLInputElement>) => onMaxLinedChange(event.currentTarget.value)}\n          width={16}\n          placeholder=\"1000\"\n          spellCheck={false}\n        />\n      </InlineField>\n\n      {config.featureToggles.lokiPredefinedOperations && (\n        <InlineFieldRow>\n          <InlineField\n            label=\"Predefined operations\"\n            htmlFor=\"loki_config_predefinedOperations\"\n            labelWidth={22}\n            tooltip={\n              <>\n                {\n                  'Predefined operations are used as an initial state for your queries. They are useful, if you want to unpack, parse or format all log lines. Currently we support only log operations starting with |. For example: | unpack | line_format \"{{.message}}\".'\n                }\n              </>\n            }\n          >\n            <Input\n              type=\"string\"\n              id=\"loki_config_predefinedOperations\"\n              value={predefinedOperations}\n              onChange={(event: React.FormEvent<HTMLInputElement>) =>\n                onPredefinedOperationsChange(event.currentTarget.value)\n              }\n              width={40}\n              placeholder=\"| unpack | line_format\"\n              spellCheck={false}\n            />\n          </InlineField>\n          <InlineField>\n            <Badge\n              text=\"Experimental\"\n              color=\"orange\"\n              icon=\"exclamation-triangle\"\n              tooltip=\"Predefined operations is an experimental feature that may change in the future.\"\n            />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n    </ConfigSubSection>\n  );\n};\n","import React, { useCallback } from 'react';\n\nimport { DataSourcePluginOptionsEditorProps, DataSourceSettings } from '@grafana/data';\nimport {\n  ConfigSection,\n  DataSourceDescription,\n  ConnectionSettings,\n  Auth,\n  convertLegacyAuthProps,\n  AdvancedHttpSettings,\n} from '@grafana/experimental';\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { SecureSocksProxySettings } from '@grafana/ui';\nimport { Divider } from 'app/core/components/Divider';\n\nimport { LokiOptions } from '../types';\n\nimport { AlertingSettings } from './AlertingSettings';\nimport { DerivedFields } from './DerivedFields';\nimport { QuerySettings } from './QuerySettings';\n\nexport type Props = DataSourcePluginOptionsEditorProps<LokiOptions>;\n\nconst makeJsonUpdater =\n  <T extends any>(field: keyof LokiOptions) =>\n  (options: DataSourceSettings<LokiOptions>, value: T): DataSourceSettings<LokiOptions> => {\n    return {\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        [field]: value,\n      },\n    };\n  };\n\nconst setMaxLines = makeJsonUpdater('maxLines');\nconst setPredefinedOperations = makeJsonUpdater('predefinedOperations');\nconst setDerivedFields = makeJsonUpdater('derivedFields');\n\nexport const ConfigEditor = (props: Props) => {\n  const { options, onOptionsChange } = props;\n\n  const updatePredefinedOperations = useCallback(\n    (value: string) => {\n      reportInteraction('grafana_loki_predefined_operations_changed', { value });\n      onOptionsChange(setPredefinedOperations(options, value));\n    },\n    [options, onOptionsChange]\n  );\n\n  return (\n    <>\n      <DataSourceDescription\n        dataSourceName=\"Loki\"\n        docsLink=\"https://grafana.com/docs/grafana/latest/datasources/loki/configure-loki-data-source/\"\n        hasRequiredFields={false}\n      />\n      <Divider />\n      <ConnectionSettings config={options} onChange={onOptionsChange} urlPlaceholder=\"http://localhost:3100\" />\n      <Divider />\n      <Auth\n        {...convertLegacyAuthProps({\n          config: options,\n          onChange: onOptionsChange,\n        })}\n      />\n      <Divider />\n      <ConfigSection\n        title=\"Additional settings\"\n        description=\"Additional settings are optional settings that can be configured for more control over your data source.\"\n        isCollapsible={true}\n        isInitiallyOpen\n      >\n        <AdvancedHttpSettings config={options} onChange={onOptionsChange} />\n        <Divider hideLine />\n        {config.secureSocksDSProxyEnabled && (\n          <SecureSocksProxySettings options={options} onOptionsChange={onOptionsChange} />\n        )}\n        <AlertingSettings options={options} onOptionsChange={onOptionsChange} />\n        <Divider hideLine />\n        <QuerySettings\n          maxLines={options.jsonData.maxLines || ''}\n          onMaxLinedChange={(value) => onOptionsChange(setMaxLines(options, value))}\n          predefinedOperations={options.jsonData.predefinedOperations || ''}\n          onPredefinedOperationsChange={updatePredefinedOperations}\n        />\n        <Divider hideLine />\n        <DerivedFields\n          fields={options.jsonData.derivedFields}\n          onChange={(value) => onOptionsChange(setDerivedFields(options, value))}\n        />\n      </ConfigSection>\n    </>\n  );\n};\n","import { DashboardLoadedEvent, DataSourcePlugin } from '@grafana/data';\nimport { getAppEvents } from '@grafana/runtime';\n\nimport LokiCheatSheet from './components/LokiCheatSheet';\nimport LokiQueryEditorByApp from './components/LokiQueryEditorByApp';\nimport { ConfigEditor } from './configuration/ConfigEditor';\nimport { LokiDatasource } from './datasource';\nimport { onDashboardLoadedHandler } from './tracking';\nimport { LokiQuery } from './types';\n\nexport const plugin = new DataSourcePlugin(LokiDatasource)\n  .setQueryEditor(LokiQueryEditorByApp)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditorHelp(LokiCheatSheet);\n\n// Subscribe to on dashboard loaded event so that we can track plugin adoption\ngetAppEvents().subscribe<DashboardLoadedEvent<LokiQuery>>(DashboardLoadedEvent, onDashboardLoadedHandler);\n"],"names":["__defProp","__defProps","__getOwnPropDescs","__getOwnPropSymbols","__hasOwnProp","__propIsEnum","__defNormalProp","obj","key","value","__spreadValues","a","b","prop","__spreadProps","AdvancedHttpSettings","config","onChange","className","onCookiesChange","cookies","onTimeoutChange","event","styles","Divider","hideLine","getStyles","theme","Field","MonacoQueryFieldLazy","props","MonacoQueryFieldWrapper","lastRunValueRef","onRunQuery","rest","handleRunQuery","handleBlur","LokiQueryField","override","query","nextQuery","prevProps","range","languageProvider","ExtraFieldElement","datasource","history","placeholder","roundMsToMin","milliseconds","roundSecToMin","seconds","shouldRefreshLabels","prevRange","sameMinuteFrom","sameMinuteTo","RE2_METACHARACTERS","escapeLokiRegexp","escapeLabelValueInExactSelector","labelValue","unescapeLabelValue","escapeLabelValueInRegexSelector","escapeLabelValueInSelector","selector","isRegexSelector","isBytesString","string","BYTES_KEYWORDS","regex","DEFAULT_EXAMPLES","PREFERRED_LABELS","EXAMPLES_LIMIT","LOGQL_EXAMPLES","LokiCheatSheet","provider","labels","preferredLabel","values","userExamples","expr","onClickExample","onClick","e","hasUserExamples","example","item","MAX_LABEL_COUNT","MAX_VALUE_COUNT","MAX_AUTO_SELECT","EMPTY_SELECTOR","buildSelector","selectedLabels","label","selectedValues","facetLabels","possibleLabels","lastFacetted","possibleValues","existingValues","UnthemedLokiLabelBrowser","state","name","l","selected","nextValue","v","updatedFields","status","cb","error","autoSelect","lastUsedLabels","rawLabels","i","arr","rawValues","streams","searchTerm","validationStatus","LoadingPlaceholder","empty","searchResults","fuzzyMatchResult","fuzzy","Label","Input","index","style","Button","LokiLabelBrowser","LabelBrowserModal","isOpen","onClose","app","labelsLoaded","setLabelsLoaded","hasLogLabels","setHasLogLabels","LAST_USED_LABELS_KEY","changeQuery","reportInteractionAndClose","Modal","LocalStorageValueProvider","onLastUsedLabelsSave","onLastUsedLabelsDelete","LabelFilterItem","items","defaultOp","onDelete","onGetLabelNames","onGetLabelValues","invalidLabel","invalidValue","setState","labelNamesMenuOpen","setLabelNamesMenuOpen","labelValuesMenuOpen","setLabelValuesMenuOpen","CONFLICTING_LABEL_FILTER_ERROR_MESSAGE","isMultiSelect","operator","operators","op","getSelectOptionsFromString","getOptions","labelValues","selectedOptions","isConflicting","InlineField","InputGroup","Select","selectors","labelNames","change","changes","AccessoryButton","MISSING_LABEL_FILTER_ERROR_MESSAGE","LabelFilters","labelsFilters","labelFilterRequired","setItems","onLabelsChange","newItems","newLabels","x","hasLabelFilter","EditorFieldGroup","EditorField","EditorList","onChangeItem","EXPLAIN_LABEL_FILTER_CONTENT","LokiQueryBuilderExplained","visQuery","lang","Stack","OperationExplainedBox","RawQuery","OperationListExplained","NestedQuery","nestedQuery","onRemove","showExplain","val","AutoSizeInput","evt","FlexItem","IconButton","EditorRows","LokiQueryBuilder","update","def","NestedQueryList","nestedQueries","onNestedQueryUpdate","updatedList","sampleData","setSampleData","highlightedOp","setHighlightedOp","onChangeLabels","withTemplateVariableOptions","optionsPromise","options","forLabel","labelsToConsider","series","labelsNamesToConsider","lokiQuery","testIds","EditorRow","OperationsEditorRow","OperationList","QueryBuilderHints","QueryPreview","LokiQueryBuilderContainer","dispatch","stateSlice","exprChanged","onVisQueryChange","visualQueryChange","initialState","action","parseResult","LokiQueryBuilderOptions","maxLines","queryStats","splitDurationValid","setSplitDurationValid","onQueryTypeChange","onResolutionChange","option","onChunkRangeChange","onLegendFormatChanged","onMaxLinesChange","newMaxLines","onStepChange","queryType","isLogQuery","isValidStep","QueryOptionGroup","getCollapsedInfo","RadioButtonGroup","Alert","queryTypeLabel","resolutionLabel","LokiQueryCodeEditor","data","lokiFormatQuery","onClickFormatQueryButton","Tooltip","Icon","QueryPattern","pattern","onPatternSelect","hasNewQueryOption","hasPreviousQuery","selectedPatternName","setSelectedPatternName","Card","QueryPatternsModal","onAddQuery","queries","openTabs","setOpenTabs","selectAsNewQuery","visualQuery","patternType","Collapse","tabs","t","queryEditorModeDefaultLocalStorageKey","changeEditorMode","editorMode","store","getDefaultEditorMode","getQueryWithDefaults","result","compareTime","time1","time2","shouldUpdateStats","prevQuery","timeRange","prevTimeRange","prevQueryType","LokiQueryEditor","parseModalOpen","setParseModalOpen","queryPatternsModalOpen","setQueryPatternsModalOpen","dataIsStale","setDataIsStale","labelBrowserVisible","setLabelBrowserVisible","setQueryStats","explain","setExplain","useFlag","predefinedOperations","previousTimeRange","usePrevious","previousQueryExpr","previousQueryType","onExplainChange","onEditorModeChange","newEditorMode","onChangeInternal","onClickLabelBrowserButton","visible","stats","ConfirmModal","EditorHeader","prevValue","QueryHeaderSwitch","QueryEditorModeToggle","Space","LokiQueryEditorForAlerting","LokiQueryEditorByApp","AlertingSettings","onOptionsChange","ConfigSubSection","ConfigDescriptionLink","DebugSection","derivedFields","debugText","setDebugText","debugFields","makeDebugFields","TextArea","DebugFields","fields","field","testMatch","link","DerivedField","suggestions","validateName","showInternalLink","setShowInternalLink","previousUid","handleChange","invalidName","TooltipLabel","DataLinkInput","newValue","Switch","checked","DataSourcePicker","ds","content","DerivedFields","showDebug","setShowDebug","newField","newDerivedFields","QuerySettings","onMaxLinedChange","onPredefinedOperationsChange","InlineFieldRow","Badge","makeJsonUpdater","setMaxLines","setPredefinedOperations","setDerivedFields","ConfigEditor","updatePredefinedOperations","DataSourceDescription","ConnectionSettings","Auth","ConfigSection","SecureSocksProxySettings"],"sourceRoot":""}