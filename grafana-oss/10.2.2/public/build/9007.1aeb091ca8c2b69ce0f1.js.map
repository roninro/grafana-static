{"version":3,"file":"9007.1aeb091ca8c2b69ce0f1.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/api/stateHistoryApi.ts","webpack://grafana/./.yarn/cache/date-fns-npm-2.30.0-895c790e0f-f7be015232.zip/node_modules/date-fns/esm/formatDistanceStrict/index.js","webpack://grafana/./.yarn/cache/date-fns-npm-2.30.0-895c790e0f-f7be015232.zip/node_modules/date-fns/esm/formatDistanceToNowStrict/index.js","webpack://grafana/./public/app/features/alerting/unified/components/rules/state-history/LogRecordViewer.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/state-history/LogTimelineViewer.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/state-history/useRuleHistoryRecords.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/state-history/LokiStateHistory.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/state-history/common.ts","webpack://grafana/./.yarn/cache/date-fns-npm-2.30.0-895c790e0f-f7be015232.zip/node_modules/date-fns/esm/_lib/assign/index.js","webpack://grafana/./.yarn/cache/date-fns-npm-2.30.0-895c790e0f-f7be015232.zip/node_modules/date-fns/esm/_lib/cloneObject/index.js"],"sourcesContent":["import { DataFrameJSON } from '@grafana/data';\n\nimport { alertingApi } from './alertingApi';\n\nexport const stateHistoryApi = alertingApi.injectEndpoints({\n  endpoints: (build) => ({\n    getRuleHistory: build.query<DataFrameJSON, { ruleUid: string; from?: number; to?: number; limit?: number }>({\n      query: ({ ruleUid, from, to, limit = 100 }) => ({\n        url: '/api/v1/rules/history',\n        params: { ruleUID: ruleUid, from, to, limit },\n      }),\n    }),\n  }),\n});\n","import { getDefaultOptions } from \"../_lib/defaultOptions/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport cloneObject from \"../_lib/cloneObject/index.js\";\nimport assign from \"../_lib/assign/index.js\";\nimport defaultLocale from \"../_lib/defaultLocale/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_MINUTE = 1000 * 60;\nvar MINUTES_IN_DAY = 60 * 24;\nvar MINUTES_IN_MONTH = MINUTES_IN_DAY * 30;\nvar MINUTES_IN_YEAR = MINUTES_IN_DAY * 365;\n\n/**\n * @name formatDistanceStrict\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words, using strict units.\n * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\n * 'less than' and the like.\n *\n * | Distance between dates | Result              |\n * |------------------------|---------------------|\n * | 0 ... 59 secs          | [0..59] seconds     |\n * | 1 ... 59 mins          | [1..59] minutes     |\n * | 1 ... 23 hrs           | [1..23] hours       |\n * | 1 ... 29 days          | [1..29] days        |\n * | 1 ... 11 months        | [1..11] months      |\n * | 1 ... N years          | [1..N]  years       |\n *\n * @param {Date|Number} date - the date\n * @param {Date|Number} baseDate - the date to compare with\n * @param {Object} [options] - an object with options.\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {'second'|'minute'|'hour'|'day'|'month'|'year'} [options.unit] - if specified, will force a unit\n * @param {'floor'|'ceil'|'round'} [options.roundingMethod='round'] - which way to round partial units\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `baseDate` must not be Invalid Date\n * @throws {RangeError} `options.roundingMethod` must be 'floor', 'ceil' or 'round'\n * @throws {RangeError} `options.unit` must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistanceStrict(new Date(2014, 6, 2), new Date(2015, 0, 2))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00?\n * const result = formatDistanceStrict(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0)\n * )\n * //=> '15 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistanceStrict(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> '1 year ago'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, in minutes?\n * const result = formatDistanceStrict(new Date(2016, 0, 1), new Date(2015, 0, 1), {\n *   unit: 'minute'\n * })\n * //=> '525600 minutes'\n *\n * @example\n * // What is the distance from 1 January 2015\n * // to 28 January 2015, in months, rounded up?\n * const result = formatDistanceStrict(new Date(2015, 0, 28), new Date(2015, 0, 1), {\n *   unit: 'month',\n *   roundingMethod: 'ceil'\n * })\n * //=> '1 month'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistanceStrict(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> '1 jaro'\n */\n\nexport default function formatDistanceStrict(dirtyDate, dirtyBaseDate, options) {\n  var _ref, _options$locale, _options$roundingMeth;\n  requiredArgs(2, arguments);\n  var defaultOptions = getDefaultOptions();\n  var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;\n  if (!locale.formatDistance) {\n    throw new RangeError('locale must contain localize.formatDistance property');\n  }\n  var comparison = compareAsc(dirtyDate, dirtyBaseDate);\n  if (isNaN(comparison)) {\n    throw new RangeError('Invalid time value');\n  }\n  var localizeOptions = assign(cloneObject(options), {\n    addSuffix: Boolean(options === null || options === void 0 ? void 0 : options.addSuffix),\n    comparison: comparison\n  });\n  var dateLeft;\n  var dateRight;\n  if (comparison > 0) {\n    dateLeft = toDate(dirtyBaseDate);\n    dateRight = toDate(dirtyDate);\n  } else {\n    dateLeft = toDate(dirtyDate);\n    dateRight = toDate(dirtyBaseDate);\n  }\n  var roundingMethod = String((_options$roundingMeth = options === null || options === void 0 ? void 0 : options.roundingMethod) !== null && _options$roundingMeth !== void 0 ? _options$roundingMeth : 'round');\n  var roundingMethodFn;\n  if (roundingMethod === 'floor') {\n    roundingMethodFn = Math.floor;\n  } else if (roundingMethod === 'ceil') {\n    roundingMethodFn = Math.ceil;\n  } else if (roundingMethod === 'round') {\n    roundingMethodFn = Math.round;\n  } else {\n    throw new RangeError(\"roundingMethod must be 'floor', 'ceil' or 'round'\");\n  }\n  var milliseconds = dateRight.getTime() - dateLeft.getTime();\n  var minutes = milliseconds / MILLISECONDS_IN_MINUTE;\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft);\n\n  // Use DST-normalized difference in minutes for years, months and days;\n  // use regular difference in minutes for hours, minutes and seconds.\n  var dstNormalizedMinutes = (milliseconds - timezoneOffset) / MILLISECONDS_IN_MINUTE;\n  var defaultUnit = options === null || options === void 0 ? void 0 : options.unit;\n  var unit;\n  if (!defaultUnit) {\n    if (minutes < 1) {\n      unit = 'second';\n    } else if (minutes < 60) {\n      unit = 'minute';\n    } else if (minutes < MINUTES_IN_DAY) {\n      unit = 'hour';\n    } else if (dstNormalizedMinutes < MINUTES_IN_MONTH) {\n      unit = 'day';\n    } else if (dstNormalizedMinutes < MINUTES_IN_YEAR) {\n      unit = 'month';\n    } else {\n      unit = 'year';\n    }\n  } else {\n    unit = String(defaultUnit);\n  }\n\n  // 0 up to 60 seconds\n  if (unit === 'second') {\n    var seconds = roundingMethodFn(milliseconds / 1000);\n    return locale.formatDistance('xSeconds', seconds, localizeOptions);\n\n    // 1 up to 60 mins\n  } else if (unit === 'minute') {\n    var roundedMinutes = roundingMethodFn(minutes);\n    return locale.formatDistance('xMinutes', roundedMinutes, localizeOptions);\n\n    // 1 up to 24 hours\n  } else if (unit === 'hour') {\n    var hours = roundingMethodFn(minutes / 60);\n    return locale.formatDistance('xHours', hours, localizeOptions);\n\n    // 1 up to 30 days\n  } else if (unit === 'day') {\n    var days = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_DAY);\n    return locale.formatDistance('xDays', days, localizeOptions);\n\n    // 1 up to 12 months\n  } else if (unit === 'month') {\n    var months = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_MONTH);\n    return months === 12 && defaultUnit !== 'month' ? locale.formatDistance('xYears', 1, localizeOptions) : locale.formatDistance('xMonths', months, localizeOptions);\n\n    // 1 year up to max Date\n  } else if (unit === 'year') {\n    var years = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_YEAR);\n    return locale.formatDistance('xYears', years, localizeOptions);\n  }\n  throw new RangeError(\"unit must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\");\n}","import formatDistanceStrict from \"../formatDistanceStrict/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name formatDistanceToNowStrict\n * @category Common Helpers\n * @summary Return the distance between the given date and now in words.\n * @pure false\n *\n * @description\n * Return the distance between the given dates in words, using strict units.\n * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\n * 'less than' and the like.\n *\n * | Distance between dates | Result              |\n * |------------------------|---------------------|\n * | 0 ... 59 secs          | [0..59] seconds     |\n * | 1 ... 59 mins          | [1..59] minutes     |\n * | 1 ... 23 hrs           | [1..23] hours       |\n * | 1 ... 29 days          | [1..29] days        |\n * | 1 ... 11 months        | [1..11] months      |\n * | 1 ... N years          | [1..N]  years       |\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - an object with options.\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {'second'|'minute'|'hour'|'day'|'month'|'year'} [options.unit] - if specified, will force a unit\n * @param {'floor'|'ceil'|'round'} [options.roundingMethod='round'] - which way to round partial units\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // If today is 1 January 2015, what is the distance to 2 July 2014?\n * const result = formatDistanceToNowStrict(\n *   new Date(2014, 6, 2)\n * )\n * //=> '6 months'\n *\n * @example\n * // If now is 1 January 2015 00:00:00,\n * // what is the distance to 1 January 2015 00:00:15, including seconds?\n * const result = formatDistanceToNowStrict(\n *   new Date(2015, 0, 1, 0, 0, 15)\n * )\n * //=> '15 seconds'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 January 2016, with a suffix?\n * const result = formatDistanceToNowStrict(\n *   new Date(2016, 0, 1),\n *   {addSuffix: true}\n * )\n * //=> 'in 1 year'\n *\n * @example\n * // If today is 28 January 2015,\n * // what is the distance to 1 January 2015, in months, rounded up??\n * const result = formatDistanceToNowStrict(new Date(2015, 0, 1), {\n *   unit: 'month',\n *   roundingMethod: 'ceil'\n * })\n * //=> '1 month'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 January 2016 in Esperanto?\n * const eoLocale = require('date-fns/locale/eo')\n * const result = formatDistanceToNowStrict(\n *   new Date(2016, 0, 1),\n *   {locale: eoLocale}\n * )\n * //=> '1 jaro'\n */\nexport default function formatDistanceToNowStrict(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  return formatDistanceStrict(dirtyDate, Date.now(), options);\n}","import { css } from '@emotion/css';\nimport { formatDistanceToNowStrict } from 'date-fns';\nimport { groupBy, uniqueId } from 'lodash';\nimport React, { useEffect } from 'react';\n\nimport { dateTimeFormat, GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Icon, TagList, useStyles2 } from '@grafana/ui';\n\nimport { Label } from '../../Label';\nimport { AlertStateTag } from '../AlertStateTag';\n\nimport { LogRecord, omitLabels } from './common';\n\ninterface LogRecordViewerProps {\n  records: LogRecord[];\n  commonLabels: Array<[string, string]>;\n  onRecordsRendered?: (timestampRefs: Map<number, HTMLElement>) => void;\n  onLabelClick?: (label: string) => void;\n}\n\nfunction groupRecordsByTimestamp(records: LogRecord[]) {\n  // groupBy has been replaced by the reduce to avoid back and forth conversion of timestamp from number to string\n  const groupedLines = records.reduce((acc, current) => {\n    const tsGroup = acc.get(current.timestamp);\n    if (tsGroup) {\n      tsGroup.push(current);\n    } else {\n      acc.set(current.timestamp, [current]);\n    }\n\n    return acc;\n  }, new Map<number, LogRecord[]>());\n\n  return new Map([...groupedLines].sort((a, b) => b[0] - a[0]));\n}\n\nexport const LogRecordViewerByTimestamp = React.memo(\n  ({ records, commonLabels, onLabelClick, onRecordsRendered }: LogRecordViewerProps) => {\n    const styles = useStyles2(getStyles);\n\n    const groupedLines = groupRecordsByTimestamp(records);\n\n    const timestampRefs = new Map<number, HTMLElement>();\n    useEffect(() => {\n      onRecordsRendered && onRecordsRendered(timestampRefs);\n    });\n\n    return (\n      <ul className={styles.logsScrollable} aria-label=\"State history by timestamp\">\n        {Array.from(groupedLines.entries()).map(([key, records]) => {\n          return (\n            <li\n              id={key.toString(10)}\n              key={key}\n              data-testid={key}\n              ref={(element) => element && timestampRefs.set(key, element)}\n              className={styles.listItemWrapper}\n            >\n              <Timestamp time={key} />\n              <div className={styles.logsContainer}>\n                {records.map(({ line }) => (\n                  <React.Fragment key={uniqueId()}>\n                    <AlertStateTag state={line.previous} size=\"sm\" muted />\n                    <Icon name=\"arrow-right\" size=\"sm\" />\n                    <AlertStateTag state={line.current} />\n                    <Stack direction=\"row\">{line.values && <AlertInstanceValues record={line.values} />}</Stack>\n                    <div>\n                      {line.labels && (\n                        <TagList\n                          tags={omitLabels(Object.entries(line.labels), commonLabels).map(\n                            ([key, value]) => `${key}=${value}`\n                          )}\n                          onClick={onLabelClick}\n                        />\n                      )}\n                    </div>\n                  </React.Fragment>\n                ))}\n              </div>\n            </li>\n          );\n        })}\n      </ul>\n    );\n  }\n);\nLogRecordViewerByTimestamp.displayName = 'LogRecordViewerByTimestamp';\n\nexport function LogRecordViewerByInstance({ records, commonLabels }: LogRecordViewerProps) {\n  const styles = useStyles2(getStyles);\n\n  const groupedLines = groupBy(records, (record: LogRecord) => {\n    return JSON.stringify(record.line.labels);\n  });\n\n  return (\n    <>\n      {Object.entries(groupedLines).map(([key, records]) => {\n        return (\n          <Stack direction=\"column\" key={key}>\n            <h4>\n              <TagList\n                tags={omitLabels(Object.entries(records[0].line.labels ?? {}), commonLabels).map(\n                  ([key, value]) => `${key}=${value}`\n                )}\n              />\n            </h4>\n            <div className={styles.logsContainer}>\n              {records.map(({ line, timestamp }) => (\n                <div key={uniqueId()}>\n                  <AlertStateTag state={line.previous} size=\"sm\" muted />\n                  <Icon name=\"arrow-right\" size=\"sm\" />\n                  <AlertStateTag state={line.current} />\n                  <Stack direction=\"row\">{line.values && <AlertInstanceValues record={line.values} />}</Stack>\n                  <div>{dateTimeFormat(timestamp)}</div>\n                </div>\n              ))}\n            </div>\n          </Stack>\n        );\n      })}\n    </>\n  );\n}\n\ninterface TimestampProps {\n  time: number; // epoch timestamp\n}\n\nconst Timestamp = ({ time }: TimestampProps) => {\n  const dateTime = new Date(time);\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.timestampWrapper}>\n      <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n        <Icon name=\"clock-nine\" size=\"sm\" />\n        <span className={styles.timestampText}>{dateTimeFormat(dateTime)}</span>\n        <small>({formatDistanceToNowStrict(dateTime)} ago)</small>\n      </Stack>\n    </div>\n  );\n};\n\nconst AlertInstanceValues = React.memo(({ record }: { record: Record<string, number> }) => {\n  const values = Object.entries(record);\n\n  return (\n    <>\n      {values.map(([key, value]) => (\n        <Label key={key} label={key} value={value} />\n      ))}\n    </>\n  );\n});\nAlertInstanceValues.displayName = 'AlertInstanceValues';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  logsContainer: css`\n    display: grid;\n    grid-template-columns: max-content max-content max-content auto max-content;\n    gap: ${theme.spacing(2, 1)};\n    align-items: center;\n  `,\n  logsScrollable: css`\n    height: 500px;\n    overflow: scroll;\n\n    flex: 1;\n  `,\n  timestampWrapper: css`\n    color: ${theme.colors.text.secondary};\n  `,\n  timestampText: css`\n    color: ${theme.colors.text.primary};\n    font-size: ${theme.typography.bodySmall.fontSize};\n    font-weight: ${theme.typography.fontWeightBold};\n  `,\n  listItemWrapper: css`\n    background: transparent;\n    outline: 1px solid transparent;\n\n    transition:\n      background 150ms,\n      outline 150ms;\n    padding: ${theme.spacing(1)} ${theme.spacing(1.5)};\n  `,\n});\n","import { noop } from 'lodash';\nimport React, { useEffect, useRef } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { DataFrame, TimeRange } from '@grafana/data';\nimport { VisibilityMode } from '@grafana/schema';\nimport { LegendDisplayMode, UPlotConfigBuilder, useTheme2 } from '@grafana/ui';\nimport { TimelineChart } from 'app/core/components/TimelineChart/TimelineChart';\nimport { TimelineMode } from 'app/core/components/TimelineChart/utils';\n\ninterface LogTimelineViewerProps {\n  frames: DataFrame[];\n  timeRange: TimeRange;\n  onPointerMove?: (seriesIdx: number, pointerIdx: number) => void;\n}\n\nexport const LogTimelineViewer = React.memo(({ frames, timeRange, onPointerMove = noop }: LogTimelineViewerProps) => {\n  const theme = useTheme2();\n  const { setupCursorTracking } = useCursorTimelinePosition(onPointerMove);\n\n  return (\n    <AutoSizer disableHeight>\n      {({ width }) => (\n        <TimelineChart\n          frames={frames}\n          timeRange={timeRange}\n          timeZone={'browser'}\n          mode={TimelineMode.Changes}\n          height={18 * frames.length + 50}\n          width={width}\n          showValue={VisibilityMode.Never}\n          theme={theme}\n          rowHeight={0.8}\n          legend={{\n            calcs: [],\n            displayMode: LegendDisplayMode.List,\n            placement: 'bottom',\n            showLegend: true,\n          }}\n          legendItems={[\n            { label: 'Normal', color: theme.colors.success.main, yAxis: 1 },\n            { label: 'Pending', color: theme.colors.warning.main, yAxis: 1 },\n            { label: 'Alerting', color: theme.colors.error.main, yAxis: 1 },\n            { label: 'NoData', color: theme.colors.info.main, yAxis: 1 },\n            { label: 'Mixed', color: theme.colors.text.secondary, yAxis: 1 },\n          ]}\n        >\n          {(builder) => {\n            setupCursorTracking(builder);\n            return null;\n          }}\n        </TimelineChart>\n      )}\n    </AutoSizer>\n  );\n});\n\nfunction useCursorTimelinePosition(onPointerMove: (seriesIdx: number, pointIdx: number) => void) {\n  const pointerSubject = useRef(\n    new BehaviorSubject<{ seriesIdx: number; pointIdx: number }>({ seriesIdx: 0, pointIdx: 0 })\n  );\n\n  useEffect(() => {\n    const subscription = pointerSubject.current.subscribe(({ seriesIdx, pointIdx }) => {\n      onPointerMove && onPointerMove(seriesIdx, pointIdx);\n    });\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [onPointerMove]);\n\n  // Applies cursor tracking to the UPlot chart\n  const setupCursorTracking = (builder: UPlotConfigBuilder) => {\n    builder.setSync();\n    const interpolator = builder.getTooltipInterpolator();\n\n    // I found this in TooltipPlugin.tsx\n    if (interpolator) {\n      builder.addHook('setCursor', (u) => {\n        interpolator(\n          (seriesIdx) => {\n            if (seriesIdx) {\n              const currentPointer = pointerSubject.current.getValue();\n              pointerSubject.current.next({ ...currentPointer, seriesIdx });\n            }\n          },\n          (pointIdx) => {\n            if (pointIdx) {\n              const currentPointer = pointerSubject.current.getValue();\n              pointerSubject.current.next({ ...currentPointer, pointIdx });\n            }\n          },\n          () => {},\n          u\n        );\n      });\n    }\n  };\n\n  return { setupCursorTracking };\n}\n\nLogTimelineViewer.displayName = 'LogTimelineViewer';\n","import { groupBy } from 'lodash';\nimport { useMemo } from 'react';\n\nimport {\n  DataFrame,\n  DataFrameJSON,\n  Field as DataFrameField,\n  FieldType,\n  getDisplayProcessor,\n  GrafanaTheme2,\n} from '@grafana/data';\nimport { fieldIndexComparer } from '@grafana/data/src/field/fieldComparers';\nimport { MappingType, ThresholdsMode } from '@grafana/schema';\nimport { useTheme2 } from '@grafana/ui';\n\nimport { labelsMatchMatchers, parseMatchers } from '../../../utils/alertmanager';\n\nimport { extractCommonLabels, Line, LogRecord, omitLabels } from './common';\n\nexport function useRuleHistoryRecords(stateHistory?: DataFrameJSON, filter?: string) {\n  const theme = useTheme2();\n\n  return useMemo(() => {\n    // merge timestamp with \"line\"\n    const tsValues = stateHistory?.data?.values[0] ?? [];\n    const timestamps: number[] = isNumbers(tsValues) ? tsValues : [];\n    const lines = stateHistory?.data?.values[1] ?? [];\n\n    const logRecords = timestamps.reduce((acc: LogRecord[], timestamp: number, index: number) => {\n      const line = lines[index];\n      // values property can be undefined for some instance states (e.g. NoData)\n      if (isLine(line)) {\n        acc.push({ timestamp, line });\n      }\n\n      return acc;\n    }, []);\n\n    // group all records by alert instance (unique set of labels)\n    const logRecordsByInstance = groupBy(logRecords, (record: LogRecord) => {\n      return JSON.stringify(record.line.labels);\n    });\n\n    // CommonLabels should not be affected by the filter\n    // find common labels so we can extract those from the instances\n    const groupLabels = Object.keys(logRecordsByInstance);\n    const groupLabelsArray: Array<Array<[string, string]>> = groupLabels.map((label) => {\n      return Object.entries(JSON.parse(label));\n    });\n\n    const commonLabels = extractCommonLabels(groupLabelsArray);\n\n    const filterMatchers = filter ? parseMatchers(filter) : [];\n    const filteredGroupedLines = Object.entries(logRecordsByInstance).filter(([key]) => {\n      const labels = JSON.parse(key);\n      return labelsMatchMatchers(labels, filterMatchers);\n    });\n\n    const dataFrames: DataFrame[] = filteredGroupedLines.map<DataFrame>(([key, records]) => {\n      return logRecordsToDataFrame(key, records, commonLabels, theme);\n    });\n\n    return {\n      historyRecords: logRecords.filter(({ line }) => line.labels && labelsMatchMatchers(line.labels, filterMatchers)),\n      dataFrames,\n      commonLabels,\n      totalRecordsCount: logRecords.length,\n    };\n  }, [stateHistory, filter, theme]);\n}\n\nexport function isNumbers(value: unknown[]): value is number[] {\n  return value.every((v) => typeof v === 'number');\n}\n\nexport function isLine(value: unknown): value is Line {\n  return typeof value === 'object' && value !== null && 'current' in value && 'previous' in value;\n}\n\n// Each alert instance is represented by a data frame\n// Each frame consists of two fields: timestamp and state change\nexport function logRecordsToDataFrame(\n  instanceLabels: string,\n  records: LogRecord[],\n  commonLabels: Array<[string, string]>,\n  theme: GrafanaTheme2\n): DataFrame {\n  const parsedInstanceLabels = Object.entries<string>(JSON.parse(instanceLabels));\n\n  // There is an artificial element at the end meaning Date.now()\n  // It exist to draw the state change from when it happened to the current time\n  const timeField: DataFrameField = {\n    name: 'time',\n    type: FieldType.time,\n    values: [...records.map((record) => record.timestamp), Date.now()],\n    config: { displayName: 'Time', custom: { fillOpacity: 100 } },\n  };\n\n  const timeIndex = timeField.values.map((_, index) => index);\n  timeIndex.sort(fieldIndexComparer(timeField));\n\n  const stateValues = [...records.map((record) => record.line.current), records.at(-1)?.line.current];\n\n  const frame: DataFrame = {\n    fields: [\n      {\n        ...timeField,\n        values: timeField.values.map((_, i) => timeField.values[timeIndex[i]]),\n      },\n      {\n        name: 'state',\n        type: FieldType.string,\n        values: stateValues.map((_, i) => stateValues[timeIndex[i]]),\n        config: {\n          displayName: omitLabels(parsedInstanceLabels, commonLabels)\n            .map(([key, label]) => `${key}=${label}`)\n            .join(', '),\n          color: { mode: 'thresholds' },\n          custom: { fillOpacity: 100 },\n          mappings: [\n            {\n              type: MappingType.ValueToText,\n              options: {\n                Alerting: {\n                  color: theme.colors.error.main,\n                },\n                Pending: {\n                  color: theme.colors.warning.main,\n                },\n                Normal: {\n                  color: theme.colors.success.main,\n                },\n                NoData: {\n                  color: theme.colors.info.main,\n                },\n              },\n            },\n          ],\n          thresholds: {\n            mode: ThresholdsMode.Absolute,\n            steps: [],\n          },\n        },\n      },\n    ],\n    length: timeField.values.length,\n    name: instanceLabels,\n  };\n\n  frame.fields.forEach((field) => {\n    field.display = getDisplayProcessor({ field, theme });\n  });\n\n  return frame;\n}\n","import { css } from '@emotion/css';\nimport { isEmpty, sortBy, take, uniq } from 'lodash';\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\nimport { useForm } from 'react-hook-form';\n\nimport { DataFrame, dateTime, GrafanaTheme2, TimeRange } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Alert, Button, Field, Icon, Input, Label, TagList, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { stateHistoryApi } from '../../../api/stateHistoryApi';\nimport { combineMatcherStrings } from '../../../utils/alertmanager';\nimport { HoverCard } from '../../HoverCard';\n\nimport { LogRecordViewerByTimestamp } from './LogRecordViewer';\nimport { LogTimelineViewer } from './LogTimelineViewer';\nimport { useRuleHistoryRecords } from './useRuleHistoryRecords';\n\ninterface Props {\n  ruleUID: string;\n}\n\nconst MAX_TIMELINE_SERIES = 12;\n\nconst LokiStateHistory = ({ ruleUID }: Props) => {\n  const styles = useStyles2(getStyles);\n  const [instancesFilter, setInstancesFilter] = useState('');\n  const logsRef = useRef<Map<number, HTMLElement>>(new Map<number, HTMLElement>());\n\n  const { getValues, setValue, register, handleSubmit } = useForm({ defaultValues: { query: '' } });\n\n  const { useGetRuleHistoryQuery } = stateHistoryApi;\n\n  // We prefer log count-based limit rather than time-based, but the API doesn't support it yet\n  const queryTimeRange = useMemo(() => getDefaultTimeRange(), []);\n\n  const {\n    currentData: stateHistory,\n    isLoading,\n    isError,\n    error,\n  } = useGetRuleHistoryQuery({\n    ruleUid: ruleUID,\n    from: queryTimeRange.from.unix(),\n    to: queryTimeRange.to.unix(),\n    limit: 250,\n  });\n\n  const { dataFrames, historyRecords, commonLabels, totalRecordsCount } = useRuleHistoryRecords(\n    stateHistory,\n    instancesFilter\n  );\n\n  const { frameSubset, frameSubsetTimestamps, frameTimeRange } = useFrameSubset(dataFrames);\n\n  const onLogRecordLabelClick = useCallback(\n    (label: string) => {\n      const matcherString = combineMatcherStrings(getValues('query'), label);\n      setInstancesFilter(matcherString);\n      setValue('query', matcherString);\n    },\n    [setInstancesFilter, setValue, getValues]\n  );\n\n  const onFilterCleared = useCallback(() => {\n    setInstancesFilter('');\n    setValue('query', '');\n  }, [setInstancesFilter, setValue]);\n\n  const refToHighlight = useRef<HTMLElement | undefined>(undefined);\n\n  const onTimelinePointerMove = useCallback(\n    (seriesIdx: number, pointIdx: number) => {\n      // remove the highlight from the previous refToHighlight\n      refToHighlight.current?.classList.remove(styles.highlightedLogRecord);\n\n      const timestamp = frameSubsetTimestamps[pointIdx];\n      const newTimestampRef = logsRef.current.get(timestamp);\n\n      // now we have the new ref, add the styles\n      newTimestampRef?.classList.add(styles.highlightedLogRecord);\n      // keeping this here (commented) in case we decide we want to go back to this\n      // newTimestampRef?.scrollIntoView({ behavior: 'smooth', block: 'center' });\n\n      refToHighlight.current = newTimestampRef;\n    },\n    [frameSubsetTimestamps, styles.highlightedLogRecord]\n  );\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n  if (isError) {\n    return (\n      <Alert title=\"Error fetching the state history\" severity=\"error\">\n        {error instanceof Error ? error.message : 'Unable to fetch alert state history'}\n      </Alert>\n    );\n  }\n\n  const hasMoreInstances = frameSubset.length < dataFrames.length;\n  const emptyStateMessage =\n    totalRecordsCount > 0\n      ? `No matches were found for the given filters among the ${totalRecordsCount} instances`\n      : 'No state transitions have occurred in the last 30 days';\n\n  return (\n    <div className={styles.fullSize}>\n      <form onSubmit={handleSubmit((data) => setInstancesFilter(data.query))}>\n        <SearchFieldInput\n          {...register('query')}\n          showClearFilterSuffix={!!instancesFilter}\n          onClearFilterClick={onFilterCleared}\n        />\n        <input type=\"submit\" hidden />\n      </form>\n      {!isEmpty(commonLabels) && (\n        <div className={styles.commonLabels}>\n          <Stack gap={1} alignItems=\"center\">\n            <strong>Common labels</strong>\n            <Tooltip content=\"Common labels are the ones attached to all of the alert instances\">\n              <Icon name=\"info-circle\" />\n            </Tooltip>\n          </Stack>\n          <TagList tags={commonLabels.map((label) => label.join('='))} />\n        </div>\n      )}\n      {isEmpty(frameSubset) ? (\n        <>\n          <div className={styles.emptyState}>\n            {emptyStateMessage}\n            {totalRecordsCount > 0 && (\n              <Button variant=\"secondary\" type=\"button\" onClick={onFilterCleared}>\n                Clear filters\n              </Button>\n            )}\n          </div>\n        </>\n      ) : (\n        <>\n          <div className={styles.graphWrapper}>\n            <LogTimelineViewer frames={frameSubset} timeRange={frameTimeRange} onPointerMove={onTimelinePointerMove} />\n          </div>\n          {hasMoreInstances && (\n            <div className={styles.moreInstancesWarning}>\n              <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n                <Icon name=\"exclamation-triangle\" size=\"sm\" />\n                <small>{`Only showing ${frameSubset.length} out of ${dataFrames.length} instances. Click on the labels to narrow down the results`}</small>\n              </Stack>\n            </div>\n          )}\n          <LogRecordViewerByTimestamp\n            records={historyRecords}\n            commonLabels={commonLabels}\n            onRecordsRendered={(recordRefs) => (logsRef.current = recordRefs)}\n            onLabelClick={onLogRecordLabelClick}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nfunction useFrameSubset(frames: DataFrame[]) {\n  return useMemo(() => {\n    const frameSubset = take(frames, MAX_TIMELINE_SERIES);\n    const frameSubsetTimestamps = sortBy(uniq(frameSubset.flatMap((frame) => frame.fields[0].values)));\n\n    const minTs = Math.min(...frameSubsetTimestamps);\n    const maxTs = Math.max(...frameSubsetTimestamps);\n\n    const rangeStart = dateTime(minTs);\n    const rangeStop = dateTime(maxTs);\n\n    const frameTimeRange: TimeRange = {\n      from: rangeStart,\n      to: rangeStop,\n      raw: {\n        from: rangeStart,\n        to: rangeStop,\n      },\n    };\n\n    return { frameSubset, frameSubsetTimestamps, frameTimeRange };\n  }, [frames]);\n}\n\ninterface SearchFieldInputProps extends Omit<React.ComponentProps<typeof Input>, 'prefix' | 'suffix' | 'placeholder'> {\n  showClearFilterSuffix: boolean;\n  onClearFilterClick: () => void;\n}\n\nconst SearchFieldInput = React.forwardRef<HTMLInputElement, SearchFieldInputProps>(\n  ({ showClearFilterSuffix, onClearFilterClick, ...rest }: SearchFieldInputProps, ref) => {\n    return (\n      <Field\n        label={\n          <Label htmlFor=\"instancesSearchInput\">\n            <Stack gap={0.5}>\n              <span>Filter instances</span>\n              <HoverCard\n                content={\n                  <>\n                    Use label matcher expression (like <code>{'{foo=bar}'}</code>) or click on an instance label to\n                    filter instances\n                  </>\n                }\n              >\n                <Icon name=\"info-circle\" size=\"sm\" />\n              </HoverCard>\n            </Stack>\n          </Label>\n        }\n      >\n        <Input\n          id=\"instancesSearchInput\"\n          prefix={<Icon name=\"search\" />}\n          suffix={\n            showClearFilterSuffix && (\n              <Button fill=\"text\" icon=\"times\" size=\"sm\" onClick={onClearFilterClick}>\n                Clear\n              </Button>\n            )\n          }\n          placeholder=\"Filter instances\"\n          ref={ref}\n          {...rest}\n        />\n      </Field>\n    );\n  }\n);\nSearchFieldInput.displayName = 'SearchFieldInput';\n\nfunction getDefaultTimeRange(): TimeRange {\n  const fromDateTime = dateTime().subtract(30, 'days');\n  const toDateTime = dateTime();\n  return {\n    from: fromDateTime,\n    to: toDateTime,\n    raw: { from: fromDateTime, to: toDateTime },\n  };\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  fullSize: css`\n    min-width: 100%;\n    height: 100%;\n\n    display: flex;\n    flex-direction: column;\n  `,\n  graphWrapper: css`\n    padding: ${theme.spacing()} 0;\n  `,\n  emptyState: css`\n    color: ${theme.colors.text.secondary};\n\n    display: flex;\n    flex-direction: column;\n    gap: ${theme.spacing(2)};\n    align-items: center;\n    margin: auto auto;\n  `,\n  moreInstancesWarning: css`\n    color: ${theme.colors.warning.text};\n    padding: ${theme.spacing()};\n  `,\n  commonLabels: css`\n    display: grid;\n    grid-template-columns: max-content auto;\n  `,\n  // we need !important here to override the list item default styles\n  highlightedLogRecord: css`\n    background: ${theme.colors.primary.transparent} !important;\n    outline: 1px solid ${theme.colors.primary.shade} !important;\n  `,\n});\n\nexport default LokiStateHistory;\n","import { isEqual, uniqBy } from 'lodash';\n\nimport { GrafanaAlertStateWithReason } from 'app/types/unified-alerting-dto';\n\nexport interface Line {\n  previous: GrafanaAlertStateWithReason;\n  current: GrafanaAlertStateWithReason;\n  values?: Record<string, number>;\n  labels?: Record<string, string>;\n}\n\nexport interface LogRecord {\n  timestamp: number;\n  line: Line;\n}\n\nexport type Label = [string, string];\n\n// omit \"common\" labels from \"labels\"\nexport function omitLabels(labels: Label[], common: Label[]): Label[] {\n  return labels.filter((label) => {\n    return !common.find((commonLabel) => JSON.stringify(commonLabel) === JSON.stringify(label));\n  });\n}\n\n// find all common labels by looking at which ones occur in every record, then create a unique array of items for those\nexport function extractCommonLabels(labels: Label[][]): Label[] {\n  const flatLabels = labels.flatMap((label) => label);\n\n  const commonLabels = uniqBy(\n    flatLabels.filter((label) => {\n      const count = flatLabels.filter((l) => isEqual(label, l)).length;\n      return count === Object.keys(labels).length;\n    }),\n    (label) => JSON.stringify(label)\n  );\n\n  return commonLabels;\n}\n","export default function assign(target, object) {\n  if (target == null) {\n    throw new TypeError('assign requires that input parameter not be null or undefined');\n  }\n  for (var property in object) {\n    if (Object.prototype.hasOwnProperty.call(object, property)) {\n      ;\n      target[property] = object[property];\n    }\n  }\n  return target;\n}","import assign from \"../assign/index.js\";\nexport default function cloneObject(object) {\n  return assign({}, object);\n}"],"names":["stateHistoryApi","alertingApi","build","ruleUid","from","to","limit","MILLISECONDS_IN_MINUTE","MINUTES_IN_DAY","MINUTES_IN_MONTH","MINUTES_IN_YEAR","formatDistanceStrict","dirtyDate","dirtyBaseDate","options","_ref","_options$locale","_options$roundingMeth","requiredArgs","defaultOptions","locale","defaultLocale","comparison","compareAsc","localizeOptions","cloneObject","dateLeft","dateRight","toDate","roundingMethod","roundingMethodFn","milliseconds","minutes","timezoneOffset","getTimezoneOffsetInMilliseconds","dstNormalizedMinutes","defaultUnit","unit","seconds","roundedMinutes","hours","days","months","years","formatDistanceToNowStrict","groupRecordsByTimestamp","records","groupedLines","acc","current","tsGroup","a","b","LogRecordViewerByTimestamp","commonLabels","onLabelClick","onRecordsRendered","styles","getStyles","timestampRefs","key","element","Timestamp","line","AlertInstanceValues","value","LogRecordViewerByInstance","record","timestamp","time","dateTime","values","theme","LogTimelineViewer","frames","timeRange","onPointerMove","setupCursorTracking","useCursorTimelinePosition","width","TimelineChart","builder","pointerSubject","BehaviorSubject","subscription","seriesIdx","pointIdx","interpolator","u","currentPointer","useRuleHistoryRecords","stateHistory","filter","tsValues","timestamps","isNumbers","lines","logRecords","index","isLine","logRecordsByInstance","groupLabelsArray","label","filterMatchers","dataFrames","labels","logRecordsToDataFrame","v","instanceLabels","parsedInstanceLabels","timeField","timeIndex","_","stateValues","frame","i","field","MAX_TIMELINE_SERIES","LokiStateHistory","ruleUID","instancesFilter","setInstancesFilter","logsRef","getValues","setValue","register","handleSubmit","useGetRuleHistoryQuery","queryTimeRange","getDefaultTimeRange","isLoading","isError","error","historyRecords","totalRecordsCount","frameSubset","frameSubsetTimestamps","frameTimeRange","useFrameSubset","onLogRecordLabelClick","matcherString","onFilterCleared","refToHighlight","onTimelinePointerMove","newTimestampRef","Alert","hasMoreInstances","emptyStateMessage","data","SearchFieldInput","Tooltip","Button","recordRefs","minTs","maxTs","rangeStart","rangeStop","showClearFilterSuffix","onClearFilterClick","rest","ref","Field","Label","HoverCard","Input","fromDateTime","toDateTime","omitLabels","common","commonLabel","extractCommonLabels","flatLabels","l","assign","target","object","property"],"sourceRoot":""}