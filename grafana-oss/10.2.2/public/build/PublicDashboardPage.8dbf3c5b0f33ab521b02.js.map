{"version":3,"file":"PublicDashboardPage.8dbf3c5b0f33ab521b02.js","mappings":"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","sources":["webpack://grafana/./public/app/features/dashboard/components/PublicDashboard/usePublicDashboardConfig.tsx","webpack://grafana/./public/app/features/dashboard/components/PublicDashboard/PublicDashboardsFooter.tsx","webpack://grafana/./public/app/features/dashboard/components/PublicDashboardNotAvailable/PublicDashboardNotAvailable.tsx","webpack://grafana/./public/app/features/dashboard/containers/PublicDashboardPage.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, useTheme2 } from '@grafana/ui';\n\nconst FOOTER_URL = 'https://grafana.com/?src=grafananet&cnt=public-dashboards';\nconst GRAFANA_LOGO_LIGHT_URL = 'public/img/grafana_text_logo_light.svg';\nconst GRAFANA_LOGO_DARK_URL = 'public/img/grafana_text_logo_dark.svg';\nconst GRAFANA_LOGO_DEFAULT_VALUE = 'grafana-logo';\n\nexport interface PublicDashboardCfg {\n  footerHide: boolean;\n  footerText: React.ReactNode;\n  footerLogo: string;\n  footerLink: string;\n  headerLogoHide: boolean;\n}\nconst useGetConfig = (cfg?: PublicDashboardCfg) => {\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n\n  const { footerHide, footerText, footerLink, footerLogo, headerLogoHide } = cfg || {\n    footerHide: false,\n    footerText: 'Powered by',\n    footerLogo: GRAFANA_LOGO_DEFAULT_VALUE,\n    footerLink: FOOTER_URL,\n    headerLogoHide: false,\n  };\n\n  return {\n    footerHide,\n    footerText: <span className={styles.text}>{footerText}</span>,\n    footerLogo:\n      footerLogo === GRAFANA_LOGO_DEFAULT_VALUE\n        ? theme.isDark\n          ? GRAFANA_LOGO_LIGHT_URL\n          : GRAFANA_LOGO_DARK_URL\n        : footerLogo,\n    footerLink,\n    headerLogoHide,\n  };\n};\nexport let useGetPublicDashboardConfig = (): PublicDashboardCfg => useGetConfig();\n\nexport function setPublicDashboardConfigFn(cfg: PublicDashboardCfg) {\n  useGetPublicDashboardConfig = (): PublicDashboardCfg => useGetConfig(cfg);\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  text: css({\n    color: theme.colors.text.secondary,\n    fontSize: theme.typography.body.fontSize,\n  }),\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { useGetPublicDashboardConfig } from './usePublicDashboardConfig';\n\nexport const PublicDashboardFooter = function () {\n  const styles = useStyles2(getStyles);\n  const conf = useGetPublicDashboardConfig();\n\n  return conf.footerHide ? null : (\n    <div className={styles.footer}>\n      <a className={styles.link} href={conf.footerLink} target=\"_blank\" rel=\"noreferrer noopener\">\n        {conf.footerText} <img className={styles.logoImg} alt=\"\" src={conf.footerLogo} />\n      </a>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  footer: css({\n    display: 'flex',\n    justifyContent: 'end',\n    height: '30px',\n    padding: theme.spacing(0, 2, 0, 1),\n  }),\n  link: css({\n    display: 'flex',\n    alignItems: 'center',\n  }),\n  logoImg: css({\n    height: '16px',\n    marginLeft: theme.spacing(0.5),\n  }),\n});\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors/src';\nimport { useStyles2 } from '@grafana/ui/src';\n\nimport { Branding } from '../../../../core/components/Branding/Branding';\nimport { getLoginStyles } from '../../../../core/components/Login/LoginLayout';\n\nconst selectors = e2eSelectors.pages.PublicDashboard.NotAvailable;\n\nexport const PublicDashboardNotAvailable = ({ paused }: { paused?: boolean }) => {\n  const styles = useStyles2(getStyles);\n  const loginStyles = useStyles2(getLoginStyles);\n  const loginBoxBackground = Branding.LoginBoxBackground();\n\n  return (\n    <Branding.LoginBackground className={styles.container} data-testid={selectors.container}>\n      <div className={cx(styles.box, loginBoxBackground)}>\n        <Branding.LoginLogo className={loginStyles.loginLogo} />\n        <p className={styles.title} data-testid={selectors.title}>\n          {paused\n            ? 'This dashboard has been paused by the administrator'\n            : 'The dashboard your are trying to access does not exist'}\n        </p>\n        {paused && (\n          <p className={styles.description} data-testid={selectors.pausedDescription}>\n            Try again later\n          </p>\n        )}\n      </div>\n    </Branding.LoginBackground>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n\n    :before {\n      opacity: 1;\n    }\n  `,\n  box: css`\n    width: 608px;\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    gap: ${theme.spacing(4)};\n    z-index: 1;\n    border-radius: ${theme.shape.borderRadius(4)};\n    padding: ${theme.spacing(6, 8)};\n    opacity: 1;\n  `,\n  title: css`\n    font-size: ${theme.typography.h3.fontSize};\n    text-align: center;\n    margin: 0;\n  `,\n  description: css`\n    font-size: ${theme.typography.h5.fontSize};\n    margin: 0;\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useEffect } from 'react';\nimport { usePrevious } from 'react-use';\n\nimport { GrafanaTheme2, PageLayoutType, TimeZone } from '@grafana/data';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors/src';\nimport { PageToolbar, useStyles2 } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { useGrafana } from 'app/core/context/GrafanaContext';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { updateTimeZoneForSession } from 'app/features/profile/state/reducers';\nimport { useSelector, useDispatch } from 'app/types';\n\nimport { DashNavTimeControls } from '../components/DashNav/DashNavTimeControls';\nimport { DashboardFailed } from '../components/DashboardLoading/DashboardFailed';\nimport { DashboardLoading } from '../components/DashboardLoading/DashboardLoading';\nimport { PublicDashboardFooter } from '../components/PublicDashboard/PublicDashboardsFooter';\nimport { useGetPublicDashboardConfig } from '../components/PublicDashboard/usePublicDashboardConfig';\nimport { PublicDashboardNotAvailable } from '../components/PublicDashboardNotAvailable/PublicDashboardNotAvailable';\nimport { DashboardGrid } from '../dashgrid/DashboardGrid';\nimport { getTimeSrv } from '../services/TimeSrv';\nimport { DashboardModel } from '../state';\nimport { initDashboard } from '../state/initDashboard';\n\ninterface PublicDashboardPageRouteParams {\n  accessToken?: string;\n}\n\ninterface PublicDashboardPageRouteSearchParams {\n  from?: string;\n  to?: string;\n  refresh?: string;\n}\n\nexport type Props = GrafanaRouteComponentProps<PublicDashboardPageRouteParams, PublicDashboardPageRouteSearchParams>;\n\nconst selectors = e2eSelectors.pages.PublicDashboard;\n\nconst Toolbar = ({ dashboard }: { dashboard: DashboardModel }) => {\n  const dispatch = useDispatch();\n  const conf = useGetPublicDashboardConfig();\n\n  const onChangeTimeZone = (timeZone: TimeZone) => {\n    dispatch(updateTimeZoneForSession(timeZone));\n  };\n\n  return (\n    <PageToolbar\n      title={dashboard.title}\n      pageIcon={!conf.headerLogoHide ? 'grafana' : undefined}\n      buttonOverflowAlignment=\"right\"\n    >\n      {!dashboard.timepicker.hidden && (\n        <DashNavTimeControls dashboard={dashboard} onChangeTimeZone={onChangeTimeZone} />\n      )}\n    </PageToolbar>\n  );\n};\n\nconst PublicDashboardPage = (props: Props) => {\n  const { match, route, location } = props;\n  const dispatch = useDispatch();\n  const context = useGrafana();\n  const prevProps = usePrevious(props);\n  const styles = useStyles2(getStyles);\n  const dashboardState = useSelector((store) => store.dashboard);\n  const dashboard = dashboardState.getModel();\n\n  useEffect(() => {\n    dispatch(\n      initDashboard({\n        routeName: route.routeName,\n        fixUrl: false,\n        accessToken: match.params.accessToken,\n        keybindingSrv: context.keybindings,\n      })\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (prevProps?.location.search !== location.search) {\n      const prevUrlParams = prevProps?.queryParams;\n      const urlParams = props.queryParams;\n\n      const updateTimeRangeFromUrl =\n        (urlParams?.from !== prevUrlParams?.from || urlParams?.to !== prevUrlParams?.to) &&\n        !dashboard?.timepicker.hidden;\n\n      if (updateTimeRangeFromUrl) {\n        getTimeSrv().updateTimeRangeFromUrl();\n      }\n\n      if (!prevUrlParams?.refresh && urlParams?.refresh) {\n        getTimeSrv().setAutoRefresh(urlParams.refresh);\n      }\n    }\n  }, [prevProps, location.search, props.queryParams, dashboard?.timepicker.hidden]);\n\n  if (!dashboard) {\n    return <DashboardLoading initPhase={dashboardState.initPhase} />;\n  }\n\n  if (dashboard.meta.publicDashboardEnabled === false) {\n    return <PublicDashboardNotAvailable paused />;\n  }\n\n  if (dashboard.meta.dashboardNotFound) {\n    return <PublicDashboardNotAvailable />;\n  }\n\n  return (\n    <Page pageNav={{ text: dashboard.title }} layout={PageLayoutType.Custom} data-testid={selectors.page}>\n      <Toolbar dashboard={dashboard} />\n      {dashboardState.initError && <DashboardFailed initError={dashboardState.initError} />}\n      <div className={styles.gridContainer}>\n        <DashboardGrid dashboard={dashboard} isEditable={false} viewPanel={null} editPanel={null} hidePanelMenus />\n      </div>\n      <PublicDashboardFooter />\n    </Page>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  gridContainer: css({\n    flex: 1,\n    padding: theme.spacing(2, 2, 2, 2),\n    overflow: 'auto',\n  }),\n});\n\nexport default PublicDashboardPage;\n"],"names":["FOOTER_URL","GRAFANA_LOGO_LIGHT_URL","GRAFANA_LOGO_DARK_URL","GRAFANA_LOGO_DEFAULT_VALUE","useGetConfig","cfg","theme","styles","getStyles","footerHide","footerText","footerLink","footerLogo","headerLogoHide","useGetPublicDashboardConfig","setPublicDashboardConfigFn","PublicDashboardFooter","conf","PublicDashboardNotAvailable","paused","loginStyles","loginBoxBackground","Branding","Toolbar","dashboard","dispatch","onChangeTimeZone","timeZone","PageToolbar","DashNavTimeControls","PublicDashboardPage","props","match","route","location","context","prevProps","usePrevious","dashboardState","store","initDashboard","prevUrlParams","urlParams","Page","DashboardFailed","DashboardGrid","DashboardLoading"],"sourceRoot":""}