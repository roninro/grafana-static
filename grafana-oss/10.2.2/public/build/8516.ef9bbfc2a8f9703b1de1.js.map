{"version":3,"file":"8516.ef9bbfc2a8f9703b1de1.js","mappings":"qMA8CA,QAlCyB,CAAC,CAAE,MAAAA,CAAM,IAAa,CAC7C,KAAM,CAAE,qBAAAC,CAAqB,KAAI,MAAgB,EAC3C,CAAE,KAAAC,EAAM,UAAAC,EAAW,MAAAC,CAAM,KAAI,KAAsBH,CAAoB,EAEvEI,EAAmBL,GAAO,OAAO,KACvC,OAAKK,EAIDF,GAAa,CAACD,EACT,aAGLE,EAEA,gBAAC,IAAK,CAAC,SAAS,QAAQ,MAAM,iCAC3B,OAAOA,CAAK,CACf,EAICF,EAKH,gBAAC,KACC,uBAAwBD,EACxB,OAAQC,EACR,aAAc,mBAAmBG,CAAgB,EACnD,EARO,KAhBA,gBAAC,IAAc,CAAC,OAAO,eAAgB,EA0BlD,C,8FC5BO,MAAMC,EAAmB,CAAC,CAAE,OAAAC,EAAQ,aAAAC,EAAc,uBAAAC,CAAuB,IAAa,CAC3F,MAAMC,EAAWH,EAAO,oBAAoB,WAAW,KAAK,CAAC,CAAE,KAAAI,CAAK,IAAMA,IAASH,CAAY,EAC/F,OAAKE,EAQDD,IAA2B,KACtB,gBAAC,IAAmB,CAAC,OAAAF,EAAgB,uBAAAE,EAAgD,SAAUC,CAAA,CAAU,EAEzG,gBAAC,IAAiB,CAAC,OAAAH,EAAgB,uBAAAE,EAAgD,SAAUC,CAAA,CAAU,EAT5G,gBAAC,IAAK,CAAC,SAAS,QAAQ,MAAM,sBAAqB,8CAEnD,CASN,C,kDCpBO,SAASE,EAAsBC,EAAuBC,EAAmB,CAC9E,MAAMC,EAAc,kBAAgB,UAAU,6BAA6B,SAASF,GAAgB,GAAI,CACtG,GAAGC,EACH,KAAM,CAACD,CACT,CAAC,EAED,MAAO,CACL,GAAGE,EAEH,MAAOA,EAAY,KACrB,CACF,C","sources":["webpack://grafana/./public/app/features/alerting/unified/components/contact-points/EditContactPoint.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/EditReceiverView.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertmanagerConfig.ts"],"sourcesContent":["import React from 'react';\nimport { RouteChildrenProps } from 'react-router-dom';\n\nimport { Alert } from '@grafana/ui';\nimport { EntityNotFound } from 'app/core/components/PageNotFound/EntityNotFound';\n\nimport { useAlertmanagerConfig } from '../../hooks/useAlertmanagerConfig';\nimport { useAlertmanager } from '../../state/AlertmanagerContext';\nimport { EditReceiverView } from '../receivers/EditReceiverView';\n\ntype Props = RouteChildrenProps<{ name: string }>;\n\nconst EditContactPoint = ({ match }: Props) => {\n  const { selectedAlertmanager } = useAlertmanager();\n  const { data, isLoading, error } = useAlertmanagerConfig(selectedAlertmanager);\n\n  const contactPointName = match?.params.name;\n  if (!contactPointName) {\n    return <EntityNotFound entity=\"Contact point\" />;\n  }\n\n  if (isLoading && !data) {\n    return 'loading...';\n  }\n\n  if (error) {\n    return (\n      <Alert severity=\"error\" title=\"Failed to fetch contact point\">\n        {String(error)}\n      </Alert>\n    );\n  }\n\n  if (!data) {\n    return null;\n  }\n\n  return (\n    <EditReceiverView\n      alertManagerSourceName={selectedAlertmanager!}\n      config={data}\n      receiverName={decodeURIComponent(contactPointName)}\n    />\n  );\n};\n\nexport default EditContactPoint;\n","import React from 'react';\n\nimport { Alert } from '@grafana/ui';\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\n\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\n\nimport { CloudReceiverForm } from './form/CloudReceiverForm';\nimport { GrafanaReceiverForm } from './form/GrafanaReceiverForm';\n\ninterface Props {\n  receiverName: string;\n  config: AlertManagerCortexConfig;\n  alertManagerSourceName: string;\n}\n\nexport const EditReceiverView = ({ config, receiverName, alertManagerSourceName }: Props) => {\n  const receiver = config.alertmanager_config.receivers?.find(({ name }) => name === receiverName);\n  if (!receiver) {\n    return (\n      <Alert severity=\"error\" title=\"Receiver not found\">\n        Sorry, this receiver does not seem to exist.\n      </Alert>\n    );\n  }\n\n  if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n    return <GrafanaReceiverForm config={config} alertManagerSourceName={alertManagerSourceName} existing={receiver} />;\n  } else {\n    return <CloudReceiverForm config={config} alertManagerSourceName={alertManagerSourceName} existing={receiver} />;\n  }\n};\n","import { SerializedError } from '@reduxjs/toolkit';\n\nimport { alertmanagerApi } from '../api/alertmanagerApi';\n\ntype Options = {\n  refetchOnFocus: boolean;\n  refetchOnReconnect: boolean;\n};\n\n// TODO refactor this so we can just call \"alertmanagerApi.endpoints.getAlertmanagerConfiguration\" everywhere\n// and remove this hook since it adds little value\nexport function useAlertmanagerConfig(amSourceName?: string, options?: Options) {\n  const fetchConfig = alertmanagerApi.endpoints.getAlertmanagerConfiguration.useQuery(amSourceName ?? '', {\n    ...options,\n    skip: !amSourceName,\n  });\n\n  return {\n    ...fetchConfig,\n    // TODO refactor to get rid of this type assertion\n    error: fetchConfig.error as SerializedError,\n  };\n}\n"],"names":["match","selectedAlertmanager","data","isLoading","error","contactPointName","EditReceiverView","config","receiverName","alertManagerSourceName","receiver","name","useAlertmanagerConfig","amSourceName","options","fetchConfig"],"sourceRoot":""}