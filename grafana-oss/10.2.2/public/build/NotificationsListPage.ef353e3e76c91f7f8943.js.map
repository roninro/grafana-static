{"version":3,"file":"NotificationsListPage.ef353e3e76c91f7f8943.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/NotificationsListPage.tsx","webpack://grafana/./public/app/features/alerting/unified/Receivers.tsx"],"sourcesContent":["import React, { useState, FC, useEffect } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { HorizontalGroup, Button, LinkButton } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { Page } from 'app/core/components/Page/Page';\nimport { appEvents } from 'app/core/core';\nimport { useNavModel } from 'app/core/hooks/useNavModel';\nimport { AlertNotification } from 'app/types/alerting';\n\nimport { ShowConfirmModalEvent } from '../../types/events';\n\nconst NotificationsListPage: FC = () => {\n  const navModel = useNavModel('channels');\n\n  const [notifications, setNotifications] = useState<AlertNotification[]>([]);\n\n  const getNotifications = async () => {\n    return await getBackendSrv().get(`/api/alert-notifications`);\n  };\n\n  const [state, fetchNotifications] = useAsyncFn(getNotifications);\n  useEffect(() => {\n    fetchNotifications().then((res) => {\n      setNotifications(res);\n    });\n  }, [fetchNotifications]);\n\n  const deleteNotification = (id: number) => {\n    appEvents.publish(\n      new ShowConfirmModalEvent({\n        title: 'Delete',\n        text: 'Do you want to delete this notification channel?',\n        text2: `Deleting this notification channel will not delete from alerts any references to it`,\n        icon: 'trash-alt',\n        confirmText: 'Delete',\n        yesText: 'Delete',\n        onConfirm: async () => {\n          deleteNotificationConfirmed(id);\n        },\n      })\n    );\n  };\n\n  const deleteNotificationConfirmed = async (id: number) => {\n    await getBackendSrv().delete(`/api/alert-notifications/${id}`);\n    const notifications = await fetchNotifications();\n    setNotifications(notifications);\n  };\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        {state.error && <p>{state.error.message}</p>}\n        {!!notifications.length && (\n          <>\n            <div className=\"page-action-bar\">\n              <div className=\"page-action-bar__spacer\" />\n              <LinkButton icon=\"channel-add\" href=\"alerting/notification/new\">\n                New channel\n              </LinkButton>\n            </div>\n            <table className=\"filter-table filter-table--hover\">\n              <thead>\n                <tr>\n                  <th style={{ minWidth: '200px' }}>\n                    <strong>Name</strong>\n                  </th>\n                  <th style={{ minWidth: '100px' }}>Type</th>\n                  <th style={{ width: '1%' }}></th>\n                </tr>\n              </thead>\n              <tbody>\n                {notifications.map((notification) => (\n                  <tr key={notification.id}>\n                    <td className=\"link-td\">\n                      <a href={`alerting/notification/${notification.id}/edit`}>{notification.name}</a>\n                    </td>\n                    <td className=\"link-td\">\n                      <a href={`alerting/notification/${notification.id}/edit`}>{notification.type}</a>\n                    </td>\n                    <td className=\"text-right\">\n                      <HorizontalGroup justify=\"flex-end\">\n                        {notification.isDefault && (\n                          <Button disabled variant=\"secondary\" size=\"sm\">\n                            default\n                          </Button>\n                        )}\n                        <Button\n                          variant=\"destructive\"\n                          icon=\"times\"\n                          size=\"sm\"\n                          onClick={() => {\n                            deleteNotification(notification.id);\n                          }}\n                        />\n                      </HorizontalGroup>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </>\n        )}\n\n        {!(notifications.length || state.loading) && (\n          <EmptyListCTA\n            title=\"There are no notification channels defined yet\"\n            buttonIcon=\"channel-add\"\n            buttonLink=\"alerting/notification/new\"\n            buttonTitle=\"Add channel\"\n            proTip=\"You can include images in your alert notifications.\"\n            proTipLink=\"http://docs.grafana.org/alerting/notifications/\"\n            proTipLinkTitle=\"Learn more\"\n            proTipTarget=\"_blank\"\n          />\n        )}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default NotificationsListPage;\n","import React from 'react';\nimport { Disable, Enable } from 'react-enable';\nimport { Route, Switch } from 'react-router-dom';\n\nimport { withErrorBoundary } from '@grafana/ui';\nconst ContactPointsV1 = SafeDynamicImport(() => import('./components/contact-points/ContactPoints.v1'));\nconst ContactPointsV2 = SafeDynamicImport(() => import('./components/contact-points/ContactPoints.v2'));\nconst EditContactPoint = SafeDynamicImport(() => import('./components/contact-points/EditContactPoint'));\nconst NewContactPoint = SafeDynamicImport(() => import('./components/contact-points/NewContactPoint'));\nconst EditMessageTemplate = SafeDynamicImport(() => import('./components/contact-points/EditMessageTemplate'));\nconst NewMessageTemplate = SafeDynamicImport(() => import('./components/contact-points/NewMessageTemplate'));\nconst GlobalConfig = SafeDynamicImport(() => import('./components/contact-points/GlobalConfig'));\nconst DuplicateMessageTemplate = SafeDynamicImport(\n  () => import('./components/contact-points/DuplicateMessageTemplate')\n);\nimport { SafeDynamicImport } from 'app/core/components/DynamicImports/SafeDynamicImport';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nimport { AlertmanagerPageWrapper } from './components/AlertingPageWrapper';\nimport { AlertingFeature } from './features';\n\n// TODO add pagenav back in â€“ that way we have correct breadcrumbs and page title\nconst ContactPoints = (props: GrafanaRouteComponentProps): JSX.Element => (\n  <AlertmanagerPageWrapper pageId=\"receivers\" accessType=\"notification\">\n    <Enable feature={AlertingFeature.ContactPointsV2}>\n      {/* TODO do we want a \"routes\" component for each Alerting entity? */}\n      <Switch>\n        <Route exact={true} path=\"/alerting/notifications\" component={ContactPointsV2} />\n        <Route exact={true} path=\"/alerting/notifications/receivers/new\" component={NewContactPoint} />\n        <Route exact={true} path=\"/alerting/notifications/receivers/:name/edit\" component={EditContactPoint} />\n        <Route exact={true} path=\"/alerting/notifications/templates/:name/edit\" component={EditMessageTemplate} />\n        <Route exact={true} path=\"/alerting/notifications/templates/new\" component={NewMessageTemplate} />\n        <Route\n          exact={true}\n          path=\"/alerting/notifications/templates/:name/duplicate\"\n          component={DuplicateMessageTemplate}\n        />\n        <Route exact={true} path=\"/alerting/notifications/global-config\" component={GlobalConfig} />\n      </Switch>\n    </Enable>\n    <Disable feature={AlertingFeature.ContactPointsV2}>\n      <ContactPointsV1 {...props} />\n    </Disable>\n  </AlertmanagerPageWrapper>\n);\n\nexport default withErrorBoundary(ContactPoints, { style: 'page' });\n"],"names":["navModel","notifications","setNotifications","getNotifications","state","fetchNotifications","res","deleteNotification","id","deleteNotificationConfirmed","notification","ContactPointsV1","ContactPointsV2","EditContactPoint","NewContactPoint","EditMessageTemplate","NewMessageTemplate","GlobalConfig","DuplicateMessageTemplate","ContactPoints","props"],"sourceRoot":""}