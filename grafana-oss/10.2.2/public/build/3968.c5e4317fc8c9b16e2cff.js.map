{"version":3,"file":"3968.c5e4317fc8c9b16e2cff.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/CollapsibleSection.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/fields/KeyValueMapInput.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/fields/StringArrayInput.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/fields/styles.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/fields/SubformArrayField.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/fields/SubformField.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/fields/OptionField.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/ActionIcon.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useControlledFieldArray.ts","webpack://grafana/./public/app/features/alerting/unified/utils/cloud-alertmanager-notifier-types.ts","webpack://grafana/./public/app/features/alerting/unified/utils/notifier-types.ts","webpack://grafana/./public/app/features/alerting/unified/utils/receiver-form.ts"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { IconSize, useStyles2 } from '@grafana/ui';\n\nimport { CollapseToggle } from '../../CollapseToggle';\n\ninterface Props {\n  label: string;\n  description?: string;\n  className?: string;\n  size?: IconSize;\n}\n\nexport const CollapsibleSection = ({\n  label,\n  description,\n  children,\n  className,\n  size = 'xl',\n}: React.PropsWithChildren<Props>) => {\n  const styles = useStyles2(getStyles);\n  const [isCollapsed, setIsCollapsed] = useState(true);\n\n  const toggleCollapse = () => setIsCollapsed(!isCollapsed);\n\n  return (\n    <div className={cx(styles.wrapper, className)}>\n      <CollapseToggle\n        className={styles.toggle}\n        size={size}\n        onToggle={toggleCollapse}\n        isCollapsed={isCollapsed}\n        text={label}\n      />\n      {description && <p className={styles.description}>{description}</p>}\n      <div className={isCollapsed ? styles.hidden : styles.content}>{children}</div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    margin-top: ${theme.spacing(1)};\n    padding-bottom: ${theme.spacing(1)};\n  `,\n  toggle: css`\n    margin: ${theme.spacing(1, 0)};\n    padding: 0;\n  `,\n  hidden: css`\n    display: none;\n  `,\n  description: css`\n    color: ${theme.colors.text.secondary};\n    font-size: ${theme.typography.size.sm};\n    font-weight: ${theme.typography.fontWeightRegular};\n    margin: 0;\n  `,\n  content: css`\n    padding-left: ${theme.spacing(3)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Input, useStyles2 } from '@grafana/ui';\n\nimport { ActionIcon } from '../../../rules/ActionIcon';\n\ninterface Props {\n  value?: Record<string, string>;\n  readOnly?: boolean;\n  onChange: (value: Record<string, string>) => void;\n}\n\nexport const KeyValueMapInput = ({ value, onChange, readOnly = false }: Props) => {\n  const styles = useStyles2(getStyles);\n  const [pairs, setPairs] = useState(recordToPairs(value));\n  useEffect(() => setPairs(recordToPairs(value)), [value]);\n\n  const emitChange = (pairs: Array<[string, string]>) => {\n    onChange(pairsToRecord(pairs));\n  };\n\n  const deleteItem = (index: number) => {\n    const newPairs = pairs.slice();\n    const removed = newPairs.splice(index, 1)[0];\n    setPairs(newPairs);\n    if (removed[0]) {\n      emitChange(newPairs);\n    }\n  };\n\n  const updatePair = (values: [string, string], index: number) => {\n    const old = pairs[index];\n    const newPairs = pairs.map((pair, i) => (i === index ? values : pair));\n    setPairs(newPairs);\n    if (values[0] || old[0]) {\n      emitChange(newPairs);\n    }\n  };\n\n  return (\n    <div>\n      {!!pairs.length && (\n        <table className={styles.table}>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Value</th>\n              {!readOnly && <th></th>}\n            </tr>\n          </thead>\n          <tbody>\n            {pairs.map(([key, value], index) => (\n              <tr key={index}>\n                <td>\n                  <Input\n                    readOnly={readOnly}\n                    value={key}\n                    onChange={(e) => updatePair([e.currentTarget.value, value], index)}\n                  />\n                </td>\n                <td>\n                  <Input\n                    readOnly={readOnly}\n                    value={value}\n                    onChange={(e) => updatePair([key, e.currentTarget.value], index)}\n                  />\n                </td>\n                {!readOnly && (\n                  <td>\n                    <ActionIcon icon=\"trash-alt\" tooltip=\"delete\" onClick={() => deleteItem(index)} />\n                  </td>\n                )}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n      {!readOnly && (\n        <Button\n          className={styles.addButton}\n          type=\"button\"\n          variant=\"secondary\"\n          icon=\"plus\"\n          size=\"sm\"\n          onClick={() => setPairs([...pairs, ['', '']])}\n        >\n          Add\n        </Button>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  addButton: css`\n    margin-top: ${theme.spacing(1)};\n  `,\n  table: css`\n    tbody td {\n      padding: 0 ${theme.spacing(1)} ${theme.spacing(1)} 0;\n    }\n  `,\n});\n\nconst pairsToRecord = (pairs: Array<[string, string]>): Record<string, string> => {\n  const record: Record<string, string> = {};\n  for (const [key, value] of pairs) {\n    if (key) {\n      record[key] = value;\n    }\n  }\n  return record;\n};\n\nconst recordToPairs = (obj?: Record<string, string>): Array<[string, string]> => Object.entries(obj ?? {});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Input, useStyles2 } from '@grafana/ui';\n\nimport { ActionIcon } from '../../../rules/ActionIcon';\n\ninterface Props {\n  value?: string[];\n  readOnly?: boolean;\n  onChange: (value: string[]) => void;\n}\n\nexport const StringArrayInput = ({ value, onChange, readOnly = false }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const deleteItem = (index: number) => {\n    if (!value) {\n      return;\n    }\n    const newValue = value.slice();\n    newValue.splice(index, 1);\n    onChange(newValue);\n  };\n\n  const updateValue = (itemValue: string, index: number) => {\n    if (!value) {\n      return;\n    }\n    onChange(value.map((v, i) => (i === index ? itemValue : v)));\n  };\n\n  return (\n    <div>\n      {!!value?.length &&\n        value.map((v, index) => (\n          <div key={index} className={styles.row}>\n            <Input readOnly={readOnly} value={v} onChange={(e) => updateValue(e.currentTarget.value, index)} />\n            {!readOnly && (\n              <ActionIcon\n                className={styles.deleteIcon}\n                icon=\"trash-alt\"\n                tooltip=\"delete\"\n                onClick={() => deleteItem(index)}\n              />\n            )}\n          </div>\n        ))}\n      {!readOnly && (\n        <Button\n          className={styles.addButton}\n          type=\"button\"\n          variant=\"secondary\"\n          icon=\"plus\"\n          size=\"sm\"\n          onClick={() => onChange([...(value ?? []), ''])}\n        >\n          Add\n        </Button>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  row: css`\n    display: flex;\n    flex-direction: row;\n    margin-bottom: ${theme.spacing(1)};\n    align-items: center;\n  `,\n  deleteIcon: css`\n    margin-left: ${theme.spacing(1)};\n  `,\n  addButton: css`\n    margin-top: ${theme.spacing(1)};\n  `,\n});\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getReceiverFormFieldStyles = (theme: GrafanaTheme2) => ({\n  collapsibleSection: css`\n    margin: 0;\n    padding: 0;\n  `,\n  wrapper: css`\n    margin: ${theme.spacing(2, 0)};\n    padding: ${theme.spacing(1)};\n    border: solid 1px ${theme.colors.border.medium};\n    border-radius: ${theme.shape.radius.default};\n    position: relative;\n  `,\n  description: css`\n    color: ${theme.colors.text.secondary};\n    font-size: ${theme.typography.size.sm};\n    font-weight: ${theme.typography.fontWeightRegular};\n    margin: 0;\n  `,\n  deleteIcon: css`\n    position: absolute;\n    right: ${theme.spacing(1)};\n    top: ${theme.spacing(1)};\n  `,\n  addButton: css`\n    margin-top: ${theme.spacing(1)};\n  `,\n});\n","import React from 'react';\nimport { FieldError, DeepMap, useFormContext } from 'react-hook-form';\n\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { useControlledFieldArray } from 'app/features/alerting/unified/hooks/useControlledFieldArray';\nimport { NotificationChannelOption } from 'app/types';\n\nimport { ActionIcon } from '../../../rules/ActionIcon';\nimport { CollapsibleSection } from '../CollapsibleSection';\n\nimport { OptionField } from './OptionField';\nimport { getReceiverFormFieldStyles } from './styles';\n\ninterface Props {\n  defaultValues?: any[];\n  option: NotificationChannelOption;\n  pathPrefix: string;\n  errors?: Array<DeepMap<any, FieldError>>;\n  readOnly?: boolean;\n}\n\nexport const SubformArrayField = ({ option, pathPrefix, errors, defaultValues, readOnly = false }: Props) => {\n  const styles = useStyles2(getReceiverFormFieldStyles);\n  const path = `${pathPrefix}${option.propertyName}`;\n  const formAPI = useFormContext();\n  const { fields, append, remove } = useControlledFieldArray({ name: path, formAPI, defaults: defaultValues });\n\n  return (\n    <div className={styles.wrapper}>\n      <CollapsibleSection\n        className={styles.collapsibleSection}\n        label={`${option.label} (${fields.length})`}\n        description={option.description}\n      >\n        {(fields ?? defaultValues ?? []).map((field, itemIndex) => {\n          return (\n            <div key={itemIndex} className={styles.wrapper}>\n              {!readOnly && (\n                <ActionIcon\n                  data-testid={`${path}.${itemIndex}.delete-button`}\n                  icon=\"trash-alt\"\n                  tooltip=\"delete\"\n                  onClick={() => remove(itemIndex)}\n                  className={styles.deleteIcon}\n                />\n              )}\n              {option.subformOptions?.map((option) => (\n                <OptionField\n                  readOnly={readOnly}\n                  defaultValue={field?.[option.propertyName]}\n                  key={option.propertyName}\n                  option={option}\n                  pathPrefix={`${path}.${itemIndex}.`}\n                  error={errors?.[itemIndex]?.[option.propertyName]}\n                />\n              ))}\n            </div>\n          );\n        })}\n        {!readOnly && (\n          <Button\n            data-testid={`${path}.add-button`}\n            className={styles.addButton}\n            type=\"button\"\n            variant=\"secondary\"\n            icon=\"plus\"\n            size=\"sm\"\n            onClick={() => append({ __id: String(Math.random()) })}\n          >\n            Add\n          </Button>\n        )}\n      </CollapsibleSection>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { FieldError, DeepMap, useFormContext } from 'react-hook-form';\n\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { NotificationChannelOption } from 'app/types';\n\nimport { ActionIcon } from '../../../rules/ActionIcon';\n\nimport { OptionField } from './OptionField';\nimport { getReceiverFormFieldStyles } from './styles';\n\ninterface Props {\n  defaultValue: any;\n  option: NotificationChannelOption;\n  pathPrefix: string;\n  errors?: DeepMap<any, FieldError>;\n  readOnly?: boolean;\n}\n\nexport const SubformField = ({ option, pathPrefix, errors, defaultValue, readOnly = false }: Props) => {\n  const styles = useStyles2(getReceiverFormFieldStyles);\n  const name = `${pathPrefix}${option.propertyName}`;\n  const { watch } = useFormContext();\n  const _watchValue = watch(name);\n  const value = _watchValue === undefined ? defaultValue : _watchValue;\n\n  const [show, setShow] = useState(!!value);\n\n  return (\n    <div className={styles.wrapper} data-testid={`${name}.container`}>\n      <h6>{option.label}</h6>\n      {option.description && <p className={styles.description}>{option.description}</p>}\n      {show && (\n        <>\n          {!readOnly && (\n            <ActionIcon\n              data-testid={`${name}.delete-button`}\n              icon=\"trash-alt\"\n              tooltip=\"delete\"\n              onClick={() => setShow(false)}\n              className={styles.deleteIcon}\n            />\n          )}\n          {(option.subformOptions ?? []).map((subOption) => {\n            return (\n              <OptionField\n                readOnly={readOnly}\n                defaultValue={defaultValue?.[subOption.propertyName]}\n                key={subOption.propertyName}\n                option={subOption}\n                pathPrefix={`${name}.`}\n                error={errors?.[subOption.propertyName]}\n              />\n            );\n          })}\n        </>\n      )}\n      {!show && !readOnly && (\n        <Button\n          className={styles.addButton}\n          type=\"button\"\n          variant=\"secondary\"\n          icon=\"plus\"\n          size=\"sm\"\n          onClick={() => setShow(true)}\n          data-testid={`${name}.add-button`}\n        >\n          Add\n        </Button>\n      )}\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport { isEmpty } from 'lodash';\nimport React, { FC, useEffect } from 'react';\nimport { useFormContext, FieldError, DeepMap } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Checkbox, Field, Input, InputControl, RadioButtonList, Select, TextArea, useStyles2 } from '@grafana/ui';\nimport { NotificationChannelOption } from 'app/types';\n\nimport { KeyValueMapInput } from './KeyValueMapInput';\nimport { StringArrayInput } from './StringArrayInput';\nimport { SubformArrayField } from './SubformArrayField';\nimport { SubformField } from './SubformField';\n\ninterface Props {\n  defaultValue: any;\n  option: NotificationChannelOption;\n  invalid?: boolean;\n  pathPrefix: string;\n  pathSuffix?: string;\n  error?: FieldError | DeepMap<any, FieldError>;\n  readOnly?: boolean;\n  customValidator?: (value: string) => boolean | string | Promise<boolean | string>;\n}\n\nexport const OptionField: FC<Props> = ({\n  option,\n  invalid,\n  pathPrefix,\n  pathSuffix = '',\n  error,\n  defaultValue,\n  readOnly = false,\n  customValidator,\n}) => {\n  const optionPath = `${pathPrefix}${pathSuffix}`;\n\n  if (option.element === 'subform') {\n    return (\n      <SubformField\n        readOnly={readOnly}\n        defaultValue={defaultValue}\n        option={option}\n        errors={error as DeepMap<any, FieldError> | undefined}\n        pathPrefix={optionPath}\n      />\n    );\n  }\n  if (option.element === 'subform_array') {\n    return (\n      <SubformArrayField\n        readOnly={readOnly}\n        defaultValues={defaultValue}\n        option={option}\n        pathPrefix={optionPath}\n        errors={error as Array<DeepMap<any, FieldError>> | undefined}\n      />\n    );\n  }\n  return (\n    <Field\n      label={option.element !== 'checkbox' && option.element !== 'radio' ? option.label : undefined}\n      description={option.description || undefined}\n      invalid={!!error}\n      error={error?.message}\n      data-testid={`${optionPath}${option.propertyName}`}\n    >\n      <OptionInput\n        id={`${optionPath}${option.propertyName}`}\n        defaultValue={defaultValue}\n        option={option}\n        invalid={invalid}\n        pathPrefix={optionPath}\n        readOnly={readOnly}\n        pathIndex={pathPrefix}\n        customValidator={customValidator}\n      />\n    </Field>\n  );\n};\n\nconst OptionInput: FC<Props & { id: string; pathIndex?: string }> = ({\n  option,\n  invalid,\n  id,\n  pathPrefix = '',\n  pathIndex = '',\n  readOnly = false,\n  customValidator,\n}) => {\n  const styles = useStyles2(getStyles);\n  const { control, register, unregister, getValues } = useFormContext();\n  const name = `${pathPrefix}${option.propertyName}`;\n\n  // workaround for https://github.com/react-hook-form/react-hook-form/issues/4993#issuecomment-829012506\n  useEffect(\n    () => () => {\n      unregister(name, { keepValue: false });\n    },\n    [unregister, name]\n  );\n  switch (option.element) {\n    case 'checkbox':\n      return (\n        <Checkbox\n          id={id}\n          readOnly={readOnly}\n          disabled={readOnly}\n          className={styles.checkbox}\n          {...register(name)}\n          label={option.label}\n          description={option.description}\n        />\n      );\n    case 'input':\n      return (\n        <Input\n          id={id}\n          readOnly={readOnly || determineReadOnly(option, getValues, pathIndex)}\n          invalid={invalid}\n          type={option.inputType}\n          {...register(name, {\n            required: determineRequired(option, getValues, pathIndex),\n            validate: {\n              validationRule: (v) => (option.validationRule ? validateOption(v, option.validationRule) : true),\n              customValidator: (v) => (customValidator ? customValidator(v) : true),\n            },\n            setValueAs: option.setValueAs,\n          })}\n          placeholder={option.placeholder}\n        />\n      );\n\n    case 'select':\n      return (\n        <InputControl\n          render={({ field: { onChange, ref, ...field } }) => (\n            <Select\n              disabled={readOnly}\n              options={option.selectOptions ?? undefined}\n              invalid={invalid}\n              onChange={(value) => onChange(value.value)}\n              {...field}\n            />\n          )}\n          control={control}\n          name={name}\n          defaultValue={option.defaultValue}\n          rules={{\n            validate: {\n              customValidator: (v) => (customValidator ? customValidator(v) : true),\n            },\n          }}\n        />\n      );\n    case 'radio':\n      return (\n        <>\n          <legend className={styles.legend}>{option.label}</legend>\n          <InputControl\n            render={({ field: { ref, ...field } }) => (\n              <RadioButtonList disabled={readOnly} options={option.selectOptions ?? []} {...field} />\n            )}\n            control={control}\n            defaultValue={option.defaultValue?.value}\n            name={name}\n            rules={{\n              required: option.required ? 'Option is required' : false,\n              validate: {\n                validationRule: (v) => (option.validationRule ? validateOption(v, option.validationRule) : true),\n                customValidator: (v) => (customValidator ? customValidator(v) : true),\n              },\n            }}\n          />\n        </>\n      );\n    case 'textarea':\n      return (\n        <TextArea\n          id={id}\n          readOnly={readOnly}\n          invalid={invalid}\n          placeholder={option.placeholder}\n          {...register(name, {\n            required: option.required ? 'Required' : false,\n            validate: (v) => (option.validationRule !== '' ? validateOption(v, option.validationRule) : true),\n          })}\n        />\n      );\n    case 'string_array':\n      return (\n        <InputControl\n          render={({ field: { value, onChange } }) => (\n            <StringArrayInput readOnly={readOnly} value={value} onChange={onChange} />\n          )}\n          control={control}\n          name={name}\n        />\n      );\n    case 'key_value_map':\n      return (\n        <InputControl\n          render={({ field: { value, onChange } }) => (\n            <KeyValueMapInput readOnly={readOnly} value={value} onChange={onChange} />\n          )}\n          control={control}\n          name={name}\n        />\n      );\n\n    default:\n      console.error('Element not supported', option.element);\n      return null;\n  }\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  checkbox: css`\n    height: auto; // native checkbox has fixed height which does not take into account description\n  `,\n  legend: css`\n    font-size: ${theme.typography.h6.fontSize};\n  `,\n});\n\nconst validateOption = (value: string, validationRule: string) => {\n  return RegExp(validationRule).test(value) ? true : 'Invalid format';\n};\n\nconst determineRequired = (option: NotificationChannelOption, getValues: any, pathIndex: string) => {\n  if (!option.dependsOn) {\n    return option.required ? 'Required' : false;\n  }\n  if (isEmpty(getValues(`${pathIndex}secureFields`))) {\n    const dependentOn = getValues(`${pathIndex}secureSettings.${option.dependsOn}`);\n    return !Boolean(dependentOn) && option.required ? 'Required' : false;\n  } else {\n    const dependentOn: boolean = getValues(`${pathIndex}secureFields.${option.dependsOn}`);\n    return !dependentOn && option.required ? 'Required' : false;\n  }\n};\n\nconst determineReadOnly = (option: NotificationChannelOption, getValues: any, pathIndex: string) => {\n  if (!option.dependsOn) {\n    return false;\n  }\n  if (isEmpty(getValues(`${pathIndex}secureFields`))) {\n    return getValues(`${pathIndex}secureSettings.${option.dependsOn}`);\n  } else {\n    return getValues(`${pathIndex}secureFields.${option.dependsOn}`);\n  }\n};\n","import React from 'react';\n\nimport { IconName, Tooltip, LinkButton, Button } from '@grafana/ui';\nimport { PopoverContent, TooltipPlacement } from '@grafana/ui/src/components/Tooltip';\n\ninterface Props {\n  tooltip: PopoverContent;\n  icon: IconName;\n  className?: string;\n  tooltipPlacement?: TooltipPlacement;\n  to?: string;\n  target?: string;\n  onClick?: () => void;\n  'data-testid'?: string;\n}\n\nexport const ActionIcon = ({\n  tooltip,\n  icon,\n  to,\n  target,\n  onClick,\n  className,\n  tooltipPlacement = 'top',\n  ...rest\n}: Props) => {\n  const ariaLabel = typeof tooltip === 'string' ? tooltip : undefined;\n\n  return (\n    <Tooltip content={tooltip} placement={tooltipPlacement}>\n      {to ? (\n        <LinkButton\n          variant=\"secondary\"\n          fill=\"text\"\n          icon={icon}\n          href={to}\n          size=\"sm\"\n          target={target}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      ) : (\n        <Button\n          className={className}\n          variant=\"secondary\"\n          fill=\"text\"\n          size=\"sm\"\n          icon={icon}\n          type=\"button\"\n          onClick={onClick}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      )}\n    </Tooltip>\n  );\n};\n","import { set } from 'lodash';\nimport { useCallback } from 'react';\nimport { UseFormReturn } from 'react-hook-form';\n\ninterface Options<R> {\n  name: string;\n  formAPI: UseFormReturn<any>;\n  defaults?: R[];\n\n  // if true, sets `__deleted: true` but does not remove item from the array in values\n  softDelete?: boolean;\n}\n\nexport type ControlledField<R> = R & {\n  __deleted?: boolean;\n};\n\nconst EMPTY_ARRAY = [] as const;\n\n/*\n * react-hook-form's own useFieldArray is uncontrolled and super buggy.\n * this is a simple controlled version. It's dead simple and more robust at the cost of re-rendering the form\n * on every change to the sub forms in the array.\n * Warning: you'll have to take care of your own unique identiifer to use as `key` for the ReactNode array.\n * Using index will cause problems.\n */\nexport function useControlledFieldArray<R>(options: Options<R>) {\n  const { name, formAPI, defaults, softDelete } = options;\n  const { watch, getValues, reset, setValue } = formAPI;\n\n  const fields: Array<ControlledField<R>> = watch(name) ?? defaults ?? EMPTY_ARRAY;\n\n  const update = useCallback(\n    (updateFn: (fields: R[]) => R[]) => {\n      const values = JSON.parse(JSON.stringify(getValues()));\n      const newItems = updateFn(fields ?? []);\n      reset(set(values, name, newItems));\n    },\n    [getValues, name, reset, fields]\n  );\n\n  return {\n    fields,\n    append: useCallback((values: R) => update((fields) => [...fields, values]), [update]),\n    remove: useCallback(\n      (index: number) => {\n        if (softDelete) {\n          setValue(`${name}.${index}.__deleted`, true);\n        } else {\n          update((items) => {\n            const newItems = items.slice();\n            newItems.splice(index, 1);\n            return newItems;\n          });\n        }\n      },\n      [update, name, setValue, softDelete]\n    ),\n  };\n}\n","import { CloudNotifierType, NotificationChannelOption, NotifierDTO } from 'app/types';\n\nimport { option } from './notifier-types';\n\nconst basicAuthOption: NotificationChannelOption = option(\n  'basic_auth',\n  'Basic auth',\n  'Sets the `Authorization` header with the configured username and password. Password and password_file are mutually exclusive.',\n  {\n    element: 'subform',\n    subformOptions: [\n      option('username', 'Username', ''),\n      option('password', 'Password', ''),\n      option('password_file', 'Password file', ''),\n    ],\n  }\n);\n\nconst tlsConfigOption: NotificationChannelOption = option('tls_config', 'TLS config', 'Configures the TLS settings.', {\n  element: 'subform',\n  subformOptions: [\n    option('ca_file', 'CA file', 'CA certificate to validate the server certificate with.'),\n    option('cert_file', 'Cert file', 'Certificate for client cert authentication to the server.'),\n    option('key_file', 'Key file', 'Key file for client cert authentication to the server.'),\n    option('server_name', 'Server name', 'ServerName extension to indicate the name of the server.'),\n    option('insecure_skip_verify', 'Skip verify', 'Disable validation of the server certificate.', {\n      element: 'checkbox',\n    }),\n  ],\n});\n\nconst httpConfigOption: NotificationChannelOption = option(\n  'http_config',\n  'HTTP Config',\n  'Note that `basic_auth`, `bearer_token` and `bearer_token_file` options are mutually exclusive.',\n  {\n    element: 'subform',\n    subformOptions: [\n      option('bearer_token', 'Bearer token', 'Sets the `Authorization` header with the configured bearer token.'),\n      option(\n        'bearer_token_file',\n        'Bearer token file',\n        'Sets the `Authorization` header with the bearer token read from the configured file.'\n      ),\n      option('proxy_url', 'Proxy URL', 'Optional proxy URL.'),\n      basicAuthOption,\n      tlsConfigOption,\n    ],\n  }\n);\n\nexport const cloudNotifierTypes: Array<NotifierDTO<CloudNotifierType>> = [\n  {\n    name: 'Email',\n    description: 'Send notification over SMTP',\n    type: 'email',\n    info: '',\n    heading: 'Email settings',\n    options: [\n      option(\n        'to',\n        'To',\n        'The email address to send notifications to. You can enter multiple addresses using a \",\" separator',\n        { required: true }\n      ),\n      option('from', 'From', 'The sender address.'),\n      option('smarthost', 'SMTP host', 'The SMTP host through which emails are sent.'),\n      option('hello', 'Hello', 'The hostname to identify to the SMTP server.'),\n      option('auth_username', 'Username', 'SMTP authentication information'),\n      option('auth_password', 'Password', 'SMTP authentication information'),\n      option('auth_secret', 'Secret', 'SMTP authentication information'),\n      option('auth_identity', 'Identity', 'SMTP authentication information'),\n      option('require_tls', 'Require TLS', 'The SMTP TLS requirement', { element: 'checkbox' }),\n      option('html', 'Email HTML body', 'The HTML body of the email notification.', {\n        placeholder: '{{ template \"email.default.html\" . }}',\n        element: 'textarea',\n      }),\n      option('text', 'Email text body', 'The text body of the email notification.', { element: 'textarea' }),\n      option(\n        'headers',\n        'Headers',\n        'Further headers email header key/value pairs. Overrides any headers previously set by the notification implementation.',\n        { element: 'key_value_map' }\n      ),\n      tlsConfigOption,\n    ],\n  },\n  {\n    name: 'PagerDuty',\n    description: 'Send notifications to PagerDuty',\n    type: 'pagerduty',\n    info: '',\n    heading: 'PagerDuty settings',\n    options: [\n      option(\n        'routing_key',\n        'Routing key',\n        'The PagerDuty integration key (when using PagerDuty integration type `Events API v2`)'\n      ),\n      option(\n        'service_key',\n        'Service key',\n        'The PagerDuty integration key (when using PagerDuty integration type `Prometheus`).'\n      ),\n      option('url', 'URL', 'The URL to send API requests to'),\n      option('client', 'Client', 'The client identification of the Alertmanager.', {\n        placeholder: '{{ template \"pagerduty.default.client\" . }}',\n      }),\n      option('client_url', 'Client URL', 'A backlink to the sender of the notification.', {\n        placeholder: '{{ template \"pagerduty.default.clientURL\" . }}',\n      }),\n      option('description', 'Description', 'A description of the incident.', {\n        placeholder: '{{ template \"pagerduty.default.description\" .}}',\n      }),\n      option('severity', 'Severity', 'Severity of the incident.', { placeholder: 'error' }),\n      option(\n        'details',\n        'Details',\n        'A set of arbitrary key/value pairs that provide further detail about the incident.',\n        {\n          element: 'key_value_map',\n        }\n      ),\n      option('images', 'Images', 'Images to attach to the incident.', {\n        element: 'subform_array',\n        subformOptions: [\n          option('href', 'URL', '', { required: true }),\n          option('source', 'Source', '', { required: true }),\n          option('alt', 'Alt', '', { required: true }),\n        ],\n      }),\n      option('links', 'Links', 'Links to attach to the incident.', {\n        element: 'subform_array',\n        subformOptions: [option('href', 'URL', '', { required: true }), option('text', 'Text', '', { required: true })],\n      }),\n      httpConfigOption,\n    ],\n  },\n  {\n    name: 'Pushover',\n    description: 'Send notifications to Pushover',\n    type: 'pushover',\n    info: '',\n    heading: 'Pushover settings',\n    options: [\n      option('user_key', 'User key', 'The recipient user’s user key.', { required: true }),\n      option('token', 'Token', 'Your registered application’s API token, see https://pushover.net/app', {\n        required: true,\n      }),\n      option('title', 'Title', 'Notification title.', {\n        placeholder: '{{ template \"pushover.default.title\" . }}',\n      }),\n      option('message', 'Message', 'Notification message.', {\n        placeholder: '{{ template \"pushover.default.message\" . }}',\n      }),\n      option('url', 'URL', 'A supplementary URL shown alongside the message.', {\n        placeholder: '{{ template \"pushover.default.url\" . }}',\n      }),\n      option('priority', 'Priority', 'Priority, see https://pushover.net/api#priority', {\n        placeholder: '{{ if eq .Status \"firing\" }}2{{ else }}0{{ end }}',\n      }),\n      option(\n        'retry',\n        'Retry',\n        'How often the Pushover servers will send the same notification to the user. Must be at least 30 seconds.',\n        {\n          placeholder: '1m',\n        }\n      ),\n      option(\n        'expire',\n        'Expire',\n        'How long your notification will continue to be retried for, unless the user acknowledges the notification.',\n        {\n          placeholder: '1h',\n        }\n      ),\n      httpConfigOption,\n    ],\n  },\n  {\n    name: 'Slack',\n    description: 'Send notifications to Slack',\n    type: 'slack',\n    info: '',\n    heading: 'Slack settings',\n    options: [\n      option('api_url', 'Webhook URL', 'The Slack webhook URL.'),\n      option('channel', 'Channel', 'The #channel or @user to send notifications to.', { required: true }),\n      option('icon_emoji', 'Emoji icon', ''),\n      option('icon_url', 'Icon URL', ''),\n      option('link_names', 'Names link', '', { element: 'checkbox' }),\n      option('username', 'Username', '', { placeholder: '{{ template \"slack.default.username\" . }}' }),\n      option('callback_id', 'Callback ID', '', { placeholder: '{{ template \"slack.default.callbackid\" . }}' }),\n      option('color', 'Color', '', { placeholder: '{{ if eq .Status \"firing\" }}danger{{ else }}good{{ end }}' }),\n      option('fallback', 'Fallback', '', { placeholder: '{{ template \"slack.default.fallback\" . }}' }),\n      option('footer', 'Footer', '', { placeholder: '{{ template \"slack.default.footer\" . }}' }),\n      option('mrkdwn_in', 'Mrkdwn fields', 'An array of field names that should be formatted by mrkdwn syntax.', {\n        element: 'string_array',\n      }),\n      option('pretext', 'Pre-text', '', { placeholder: '{{ template \"slack.default.pretext\" . }}' }),\n      option('short_fields', 'Short fields', '', { element: 'checkbox' }),\n      option('text', 'Message body', '', { element: 'textarea', placeholder: '{{ template \"slack.default.text\" . }}' }),\n      option('title', 'Title', '', { placeholder: '{{ template \"slack.default.title\" . }}' }),\n      option('title_link', 'Title link', '', { placeholder: '{{ template \"slack.default.titlelink\" . }}' }),\n      option('image_url', 'Image URL', ''),\n      option('thumb_url', 'Thumbnail URL', ''),\n      option('actions', 'Actions', '', {\n        element: 'subform_array',\n        subformOptions: [\n          option('text', 'Text', '', { required: true }),\n          option('type', 'Type', '', { required: true }),\n          option('url', 'URL', 'Either url or name and value are mandatory.'),\n          option('name', 'Name', ''),\n          option('value', 'Value', ''),\n          option('confirm', 'Confirm', '', {\n            element: 'subform',\n            subformOptions: [\n              option('text', 'Text', '', { required: true }),\n              option('dismiss_text', 'Dismiss text', ''),\n              option('ok_text', 'OK text', ''),\n              option('title', 'Title', ''),\n            ],\n          }),\n          option('style', 'Style', ''),\n        ],\n      }),\n      option('fields', 'Fields', '', {\n        element: 'subform_array',\n        subformOptions: [\n          option('title', 'Title', '', { required: true }),\n          option('value', 'Value', '', { required: true }),\n          option('short', 'Short', '', { element: 'checkbox' }),\n        ],\n      }),\n      httpConfigOption,\n    ],\n  },\n  {\n    name: 'OpsGenie',\n    description: 'Send notifications to OpsGenie',\n    type: 'opsgenie',\n    info: '',\n    heading: 'OpsGenie settings',\n    options: [\n      option('api_key', 'API key', 'The API key to use when talking to the OpsGenie API.'),\n      option('api_url', 'API URL', 'The host to send OpsGenie API requests to.'),\n      option('message', 'Message', 'Alert text limited to 130 characters.'),\n      option('description', 'Description', 'A description of the incident.', {\n        placeholder: '{{ template \"opsgenie.default.description\" . }}',\n      }),\n      option('source', 'Source', 'A backlink to the sender of the notification.', {\n        placeholder: '{{ template \"opsgenie.default.source\" . }}',\n      }),\n      option(\n        'details',\n        'Details',\n        'A set of arbitrary key/value pairs that provide further detail about the incident.',\n        {\n          element: 'key_value_map',\n        }\n      ),\n      option('tags', 'Tags', 'Comma separated list of tags attached to the notifications.'),\n      option('note', 'Note', 'Additional alert note.'),\n      option('priority', 'Priority', 'Priority level of alert. Possible values are P1, P2, P3, P4, and P5.'),\n      option('responders', 'Responders', 'List of responders responsible for notifications.', {\n        element: 'subform_array',\n        subformOptions: [\n          option('type', 'Type', '\"team\", \"user\", \"escalation\" or schedule\".', { required: true }),\n          option('id', 'ID', 'Exactly one of these fields should be defined.'),\n          option('name', 'Name', 'Exactly one of these fields should be defined.'),\n          option('username', 'Username', 'Exactly one of these fields should be defined.'),\n        ],\n      }),\n      httpConfigOption,\n    ],\n  },\n  {\n    name: 'VictorOps',\n    description: 'Send notifications to VictorOps',\n    type: 'victorops',\n    info: '',\n    heading: 'VictorOps settings',\n    options: [\n      option('api_key', 'API key', 'The API key to use when talking to the VictorOps API.'),\n      option('api_url', 'API URL', 'The VictorOps API URL.'),\n      option('routing_key', 'Routing key', 'A key used to map the alert to a team.', { required: true }),\n      option('message_type', 'Message type', 'Describes the behavior of the alert (CRITICAL, WARNING, INFO).'),\n      option('entity_display_name', 'Entity display name', 'Contains summary of the alerted problem.', {\n        placeholder: '{{ template \"victorops.default.entity_display_name\" . }}',\n      }),\n      option('state_message', 'State message', 'Contains long explanation of the alerted problem.', {\n        placeholder: '{{ template \"victorops.default.state_message\" . }}',\n      }),\n      option('monitoring_tool', 'Monitoring tool', 'The monitoring tool the state message is from.', {\n        placeholder: '{{ template \"victorops.default.monitoring_tool\" . }}',\n      }),\n      httpConfigOption,\n    ],\n  },\n  {\n    name: 'Webhook',\n    description: 'Send notifications to a webhook',\n    type: 'webhook',\n    info: '',\n    heading: 'Webhook settings',\n    options: [\n      option('url', 'URL', 'The endpoint to send HTTP POST requests to.', { required: true }),\n      option(\n        'max_alerts',\n        'Max alerts',\n        'The maximum number of alerts to include in a single webhook message. Alerts above this threshold are truncated. When leaving this at its default value of 0, all alerts are included.',\n        { placeholder: '0', validationRule: '(^\\\\d+$|^$)' }\n      ),\n      httpConfigOption,\n    ],\n  },\n  {\n    name: 'Discord',\n    description: 'Sends notifications to Discord',\n    type: 'discord',\n    info: '',\n    heading: 'Discord settings',\n    options: [\n      option('title', 'Title', 'Templated title of the message', {\n        placeholder: '{{ template \"discord.default.title\" . }}',\n      }),\n      option(\n        'message',\n        'Message Content',\n        'Mention a group using @ or a user using <@ID> when notifying in a channel',\n        { placeholder: '{{ template \"discord.default.message\" . }}' }\n      ),\n      option('webhook_url', 'Webhook URL', '', { placeholder: 'Discord webhook URL', required: true }),\n      httpConfigOption,\n    ],\n  },\n  {\n    name: 'Cisco Webex Teams',\n    description: 'Sends notifications to Cisco Webex Teams',\n    type: 'webex',\n    info: '',\n    heading: 'Cisco Webex Teams settings',\n    options: [\n      option('api_url', 'API URL', 'The Webex Teams API URL', {\n        placeholder: 'https://webexapis.com/v1/messages',\n      }),\n      option('room_id', 'Room ID', 'ID of the Webex Teams room where to send the messages', {\n        required: true,\n      }),\n      option('message', 'Message', 'Message template', {\n        placeholder: '{{ template \"webex.default.message\" .}}',\n      }),\n      {\n        ...httpConfigOption,\n        required: true,\n      },\n    ],\n  },\n  {\n    name: 'Telegram',\n    description: 'Sends notifications to Telegram',\n    type: 'telegram',\n    info: '',\n    heading: 'Telegram settings',\n    options: [\n      option('api_url', 'API URL', 'The Telegram API URL', {\n        placeholder: 'https://api.telegram.org',\n      }),\n      option('bot_token', 'Bot token', 'Telegram bot token', {\n        required: true,\n      }),\n      option('chat_id', 'Chat ID', 'ID of the chat where to send the messages', {\n        required: true,\n        setValueAs: (value) => (typeof value === 'string' ? parseInt(value, 10) : 0),\n      }),\n      option('message', 'Message', 'Message template', {\n        placeholder: '{{ template \"webex.default.message\" .}}',\n      }),\n      option('disable_notifications', 'Disable notifications', 'Disable telegram notifications', {\n        element: 'checkbox',\n      }),\n      option('parse_mode', 'Parse mode', 'Parse mode for telegram message', {\n        element: 'select',\n        defaultValue: { label: 'MarkdownV2', value: 'MarkdownV2' },\n        selectOptions: [\n          { label: 'MarkdownV2', value: 'MarkdownV2' },\n          { label: 'Markdown', value: 'Markdown' },\n          { label: 'HTML', value: 'HTML' },\n          { label: 'plain text', value: '' },\n        ],\n      }),\n      httpConfigOption,\n    ],\n  },\n  {\n    name: 'Amazon SNS',\n    description: 'Sends notifications to Amazon SNS',\n    type: 'sns',\n    info: '',\n    heading: 'Amazon SNS settings',\n    options: [\n      option('api_url', 'API URL', 'The Amazon SNS API URL'),\n      option(\n        'sigv4',\n        'SigV4 authentication',\n        \"Configures AWS's Signature Verification 4 signing process to sign requests\",\n        {\n          element: 'subform',\n          subformOptions: [\n            option(\n              'region',\n              'Region',\n              'The AWS region. If blank, the region from the default credentials chain is used'\n            ),\n            option(\n              'access_key',\n              'Access key',\n              'The AWS API access_key. If blank the environment variable \"AWS_ACCESS_KEY_ID\" is used'\n            ),\n            option(\n              'secret_key',\n              'Secret key',\n              'The AWS API secret_key. If blank the environment variable \"AWS_ACCESS_SECRET_ID\" is used'\n            ),\n            option('profile', 'Profile', 'Named AWS profile used to authenticate'),\n            option('role_arn', 'Rule ARN', 'AWS Role ARN, an alternative to using AWS API keys'),\n          ],\n        }\n      ),\n      option(\n        'topic_arn',\n        'SNS topic ARN',\n        \"If you don't specify this value, you must specify a value for the phone_number or target_arn. If you are using a FIFO SNS topic you should set a message group interval longer than 5 minutes to prevent messages with the same group key being deduplicated by the SNS default deduplication window\"\n      ),\n      option(\n        'phone_number',\n        'Phone number',\n        \"Phone number if message is delivered via SMS in E.164 format. If you don't specify this value, you must specify a value for the topic_arn or target_arn\"\n      ),\n      option(\n        'target_arn',\n        'Target ARN',\n        \"The  mobile platform endpoint ARN if message is delivered via mobile notifications. If you don't specify this value, you must specify a value for the topic_arn or phone_number\"\n      ),\n\n      option('subject', 'Subject', 'Subject line when the message is delivered to email endpoints', {\n        placeholder: '{{ template \"sns.default.subject\" .}}',\n      }),\n      option('message', 'Message', 'The message content of the SNS notification', {\n        placeholder: '{{ template \"sns.default.message\" .}}',\n      }),\n      option('attributes', 'Attributes', 'SNS message attributes', {\n        element: 'key_value_map',\n      }),\n      httpConfigOption,\n    ],\n  },\n  {\n    name: 'WeChat',\n    description: 'Sends notifications to WeChat',\n    type: 'wechat',\n    info: '',\n    heading: 'WeChat settings',\n    options: [\n      option('api_url', 'API URL', 'The WeChat API URL'),\n      option('api_secret', 'API Secret', 'The API key to use when talking to the WeChat API'),\n      option('corp_id', 'Corp ID', 'The corp id for authentication'),\n      option('message', 'Message', 'API request data as defined by the WeChat API', {\n        placeholder: '{{ template \"wechat.default.message\" . }}',\n      }),\n      option('message_type', 'Message type', 'Type of the message type', {\n        element: 'select',\n        defaultValue: { label: 'Text', value: 'text' },\n        selectOptions: [\n          { label: 'Text', value: 'text' },\n          { label: 'Markdown', value: 'markdown' },\n        ],\n      }),\n      option('agent_id', 'Agent ID', '', {\n        placeholder: '{{ template \"wechat.default.agent_id\" . }}',\n      }),\n      option('to_user', 'to user', '', {\n        placeholder: '{{ template \"wechat.default.to_user\" . }}',\n      }),\n      option('to_party', 'to party', '', {\n        placeholder: '{{ template \"wechat.default.to_party\" . }}',\n      }),\n      option('to_tag', 'to tag', '', {\n        placeholder: '{{ template \"wechat.default.to_tag\" . }}',\n      }),\n    ],\n  },\n  {\n    name: 'Microsoft Teams',\n    description: 'Sends notifications to Microsoft Teams',\n    type: 'msteams',\n    info: '',\n    heading: 'Microsoft Teams settings',\n    options: [\n      option('webhook_url', 'Webhook URL', 'The incoming webhook URL.'),\n      option('title', 'Title', 'Message title template.', {\n        placeholder: '{{ template \"teams.default.title\" . }}',\n      }),\n      option('text', 'Text', 'Message body template.', {\n        placeholder: '{{ template \"teams.default.text\" . }}',\n      }),\n    ],\n  },\n];\n\nexport const globalConfigOptions: NotificationChannelOption[] = [\n  // email\n  option('smtp_from', 'SMTP from', 'The default SMTP From header field.'),\n  option(\n    'smtp_smarthost',\n    'SMTP smarthost',\n    'The default SMTP smarthost used for sending emails, including port number. Port number usually is 25, or 587 for SMTP over TLS (sometimes referred to as STARTTLS). Example: smtp.example.org:587'\n  ),\n  option('smtp_hello', 'SMTP hello', 'The default hostname to identify to the SMTP server.', {\n    placeholder: 'localhost',\n  }),\n  option(\n    'smtp_auth_username',\n    'SMTP auth username',\n    \"SMTP Auth using CRAM-MD5, LOGIN and PLAIN. If empty, Alertmanager doesn't authenticate to the SMTP server.\"\n  ),\n  option('smtp_auth_password', 'SMTP auth password', 'SMTP Auth using LOGIN and PLAIN.'),\n  option('smtp_auth_identity', 'SMTP auth identity', 'SMTP Auth using PLAIN.'),\n  option('smtp_auth_secret', 'SMTP auth secret', 'SMTP Auth using CRAM-MD5.'),\n  option(\n    'smtp_require_tls',\n    'SMTP require TLS',\n    'The default SMTP TLS requirement. Note that Go does not support unencrypted connections to remote SMTP endpoints.',\n    {\n      element: 'checkbox',\n    }\n  ),\n\n  // slack\n  option('slack_api_url', 'Slack API URL', ''),\n  option('victorops_api_key', 'VictorOps API key', ''),\n  option('victorops_api_url', 'VictorOps API URL', '', {\n    placeholder: 'https://alert.victorops.com/integrations/generic/20131114/alert/',\n  }),\n  option('pagerduty_url', 'PagerDuty URL', 'https://events.pagerduty.com/v2/enqueue'),\n  option('opsgenie_api_key', 'OpsGenie API key', ''),\n  option('opsgenie_api_url', 'OpsGenie API URL', '', { placeholder: 'https://api.opsgenie.com/' }),\n  option('wechat_api_url', 'WeChat API URL', '', { placeholder: 'https://qyapi.weixin.qq.com/cgi-bin/' }),\n  option('wechat_api_secret', 'WeChat API secret', ''),\n  option('wechat_api_corp_id', 'WeChat API corp id', ''),\n  option('webex_api_url', 'Cisco Webex Teams API URL', ''),\n  option('telegram_api_url', 'The Telegram API URL', ''),\n  httpConfigOption,\n  option(\n    'resolve_timeout',\n    'Resolve timeout',\n    'ResolveTimeout is the default value used by alertmanager if the alert does not include EndsAt, after this time passes it can declare the alert as resolved if it has not been updated. This has no impact on alerts from Prometheus, as they always include EndsAt.',\n    {\n      placeholder: '5m',\n    }\n  ),\n];\n","import { NotificationChannelOption } from '../../../../types';\n\nexport function option(\n  propertyName: string,\n  label: string,\n  description: string,\n  rest: Partial<NotificationChannelOption> = {}\n): NotificationChannelOption {\n  return {\n    propertyName,\n    label,\n    description,\n    element: 'input',\n    inputType: '',\n    required: false,\n    secure: false,\n    placeholder: '',\n    validationRule: '',\n    showWhen: { field: '', is: '' },\n    dependsOn: '',\n    ...rest,\n  };\n}\n","import { isArray, omit, pick, isNil, omitBy } from 'lodash';\n\nimport {\n  AlertManagerCortexConfig,\n  AlertmanagerReceiver,\n  GrafanaManagedContactPoint,\n  GrafanaManagedReceiverConfig,\n  Receiver,\n  Route,\n} from 'app/plugins/datasource/alertmanager/types';\nimport { CloudNotifierType, NotifierDTO, NotifierType } from 'app/types';\n\nimport {\n  CloudChannelConfig,\n  CloudChannelMap,\n  CloudChannelValues,\n  GrafanaChannelMap,\n  GrafanaChannelValues,\n  ReceiverFormValues,\n} from '../types/receiver-form';\n\nexport function grafanaReceiverToFormValues(\n  receiver: GrafanaManagedContactPoint,\n  notifiers: NotifierDTO[]\n): [ReceiverFormValues<GrafanaChannelValues>, GrafanaChannelMap] {\n  const channelMap: GrafanaChannelMap = {};\n  // giving each form receiver item a unique id so we can use it to map back to \"original\" items\n  // as well as to use as `key` prop.\n  // @TODO use uid once backend is fixed to provide it. then we can get rid of the GrafanaChannelMap\n  let idCounter = 1;\n  const values = {\n    name: receiver.name,\n    items:\n      receiver.grafana_managed_receiver_configs?.map((channel) => {\n        const id = String(idCounter++);\n        channelMap[id] = channel;\n        const notifier = notifiers.find(({ type }) => type === channel.type);\n        return grafanaChannelConfigToFormChannelValues(id, channel, notifier);\n      }) ?? [],\n  };\n  return [values, channelMap];\n}\n\nexport function cloudReceiverToFormValues(\n  receiver: Receiver,\n  notifiers: NotifierDTO[]\n): [ReceiverFormValues<CloudChannelValues>, CloudChannelMap] {\n  const channelMap: CloudChannelMap = {};\n  // giving each form receiver item a unique id so we can use it to map back to \"original\" items\n  let idCounter = 1;\n  const items: CloudChannelValues[] = Object.entries(receiver)\n    // filter out only config items that are relevant to cloud\n    .filter(([type]) => type.endsWith('_configs') && type !== 'grafana_managed_receiver_configs')\n    // map property names to cloud notifier types by removing the `_config` suffix\n    .map(([type, configs]): [CloudNotifierType, CloudChannelConfig[]] => [\n      type.replace('_configs', '') as CloudNotifierType,\n      configs,\n    ])\n    // convert channel configs to form values\n    .map(([type, configs]) =>\n      configs.map((config) => {\n        const id = String(idCounter++);\n        channelMap[id] = { type, config };\n        const notifier = notifiers.find((notifier) => notifier.type === type);\n        if (!notifier) {\n          throw new Error(`unknown cloud notifier: ${type}`);\n        }\n        return cloudChannelConfigToFormChannelValues(id, type, config);\n      })\n    )\n    .flat();\n  const values = {\n    name: receiver.name,\n    items,\n  };\n  return [values, channelMap];\n}\n\nexport function formValuesToGrafanaReceiver(\n  values: ReceiverFormValues<GrafanaChannelValues>,\n  channelMap: GrafanaChannelMap,\n  defaultChannelValues: GrafanaChannelValues,\n  notifiers: NotifierDTO[]\n): Receiver {\n  return {\n    name: values.name,\n    grafana_managed_receiver_configs: (values.items ?? []).map((channelValues) => {\n      const existing: GrafanaManagedReceiverConfig | undefined = channelMap[channelValues.__id];\n      const notifier = notifiers.find((notifier) => notifier.type === channelValues.type);\n\n      return formChannelValuesToGrafanaChannelConfig(\n        channelValues,\n        defaultChannelValues,\n        values.name,\n        existing,\n        notifier\n      );\n    }),\n  };\n}\n\nexport function formValuesToCloudReceiver(\n  values: ReceiverFormValues<CloudChannelValues>,\n  defaults: CloudChannelValues\n): Receiver {\n  const recv: AlertmanagerReceiver = {\n    name: values.name,\n  };\n  values.items.forEach(({ __id, type, settings, sendResolved }) => {\n    const channel = omitEmptyValues({\n      ...settings,\n      send_resolved: sendResolved ?? defaults.sendResolved,\n    });\n\n    if (!(`${type}_configs` in recv)) {\n      recv[`${type}_configs`] = [channel];\n    } else {\n      recv[`${type}_configs`]?.push(channel);\n    }\n  });\n  return recv;\n}\n\n// will add new receiver, or replace exisitng one\nexport function updateConfigWithReceiver(\n  config: AlertManagerCortexConfig,\n  receiver: Receiver,\n  replaceReceiverName?: string\n): AlertManagerCortexConfig {\n  const oldReceivers = config.alertmanager_config.receivers ?? [];\n\n  // sanity check that name is not duplicated\n  if (receiver.name !== replaceReceiverName && !!oldReceivers.find(({ name }) => name === receiver.name)) {\n    throw new Error(`Duplicate receiver name ${receiver.name}`);\n  }\n\n  // sanity check that existing receiver exists\n  if (replaceReceiverName && !oldReceivers.find(({ name }) => name === replaceReceiverName)) {\n    throw new Error(`Expected receiver ${replaceReceiverName} to exist, but did not find it in the config`);\n  }\n\n  const updated: AlertManagerCortexConfig = {\n    ...config,\n    alertmanager_config: {\n      // @todo rename receiver on routes as necessary\n      ...config.alertmanager_config,\n      receivers: replaceReceiverName\n        ? oldReceivers.map((existingReceiver) =>\n            existingReceiver.name === replaceReceiverName ? receiver : existingReceiver\n          )\n        : [...oldReceivers, receiver],\n    },\n  };\n\n  // if receiver was renamed, rename it in routes as well\n  if (updated.alertmanager_config.route && replaceReceiverName && receiver.name !== replaceReceiverName) {\n    updated.alertmanager_config.route = renameReceiverInRoute(\n      updated.alertmanager_config.route,\n      replaceReceiverName,\n      receiver.name\n    );\n  }\n\n  return updated;\n}\n\nfunction renameReceiverInRoute(route: Route, oldName: string, newName: string) {\n  const updated: Route = {\n    ...route,\n  };\n  if (updated.receiver === oldName) {\n    updated.receiver = newName;\n  }\n  if (updated.routes) {\n    updated.routes = updated.routes.map((route) => renameReceiverInRoute(route, oldName, newName));\n  }\n  return updated;\n}\n\nfunction cloudChannelConfigToFormChannelValues(\n  id: string,\n  type: CloudNotifierType,\n  channel: CloudChannelConfig\n): CloudChannelValues {\n  return {\n    __id: id,\n    type,\n    settings: {\n      ...channel,\n    },\n    secureFields: {},\n    secureSettings: {},\n    sendResolved: channel.send_resolved,\n  };\n}\n\nfunction grafanaChannelConfigToFormChannelValues(\n  id: string,\n  channel: GrafanaManagedReceiverConfig,\n  notifier?: NotifierDTO\n): GrafanaChannelValues {\n  const values: GrafanaChannelValues = {\n    __id: id,\n    type: channel.type as NotifierType,\n    provenance: channel.provenance,\n    secureSettings: {},\n    settings: { ...channel.settings },\n    secureFields: { ...channel.secureFields },\n    disableResolveMessage: channel.disableResolveMessage,\n  };\n\n  // work around https://github.com/grafana/alerting-squad/issues/100\n  notifier?.options.forEach((option) => {\n    if (option.secure && values.secureSettings[option.propertyName]) {\n      delete values.settings[option.propertyName];\n      values.secureFields[option.propertyName] = true;\n    }\n    if (option.secure && values.settings[option.propertyName]) {\n      values.secureSettings[option.propertyName] = values.settings[option.propertyName];\n      delete values.settings[option.propertyName];\n    }\n  });\n\n  return values;\n}\n\nexport function formChannelValuesToGrafanaChannelConfig(\n  values: GrafanaChannelValues,\n  defaults: GrafanaChannelValues,\n  name: string,\n  existing?: GrafanaManagedReceiverConfig,\n  notifier?: NotifierDTO\n): GrafanaManagedReceiverConfig {\n  const channel: GrafanaManagedReceiverConfig = {\n    settings: omitEmptyValues({\n      ...(existing && existing.type === values.type ? existing.settings ?? {} : {}),\n      ...(values.settings ?? {}),\n    }),\n    secureSettings: omitEmptyUnlessExisting(values.secureSettings, existing?.secureFields),\n    type: values.type,\n    name,\n    disableResolveMessage:\n      values.disableResolveMessage ?? existing?.disableResolveMessage ?? defaults.disableResolveMessage,\n  };\n\n  // find all secure field definitions\n  const secureFieldNames: string[] =\n    notifier?.options.filter((option) => option.secure).map((option) => option.propertyName) ?? [];\n\n  // we make sure all fields that are marked as \"secure\" will be moved to \"SecureSettings\" instead of \"settings\"\n  const shouldBeSecure = pick(channel.settings, secureFieldNames);\n  channel.secureSettings = {\n    ...shouldBeSecure,\n    ...channel.secureSettings,\n  };\n\n  // remove the secure ones from the regular settings\n  channel.settings = omit(channel.settings, secureFieldNames);\n\n  if (existing) {\n    channel.uid = existing.uid;\n  }\n\n  return channel;\n}\n\n// null, undefined and '' are deemed unacceptable\nconst isUnacceptableValue = (value: unknown) => isNil(value) || value === '';\n\n// will remove properties that have empty ('', null, undefined) object properties.\n// traverses nested objects and arrays as well. in place, mutates the object.\n// this is needed because form will submit empty string for not filled in fields,\n// but for cloud alertmanager receiver config to use global default value the property must be omitted entirely\n// this isn't a perfect solution though. No way for user to intentionally provide an empty string. Will need rethinking later\nexport function omitEmptyValues<T>(obj: T): T {\n  if (isArray(obj)) {\n    obj.forEach(omitEmptyValues);\n  } else if (typeof obj === 'object' && obj !== null) {\n    Object.entries(obj).forEach(([key, value]) => {\n      if (isUnacceptableValue(value)) {\n        delete (obj as any)[key];\n      } else {\n        omitEmptyValues(value);\n      }\n    });\n  }\n  return obj;\n}\n\n// Will remove empty ('', null, undefined) object properties unless they were previously defined.\n// existing is a map of property names that were previously defined.\nexport function omitEmptyUnlessExisting(settings = {}, existing = {}): Record<string, unknown> {\n  return omitBy(settings, (value, key) => isUnacceptableValue(value) && !(key in existing));\n}\n"],"names":["CollapsibleSection","label","description","children","className","size","styles","getStyles","isCollapsed","setIsCollapsed","toggleCollapse","theme","KeyValueMapInput","value","onChange","readOnly","pairs","setPairs","recordToPairs","emitChange","pairsToRecord","deleteItem","index","newPairs","removed","updatePair","values","old","pair","i","key","Input","e","ActionIcon","Button","record","obj","StringArrayInput","newValue","updateValue","itemValue","v","getReceiverFormFieldStyles","SubformArrayField","option","pathPrefix","errors","defaultValues","path","formAPI","fields","append","remove","useControlledFieldArray","field","itemIndex","OptionField","SubformField","defaultValue","name","watch","_watchValue","show","setShow","subOption","invalid","pathSuffix","error","customValidator","optionPath","Field","OptionInput","id","pathIndex","control","register","unregister","getValues","Checkbox","determineReadOnly","determineRequired","validateOption","InputControl","ref","Select","RadioButtonList","TextArea","validationRule","tooltip","icon","to","target","onClick","tooltipPlacement","rest","ariaLabel","EMPTY_ARRAY","options","defaults","softDelete","reset","setValue","update","updateFn","newItems","items","basicAuthOption","tlsConfigOption","httpConfigOption","cloudNotifierTypes","globalConfigOptions","propertyName","grafanaReceiverToFormValues","receiver","notifiers","channelMap","idCounter","channel","notifier","type","grafanaChannelConfigToFormChannelValues","cloudReceiverToFormValues","configs","config","cloudChannelConfigToFormChannelValues","formValuesToGrafanaReceiver","defaultChannelValues","channelValues","existing","formChannelValuesToGrafanaChannelConfig","formValuesToCloudReceiver","recv","__id","settings","sendResolved","omitEmptyValues","updateConfigWithReceiver","replaceReceiverName","oldReceivers","updated","existingReceiver","renameReceiverInRoute","route","oldName","newName","omitEmptyUnlessExisting","secureFieldNames","shouldBeSecure","isUnacceptableValue"],"sourceRoot":""}