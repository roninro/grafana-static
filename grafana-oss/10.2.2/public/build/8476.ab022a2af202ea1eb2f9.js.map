{"version":3,"file":"8476.ab022a2af202ea1eb2f9.js","mappings":"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","sources":["webpack://grafana/./public/app/features/dashboard/dashgrid/SeriesVisibilityConfigFactory.ts","webpack://grafana/./public/app/features/explore/Graph/exploreGraphStyleUtils.ts","webpack://grafana/./.yarn/__virtual__/react-use-virtual-dd7926f458/0/cache/react-use-npm-17.4.0-0ef4521544-0889da919b.zip/node_modules/react-use/esm/useUpdate.js","webpack://grafana/./.yarn/__virtual__/react-use-virtual-dd7926f458/0/cache/react-use-npm-17.4.0-0ef4521544-0889da919b.zip/node_modules/react-use/esm/misc/hookState.js","webpack://grafana/./.yarn/__virtual__/react-use-virtual-dd7926f458/0/cache/react-use-npm-17.4.0-0ef4521544-0889da919b.zip/node_modules/react-use/esm/useGetSet.js","webpack://grafana/./.yarn/__virtual__/react-use-virtual-dd7926f458/0/cache/react-use-npm-17.4.0-0ef4521544-0889da919b.zip/node_modules/react-use/esm/useCounter.js","webpack://grafana/./public/app/features/explore/Graph/useStructureRev.ts","webpack://grafana/./public/app/features/explore/Graph/ExploreGraph.tsx","webpack://grafana/./public/app/features/explore/Graph/ExploreGraphLabel.tsx","webpack://grafana/./public/app/features/explore/Graph/utils.ts","webpack://grafana/./public/app/features/explore/Graph/GraphContainer.tsx","webpack://grafana/./public/app/features/explore/hooks/useExploreDataLinkPostProcessor.ts"],"sourcesContent":["import {\n  ByNamesMatcherMode,\n  ConfigOverrideRule,\n  DataFrame,\n  DynamicConfigValue,\n  FieldConfigSource,\n  FieldMatcherID,\n  fieldMatchers,\n  FieldType,\n  getFieldDisplayName,\n  isSystemOverrideWithRef,\n  SystemConfigOverrideRule,\n} from '@grafana/data';\nimport { SeriesVisibilityChangeMode } from '@grafana/ui';\n\nconst displayOverrideRef = 'hideSeriesFrom';\nconst isHideSeriesOverride = isSystemOverrideWithRef(displayOverrideRef);\n\nexport function seriesVisibilityConfigFactory(\n  label: string,\n  mode: SeriesVisibilityChangeMode,\n  fieldConfig: FieldConfigSource,\n  data: DataFrame[]\n) {\n  const { overrides } = fieldConfig;\n\n  const displayName = label;\n  const currentIndex = overrides.findIndex(isHideSeriesOverride);\n\n  if (currentIndex < 0) {\n    if (mode === SeriesVisibilityChangeMode.ToggleSelection) {\n      const override = createOverride([displayName, ...getNamesOfHiddenFields(overrides, data)]);\n\n      return {\n        ...fieldConfig,\n        overrides: [...fieldConfig.overrides, override],\n      };\n    }\n\n    const displayNames = getDisplayNames(data, displayName);\n    const override = createOverride(displayNames);\n\n    return {\n      ...fieldConfig,\n      overrides: [...fieldConfig.overrides, override],\n    };\n  }\n\n  const overridesCopy = Array.from(overrides);\n  const [current] = overridesCopy.splice(currentIndex, 1) as SystemConfigOverrideRule[];\n\n  if (mode === SeriesVisibilityChangeMode.ToggleSelection) {\n    let existing = getExistingDisplayNames(current);\n    const nameOfHiddenFields = getNamesOfHiddenFields(overridesCopy, data);\n\n    if (nameOfHiddenFields.length > 0) {\n      existing = existing.filter((el) => nameOfHiddenFields.indexOf(el) < 0);\n    }\n\n    if (existing[0] === displayName && existing.length === 1) {\n      return {\n        ...fieldConfig,\n        overrides: overridesCopy,\n      };\n    }\n\n    const override = createOverride([displayName, ...nameOfHiddenFields]);\n\n    return {\n      ...fieldConfig,\n      overrides: [...overridesCopy, override],\n    };\n  }\n\n  const override = createExtendedOverride(current, displayName);\n\n  if (allFieldsAreExcluded(override, data)) {\n    return {\n      ...fieldConfig,\n      overrides: overridesCopy,\n    };\n  }\n\n  return {\n    ...fieldConfig,\n    overrides: [...overridesCopy, override],\n  };\n}\n\nfunction createOverride(\n  names: string[],\n  mode = ByNamesMatcherMode.exclude,\n  property?: DynamicConfigValue\n): SystemConfigOverrideRule {\n  property = property ?? {\n    id: 'custom.hideFrom',\n    value: {\n      viz: true,\n      legend: false,\n      tooltip: false,\n    },\n  };\n\n  return {\n    __systemRef: displayOverrideRef,\n    matcher: {\n      id: FieldMatcherID.byNames,\n      options: {\n        mode: mode,\n        names: names,\n        prefix: mode === ByNamesMatcherMode.exclude ? 'All except:' : undefined,\n        readOnly: true,\n      },\n    },\n    properties: [\n      {\n        ...property,\n        value: {\n          viz: true,\n          legend: false,\n          tooltip: false,\n        },\n      },\n    ],\n  };\n}\n\nconst createExtendedOverride = (\n  current: SystemConfigOverrideRule,\n  displayName: string,\n  mode = ByNamesMatcherMode.exclude\n): SystemConfigOverrideRule => {\n  const property = current.properties.find((p) => p.id === 'custom.hideFrom');\n  const existing = getExistingDisplayNames(current);\n  const index = existing.findIndex((name) => name === displayName);\n\n  if (index < 0) {\n    existing.push(displayName);\n  } else {\n    existing.splice(index, 1);\n  }\n\n  return createOverride(existing, mode, property);\n};\n\nconst getExistingDisplayNames = (rule: SystemConfigOverrideRule): string[] => {\n  const names = rule.matcher.options?.names;\n  if (!Array.isArray(names)) {\n    return [];\n  }\n  return [...names];\n};\n\nconst allFieldsAreExcluded = (override: SystemConfigOverrideRule, data: DataFrame[]): boolean => {\n  return getExistingDisplayNames(override).length === getDisplayNames(data).length;\n};\n\nconst getDisplayNames = (data: DataFrame[], excludeName?: string): string[] => {\n  const unique = new Set<string>();\n\n  for (const frame of data) {\n    for (const field of frame.fields) {\n      if (field.type !== FieldType.number) {\n        continue;\n      }\n\n      const name = getFieldDisplayName(field, frame, data);\n\n      if (name === excludeName) {\n        continue;\n      }\n\n      unique.add(name);\n    }\n  }\n\n  return Array.from(unique);\n};\n\nconst getNamesOfHiddenFields = (overrides: ConfigOverrideRule[], data: DataFrame[]): string[] => {\n  let names: string[] = [];\n\n  for (const override of overrides) {\n    const property = override.properties.find((p) => p.id === 'custom.hideFrom');\n\n    if (property !== undefined && property.value?.legend === true) {\n      const info = fieldMatchers.get(override.matcher.id);\n      const matcher = info.get(override.matcher.options);\n\n      for (const frame of data) {\n        for (const field of frame.fields) {\n          if (field.type !== FieldType.number) {\n            continue;\n          }\n\n          const name = getFieldDisplayName(field, frame, data);\n\n          if (matcher(field, frame, data)) {\n            names.push(name);\n          }\n        }\n      }\n    }\n  }\n\n  return names;\n};\n","import { produce } from 'immer';\n\nimport { FieldConfigSource, ThresholdsConfig } from '@grafana/data';\nimport { GraphDrawStyle, GraphFieldConfig, GraphThresholdsStyleConfig, StackingMode } from '@grafana/schema';\nimport { ExploreGraphStyle } from 'app/types';\n\nexport type FieldConfig = FieldConfigSource<GraphFieldConfig>;\n\nexport function applyGraphStyle(config: FieldConfig, style: ExploreGraphStyle, maximum?: number): FieldConfig {\n  return produce(config, (draft) => {\n    if (draft.defaults.custom === undefined) {\n      draft.defaults.custom = {};\n    }\n\n    draft.defaults.max = maximum;\n\n    const { custom } = draft.defaults;\n\n    if (custom.stacking === undefined) {\n      custom.stacking = { group: 'A' };\n    }\n\n    switch (style) {\n      case 'lines':\n        custom.drawStyle = GraphDrawStyle.Line;\n        custom.stacking.mode = StackingMode.None;\n        custom.fillOpacity = 0;\n        break;\n      case 'bars':\n        custom.drawStyle = GraphDrawStyle.Bars;\n        custom.stacking.mode = StackingMode.None;\n        custom.fillOpacity = 100;\n        break;\n      case 'points':\n        custom.drawStyle = GraphDrawStyle.Points;\n        custom.stacking.mode = StackingMode.None;\n        custom.fillOpacity = 0;\n        break;\n      case 'stacked_lines':\n        custom.drawStyle = GraphDrawStyle.Line;\n        custom.stacking.mode = StackingMode.Normal;\n        custom.fillOpacity = 100;\n        custom.axisSoftMin = 0;\n        break;\n      case 'stacked_bars':\n        custom.drawStyle = GraphDrawStyle.Bars;\n        custom.stacking.mode = StackingMode.Normal;\n        custom.fillOpacity = 100;\n        custom.axisSoftMin = 0;\n        break;\n      default: {\n        // should never happen\n        // NOTE: casting to `never` will cause typescript\n        // to verify that the switch statement checks every possible\n        // enum-value\n        const invalidValue: never = style;\n        throw new Error(`Invalid graph-style: ${invalidValue}`);\n      }\n    }\n  });\n}\n\nexport function applyThresholdsConfig(\n  config: FieldConfig,\n  thresholdsStyle?: GraphThresholdsStyleConfig,\n  thresholdsConfig?: ThresholdsConfig\n): FieldConfig {\n  return produce(config, (draft) => {\n    draft.defaults.thresholds = thresholdsConfig;\n    draft.defaults.custom = draft.defaults.custom ?? {};\n    draft.defaults.custom.thresholdsStyle = thresholdsStyle;\n  });\n}\n","import { useReducer } from 'react';\nvar updateReducer = function (num) { return (num + 1) % 1000000; };\nexport default function useUpdate() {\n    var _a = useReducer(updateReducer, 0), update = _a[1];\n    return update;\n}\n","export function resolveHookState(nextState, currentState) {\n    if (typeof nextState === 'function') {\n        return nextState.length ? nextState(currentState) : nextState();\n    }\n    return nextState;\n}\n","import { useMemo, useRef } from 'react';\nimport useUpdate from './useUpdate';\nimport { resolveHookState } from './misc/hookState';\nexport default function useGetSet(initialState) {\n    var state = useRef(resolveHookState(initialState));\n    var update = useUpdate();\n    return useMemo(function () { return [\n        function () { return state.current; },\n        function (newState) {\n            state.current = resolveHookState(newState, state.current);\n            update();\n        },\n    ]; }, []);\n}\n","import { useMemo } from 'react';\nimport useGetSet from './useGetSet';\nimport { resolveHookState } from './misc/hookState';\nexport default function useCounter(initialValue, max, min) {\n    if (initialValue === void 0) { initialValue = 0; }\n    if (max === void 0) { max = null; }\n    if (min === void 0) { min = null; }\n    var init = resolveHookState(initialValue);\n    typeof init !== 'number' &&\n        console.error('initialValue has to be a number, got ' + typeof initialValue);\n    if (typeof min === 'number') {\n        init = Math.max(init, min);\n    }\n    else if (min !== null) {\n        console.error('min has to be a number, got ' + typeof min);\n    }\n    if (typeof max === 'number') {\n        init = Math.min(init, max);\n    }\n    else if (max !== null) {\n        console.error('max has to be a number, got ' + typeof max);\n    }\n    var _a = useGetSet(init), get = _a[0], setInternal = _a[1];\n    return [\n        get(),\n        useMemo(function () {\n            var set = function (newState) {\n                var prevState = get();\n                var rState = resolveHookState(newState, prevState);\n                if (prevState !== rState) {\n                    if (typeof min === 'number') {\n                        rState = Math.max(rState, min);\n                    }\n                    if (typeof max === 'number') {\n                        rState = Math.min(rState, max);\n                    }\n                    prevState !== rState && setInternal(rState);\n                }\n            };\n            return {\n                get: get,\n                set: set,\n                inc: function (delta) {\n                    if (delta === void 0) { delta = 1; }\n                    var rDelta = resolveHookState(delta, get());\n                    if (typeof rDelta !== 'number') {\n                        console.error('delta has to be a number or function returning a number, got ' + typeof rDelta);\n                    }\n                    set(function (num) { return num + rDelta; });\n                },\n                dec: function (delta) {\n                    if (delta === void 0) { delta = 1; }\n                    var rDelta = resolveHookState(delta, get());\n                    if (typeof rDelta !== 'number') {\n                        console.error('delta has to be a number or function returning a number, got ' + typeof rDelta);\n                    }\n                    set(function (num) { return num - rDelta; });\n                },\n                reset: function (value) {\n                    if (value === void 0) { value = init; }\n                    var rValue = resolveHookState(value, get());\n                    if (typeof rValue !== 'number') {\n                        console.error('value has to be a number or function returning a number, got ' + typeof rValue);\n                    }\n                    // eslint-disable-next-line react-hooks/exhaustive-deps\n                    init = rValue;\n                    set(rValue);\n                },\n            };\n        }, [init, min, max]),\n    ];\n}\n","import { useMemo } from 'react';\nimport { useCounter, usePrevious } from 'react-use';\n\nimport { DataFrame, compareArrayValues, compareDataFrameStructures } from '@grafana/data';\n\nexport function useStructureRev(frames: DataFrame[]) {\n  const [structureRev, { inc }] = useCounter(1);\n  const previousFrames = usePrevious(frames);\n\n  // We need to increment structureRev when the number of series changes.\n  // the function passed to useMemo runs during rendering, so when we get a different\n  // amount of data, structureRev is incremented before we render it\n  useMemo(() => {\n    if (previousFrames && !compareArrayValues(frames, previousFrames, compareDataFrameStructures)) {\n      inc();\n    }\n  }, [frames, previousFrames, inc]);\n\n  return structureRev;\n}\n","import { identity } from 'lodash';\nimport React, { useEffect, useMemo, useState } from 'react';\n\nimport {\n  AbsoluteTimeRange,\n  applyFieldOverrides,\n  createFieldConfigRegistry,\n  DataFrame,\n  dateTime,\n  FieldColorModeId,\n  FieldConfigSource,\n  getFrameDisplayName,\n  LoadingState,\n  SplitOpen,\n  TimeZone,\n  ThresholdsConfig,\n  DashboardCursorSync,\n  EventBus,\n} from '@grafana/data';\nimport { PanelRenderer } from '@grafana/runtime';\nimport {\n  GraphDrawStyle,\n  LegendDisplayMode,\n  TooltipDisplayMode,\n  SortOrder,\n  GraphThresholdsStyleConfig,\n} from '@grafana/schema';\nimport { PanelContext, PanelContextProvider, SeriesVisibilityChangeMode, useTheme2 } from '@grafana/ui';\nimport { GraphFieldConfig } from 'app/plugins/panel/graph/types';\nimport { defaultGraphConfig, getGraphFieldConfig } from 'app/plugins/panel/timeseries/config';\nimport { Options as TimeSeriesOptions } from 'app/plugins/panel/timeseries/panelcfg.gen';\nimport { ExploreGraphStyle } from 'app/types';\n\nimport { seriesVisibilityConfigFactory } from '../../dashboard/dashgrid/SeriesVisibilityConfigFactory';\nimport { useExploreDataLinkPostProcessor } from '../hooks/useExploreDataLinkPostProcessor';\n\nimport { applyGraphStyle, applyThresholdsConfig } from './exploreGraphStyleUtils';\nimport { useStructureRev } from './useStructureRev';\n\ninterface Props {\n  data: DataFrame[];\n  height: number;\n  width: number;\n  absoluteRange: AbsoluteTimeRange;\n  timeZone: TimeZone;\n  loadingState: LoadingState;\n  annotations?: DataFrame[];\n  onHiddenSeriesChanged?: (hiddenSeries: string[]) => void;\n  tooltipDisplayMode?: TooltipDisplayMode;\n  splitOpenFn: SplitOpen;\n  onChangeTime: (timeRange: AbsoluteTimeRange) => void;\n  graphStyle: ExploreGraphStyle;\n  anchorToZero?: boolean;\n  yAxisMaximum?: number;\n  thresholdsConfig?: ThresholdsConfig;\n  thresholdsStyle?: GraphThresholdsStyleConfig;\n  eventBus: EventBus;\n}\n\nexport function ExploreGraph({\n  data,\n  height,\n  width,\n  timeZone,\n  absoluteRange,\n  onChangeTime,\n  loadingState,\n  annotations,\n  onHiddenSeriesChanged,\n  splitOpenFn,\n  graphStyle,\n  tooltipDisplayMode = TooltipDisplayMode.Single,\n  anchorToZero = false,\n  yAxisMaximum,\n  thresholdsConfig,\n  thresholdsStyle,\n  eventBus,\n}: Props) {\n  const theme = useTheme2();\n\n  const timeRange = useMemo(\n    () => ({\n      from: dateTime(absoluteRange.from),\n      to: dateTime(absoluteRange.to),\n      raw: {\n        from: dateTime(absoluteRange.from),\n        to: dateTime(absoluteRange.to),\n      },\n    }),\n    [absoluteRange.from, absoluteRange.to]\n  );\n\n  const fieldConfigRegistry = useMemo(\n    () => createFieldConfigRegistry(getGraphFieldConfig(defaultGraphConfig), 'Explore'),\n    []\n  );\n\n  const [fieldConfig, setFieldConfig] = useState<FieldConfigSource<GraphFieldConfig>>({\n    defaults: {\n      min: anchorToZero ? 0 : undefined,\n      max: yAxisMaximum || undefined,\n      unit: 'short',\n      color: {\n        mode: FieldColorModeId.PaletteClassic,\n      },\n      custom: {\n        drawStyle: GraphDrawStyle.Line,\n        fillOpacity: 0,\n        pointSize: 5,\n      },\n    },\n    overrides: [],\n  });\n\n  const styledFieldConfig = useMemo(() => {\n    const withGraphStyle = applyGraphStyle(fieldConfig, graphStyle, yAxisMaximum);\n    return applyThresholdsConfig(withGraphStyle, thresholdsStyle, thresholdsConfig);\n  }, [fieldConfig, graphStyle, yAxisMaximum, thresholdsConfig, thresholdsStyle]);\n\n  const dataLinkPostProcessor = useExploreDataLinkPostProcessor(splitOpenFn, timeRange);\n\n  const dataWithConfig = useMemo(() => {\n    return applyFieldOverrides({\n      fieldConfig: styledFieldConfig,\n      data,\n      timeZone,\n      replaceVariables: (value) => value, // We don't need proper replace here as it is only used in getLinks and we use getFieldLinks\n      theme,\n      fieldConfigRegistry,\n      dataLinkPostProcessor,\n    });\n  }, [fieldConfigRegistry, data, timeZone, theme, styledFieldConfig, dataLinkPostProcessor]);\n\n  const annotationsWithConfig = useMemo(() => {\n    return applyFieldOverrides({\n      fieldConfig: {\n        defaults: {},\n        overrides: [],\n      },\n      data: annotations,\n      timeZone,\n      replaceVariables: (value) => value,\n      theme,\n      dataLinkPostProcessor,\n    });\n  }, [annotations, timeZone, theme, dataLinkPostProcessor]);\n\n  const structureRev = useStructureRev(dataWithConfig);\n\n  useEffect(() => {\n    if (onHiddenSeriesChanged) {\n      const hiddenFrames: string[] = [];\n      dataWithConfig.forEach((frame) => {\n        const allFieldsHidden = frame.fields.map((field) => field.config?.custom?.hideFrom?.viz).every(identity);\n        if (allFieldsHidden) {\n          hiddenFrames.push(getFrameDisplayName(frame));\n        }\n      });\n      onHiddenSeriesChanged(hiddenFrames);\n    }\n  }, [dataWithConfig, onHiddenSeriesChanged]);\n\n  const panelContext: PanelContext = {\n    eventsScope: 'explore',\n    eventBus,\n    sync: () => DashboardCursorSync.Crosshair,\n    onToggleSeriesVisibility(label: string, mode: SeriesVisibilityChangeMode) {\n      setFieldConfig(seriesVisibilityConfigFactory(label, mode, fieldConfig, data));\n    },\n    dataLinkPostProcessor,\n  };\n\n  const panelOptions: TimeSeriesOptions = useMemo(\n    () => ({\n      tooltip: { mode: tooltipDisplayMode, sort: SortOrder.None },\n      legend: {\n        displayMode: LegendDisplayMode.List,\n        showLegend: true,\n        placement: 'bottom',\n        calcs: [],\n      },\n    }),\n    [tooltipDisplayMode]\n  );\n\n  return (\n    <PanelContextProvider value={panelContext}>\n      <PanelRenderer\n        data={{\n          series: dataWithConfig,\n          timeRange,\n          state: loadingState,\n          annotations: annotationsWithConfig,\n          structureRev,\n        }}\n        pluginId=\"timeseries\"\n        title=\"\"\n        width={width}\n        height={height}\n        onChangeTimeRange={onChangeTime}\n        timeZone={timeZone}\n        options={panelOptions}\n      />\n    </PanelContextProvider>\n  );\n}\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { RadioButtonGroup } from '@grafana/ui';\nimport { EXPLORE_GRAPH_STYLES, ExploreGraphStyle } from 'app/types';\n\nconst ALL_GRAPH_STYLE_OPTIONS: Array<SelectableValue<ExploreGraphStyle>> = EXPLORE_GRAPH_STYLES.map((style) => ({\n  value: style,\n  // capital-case it and switch `_` to ` `\n  label: style[0].toUpperCase() + style.slice(1).replace(/_/, ' '),\n}));\n\ntype Props = {\n  graphStyle: ExploreGraphStyle;\n  onChangeGraphStyle: (style: ExploreGraphStyle) => void;\n};\n\nexport function ExploreGraphLabel(props: Props) {\n  const { graphStyle, onChangeGraphStyle } = props;\n  return (\n    <RadioButtonGroup size=\"sm\" options={ALL_GRAPH_STYLE_OPTIONS} value={graphStyle} onChange={onChangeGraphStyle} />\n  );\n}\n","import store from 'app/core/store';\nimport { ExploreGraphStyle, EXPLORE_GRAPH_STYLES } from 'app/types';\n\nconst GRAPH_STYLE_KEY = 'grafana.explore.style.graph';\nexport const storeGraphStyle = (graphStyle: string): void => {\n  store.set(GRAPH_STYLE_KEY, graphStyle);\n};\n\nexport const loadGraphStyle = (): ExploreGraphStyle => {\n  return toGraphStyle(store.get(GRAPH_STYLE_KEY));\n};\n\nconst DEFAULT_GRAPH_STYLE: ExploreGraphStyle = 'lines';\n// we use this function to take any kind of data we loaded\n// from an external source (URL, localStorage, whatever),\n// and extract the graph-style from it, or return the default\n// graph-style if we are not able to do that.\n// it is important that this function is able to take any form of data,\n// (be it objects, or arrays, or booleans or whatever),\n// and produce a best-effort graphStyle.\n// note that typescript makes sure we make no mistake in this function.\n// we do not rely on ` as ` or ` any `.\nexport const toGraphStyle = (data: unknown): ExploreGraphStyle => {\n  const found = EXPLORE_GRAPH_STYLES.find((v) => v === data);\n  return found ?? DEFAULT_GRAPH_STYLE;\n};\n","import { css } from '@emotion/css';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { useToggle } from 'react-use';\n\nimport {\n  DataFrame,\n  EventBus,\n  AbsoluteTimeRange,\n  TimeZone,\n  SplitOpen,\n  LoadingState,\n  ThresholdsConfig,\n  GrafanaTheme2,\n} from '@grafana/data';\nimport {\n  GraphThresholdsStyleConfig,\n  PanelChrome,\n  PanelChromeProps,\n  Icon,\n  Button,\n  useStyles2,\n  Tooltip,\n} from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\nimport { ExploreGraphStyle } from 'app/types';\n\nimport { storeGraphStyle } from '../state/utils';\n\nimport { ExploreGraph } from './ExploreGraph';\nimport { ExploreGraphLabel } from './ExploreGraphLabel';\nimport { loadGraphStyle } from './utils';\n\nconst MAX_NUMBER_OF_TIME_SERIES = 20;\n\ninterface Props extends Pick<PanelChromeProps, 'statusMessage'> {\n  width: number;\n  height: number;\n  data: DataFrame[];\n  annotations?: DataFrame[];\n  eventBus: EventBus;\n  absoluteRange: AbsoluteTimeRange;\n  timeZone: TimeZone;\n  onChangeTime: (absoluteRange: AbsoluteTimeRange) => void;\n  splitOpenFn: SplitOpen;\n  loadingState: LoadingState;\n  thresholdsConfig?: ThresholdsConfig;\n  thresholdsStyle?: GraphThresholdsStyleConfig;\n}\n\nexport const GraphContainer = ({\n  data,\n  eventBus,\n  height,\n  width,\n  absoluteRange,\n  timeZone,\n  annotations,\n  onChangeTime,\n  splitOpenFn,\n  thresholdsConfig,\n  thresholdsStyle,\n  loadingState,\n  statusMessage,\n}: Props) => {\n  const [showAllSeries, toggleShowAllSeries] = useToggle(false);\n  const [graphStyle, setGraphStyle] = useState(loadGraphStyle);\n  const styles = useStyles2(getStyles);\n\n  const onGraphStyleChange = useCallback((graphStyle: ExploreGraphStyle) => {\n    storeGraphStyle(graphStyle);\n    setGraphStyle(graphStyle);\n  }, []);\n\n  const slicedData = useMemo(() => {\n    return showAllSeries ? data : data.slice(0, MAX_NUMBER_OF_TIME_SERIES);\n  }, [data, showAllSeries]);\n\n  return (\n    <PanelChrome\n      title={t('graph.container.title', 'Graph')}\n      titleItems={[\n        !showAllSeries && MAX_NUMBER_OF_TIME_SERIES < data.length && (\n          <div key=\"disclaimer\" className={styles.timeSeriesDisclaimer}>\n            <span className={styles.warningMessage}>\n              <Icon name=\"exclamation-triangle\" aria-hidden=\"true\" />\n              <Trans i18nKey={'graph.container.show-only-series'}>\n                Showing only {{ MAX_NUMBER_OF_TIME_SERIES }} series\n              </Trans>\n            </span>\n            <Tooltip\n              content={t(\n                'graph.container.content',\n                'Rendering too many series in a single panel may impact performance and make data harder to read. Consider refining your queries.'\n              )}\n            >\n              <Button variant=\"secondary\" size=\"sm\" onClick={toggleShowAllSeries}>\n                <Trans i18nKey={'graph.container.show-all-series'}>Show all {{ length: data.length }}</Trans>\n              </Button>\n            </Tooltip>\n          </div>\n        ),\n      ].filter(Boolean)}\n      width={width}\n      height={height}\n      loadingState={loadingState}\n      statusMessage={statusMessage}\n      actions={<ExploreGraphLabel graphStyle={graphStyle} onChangeGraphStyle={onGraphStyleChange} />}\n    >\n      {(innerWidth, innerHeight) => (\n        <ExploreGraph\n          graphStyle={graphStyle}\n          data={slicedData}\n          height={innerHeight}\n          width={innerWidth}\n          absoluteRange={absoluteRange}\n          onChangeTime={onChangeTime}\n          timeZone={timeZone}\n          annotations={annotations}\n          splitOpenFn={splitOpenFn}\n          loadingState={loadingState}\n          thresholdsConfig={thresholdsConfig}\n          thresholdsStyle={thresholdsStyle}\n          eventBus={eventBus}\n        />\n      )}\n    </PanelChrome>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  timeSeriesDisclaimer: css({\n    label: 'time-series-disclaimer',\n    display: 'flex',\n    alignItems: 'center',\n    gap: theme.spacing(1),\n  }),\n  warningMessage: css({\n    display: 'flex',\n    alignItems: 'center',\n    gap: theme.spacing(0.5),\n    color: theme.colors.warning.main,\n    fontSize: theme.typography.bodySmall.fontSize,\n  }),\n});\n","import { useMemo } from 'react';\n\nimport { SplitOpen, TimeRange } from '@grafana/data';\n\nimport { exploreDataLinkPostProcessorFactory } from '../utils/links';\n\nexport const useExploreDataLinkPostProcessor = (splitOpenFn: SplitOpen, timeRange: TimeRange) => {\n  return useMemo(() => {\n    return exploreDataLinkPostProcessorFactory(splitOpenFn, timeRange);\n  }, [splitOpenFn, timeRange]);\n};\n"],"names":["displayOverrideRef","isHideSeriesOverride","seriesVisibilityConfigFactory","label","mode","fieldConfig","data","overrides","displayName","currentIndex","override","createOverride","getNamesOfHiddenFields","displayNames","getDisplayNames","overridesCopy","current","existing","getExistingDisplayNames","nameOfHiddenFields","el","createExtendedOverride","allFieldsAreExcluded","names","property","p","index","name","rule","excludeName","unique","frame","field","matcher","applyGraphStyle","config","style","maximum","draft","custom","invalidValue","applyThresholdsConfig","thresholdsStyle","thresholdsConfig","updateReducer","num","useUpdate","_a","update","resolveHookState","nextState","currentState","useGetSet","initialState","state","newState","useCounter","initialValue","max","min","init","get","setInternal","set","prevState","rState","delta","rDelta","value","rValue","useStructureRev","frames","structureRev","inc","previousFrames","usePrevious","ExploreGraph","height","width","timeZone","absoluteRange","onChangeTime","loadingState","annotations","onHiddenSeriesChanged","splitOpenFn","graphStyle","tooltipDisplayMode","anchorToZero","yAxisMaximum","eventBus","theme","timeRange","fieldConfigRegistry","setFieldConfig","styledFieldConfig","withGraphStyle","dataLinkPostProcessor","useExploreDataLinkPostProcessor","dataWithConfig","annotationsWithConfig","hiddenFrames","panelContext","panelOptions","PanelContext","PanelRenderer","ALL_GRAPH_STYLE_OPTIONS","ExploreGraphLabel","props","onChangeGraphStyle","RadioButtonGroup","GRAPH_STYLE_KEY","storeGraphStyle","loadGraphStyle","toGraphStyle","DEFAULT_GRAPH_STYLE","v","MAX_NUMBER_OF_TIME_SERIES","GraphContainer","statusMessage","showAllSeries","toggleShowAllSeries","useToggle","setGraphStyle","styles","getStyles","onGraphStyleChange","slicedData","PanelChrome","Icon","Tooltip","Button","innerWidth","innerHeight"],"sourceRoot":""}