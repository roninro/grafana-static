{"version":3,"file":"ListPublicDashboardPage.68cac7cb7c6c72e9062e.js","mappings":"4XAmCA,MAAMA,EAAsB,CAAC,CAAE,GAAAC,CAAG,IAA2C,CAC3E,MAAMC,KAAS,MAAWC,CAAS,EAC7BC,KAAQ,MAAU,EAClBC,KAAWC,EAAA,GAAS,eAAeF,EAAM,YAAY,OAAO,OAAO,EAEnE,CAACG,EAAQ,CAAE,UAAWC,CAAgB,CAAC,KAAI,MAAiC,EAE5EC,EAAY,KAAa,MAAM,iBAC/BC,EAAsB,aAAW,cAAc,sBAAoB,qBAAqB,EACxFC,EAAa,CAACV,EAAG,aAEjBW,EAAgB,CAACX,EAAiCY,IAAsB,CAC5E,MAAMC,EAAM,CACV,UAAW,CAAE,IAAKb,EAAG,YAAa,EAClC,QAAS,CACP,IAAKA,EAAG,IACR,UAAW,CAACY,CACd,CACF,EAEAN,EAAOO,CAAG,CACZ,EAEMC,KAAc,WAAQ,IAAOV,EAAWW,EAAA,EAAK,QAAUA,EAAA,EAAK,iBAAmB,CAACX,CAAQ,CAAC,EAE/F,OACE,gBAACW,EAAA,EAAI,CAAC,UAAWd,EAAO,KAAM,KAAOS,EAAuC,OAA1B,MAAMV,EAAG,cAAiB,EAC1E,gBAACe,EAAA,EAAK,QAAL,CAAa,UAAWd,EAAO,SAC5BS,EAGA,gBAACM,EAAA,EAAO,CAAC,QAAQ,gDAAgD,UAAU,OACzE,gBAAC,OAAI,UAAWf,EAAO,eACrB,gBAAC,YAAK,2BAAyB,EAC/B,gBAACgB,EAAA,EAAI,CAAC,KAAK,aAAc,EAC3B,CACF,EAPA,gBAAC,YAAMjB,EAAG,KAAM,CASpB,EACA,gBAACc,EAAA,CAAY,UAAWb,EAAO,SAC7B,gBAAC,OAAI,UAAWA,EAAO,aACrB,gBAACiB,EAAA,GACC,MAAO,CAAClB,EAAG,UACX,MAAM,gBACN,SAAUO,EACV,SAAWY,GAAM,IACf,MAAkB,2CAA4C,CAC5D,OAAQA,EAAE,cAAc,QAAU,UAAY,QAChD,CAAC,EACDR,EAAcX,EAAImB,EAAE,cAAc,OAAO,CAC3C,EACA,cAAaX,EAAU,SAAS,YAClC,EACA,gBAAC,YAAK,eAAa,CACrB,EACA,gBAAC,MACC,SAAUE,EACV,KAAK,OACL,KAAK,oBACL,QAAQ,YACR,OAAO,SACP,MAAOP,EAAM,OAAO,QAAQ,KAC5B,QAAM,MAA2BH,EAAG,WAAW,EAC/C,IAAI,uBACJ,QAAQ,wBACR,cAAaQ,EAAU,SAAS,WAClC,EACA,gBAAC,MACC,SAAUE,EACV,KAAK,OACL,KAAK,MACL,QAAQ,YACR,MAAOP,EAAM,OAAO,QAAQ,KAC5B,QAAM,MAAiCH,EAAG,YAAY,EACtD,IAAI,8BACJ,QAAQ,6BACR,cAAaQ,EAAU,SAAS,aAClC,EACCC,GACC,gBAACW,EAAA,GACC,KAAK,OACL,KAAK,YACL,QAAQ,YACR,gBAAiBpB,EACjB,QAAQ,8BACR,OAAQ,gBAACqB,EAAA,EAAO,IAAC,EACjB,cAAab,EAAU,SAAS,eAClC,CAEJ,CACF,CAEJ,EAEac,EAA2B,IAAM,CAC5C,KAAM,CAACC,EAAMC,CAAO,KAAI,YAAS,CAAC,EAE5BvB,KAAS,MAAWC,CAAS,EAC7B,CAAE,KAAMuB,EAA2B,UAAAC,EAAW,WAAAC,EAAY,QAAAC,CAAQ,KAAI,MAA6BL,CAAI,EAE7G,OACE,gBAACM,EAAA,EAAI,CAAC,MAAM,oBAAoB,QAASF,GAAc,gBAACN,EAAA,EAAO,IAAC,GAC9D,gBAACQ,EAAA,EAAK,SAAL,CAAc,UAAAH,CAAA,EACZ,CAACA,GAAa,CAACE,GAAW,CAAC,CAACH,GAC3B,gBAAC,WACC,gBAAC,MAAG,UAAWxB,EAAO,MACnBwB,EAA0B,iBAAiB,IAAKzB,GAC/C,gBAAC,MAAG,IAAKA,EAAG,KACV,gBAACD,EAAA,CAAoB,GAAAC,CAAA,CAAQ,CAC/B,CACD,CACH,EACA,gBAAC,KAAe,CAAC,QAAQ,YACvB,gBAAC8B,EAAA,GACC,WAAYN,EACZ,YAAaC,EAA0B,KACvC,cAAeA,EAA0B,WACzC,mBAAkB,GACpB,CACF,CACF,CAEJ,CACF,CAEJ,EAEMvB,EAAaC,IAA0B,CAC3C,QAAM;AAAA;AAAA,qBAEaA,EAAM,QAAQ,CAAC;AAAA,IAElC,QAAM;AAAA,MACFA,EAAM,YAAY,GAAG,IAAI;AAAA;AAAA;AAAA,IAI7B,WAAS;AAAA;AAAA;AAAA,WAGAA,EAAM,QAAQ,CAAC;AAAA;AAAA,IAGxB,iBAAe;AAAA;AAAA;AAAA,WAGNA,EAAM,QAAQ,CAAC;AAAA,IAExB,WAAS;AAAA;AAAA;AAAA;AAAA;AAAA,WAKAA,EAAM,QAAQ,EAAG;AAAA,MACtBA,EAAM,YAAY,GAAG,IAAI;AAAA,aAClBA,EAAM,QAAQ,CAAC;AAAA;AAAA,IAG1B,eAAa;AAAA;AAAA,WAEJA,EAAM,QAAQ,CAAC;AAAA;AAAA,iBAETA,EAAM,WAAW,UAAU;AAAA;AAAA;AAAA;AAAA,MAItCA,EAAM,YAAY,GAAG,IAAI;AAAA,uBACRA,EAAM,QAAQ,CAAC;AAAA;AAAA,GAGtC,GCzMa4B,EAA0B,CAAC,CAAC,IAChC,gBAACT,EAAwB,IAAC,EAGnC,EAAeS,C","sources":["webpack://grafana/./public/app/features/manage-dashboards/components/PublicDashboardListTable/PublicDashboardListTable.tsx","webpack://grafana/./public/app/features/manage-dashboards/PublicDashboardListPage.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useMemo, useState } from 'react';\nimport { useMedia } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors/src';\nimport { reportInteraction } from '@grafana/runtime';\nimport {\n  LinkButton,\n  useStyles2,\n  Spinner,\n  Card,\n  useTheme2,\n  Tooltip,\n  Icon,\n  Switch,\n  Pagination,\n  HorizontalGroup,\n} from '@grafana/ui/src';\nimport { Page } from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport {\n  useListPublicDashboardsQuery,\n  useUpdatePublicDashboardMutation,\n} from 'app/features/dashboard/api/publicDashboardApi';\nimport {\n  generatePublicDashboardConfigUrl,\n  generatePublicDashboardUrl,\n} from 'app/features/dashboard/components/ShareModal/SharePublicDashboard/SharePublicDashboardUtils';\nimport { AccessControlAction } from 'app/types';\n\nimport { PublicDashboardListResponse } from '../../types';\n\nimport { DeletePublicDashboardButton } from './DeletePublicDashboardButton';\n\nconst PublicDashboardCard = ({ pd }: { pd: PublicDashboardListResponse }) => {\n  const styles = useStyles2(getStyles);\n  const theme = useTheme2();\n  const isMobile = useMedia(`(max-width: ${theme.breakpoints.values.sm}px)`);\n\n  const [update, { isLoading: isUpdateLoading }] = useUpdatePublicDashboardMutation();\n\n  const selectors = e2eSelectors.pages.PublicDashboards;\n  const hasWritePermissions = contextSrv.hasPermission(AccessControlAction.DashboardsPublicWrite);\n  const isOrphaned = !pd.dashboardUid;\n\n  const onTogglePause = (pd: PublicDashboardListResponse, isPaused: boolean) => {\n    const req = {\n      dashboard: { uid: pd.dashboardUid },\n      payload: {\n        uid: pd.uid,\n        isEnabled: !isPaused,\n      },\n    };\n\n    update(req);\n  };\n\n  const CardActions = useMemo(() => (isMobile ? Card.Actions : Card.SecondaryActions), [isMobile]);\n\n  return (\n    <Card className={styles.card} href={!isOrphaned ? `/d/${pd.dashboardUid}` : undefined}>\n      <Card.Heading className={styles.heading}>\n        {!isOrphaned ? (\n          <span>{pd.title}</span>\n        ) : (\n          <Tooltip content=\"The linked dashboard has already been deleted\" placement=\"top\">\n            <div className={styles.orphanedTitle}>\n              <span>Orphaned public dashboard</span>\n              <Icon name=\"info-circle\" />\n            </div>\n          </Tooltip>\n        )}\n      </Card.Heading>\n      <CardActions className={styles.actions}>\n        <div className={styles.pauseSwitch}>\n          <Switch\n            value={!pd.isEnabled}\n            label=\"Pause sharing\"\n            disabled={isUpdateLoading}\n            onChange={(e) => {\n              reportInteraction('grafana_dashboards_public_enable_clicked', {\n                action: e.currentTarget.checked ? 'disable' : 'enable',\n              });\n              onTogglePause(pd, e.currentTarget.checked);\n            }}\n            data-testid={selectors.ListItem.pauseSwitch}\n          />\n          <span>Pause sharing</span>\n        </div>\n        <LinkButton\n          disabled={isOrphaned}\n          fill=\"text\"\n          icon=\"external-link-alt\"\n          variant=\"secondary\"\n          target=\"_blank\"\n          color={theme.colors.warning.text}\n          href={generatePublicDashboardUrl(pd.accessToken)}\n          key=\"public-dashboard-url\"\n          tooltip=\"View public dashboard\"\n          data-testid={selectors.ListItem.linkButton}\n        />\n        <LinkButton\n          disabled={isOrphaned}\n          fill=\"text\"\n          icon=\"cog\"\n          variant=\"secondary\"\n          color={theme.colors.warning.text}\n          href={generatePublicDashboardConfigUrl(pd.dashboardUid)}\n          key=\"public-dashboard-config-url\"\n          tooltip=\"Configure public dashboard\"\n          data-testid={selectors.ListItem.configButton}\n        />\n        {hasWritePermissions && (\n          <DeletePublicDashboardButton\n            fill=\"text\"\n            icon=\"trash-alt\"\n            variant=\"secondary\"\n            publicDashboard={pd}\n            tooltip=\"Revoke public dashboard url\"\n            loader={<Spinner />}\n            data-testid={selectors.ListItem.trashcanButton}\n          />\n        )}\n      </CardActions>\n    </Card>\n  );\n};\n\nexport const PublicDashboardListTable = () => {\n  const [page, setPage] = useState(1);\n\n  const styles = useStyles2(getStyles);\n  const { data: paginatedPublicDashboards, isLoading, isFetching, isError } = useListPublicDashboardsQuery(page);\n\n  return (\n    <Page navId=\"dashboards/public\" actions={isFetching && <Spinner />}>\n      <Page.Contents isLoading={isLoading}>\n        {!isLoading && !isError && !!paginatedPublicDashboards && (\n          <div>\n            <ul className={styles.list}>\n              {paginatedPublicDashboards.publicDashboards.map((pd: PublicDashboardListResponse) => (\n                <li key={pd.uid}>\n                  <PublicDashboardCard pd={pd} />\n                </li>\n              ))}\n            </ul>\n            <HorizontalGroup justify=\"flex-end\">\n              <Pagination\n                onNavigate={setPage}\n                currentPage={paginatedPublicDashboards.page}\n                numberOfPages={paginatedPublicDashboards.totalPages}\n                hideWhenSinglePage\n              />\n            </HorizontalGroup>\n          </div>\n        )}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  list: css`\n    list-style-type: none;\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  card: css`\n    ${theme.breakpoints.up('sm')} {\n      display: flex;\n    }\n  `,\n  heading: css`\n    display: flex;\n    align-items: center;\n    gap: ${theme.spacing(1)};\n    flex: 1;\n  `,\n  orphanedTitle: css`\n    display: flex;\n    align-items: center;\n    gap: ${theme.spacing(1)};\n  `,\n  actions: css`\n    display: flex;\n    align-items: center;\n    position: relative;\n\n    gap: ${theme.spacing(0.5)};\n    ${theme.breakpoints.up('sm')} {\n      gap: ${theme.spacing(1)};\n    }\n  `,\n  pauseSwitch: css`\n    display: flex;\n    gap: ${theme.spacing(1)};\n    align-items: center;\n    font-size: ${theme.typography.bodySmall.fontSize};\n    margin-bottom: 0;\n    flex: 1;\n\n    ${theme.breakpoints.up('sm')} {\n      padding-right: ${theme.spacing(2)};\n    }\n  `,\n});\n","import React from 'react';\n\nimport { PublicDashboardListTable } from './components/PublicDashboardListTable/PublicDashboardListTable';\n\nexport const ListPublicDashboardPage = ({}) => {\n  return <PublicDashboardListTable />;\n};\n\nexport default ListPublicDashboardPage;\n"],"names":["PublicDashboardCard","pd","styles","getStyles","theme","isMobile","useMedia","update","isUpdateLoading","selectors","hasWritePermissions","isOrphaned","onTogglePause","isPaused","req","CardActions","Card","Tooltip","Icon","Switch","e","DeletePublicDashboardButton","Spinner","PublicDashboardListTable","page","setPage","paginatedPublicDashboards","isLoading","isFetching","isError","Page","Pagination","ListPublicDashboardPage"],"sourceRoot":""}