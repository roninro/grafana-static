{"version":3,"file":"9822.efee21be9cbc701ba5b1.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/GrafanaAlertmanagerDeliveryWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/ContactPoints.v1.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/DuplicateTemplateView.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/EditReceiverView.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/EditTemplateView.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/GlobalConfigForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/NewReceiverView.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/NewTemplateView.tsx","webpack://grafana/./public/app/features/alerting/unified/utils/duplicate.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport { Alert, useStyles2 } from '@grafana/ui/src';\n\nimport { AlertmanagerChoice } from '../../../../plugins/datasource/alertmanager/types';\nimport { alertmanagerApi } from '../api/alertmanagerApi';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\ninterface GrafanaAlertmanagerDeliveryWarningProps {\n  currentAlertmanager: string;\n}\n\nexport function GrafanaAlertmanagerDeliveryWarning({ currentAlertmanager }: GrafanaAlertmanagerDeliveryWarningProps) {\n  const styles = useStyles2(getStyles);\n\n  const { useGetAlertmanagerChoiceStatusQuery } = alertmanagerApi;\n  const { currentData: amChoiceStatus } = useGetAlertmanagerChoiceStatusQuery();\n\n  const viewingInternalAM = currentAlertmanager === GRAFANA_RULES_SOURCE_NAME;\n\n  const interactsWithExternalAMs =\n    amChoiceStatus?.alertmanagersChoice &&\n    [AlertmanagerChoice.External, AlertmanagerChoice.All].includes(amChoiceStatus?.alertmanagersChoice);\n\n  if (!interactsWithExternalAMs || !viewingInternalAM) {\n    return null;\n  }\n\n  const hasActiveExternalAMs = amChoiceStatus.numExternalAlertmanagers > 0;\n\n  if (amChoiceStatus.alertmanagersChoice === AlertmanagerChoice.External) {\n    return (\n      <Alert title=\"Grafana alerts are not delivered to Grafana Alertmanager\">\n        Grafana is configured to send alerts to external Alertmanagers only. Changing Grafana Alertmanager configuration\n        will not affect delivery of your alerts.\n        <div className={styles.adminHint}>\n          To change your Alertmanager setup, go to the Alerting Admin page. If you do not have access, contact your\n          Administrator.\n        </div>\n      </Alert>\n    );\n  }\n\n  if (amChoiceStatus.alertmanagersChoice === AlertmanagerChoice.All && hasActiveExternalAMs) {\n    return (\n      <Alert title=\"You have additional Alertmanagers to configure\" severity=\"warning\">\n        Ensure you make configuration changes in the correct Alertmanagers; both internal and external. Changing one\n        will not affect the others.\n        <div className={styles.adminHint}>\n          To change your Alertmanager setup, go to the Alerting Admin page. If you do not have access, contact your\n          Administrator.\n        </div>\n      </Alert>\n    );\n  }\n\n  return null;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  adminHint: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n    font-weight: ${theme.typography.bodySmall.fontWeight};\n  `,\n});\n","import React, { useEffect } from 'react';\nimport { Route, RouteChildrenProps, Switch } from 'react-router-dom';\n\nimport { Alert, LoadingPlaceholder } from '@grafana/ui';\nimport { useDispatch } from 'app/types';\n\nimport { useAlertmanagerConfig } from '../../hooks/useAlertmanagerConfig';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { useAlertmanager } from '../../state/AlertmanagerContext';\nimport { fetchGrafanaNotifiersAction } from '../../state/actions';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { GrafanaAlertmanagerDeliveryWarning } from '../GrafanaAlertmanagerDeliveryWarning';\nimport { DuplicateTemplateView } from '../receivers/DuplicateTemplateView';\nimport { EditReceiverView } from '../receivers/EditReceiverView';\nimport { EditTemplateView } from '../receivers/EditTemplateView';\nimport { GlobalConfigForm } from '../receivers/GlobalConfigForm';\nimport { NewReceiverView } from '../receivers/NewReceiverView';\nimport { NewTemplateView } from '../receivers/NewTemplateView';\nimport { ReceiversAndTemplatesView } from '../receivers/ReceiversAndTemplatesView';\n\nexport interface NotificationErrorProps {\n  errorCount: number;\n}\n\nconst Receivers = () => {\n  const { selectedAlertmanager: alertManagerSourceName } = useAlertmanager();\n  const dispatch = useDispatch();\n  const { currentData: config, isLoading: loading, error } = useAlertmanagerConfig(alertManagerSourceName);\n\n  const receiverTypes = useUnifiedAlertingSelector((state) => state.grafanaNotifiers);\n\n  useEffect(() => {\n    if (\n      alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME &&\n      !(receiverTypes.result || receiverTypes.loading || receiverTypes.error)\n    ) {\n      dispatch(fetchGrafanaNotifiersAction());\n    }\n  }, [alertManagerSourceName, dispatch, receiverTypes]);\n\n  if (!alertManagerSourceName) {\n    return null;\n  }\n\n  return (\n    <>\n      {error && !loading && (\n        <Alert severity=\"error\" title=\"Error loading Alertmanager config\">\n          {error.message || 'Unknown error.'}\n        </Alert>\n      )}\n      <GrafanaAlertmanagerDeliveryWarning currentAlertmanager={alertManagerSourceName} />\n      {loading && !config && <LoadingPlaceholder text=\"loading configuration...\" />}\n      {config && !error && (\n        <Switch>\n          <Route exact={true} path=\"/alerting/notifications\">\n            <ReceiversAndTemplatesView config={config} alertManagerName={alertManagerSourceName} />\n          </Route>\n          <Route exact={true} path=\"/alerting/notifications/templates/new\">\n            <NewTemplateView config={config} alertManagerSourceName={alertManagerSourceName} />\n          </Route>\n          <Route exact={true} path=\"/alerting/notifications/templates/:name/duplicate\">\n            {({ match }: RouteChildrenProps<{ name: string }>) =>\n              match?.params.name && (\n                <DuplicateTemplateView\n                  alertManagerSourceName={alertManagerSourceName}\n                  config={config}\n                  templateName={decodeURIComponent(match?.params.name)}\n                />\n              )\n            }\n          </Route>\n          <Route exact={true} path=\"/alerting/notifications/templates/:name/edit\">\n            {({ match }: RouteChildrenProps<{ name: string }>) =>\n              match?.params.name && (\n                <EditTemplateView\n                  alertManagerSourceName={alertManagerSourceName}\n                  config={config}\n                  templateName={decodeURIComponent(match?.params.name)}\n                />\n              )\n            }\n          </Route>\n          <Route exact={true} path=\"/alerting/notifications/receivers/new\">\n            <NewReceiverView config={config} alertManagerSourceName={alertManagerSourceName} />\n          </Route>\n          <Route exact={true} path=\"/alerting/notifications/receivers/:name/edit\">\n            {({ match }: RouteChildrenProps<{ name: string }>) =>\n              match?.params.name && (\n                <EditReceiverView\n                  alertManagerSourceName={alertManagerSourceName}\n                  config={config}\n                  receiverName={decodeURIComponent(match?.params.name)}\n                />\n              )\n            }\n          </Route>\n          <Route exact={true} path=\"/alerting/notifications/global-config\">\n            <GlobalConfigForm config={config} alertManagerSourceName={alertManagerSourceName} />\n          </Route>\n        </Switch>\n      )}\n    </>\n  );\n};\n\nexport default Receivers;\n","import React from 'react';\n\nimport { Alert } from '@grafana/ui';\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\n\nimport { generateCopiedName } from '../../utils/duplicate';\nimport { updateDefinesWithUniqueValue } from '../../utils/templates';\n\nimport { TemplateForm } from './TemplateForm';\n\ninterface Props {\n  templateName: string;\n  config: AlertManagerCortexConfig;\n  alertManagerSourceName: string;\n}\n\nexport const DuplicateTemplateView = ({ config, templateName, alertManagerSourceName }: Props) => {\n  const template = config.template_files?.[templateName];\n\n  if (!template) {\n    return (\n      <Alert severity=\"error\" title=\"Template not found\">\n        Sorry, this template does not seem to exists.\n      </Alert>\n    );\n  }\n\n  const duplicatedName = generateCopiedName(templateName, Object.keys(config.template_files));\n\n  return (\n    <TemplateForm\n      alertManagerSourceName={alertManagerSourceName}\n      config={config}\n      existing={{ name: duplicatedName, content: updateDefinesWithUniqueValue(template) }}\n    />\n  );\n};\n","import React from 'react';\n\nimport { Alert } from '@grafana/ui';\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\n\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\n\nimport { CloudReceiverForm } from './form/CloudReceiverForm';\nimport { GrafanaReceiverForm } from './form/GrafanaReceiverForm';\n\ninterface Props {\n  receiverName: string;\n  config: AlertManagerCortexConfig;\n  alertManagerSourceName: string;\n}\n\nexport const EditReceiverView = ({ config, receiverName, alertManagerSourceName }: Props) => {\n  const receiver = config.alertmanager_config.receivers?.find(({ name }) => name === receiverName);\n  if (!receiver) {\n    return (\n      <Alert severity=\"error\" title=\"Receiver not found\">\n        Sorry, this receiver does not seem to exist.\n      </Alert>\n    );\n  }\n\n  if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n    return <GrafanaReceiverForm config={config} alertManagerSourceName={alertManagerSourceName} existing={receiver} />;\n  } else {\n    return <CloudReceiverForm config={config} alertManagerSourceName={alertManagerSourceName} existing={receiver} />;\n  }\n};\n","import React from 'react';\n\nimport { Alert } from '@grafana/ui';\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\n\nimport { TemplateForm } from './TemplateForm';\n\ninterface Props {\n  templateName: string;\n  config: AlertManagerCortexConfig;\n  alertManagerSourceName: string;\n}\n\nexport const EditTemplateView = ({ config, templateName, alertManagerSourceName }: Props) => {\n  const template = config.template_files?.[templateName];\n  const provenance = config.template_file_provenances?.[templateName];\n\n  if (!template) {\n    return (\n      <Alert severity=\"error\" title=\"Template not found\">\n        Sorry, this template does not seem to exists.\n      </Alert>\n    );\n  }\n  return (\n    <TemplateForm\n      alertManagerSourceName={alertManagerSourceName}\n      config={config}\n      existing={{ name: templateName, content: template }}\n      provenance={provenance}\n    />\n  );\n};\n","import React from 'react';\nimport { useForm, FormProvider } from 'react-hook-form';\n\nimport { Alert, Button, HorizontalGroup, LinkButton } from '@grafana/ui';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { updateAlertManagerConfigAction } from '../../state/actions';\nimport { globalConfigOptions } from '../../utils/cloud-alertmanager-notifier-types';\nimport { isVanillaPrometheusAlertManagerDataSource } from '../../utils/datasource';\nimport { makeAMLink } from '../../utils/misc';\nimport { omitEmptyValues } from '../../utils/receiver-form';\nimport { initialAsyncRequestState } from '../../utils/redux';\n\nimport { OptionField } from './form/fields/OptionField';\n\ninterface Props {\n  config: AlertManagerCortexConfig;\n  alertManagerSourceName: string;\n}\n\ntype FormValues = Record<string, unknown>;\n\nconst defaultValues: FormValues = {\n  smtp_require_tls: true,\n} as const;\n\nexport const GlobalConfigForm = ({ config, alertManagerSourceName }: Props) => {\n  const dispatch = useDispatch();\n\n  useCleanup((state) => (state.unifiedAlerting.saveAMConfig = initialAsyncRequestState));\n\n  const { loading, error } = useUnifiedAlertingSelector((state) => state.saveAMConfig);\n  const readOnly = isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName);\n\n  const formAPI = useForm<FormValues>({\n    // making a copy here beacuse react-hook-form will mutate these, and break if the object is frozen. for real.\n    defaultValues: JSON.parse(\n      JSON.stringify({\n        ...defaultValues,\n        ...(config.alertmanager_config.global ?? {}),\n      })\n    ),\n  });\n\n  const {\n    handleSubmit,\n    formState: { errors },\n  } = formAPI;\n\n  const onSubmitCallback = (values: FormValues) => {\n    dispatch(\n      updateAlertManagerConfigAction({\n        newConfig: {\n          ...config,\n          alertmanager_config: {\n            ...config.alertmanager_config,\n            global: omitEmptyValues(values),\n          },\n        },\n        oldConfig: config,\n        alertManagerSourceName,\n        successMessage: 'Global config updated.',\n        redirectPath: makeAMLink('/alerting/notifications', alertManagerSourceName),\n      })\n    );\n  };\n\n  return (\n    <FormProvider {...formAPI}>\n      <form onSubmit={handleSubmit(onSubmitCallback)}>\n        {error && (\n          <Alert severity=\"error\" title=\"Error saving receiver\">\n            {error.message || String(error)}\n          </Alert>\n        )}\n        {globalConfigOptions.map((option) => (\n          <OptionField\n            readOnly={readOnly}\n            defaultValue={defaultValues[option.propertyName]}\n            key={option.propertyName}\n            option={option}\n            error={errors[option.propertyName]}\n            pathPrefix={''}\n          />\n        ))}\n        <div>\n          <HorizontalGroup>\n            {!readOnly && (\n              <>\n                {loading && (\n                  <Button disabled={true} icon=\"fa fa-spinner\" variant=\"primary\">\n                    Saving...\n                  </Button>\n                )}\n                {!loading && <Button type=\"submit\">Save global config</Button>}\n              </>\n            )}\n            <LinkButton\n              disabled={loading}\n              fill=\"outline\"\n              variant=\"secondary\"\n              href={makeAMLink('alerting/notifications', alertManagerSourceName)}\n            >\n              Cancel\n            </LinkButton>\n          </HorizontalGroup>\n        </div>\n      </form>\n    </FormProvider>\n  );\n};\n","import React from 'react';\n\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\n\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\n\nimport { CloudReceiverForm } from './form/CloudReceiverForm';\nimport { GrafanaReceiverForm } from './form/GrafanaReceiverForm';\n\ninterface Props {\n  config: AlertManagerCortexConfig;\n  alertManagerSourceName: string;\n}\n\nexport const NewReceiverView = ({ alertManagerSourceName, config }: Props) => {\n  if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n    return <GrafanaReceiverForm alertManagerSourceName={alertManagerSourceName} config={config} />;\n  } else {\n    return <CloudReceiverForm alertManagerSourceName={alertManagerSourceName} config={config} />;\n  }\n};\n","import React from 'react';\n\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\n\nimport { TemplateForm } from './TemplateForm';\n\ninterface Props {\n  config: AlertManagerCortexConfig;\n  alertManagerSourceName: string;\n}\n\nexport const NewTemplateView = ({ config, alertManagerSourceName }: Props) => {\n  return <TemplateForm config={config} alertManagerSourceName={alertManagerSourceName} />;\n};\n","export function generateCopiedName(originalName: string, exisitingNames: string[]) {\n  const nonDuplicateName = originalName.replace(/\\(copy( [0-9]+)?\\)$/, '').trim();\n\n  let newName = `${nonDuplicateName} (copy)`;\n\n  for (let i = 2; exisitingNames.includes(newName); i++) {\n    newName = `${nonDuplicateName} (copy ${i})`;\n  }\n\n  return newName;\n}\n"],"names":["GrafanaAlertmanagerDeliveryWarning","currentAlertmanager","styles","getStyles","useGetAlertmanagerChoiceStatusQuery","amChoiceStatus","viewingInternalAM","hasActiveExternalAMs","theme","alertManagerSourceName","dispatch","config","loading","error","receiverTypes","state","match","DuplicateTemplateView","templateName","template","duplicatedName","EditReceiverView","receiverName","receiver","name","EditTemplateView","provenance","defaultValues","GlobalConfigForm","readOnly","formAPI","handleSubmit","errors","onSubmitCallback","values","option","NewReceiverView","NewTemplateView","generateCopiedName","originalName","exisitingNames","nonDuplicateName","newName","i"],"sourceRoot":""}