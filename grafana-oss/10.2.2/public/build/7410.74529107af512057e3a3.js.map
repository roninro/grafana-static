{"version":3,"file":"7410.74529107af512057e3a3.js","mappings":"wJAMO,SAASA,EAAWC,EAA8B,CACvD,MAAMC,KAAW,eAAY,EAEvBC,KAAc,UAAOF,CAAa,EACxCE,EAAY,QAAUF,KACtB,aAAU,IACD,IAAM,CACXC,KAAS,KAAc,CAAE,cAAeC,EAAY,OAAQ,CAAC,CAAC,CAChE,EACC,CAACD,CAAQ,CAAC,CACf,C,yGCeA,QAvB2B,IAAM,CAC/B,KAAM,CAAE,qBAAAE,CAAqB,KAAI,MAAgB,EAC3C,CAAE,KAAAC,EAAM,UAAAC,EAAW,MAAAC,CAAM,KAAI,KAAsBH,CAAoB,EAE7E,OAAIE,GAAa,CAACD,EACT,aAGLE,EAEA,gBAAC,IAAK,CAAC,SAAS,QAAQ,MAAM,oCAC3B,OAAOA,CAAK,CACf,EAICF,EAIE,gBAAC,IAAgB,CAAC,OAAQA,EAAM,uBAAwBD,CAAA,CAAuB,EAH7E,IAIX,C,yMCJA,MAAMI,EAA4B,CAChC,iBAAkB,EACpB,EAEaC,EAAmB,CAAC,CAAE,OAAAC,EAAQ,uBAAAC,CAAuB,IAAa,CAC7E,MAAMT,KAAW,eAAY,KAE7B,KAAYU,GAAWA,EAAM,gBAAgB,aAAe,IAAyB,EAErF,KAAM,CAAE,QAAAC,EAAS,MAAAN,CAAM,KAAI,KAA4BK,GAAUA,EAAM,YAAY,EAC7EE,KAAW,MAA0CH,CAAsB,EAE3EI,KAAU,MAAoB,CAElC,cAAe,KAAK,MAClB,KAAK,UAAU,CACb,GAAGP,EACH,GAAIE,EAAO,oBAAoB,QAAU,CAAC,CAC5C,CAAC,CACH,CACF,CAAC,EAEK,CACJ,aAAAM,EACA,UAAW,CAAE,OAAAC,CAAO,CACtB,EAAIF,EAEEG,EAAoBC,GAAuB,CAC/CjB,KACE,MAA+B,CAC7B,UAAW,CACT,GAAGQ,EACH,oBAAqB,CACnB,GAAGA,EAAO,oBACV,UAAQ,MAAgBS,CAAM,CAChC,CACF,EACA,UAAWT,EACX,uBAAAC,EACA,eAAgB,yBAChB,gBAAc,MAAW,0BAA2BA,CAAsB,CAC5E,CAAC,CACH,CACF,EAEA,OACE,gBAAC,KAAY,CAAE,GAAGI,CAAA,EAChB,gBAAC,QAAK,SAAUC,EAAaE,CAAgB,GAC1CX,GACC,gBAAC,IAAK,CAAC,SAAS,QAAQ,MAAM,yBAC3BA,EAAM,SAAW,OAAOA,CAAK,CAChC,EAED,IAAoB,IAAKa,GACxB,gBAAC,KACC,SAAAN,EACA,aAAcN,EAAcY,EAAO,YAAY,EAC/C,IAAKA,EAAO,aACZ,OAAAA,EACA,MAAOH,EAAOG,EAAO,YAAY,EACjC,WAAY,GACd,CACD,EACD,gBAAC,WACC,gBAAC,KAAe,KACb,CAACN,GACA,gCACGD,GACC,gBAAC,KAAM,CAAC,SAAU,GAAM,KAAK,gBAAgB,QAAQ,WAAU,WAE/D,EAED,CAACA,GAAW,gBAAC,KAAM,CAAC,KAAK,UAAS,oBAAkB,CACvD,EAEF,gBAAC,MACC,SAAUA,EACV,KAAK,UACL,QAAQ,YACR,QAAM,MAAW,yBAA0BF,CAAsB,GAClE,QAED,CACF,CACF,CACF,CACF,CAEJ,C,kDCtGO,SAASU,EAAsBC,EAAuBC,EAAmB,CAC9E,MAAMC,EAAc,kBAAgB,UAAU,6BAA6B,SAASF,GAAgB,GAAI,CACtG,GAAGC,EACH,KAAM,CAACD,CACT,CAAC,EAED,MAAO,CACL,GAAGE,EAEH,MAAOA,EAAY,KACrB,CACF,C","sources":["webpack://grafana/./public/app/core/hooks/useCleanup.ts","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/GlobalConfig.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/GlobalConfigForm.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertmanagerConfig.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\nimport { useDispatch } from 'app/types';\n\nimport { cleanUpAction, CleanUpAction } from '../actions/cleanUp';\n\nexport function useCleanup(cleanupAction: CleanUpAction) {\n  const dispatch = useDispatch();\n  //bit of a hack to unburden user from having to wrap stateSelcetor in a useCallback. Otherwise cleanup would happen on every render\n  const selectorRef = useRef(cleanupAction);\n  selectorRef.current = cleanupAction;\n  useEffect(() => {\n    return () => {\n      dispatch(cleanUpAction({ cleanupAction: selectorRef.current }));\n    };\n  }, [dispatch]);\n}\n","import React from 'react';\n\nimport { Alert } from '@grafana/ui';\n\nimport { useAlertmanagerConfig } from '../../hooks/useAlertmanagerConfig';\nimport { useAlertmanager } from '../../state/AlertmanagerContext';\nimport { GlobalConfigForm } from '../receivers/GlobalConfigForm';\n\nconst NewMessageTemplate = () => {\n  const { selectedAlertmanager } = useAlertmanager();\n  const { data, isLoading, error } = useAlertmanagerConfig(selectedAlertmanager);\n\n  if (isLoading && !data) {\n    return 'loading...';\n  }\n\n  if (error) {\n    return (\n      <Alert severity=\"error\" title=\"Failed to fetch message template\">\n        {String(error)}\n      </Alert>\n    );\n  }\n\n  if (!data) {\n    return null;\n  }\n\n  return <GlobalConfigForm config={data} alertManagerSourceName={selectedAlertmanager!} />;\n};\n\nexport default NewMessageTemplate;\n","import React from 'react';\nimport { useForm, FormProvider } from 'react-hook-form';\n\nimport { Alert, Button, HorizontalGroup, LinkButton } from '@grafana/ui';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { updateAlertManagerConfigAction } from '../../state/actions';\nimport { globalConfigOptions } from '../../utils/cloud-alertmanager-notifier-types';\nimport { isVanillaPrometheusAlertManagerDataSource } from '../../utils/datasource';\nimport { makeAMLink } from '../../utils/misc';\nimport { omitEmptyValues } from '../../utils/receiver-form';\nimport { initialAsyncRequestState } from '../../utils/redux';\n\nimport { OptionField } from './form/fields/OptionField';\n\ninterface Props {\n  config: AlertManagerCortexConfig;\n  alertManagerSourceName: string;\n}\n\ntype FormValues = Record<string, unknown>;\n\nconst defaultValues: FormValues = {\n  smtp_require_tls: true,\n} as const;\n\nexport const GlobalConfigForm = ({ config, alertManagerSourceName }: Props) => {\n  const dispatch = useDispatch();\n\n  useCleanup((state) => (state.unifiedAlerting.saveAMConfig = initialAsyncRequestState));\n\n  const { loading, error } = useUnifiedAlertingSelector((state) => state.saveAMConfig);\n  const readOnly = isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName);\n\n  const formAPI = useForm<FormValues>({\n    // making a copy here beacuse react-hook-form will mutate these, and break if the object is frozen. for real.\n    defaultValues: JSON.parse(\n      JSON.stringify({\n        ...defaultValues,\n        ...(config.alertmanager_config.global ?? {}),\n      })\n    ),\n  });\n\n  const {\n    handleSubmit,\n    formState: { errors },\n  } = formAPI;\n\n  const onSubmitCallback = (values: FormValues) => {\n    dispatch(\n      updateAlertManagerConfigAction({\n        newConfig: {\n          ...config,\n          alertmanager_config: {\n            ...config.alertmanager_config,\n            global: omitEmptyValues(values),\n          },\n        },\n        oldConfig: config,\n        alertManagerSourceName,\n        successMessage: 'Global config updated.',\n        redirectPath: makeAMLink('/alerting/notifications', alertManagerSourceName),\n      })\n    );\n  };\n\n  return (\n    <FormProvider {...formAPI}>\n      <form onSubmit={handleSubmit(onSubmitCallback)}>\n        {error && (\n          <Alert severity=\"error\" title=\"Error saving receiver\">\n            {error.message || String(error)}\n          </Alert>\n        )}\n        {globalConfigOptions.map((option) => (\n          <OptionField\n            readOnly={readOnly}\n            defaultValue={defaultValues[option.propertyName]}\n            key={option.propertyName}\n            option={option}\n            error={errors[option.propertyName]}\n            pathPrefix={''}\n          />\n        ))}\n        <div>\n          <HorizontalGroup>\n            {!readOnly && (\n              <>\n                {loading && (\n                  <Button disabled={true} icon=\"fa fa-spinner\" variant=\"primary\">\n                    Saving...\n                  </Button>\n                )}\n                {!loading && <Button type=\"submit\">Save global config</Button>}\n              </>\n            )}\n            <LinkButton\n              disabled={loading}\n              fill=\"outline\"\n              variant=\"secondary\"\n              href={makeAMLink('alerting/notifications', alertManagerSourceName)}\n            >\n              Cancel\n            </LinkButton>\n          </HorizontalGroup>\n        </div>\n      </form>\n    </FormProvider>\n  );\n};\n","import { SerializedError } from '@reduxjs/toolkit';\n\nimport { alertmanagerApi } from '../api/alertmanagerApi';\n\ntype Options = {\n  refetchOnFocus: boolean;\n  refetchOnReconnect: boolean;\n};\n\n// TODO refactor this so we can just call \"alertmanagerApi.endpoints.getAlertmanagerConfiguration\" everywhere\n// and remove this hook since it adds little value\nexport function useAlertmanagerConfig(amSourceName?: string, options?: Options) {\n  const fetchConfig = alertmanagerApi.endpoints.getAlertmanagerConfiguration.useQuery(amSourceName ?? '', {\n    ...options,\n    skip: !amSourceName,\n  });\n\n  return {\n    ...fetchConfig,\n    // TODO refactor to get rid of this type assertion\n    error: fetchConfig.error as SerializedError,\n  };\n}\n"],"names":["useCleanup","cleanupAction","dispatch","selectorRef","selectedAlertmanager","data","isLoading","error","defaultValues","GlobalConfigForm","config","alertManagerSourceName","state","loading","readOnly","formAPI","handleSubmit","errors","onSubmitCallback","values","option","useAlertmanagerConfig","amSourceName","options","fetchConfig"],"sourceRoot":""}