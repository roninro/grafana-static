{"version":3,"file":"6411.902a362395e2048af6e8.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/api/receiversApi.ts","webpack://grafana/./public/app/features/alerting/unified/components/Authorize.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/FileExportPreview.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaExportDrawer.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/providers.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/RuleInspector.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAbilities.ts","webpack://grafana/./public/app/features/alerting/unified/utils/notification-policies.ts"],"sourcesContent":["import { ContactPointsState } from 'app/types';\n\nimport { CONTACT_POINTS_STATE_INTERVAL_MS } from '../utils/constants';\n\nimport { alertingApi } from './alertingApi';\nimport { fetchContactPointsState } from './grafana';\n\nexport const receiversApi = alertingApi.injectEndpoints({\n  endpoints: (build) => ({\n    contactPointsState: build.query<ContactPointsState, { amSourceName: string }>({\n      queryFn: async ({ amSourceName }) => {\n        try {\n          const contactPointsState = await fetchContactPointsState(amSourceName);\n          return { data: contactPointsState };\n        } catch (error) {\n          return { error: error };\n        }\n      },\n    }),\n  }),\n});\n\nexport const useGetContactPointsState = (alertManagerSourceName: string) => {\n  const contactPointsStateEmpty: ContactPointsState = { receivers: {}, errorCount: 0 };\n  const { currentData: contactPointsState } = receiversApi.useContactPointsStateQuery(\n    { amSourceName: alertManagerSourceName ?? '' },\n    {\n      skip: !alertManagerSourceName,\n      pollingInterval: CONTACT_POINTS_STATE_INTERVAL_MS,\n    }\n  );\n  return contactPointsState ?? contactPointsStateEmpty;\n};\n","import { chain, filter } from 'lodash';\nimport React, { PropsWithChildren } from 'react';\n\nimport {\n  Abilities,\n  Action,\n  AlertmanagerAction,\n  AlertSourceAction,\n  useAlertSourceAbilities,\n  useAllAlertmanagerAbilities,\n} from '../hooks/useAbilities';\n\ninterface AuthorizeProps extends PropsWithChildren {\n  actions: AlertmanagerAction[] | AlertSourceAction[];\n}\n\nexport const Authorize = ({ actions, children }: AuthorizeProps) => {\n  const alertmanagerActions = filter(actions, isAlertmanagerAction) as AlertmanagerAction[];\n  const alertSourceActions = filter(actions, isAlertSourceAction) as AlertSourceAction[];\n\n  if (alertmanagerActions.length) {\n    return <AuthorizeAlertmanager actions={alertmanagerActions}>{children}</AuthorizeAlertmanager>;\n  }\n\n  if (alertSourceActions.length) {\n    return <AuthorizeAlertsource actions={alertSourceActions}>{children}</AuthorizeAlertsource>;\n  }\n\n  return null;\n};\n\ninterface ActionsProps<T extends Action> extends PropsWithChildren {\n  actions: T[];\n}\n\nconst AuthorizeAlertmanager = ({ actions, children }: ActionsProps<AlertmanagerAction>) => {\n  const alertmanagerAbilties = useAllAlertmanagerAbilities();\n  const allowed = actionsAllowed(alertmanagerAbilties, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\nconst AuthorizeAlertsource = ({ actions, children }: ActionsProps<AlertSourceAction>) => {\n  const alertSourceAbilities = useAlertSourceAbilities();\n  const allowed = actionsAllowed(alertSourceAbilities, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\n// check if some action is allowed from the abilities\nfunction actionsAllowed<T extends Action>(abilities: Abilities<T>, actions: T[]) {\n  return chain(abilities)\n    .pick(actions)\n    .values()\n    .value()\n    .some(([_supported, allowed]) => allowed === true);\n}\n\nfunction isAlertmanagerAction(action: AlertmanagerAction) {\n  return Object.values(AlertmanagerAction).includes(action);\n}\n\nfunction isAlertSourceAction(action: AlertSourceAction) {\n  return Object.values(AlertSourceAction).includes(action);\n}\n","import { css } from '@emotion/css';\nimport saveAs from 'file-saver';\nimport React, { useCallback, useMemo } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, ClipboardButton, CodeEditor, useStyles2 } from '@grafana/ui';\n\nimport { allGrafanaExportProviders, ExportFormats } from './providers';\n\ninterface FileExportPreviewProps {\n  format: ExportFormats;\n  textDefinition: string;\n\n  /*** Filename without extension ***/\n  downloadFileName: string;\n  onClose: () => void;\n}\n\nexport function FileExportPreview({ format, textDefinition, downloadFileName, onClose }: FileExportPreviewProps) {\n  const styles = useStyles2(fileExportPreviewStyles);\n\n  const onDownload = useCallback(() => {\n    const blob = new Blob([textDefinition], {\n      type: `application/${format};charset=utf-8`,\n    });\n    saveAs(blob, `${downloadFileName}.${format}`);\n\n    onClose();\n  }, [textDefinition, downloadFileName, format, onClose]);\n\n  const formattedTextDefinition = useMemo(() => {\n    const provider = allGrafanaExportProviders[format];\n    return provider.formatter ? provider.formatter(textDefinition) : textDefinition;\n  }, [format, textDefinition]);\n\n  return (\n    // TODO Handle empty content\n    <div className={styles.container}>\n      <div className={styles.content}>\n        <AutoSizer disableWidth>\n          {({ height }) => (\n            <CodeEditor\n              width=\"100%\"\n              height={height}\n              language={format}\n              value={formattedTextDefinition}\n              monacoOptions={{\n                minimap: {\n                  enabled: false,\n                },\n                lineNumbers: 'on',\n                readOnly: true,\n              }}\n            />\n          )}\n        </AutoSizer>\n      </div>\n      <div className={styles.actions}>\n        <Button variant=\"secondary\" onClick={onClose}>\n          Cancel\n        </Button>\n        <ClipboardButton icon=\"copy\" getText={() => textDefinition}>\n          Copy code\n        </ClipboardButton>\n        <Button icon=\"download-alt\" onClick={onDownload}>\n          Download\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nconst fileExportPreviewStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    gap: ${theme.spacing(2)};\n  `,\n  content: css`\n    flex: 1 1 100%;\n  `,\n  actions: css`\n    flex: 0;\n    justify-content: flex-end;\n    display: flex;\n    gap: ${theme.spacing(1)};\n  `,\n});\n","import React from 'react';\n\nimport { Drawer } from '@grafana/ui';\n\nimport { RuleInspectorTabs } from '../rule-editor/RuleInspector';\n\nimport { ExportFormats, ExportProvider } from './providers';\n\ninterface GrafanaExportDrawerProps {\n  activeTab: ExportFormats;\n  onTabChange: (tab: ExportFormats) => void;\n  children: React.ReactNode;\n  onClose: () => void;\n  formatProviders: Array<ExportProvider<ExportFormats>>;\n  title?: string;\n}\n\nexport function GrafanaExportDrawer({\n  activeTab,\n  onTabChange,\n  children,\n  onClose,\n  formatProviders,\n  title = 'Export',\n}: GrafanaExportDrawerProps) {\n  const grafanaRulesTabs = Object.values(formatProviders).map((provider) => ({\n    label: provider.name,\n    value: provider.exportFormat,\n  }));\n  return (\n    <Drawer\n      title={title}\n      subtitle=\"Select the format and download the file or copy the contents to clipboard\"\n      tabs={\n        <RuleInspectorTabs<ExportFormats> tabs={grafanaRulesTabs} setActiveTab={onTabChange} activeTab={activeTab} />\n      }\n      onClose={onClose}\n      size=\"md\"\n    >\n      {children}\n    </Drawer>\n  );\n}\n","export interface ExportProvider<TFormat> {\n  name: string;\n  exportFormat: TFormat;\n  formatter?: (raw: string) => string;\n}\n\nexport const JsonExportProvider: ExportProvider<'json'> = {\n  name: 'JSON',\n  exportFormat: 'json',\n  formatter: (raw: string) => {\n    try {\n      return JSON.stringify(JSON.parse(raw), null, 4);\n    } catch (e) {\n      return raw;\n    }\n  },\n};\n\nexport const YamlExportProvider: ExportProvider<'yaml'> = {\n  name: 'YAML',\n  exportFormat: 'yaml',\n};\n\nexport const HclExportProvider: ExportProvider<'hcl'> = {\n  name: 'Terraform (HCL)',\n  exportFormat: 'hcl',\n};\n\nexport const allGrafanaExportProviders = {\n  [JsonExportProvider.exportFormat]: JsonExportProvider,\n  [YamlExportProvider.exportFormat]: YamlExportProvider,\n  [HclExportProvider.exportFormat]: HclExportProvider,\n} as const;\n\nexport const jsonAndYamlGrafanaExportProviders = [JsonExportProvider, YamlExportProvider];\n\nexport type ExportFormats = keyof typeof allGrafanaExportProviders;\n","import { css } from '@emotion/css';\nimport { dump, load } from 'js-yaml';\nimport React, { useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, CodeEditor, Drawer, Icon, Tab, TabsBar, useStyles2, Tooltip } from '@grafana/ui';\n\nimport { RulerRuleDTO } from '../../../../../types/unified-alerting-dto';\nimport { RuleFormValues } from '../../types/rule-form';\nimport {\n  alertingRulerRuleToRuleForm,\n  formValuesToRulerRuleDTO,\n  recordingRulerRuleToRuleForm,\n} from '../../utils/rule-form';\nimport { isAlertingRulerRule, isRecordingRulerRule } from '../../utils/rules';\n\ninterface Props {\n  onClose: () => void;\n}\n\nconst cloudRulesTabs = [{ label: 'Yaml', value: 'yaml' }];\n\nexport const RuleInspector = ({ onClose }: Props) => {\n  const [activeTab, setActiveTab] = useState('yaml');\n  const { setValue } = useFormContext<RuleFormValues>();\n  const styles = useStyles2(drawerStyles);\n\n  const onApply = (formValues: RuleFormValues) => {\n    // Need to loop through all values and set them individually\n    // TODO this is not type-safe :(\n    for (const key in formValues) {\n      // @ts-ignore\n      setValue(key, formValues[key]);\n    }\n    onClose();\n  };\n\n  return (\n    <Drawer\n      title=\"Inspect Alert rule\"\n      subtitle={\n        <div className={styles.subtitle}>\n          <RuleInspectorTabs tabs={cloudRulesTabs} setActiveTab={setActiveTab} activeTab={activeTab} />\n        </div>\n      }\n      onClose={onClose}\n    >\n      {activeTab === 'yaml' && <InspectorYamlTab onSubmit={onApply} />}\n    </Drawer>\n  );\n};\n\ninterface RuleInspectorTabsProps<T = string> {\n  tabs: Array<{ label: string; value: T }>;\n  activeTab: T;\n  setActiveTab: (tab: T) => void;\n}\n\nexport function RuleInspectorTabs<T extends string>({ tabs, activeTab, setActiveTab }: RuleInspectorTabsProps<T>) {\n  return (\n    <TabsBar>\n      {tabs.map((tab, index) => {\n        return (\n          <Tab\n            key={`${tab.value}-${index}`}\n            label={tab.label}\n            value={tab.value}\n            onChangeTab={() => setActiveTab(tab.value)}\n            active={activeTab === tab.value}\n          />\n        );\n      })}\n    </TabsBar>\n  );\n}\n\ninterface YamlTabProps {\n  onSubmit: (newModel: RuleFormValues) => void;\n}\n\nconst InspectorYamlTab = ({ onSubmit }: YamlTabProps) => {\n  const styles = useStyles2(yamlTabStyle);\n  const { getValues } = useFormContext<RuleFormValues>();\n\n  const yamlValues = formValuesToRulerRuleDTO(getValues());\n  const [alertRuleAsYaml, setAlertRuleAsYaml] = useState(dump(yamlValues));\n\n  const onApply = () => {\n    const rulerRule = load(alertRuleAsYaml) as RulerRuleDTO;\n    const currentFormValues = getValues();\n\n    const yamlFormValues = rulerRuleToRuleFormValues(rulerRule);\n    onSubmit({ ...currentFormValues, ...yamlFormValues });\n  };\n\n  return (\n    <>\n      <div className={styles.applyButton}>\n        <Button type=\"button\" onClick={onApply}>\n          Apply\n        </Button>\n        <Tooltip content={<YamlContentInfo />} theme=\"info\" placement=\"left-start\" interactive={true}>\n          <Icon name=\"exclamation-triangle\" size=\"xl\" />\n        </Tooltip>\n      </div>\n\n      <div className={styles.content}>\n        <AutoSizer disableWidth>\n          {({ height }) => (\n            <CodeEditor\n              width=\"100%\"\n              height={height}\n              language=\"yaml\"\n              value={alertRuleAsYaml}\n              onBlur={setAlertRuleAsYaml}\n              monacoOptions={{\n                minimap: {\n                  enabled: false,\n                },\n              }}\n            />\n          )}\n        </AutoSizer>\n      </div>\n    </>\n  );\n};\n\nfunction YamlContentInfo() {\n  return (\n    <div>\n      The YAML content in the editor only contains alert rule configuration <br />\n      To configure Prometheus, you need to provide the rest of the{' '}\n      <a\n        href=\"https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        configuration file content.\n      </a>\n    </div>\n  );\n}\n\nfunction rulerRuleToRuleFormValues(rulerRule: RulerRuleDTO): Partial<RuleFormValues> {\n  if (isAlertingRulerRule(rulerRule)) {\n    return alertingRulerRuleToRuleForm(rulerRule);\n  } else if (isRecordingRulerRule(rulerRule)) {\n    return recordingRulerRuleToRuleForm(rulerRule);\n  }\n\n  return {};\n}\n\nexport const yamlTabStyle = (theme: GrafanaTheme2) => ({\n  content: css`\n    flex-grow: 1;\n    height: 100%;\n    padding-bottom: 16px;\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  applyButton: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    flex-grow: 0;\n    margin-bottom: ${theme.spacing(2)};\n  `,\n});\n\nexport const drawerStyles = () => ({\n  subtitle: css`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n  `,\n});\n","import { useMemo } from 'react';\n\nimport { contextSrv as ctx } from 'app/core/services/context_srv';\nimport { AccessControlAction } from 'app/types';\n\nimport { useAlertmanager } from '../state/AlertmanagerContext';\nimport { getInstancesPermissions, getNotificationsPermissions } from '../utils/access-control';\n\n/**\n * These hooks will determine if\n *  1. the action is supported in the current alertmanager or data source context\n *  2. user is allowed to perform actions based on their set of permissions / assigned role\n */\nexport enum AlertmanagerAction {\n  // configuration\n  ViewExternalConfiguration = 'view-external-configuration',\n  UpdateExternalConfiguration = 'update-external-configuration',\n\n  // contact points\n  CreateContactPoint = 'create-contact-point',\n  ViewContactPoint = 'view-contact-point',\n  UpdateContactPoint = 'edit-contact-points',\n  DeleteContactPoint = 'delete-contact-point',\n  ExportContactPoint = 'export-contact-point',\n\n  // notification templates\n  CreateNotificationTemplate = 'create-notification-template',\n  ViewNotificationTemplate = 'view-notification-template',\n  UpdateNotificationTemplate = 'edit-notification-template',\n  DeleteNotificationTemplate = 'delete-notification-template',\n  DecryptSecrets = 'decrypt-secrets',\n\n  // notification policies\n  CreateNotificationPolicy = 'create-notification-policy',\n  ViewNotificationPolicyTree = 'view-notification-policy-tree',\n  UpdateNotificationPolicyTree = 'update-notification-policy-tree',\n  DeleteNotificationPolicy = 'delete-notification-policy',\n  ExportNotificationPolicies = 'export-notification-policies',\n\n  // silences – these cannot be deleted only \"expired\" (updated)\n  CreateSilence = 'create-silence',\n  ViewSilence = 'view-silence',\n  UpdateSilence = 'update-silence',\n\n  // mute timings\n  ViewMuteTiming = 'view-mute-timing',\n  CreateMuteTiming = 'create-mute-timing',\n  UpdateMuteTiming = 'update-mute-timing',\n  DeleteMuteTiming = 'delete-mute-timing',\n}\n\nexport enum AlertSourceAction {\n  // internal (Grafana managed)\n  CreateAlertRule = 'create-alert-rule',\n  ViewAlertRule = 'view-alert-rule',\n  UpdateAlertRule = 'update-alert-rule',\n  DeleteAlertRule = 'delete-alert-rule',\n  // external (any compatible alerting data source)\n  CreateExternalAlertRule = 'create-external-alert-rule',\n  ViewExternalAlertRule = 'view-external-alert-rule',\n  UpdateExternalAlertRule = 'update-external-alert-rule',\n  DeleteExternalAlertRule = 'delete-external-alert-rule',\n}\n\nconst AlwaysSupported = true; // this just makes it easier to understand the code\nexport type Action = AlertmanagerAction | AlertSourceAction;\n\nexport type Ability = [actionSupported: boolean, actionAllowed: boolean];\nexport type Abilities<T extends Action> = Record<T, Ability>;\n\nexport function useAlertSourceAbilities(): Abilities<AlertSourceAction> {\n  // TODO add the \"supported\" booleans here, we currently only do authorization\n\n  const abilities: Abilities<AlertSourceAction> = {\n    // -- Grafana managed alert rules --\n    [AlertSourceAction.CreateAlertRule]: [AlwaysSupported, ctx.hasPermission(AccessControlAction.AlertingRuleCreate)],\n    [AlertSourceAction.ViewAlertRule]: [AlwaysSupported, ctx.hasPermission(AccessControlAction.AlertingRuleRead)],\n    [AlertSourceAction.UpdateAlertRule]: [AlwaysSupported, ctx.hasPermission(AccessControlAction.AlertingRuleUpdate)],\n    [AlertSourceAction.DeleteAlertRule]: [AlwaysSupported, ctx.hasPermission(AccessControlAction.AlertingRuleDelete)],\n    // -- External alert rules (Mimir / Loki / etc) --\n    // for these we only have \"read\" and \"write\" permissions\n    [AlertSourceAction.CreateExternalAlertRule]: [\n      AlwaysSupported,\n      ctx.hasPermission(AccessControlAction.AlertingRuleExternalWrite),\n    ],\n    [AlertSourceAction.ViewExternalAlertRule]: [\n      AlwaysSupported,\n      ctx.hasPermission(AccessControlAction.AlertingRuleExternalRead),\n    ],\n    [AlertSourceAction.UpdateExternalAlertRule]: [\n      AlwaysSupported,\n      ctx.hasPermission(AccessControlAction.AlertingRuleExternalWrite),\n    ],\n    [AlertSourceAction.DeleteExternalAlertRule]: [\n      AlwaysSupported,\n      ctx.hasPermission(AccessControlAction.AlertingRuleExternalWrite),\n    ],\n  };\n\n  return abilities;\n}\n\nexport function useAllAlertmanagerAbilities(): Abilities<AlertmanagerAction> {\n  const {\n    selectedAlertmanager,\n    hasConfigurationAPI,\n    isGrafanaAlertmanager: isGrafanaFlavoredAlertmanager,\n  } = useAlertmanager();\n\n  // These are used for interacting with Alertmanager resources where we apply alert.notifications:<name> permissions.\n  // There are different permissions based on wether the built-in alertmanager is selected (grafana) or an external one.\n  const notificationsPermissions = getNotificationsPermissions(selectedAlertmanager!);\n  const instancePermissions = getInstancesPermissions(selectedAlertmanager!);\n\n  // list out all of the abilities, and if the user has permissions to perform them\n  const abilities: Abilities<AlertmanagerAction> = {\n    // -- configuration --\n    [AlertmanagerAction.ViewExternalConfiguration]: [\n      AlwaysSupported,\n      ctx.hasPermission(AccessControlAction.AlertingNotificationsExternalRead),\n    ],\n    [AlertmanagerAction.UpdateExternalConfiguration]: [\n      hasConfigurationAPI,\n      ctx.hasPermission(AccessControlAction.AlertingNotificationsExternalWrite),\n    ],\n    // -- contact points --\n    [AlertmanagerAction.CreateContactPoint]: [hasConfigurationAPI, ctx.hasPermission(notificationsPermissions.create)],\n    [AlertmanagerAction.ViewContactPoint]: [AlwaysSupported, ctx.hasPermission(notificationsPermissions.read)],\n    [AlertmanagerAction.UpdateContactPoint]: [hasConfigurationAPI, ctx.hasPermission(notificationsPermissions.update)],\n    [AlertmanagerAction.DeleteContactPoint]: [hasConfigurationAPI, ctx.hasPermission(notificationsPermissions.delete)],\n    // only Grafana flavored alertmanager supports exporting\n    [AlertmanagerAction.ExportContactPoint]: [\n      isGrafanaFlavoredAlertmanager,\n      ctx.hasPermission(notificationsPermissions.read),\n    ],\n    // -- notification templates --\n    [AlertmanagerAction.CreateNotificationTemplate]: [\n      hasConfigurationAPI,\n      ctx.hasPermission(notificationsPermissions.create),\n    ],\n    [AlertmanagerAction.ViewNotificationTemplate]: [AlwaysSupported, ctx.hasPermission(notificationsPermissions.read)],\n    [AlertmanagerAction.UpdateNotificationTemplate]: [\n      hasConfigurationAPI,\n      ctx.hasPermission(notificationsPermissions.update),\n    ],\n    [AlertmanagerAction.DeleteNotificationTemplate]: [\n      hasConfigurationAPI,\n      ctx.hasPermission(notificationsPermissions.delete),\n    ],\n    // -- notification policies --\n    [AlertmanagerAction.CreateNotificationPolicy]: [\n      hasConfigurationAPI,\n      ctx.hasPermission(notificationsPermissions.create),\n    ],\n    [AlertmanagerAction.ViewNotificationPolicyTree]: [\n      AlwaysSupported,\n      ctx.hasPermission(notificationsPermissions.read),\n    ],\n    [AlertmanagerAction.UpdateNotificationPolicyTree]: [\n      hasConfigurationAPI,\n      ctx.hasPermission(notificationsPermissions.update),\n    ],\n    [AlertmanagerAction.DeleteNotificationPolicy]: [\n      hasConfigurationAPI,\n      ctx.hasPermission(notificationsPermissions.delete),\n    ],\n    [AlertmanagerAction.ExportNotificationPolicies]: [\n      isGrafanaFlavoredAlertmanager,\n      ctx.hasPermission(notificationsPermissions.read),\n    ],\n    [AlertmanagerAction.DecryptSecrets]: [\n      isGrafanaFlavoredAlertmanager,\n      ctx.hasPermission(notificationsPermissions.provisioning.readSecrets),\n    ],\n    // -- silences --\n    [AlertmanagerAction.CreateSilence]: [hasConfigurationAPI, ctx.hasPermission(instancePermissions.create)],\n    [AlertmanagerAction.ViewSilence]: [AlwaysSupported, ctx.hasPermission(instancePermissions.read)],\n    [AlertmanagerAction.UpdateSilence]: [hasConfigurationAPI, ctx.hasPermission(instancePermissions.update)],\n    // -- mute timtings --\n    [AlertmanagerAction.CreateMuteTiming]: [hasConfigurationAPI, ctx.hasPermission(notificationsPermissions.create)],\n    [AlertmanagerAction.ViewMuteTiming]: [AlwaysSupported, ctx.hasPermission(notificationsPermissions.read)],\n    [AlertmanagerAction.UpdateMuteTiming]: [hasConfigurationAPI, ctx.hasPermission(notificationsPermissions.update)],\n    [AlertmanagerAction.DeleteMuteTiming]: [hasConfigurationAPI, ctx.hasPermission(notificationsPermissions.delete)],\n  };\n\n  return abilities;\n}\n\nexport function useAlertmanagerAbility(action: AlertmanagerAction): Ability {\n  const abilities = useAllAlertmanagerAbilities();\n\n  return useMemo(() => {\n    return abilities[action];\n  }, [abilities, action]);\n}\n\nexport function useAlertmanagerAbilities(actions: AlertmanagerAction[]): Ability[] {\n  const abilities = useAllAlertmanagerAbilities();\n\n  return useMemo(() => {\n    return actions.map((action) => abilities[action]);\n  }, [abilities, actions]);\n}\n\nexport function useAlertSourceAbility(action: AlertSourceAction): Ability {\n  const abilities = useAlertSourceAbilities();\n  return useMemo(() => abilities[action], [abilities, action]);\n}\n","import { isArray, merge, pick, reduce } from 'lodash';\n\nimport {\n  AlertmanagerGroup,\n  MatcherOperator,\n  ObjectMatcher,\n  Route,\n  RouteWithID,\n} from 'app/plugins/datasource/alertmanager/types';\nimport { Labels } from 'app/types/unified-alerting-dto';\n\nimport { Label, normalizeMatchers } from './matchers';\n\ntype OperatorPredicate = (labelValue: string, matcherValue: string) => boolean;\n\nconst OperatorFunctions: Record<MatcherOperator, OperatorPredicate> = {\n  [MatcherOperator.equal]: (lv, mv) => lv === mv,\n  [MatcherOperator.notEqual]: (lv, mv) => lv !== mv,\n  [MatcherOperator.regex]: (lv, mv) => Boolean(lv.match(new RegExp(mv))),\n  [MatcherOperator.notRegex]: (lv, mv) => !Boolean(lv.match(new RegExp(mv))),\n};\n\nfunction isLabelMatch(matcher: ObjectMatcher, label: Label) {\n  const [labelKey, labelValue] = label;\n  const [matcherKey, operator, matcherValue] = matcher;\n\n  // not interested, keys don't match\n  if (labelKey !== matcherKey) {\n    return false;\n  }\n\n  const matchFunction = OperatorFunctions[operator];\n  if (!matchFunction) {\n    throw new Error(`no such operator: ${operator}`);\n  }\n\n  return matchFunction(labelValue, matcherValue);\n}\n\ninterface LabelMatchResult {\n  match: boolean;\n  matchers: ObjectMatcher[];\n}\n\ninterface MatchingResult {\n  matches: boolean;\n  details: Map<ObjectMatcher, Label[]>;\n  labelsMatch: Map<Label, LabelMatchResult>;\n}\n\n// check if every matcher returns \"true\" for the set of labels\nfunction matchLabels(matchers: ObjectMatcher[], labels: Label[]): MatchingResult {\n  const details = new Map<ObjectMatcher, Label[]>();\n\n  // If a policy has no matchers it still can be a match, hence matchers can be empty and match can be true\n  // So we cannot use empty array of matchers as an indicator of no match\n  const labelsMatch = new Map<Label, { match: boolean; matchers: ObjectMatcher[] }>(\n    labels.map((label) => [label, { match: false, matchers: [] }])\n  );\n\n  const matches = matchers.every((matcher) => {\n    const matchingLabels = labels.filter((label) => isLabelMatch(matcher, label));\n\n    matchingLabels.forEach((label) => {\n      const labelMatch = labelsMatch.get(label);\n      // The condition is just to satisfy TS. The map should have all the labels due to the previous map initialization\n      if (labelMatch) {\n        labelMatch.match = true;\n        labelMatch.matchers.push(matcher);\n      }\n    });\n\n    if (matchingLabels.length === 0) {\n      return false;\n    }\n\n    details.set(matcher, matchingLabels);\n    return matchingLabels.length > 0;\n  });\n\n  return { matches, details, labelsMatch };\n}\n\nexport interface AlertInstanceMatch {\n  instance: Labels;\n  matchDetails: Map<ObjectMatcher, Labels>;\n  labelsMatch: Map<Label, LabelMatchResult>;\n}\n\nexport interface RouteMatchResult<T extends Route> {\n  route: T;\n  details: Map<ObjectMatcher, Label[]>;\n  labelsMatch: Map<Label, LabelMatchResult>;\n}\n\n// Match does a depth-first left-to-right search through the route tree\n// and returns the matching routing nodes.\n\n// If the current node is not a match, return nothing\n// const normalizedMatchers = normalizeMatchers(root);\n// Normalization should have happened earlier in the code\nfunction findMatchingRoutes<T extends Route>(root: T, labels: Label[]): Array<RouteMatchResult<T>> {\n  let matches: Array<RouteMatchResult<T>> = [];\n\n  // If the current node is not a match, return nothing\n  const matchResult = matchLabels(root.object_matchers ?? [], labels);\n  if (!matchResult.matches) {\n    return [];\n  }\n\n  // If the current node matches, recurse through child nodes\n  if (root.routes) {\n    for (let index = 0; index < root.routes.length; index++) {\n      let child = root.routes[index];\n      let matchingChildren = findMatchingRoutes(child, labels);\n      // TODO how do I solve this typescript thingy? It looks correct to me /shrug\n      // @ts-ignore\n      matches = matches.concat(matchingChildren);\n      // we have matching children and we don't want to continue, so break here\n      if (matchingChildren.length && !child.continue) {\n        break;\n      }\n    }\n  }\n\n  // If no child nodes were matches, the current node itself is a match.\n  if (matches.length === 0) {\n    matches.push({ route: root, details: matchResult.details, labelsMatch: matchResult.labelsMatch });\n  }\n\n  return matches;\n}\n\n// This is a performance improvement to normalize matchers only once and use the normalized version later on\nexport function normalizeRoute(rootRoute: RouteWithID): RouteWithID {\n  function normalizeRoute(route: RouteWithID) {\n    route.object_matchers = normalizeMatchers(route);\n    delete route.matchers;\n    delete route.match;\n    delete route.match_re;\n    route.routes?.forEach(normalizeRoute);\n  }\n\n  const normalizedRootRoute = structuredClone(rootRoute);\n  normalizeRoute(normalizedRootRoute);\n\n  return normalizedRootRoute;\n}\n\n/**\n * find all of the groups that have instances that match the route, thay way we can find all instances\n * (and their grouping) for the given route\n */\nfunction findMatchingAlertGroups(\n  routeTree: Route,\n  route: Route,\n  alertGroups: AlertmanagerGroup[]\n): AlertmanagerGroup[] {\n  const matchingGroups: AlertmanagerGroup[] = [];\n\n  return alertGroups.reduce((acc, group) => {\n    // find matching alerts in the current group\n    const matchingAlerts = group.alerts.filter((alert) => {\n      const labels = Object.entries(alert.labels);\n      return findMatchingRoutes(routeTree, labels).some((matchingRoute) => matchingRoute.route === route);\n    });\n\n    // if the groups has any alerts left after matching, add it to the results\n    if (matchingAlerts.length) {\n      acc.push({\n        ...group,\n        alerts: matchingAlerts,\n      });\n    }\n\n    return acc;\n  }, matchingGroups);\n}\n\nexport type InhertitableProperties = Pick<\n  Route,\n  'receiver' | 'group_by' | 'group_wait' | 'group_interval' | 'repeat_interval' | 'mute_time_intervals'\n>;\n\n// inherited properties are config properties that exist on the parent route (or its inherited properties) but not on the child route\nfunction getInheritedProperties(\n  parentRoute: Route,\n  childRoute: Route,\n  propertiesParentInherited?: Partial<InhertitableProperties>\n) {\n  const fullParentProperties = merge({}, parentRoute, propertiesParentInherited);\n\n  const inheritableProperties: InhertitableProperties = pick(fullParentProperties, [\n    'receiver',\n    'group_by',\n    'group_wait',\n    'group_interval',\n    'repeat_interval',\n    'mute_time_intervals',\n  ]);\n\n  // TODO how to solve this TypeScript mystery?\n  const inherited = reduce(\n    inheritableProperties,\n    (inheritedProperties: Partial<Route> = {}, parentValue, property) => {\n      const parentHasValue = parentValue !== undefined;\n\n      // @ts-ignore\n      const inheritFromParentUndefined = parentHasValue && childRoute[property] === undefined;\n      // @ts-ignore\n      const inheritFromParentEmptyString = parentHasValue && childRoute[property] === '';\n\n      const inheritEmptyGroupByFromParent =\n        property === 'group_by' &&\n        parentHasValue &&\n        isArray(childRoute[property]) &&\n        childRoute[property]?.length === 0;\n\n      const inheritFromParent =\n        inheritFromParentUndefined || inheritFromParentEmptyString || inheritEmptyGroupByFromParent;\n\n      if (inheritFromParent) {\n        // @ts-ignore\n        inheritedProperties[property] = parentValue;\n      }\n\n      return inheritedProperties;\n    },\n    {}\n  );\n\n  return inherited;\n}\n\n/**\n * This function will compute the full tree with inherited properties – this is mostly used for search and filtering\n */\nexport function computeInheritedTree<T extends Route>(parent: T): T {\n  return {\n    ...parent,\n    routes: parent.routes?.map((child) => {\n      const inheritedProperties = getInheritedProperties(parent, child);\n\n      return computeInheritedTree({\n        ...child,\n        ...inheritedProperties,\n      });\n    }),\n  };\n}\n\nexport { findMatchingAlertGroups, findMatchingRoutes, getInheritedProperties };\n"],"names":["receiversApi","build","amSourceName","error","useGetContactPointsState","alertManagerSourceName","contactPointsStateEmpty","contactPointsState","Authorize","actions","children","alertmanagerActions","isAlertmanagerAction","alertSourceActions","isAlertSourceAction","AuthorizeAlertmanager","AuthorizeAlertsource","alertmanagerAbilties","actionsAllowed","alertSourceAbilities","abilities","_supported","allowed","action","FileExportPreview","format","textDefinition","downloadFileName","onClose","styles","fileExportPreviewStyles","onDownload","blob","formattedTextDefinition","provider","height","theme","GrafanaExportDrawer","activeTab","onTabChange","formatProviders","title","grafanaRulesTabs","JsonExportProvider","raw","YamlExportProvider","HclExportProvider","allGrafanaExportProviders","jsonAndYamlGrafanaExportProviders","cloudRulesTabs","RuleInspector","setActiveTab","setValue","drawerStyles","onApply","formValues","key","RuleInspectorTabs","InspectorYamlTab","tabs","tab","index","onSubmit","yamlTabStyle","getValues","yamlValues","alertRuleAsYaml","setAlertRuleAsYaml","rulerRule","currentFormValues","yamlFormValues","rulerRuleToRuleFormValues","YamlContentInfo","AlertmanagerAction","AlertSourceAction","AlwaysSupported","useAlertSourceAbilities","useAllAlertmanagerAbilities","selectedAlertmanager","hasConfigurationAPI","isGrafanaFlavoredAlertmanager","notificationsPermissions","instancePermissions","useAlertmanagerAbility","useAlertmanagerAbilities","useAlertSourceAbility","OperatorFunctions","lv","mv","isLabelMatch","matcher","label","labelKey","labelValue","matcherKey","operator","matcherValue","matchFunction","matchLabels","matchers","labels","details","labelsMatch","matchingLabels","labelMatch","findMatchingRoutes","root","matches","matchResult","child","matchingChildren","normalizeRoute","rootRoute","route","normalizedRootRoute","findMatchingAlertGroups","routeTree","alertGroups","matchingGroups","acc","group","matchingAlerts","alert","matchingRoute","getInheritedProperties","parentRoute","childRoute","propertiesParentInherited","fullParentProperties","inheritableProperties","inheritedProperties","parentValue","property","parentHasValue","inheritFromParentUndefined","inheritFromParentEmptyString","inheritEmptyGroupByFromParent","computeInheritedTree","parent"],"sourceRoot":""}