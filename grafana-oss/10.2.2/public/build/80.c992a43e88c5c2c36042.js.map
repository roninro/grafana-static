{"version":3,"file":"80.c992a43e88c5c2c36042.js","mappings":"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","sources":["webpack://grafana/./public/app/core/services/StateManagerBase.ts","webpack://grafana/./public/app/features/dashboard-scene/scene/NavToolbarActions.tsx","webpack://grafana/./public/app/features/dashboard-scene/scene/DashboardSceneRenderer.tsx","webpack://grafana/./public/app/features/dashboard-scene/serialization/SaveDashboardDrawer.tsx","webpack://grafana/./public/app/features/dashboard-scene/utils/DashboardModelCompatibilityWrapper.ts","webpack://grafana/./public/app/features/dashboard-scene/inspect/InspectDataTab.tsx","webpack://grafana/./public/app/features/dashboard-scene/inspect/InspectJsonTab.tsx","webpack://grafana/./public/app/features/dashboard-scene/inspect/InspectMetaDataTab.tsx","webpack://grafana/./public/app/features/dashboard-scene/inspect/InspectQueryTab.tsx","webpack://grafana/./public/app/features/dashboard-scene/inspect/InspectStatsTab.tsx","webpack://grafana/./public/app/features/dashboard-scene/inspect/PanelInspectDrawer.tsx","webpack://grafana/./public/app/features/dashboard-scene/scene/DashboardSceneUrlSync.ts","webpack://grafana/./public/app/features/dashboard-scene/scene/DashboardScene.tsx","webpack://grafana/./public/app/features/dashboard-scene/scene/LibraryVizPanel.tsx","webpack://grafana/./public/app/features/dashboard-scene/scene/PanelRepeaterGridItem.tsx","webpack://grafana/./public/app/features/dashboard-scene/scene/PanelTimeRange.tsx","webpack://grafana/./public/app/features/dashboard-scene/scene/RowRepeaterBehavior.ts","webpack://grafana/./public/app/features/dashboard-scene/scene/ShareQueryDataProvider.ts","webpack://grafana/./public/app/features/dashboard-scene/scene/types.ts","webpack://grafana/./public/app/features/dashboard-scene/scene/DashboardAnnotationsDataLayer.ts","webpack://grafana/./public/app/features/dashboard-scene/scene/PanelMenuBehavior.tsx","webpack://grafana/./public/app/features/dashboard-scene/scene/setDashboardPanelContext.ts","webpack://grafana/./public/app/features/dashboard-scene/serialization/angularMigration.ts","webpack://grafana/./public/app/features/dashboard-scene/serialization/transformSaveModelToScene.ts","webpack://grafana/./public/app/features/dashboard-scene/serialization/const.ts","webpack://grafana/./public/app/features/dashboard-scene/serialization/dataLayersToAnnotations.ts","webpack://grafana/./public/app/features/dashboard-scene/serialization/sceneVariablesSetToVariables.ts","webpack://grafana/./public/app/features/dashboard-scene/serialization/transformSceneToSaveModel.ts","webpack://grafana/./public/app/features/dashboard-scene/sharing/ShareExportTab.tsx","webpack://grafana/./public/app/features/dashboard-scene/sharing/ShareLinkTab.tsx","webpack://grafana/./public/app/features/dashboard-scene/sharing/ShareSnapshotTab.tsx","webpack://grafana/./public/app/features/dashboard-scene/sharing/ShareModal.tsx","webpack://grafana/./public/app/features/dashboard-scene/utils/createPanelDataProvider.ts","webpack://grafana/./public/app/features/dashboard-scene/utils/utils.ts","webpack://grafana/./public/app/features/dashboard/components/Inspector/hooks.ts","webpack://grafana/./.yarn/__virtual__/react-use-virtual-dd7926f458/0/cache/react-use-npm-17.4.0-0ef4521544-0889da919b.zip/node_modules/react-use/lib/useAsync.js"],"sourcesContent":["import { useEffect } from 'react';\nimport { Observer, Subject, Subscription } from 'rxjs';\n\nimport { useForceUpdate } from '@grafana/ui';\n\nexport class StateManagerBase<TState> {\n  private _subject = new Subject<TState>();\n  private _state: TState;\n\n  constructor(state: TState) {\n    this._state = state;\n  }\n\n  useState() {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useLatestState(this);\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  setState(update: Partial<TState>) {\n    this._state = {\n      ...this._state,\n      ...update,\n    };\n    this._subject.next(this._state);\n  }\n\n  /**\n   * Subscribe to the scene state subject\n   **/\n  subscribeToState(observerOrNext?: Partial<Observer<TState>>): Subscription {\n    return this._subject.subscribe(observerOrNext);\n  }\n}\n/**\n * This hook is always returning model.state instead of a useState that remembers the last state emitted on the subject\n * The reason for this is so that if the model instance change this function will always return the latest state.\n */\nfunction useLatestState<TState>(model: StateManagerBase<TState>): TState {\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    const s = model.subscribeToState({ next: forceUpdate });\n    return () => s.unsubscribe();\n  }, [model, forceUpdate]);\n\n  return model.state;\n}\n","import React from 'react';\n\nimport { locationService } from '@grafana/runtime';\nimport { Button } from '@grafana/ui';\nimport { AppChromeUpdate } from 'app/core/components/AppChrome/AppChromeUpdate';\nimport { NavToolbarSeparator } from 'app/core/components/AppChrome/NavToolbar/NavToolbarSeparator';\nimport { t } from 'app/core/internationalization';\nimport { DashNavButton } from 'app/features/dashboard/components/DashNav/DashNavButton';\n\nimport { ShareModal } from '../sharing/ShareModal';\n\nimport { DashboardScene } from './DashboardScene';\n\ninterface Props {\n  dashboard: DashboardScene;\n}\n\nexport const NavToolbarActions = React.memo<Props>(({ dashboard }) => {\n  const { actions = [], isEditing, viewPanelKey, isDirty, uid } = dashboard.useState();\n  const toolbarActions = (actions ?? []).map((action) => <action.Component key={action.state.key} model={action} />);\n\n  if (uid) {\n    toolbarActions.push(\n      <DashNavButton\n        key=\"share-dashboard-button\"\n        tooltip={t('dashboard.toolbar.share', 'Share dashboard')}\n        icon=\"share-alt\"\n        iconSize=\"lg\"\n        onClick={() => {\n          dashboard.showModal(new ShareModal({ dashboardRef: dashboard.getRef() }));\n        }}\n      />\n    );\n\n    toolbarActions.push(\n      <DashNavButton\n        key=\"view-in-old-dashboard-button\"\n        tooltip={'View as dashboard'}\n        icon=\"apps\"\n        onClick={() => locationService.push(`/d/${uid}`)}\n      />\n    );\n  }\n\n  toolbarActions.push(<NavToolbarSeparator leftActionsSeparator key=\"separator\" />);\n\n  if (viewPanelKey) {\n    toolbarActions.push(\n      <Button\n        onClick={() => locationService.partial({ viewPanel: null })}\n        tooltip=\"\"\n        key=\"back\"\n        variant=\"primary\"\n        fill=\"text\"\n      >\n        Back to dashboard\n      </Button>\n    );\n\n    return <AppChromeUpdate actions={toolbarActions} />;\n  }\n\n  if (!isEditing) {\n    // TODO check permissions\n    toolbarActions.push(\n      <Button\n        onClick={dashboard.onEnterEditMode}\n        tooltip=\"Enter edit mode\"\n        key=\"edit\"\n        variant=\"primary\"\n        icon=\"pen\"\n        fill=\"text\"\n      >\n        Edit\n      </Button>\n    );\n  } else {\n    // TODO check permissions\n    toolbarActions.push(\n      <Button onClick={dashboard.onSave} tooltip=\"Save as copy\" fill=\"text\" key=\"save-as\">\n        Save as\n      </Button>\n    );\n    toolbarActions.push(\n      <Button onClick={dashboard.onDiscard} tooltip=\"Save changes\" fill=\"text\" key=\"discard\" variant=\"destructive\">\n        Discard\n      </Button>\n    );\n    toolbarActions.push(\n      <Button onClick={dashboard.onSave} tooltip=\"Save changes\" key=\"save\" disabled={!isDirty}>\n        Save\n      </Button>\n    );\n  }\n\n  return <AppChromeUpdate actions={toolbarActions} />;\n});\n\nNavToolbarActions.displayName = 'NavToolbarActions';\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { GrafanaTheme2, PageLayoutType } from '@grafana/data';\nimport { SceneComponentProps, SceneDebugger } from '@grafana/scenes';\nimport { CustomScrollbar, useStyles2 } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { DashboardScene } from './DashboardScene';\nimport { NavToolbarActions } from './NavToolbarActions';\n\nexport function DashboardSceneRenderer({ model }: SceneComponentProps<DashboardScene>) {\n  const { controls, viewPanelKey: viewPanelId, overlay } = model.useState();\n  const styles = useStyles2(getStyles);\n  const location = useLocation();\n  const pageNav = model.getPageNav(location);\n  const bodyToRender = model.getBodyToRender(viewPanelId);\n\n  return (\n    <Page navId=\"scenes\" pageNav={pageNav} layout={PageLayoutType.Custom}>\n      <CustomScrollbar autoHeightMin={'100%'}>\n        <div className={styles.canvasContent}>\n          <NavToolbarActions dashboard={model} />\n          {controls && (\n            <div className={styles.controls}>\n              {controls.map((control) => (\n                <control.Component key={control.state.key} model={control} />\n              ))}\n              <SceneDebugger scene={model} key={'scene-debugger'} />\n            </div>\n          )}\n          <div className={styles.body}>\n            <bodyToRender.Component model={bodyToRender} />\n          </div>\n        </div>\n      </CustomScrollbar>\n      {overlay && <overlay.Component model={overlay} />}\n    </Page>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    canvasContent: css({\n      label: 'canvas-content',\n      display: 'flex',\n      flexDirection: 'column',\n      padding: theme.spacing(0, 2),\n      flexBasis: '100%',\n      flexGrow: 1,\n    }),\n    body: css({\n      label: 'body',\n      flexGrow: 1,\n      display: 'flex',\n      gap: '8px',\n      marginBottom: theme.spacing(2),\n    }),\n    controls: css({\n      display: 'flex',\n      flexWrap: 'wrap',\n      alignItems: 'center',\n      gap: theme.spacing(1),\n      position: 'sticky',\n      top: 0,\n      background: theme.colors.background.canvas,\n      zIndex: 1,\n      padding: theme.spacing(2, 0),\n    }),\n  };\n}\n","import React from 'react';\n\nimport { SceneComponentProps, SceneObjectBase, SceneObjectState, SceneObjectRef } from '@grafana/scenes';\nimport { Drawer } from '@grafana/ui';\nimport { SaveDashboardDiff } from 'app/features/dashboard/components/SaveDashboard/SaveDashboardDiff';\nimport { jsonDiff } from 'app/features/dashboard/components/VersionHistory/utils';\n\nimport { DashboardScene } from '../scene/DashboardScene';\n\nimport { transformSceneToSaveModel } from './transformSceneToSaveModel';\n\ninterface SaveDashboardDrawerState extends SceneObjectState {\n  dashboardRef: SceneObjectRef<DashboardScene>;\n}\n\nexport class SaveDashboardDrawer extends SceneObjectBase<SaveDashboardDrawerState> {\n  onClose = () => {\n    this.state.dashboardRef.resolve().setState({ overlay: undefined });\n  };\n\n  static Component = ({ model }: SceneComponentProps<SaveDashboardDrawer>) => {\n    const dashboard = model.state.dashboardRef.resolve();\n    const initialState = dashboard.getInitialState();\n    const initialScene = new DashboardScene(initialState!);\n    const initialSaveModel = transformSceneToSaveModel(initialScene);\n    const changedSaveModel = transformSceneToSaveModel(dashboard);\n\n    const diff = jsonDiff(initialSaveModel, changedSaveModel);\n\n    // let diffCount = 0;\n    // for (const d of Object.values(diff)) {\n    //   diffCount += d.length;\n    // }\n\n    return (\n      <Drawer title=\"Save dashboard\" subtitle={dashboard.state.title} onClose={model.onClose}>\n        <SaveDashboardDiff diff={diff} oldValue={initialSaveModel} newValue={changedSaveModel} />\n      </Drawer>\n    );\n  };\n}\n","import { Subscription } from 'rxjs';\n\nimport { AnnotationQuery, DashboardCursorSync, dateTimeFormat, DateTimeInput, EventBusSrv } from '@grafana/data';\nimport { TimeRangeUpdatedEvent } from '@grafana/runtime';\nimport { behaviors, SceneDataTransformer, sceneGraph, VizPanel } from '@grafana/scenes';\n\nimport { DashboardScene } from '../scene/DashboardScene';\n\nimport { findVizPanelByKey, getVizPanelKeyForPanelId } from './utils';\n\n/**\n * Will move this to make it the main way we remain somewhat compatible with getDashboardSrv().getCurrent\n */\nexport class DashboardModelCompatibilityWrapper {\n  public events = new EventBusSrv();\n  private _subs = new Subscription();\n\n  public constructor(private _scene: DashboardScene) {\n    const timeRange = sceneGraph.getTimeRange(_scene);\n\n    this._subs.add(\n      timeRange.subscribeToState((state, prev) => {\n        if (state.value !== prev.value) {\n          this.events.publish(new TimeRangeUpdatedEvent(state.value));\n        }\n      })\n    );\n  }\n\n  public get id(): number | null {\n    return this._scene.state.id ?? null;\n  }\n\n  public get uid() {\n    return this._scene.state.uid ?? null;\n  }\n\n  public get title() {\n    return this._scene.state.title;\n  }\n\n  public get meta() {\n    return this._scene.state.meta;\n  }\n\n  public get time() {\n    const time = sceneGraph.getTimeRange(this._scene);\n    return {\n      from: time.state.from,\n      to: time.state.to,\n    };\n  }\n\n  /**\n   * Used from from timeseries migration handler to migrate time regions to dashboard annotations\n   */\n  public get annotations(): { list: AnnotationQuery[] } {\n    console.error('Scenes DashboardModelCompatibilityWrapper.annotations not implemented (yet)');\n    return { list: [] };\n  }\n\n  public getTimezone() {\n    const time = sceneGraph.getTimeRange(this._scene);\n    return time.getTimeZone();\n  }\n\n  public sharedTooltipModeEnabled() {\n    return this._getSyncMode() > 0;\n  }\n\n  public sharedCrosshairModeOnly() {\n    return this._getSyncMode() === 1;\n  }\n\n  private _getSyncMode() {\n    if (this._scene.state.$behaviors) {\n      for (const behavior of this._scene.state.$behaviors) {\n        if (behavior instanceof behaviors.CursorSync) {\n          return behavior.state.sync;\n        }\n      }\n    }\n\n    return DashboardCursorSync.Off;\n  }\n\n  public otherPanelInFullscreen(panel: unknown) {\n    return false;\n  }\n\n  public formatDate(date: DateTimeInput, format?: string) {\n    return dateTimeFormat(date, {\n      format,\n      timeZone: this.getTimezone(),\n    });\n  }\n\n  public getPanelById(id: number): PanelCompatibilityWrapper | null {\n    const vizPanel = findVizPanelByKey(this._scene, getVizPanelKeyForPanelId(id));\n    if (vizPanel) {\n      return new PanelCompatibilityWrapper(vizPanel);\n    }\n\n    return null;\n  }\n\n  public removePanel(panel: PanelCompatibilityWrapper) {\n    // TODO\n    console.error('Scenes DashboardModelCompatibilityWrapper.removePanel not implemented (yet)');\n  }\n\n  public canEditAnnotations(dashboardUID?: string) {\n    // TOOD\n    return false;\n  }\n\n  public panelInitialized() {}\n\n  public destroy() {\n    this.events.removeAllListeners();\n    this._subs.unsubscribe();\n  }\n}\n\nclass PanelCompatibilityWrapper {\n  constructor(private _vizPanel: VizPanel) {}\n\n  public get type() {\n    return this._vizPanel.state.pluginId;\n  }\n\n  public get title() {\n    return this._vizPanel.state.title;\n  }\n\n  public get transformations() {\n    if (this._vizPanel.state.$data instanceof SceneDataTransformer) {\n      return this._vizPanel.state.$data.state.transformations;\n    }\n\n    return [];\n  }\n\n  public refresh() {\n    console.error('Scenes PanelCompatibilityWrapper.refresh no implemented (yet)');\n  }\n\n  public render() {\n    console.error('Scenes PanelCompatibilityWrapper.render no implemented (yet)');\n  }\n\n  public getQueryRunner() {\n    console.error('Scenes PanelCompatibilityWrapper.getQueryRunner no implemented (yet)');\n  }\n}\n","import React from 'react';\n\nimport { LoadingState } from '@grafana/data';\nimport {\n  SceneComponentProps,\n  SceneDataProvider,\n  SceneDataTransformer,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectRef,\n  SceneObjectState,\n  VizPanel,\n} from '@grafana/scenes';\nimport { t } from 'app/core/internationalization';\nimport { InspectTab } from 'app/features/inspector/types';\nimport { GetDataOptions } from 'app/features/query/state/PanelQueryRunner';\n\nimport { InspectDataTab as InspectDataTabOld } from '../../inspector/InspectDataTab';\n\nexport interface InspectDataTabState extends SceneObjectState {\n  panelRef: SceneObjectRef<VizPanel>;\n  options: GetDataOptions;\n}\n\nexport class InspectDataTab extends SceneObjectBase<InspectDataTabState> {\n  public constructor(state: Omit<InspectDataTabState, 'options'>) {\n    super({\n      ...state,\n      options: {\n        withTransforms: true,\n        withFieldConfig: true,\n      },\n    });\n  }\n\n  public getTabLabel() {\n    return t('dashboard.inspect.data-tab', 'Data');\n  }\n\n  public getTabValue() {\n    return InspectTab.Data;\n  }\n\n  public onOptionsChange = (options: GetDataOptions) => {\n    this.setState({ options });\n  };\n\n  static Component = ({ model }: SceneComponentProps<InspectDataTab>) => {\n    const { options } = model.useState();\n    const panel = model.state.panelRef.resolve();\n    const dataProvider = sceneGraph.getData(panel);\n    const { data } = getDataProviderToSubscribeTo(dataProvider, options.withTransforms).useState();\n    const timeRange = sceneGraph.getTimeRange(panel);\n\n    if (!data) {\n      <div>No data found</div>;\n    }\n\n    return (\n      <InspectDataTabOld\n        isLoading={data?.state === LoadingState.Loading}\n        data={data?.series}\n        options={options}\n        hasTransformations={hasTransformations(dataProvider)}\n        timeZone={timeRange.getTimeZone()}\n        panelPluginId={panel.state.pluginId}\n        dataName={panel.state.title}\n        fieldConfig={panel.state.fieldConfig}\n        onOptionsChange={model.onOptionsChange}\n      />\n    );\n  };\n}\n\nfunction hasTransformations(dataProvider: SceneDataProvider) {\n  if (dataProvider instanceof SceneDataTransformer) {\n    return dataProvider.state.transformations.length > 0;\n  }\n\n  return false;\n}\n\nfunction getDataProviderToSubscribeTo(dataProvider: SceneDataProvider, withTransforms: boolean) {\n  if (withTransforms && dataProvider instanceof SceneDataTransformer) {\n    return dataProvider.state.$data!;\n  }\n\n  return dataProvider;\n}\n","import { isEqual } from 'lodash';\nimport React from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport {\n  SceneComponentProps,\n  SceneDataTransformer,\n  sceneGraph,\n  SceneGridItem,\n  SceneGridItemStateLike,\n  SceneObjectBase,\n  SceneObjectRef,\n  SceneObjectState,\n  SceneQueryRunner,\n  sceneUtils,\n  VizPanel,\n} from '@grafana/scenes';\nimport { Button, CodeEditor, Field, Select, useStyles2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\nimport { getPanelDataFrames } from 'app/features/dashboard/components/HelpWizard/utils';\nimport { PanelModel } from 'app/features/dashboard/state';\nimport { getPanelInspectorStyles2 } from 'app/features/inspector/styles';\nimport { InspectTab } from 'app/features/inspector/types';\nimport { getPrettyJSON } from 'app/features/inspector/utils/utils';\nimport { reportPanelInspectInteraction } from 'app/features/search/page/reporting';\n\nimport { PanelRepeaterGridItem } from '../scene/PanelRepeaterGridItem';\nimport { buildGridItemForPanel } from '../serialization/transformSaveModelToScene';\nimport { gridItemToPanel } from '../serialization/transformSceneToSaveModel';\nimport { getDashboardSceneFor, getPanelIdForVizPanel, getQueryRunnerFor } from '../utils/utils';\n\nexport type ShowContent = 'panel-json' | 'panel-data' | 'data-frames';\n\nexport interface InspectJsonTabState extends SceneObjectState {\n  panelRef: SceneObjectRef<VizPanel>;\n  source: ShowContent;\n  jsonText: string;\n  onClose: () => void;\n}\n\nexport class InspectJsonTab extends SceneObjectBase<InspectJsonTabState> {\n  public constructor(state: Omit<InspectJsonTabState, 'source' | 'jsonText'>) {\n    super({\n      ...state,\n      source: 'panel-json',\n      jsonText: getJsonText('panel-json', state.panelRef.resolve()),\n    });\n  }\n\n  public getTabLabel() {\n    return t('dashboard.inspect.json-tab', 'JSON');\n  }\n\n  public getTabValue() {\n    return InspectTab.JSON;\n  }\n\n  public getOptions(): Array<SelectableValue<ShowContent>> {\n    const panel = this.state.panelRef.resolve();\n    const dataProvider = panel.state.$data;\n\n    const options: Array<SelectableValue<ShowContent>> = [\n      {\n        label: t('dashboard.inspect-json.panel-json-label', 'Panel JSON'),\n        description: t(\n          'dashboard.inspect-json.panel-json-description',\n          'The model saved in the dashboard JSON that configures how everything works.'\n        ),\n        value: 'panel-json',\n      },\n    ];\n\n    if (dataProvider) {\n      options.push({\n        label: t('dashboard.inspect-json.panel-data-label', 'Panel data'),\n        description: t(\n          'dashboard.inspect-json.panel-data-description',\n          'The raw model passed to the panel visualization'\n        ),\n        value: 'panel-data',\n      });\n      options.push({\n        label: t('dashboard.inspect-json.dataframe-label', 'DataFrame JSON (from Query)'),\n        description: t(\n          'dashboard.inspect-json.dataframe-description',\n          'Raw data without transformations and field config applied. '\n        ),\n        value: 'data-frames',\n      });\n    }\n\n    return options;\n  }\n\n  public onChangeSource = (value: SelectableValue<ShowContent>) => {\n    this.setState({ source: value.value!, jsonText: getJsonText(value.value!, this.state.panelRef.resolve()) });\n  };\n\n  public onApplyChange = () => {\n    const panel = this.state.panelRef.resolve();\n    const dashboard = getDashboardSceneFor(panel);\n    const jsonObj = JSON.parse(this.state.jsonText);\n\n    const panelModel = new PanelModel(jsonObj);\n    const gridItem = buildGridItemForPanel(panelModel);\n    const newState = sceneUtils.cloneSceneObjectState(gridItem.state);\n\n    if (!(panel.parent instanceof SceneGridItem) || !(gridItem instanceof SceneGridItem)) {\n      console.error('Cannot update state of panel', panel, gridItem);\n      return;\n    }\n\n    this.state.onClose();\n\n    if (!dashboard.state.isEditing) {\n      dashboard.onEnterEditMode();\n    }\n\n    panel.parent.setState(newState);\n\n    //Report relevant updates\n    reportPanelInspectInteraction(InspectTab.JSON, 'apply', {\n      panel_type_changed: panel.state.pluginId !== panelModel.type,\n      panel_id_changed: getPanelIdForVizPanel(panel) !== panelModel.id,\n      panel_grid_pos_changed: hasGridPosChanged(panel.parent.state, newState),\n      panel_targets_changed: hasQueriesChanged(getQueryRunnerFor(panel), getQueryRunnerFor(newState.$data)),\n    });\n  };\n\n  public onCodeEditorBlur = (value: string) => {\n    this.setState({ jsonText: value });\n  };\n\n  public isEditable() {\n    if (this.state.source !== 'panel-json') {\n      return false;\n    }\n\n    const panel = this.state.panelRef.resolve();\n\n    // Only support normal grid items for now and not repeated items\n    if (!(panel.parent instanceof SceneGridItem)) {\n      return false;\n    }\n\n    const dashboard = getDashboardSceneFor(panel);\n    return dashboard.state.meta.canEdit;\n  }\n\n  static Component = ({ model }: SceneComponentProps<InspectJsonTab>) => {\n    const { source: show, jsonText } = model.useState();\n    const styles = useStyles2(getPanelInspectorStyles2);\n    const options = model.getOptions();\n\n    return (\n      <div className={styles.wrap}>\n        <div className={styles.toolbar} aria-label={selectors.components.PanelInspector.Json.content}>\n          <Field label={t('dashboard.inspect-json.select-source', 'Select source')} className=\"flex-grow-1\">\n            <Select\n              inputId=\"select-source-dropdown\"\n              options={options}\n              value={options.find((v) => v.value === show) ?? options[0].value}\n              onChange={model.onChangeSource}\n            />\n          </Field>\n          {model.isEditable() && (\n            <Button className={styles.toolbarItem} onClick={model.onApplyChange}>\n              Apply\n            </Button>\n          )}\n        </div>\n\n        <div className={styles.content}>\n          <AutoSizer disableWidth>\n            {({ height }) => (\n              <CodeEditor\n                width=\"100%\"\n                height={height}\n                language=\"json\"\n                showLineNumbers={true}\n                showMiniMap={jsonText.length > 100}\n                value={jsonText}\n                readOnly={!model.isEditable()}\n                onBlur={model.onCodeEditorBlur}\n              />\n            )}\n          </AutoSizer>\n        </div>\n      </div>\n    );\n  };\n}\n\nfunction getJsonText(show: ShowContent, panel: VizPanel): string {\n  let objToStringify: object = {};\n\n  switch (show) {\n    case 'panel-json': {\n      reportPanelInspectInteraction(InspectTab.JSON, 'panelData');\n\n      if (panel.parent instanceof SceneGridItem || panel.parent instanceof PanelRepeaterGridItem) {\n        objToStringify = gridItemToPanel(panel.parent);\n      }\n      break;\n    }\n\n    case 'panel-data': {\n      reportPanelInspectInteraction(InspectTab.JSON, 'panelJSON');\n\n      const dataProvider = sceneGraph.getData(panel);\n      if (dataProvider.state.data) {\n        objToStringify = panel.applyFieldConfig(dataProvider.state.data);\n      }\n      break;\n    }\n\n    case 'data-frames': {\n      reportPanelInspectInteraction(InspectTab.JSON, 'dataFrame');\n      const dataProvider = sceneGraph.getData(panel);\n\n      if (dataProvider.state.data) {\n        // Get raw untransformed data\n        if (dataProvider instanceof SceneDataTransformer && dataProvider.state.$data?.state.data) {\n          objToStringify = getPanelDataFrames(dataProvider.state.$data!.state.data);\n        } else {\n          objToStringify = getPanelDataFrames(dataProvider.state.data);\n        }\n      }\n    }\n  }\n\n  return getPrettyJSON(objToStringify);\n}\n\nfunction hasGridPosChanged(a: SceneGridItemStateLike, b: SceneGridItemStateLike) {\n  return a.x !== b.x || a.y !== b.y || a.width !== b.width || a.height !== b.height;\n}\n\nfunction hasQueriesChanged(a: SceneQueryRunner | undefined, b: SceneQueryRunner | undefined) {\n  if (a === undefined || b === undefined) {\n    return false;\n  }\n\n  return !isEqual(a.state.queries, b.state.queries);\n}\n","import React from 'react';\n\nimport { DataSourceApi } from '@grafana/data';\nimport {\n  SceneComponentProps,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneObjectRef,\n  VizPanel,\n} from '@grafana/scenes';\nimport { t } from 'app/core/internationalization';\nimport { InspectTab } from 'app/features/inspector/types';\n\nexport interface InspectMetaDataTabState extends SceneObjectState {\n  panelRef: SceneObjectRef<VizPanel>;\n  dataSource: DataSourceApi;\n}\n\nexport class InspectMetaDataTab extends SceneObjectBase<InspectMetaDataTabState> {\n  public getTabLabel() {\n    return t('dashboard.inspect.meta-tab', 'Meta data');\n  }\n\n  public getTabValue() {\n    return InspectTab.Meta;\n  }\n\n  static Component = ({ model }: SceneComponentProps<InspectMetaDataTab>) => {\n    const { panelRef, dataSource } = model.state;\n    const data = sceneGraph.getData(panelRef.resolve());\n    const Inspector = dataSource.components?.MetadataInspector;\n\n    if (!data.state.data || !Inspector) {\n      return null;\n    }\n\n    return <Inspector datasource={dataSource} data={data.state.data.series} />;\n  };\n}\n","import React from 'react';\n\nimport {\n  SceneComponentProps,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneObjectRef,\n  VizPanel,\n} from '@grafana/scenes';\nimport { t } from 'app/core/internationalization';\nimport { QueryInspector } from 'app/features/inspector/QueryInspector';\nimport { InspectTab } from 'app/features/inspector/types';\n\nimport { getQueryRunnerFor } from '../utils/utils';\n\nexport interface InspectQueryTabState extends SceneObjectState {\n  panelRef: SceneObjectRef<VizPanel>;\n}\n\nexport class InspectQueryTab extends SceneObjectBase<InspectQueryTabState> {\n  public getTabLabel() {\n    return t('dashboard.inspect.query-tab', 'Query');\n  }\n\n  public getTabValue() {\n    return InspectTab.Query;\n  }\n\n  public onRefreshQuery = () => {\n    const queryRunner = getQueryRunnerFor(this.state.panelRef.resolve());\n\n    if (queryRunner) {\n      queryRunner.runQueries();\n    }\n  };\n\n  static Component = ({ model }: SceneComponentProps<InspectQueryTab>) => {\n    const data = sceneGraph.getData(model.state.panelRef.resolve()).useState();\n\n    if (!data.data) {\n      return null;\n    }\n\n    return <QueryInspector data={data.data} onRefreshQuery={model.onRefreshQuery} />;\n  };\n}\n","import React from 'react';\n\nimport {\n  SceneComponentProps,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneObjectRef,\n  VizPanel,\n} from '@grafana/scenes';\nimport { t } from 'app/core/internationalization';\nimport { InspectTab } from 'app/features/inspector/types';\n\nimport { InspectStatsTab as OldInspectStatsTab } from '../../inspector/InspectStatsTab';\n\nexport interface InspectDataTabState extends SceneObjectState {\n  panelRef: SceneObjectRef<VizPanel>;\n}\n\nexport class InspectStatsTab extends SceneObjectBase<InspectDataTabState> {\n  public getTabLabel() {\n    return t('dashboard.inspect.stats-tab', 'Stats');\n  }\n\n  public getTabValue() {\n    return InspectTab.Stats;\n  }\n\n  static Component = ({ model }: SceneComponentProps<InspectStatsTab>) => {\n    const data = sceneGraph.getData(model.state.panelRef.resolve()).useState();\n    const timeRange = sceneGraph.getTimeRange(model.state.panelRef.resolve());\n\n    if (!data.data) {\n      return null;\n    }\n\n    return <OldInspectStatsTab data={data.data} timeZone={timeRange.getTimeZone()} />;\n  };\n}\n","import React from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { locationUtil } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport {\n  SceneComponentProps,\n  SceneObjectBase,\n  SceneObjectState,\n  sceneGraph,\n  VizPanel,\n  SceneObjectRef,\n} from '@grafana/scenes';\nimport { Alert, Drawer, Tab, TabsBar } from '@grafana/ui';\nimport { getDataSourceWithInspector } from 'app/features/dashboard/components/Inspector/hooks';\nimport { supportsDataQuery } from 'app/features/dashboard/components/PanelEditor/utils';\n\nimport { InspectDataTab } from './InspectDataTab';\nimport { InspectJsonTab } from './InspectJsonTab';\nimport { InspectMetaDataTab } from './InspectMetaDataTab';\nimport { InspectQueryTab } from './InspectQueryTab';\nimport { InspectStatsTab } from './InspectStatsTab';\nimport { SceneInspectTab } from './types';\n\ninterface PanelInspectDrawerState extends SceneObjectState {\n  tabs?: SceneInspectTab[];\n  panelRef: SceneObjectRef<VizPanel>;\n  pluginNotLoaded?: boolean;\n  canEdit?: boolean;\n}\n\nexport class PanelInspectDrawer extends SceneObjectBase<PanelInspectDrawerState> {\n  static Component = PanelInspectRenderer;\n\n  constructor(state: PanelInspectDrawerState) {\n    super(state);\n    this.addActivationHandler(() => this._activationHandler());\n  }\n\n  private _activationHandler() {\n    this.buildTabs(0);\n  }\n\n  /**\n   * We currently have no async await to get the panel plugin from the VizPanel.\n   * That is why there is a retry argument here and a setTimeout, to try again a bit later.\n   */\n  async buildTabs(retry: number) {\n    const panelRef = this.state.panelRef;\n    const panel = panelRef.resolve();\n    const plugin = panel.getPlugin();\n    const tabs: SceneInspectTab[] = [];\n\n    if (!plugin) {\n      if (retry < 2000) {\n        setTimeout(() => this.buildTabs(retry + 100), 100);\n      } else {\n        this.setState({ pluginNotLoaded: true });\n      }\n    }\n\n    if (supportsDataQuery(plugin)) {\n      const data = sceneGraph.getData(panel);\n\n      tabs.push(new InspectDataTab({ panelRef }));\n      tabs.push(new InspectStatsTab({ panelRef }));\n      tabs.push(new InspectQueryTab({ panelRef }));\n\n      const dsWithInspector = await getDataSourceWithInspector(data.state.data);\n      if (dsWithInspector) {\n        tabs.push(new InspectMetaDataTab({ panelRef, dataSource: dsWithInspector }));\n      }\n    }\n\n    tabs.push(new InspectJsonTab({ panelRef, onClose: this.onClose }));\n\n    this.setState({ tabs });\n  }\n\n  getDrawerTitle() {\n    const panel = this.state.panelRef.resolve();\n    return sceneGraph.interpolate(panel, `Inspect: ${panel.state.title}`);\n  }\n\n  onClose = () => {\n    locationService.partial({ inspect: null, inspectTab: null });\n  };\n}\n\nfunction PanelInspectRenderer({ model }: SceneComponentProps<PanelInspectDrawer>) {\n  const { tabs, pluginNotLoaded } = model.useState();\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n\n  if (!tabs) {\n    return null;\n  }\n\n  const urlTab = queryParams.get('inspectTab');\n  const currentTab = tabs.find((tab) => tab.getTabValue() === urlTab) ?? tabs[0];\n\n  return (\n    <Drawer\n      title={model.getDrawerTitle()}\n      onClose={model.onClose}\n      size=\"md\"\n      tabs={\n        <TabsBar>\n          {tabs.map((tab) => {\n            return (\n              <Tab\n                key={tab.state.key!}\n                label={tab.getTabLabel()}\n                active={tab === currentTab}\n                href={locationUtil.getUrlForPartial(location, { inspectTab: tab.getTabValue() })}\n              />\n            );\n          })}\n        </TabsBar>\n      }\n    >\n      {pluginNotLoaded && (\n        <Alert title=\"Panel plugin not loaded\">\n          Make sure the panel you want to inspect is visible and has been displayed before opening inspect.\n        </Alert>\n      )}\n      {currentTab && currentTab.Component && <currentTab.Component model={currentTab} />}\n    </Drawer>\n  );\n}\n","import { Unsubscribable } from 'rxjs';\n\nimport { AppEvents } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { SceneObjectUrlSyncHandler, SceneObjectUrlValues } from '@grafana/scenes';\nimport appEvents from 'app/core/app_events';\n\nimport { PanelInspectDrawer } from '../inspect/PanelInspectDrawer';\nimport { findVizPanelByKey } from '../utils/utils';\n\nimport { DashboardScene, DashboardSceneState } from './DashboardScene';\nimport { DashboardRepeatsProcessedEvent } from './types';\n\nexport class DashboardSceneUrlSync implements SceneObjectUrlSyncHandler {\n  private _eventSub?: Unsubscribable;\n\n  constructor(private _scene: DashboardScene) {}\n\n  getKeys(): string[] {\n    return ['inspect', 'viewPanel'];\n  }\n\n  getUrlState(): SceneObjectUrlValues {\n    const state = this._scene.state;\n    return { inspect: state.inspectPanelKey, viewPanel: state.viewPanelKey };\n  }\n\n  updateFromUrl(values: SceneObjectUrlValues): void {\n    const { inspectPanelKey: inspectPanelId, viewPanelKey: viewPanelId } = this._scene.state;\n    const update: Partial<DashboardSceneState> = {};\n\n    // Handle inspect object state\n    if (typeof values.inspect === 'string') {\n      const panel = findVizPanelByKey(this._scene, values.inspect);\n      if (!panel) {\n        appEvents.emit(AppEvents.alertError, ['Panel not found']);\n        locationService.partial({ inspect: null });\n        return;\n      }\n\n      update.inspectPanelKey = values.inspect;\n      update.overlay = new PanelInspectDrawer({ panelRef: panel.getRef() });\n    } else if (inspectPanelId) {\n      update.inspectPanelKey = undefined;\n      update.overlay = undefined;\n    }\n\n    // Handle view panel state\n    if (typeof values.viewPanel === 'string') {\n      const panel = findVizPanelByKey(this._scene, values.viewPanel);\n      if (!panel) {\n        // // If we are trying to view a repeat clone that can't be found it might be that the repeats have not been processed yet\n        if (values.viewPanel.indexOf('clone')) {\n          this._handleViewRepeatClone(values.viewPanel);\n          return;\n        }\n\n        appEvents.emit(AppEvents.alertError, ['Panel not found']);\n        locationService.partial({ viewPanel: null });\n        return;\n      }\n\n      update.viewPanelKey = values.viewPanel;\n    } else if (viewPanelId) {\n      update.viewPanelKey = undefined;\n    }\n\n    if (Object.keys(update).length > 0) {\n      this._scene.setState(update);\n    }\n  }\n\n  private _handleViewRepeatClone(viewPanel: string) {\n    if (!this._eventSub) {\n      this._eventSub = this._scene.subscribeToEvent(DashboardRepeatsProcessedEvent, () => {\n        const panel = findVizPanelByKey(this._scene, viewPanel);\n        if (panel) {\n          this._eventSub?.unsubscribe();\n          this._scene.setState({ viewPanelKey: viewPanel });\n        }\n      });\n    }\n  }\n}\n","import * as H from 'history';\nimport { Unsubscribable } from 'rxjs';\n\nimport { CoreApp, DataQueryRequest, NavModelItem, UrlQueryMap } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport {\n  getUrlSyncManager,\n  SceneFlexLayout,\n  SceneGridItem,\n  SceneGridLayout,\n  SceneObject,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneObjectStateChangedEvent,\n  sceneUtils,\n} from '@grafana/scenes';\nimport { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { DashboardMeta } from 'app/types';\n\nimport { DashboardSceneRenderer } from '../scene/DashboardSceneRenderer';\nimport { SaveDashboardDrawer } from '../serialization/SaveDashboardDrawer';\nimport { DashboardModelCompatibilityWrapper } from '../utils/DashboardModelCompatibilityWrapper';\nimport {\n  findVizPanelByKey,\n  forceRenderChildren,\n  getClosestVizPanel,\n  getDashboardUrl,\n  getPanelIdForVizPanel,\n} from '../utils/utils';\n\nimport { DashboardSceneUrlSync } from './DashboardSceneUrlSync';\n\nexport interface DashboardSceneState extends SceneObjectState {\n  /** The title */\n  title: string;\n  /** A uid when saved */\n  uid?: string;\n  /** @deprecated */\n  id?: number | null;\n  /** Layout of panels */\n  body: SceneObject;\n  /** NavToolbar actions */\n  actions?: SceneObject[];\n  /** Fixed row at the top of the canvas with for example variables and time range controls */\n  controls?: SceneObject[];\n  /** True when editing */\n  isEditing?: boolean;\n  /** True when user made a change */\n  isDirty?: boolean;\n  /** meta flags */\n  meta: DashboardMeta;\n  /** Panel to inspect */\n  inspectPanelKey?: string;\n  /** Panel to view in full screen */\n  viewPanelKey?: string;\n  /** Scene object that handles the current drawer or modal */\n  overlay?: SceneObject;\n}\n\nexport class DashboardScene extends SceneObjectBase<DashboardSceneState> {\n  static Component = DashboardSceneRenderer;\n\n  /**\n   * Handles url sync\n   */\n  protected _urlSync = new DashboardSceneUrlSync(this);\n  /**\n   * State before editing started\n   */\n  private _initialState?: DashboardSceneState;\n  /**\n   * Url state before editing started\n   */\n  private _initiallUrlState?: UrlQueryMap;\n  /**\n   * change tracking subscription\n   */\n  private _changeTrackerSub?: Unsubscribable;\n\n  public constructor(state: Partial<DashboardSceneState>) {\n    super({\n      title: 'Dashboard',\n      meta: {},\n      body: state.body ?? new SceneFlexLayout({ children: [] }),\n      ...state,\n    });\n\n    this.addActivationHandler(() => this._activationHandler());\n  }\n\n  private _activationHandler() {\n    window.__grafanaSceneContext = this;\n\n    if (this.state.isEditing) {\n      this.startTrackingChanges();\n    }\n\n    const oldDashboardWrapper = new DashboardModelCompatibilityWrapper(this);\n\n    // @ts-expect-error\n    getDashboardSrv().setCurrent(oldDashboardWrapper);\n\n    // Deactivation logic\n    return () => {\n      window.__grafanaSceneContext = undefined;\n      this.stopTrackingChanges();\n      this.stopUrlSync();\n      oldDashboardWrapper.destroy();\n    };\n  }\n\n  public startUrlSync() {\n    getUrlSyncManager().initSync(this);\n  }\n\n  public stopUrlSync() {\n    getUrlSyncManager().cleanUp(this);\n  }\n\n  public onEnterEditMode = () => {\n    // Save this state\n    this._initialState = sceneUtils.cloneSceneObjectState(this.state);\n    this._initiallUrlState = locationService.getSearchObject();\n\n    // Switch to edit mode\n    this.setState({ isEditing: true });\n\n    // Propagate change edit mode change to children\n    if (this.state.body instanceof SceneGridLayout) {\n      this.state.body.setState({ isDraggable: true, isResizable: true });\n      forceRenderChildren(this.state.body, true);\n    }\n\n    this.startTrackingChanges();\n  };\n\n  public onDiscard = () => {\n    // No need to listen to changes anymore\n    this.stopTrackingChanges();\n    // Stop url sync before updating url\n    this.stopUrlSync();\n    // Now we can update url\n    locationService.partial(this._initiallUrlState!, true);\n    // Update state and disable editing\n    this.setState({ ...this._initialState, isEditing: false });\n    // and start url sync again\n    this.startUrlSync();\n\n    // Disable grid dragging\n    if (this.state.body instanceof SceneGridLayout) {\n      this.state.body.setState({ isDraggable: false, isResizable: false });\n      forceRenderChildren(this.state.body, true);\n    }\n  };\n\n  public onSave = () => {\n    this.setState({ overlay: new SaveDashboardDrawer({ dashboardRef: this.getRef() }) });\n  };\n\n  public getPageNav(location: H.Location) {\n    let pageNav: NavModelItem = {\n      text: this.state.title,\n      url: getDashboardUrl({\n        uid: this.state.uid,\n        currentQueryParams: location.search,\n        updateQuery: { viewPanel: null, inspect: null },\n      }),\n    };\n\n    if (this.state.viewPanelKey) {\n      pageNav = {\n        text: 'View panel',\n        parentItem: pageNav,\n      };\n    }\n\n    return pageNav;\n  }\n\n  /**\n   * Returns the body (layout) or the full view panel\n   */\n  public getBodyToRender(viewPanelKey?: string): SceneObject {\n    const viewPanel = findVizPanelByKey(this, viewPanelKey);\n    return viewPanel ?? this.state.body;\n  }\n\n  private startTrackingChanges() {\n    this._changeTrackerSub = this.subscribeToEvent(\n      SceneObjectStateChangedEvent,\n      (event: SceneObjectStateChangedEvent) => {\n        if (event.payload.changedObject instanceof SceneGridItem) {\n          this.setIsDirty();\n        }\n      }\n    );\n  }\n\n  private setIsDirty() {\n    if (!this.state.isDirty) {\n      this.setState({ isDirty: true });\n    }\n  }\n\n  private stopTrackingChanges() {\n    this._changeTrackerSub?.unsubscribe();\n  }\n\n  public getInitialState(): DashboardSceneState | undefined {\n    return this._initialState;\n  }\n\n  public showModal(modal: SceneObject) {\n    this.setState({ overlay: modal });\n  }\n\n  public closeModal() {\n    this.setState({ overlay: undefined });\n  }\n\n  /**\n   * Called by the SceneQueryRunner to privide contextural parameters (tracking) props for the request\n   */\n  public enrichDataRequest(sceneObject: SceneObject): Partial<DataQueryRequest> {\n    const panel = getClosestVizPanel(sceneObject);\n\n    return {\n      app: CoreApp.Dashboard,\n      dashboardUID: this.state.uid,\n      panelId: (panel && getPanelIdForVizPanel(panel)) ?? 0,\n    };\n  }\n\n  canEditDashboard() {\n    return Boolean(this.state.meta.canEdit || this.state.meta.canMakeEditable);\n  }\n}\n","import React from 'react';\n\nimport { SceneComponentProps, SceneObjectBase, SceneObjectState, VizPanel } from '@grafana/scenes';\nimport { PanelModel } from 'app/features/dashboard/state';\nimport { getLibraryPanel } from 'app/features/library-panels/state/api';\n\nimport { createPanelDataProvider } from '../utils/createPanelDataProvider';\n\ninterface LibraryVizPanelState extends SceneObjectState {\n  // Library panels use title from dashboard JSON's panel model, not from library panel definition, hence we pass it.\n  title: string;\n  uid: string;\n  name: string;\n  panel?: VizPanel;\n}\n\nexport class LibraryVizPanel extends SceneObjectBase<LibraryVizPanelState> {\n  static Component = LibraryPanelRenderer;\n\n  constructor({ uid, title, key, name }: Pick<LibraryVizPanelState, 'uid' | 'title' | 'key' | 'name'>) {\n    super({ uid, title, key, name });\n\n    this.addActivationHandler(this._onActivate);\n  }\n\n  private _onActivate = () => {\n    this.loadLibraryPanelFromPanelModel();\n  };\n\n  private async loadLibraryPanelFromPanelModel() {\n    const { title } = this.state;\n    let vizPanel = new VizPanel({ title });\n    try {\n      const libPanel = await getLibraryPanel(this.state.uid, true);\n      const libPanelModel = new PanelModel(libPanel.model);\n      vizPanel.setState({\n        options: libPanelModel.options ?? {},\n        fieldConfig: libPanelModel.fieldConfig,\n        pluginVersion: libPanelModel.pluginVersion,\n        displayMode: libPanelModel.transparent ? 'transparent' : undefined,\n        $data: createPanelDataProvider(libPanelModel),\n      });\n    } catch (err) {\n      vizPanel.setState({\n        _pluginLoadError: 'Unable to load library panel: ' + this.state.uid,\n      });\n    }\n\n    this.setState({ panel: vizPanel });\n  }\n}\n\nfunction LibraryPanelRenderer({ model }: SceneComponentProps<LibraryVizPanel>) {\n  const { panel } = model.useState();\n\n  if (!panel) {\n    return null;\n  }\n\n  return <panel.Component model={panel} />;\n}\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport { config } from '@grafana/runtime';\nimport {\n  VizPanel,\n  SceneObjectBase,\n  VariableDependencyConfig,\n  SceneVariable,\n  SceneGridLayout,\n  SceneVariableSet,\n  SceneComponentProps,\n  SceneGridItemStateLike,\n  SceneGridItemLike,\n  sceneGraph,\n  MultiValueVariable,\n  LocalValueVariable,\n} from '@grafana/scenes';\nimport { GRID_CELL_HEIGHT, GRID_CELL_VMARGIN } from 'app/core/constants';\n\nimport { getMultiVariableValues } from '../utils/utils';\n\nimport { DashboardRepeatsProcessedEvent } from './types';\n\ninterface PanelRepeaterGridItemState extends SceneGridItemStateLike {\n  source: VizPanel;\n  repeatedPanels?: VizPanel[];\n  variableName: string;\n  itemHeight?: number;\n  repeatDirection?: RepeatDirection | string;\n  maxPerRow?: number;\n}\n\nexport type RepeatDirection = 'v' | 'h';\n\nexport class PanelRepeaterGridItem extends SceneObjectBase<PanelRepeaterGridItemState> implements SceneGridItemLike {\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    variableNames: [this.state.variableName],\n    onVariableUpdatesCompleted: this._onVariableChanged.bind(this),\n  });\n\n  private _isWaitingForVariables = false;\n\n  public constructor(state: PanelRepeaterGridItemState) {\n    super(state);\n\n    this.addActivationHandler(() => this._activationHandler());\n  }\n\n  private _activationHandler() {\n    this._subs.add(this.subscribeToState((newState, prevState) => this._handleGridResize(newState, prevState)));\n\n    // If we our variable is ready we can process repeats on activation\n    if (sceneGraph.hasVariableDependencyInLoadingState(this)) {\n      this._isWaitingForVariables = true;\n    } else {\n      this._performRepeat();\n    }\n  }\n\n  private _onVariableChanged(changedVariables: Set<SceneVariable>, dependencyChanged: boolean): void {\n    if (dependencyChanged) {\n      this._performRepeat();\n      return;\n    }\n\n    // If we are waiting for variables and the variable is no longer loading then we are ready to repeat as well\n    if (this._isWaitingForVariables && !sceneGraph.hasVariableDependencyInLoadingState(this)) {\n      this._isWaitingForVariables = false;\n      this._performRepeat();\n    }\n  }\n\n  /**\n   * Uses the current repeat item count to calculate the user intended desired itemHeight\n   */\n  private _handleGridResize(newState: PanelRepeaterGridItemState, prevState: PanelRepeaterGridItemState) {\n    const itemCount = this.state.repeatedPanels?.length ?? 1;\n    const stateChange: Partial<PanelRepeaterGridItemState> = {};\n\n    // Height changed\n    if (newState.height === prevState.height) {\n      return;\n    }\n\n    if (this.getRepeatDirection() === 'v') {\n      const itemHeight = Math.ceil(newState.height! / itemCount);\n      stateChange.itemHeight = itemHeight;\n    } else {\n      const rowCount = Math.ceil(itemCount / this.getMaxPerRow());\n      stateChange.itemHeight = Math.ceil(newState.height! / rowCount);\n    }\n\n    if (stateChange.itemHeight !== this.state.itemHeight) {\n      this.setState(stateChange);\n    }\n  }\n\n  private _performRepeat() {\n    const variable = sceneGraph.lookupVariable(this.state.variableName, this);\n    if (!variable) {\n      console.error('SceneGridItemRepeater: Variable not found');\n      return;\n    }\n\n    if (!(variable instanceof MultiValueVariable)) {\n      console.error('PanelRepeaterGridItem: Variable is not a MultiValueVariable');\n      return;\n    }\n\n    const panelToRepeat = this.state.source;\n    const { values, texts } = getMultiVariableValues(variable);\n    const repeatedPanels: VizPanel[] = [];\n\n    // Loop through variable values and create repeates\n    for (let index = 0; index < values.length; index++) {\n      const clone = panelToRepeat.clone({\n        $variables: new SceneVariableSet({\n          variables: [\n            new LocalValueVariable({ name: variable.state.name, value: values[index], text: String(texts[index]) }),\n          ],\n        }),\n        key: `${panelToRepeat.state.key}-clone-${index}`,\n      });\n\n      repeatedPanels.push(clone);\n    }\n\n    const direction = this.getRepeatDirection();\n    const stateChange: Partial<PanelRepeaterGridItemState> = { repeatedPanels: repeatedPanels };\n    const itemHeight = this.state.itemHeight ?? 10;\n    const prevHeight = this.state.height;\n    const maxPerRow = this.getMaxPerRow();\n\n    if (direction === 'h') {\n      const rowCount = Math.ceil(repeatedPanels.length / maxPerRow);\n      stateChange.height = rowCount * itemHeight;\n    } else {\n      stateChange.height = repeatedPanels.length * itemHeight;\n    }\n\n    this.setState(stateChange);\n\n    // In case we updated our height the grid layout needs to be update\n    if (prevHeight !== this.state.height) {\n      const layout = sceneGraph.getLayout(this);\n      if (layout instanceof SceneGridLayout) {\n        layout.forceRender();\n      }\n    }\n\n    // Used from dashboard url sync\n    this.publishEvent(new DashboardRepeatsProcessedEvent({ source: this }), true);\n  }\n\n  private getMaxPerRow(): number {\n    return this.state.maxPerRow ?? 4;\n  }\n\n  public getRepeatDirection(): RepeatDirection {\n    return this.state.repeatDirection === 'v' ? 'v' : 'h';\n  }\n\n  public getClassName() {\n    return 'panel-repeater-grid-item';\n  }\n\n  public static Component = ({ model }: SceneComponentProps<PanelRepeaterGridItem>) => {\n    const { repeatedPanels, itemHeight } = model.useState();\n    const itemCount = repeatedPanels?.length ?? 0;\n    const layoutStyle = useLayoutStyle(model.getRepeatDirection(), itemCount, model.getMaxPerRow(), itemHeight ?? 10);\n\n    if (!repeatedPanels) {\n      return null;\n    }\n\n    return (\n      <div className={layoutStyle}>\n        {repeatedPanels.map((panel) => (\n          <div className={itemStyle} key={panel.state.key}>\n            <panel.Component model={panel} key={panel.state.key} />\n          </div>\n        ))}\n      </div>\n    );\n  };\n}\n\nfunction useLayoutStyle(direction: RepeatDirection, itemCount: number, maxPerRow: number, itemHeight: number) {\n  return useMemo(() => {\n    const theme = config.theme2;\n\n    // In mobile responsive layout we have to calculate the absolute height\n    const mobileHeight = itemHeight * GRID_CELL_HEIGHT * itemCount + (itemCount - 1) * GRID_CELL_VMARGIN;\n\n    if (direction === 'h') {\n      const rowCount = Math.ceil(itemCount / maxPerRow);\n      const columnCount = Math.ceil(itemCount / rowCount);\n\n      return css({\n        display: 'grid',\n        height: '100%',\n        width: '100%',\n        gridTemplateColumns: `repeat(${columnCount}, 1fr)`,\n        gridTemplateRows: `repeat(${rowCount}, 1fr)`,\n        gridColumnGap: theme.spacing(1),\n        gridRowGap: theme.spacing(1),\n\n        [theme.breakpoints.down('md')]: {\n          display: 'flex',\n          flexDirection: 'column',\n          height: mobileHeight,\n        },\n      });\n    }\n\n    // Vertical is a bit simpler\n    return css({\n      display: 'flex',\n      height: '100%',\n      width: '100%',\n      flexDirection: 'column',\n      gap: theme.spacing(1),\n      [theme.breakpoints.down('md')]: {\n        height: mobileHeight,\n      },\n    });\n  }, [direction, itemCount, maxPerRow, itemHeight]);\n}\n\nconst itemStyle = css({\n  display: 'flex',\n  flexGrow: 1,\n  position: 'relative',\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { dateMath, getDefaultTimeRange, GrafanaTheme2, rangeUtil, TimeRange } from '@grafana/data';\nimport {\n  SceneComponentProps,\n  sceneGraph,\n  SceneTimeRangeLike,\n  SceneTimeRangeState,\n  SceneTimeRangeTransformerBase,\n} from '@grafana/scenes';\nimport { Icon, PanelChrome, TimePickerTooltip, Tooltip, useStyles2 } from '@grafana/ui';\nimport { TimeOverrideResult } from 'app/features/dashboard/utils/panel';\n\ninterface PanelTimeRangeState extends SceneTimeRangeState {\n  timeFrom?: string;\n  timeShift?: string;\n  hideTimeOverride?: boolean;\n  timeInfo?: string;\n}\n\nexport class PanelTimeRange extends SceneTimeRangeTransformerBase<PanelTimeRangeState> implements SceneTimeRangeLike {\n  public static Component = PanelTimeRangeRenderer;\n\n  public constructor(state: Partial<PanelTimeRangeState> = {}) {\n    super({\n      ...state,\n      // This time range is not valid until activation\n      from: 'now-6h',\n      to: 'now',\n      value: getDefaultTimeRange(),\n    });\n  }\n\n  protected ancestorTimeRangeChanged(timeRange: SceneTimeRangeState): void {\n    const overrideResult = this.getTimeOverride(timeRange.value);\n    this.setState({ value: overrideResult.timeRange, timeInfo: overrideResult.timeInfo });\n  }\n\n  private getTimeOverride(parentTimeRange: TimeRange): TimeOverrideResult {\n    const { timeFrom, timeShift } = this.state;\n    const newTimeData = { timeInfo: '', timeRange: parentTimeRange };\n\n    if (timeFrom) {\n      const timeFromInterpolated = sceneGraph.interpolate(this, this.state.timeFrom);\n      const timeFromInfo = rangeUtil.describeTextRange(timeFromInterpolated);\n\n      if (timeFromInfo.invalid) {\n        newTimeData.timeInfo = 'invalid time override';\n        return newTimeData;\n      }\n\n      // Only evaluate if the timeFrom if parent time is relative\n      if (rangeUtil.isRelativeTimeRange(parentTimeRange.raw)) {\n        newTimeData.timeInfo = timeFromInfo.display;\n        newTimeData.timeRange = {\n          from: dateMath.parse(timeFromInfo.from)!,\n          to: dateMath.parse(timeFromInfo.to)!,\n          raw: { from: timeFromInfo.from, to: timeFromInfo.to },\n        };\n      }\n    }\n\n    if (timeShift) {\n      const timeShiftInterpolated = sceneGraph.interpolate(this, this.state.timeShift);\n      const timeShiftInfo = rangeUtil.describeTextRange(timeShiftInterpolated);\n\n      if (timeShiftInfo.invalid) {\n        newTimeData.timeInfo = 'invalid timeshift';\n        return newTimeData;\n      }\n\n      const timeShift = '-' + timeShiftInterpolated;\n      newTimeData.timeInfo += ' timeshift ' + timeShift;\n      const from = dateMath.parseDateMath(timeShift, newTimeData.timeRange.from, false)!;\n      const to = dateMath.parseDateMath(timeShift, newTimeData.timeRange.to, true)!;\n\n      newTimeData.timeRange = { from, to, raw: { from, to } };\n    }\n\n    return newTimeData;\n  }\n}\n\nfunction PanelTimeRangeRenderer({ model }: SceneComponentProps<PanelTimeRange>) {\n  const { timeInfo, hideTimeOverride } = model.useState();\n  const styles = useStyles2(getStyles);\n\n  if (!timeInfo || hideTimeOverride) {\n    return null;\n  }\n\n  return (\n    <Tooltip content={<TimePickerTooltip timeRange={model.state.value} timeZone={model.getTimeZone()} />}>\n      <PanelChrome.TitleItem className={styles.timeshift}>\n        <Icon name=\"clock-nine\" size=\"sm\" /> {timeInfo}\n      </PanelChrome.TitleItem>\n    </Tooltip>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    timeshift: css({\n      color: theme.colors.text.link,\n      gap: theme.spacing(0.5),\n    }),\n  };\n};\n","import {\n  LocalValueVariable,\n  MultiValueVariable,\n  sceneGraph,\n  SceneGridItemLike,\n  SceneGridLayout,\n  SceneGridRow,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneVariable,\n  SceneVariableSet,\n  VariableDependencyConfig,\n  VariableValueSingle,\n} from '@grafana/scenes';\n\nimport { getMultiVariableValues } from '../utils/utils';\n\nimport { DashboardRepeatsProcessedEvent } from './types';\n\ninterface RowRepeaterBehaviorState extends SceneObjectState {\n  variableName: string;\n  sources: SceneGridItemLike[];\n}\n\n/**\n * This behavior will run an effect function when specified variables change\n */\n\nexport class RowRepeaterBehavior extends SceneObjectBase<RowRepeaterBehaviorState> {\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    variableNames: [this.state.variableName],\n    onVariableUpdatesCompleted: this._onVariableChanged.bind(this),\n  });\n\n  private _isWaitingForVariables = false;\n\n  public constructor(state: RowRepeaterBehaviorState) {\n    super(state);\n\n    this.addActivationHandler(() => this._activationHandler());\n  }\n\n  private _activationHandler() {\n    // If we our variable is ready we can process repeats on activation\n    if (sceneGraph.hasVariableDependencyInLoadingState(this)) {\n      this._isWaitingForVariables = true;\n    } else {\n      this._performRepeat();\n    }\n  }\n\n  private _onVariableChanged(changedVariables: Set<SceneVariable>, dependencyChanged: boolean): void {\n    if (dependencyChanged) {\n      this._performRepeat();\n      return;\n    }\n\n    // If we are waiting for variables and the variable is no longer loading then we are ready to repeat as well\n    if (this._isWaitingForVariables && !sceneGraph.hasVariableDependencyInLoadingState(this)) {\n      this._isWaitingForVariables = false;\n      this._performRepeat();\n    }\n  }\n\n  private _performRepeat() {\n    const variable = sceneGraph.lookupVariable(this.state.variableName, this.parent?.parent!);\n\n    if (!variable) {\n      console.error('RepeatedRowBehavior: Variable not found');\n      return;\n    }\n\n    if (!(variable instanceof MultiValueVariable)) {\n      console.error('RepeatedRowBehavior: Variable is not a MultiValueVariable');\n      return;\n    }\n\n    if (!(this.parent instanceof SceneGridRow)) {\n      console.error('RepeatedRowBehavior: Parent is not a SceneGridRow');\n      return;\n    }\n\n    const layout = sceneGraph.getLayout(this);\n\n    if (!(layout instanceof SceneGridLayout)) {\n      console.error('RepeatedRowBehavior: Layout is not a SceneGridLayout');\n      return;\n    }\n\n    const rowToRepeat = this.parent;\n    const { values, texts } = getMultiVariableValues(variable);\n    const rows: SceneGridRow[] = [];\n    const rowContentHeight = getRowContentHeight(this.state.sources);\n    let maxYOfRows = 0;\n\n    // Loop through variable values and create repeates\n    for (let index = 0; index < values.length; index++) {\n      const children: SceneGridItemLike[] = [];\n\n      // Loop through panels inside row\n      for (const source of this.state.sources) {\n        const sourceItemY = source.state.y ?? 0;\n        const itemY = sourceItemY + (rowContentHeight + 1) * index;\n\n        const itemClone = source.clone({\n          key: `${source.state.key}-clone-${index}`,\n          y: itemY,\n        });\n\n        //Make sure all the child scene objects have unique keys\n        ensureUniqueKeys(itemClone, index);\n\n        children.push(itemClone);\n\n        if (maxYOfRows < itemY + itemClone.state.height!) {\n          maxYOfRows = itemY + itemClone.state.height!;\n        }\n      }\n\n      const rowClone = this.getRowClone(rowToRepeat, index, values[index], texts[index], rowContentHeight, children);\n      rows.push(rowClone);\n    }\n\n    updateLayout(layout, rows, maxYOfRows, rowToRepeat);\n\n    // Used from dashboard url sync\n    this.publishEvent(new DashboardRepeatsProcessedEvent({ source: this }), true);\n  }\n\n  getRowClone(\n    rowToRepeat: SceneGridRow,\n    index: number,\n    value: VariableValueSingle,\n    text: VariableValueSingle,\n    rowContentHeight: number,\n    children: SceneGridItemLike[]\n  ): SceneGridRow {\n    if (index === 0) {\n      rowToRepeat.setState({\n        // not activated\n        $variables: new SceneVariableSet({\n          variables: [new LocalValueVariable({ name: this.state.variableName, value, text: String(text) })],\n        }),\n        children,\n      });\n      return rowToRepeat;\n    }\n\n    const sourceRowY = rowToRepeat.state.y ?? 0;\n\n    return rowToRepeat.clone({\n      key: `${rowToRepeat.state.key}-clone-${index}`,\n      $variables: new SceneVariableSet({\n        variables: [new LocalValueVariable({ name: this.state.variableName, value, text: String(text) })],\n      }),\n      $behaviors: [],\n      children,\n      y: sourceRowY + rowContentHeight * index + index,\n    });\n  }\n}\n\nfunction getRowContentHeight(panels: SceneGridItemLike[]): number {\n  let maxY = 0;\n  let minY = Number.MAX_VALUE;\n\n  for (const panel of panels) {\n    if (panel.state.y! + panel.state.height! > maxY) {\n      maxY = panel.state.y! + panel.state.height!;\n    }\n    if (panel.state.y! < minY) {\n      minY = panel.state.y!;\n    }\n  }\n\n  return maxY - minY;\n}\n\nfunction updateLayout(layout: SceneGridLayout, rows: SceneGridRow[], maxYOfRows: number, rowToRepeat: SceneGridRow) {\n  const allChildren = getLayoutChildrenFilterOutRepeatClones(layout, rowToRepeat);\n  const index = allChildren.indexOf(rowToRepeat);\n\n  if (index === -1) {\n    throw new Error('RowRepeaterBehavior: Parent row not found in layout children');\n  }\n\n  const newChildren = [...allChildren.slice(0, index), ...rows, ...allChildren.slice(index + 1)];\n\n  // Is there grid items after rows?\n  if (allChildren.length > index + 1) {\n    const childrenAfter = allChildren.slice(index + 1);\n    const firstChildAfterY = childrenAfter[0].state.y!;\n    const diff = maxYOfRows - firstChildAfterY;\n\n    for (const child of childrenAfter) {\n      if (child.state.y! < maxYOfRows) {\n        child.setState({ y: child.state.y! + diff });\n      }\n    }\n  }\n\n  layout.setState({ children: newChildren });\n}\n\nfunction getLayoutChildrenFilterOutRepeatClones(layout: SceneGridLayout, rowToRepeat: SceneGridRow) {\n  return layout.state.children.filter((child) => {\n    if (child.state.key?.startsWith(`${rowToRepeat.state.key}-clone-`)) {\n      return false;\n    }\n\n    return true;\n  });\n}\n\nfunction ensureUniqueKeys(item: SceneGridItemLike, rowIndex: number) {\n  item.forEachChild((child) => {\n    child.setState({ key: `${child.state.key}-row-${rowIndex}` });\n    ensureUniqueKeys(child, rowIndex);\n  });\n}\n","import { Observable, ReplaySubject, Unsubscribable } from 'rxjs';\n\nimport { getDefaultTimeRange, LoadingState } from '@grafana/data';\nimport {\n  SceneDataProvider,\n  SceneDataProviderResult,\n  SceneDataState,\n  SceneDataTransformer,\n  SceneDeactivationHandler,\n  SceneObject,\n  SceneObjectBase,\n} from '@grafana/scenes';\nimport { DashboardQuery } from 'app/plugins/datasource/dashboard/types';\n\nimport { getVizPanelKeyForPanelId } from '../utils/utils';\n\nexport interface ShareQueryDataProviderState extends SceneDataState {\n  query: DashboardQuery;\n}\n\nexport class ShareQueryDataProvider extends SceneObjectBase<ShareQueryDataProviderState> implements SceneDataProvider {\n  private _querySub: Unsubscribable | undefined;\n  private _sourceDataDeactivationHandler?: SceneDeactivationHandler;\n  private _results = new ReplaySubject<SceneDataProviderResult>();\n\n  constructor(state: ShareQueryDataProviderState) {\n    super(state);\n\n    this.addActivationHandler(() => {\n      // TODO handle changes to query model (changed panelId / withTransforms)\n      //this.subscribeToState(this._onStateChanged);\n\n      this._subscribeToSource();\n\n      return () => {\n        if (this._querySub) {\n          this._querySub.unsubscribe();\n        }\n        if (this._sourceDataDeactivationHandler) {\n          this._sourceDataDeactivationHandler();\n        }\n      };\n    });\n  }\n\n  public getResultsStream(): Observable<SceneDataProviderResult> {\n    return this._results;\n  }\n\n  private _subscribeToSource() {\n    const { query } = this.state;\n\n    if (this._querySub) {\n      this._querySub.unsubscribe();\n    }\n\n    if (!query.panelId) {\n      return;\n    }\n\n    const keyToFind = getVizPanelKeyForPanelId(query.panelId);\n    const source = findObjectInScene(this.getRoot(), (scene: SceneObject) => scene.state.key === keyToFind);\n\n    if (!source) {\n      console.log('Shared dashboard query refers to a panel that does not exist in the scene');\n      return;\n    }\n\n    let sourceData = source.state.$data;\n    if (!sourceData) {\n      console.log('No source data found for shared dashboard query');\n      return;\n    }\n\n    // This will activate if sourceData is part of hidden panel\n    // Also make sure the sourceData is not deactivated if hidden later\n    this._sourceDataDeactivationHandler = sourceData.activate();\n\n    if (sourceData instanceof SceneDataTransformer) {\n      if (!query.withTransforms) {\n        if (!sourceData.state.$data) {\n          throw new Error('No source inner query runner found in data transformer');\n        }\n        sourceData = sourceData.state.$data;\n      }\n    }\n\n    this._querySub = sourceData.subscribeToState((state) => {\n      this._results.next({\n        origin: this,\n        data: state.data || {\n          state: LoadingState.Done,\n          series: [],\n          timeRange: getDefaultTimeRange(),\n        },\n      });\n\n      this.setState({ data: state.data });\n    });\n\n    // Copy the initial state\n    this.setState({ data: sourceData.state.data });\n  }\n}\n\nexport function findObjectInScene(scene: SceneObject, check: (scene: SceneObject) => boolean): SceneObject | null {\n  if (check(scene)) {\n    return scene;\n  }\n\n  let found: SceneObject | null = null;\n\n  scene.forEachChild((child) => {\n    let maybe = findObjectInScene(child, check);\n    if (maybe) {\n      found = maybe;\n    }\n  });\n\n  return found;\n}\n","import { BusEventWithPayload } from '@grafana/data';\nimport { SceneObject } from '@grafana/scenes';\n\nexport interface DashboardRepeatsProcessedEventPayload {\n  source: SceneObject;\n}\n\nexport class DashboardRepeatsProcessedEvent extends BusEventWithPayload<DashboardRepeatsProcessedEventPayload> {\n  public static type = 'dashboard-repeats-processed';\n}\n","import {\n  AnnotationEvent,\n  arrayToDataFrame,\n  DataTopic,\n  getDefaultTimeRange,\n  PanelData,\n  LoadingState,\n} from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { dataLayers } from '@grafana/scenes';\nimport { AnnotationQuery } from '@grafana/schema';\nimport { PublicAnnotationsDataSource } from 'app/features/query/state/DashboardQueryRunner/PublicAnnotationsDataSource';\n\n/**\n * This class is an extension to dataLayers.AnnotationsDataLayer to provide support for public dashboards.\n */\nexport class DashboardAnnotationsDataLayer extends dataLayers.AnnotationsDataLayer {\n  protected async resolveDataSource(query: AnnotationQuery) {\n    if (config.publicDashboardAccessToken) {\n      return new PublicAnnotationsDataSource();\n    }\n    return super.resolveDataSource(query);\n  }\n\n  protected processEvents(\n    query: AnnotationQuery,\n    events: {\n      state: LoadingState;\n      events: AnnotationEvent[];\n    }\n  ) {\n    if (config.publicDashboardAccessToken) {\n      const stateUpdate: PanelData = {\n        series: [],\n        timeRange: getDefaultTimeRange(),\n        state: events.state,\n      };\n\n      const df = arrayToDataFrame(events.events);\n      df.meta = {\n        ...df.meta,\n        dataTopic: DataTopic.Annotations,\n      };\n\n      stateUpdate.annotations = [df];\n\n      return stateUpdate;\n    } else {\n      return super.processEvents(query, events);\n    }\n  }\n}\n","import { locationUtil, PanelMenuItem } from '@grafana/data';\nimport { locationService, reportInteraction } from '@grafana/runtime';\nimport { sceneGraph, VizPanel, VizPanelMenu } from '@grafana/scenes';\nimport { contextSrv } from 'app/core/core';\nimport { t } from 'app/core/internationalization';\nimport { getExploreUrl } from 'app/core/utils/explore';\nimport { InspectTab } from 'app/features/inspector/types';\n\nimport { ShareModal } from '../sharing/ShareModal';\nimport { getDashboardUrl, getPanelIdForVizPanel, getQueryRunnerFor } from '../utils/utils';\n\nimport { DashboardScene } from './DashboardScene';\n\n/**\n * Behavior is called when VizPanelMenu is activated (ie when it's opened).\n */\nexport function panelMenuBehavior(menu: VizPanelMenu) {\n  const asyncFunc = async () => {\n    // hm.. add another generic param to SceneObject to specify parent type?\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    const panel = menu.parent as VizPanel;\n    const location = locationService.getLocation();\n    const items: PanelMenuItem[] = [];\n    const panelId = getPanelIdForVizPanel(panel);\n    const dashboard = panel.getRoot();\n    const panelPlugin = panel.getPlugin();\n    const queryRunner = getQueryRunnerFor(panel);\n\n    if (dashboard instanceof DashboardScene) {\n      items.push({\n        text: t('panel.header-menu.view', `View`),\n        iconClassName: 'eye',\n        shortcut: 'v',\n        onClick: () => reportInteraction('dashboards_panelheader_menu', { item: 'view' }),\n        href: locationUtil.getUrlForPartial(location, { viewPanel: panel.state.key }),\n      });\n\n      // We could check isEditing here but I kind of think this should always be in the menu,\n      // and going into panel edit should make the dashboard go into edit mode is it's not already\n      items.push({\n        text: t('panel.header-menu.edit', `Edit`),\n        iconClassName: 'eye',\n        shortcut: 'v',\n        onClick: () => reportInteraction('dashboards_panelheader_menu', { item: 'edit' }),\n        href: getDashboardUrl({\n          uid: dashboard.state.uid,\n          subPath: `/panel-edit/${panelId}`,\n          currentQueryParams: location.search,\n        }),\n      });\n\n      items.push({\n        text: t('panel.header-menu.share', `Share`),\n        iconClassName: 'share-alt',\n        onClick: () => {\n          reportInteraction('dashboards_panelheader_menu', { item: 'share' });\n          dashboard.showModal(new ShareModal({ panelRef: panel.getRef(), dashboardRef: dashboard.getRef() }));\n        },\n        shortcut: 'p s',\n      });\n    }\n\n    if (contextSrv.hasAccessToExplore() && !panelPlugin?.meta.skipDataQuery && queryRunner) {\n      const timeRange = sceneGraph.getTimeRange(panel);\n\n      items.push({\n        text: t('panel.header-menu.explore', `Explore`),\n        iconClassName: 'compass',\n        shortcut: 'p x',\n        onClick: () => reportInteraction('dashboards_panelheader_menu', { item: 'explore' }),\n        href: await getExploreUrl({\n          queries: queryRunner.state.queries,\n          dsRef: queryRunner.state.datasource,\n          timeRange: timeRange.state.value,\n          scopedVars: { __sceneObject: { value: panel } },\n        }),\n      });\n    }\n\n    items.push({\n      text: t('panel.header-menu.inspect', `Inspect`),\n      iconClassName: 'info-circle',\n      shortcut: 'i',\n      onClick: () => reportInteraction('dashboards_panelheader_menu', { item: 'inspect', tab: InspectTab.Data }),\n      href: locationUtil.getUrlForPartial(location, { inspect: panel.state.key }),\n    });\n\n    menu.setState({ items });\n  };\n\n  asyncFunc();\n}\n","import { AnnotationChangeEvent, AnnotationEventUIModel, CoreApp, DataFrame } from '@grafana/data';\nimport { AdHocFilterSet, dataLayers, SceneDataLayers, VizPanel } from '@grafana/scenes';\nimport { DataSourceRef } from '@grafana/schema';\nimport { AdHocFilterItem, PanelContext } from '@grafana/ui';\nimport { deleteAnnotation, saveAnnotation, updateAnnotation } from 'app/features/annotations/api';\n\nimport { getDashboardSceneFor, getPanelIdForVizPanel, getQueryRunnerFor } from '../utils/utils';\n\nimport { DashboardScene } from './DashboardScene';\n\nexport function setDashboardPanelContext(vizPanel: VizPanel, context: PanelContext) {\n  context.app = CoreApp.Dashboard;\n\n  context.canAddAnnotations = () => {\n    const dashboard = getDashboardSceneFor(vizPanel);\n    const builtInLayer = getBuiltInAnnotationsLayer(dashboard);\n\n    // When there is no builtin annotations query we disable the ability to add annotations\n    if (!builtInLayer || !dashboard.canEditDashboard()) {\n      return false;\n    }\n\n    // If RBAC is enabled there are additional conditions to check.\n    return Boolean(dashboard.state.meta.annotationsPermissions?.dashboard.canAdd);\n  };\n\n  context.canEditAnnotations = (dashboardUID?: string) => {\n    const dashboard = getDashboardSceneFor(vizPanel);\n\n    if (!dashboard.canEditDashboard()) {\n      return false;\n    }\n\n    if (dashboardUID) {\n      return Boolean(dashboard.state.meta.annotationsPermissions?.dashboard.canEdit);\n    }\n\n    return Boolean(dashboard.state.meta.annotationsPermissions?.organization.canEdit);\n  };\n\n  context.canDeleteAnnotations = (dashboardUID?: string) => {\n    const dashboard = getDashboardSceneFor(vizPanel);\n\n    if (!dashboard.canEditDashboard()) {\n      return false;\n    }\n\n    if (dashboardUID) {\n      return Boolean(dashboard.state.meta.annotationsPermissions?.dashboard.canDelete);\n    }\n\n    return Boolean(dashboard.state.meta.annotationsPermissions?.organization.canDelete);\n  };\n\n  context.onAnnotationCreate = async (event: AnnotationEventUIModel) => {\n    const dashboard = getDashboardSceneFor(vizPanel);\n\n    const isRegion = event.from !== event.to;\n    const anno = {\n      dashboardUID: dashboard.state.uid,\n      panelId: getPanelIdForVizPanel(vizPanel),\n      isRegion,\n      time: event.from,\n      timeEnd: isRegion ? event.to : 0,\n      tags: event.tags,\n      text: event.description,\n    };\n\n    await saveAnnotation(anno);\n\n    reRunBuiltInAnnotationsLayer(dashboard);\n\n    context.eventBus.publish(new AnnotationChangeEvent(anno));\n  };\n\n  context.onAnnotationUpdate = async (event: AnnotationEventUIModel) => {\n    const dashboard = getDashboardSceneFor(vizPanel);\n\n    const isRegion = event.from !== event.to;\n    const anno = {\n      id: event.id,\n      dashboardUID: dashboard.state.uid,\n      panelId: getPanelIdForVizPanel(vizPanel),\n      isRegion,\n      time: event.from,\n      timeEnd: isRegion ? event.to : 0,\n      tags: event.tags,\n      text: event.description,\n    };\n\n    await updateAnnotation(anno);\n\n    reRunBuiltInAnnotationsLayer(dashboard);\n\n    context.eventBus.publish(new AnnotationChangeEvent(anno));\n  };\n\n  context.onAnnotationDelete = async (id: string) => {\n    await deleteAnnotation({ id });\n\n    reRunBuiltInAnnotationsLayer(getDashboardSceneFor(vizPanel));\n\n    context.eventBus.publish(new AnnotationChangeEvent({ id }));\n  };\n\n  context.onAddAdHocFilter = (newFilter: AdHocFilterItem) => {\n    const dashboard = getDashboardSceneFor(vizPanel);\n\n    const queryRunner = getQueryRunnerFor(vizPanel);\n    if (!queryRunner) {\n      return;\n    }\n\n    const filterSet = getAdHocFilterSetFor(dashboard, queryRunner.state.datasource);\n    updateAdHocFilterSet(filterSet, newFilter);\n  };\n\n  context.onUpdateData = (frames: DataFrame[]): Promise<boolean> => {\n    // TODO\n    //return onUpdatePanelSnapshotData(this.props.panel, frames);\n    return Promise.resolve(true);\n  };\n}\n\nfunction getBuiltInAnnotationsLayer(scene: DashboardScene): dataLayers.AnnotationsDataLayer | undefined {\n  // When there is no builtin annotations query we disable the ability to add annotations\n  if (scene.state.$data instanceof SceneDataLayers) {\n    for (const layer of scene.state.$data.state.layers) {\n      if (layer instanceof dataLayers.AnnotationsDataLayer) {\n        if (layer.state.isEnabled && layer.state.query.builtIn) {\n          return layer;\n        }\n      }\n    }\n  }\n\n  return undefined;\n}\n\nfunction reRunBuiltInAnnotationsLayer(scene: DashboardScene) {\n  const layer = getBuiltInAnnotationsLayer(scene);\n  if (layer) {\n    layer.runLayer();\n  }\n}\n\nexport function getAdHocFilterSetFor(scene: DashboardScene, ds: DataSourceRef | null | undefined) {\n  const controls = scene.state.controls ?? [];\n\n  for (const control of controls) {\n    if (control instanceof AdHocFilterSet) {\n      if (control.state.datasource === ds || control.state.datasource?.uid === ds?.uid) {\n        return control;\n      }\n    }\n  }\n\n  const newSet = new AdHocFilterSet({ datasource: ds });\n\n  // Add it to the scene\n  scene.setState({\n    controls: [controls[0], newSet, ...controls.slice(1)],\n  });\n\n  return newSet;\n}\n\nfunction updateAdHocFilterSet(filterSet: AdHocFilterSet, newFilter: AdHocFilterItem) {\n  // Check if we need to update an existing filter\n  for (const filter of filterSet.state.filters) {\n    if (filter.key === newFilter.key) {\n      filterSet.setState({\n        filters: filterSet.state.filters.map((f) => {\n          if (f.key === newFilter.key) {\n            return newFilter;\n          }\n          return f;\n        }),\n      });\n      return;\n    }\n  }\n\n  // Add new filter\n  filterSet.setState({\n    filters: [...filterSet.state.filters, newFilter],\n  });\n}\n","import { PanelModel as PanelModelFromData, PanelPlugin } from '@grafana/data';\nimport { autoMigrateAngular, PanelModel } from 'app/features/dashboard/state/PanelModel';\n\nexport function getAngularPanelMigrationHandler(oldModel: PanelModel) {\n  return function handleAngularPanelMigrations(panel: PanelModelFromData, plugin: PanelPlugin) {\n    if (plugin.angularPanelCtrl) {\n      panel.options = { angularOptions: oldModel.getOptionsToRemember() };\n      return;\n    }\n\n    if (oldModel.autoMigrateFrom) {\n      const wasAngular = autoMigrateAngular[oldModel.autoMigrateFrom] != null;\n      const oldOptions = oldModel.getOptionsToRemember();\n      const prevPluginId = oldModel.autoMigrateFrom;\n\n      if (plugin.onPanelTypeChanged) {\n        const prevOptions = wasAngular ? { angular: oldOptions } : oldOptions.options;\n        Object.assign(panel.options, plugin.onPanelTypeChanged(panel, prevPluginId, prevOptions, panel.fieldConfig));\n      }\n    }\n  };\n}\n","import {\n  AdHocVariableModel,\n  ConstantVariableModel,\n  CustomVariableModel,\n  DataSourceVariableModel,\n  IntervalVariableModel,\n  QueryVariableModel,\n  VariableModel,\n} from '@grafana/data';\nimport {\n  VizPanel,\n  SceneTimePicker,\n  SceneGridLayout,\n  SceneGridRow,\n  SceneTimeRange,\n  SceneVariableSet,\n  VariableValueSelectors,\n  SceneVariable,\n  CustomVariable,\n  DataSourceVariable,\n  QueryVariable,\n  ConstantVariable,\n  IntervalVariable,\n  SceneRefreshPicker,\n  SceneGridItem,\n  SceneObject,\n  SceneControlsSpacer,\n  VizPanelMenu,\n  behaviors,\n  VizPanelState,\n  SceneGridItemLike,\n  SceneDataLayers,\n  SceneDataLayerProvider,\n  SceneDataLayerControls,\n  AdHocFilterSet,\n} from '@grafana/scenes';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\nimport { DashboardDTO } from 'app/types';\n\nimport { DashboardAnnotationsDataLayer } from '../scene/DashboardAnnotationsDataLayer';\nimport { DashboardScene } from '../scene/DashboardScene';\nimport { LibraryVizPanel } from '../scene/LibraryVizPanel';\nimport { panelMenuBehavior } from '../scene/PanelMenuBehavior';\nimport { PanelRepeaterGridItem } from '../scene/PanelRepeaterGridItem';\nimport { PanelTimeRange } from '../scene/PanelTimeRange';\nimport { RowRepeaterBehavior } from '../scene/RowRepeaterBehavior';\nimport { setDashboardPanelContext } from '../scene/setDashboardPanelContext';\nimport { createPanelDataProvider } from '../utils/createPanelDataProvider';\nimport {\n  getCurrentValueForOldIntervalModel,\n  getIntervalsFromOldIntervalModel,\n  getVizPanelKeyForPanelId,\n} from '../utils/utils';\n\nimport { getAngularPanelMigrationHandler } from './angularMigration';\n\nexport interface DashboardLoaderState {\n  dashboard?: DashboardScene;\n  isLoading?: boolean;\n  loadError?: string;\n}\n\nexport function transformSaveModelToScene(rsp: DashboardDTO): DashboardScene {\n  // Just to have migrations run\n  const oldModel = new DashboardModel(rsp.dashboard, rsp.meta, {\n    autoMigrateOldPanels: false,\n  });\n\n  return createDashboardSceneFromDashboardModel(oldModel);\n}\n\nexport function createSceneObjectsForPanels(oldPanels: PanelModel[]): SceneGridItemLike[] {\n  // collects all panels and rows\n  const panels: SceneGridItemLike[] = [];\n\n  // indicates expanded row that's currently processed\n  let currentRow: PanelModel | null = null;\n  // collects panels in the currently processed, expanded row\n  let currentRowPanels: SceneGridItemLike[] = [];\n\n  for (const panel of oldPanels) {\n    if (panel.type === 'row') {\n      if (!currentRow) {\n        if (Boolean(panel.collapsed)) {\n          // collapsed rows contain their panels within the row model\n          panels.push(createRowFromPanelModel(panel, []));\n        } else {\n          // indicate new row to be processed\n          currentRow = panel;\n        }\n      } else {\n        // when a row has been processed, and we hit a next one for processing\n        if (currentRow.id !== panel.id) {\n          // commit previous row panels\n          panels.push(createRowFromPanelModel(currentRow, currentRowPanels));\n\n          currentRow = panel;\n          currentRowPanels = [];\n        }\n      }\n    } else if (panel.libraryPanel?.uid && !('model' in panel.libraryPanel)) {\n      const gridItem = buildGridItemForLibPanel(panel);\n      if (gridItem) {\n        panels.push(gridItem);\n      }\n    } else {\n      const panelObject = buildGridItemForPanel(panel);\n\n      // when processing an expanded row, collect its panels\n      if (currentRow) {\n        currentRowPanels.push(panelObject);\n      } else {\n        panels.push(panelObject);\n      }\n    }\n  }\n\n  // commit a row if it's the last one\n  if (currentRow) {\n    panels.push(createRowFromPanelModel(currentRow, currentRowPanels));\n  }\n\n  return panels;\n}\n\nfunction createRowFromPanelModel(row: PanelModel, content: SceneGridItemLike[]): SceneGridItemLike {\n  if (Boolean(row.collapsed)) {\n    if (row.panels) {\n      content = row.panels.map(buildGridItemForPanel);\n    }\n  }\n\n  let behaviors: SceneObject[] | undefined;\n  let children = content;\n\n  if (row.repeat) {\n    // For repeated rows the children are stored in the behavior\n    children = [];\n    behaviors = [\n      new RowRepeaterBehavior({\n        variableName: row.repeat,\n        sources: content,\n      }),\n    ];\n  }\n\n  return new SceneGridRow({\n    key: getVizPanelKeyForPanelId(row.id),\n    title: row.title,\n    y: row.gridPos.y,\n    isCollapsed: row.collapsed,\n    children: children,\n    $behaviors: behaviors,\n  });\n}\n\nexport function createDashboardSceneFromDashboardModel(oldModel: DashboardModel) {\n  let variables: SceneVariableSet | undefined = undefined;\n  let layers: SceneDataLayerProvider[] = [];\n  let filtersSets: AdHocFilterSet[] = [];\n\n  if (oldModel.templating?.list?.length) {\n    const variableObjects = oldModel.templating.list\n      .map((v) => {\n        try {\n          if (isAdhocVariable(v)) {\n            filtersSets.push(\n              new AdHocFilterSet({\n                name: v.name,\n                datasource: v.datasource,\n                filters: v.filters ?? [],\n                baseFilters: v.baseFilters ?? [],\n              })\n            );\n            return null;\n          }\n\n          return createSceneVariableFromVariableModel(v);\n        } catch (err) {\n          console.error(err);\n          return null;\n        }\n      })\n      // TODO: Remove filter\n      // Added temporarily to allow skipping non-compatible variables\n      .filter((v): v is SceneVariable => Boolean(v));\n\n    variables = new SceneVariableSet({\n      variables: variableObjects,\n    });\n  }\n\n  if (oldModel.annotations?.list?.length) {\n    layers = oldModel.annotations?.list.map((a) => {\n      // Each annotation query is an individual data layer\n      return new DashboardAnnotationsDataLayer({\n        query: a,\n        name: a.name,\n        isEnabled: Boolean(a.enable),\n        isHidden: Boolean(a.hide),\n      });\n    });\n  }\n\n  const controls: SceneObject[] = [\n    new VariableValueSelectors({}),\n    ...filtersSets,\n    new SceneDataLayerControls(),\n    new SceneControlsSpacer(),\n    new SceneTimePicker({}),\n    new SceneRefreshPicker({\n      refresh: oldModel.refresh,\n      intervals: oldModel.timepicker.refresh_intervals,\n    }),\n  ];\n\n  return new DashboardScene({\n    title: oldModel.title,\n    uid: oldModel.uid,\n    id: oldModel.id,\n    meta: oldModel.meta,\n    body: new SceneGridLayout({\n      isLazy: true,\n      children: createSceneObjectsForPanels(oldModel.panels),\n    }),\n    $timeRange: new SceneTimeRange({\n      from: oldModel.time.from,\n      to: oldModel.time.to,\n      fiscalYearStartMonth: oldModel.fiscalYearStartMonth,\n      timeZone: oldModel.timezone,\n      weekStart: oldModel.weekStart,\n    }),\n    $variables: variables,\n    $behaviors: [\n      new behaviors.CursorSync({\n        sync: oldModel.graphTooltip,\n      }),\n    ],\n    $data:\n      layers.length > 0\n        ? new SceneDataLayers({\n            layers,\n          })\n        : undefined,\n    controls: controls,\n  });\n}\n\nexport function createSceneVariableFromVariableModel(variable: VariableModel): SceneVariable {\n  const commonProperties = {\n    name: variable.name,\n    label: variable.label,\n  };\n  if (isCustomVariable(variable)) {\n    return new CustomVariable({\n      ...commonProperties,\n      value: variable.current.value,\n      text: variable.current.text,\n      description: variable.description,\n      query: variable.query,\n      isMulti: variable.multi,\n      allValue: variable.allValue || undefined,\n      includeAll: variable.includeAll,\n      defaultToAll: Boolean(variable.includeAll),\n      skipUrlSync: variable.skipUrlSync,\n      hide: variable.hide,\n    });\n  } else if (isQueryVariable(variable)) {\n    return new QueryVariable({\n      ...commonProperties,\n      value: variable.current.value,\n      text: variable.current.text,\n      description: variable.description,\n      query: variable.query,\n      datasource: variable.datasource,\n      sort: variable.sort,\n      refresh: variable.refresh,\n      regex: variable.regex,\n      allValue: variable.allValue || undefined,\n      includeAll: variable.includeAll,\n      defaultToAll: Boolean(variable.includeAll),\n      isMulti: variable.multi,\n      skipUrlSync: variable.skipUrlSync,\n      hide: variable.hide,\n    });\n  } else if (isDataSourceVariable(variable)) {\n    return new DataSourceVariable({\n      ...commonProperties,\n      value: variable.current.value,\n      text: variable.current.text,\n      description: variable.description,\n      regex: variable.regex,\n      pluginId: variable.query,\n      allValue: variable.allValue || undefined,\n      includeAll: variable.includeAll,\n      defaultToAll: Boolean(variable.includeAll),\n      skipUrlSync: variable.skipUrlSync,\n      isMulti: variable.multi,\n      hide: variable.hide,\n    });\n  } else if (isIntervalVariable(variable)) {\n    const intervals = getIntervalsFromOldIntervalModel(variable);\n    const currentInterval = getCurrentValueForOldIntervalModel(variable, intervals);\n    return new IntervalVariable({\n      ...commonProperties,\n      value: currentInterval,\n      description: variable.description,\n      intervals: intervals,\n      autoEnabled: variable.auto,\n      autoStepCount: variable.auto_count,\n      autoMinInterval: variable.auto_min,\n      refresh: variable.refresh,\n      skipUrlSync: variable.skipUrlSync,\n      hide: variable.hide,\n    });\n  } else if (isConstantVariable(variable)) {\n    return new ConstantVariable({\n      ...commonProperties,\n      description: variable.description,\n      value: variable.query,\n      skipUrlSync: variable.skipUrlSync,\n      hide: variable.hide,\n    });\n  } else {\n    throw new Error(`Scenes: Unsupported variable type ${variable.type}`);\n  }\n}\n\nexport function buildGridItemForLibPanel(panel: PanelModel) {\n  if (!panel.libraryPanel) {\n    return null;\n  }\n\n  return new SceneGridItem({\n    body: new LibraryVizPanel({\n      title: panel.title,\n      uid: panel.libraryPanel.uid,\n      name: panel.libraryPanel.name,\n      key: getVizPanelKeyForPanelId(panel.id),\n    }),\n    y: panel.gridPos.y,\n    x: panel.gridPos.x,\n    width: panel.gridPos.w,\n    height: panel.gridPos.h,\n  });\n}\n\nexport function buildGridItemForPanel(panel: PanelModel): SceneGridItemLike {\n  const vizPanelState: VizPanelState = {\n    key: getVizPanelKeyForPanelId(panel.id),\n    title: panel.title,\n    pluginId: panel.type,\n    options: panel.options ?? {},\n    fieldConfig: panel.fieldConfig,\n    pluginVersion: panel.pluginVersion,\n    displayMode: panel.transparent ? 'transparent' : undefined,\n    // To be replaced with it's own option persited option instead derived\n    hoverHeader: !panel.title && !panel.timeFrom && !panel.timeShift,\n    $data: createPanelDataProvider(panel),\n    menu: new VizPanelMenu({\n      $behaviors: [panelMenuBehavior],\n    }),\n    extendPanelContext: setDashboardPanelContext,\n    _UNSAFE_customMigrationHandler: getAngularPanelMigrationHandler(panel),\n  };\n\n  if (panel.timeFrom || panel.timeShift) {\n    vizPanelState.$timeRange = new PanelTimeRange({\n      timeFrom: panel.timeFrom,\n      timeShift: panel.timeShift,\n      hideTimeOverride: panel.hideTimeOverride,\n    });\n  }\n\n  if (panel.repeat) {\n    const repeatDirection = panel.repeatDirection ?? 'h';\n\n    return new PanelRepeaterGridItem({\n      key: `grid-item-${panel.id}`,\n      x: panel.gridPos.x,\n      y: panel.gridPos.y,\n      width: repeatDirection === 'h' ? 24 : panel.gridPos.w,\n      height: panel.gridPos.h,\n      itemHeight: panel.gridPos.h,\n      source: new VizPanel(vizPanelState),\n      variableName: panel.repeat,\n      repeatedPanels: [],\n      repeatDirection: panel.repeatDirection,\n      maxPerRow: panel.maxPerRow,\n    });\n  }\n\n  return new SceneGridItem({\n    key: `grid-item-${panel.id}`,\n    x: panel.gridPos.x,\n    y: panel.gridPos.y,\n    width: panel.gridPos.w,\n    height: panel.gridPos.h,\n    body: new VizPanel(vizPanelState),\n  });\n}\n\nconst isCustomVariable = (v: VariableModel): v is CustomVariableModel => v.type === 'custom';\nconst isQueryVariable = (v: VariableModel): v is QueryVariableModel => v.type === 'query';\nconst isDataSourceVariable = (v: VariableModel): v is DataSourceVariableModel => v.type === 'datasource';\nconst isConstantVariable = (v: VariableModel): v is ConstantVariableModel => v.type === 'constant';\nconst isIntervalVariable = (v: VariableModel): v is IntervalVariableModel => v.type === 'interval';\nconst isAdhocVariable = (v: VariableModel): v is AdHocVariableModel => v.type === 'adhoc';\n","export const GRAFANA_DATASOURCE_REF = {\n  name: 'grafana',\n  uid: 'grafana',\n};\n","import { SceneDataLayerProvider, dataLayers } from '@grafana/scenes';\nimport { AnnotationQuery } from '@grafana/schema';\n\nexport function dataLayersToAnnotations(layers: SceneDataLayerProvider[]) {\n  const annotations: AnnotationQuery[] = [];\n  for (const layer of layers) {\n    if (!(layer instanceof dataLayers.AnnotationsDataLayer)) {\n      continue;\n    }\n    const result = {\n      ...layer.state.query,\n      enable: Boolean(layer.state.isEnabled),\n      hide: Boolean(layer.state.isHidden),\n    };\n\n    annotations.push(result);\n  }\n\n  return annotations;\n}\n","import {\n  SceneVariableSet,\n  QueryVariable,\n  CustomVariable,\n  DataSourceVariable,\n  ConstantVariable,\n  IntervalVariable,\n} from '@grafana/scenes';\nimport { VariableModel, VariableHide, VariableRefresh, VariableSort } from '@grafana/schema';\n\nimport { getIntervalsQueryFromNewIntervalModel } from '../utils/utils';\n\nexport function sceneVariablesSetToVariables(set: SceneVariableSet) {\n  const variables: VariableModel[] = [];\n  for (const variable of set.state.variables) {\n    const commonProperties = {\n      name: variable.state.name,\n      label: variable.state.label,\n      description: variable.state.description,\n      skipUrlSync: Boolean(variable.state.skipUrlSync),\n      hide: variable.state.hide || VariableHide.dontHide,\n      type: variable.state.type,\n    };\n    if (variable instanceof QueryVariable) {\n      variables.push({\n        ...commonProperties,\n        current: {\n          // @ts-expect-error\n          value: variable.state.value,\n          // @ts-expect-error\n          text: variable.state.text,\n        },\n        options: [],\n        query: variable.state.query,\n        datasource: variable.state.datasource,\n        sort: variable.state.sort,\n        refresh: variable.state.refresh,\n        regex: variable.state.regex,\n        allValue: variable.state.allValue,\n        includeAll: variable.state.includeAll,\n        multi: variable.state.isMulti,\n        skipUrlSync: variable.state.skipUrlSync,\n        hide: variable.state.hide || VariableHide.dontHide,\n      });\n    } else if (variable instanceof CustomVariable) {\n      variables.push({\n        ...commonProperties,\n        current: {\n          // @ts-expect-error\n          text: variable.state.value,\n          // @ts-expect-error\n          value: variable.state.value,\n        },\n        options: [],\n        query: variable.state.query,\n        multi: variable.state.isMulti,\n        allValue: variable.state.allValue,\n        includeAll: variable.state.includeAll,\n      });\n    } else if (variable instanceof DataSourceVariable) {\n      variables.push({\n        ...commonProperties,\n        current: {\n          // @ts-expect-error\n          value: variable.state.value,\n          // @ts-expect-error\n          text: variable.state.text,\n        },\n        options: [],\n        regex: variable.state.regex,\n        refresh: VariableRefresh.onDashboardLoad,\n        query: variable.state.pluginId,\n        multi: variable.state.isMulti,\n        allValue: variable.state.allValue,\n        includeAll: variable.state.includeAll,\n      });\n    } else if (variable instanceof ConstantVariable) {\n      variables.push({\n        ...commonProperties,\n        current: {\n          // @ts-expect-error\n          value: variable.state.value,\n          // @ts-expect-error\n          text: variable.state.value,\n        },\n        // @ts-expect-error\n        query: variable.state.value,\n        hide: VariableHide.hideVariable,\n      });\n    } else if (variable instanceof IntervalVariable) {\n      const intervals = getIntervalsQueryFromNewIntervalModel(variable.state.intervals);\n      variables.push({\n        ...commonProperties,\n        current: {\n          text: variable.state.value,\n          value: variable.state.value,\n        },\n        query: intervals,\n        hide: VariableHide.hideVariable,\n        refresh: variable.state.refresh,\n        // @ts-expect-error ?? how to fix this without adding the ts-expect-error\n        auto: variable.state.autoEnabled,\n        auto_min: variable.state.autoMinInterval,\n        auto_count: variable.state.autoStepCount,\n      });\n    } else {\n      throw new Error('Unsupported variable type');\n    }\n  }\n\n  // Remove some defaults\n  for (const variable of variables) {\n    if (variable.hide === VariableHide.dontHide) {\n      delete variable.hide;\n    }\n\n    if (!variable.skipUrlSync) {\n      delete variable.skipUrlSync;\n    }\n\n    if (variable.label === '') {\n      delete variable.label;\n    }\n\n    if (!variable.multi) {\n      delete variable.multi;\n    }\n\n    if (variable.sort === VariableSort.disabled) {\n      delete variable.sort;\n    }\n  }\n\n  return variables;\n}\n","import { isEmptyObject, TimeRange } from '@grafana/data';\nimport {\n  SceneDataLayers,\n  SceneGridItem,\n  SceneGridItemLike,\n  SceneGridLayout,\n  SceneGridRow,\n  VizPanel,\n  SceneQueryRunner,\n  SceneDataTransformer,\n  SceneVariableSet,\n  AdHocFilterSet,\n} from '@grafana/scenes';\nimport {\n  AnnotationQuery,\n  Dashboard,\n  DataTransformerConfig,\n  defaultDashboard,\n  FieldConfigSource,\n  Panel,\n  RowPanel,\n  VariableModel,\n  VariableRefresh,\n} from '@grafana/schema';\nimport { sortedDeepCloneWithoutNulls } from 'app/core/utils/object';\nimport { getPanelDataFrames } from 'app/features/dashboard/components/HelpWizard/utils';\nimport { SHARED_DASHBOARD_QUERY } from 'app/plugins/datasource/dashboard';\nimport { GrafanaQueryType } from 'app/plugins/datasource/grafana/types';\n\nimport { DashboardScene } from '../scene/DashboardScene';\nimport { LibraryVizPanel } from '../scene/LibraryVizPanel';\nimport { PanelRepeaterGridItem } from '../scene/PanelRepeaterGridItem';\nimport { PanelTimeRange } from '../scene/PanelTimeRange';\nimport { RowRepeaterBehavior } from '../scene/RowRepeaterBehavior';\nimport { ShareQueryDataProvider } from '../scene/ShareQueryDataProvider';\nimport { getPanelIdForVizPanel } from '../utils/utils';\n\nimport { GRAFANA_DATASOURCE_REF } from './const';\nimport { dataLayersToAnnotations } from './dataLayersToAnnotations';\nimport { sceneVariablesSetToVariables } from './sceneVariablesSetToVariables';\n\nexport function transformSceneToSaveModel(scene: DashboardScene, isSnapshot = false): Dashboard {\n  const state = scene.state;\n  const timeRange = state.$timeRange!.state;\n  const data = state.$data;\n  const variablesSet = state.$variables;\n  const body = state.body;\n  const panels: Panel[] = [];\n\n  let variables: VariableModel[] = [];\n\n  if (body instanceof SceneGridLayout) {\n    for (const child of body.state.children) {\n      if (child instanceof SceneGridItem) {\n        panels.push(gridItemToPanel(child, isSnapshot));\n      }\n\n      if (child instanceof SceneGridRow) {\n        // Skip repeat clones\n        if (child.state.key!.indexOf('-clone-') > 0) {\n          continue;\n        }\n        gridRowToSaveModel(child, panels, isSnapshot);\n      }\n    }\n  }\n\n  let annotations: AnnotationQuery[] = [];\n  if (data instanceof SceneDataLayers) {\n    const layers = data.state.layers;\n\n    annotations = dataLayersToAnnotations(layers);\n  }\n\n  if (variablesSet instanceof SceneVariableSet) {\n    variables = sceneVariablesSetToVariables(variablesSet);\n  }\n\n  if (state.controls) {\n    for (const control of state.controls) {\n      if (control instanceof AdHocFilterSet) {\n        variables.push({\n          name: control.state.name!,\n          type: 'adhoc',\n          datasource: control.state.datasource,\n        });\n      }\n    }\n  }\n\n  const dashboard: Dashboard = {\n    ...defaultDashboard,\n    title: state.title,\n    uid: state.uid,\n    id: state.id,\n    time: {\n      from: timeRange.from,\n      to: timeRange.to,\n    },\n    panels,\n    annotations: {\n      list: annotations,\n    },\n    templating: {\n      list: variables,\n    },\n    timezone: timeRange.timeZone,\n    fiscalYearStartMonth: timeRange.fiscalYearStartMonth,\n    weekStart: timeRange.weekStart,\n  };\n\n  return sortedDeepCloneWithoutNulls(dashboard);\n}\n\nexport function gridItemToPanel(gridItem: SceneGridItemLike, isSnapshot = false): Panel {\n  let vizPanel: VizPanel | undefined;\n  let x = 0,\n    y = 0,\n    w = 0,\n    h = 0;\n\n  if (gridItem instanceof SceneGridItem) {\n    // Handle library panels, early exit\n    if (gridItem.state.body instanceof LibraryVizPanel) {\n      x = gridItem.state.x ?? 0;\n      y = gridItem.state.y ?? 0;\n      w = gridItem.state.width ?? 0;\n      h = gridItem.state.height ?? 0;\n\n      return {\n        id: getPanelIdForVizPanel(gridItem.state.body),\n        title: gridItem.state.body.state.title,\n        gridPos: { x, y, w, h },\n        libraryPanel: {\n          name: gridItem.state.body.state.name,\n          uid: gridItem.state.body.state.uid,\n        },\n      } as Panel;\n    }\n\n    if (!(gridItem.state.body instanceof VizPanel)) {\n      throw new Error('SceneGridItem body expected to be VizPanel');\n    }\n\n    vizPanel = gridItem.state.body;\n    x = gridItem.state.x ?? 0;\n    y = gridItem.state.y ?? 0;\n    w = gridItem.state.width ?? 0;\n    h = gridItem.state.height ?? 0;\n  }\n\n  if (gridItem instanceof PanelRepeaterGridItem) {\n    vizPanel = gridItem.state.source;\n\n    x = gridItem.state.x ?? 0;\n    y = gridItem.state.y ?? 0;\n    w = gridItem.state.width ?? 0;\n    h = gridItem.state.height ?? 0;\n  }\n\n  if (!vizPanel) {\n    throw new Error('Unsupported grid item type');\n  }\n\n  const panel: Panel = {\n    id: getPanelIdForVizPanel(vizPanel),\n    type: vizPanel.state.pluginId,\n    title: vizPanel.state.title,\n    gridPos: { x, y, w, h },\n    options: vizPanel.state.options,\n    fieldConfig: (vizPanel.state.fieldConfig as FieldConfigSource) ?? { defaults: {}, overrides: [] },\n    transformations: [],\n    transparent: vizPanel.state.displayMode === 'transparent',\n  };\n\n  const panelTime = vizPanel.state.$timeRange;\n\n  if (panelTime instanceof PanelTimeRange) {\n    panel.timeFrom = panelTime.state.timeFrom;\n    panel.timeShift = panelTime.state.timeShift;\n    panel.hideTimeOverride = panelTime.state.hideTimeOverride;\n  }\n\n  const dataProvider = vizPanel.state.$data;\n\n  // Dashboard datasource handling\n  if (dataProvider instanceof ShareQueryDataProvider) {\n    panel.datasource = {\n      type: 'datasource',\n      uid: SHARED_DASHBOARD_QUERY,\n    };\n    panel.targets = [\n      {\n        datasource: { ...panel.datasource },\n        refId: 'A',\n        panelId: dataProvider.state.query.panelId,\n        topic: dataProvider.state.query.topic,\n      },\n    ];\n  }\n\n  // Regular queries handling\n  if (dataProvider instanceof SceneQueryRunner) {\n    panel.targets = dataProvider.state.queries;\n    panel.maxDataPoints = dataProvider.state.maxDataPoints;\n    panel.datasource = dataProvider.state.datasource;\n  }\n\n  // Transformations handling\n  if (dataProvider instanceof SceneDataTransformer) {\n    const panelData = dataProvider.state.$data;\n    if (panelData instanceof ShareQueryDataProvider) {\n      panel.datasource = {\n        type: 'datasource',\n        uid: SHARED_DASHBOARD_QUERY,\n      };\n      panel.targets = [\n        {\n          datasource: { ...panel.datasource },\n          refId: 'A',\n          panelId: panelData.state.query.panelId,\n          topic: panelData.state.query.topic,\n        },\n      ];\n    }\n\n    if (panelData instanceof SceneQueryRunner) {\n      panel.targets = panelData.state.queries;\n      panel.maxDataPoints = panelData.state.maxDataPoints;\n      panel.datasource = panelData.state.datasource;\n    }\n\n    panel.transformations = dataProvider.state.transformations as DataTransformerConfig[];\n  }\n\n  if (dataProvider && isSnapshot) {\n    panel.datasource = GRAFANA_DATASOURCE_REF;\n\n    let data = getPanelDataFrames(dataProvider.state.data);\n    if (dataProvider instanceof SceneDataTransformer) {\n      // For transformations the non-transformed data is snapshoted\n      data = getPanelDataFrames(dataProvider.state.$data!.state.data);\n    }\n\n    panel.targets = [\n      {\n        refId: 'A',\n        datasource: panel.datasource,\n        queryType: GrafanaQueryType.Snapshot,\n        snapshot: data,\n      },\n    ];\n  }\n\n  if (gridItem instanceof PanelRepeaterGridItem) {\n    panel.repeat = gridItem.state.variableName;\n    panel.maxPerRow = gridItem.state.maxPerRow;\n    panel.repeatDirection = gridItem.getRepeatDirection();\n  }\n\n  return panel;\n}\n\nexport function gridRowToSaveModel(gridRow: SceneGridRow, panelsArray: Array<Panel | RowPanel>, isSnapshot = false) {\n  const rowPanel: RowPanel = {\n    type: 'row',\n    id: getPanelIdForVizPanel(gridRow),\n    title: gridRow.state.title,\n    gridPos: {\n      x: gridRow.state.x ?? 0,\n      y: gridRow.state.y ?? 0,\n      w: gridRow.state.width ?? 24,\n      h: gridRow.state.height ?? 1,\n    },\n    collapsed: Boolean(gridRow.state.isCollapsed),\n    panels: [],\n  };\n\n  if (gridRow.state.$behaviors?.length) {\n    const behavior = gridRow.state.$behaviors[0];\n\n    if (behavior instanceof RowRepeaterBehavior) {\n      rowPanel.repeat = behavior.state.variableName;\n    }\n  }\n\n  panelsArray.push(rowPanel);\n\n  const panelsInsideRow = gridRow.state.children.map((c) => gridItemToPanel(c, isSnapshot));\n\n  if (gridRow.state.isCollapsed) {\n    rowPanel.panels = panelsInsideRow;\n  } else {\n    panelsArray.push(...panelsInsideRow);\n  }\n}\n\nexport function trimDashboardForSnapshot(title: string, time: TimeRange, dash: Dashboard, panel?: VizPanel) {\n  let result = {\n    ...dash,\n    title,\n    time: {\n      from: time.from.toISOString(),\n      to: time.to.toISOString(),\n    },\n    links: [],\n  };\n\n  // When VizPanel is present, we are snapshoting a single panel. The rest of the panels is removed from the dashboard,\n  // and the panel is resized to 24x20 grid and placed at the top of the dashboard.\n  if (panel) {\n    // @ts-expect-error Due to legacy panels types. Id is present on such panels too.\n    const singlePanel = dash.panels?.find((p) => p.id === getPanelIdForVizPanel(panel));\n    if (singlePanel) {\n      // @ts-expect-error Due to legacy panels types. Id is present on such panels too.\n      singlePanel.gridPos = { w: 24, x: 0, y: 0, h: 20 };\n      result = {\n        ...result,\n        panels: [singlePanel],\n      };\n    }\n  }\n\n  // Remove links from all panels\n  result.panels?.forEach((panel) => {\n    if ('links' in panel) {\n      panel.links = [];\n    }\n  });\n\n  // Remove annotation queries, attach snapshotData: [] for backwards compatibility\n  if (result.annotations) {\n    const annotations = result.annotations.list?.filter((annotation) => annotation.enable) || [];\n    const trimedAnnotations = annotations.map((annotation) => {\n      return {\n        name: annotation.name,\n        enable: annotation.enable,\n        iconColor: annotation.iconColor,\n        type: annotation.type,\n        builtIn: annotation.builtIn,\n        hide: annotation.hide,\n        // TODO: Remove when we migrate snapshots to snapshot queries.\n        // For now leaving this in here to avoid annotation queries in snapshots.\n        // Annotations per panel are part of the snapshot query, so we don't need to store them here.\n        snapshotData: [],\n      };\n    });\n\n    result.annotations.list = trimedAnnotations;\n  }\n\n  if (result.templating) {\n    result.templating.list?.forEach((variable) => {\n      if ('query' in variable) {\n        variable.query = '';\n      }\n      if ('options' in variable) {\n        variable.options = variable.current && !isEmptyObject(variable.current) ? [variable.current] : [];\n      }\n\n      if ('refresh' in variable) {\n        variable.refresh = VariableRefresh.never;\n      }\n    });\n  }\n\n  return result;\n}\n","import saveAs from 'file-saver';\nimport React from 'react';\nimport { useAsync } from 'react-use';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { config, getBackendSrv } from '@grafana/runtime';\nimport { SceneComponentProps, SceneObjectBase, SceneObjectRef } from '@grafana/scenes';\nimport { Button, ClipboardButton, CodeEditor, Field, Modal, Switch, VerticalGroup } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\nimport { DashboardExporter } from 'app/features/dashboard/components/DashExportModal';\nimport { trackDashboardSharingActionPerType } from 'app/features/dashboard/components/ShareModal/analytics';\nimport { shareDashboardType } from 'app/features/dashboard/components/ShareModal/utils';\nimport { DashboardModel } from 'app/features/dashboard/state';\n\nimport { DashboardScene } from '../scene/DashboardScene';\nimport { transformSceneToSaveModel } from '../serialization/transformSceneToSaveModel';\n\nimport { SceneShareTabState } from './types';\n\nconst exportExternallyTranslation = t('share-modal.export.share-externally-label', `Export for sharing externally`);\nconst exportDefaultTranslation = t('share-modal.export.share-default-label', `Export with default values removed`);\n\ninterface ShareExportTabState extends SceneShareTabState {\n  dashboardRef: SceneObjectRef<DashboardScene>;\n  isSharingExternally?: boolean;\n  shouldTrimDefaults?: boolean;\n  isViewingJSON?: boolean;\n}\n\nexport class ShareExportTab extends SceneObjectBase<ShareExportTabState> {\n  static Component = ShareExportTabRenderer;\n\n  private _exporter = new DashboardExporter();\n\n  constructor(state: Omit<ShareExportTabState, 'panelRef'>) {\n    super({\n      isSharingExternally: false,\n      shouldTrimDefaults: false,\n      isViewingJSON: false,\n      ...state,\n    });\n  }\n\n  public getTabLabel() {\n    return t('share-modal.tab-title.export', 'Export');\n  }\n\n  public onShareExternallyChange = () => {\n    this.setState({\n      isSharingExternally: !this.state.isSharingExternally,\n    });\n  };\n\n  public onTrimDefaultsChange = () => {\n    this.setState({\n      shouldTrimDefaults: !this.state.shouldTrimDefaults,\n    });\n  };\n\n  public onViewJSON = () => {\n    this.setState({\n      isViewingJSON: !this.state.isViewingJSON,\n    });\n  };\n\n  public getClipboardText() {\n    return;\n  }\n\n  public async getExportableDashboardJson() {\n    const { dashboardRef, isSharingExternally, shouldTrimDefaults } = this.state;\n    const saveModel = transformSceneToSaveModel(dashboardRef.resolve());\n\n    const exportable = isSharingExternally\n      ? await this._exporter.makeExportable(new DashboardModel(saveModel))\n      : saveModel;\n\n    if (shouldTrimDefaults) {\n      const trimmed = await getBackendSrv().post('/api/dashboards/trim', { dashboard: exportable });\n      return trimmed.dashboard;\n    } else {\n      return exportable;\n    }\n  }\n\n  public async onSaveAsFile() {\n    const dashboardJson = await this.getExportableDashboardJson();\n    const dashboardJsonPretty = JSON.stringify(dashboardJson, null, 2);\n\n    const blob = new Blob([dashboardJsonPretty], {\n      type: 'application/json;charset=utf-8',\n    });\n\n    const time = new Date().getTime();\n    saveAs(blob, `${dashboardJson.title}-${time}.json`);\n    trackDashboardSharingActionPerType('save_export', shareDashboardType.export);\n  }\n}\n\nfunction ShareExportTabRenderer({ model }: SceneComponentProps<ShareExportTab>) {\n  const { isSharingExternally, shouldTrimDefaults, isViewingJSON, modalRef } = model.useState();\n\n  const dashboardJson = useAsync(async () => {\n    if (isViewingJSON) {\n      const json = await model.getExportableDashboardJson();\n      return JSON.stringify(json, null, 2);\n    }\n\n    return '';\n  }, [isViewingJSON]);\n\n  return (\n    <>\n      {!isViewingJSON && (\n        <>\n          <p className=\"share-modal-info-text\">\n            <Trans i18nKey=\"share-modal.export.info-text\">Export this dashboard.</Trans>\n          </p>\n          <VerticalGroup spacing=\"md\">\n            <Field label={exportExternallyTranslation}>\n              <Switch\n                id=\"share-externally-toggle\"\n                value={isSharingExternally}\n                onChange={model.onShareExternallyChange}\n              />\n            </Field>\n\n            {config.featureToggles.trimDefaults && (\n              <Field label={exportDefaultTranslation}>\n                <Switch id=\"trim-defaults-toggle\" value={shouldTrimDefaults} onChange={model.onTrimDefaultsChange} />\n              </Field>\n            )}\n          </VerticalGroup>\n\n          <Modal.ButtonRow>\n            <Button\n              variant=\"secondary\"\n              onClick={() => {\n                modalRef?.resolve().onDismiss();\n              }}\n              fill=\"outline\"\n            >\n              <Trans i18nKey=\"share-modal.export.cancel-button\">Cancel</Trans>\n            </Button>\n            <Button variant=\"secondary\" icon=\"brackets-curly\" onClick={model.onViewJSON}>\n              <Trans i18nKey=\"share-modal.export.view-button\">View JSON</Trans>\n            </Button>\n            <Button variant=\"primary\" icon=\"save\" onClick={() => model.onSaveAsFile()}>\n              <Trans i18nKey=\"share-modal.export.save-button\">Save to file</Trans>\n            </Button>\n          </Modal.ButtonRow>\n        </>\n      )}\n\n      {isViewingJSON && (\n        <>\n          <AutoSizer disableHeight>\n            {({ width }) => {\n              if (dashboardJson.value) {\n                return (\n                  <CodeEditor\n                    value={dashboardJson.value ?? ''}\n                    language=\"json\"\n                    showMiniMap={false}\n                    height=\"500px\"\n                    width={width}\n                  />\n                );\n              }\n\n              if (dashboardJson.loading) {\n                return <div>Loading...</div>;\n              }\n\n              return null;\n            }}\n          </AutoSizer>\n\n          <Modal.ButtonRow>\n            <Button variant=\"secondary\" fill=\"outline\" onClick={model.onViewJSON} icon=\"arrow-left\">\n              <Trans i18nKey=\"share-modal.export.back-button\">Back to export config</Trans>\n            </Button>\n            <ClipboardButton\n              variant=\"secondary\"\n              icon=\"copy\"\n              disabled={dashboardJson.loading}\n              getText={() => dashboardJson.value ?? ''}\n            >\n              <Trans i18nKey=\"share-modal.view-json.copy-button\">Copy to Clipboard</Trans>\n            </ClipboardButton>\n            <Button variant=\"primary\" icon=\"save\" disabled={dashboardJson.loading} onClick={() => model.onSaveAsFile()}>\n              <Trans i18nKey=\"share-modal.export.save-button\">Save to file</Trans>\n            </Button>\n          </Modal.ButtonRow>\n        </>\n      )}\n    </>\n  );\n}\n","import React from 'react';\n\nimport { dateTime, UrlQueryMap } from '@grafana/data';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors';\nimport { config, locationService } from '@grafana/runtime';\nimport { SceneComponentProps, SceneObjectBase, SceneObjectRef, VizPanel, sceneGraph } from '@grafana/scenes';\nimport { TimeZone } from '@grafana/schema';\nimport { Alert, ClipboardButton, Field, FieldSet, Icon, Input, Switch } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\nimport { createShortLink } from 'app/core/utils/shortLinks';\nimport { ThemePicker } from 'app/features/dashboard/components/ShareModal/ThemePicker';\nimport { trackDashboardSharingActionPerType } from 'app/features/dashboard/components/ShareModal/analytics';\nimport { shareDashboardType } from 'app/features/dashboard/components/ShareModal/utils';\n\nimport { DashboardScene } from '../scene/DashboardScene';\nimport { getDashboardUrl } from '../utils/utils';\n\nimport { SceneShareTabState } from './types';\nexport interface ShareLinkTabState extends SceneShareTabState, ShareOptions {\n  panelRef?: SceneObjectRef<VizPanel>;\n  dashboardRef: SceneObjectRef<DashboardScene>;\n}\n\ninterface ShareOptions {\n  useLockedTime: boolean;\n  useShortUrl: boolean;\n  selectedTheme: string;\n  shareUrl: string;\n  imageUrl: string;\n}\n\nexport class ShareLinkTab extends SceneObjectBase<ShareLinkTabState> {\n  static Component = ShareLinkTabRenderer;\n\n  constructor(state: Omit<ShareLinkTabState, keyof ShareOptions>) {\n    super({\n      ...state,\n      useLockedTime: true,\n      useShortUrl: false,\n      selectedTheme: 'current',\n      shareUrl: '',\n      imageUrl: '',\n    });\n\n    this.addActivationHandler(() => {\n      this.buildUrl();\n    });\n  }\n\n  async buildUrl() {\n    const { panelRef, dashboardRef, useLockedTime: useAbsoluteTimeRange, useShortUrl, selectedTheme } = this.state;\n    const dashboard = dashboardRef.resolve();\n    const panel = panelRef?.resolve();\n    const location = locationService.getLocation();\n    const timeRange = sceneGraph.getTimeRange(panel ?? dashboard);\n\n    const urlParamsUpdate: UrlQueryMap = {};\n\n    if (panel) {\n      urlParamsUpdate.viewPanel = panel.state.key;\n    }\n\n    if (useAbsoluteTimeRange) {\n      urlParamsUpdate.from = timeRange.state.value.from.toISOString();\n      urlParamsUpdate.to = timeRange.state.value.to.toISOString();\n    }\n\n    if (selectedTheme !== 'current') {\n      urlParamsUpdate.theme = selectedTheme!;\n    }\n\n    let shareUrl = getDashboardUrl({\n      uid: dashboard.state.uid,\n      currentQueryParams: location.search,\n      updateQuery: urlParamsUpdate,\n      absolute: true,\n    });\n\n    if (useShortUrl) {\n      shareUrl = await createShortLink(shareUrl);\n    }\n\n    const imageUrl = getDashboardUrl({\n      uid: dashboard.state.uid,\n      currentQueryParams: location.search,\n      updateQuery: urlParamsUpdate,\n      absolute: true,\n\n      soloRoute: true,\n      render: true,\n      timeZone: getRenderTimeZone(timeRange.getTimeZone()),\n    });\n\n    this.setState({ shareUrl, imageUrl });\n  }\n\n  public getTabLabel() {\n    return t('share-modal.tab-title.link', 'Link');\n  }\n\n  onToggleLockedTime = () => {\n    this.setState({ useLockedTime: !this.state.useLockedTime });\n    this.buildUrl();\n  };\n\n  onUrlShorten = () => {\n    this.setState({ useShortUrl: !this.state.useShortUrl });\n    this.buildUrl();\n  };\n\n  onThemeChange = (value: string) => {\n    this.setState({ selectedTheme: value });\n    this.buildUrl();\n  };\n\n  getShareUrl = () => {\n    return this.state.shareUrl;\n  };\n\n  onCopy() {\n    trackDashboardSharingActionPerType('copy_link', shareDashboardType.link);\n  }\n}\n\nfunction ShareLinkTabRenderer({ model }: SceneComponentProps<ShareLinkTab>) {\n  const state = model.useState();\n  const { panelRef, dashboardRef } = state;\n\n  const dashboard = dashboardRef.resolve();\n  const panel = panelRef?.resolve();\n\n  const timeRange = sceneGraph.getTimeRange(panel ?? dashboard);\n  const isRelativeTime = timeRange.state.to === 'now' ? true : false;\n\n  const { useLockedTime, useShortUrl, selectedTheme, shareUrl, imageUrl } = state;\n\n  const selectors = e2eSelectors.pages.SharePanelModal;\n  const isDashboardSaved = Boolean(dashboard.state.uid);\n\n  const lockTimeRangeLabel = t('share-modal.link.time-range-label', `Lock time range`);\n\n  const lockTimeRangeDescription = t(\n    'share-modal.link.time-range-description',\n    `Transforms the current relative time range to an absolute time range`\n  );\n\n  const shortenURLTranslation = t('share-modal.link.shorten-url', `Shorten URL`);\n\n  const linkURLTranslation = t('share-modal.link.link-url', `Link URL`);\n\n  return (\n    <>\n      <p className=\"share-modal-info-text\">\n        <Trans i18nKey=\"share-modal.link.info-text\">\n          Create a direct link to this dashboard or panel, customized with the options below.\n        </Trans>\n      </p>\n      <FieldSet>\n        <Field label={lockTimeRangeLabel} description={isRelativeTime ? lockTimeRangeDescription : ''}>\n          <Switch id=\"share-current-time-range\" value={useLockedTime} onChange={model.onToggleLockedTime} />\n        </Field>\n        <ThemePicker selectedTheme={selectedTheme} onChange={model.onThemeChange} />\n        <Field label={shortenURLTranslation}>\n          <Switch id=\"share-shorten-url\" value={useShortUrl} onChange={model.onUrlShorten} />\n        </Field>\n\n        <Field label={linkURLTranslation}>\n          <Input\n            id=\"link-url-input\"\n            value={shareUrl}\n            readOnly\n            addonAfter={\n              <ClipboardButton icon=\"copy\" variant=\"primary\" getText={model.getShareUrl} onClipboardCopy={model.onCopy}>\n                <Trans i18nKey=\"share-modal.link.copy-link-button\">Copy</Trans>\n              </ClipboardButton>\n            }\n          />\n        </Field>\n      </FieldSet>\n\n      {panel && config.rendererAvailable && (\n        <>\n          {isDashboardSaved && (\n            <div className=\"gf-form\">\n              <a href={imageUrl} target=\"_blank\" rel=\"noreferrer\" aria-label={selectors.linkToRenderedImage}>\n                <Icon name=\"camera\" />\n                &nbsp;\n                <Trans i18nKey=\"share-modal.link.rendered-image\">Direct link rendered image</Trans>\n              </a>\n            </div>\n          )}\n\n          {!isDashboardSaved && (\n            <Alert severity=\"info\" title={t('share-modal.link.save-alert', 'Dashboard is not saved')} bottomSpacing={0}>\n              <Trans i18nKey=\"share-modal.link.save-dashboard\">\n                To render a panel image, you must save the dashboard first.\n              </Trans>\n            </Alert>\n          )}\n        </>\n      )}\n\n      {panel && !config.rendererAvailable && (\n        <Alert\n          severity=\"info\"\n          title={t('share-modal.link.render-alert', 'Image renderer plugin not installed')}\n          bottomSpacing={0}\n        >\n          <Trans i18nKey=\"share-modal.link.render-instructions\">\n            To render a panel image, you must install the\n            <a\n              href=\"https://grafana.com/grafana/plugins/grafana-image-renderer\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"external-link\"\n            >\n              Grafana image renderer plugin\n            </a>\n            . Please contact your Grafana administrator to install the plugin.\n          </Trans>\n        </Alert>\n      )}\n    </>\n  );\n}\n\nfunction getRenderTimeZone(timeZone: TimeZone): string {\n  const utcOffset = 'UTC' + encodeURIComponent(dateTime().format('Z'));\n\n  if (timeZone === 'utc') {\n    return 'UTC';\n  }\n\n  if (timeZone === 'browser') {\n    if (!window.Intl) {\n      return utcOffset;\n    }\n\n    const dateFormat = window.Intl.DateTimeFormat();\n    const options = dateFormat.resolvedOptions();\n    if (!options.timeZone) {\n      return utcOffset;\n    }\n\n    return options.timeZone;\n  }\n\n  return timeZone;\n}\n","import React from 'react';\nimport useAsyncFn from 'react-use/lib/useAsyncFn';\n\nimport { SelectableValue } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { SceneComponentProps, sceneGraph, SceneObjectBase, SceneObjectRef, VizPanel } from '@grafana/scenes';\nimport { Button, ClipboardButton, Field, Input, Modal, RadioButtonGroup } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\nimport { trackDashboardSharingActionPerType } from 'app/features/dashboard/components/ShareModal/analytics';\nimport { shareDashboardType } from 'app/features/dashboard/components/ShareModal/utils';\n\nimport { DashboardScene } from '../scene/DashboardScene';\nimport { transformSceneToSaveModel, trimDashboardForSnapshot } from '../serialization/transformSceneToSaveModel';\n\nimport { SceneShareTabState } from './types';\n\nconst SNAPSHOTS_API_ENDPOINT = '/api/snapshots';\nconst DEFAULT_EXPIRE_OPTION: SelectableValue<number> = {\n  label: t('share-modal.snapshot.expire-never', `Never`),\n  value: 0,\n};\n\nconst EXPIRE_OPTIONS = [\n  DEFAULT_EXPIRE_OPTION,\n  {\n    label: t('share-modal.snapshot.expire-hour', `1 Hour`),\n    value: 60 * 60,\n  },\n  {\n    label: t('share-modal.snapshot.expire-day', `1 Day`),\n    value: 60 * 60 * 24,\n  },\n  {\n    label: t('share-modal.snapshot.expire-week', `7 Days`),\n    value: 60 * 60 * 24 * 7,\n  },\n];\n\ntype SnapshotSharingOptions = {\n  externalEnabled: boolean;\n  externalSnapshotName: string;\n  externalSnapshotURL: string;\n  snapshotEnabled: boolean;\n};\nexport interface ShareSnapshotTabState extends SceneShareTabState {\n  panelRef?: SceneObjectRef<VizPanel>;\n  dashboardRef: SceneObjectRef<DashboardScene>;\n  snapshotName?: string;\n  selectedExpireOption?: SelectableValue<number>;\n\n  snapshotSharingOptions?: SnapshotSharingOptions;\n}\n\nexport class ShareSnapshotTab extends SceneObjectBase<ShareSnapshotTabState> {\n  static Component = ShareSnapshoTabRenderer;\n\n  public constructor(state: ShareSnapshotTabState) {\n    super({\n      ...state,\n      snapshotName: state.dashboardRef.resolve().state.title,\n      selectedExpireOption: DEFAULT_EXPIRE_OPTION,\n    });\n\n    this.addActivationHandler(() => {\n      this._onActivate();\n    });\n  }\n\n  private _onActivate() {\n    getBackendSrv()\n      .get('/api/snapshot/shared-options')\n      .then((shareOptions: SnapshotSharingOptions) => {\n        if (this.isActive) {\n          this.setState({\n            snapshotSharingOptions: shareOptions,\n          });\n        }\n      });\n  }\n\n  public getTabLabel() {\n    return t('share-modal.tab-title.snapshot', 'Snapshot');\n  }\n\n  public onSnasphotNameChange = (snapshotName: string) => {\n    this.setState({ snapshotName: snapshotName.trim() });\n  };\n\n  public onExpireChange = (option: number) => {\n    this.setState({\n      selectedExpireOption: EXPIRE_OPTIONS.find((o) => o.value === option),\n    });\n  };\n\n  private prepareSnapshot() {\n    const timeRange = sceneGraph.getTimeRange(this);\n    const { dashboardRef, panelRef } = this.state;\n    const saveModel = transformSceneToSaveModel(dashboardRef.resolve(), true);\n\n    return trimDashboardForSnapshot(\n      this.state.snapshotName || '',\n      timeRange.state.value,\n      saveModel,\n      panelRef?.resolve()\n    );\n  }\n\n  public onSnapshotCreate = async (external = false) => {\n    const { selectedExpireOption } = this.state;\n    const snapshot = this.prepareSnapshot();\n\n    // TODO\n    // snapshot.snapshot = {\n    //   originalUrl: window.location.href,\n    // };\n\n    const cmdData = {\n      dashboard: snapshot,\n      name: snapshot.title,\n      expires: selectedExpireOption?.value,\n      external,\n    };\n\n    try {\n      const results: { deleteUrl: string; url: string } = await getBackendSrv().post(SNAPSHOTS_API_ENDPOINT, cmdData);\n      return results;\n    } finally {\n      trackDashboardSharingActionPerType(external ? 'publish_snapshot' : 'local_snapshot', shareDashboardType.snapshot);\n    }\n  };\n}\n\nfunction ShareSnapshoTabRenderer({ model }: SceneComponentProps<ShareSnapshotTab>) {\n  const { snapshotName, selectedExpireOption, modalRef, snapshotSharingOptions } = model.useState();\n\n  const [snapshotResult, createSnapshot] = useAsyncFn(async (external = false) => {\n    return model.onSnapshotCreate(external);\n  });\n\n  const [deleteSnapshotResult, deleteSnapshot] = useAsyncFn(async (url: string) => {\n    return await getBackendSrv().get(url);\n  });\n\n  // If snapshot has been deleted - show message and allow to close modal\n  if (deleteSnapshotResult.value) {\n    return (\n      <Trans i18nKey=\"share-modal.snapshot.deleted-message\">\n        The snapshot has been deleted. If you have already accessed it once, then it might take up to an hour before\n        before it is removed from browser caches or CDN caches.\n      </Trans>\n    );\n  }\n\n  return (\n    <>\n      {/* Before snapshot has been created show configuration  */}\n      {!Boolean(snapshotResult.value) && (\n        <>\n          <div>\n            <p className=\"share-modal-info-text\">\n              <Trans i18nKey=\"share-modal.snapshot.info-text-1\">\n                A snapshot is an instant way to share an interactive dashboard publicly. When created, we strip\n                sensitive data like queries (metric, template, and annotation) and panel links, leaving only the visible\n                metric data and series names embedded in your dashboard.\n              </Trans>\n            </p>\n            <p className=\"share-modal-info-text\">\n              <Trans i18nKey=\"share-modal.snapshot.info-text-2\">\n                Keep in mind, your snapshot <em>can be viewed by anyone</em> that has the link and can access the URL.\n                Share wisely.\n              </Trans>\n            </p>\n          </div>\n\n          <Field label={t('share-modal.snapshot.name', `Snapshot name`)}>\n            <Input\n              id=\"snapshot-name-input\"\n              width={30}\n              defaultValue={snapshotName}\n              onBlur={(e) => model.onSnasphotNameChange(e.target.value)}\n            />\n          </Field>\n\n          <Field label={t('share-modal.snapshot.expire', `Expire`)}>\n            <RadioButtonGroup<number>\n              id=\"expire-select-input\"\n              options={EXPIRE_OPTIONS}\n              value={selectedExpireOption?.value}\n              onChange={model.onExpireChange}\n            />\n          </Field>\n\n          <Modal.ButtonRow>\n            <Button\n              variant=\"secondary\"\n              onClick={() => {\n                modalRef?.resolve().onDismiss();\n              }}\n              fill=\"outline\"\n            >\n              <Trans i18nKey=\"share-modal.snapshot.cancel-button\">Cancel</Trans>\n            </Button>\n\n            {snapshotSharingOptions?.externalEnabled && (\n              <Button variant=\"secondary\" disabled={snapshotResult.loading} onClick={() => createSnapshot(true)}>\n                {snapshotSharingOptions?.externalSnapshotName}\n              </Button>\n            )}\n            <Button variant=\"primary\" disabled={snapshotResult.loading} onClick={() => createSnapshot()}>\n              <Trans i18nKey=\"share-modal.snapshot.local-button\">Local Snapshot</Trans>\n            </Button>\n          </Modal.ButtonRow>\n        </>\n      )}\n\n      {/* When snapshot has been created - show link and allow copy/deletion */}\n      {snapshotResult.value && (\n        <>\n          <Field label={t('share-modal.snapshot.url-label', 'Snapshot URL')}>\n            <Input\n              id=\"snapshot-url-input\"\n              value={snapshotResult.value.url}\n              readOnly\n              addonAfter={\n                <ClipboardButton icon=\"copy\" variant=\"primary\" getText={() => snapshotResult.value!.url}>\n                  <Trans i18nKey=\"share-modal.snapshot.copy-link-button\">Copy</Trans>\n                </ClipboardButton>\n              }\n            />\n          </Field>\n\n          <div className=\"pull-right\" style={{ padding: '5px' }}>\n            <Trans i18nKey=\"share-modal.snapshot.mistake-message\">Did you make a mistake? </Trans>&nbsp;\n            <Button\n              fill=\"outline\"\n              size=\"md\"\n              variant=\"destructive\"\n              onClick={() => {\n                deleteSnapshot(snapshotResult.value!.deleteUrl);\n              }}\n            >\n              <Trans i18nKey=\"share-modal.snapshot.delete-button\">Delete snapshot.</Trans>\n            </Button>\n          </div>\n        </>\n      )}\n    </>\n  );\n}\n","import React, { ComponentProps } from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { SceneComponentProps, SceneObjectBase, SceneObjectState, VizPanel, SceneObjectRef } from '@grafana/scenes';\nimport { Modal, ModalTabsHeader, TabContent } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { t } from 'app/core/internationalization';\n\nimport { DashboardScene } from '../scene/DashboardScene';\nimport { getDashboardSceneFor } from '../utils/utils';\n\nimport { ShareExportTab } from './ShareExportTab';\nimport { ShareLinkTab } from './ShareLinkTab';\nimport { ShareSnapshotTab } from './ShareSnapshotTab';\nimport { ModalSceneObjectLike, SceneShareTab } from './types';\n\ninterface ShareModalState extends SceneObjectState {\n  dashboardRef: SceneObjectRef<DashboardScene>;\n  panelRef?: SceneObjectRef<VizPanel>;\n  tabs?: SceneShareTab[];\n  activeTab: string;\n}\n\n/**\n * Used for full dashboard share modal and the panel level share modal\n */\nexport class ShareModal extends SceneObjectBase<ShareModalState> implements ModalSceneObjectLike {\n  static Component = SharePanelModalRenderer;\n\n  constructor(state: Omit<ShareModalState, 'activeTab'>) {\n    super({\n      ...state,\n      activeTab: 'Link',\n    });\n\n    this.addActivationHandler(() => this.buildTabs());\n  }\n\n  private buildTabs() {\n    const { dashboardRef, panelRef } = this.state;\n\n    const tabs: SceneShareTab[] = [new ShareLinkTab({ dashboardRef, panelRef, modalRef: this.getRef() })];\n\n    if (!panelRef) {\n      tabs.push(new ShareExportTab({ dashboardRef, modalRef: this.getRef() }));\n    }\n\n    if (contextSrv.isSignedIn && config.snapshotEnabled) {\n      tabs.push(new ShareSnapshotTab({ panelRef, dashboardRef, modalRef: this.getRef() }));\n    }\n\n    this.setState({ tabs });\n\n    // if (panel) {\n    //   const embedLabel = t('share-modal.tab-title.embed', 'Embed');\n    //   tabs.push({ label: embedLabel, value: shareDashboardType.embed, component: ShareEmbed });\n\n    //   if (!isPanelModelLibraryPanel(panel)) {\n    //     const libraryPanelLabel = t('share-modal.tab-title.library-panel', 'Library panel');\n    //     tabs.push({ label: libraryPanelLabel, value: shareDashboardType.libraryPanel, component: ShareLibraryPanel });\n    //   }\n    //   tabs.push(...customPanelTabs);\n    // } else {\n    //   const exportLabel = t('share-modal.tab-title.export', 'Export');\n    //   tabs.push({\n    //     label: exportLabel,\n    //     value: shareDashboardType.export,\n    //     component: ShareExport,\n    //   });\n    //   tabs.push(...customDashboardTabs);\n    // }\n\n    // if (Boolean(config.featureToggles['publicDashboards'])) {\n    //   tabs.push({\n    //     label: 'Public dashboard',\n    //     value: shareDashboardType.publicDashboard,\n    //     component: SharePublicDashboard,\n    //   });\n    // }\n  }\n\n  onDismiss = () => {\n    const dashboard = getDashboardSceneFor(this);\n    dashboard.closeModal();\n  };\n\n  onChangeTab: ComponentProps<typeof ModalTabsHeader>['onChangeTab'] = (tab) => {\n    this.setState({ activeTab: tab.value });\n  };\n}\n\nfunction SharePanelModalRenderer({ model }: SceneComponentProps<ShareModal>) {\n  const { panelRef, tabs, activeTab } = model.useState();\n  const title = panelRef ? t('share-modal.panel.title', 'Share Panel') : t('share-modal.dashboard.title', 'Share');\n\n  if (!tabs) {\n    return;\n  }\n\n  const modalTabs = tabs?.map((tab) => ({\n    label: tab.getTabLabel(),\n    value: tab.getTabLabel(),\n  }));\n\n  const header = (\n    <ModalTabsHeader\n      title={title}\n      icon=\"share-alt\"\n      tabs={modalTabs}\n      activeTab={activeTab}\n      onChangeTab={model.onChangeTab}\n    />\n  );\n\n  const currentTab = tabs.find((t) => t.getTabLabel() === activeTab);\n\n  return (\n    <Modal isOpen={true} title={header} onDismiss={model.onDismiss}>\n      <TabContent>{currentTab && <currentTab.Component model={currentTab} />}</TabContent>\n    </Modal>\n  );\n}\n","import { config } from '@grafana/runtime';\nimport { SceneDataProvider, SceneDataTransformer, SceneQueryRunner } from '@grafana/scenes';\nimport { PanelModel } from 'app/features/dashboard/state';\nimport { SHARED_DASHBOARD_QUERY } from 'app/plugins/datasource/dashboard';\n\nimport { ShareQueryDataProvider } from '../scene/ShareQueryDataProvider';\n\nexport function createPanelDataProvider(panel: PanelModel): SceneDataProvider | undefined {\n  // Skip setting query runner for panels without queries\n  if (!panel.targets?.length) {\n    return undefined;\n  }\n\n  // Skip setting query runner for panel plugins with skipDataQuery\n  if (config.panels[panel.type]?.skipDataQuery) {\n    return undefined;\n  }\n\n  let dataProvider: SceneDataProvider | undefined = undefined;\n\n  if (panel.datasource?.uid === SHARED_DASHBOARD_QUERY) {\n    dataProvider = new ShareQueryDataProvider({ query: panel.targets[0] });\n  } else {\n    dataProvider = new SceneQueryRunner({\n      datasource: panel.datasource ?? undefined,\n      queries: panel.targets,\n      maxDataPoints: panel.maxDataPoints ?? undefined,\n      maxDataPointsFromWidth: true,\n      dataLayerFilter: {\n        panelId: panel.id,\n      },\n    });\n  }\n\n  // Wrap inner data provider in a data transformer\n  if (panel.transformations?.length) {\n    dataProvider = new SceneDataTransformer({\n      $data: dataProvider,\n      transformations: panel.transformations,\n    });\n  }\n\n  return dataProvider;\n}\n","import { IntervalVariableModel, UrlQueryMap, urlUtil } from '@grafana/data';\nimport { config, locationSearchToObject } from '@grafana/runtime';\nimport {\n  MultiValueVariable,\n  SceneDataTransformer,\n  sceneGraph,\n  SceneObject,\n  SceneQueryRunner,\n  VizPanel,\n} from '@grafana/scenes';\nimport { initialIntervalVariableModelState } from 'app/features/variables/interval/reducer';\n\nimport { DashboardScene } from '../scene/DashboardScene';\n\nexport function getVizPanelKeyForPanelId(panelId: number) {\n  return `panel-${panelId}`;\n}\n\nexport function getPanelIdForVizPanel(panel: SceneObject): number {\n  return parseInt(panel.state.key!.replace('panel-', ''), 10);\n}\n\n/**\n * This will also  try lookup based on panelId\n */\nexport function findVizPanelByKey(scene: SceneObject, key: string | undefined): VizPanel | null {\n  if (!key) {\n    return null;\n  }\n\n  const panel = findVizPanelInternal(scene, key);\n  if (panel) {\n    return panel;\n  }\n\n  // Also try to find by panel id\n  const id = parseInt(key, 10);\n  if (isNaN(id)) {\n    return null;\n  }\n\n  return findVizPanelInternal(scene, getVizPanelKeyForPanelId(id));\n}\n\nfunction findVizPanelInternal(scene: SceneObject, key: string | undefined): VizPanel | null {\n  if (!key) {\n    return null;\n  }\n\n  const panel = sceneGraph.findObject(scene, (obj) => obj.state.key === key);\n  if (panel) {\n    if (panel instanceof VizPanel) {\n      return panel;\n    } else {\n      throw new Error(`Found panel with key ${key} but it was not a VizPanel`);\n    }\n  }\n\n  return null;\n}\n\n/**\n * Force re-render children. This is useful in some edge case scenarios when\n * children deep down the scene graph needs to be re-rendered when some parent state change.\n *\n * Example could be isEditing bool flag or a layout IsDraggable state flag.\n *\n * @param model The model whose children should be re-rendered. It does not force render this model, only the children.\n * @param recursive if it should keep force rendering down to leaf nodess\n */\nexport function forceRenderChildren(model: SceneObject, recursive?: boolean) {\n  model.forEachChild((child) => {\n    if (!child.isActive) {\n      return;\n    }\n\n    child.forceRender();\n    forceRenderChildren(child, recursive);\n  });\n}\n\nexport interface DashboardUrlOptions {\n  uid?: string;\n  subPath?: string;\n  updateQuery?: UrlQueryMap;\n  /** Set to location.search to preserve current params */\n  currentQueryParams: string;\n  /** * Returns solo panel route instead */\n  soloRoute?: boolean;\n  /** return render url */\n  render?: boolean;\n  /** Return an absolute URL */\n  absolute?: boolean;\n  // Add tz to query params\n  timeZone?: string;\n}\n\nexport function getDashboardUrl(options: DashboardUrlOptions) {\n  let path = `/scenes/dashboard/${options.uid}${options.subPath ?? ''}`;\n\n  if (options.soloRoute) {\n    path = `/d-solo/${options.uid}${options.subPath ?? ''}`;\n  }\n\n  if (options.render) {\n    path = '/render' + path;\n\n    options.updateQuery = {\n      ...options.updateQuery,\n      width: 1000,\n      height: 500,\n      tz: options.timeZone,\n    };\n  }\n\n  const params = options.currentQueryParams ? locationSearchToObject(options.currentQueryParams) : {};\n\n  if (options.updateQuery) {\n    for (const key of Object.keys(options.updateQuery)) {\n      // removing params with null | undefined\n      if (options.updateQuery[key] === null || options.updateQuery[key] === undefined) {\n        delete params[key];\n      } else {\n        params[key] = options.updateQuery[key];\n      }\n    }\n  }\n\n  const relativeUrl = urlUtil.renderUrl(path, params);\n\n  if (options.absolute) {\n    return config.appUrl + relativeUrl.slice(1);\n  }\n\n  return relativeUrl;\n}\n\nexport function getMultiVariableValues(variable: MultiValueVariable) {\n  const { value, text, options } = variable.state;\n\n  if (variable.hasAllValue()) {\n    return {\n      values: options.map((o) => o.value),\n      texts: options.map((o) => o.label),\n    };\n  }\n\n  return {\n    values: Array.isArray(value) ? value : [value],\n    texts: Array.isArray(text) ? text : [text],\n  };\n}\n\n// Transform old interval model to new interval model from scenes\nexport function getIntervalsFromOldIntervalModel(variable: IntervalVariableModel): string[] {\n  // separate intervals by quotes either single or double\n  const matchIntervals = variable.query.match(/([\"'])(.*?)\\1|\\w+/g);\n\n  // If no intervals are found in query, return the initial state of the interval reducer.\n  if (!matchIntervals) {\n    return initialIntervalVariableModelState.query?.split(',') ?? [];\n  }\n  const uniqueIntervals = new Set<string>();\n\n  // when options are defined in variable.query\n  const intervals = matchIntervals.reduce((uniqueIntervals: Set<string>, text: string) => {\n    // Remove surrounding quotes from the interval value.\n    const intervalValue = text.replace(/[\"']+/g, '');\n\n    // Skip intervals that start with \"$__auto_interval_\",scenes will handle them.\n    if (intervalValue.startsWith('$__auto_interval_')) {\n      return uniqueIntervals;\n    }\n\n    // Add the interval if it's not already in the Set.\n    uniqueIntervals.add(intervalValue);\n    return uniqueIntervals;\n  }, uniqueIntervals);\n\n  return Array.from(intervals);\n}\n\n// Transform new interval scene model to old interval core model\nexport function getIntervalsQueryFromNewIntervalModel(intervals: string[]): string {\n  const variableQuery = Array.isArray(intervals) ? intervals.join(',') : '';\n  return variableQuery;\n}\n\nexport function getCurrentValueForOldIntervalModel(variable: IntervalVariableModel, intervals: string[]): string {\n  const selectedInterval = Array.isArray(variable.current.value) ? variable.current.value[0] : variable.current.value;\n\n  // If the interval is the old auto format, return the new auto interval from scenes.\n  if (selectedInterval.startsWith('$__auto_interval_')) {\n    return '$__auto';\n  }\n\n  // Check if the selected interval is valid.\n  if (intervals.includes(selectedInterval)) {\n    return selectedInterval;\n  }\n\n  // If the selected interval is not valid, return the first valid interval.\n  return intervals[0];\n}\n\nexport function getQueryRunnerFor(sceneObject: SceneObject | undefined): SceneQueryRunner | undefined {\n  if (!sceneObject) {\n    return undefined;\n  }\n\n  if (sceneObject.state.$data instanceof SceneQueryRunner) {\n    return sceneObject.state.$data;\n  }\n\n  if (sceneObject.state.$data instanceof SceneDataTransformer) {\n    return getQueryRunnerFor(sceneObject.state.$data);\n  }\n\n  return undefined;\n}\n\nexport function getDashboardSceneFor(sceneObject: SceneObject): DashboardScene {\n  const root = sceneObject.getRoot();\n  if (root instanceof DashboardScene) {\n    return root;\n  }\n\n  throw new Error('SceneObject root is not a DashboardScene');\n}\n\nexport function getClosestVizPanel(sceneObject: SceneObject): VizPanel | null {\n  if (sceneObject instanceof VizPanel) {\n    return sceneObject;\n  }\n\n  if (sceneObject.parent) {\n    return getClosestVizPanel(sceneObject.parent);\n  }\n\n  return null;\n}\n","import { useMemo } from 'react';\nimport useAsync from 'react-use/lib/useAsync';\n\nimport { DataSourceApi, PanelData, PanelPlugin } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { t } from 'app/core/internationalization';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\nimport { InspectTab } from 'app/features/inspector/types';\n\nimport { supportsDataQuery } from '../PanelEditor/utils';\n\n/**\n * Given PanelData return first data source supporting metadata inspector\n */\nexport const useDatasourceMetadata = (data?: PanelData) => {\n  const state = useAsync(async () => getDataSourceWithInspector(data), [data]);\n  return state.value;\n};\n\nexport async function getDataSourceWithInspector(data?: PanelData): Promise<DataSourceApi | undefined> {\n  const targets = data?.request?.targets || [];\n\n  if (data && data.series && targets.length) {\n    for (const frame of data.series) {\n      if (frame.meta && frame.meta.custom) {\n        // get data source from first query\n        const dataSource = await getDataSourceSrv().get(targets[0].datasource);\n        if (dataSource && dataSource.components?.MetadataInspector) {\n          return dataSource;\n        }\n      }\n    }\n  }\n\n  return undefined;\n}\n\n/**\n * Configures tabs for PanelInspector\n */\nexport const useInspectTabs = (\n  panel: PanelModel,\n  dashboard: DashboardModel,\n  plugin: PanelPlugin | undefined | null,\n  hasError?: boolean,\n  metaDs?: DataSourceApi\n) => {\n  return useMemo(() => {\n    const tabs = [];\n    if (supportsDataQuery(plugin)) {\n      tabs.push({ label: t('dashboard.inspect.data-tab', 'Data'), value: InspectTab.Data });\n      tabs.push({ label: t('dashboard.inspect.stats-tab', 'Stats'), value: InspectTab.Stats });\n    }\n\n    if (metaDs) {\n      tabs.push({ label: t('dashboard.inspect.meta-tab', 'Meta data'), value: InspectTab.Meta });\n    }\n\n    tabs.push({ label: t('dashboard.inspect.json-tab', 'JSON'), value: InspectTab.JSON });\n\n    if (hasError) {\n      tabs.push({ label: t('dashboard.inspect.error-tab', 'Error'), value: InspectTab.Error });\n    }\n\n    if (dashboard.meta.canEdit && supportsDataQuery(plugin)) {\n      tabs.push({ label: t('dashboard.inspect.query-tab', 'Query'), value: InspectTab.Query });\n    }\n    return tabs;\n  }, [plugin, metaDs, dashboard, hasError]);\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar react_1 = require(\"react\");\nvar useAsyncFn_1 = tslib_1.__importDefault(require(\"./useAsyncFn\"));\nfunction useAsync(fn, deps) {\n    if (deps === void 0) { deps = []; }\n    var _a = useAsyncFn_1.default(fn, deps, {\n        loading: true,\n    }), state = _a[0], callback = _a[1];\n    react_1.useEffect(function () {\n        callback();\n    }, [callback]);\n    return state;\n}\nexports.default = useAsync;\n"],"names":["StateManagerBase","state","useLatestState","update","observerOrNext","model","forceUpdate","s","NavToolbarActions","dashboard","actions","isEditing","viewPanelKey","isDirty","uid","toolbarActions","action","DashNavButton","ShareModal","NavToolbarSeparator","Button","AppChromeUpdate","DashboardSceneRenderer","controls","viewPanelId","overlay","styles","getStyles","location","pageNav","bodyToRender","Page","CustomScrollbar","control","theme","SaveDashboardDrawer","initialState","initialScene","DashboardScene","initialSaveModel","transformSceneToSaveModel","changedSaveModel","diff","Drawer","SaveDashboardDiff","DashboardModelCompatibilityWrapper","_scene","EventBus","Subscription","timeRange","prev","time","behavior","panel","date","format","id","vizPanel","PanelCompatibilityWrapper","dashboardUID","_vizPanel","options","dataProvider","data","getDataProviderToSubscribeTo","InspectDataTab","hasTransformations","withTransforms","InspectJsonTab","getJsonText","value","jsonObj","panelModel","gridItem","newState","hasGridPosChanged","hasQueriesChanged","show","jsonText","selectors","Field","Select","v","height","CodeEditor","objToStringify","PanelRepeaterGridItem","a","b","InspectMetaDataTab","panelRef","dataSource","Inspector","InspectQueryTab","queryRunner","QueryInspector","PanelInspectDrawer","retry","plugin","tabs","dsWithInspector","PanelInspectRenderer","pluginNotLoaded","queryParams","urlTab","currentTab","tab","TabsBar","Tab","Alert","DashboardSceneUrlSync","values","inspectPanelId","viewPanel","oldDashboardWrapper","event","modal","sceneObject","LibraryVizPanel","title","key","name","libPanel","libPanelModel","LibraryPanelRenderer","prevState","changedVariables","dependencyChanged","itemCount","stateChange","itemHeight","rowCount","variable","panelToRepeat","texts","repeatedPanels","index","clone","direction","prevHeight","maxPerRow","layout","layoutStyle","useLayoutStyle","itemStyle","mobileHeight","columnCount","PanelTimeRange","overrideResult","parentTimeRange","timeFrom","timeShift","newTimeData","timeFromInterpolated","timeFromInfo","timeShiftInterpolated","from","to","PanelTimeRangeRenderer","timeInfo","hideTimeOverride","RowRepeaterBehavior","rowToRepeat","rows","rowContentHeight","getRowContentHeight","maxYOfRows","children","source","itemY","itemClone","ensureUniqueKeys","rowClone","updateLayout","text","sourceRowY","panels","maxY","minY","allChildren","getLayoutChildrenFilterOutRepeatClones","newChildren","childrenAfter","firstChildAfterY","child","item","rowIndex","ShareQueryDataProvider","query","keyToFind","findObjectInScene","scene","sourceData","check","found","maybe","DashboardRepeatsProcessedEvent","DashboardAnnotationsDataLayer","config","PublicAnnotationsDataSource","events","stateUpdate","df","panelMenuBehavior","menu","items","panelId","panelPlugin","setDashboardPanelContext","context","getBuiltInAnnotationsLayer","isRegion","anno","reRunBuiltInAnnotationsLayer","newFilter","filterSet","getAdHocFilterSetFor","updateAdHocFilterSet","frames","layer","ds","newSet","filter","f","getAngularPanelMigrationHandler","oldModel","wasAngular","oldOptions","prevPluginId","prevOptions","transformSaveModelToScene","rsp","createDashboardSceneFromDashboardModel","createSceneObjectsForPanels","oldPanels","currentRow","currentRowPanels","createRowFromPanelModel","buildGridItemForLibPanel","panelObject","buildGridItemForPanel","row","content","behaviors","variables","layers","filtersSets","variableObjects","isAdhocVariable","createSceneVariableFromVariableModel","err","commonProperties","isCustomVariable","isQueryVariable","isDataSourceVariable","isIntervalVariable","intervals","currentInterval","isConstantVariable","vizPanelState","createPanelDataProvider","repeatDirection","GRAFANA_DATASOURCE_REF","dataLayersToAnnotations","annotations","result","sceneVariablesSetToVariables","set","isSnapshot","variablesSet","body","gridItemToPanel","gridRowToSaveModel","x","y","w","h","panelTime","panelData","gridRow","panelsArray","rowPanel","panelsInsideRow","c","trimDashboardForSnapshot","dash","singlePanel","p","trimedAnnotations","annotation","exportExternallyTranslation","exportDefaultTranslation","ShareExportTab","dashboardRef","isSharingExternally","shouldTrimDefaults","saveModel","exportable","dashboardJson","dashboardJsonPretty","blob","ShareExportTabRenderer","isViewingJSON","modalRef","useAsync","json","Switch","Modal","width","ClipboardButton","ShareLinkTab","useAbsoluteTimeRange","useShortUrl","selectedTheme","urlParamsUpdate","shareUrl","imageUrl","getRenderTimeZone","ShareLinkTabRenderer","isRelativeTime","useLockedTime","isDashboardSaved","lockTimeRangeLabel","lockTimeRangeDescription","shortenURLTranslation","linkURLTranslation","FieldSet","ThemePicker","Input","Icon","timeZone","utcOffset","SNAPSHOTS_API_ENDPOINT","DEFAULT_EXPIRE_OPTION","EXPIRE_OPTIONS","ShareSnapshotTab","snapshotName","option","o","external","selectedExpireOption","snapshot","cmdData","shareOptions","ShareSnapshoTabRenderer","snapshotSharingOptions","snapshotResult","createSnapshot","useAsyncFn","deleteSnapshotResult","deleteSnapshot","url","e","RadioButtonGroup","SharePanelModalRenderer","activeTab","modalTabs","header","ModalTabsHeader","t","TabContent","getVizPanelKeyForPanelId","getPanelIdForVizPanel","findVizPanelByKey","findVizPanelInternal","obj","forceRenderChildren","recursive","getDashboardUrl","path","params","relativeUrl","getMultiVariableValues","getIntervalsFromOldIntervalModel","matchIntervals","uniqueIntervals","intervalValue","getIntervalsQueryFromNewIntervalModel","getCurrentValueForOldIntervalModel","selectedInterval","getQueryRunnerFor","getDashboardSceneFor","root","getClosestVizPanel","useDatasourceMetadata","getDataSourceWithInspector","targets","frame","useInspectTabs","hasError","metaDs","tslib_1","react_1","useAsyncFn_1","fn","deps","_a","callback","exports"],"sourceRoot":""}