{"version":3,"file":"AlertRuleListIndex.76ec9b3b229cace9eeb7.js","mappings":"8JAMO,SAASA,EAAWC,EAA8B,CACvD,MAAMC,KAAW,eAAY,EAEvBC,KAAc,UAAOF,CAAa,EACxCE,EAAY,QAAUF,KACtB,aAAU,IACD,IAAM,CACXC,KAAS,KAAc,CAAE,cAAeC,EAAY,OAAQ,CAAC,CAAC,CAChE,EACC,CAACD,CAAQ,CAAC,CACf,C,wNCRO,SAASE,EAAgB,CAAE,UAAAC,CAAU,EAAsC,CAChF,OACE,gBAACC,EAAA,EAAK,CAAC,MAAM,kBAAkB,OAAM,GAAC,UAAAD,EAAsB,gBAAiBA,CAAA,EAC3E,gBAAC,KAAa,CAAC,QAAQ,MACrB,gBAAC,OAAI,IAAI,iCAAiC,IAAI,EAAG,GACjD,gBAAC,SAAE,iJAGH,EACA,gBAAC,SAAE,oEAAkE,CACvE,CACF,CAEJ,C,6CCsCA,SA9CsB,CAAC,CAAE,KAAAE,EAAM,OAAAC,EAAQ,cAAAC,CAAc,IAAa,CAChE,MAAMC,GAAU,GAAGH,EAAK,iBAAiBA,EAAK,oBACxCI,KAAa,eAChBC,IACC,gBAAC,KACC,IAAKA,GACL,mBAAmB,yBACnB,gBAAiBA,GACjB,YAAa,CAACJ,CAAM,EACtB,EAEF,CAACA,CAAM,CACT,EAEA,OACE,gBAACK,EAAA,EAAI,KACH,gBAACA,EAAA,EAAK,QAAL,KAAcF,EAAWJ,EAAK,IAAI,CAAE,EACrC,gBAACM,EAAA,EAAK,OAAL,KACC,gBAACC,EAAA,EAAI,CAAC,KAAK,KAAK,KAAMP,EAAK,UAAW,UAAW,yBAAyBA,EAAK,aAAc,CAC/F,EACA,gBAACM,EAAA,EAAK,KAAL,KACC,gBAAC,QAAK,IAAI,SACR,gBAAC,QAAK,IAAI,OAAO,UAAW,GAAGN,EAAK,cACjCI,EAAWJ,EAAK,SAAS,EAAG,GAC/B,EAAO,OACFA,EAAK,QACZ,EACCA,EAAK,KAAOI,EAAWJ,EAAK,IAAI,EAAI,IACvC,EACA,gBAACM,EAAA,EAAK,QAAL,KACC,gBAACE,EAAA,IACC,IAAI,OACJ,QAAQ,YACR,KAAMR,EAAK,QAAU,SAAW,OAAS,QACzC,QAASE,CAAA,EAERF,EAAK,QAAU,SAAW,SAAW,OACxC,EACA,gBAAC,KAAU,CAAC,IAAI,OAAO,QAAQ,YAAY,KAAMG,GAAS,KAAK,OAAM,YAErE,CACF,CACF,CAEJ,E,gBCrDO,MAAMM,GAAoB,8CAE3BC,GAAoB,IACxB,gBAACC,GAAA,EAAK,CAAC,SAAS,UAAU,MAAM,kFAC9B,gBAAC,SAAE,6JAGD,gBAAC,SAAG,EAAE,iEAER,EACA,gBAAC,SAAE,MACG,IACJ,gBAAC,KAAE,KAAK,sEAAqE,oCAE7E,EAAK,IAAI,gBAEX,CACF,E,2BCnBK,MAAMC,GAAkBC,GAA2BA,EAAM,YAEnDC,GAAqBD,GAAmC,CACnE,MAAME,EAAQ,IAAI,OAAOF,EAAM,WAAW,YAAa,GAAG,EAE1D,OAAOA,EAAM,WAAW,MAAM,OAAQG,GAC7BD,EAAM,KAAKC,EAAK,IAAI,GAAKD,EAAM,KAAKC,EAAK,SAAS,GAAKD,EAAM,KAAKC,EAAK,IAAK,CACpF,CACH,EAEaC,GAAyB,CAACJ,EAAiCK,IAClEL,EAAM,oBAAoB,KAAOK,EAC5BL,EAAM,oBAGR,KCGT,SAASM,GAAgBN,EAAmB,CAC1C,MAAO,CACL,WAAYC,GAAkBD,CAAK,EACnC,OAAQD,GAAeC,EAAM,UAAU,EACvC,UAAWA,EAAM,WAAW,SAC9B,CACF,CAEA,MAAMO,GAAqB,CACzB,mBAAkB,MAClB,eAAc,MACd,qBAAoB,KACtB,EAEMC,MAAY,WAAQF,GAAiBC,EAAkB,EAMtD,MAAME,WAAiC,eAAqB,CAA5D,kCACL,kBAAe,CACb,CAAE,MAAO,MAAO,MAAO,KAAM,EAC7B,CAAE,MAAO,KAAM,MAAO,IAAK,EAC3B,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,WAAY,MAAO,UAAW,EACvC,CAAE,MAAO,UAAW,MAAO,SAAU,EACrC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,UAAW,MAAO,SAAU,CACvC,EAoBA,0BAAwBC,GAA4B,CAClD,KAAgB,QAAQ,CAAE,MAAOA,EAAO,KAAM,CAAC,CACjD,EAEA,iBAAc,IAAM,CAClB,IAAU,QAAQ,IAAI,KAAoB,CAAE,UAAW1B,CAAgB,CAAC,CAAC,CAC3E,EAEA,yBAAuB2B,GAAkB,CACvC,KAAK,MAAM,eAAeA,CAAK,CACjC,EAEA,mBAAiBxB,GAAoB,CACnC,KAAK,MAAM,qBAAqBA,EAAK,GAAI,CAAE,OAAQA,EAAK,QAAU,QAAS,CAAC,CAC9E,EAEA,4BAAyB,CAAC,CAAE,KAAAK,EAAM,MAAAmB,CAAM,IAEpC,gBAAC,UAAO,IAAKA,EAAO,MAAAA,CAAA,EACjBnB,CACH,CAEJ,CAxCA,mBAAoB,CAClB,KAAK,WAAW,CAClB,CAEA,mBAAmBoB,EAAkB,CAC/BA,EAAU,YAAY,QAAU,KAAK,MAAM,YAAY,OACzD,KAAK,WAAW,CAEpB,CAEA,MAAM,YAAa,CACjB,MAAM,KAAK,MAAM,mBAAmB,CAAE,MAAO,KAAK,eAAe,CAAE,CAAC,CACtE,CAEA,gBAAyB,CACvB,OAAO,KAAK,MAAM,YAAY,OAAS,KACzC,CA0BA,QAAS,CACP,KAAM,CAAE,WAAAC,EAAY,OAAAzB,EAAQ,UAAA0B,EAAU,EAAI,KAAK,MAE/C,OACE,gBAACC,EAAA,EAAI,CAAC,MAAM,cACV,gBAACA,EAAA,EAAK,SAAL,CAAc,UAAAD,EAAA,EACb,gBAAC,OAAI,UAAU,mBACb,gBAAC,OAAI,UAAU,yBACb,gBAACE,EAAA,EAAW,CAAC,YAAY,gBAAgB,MAAO5B,EAAQ,SAAU,KAAK,oBAAqB,CAC9F,EACA,gBAAC,OAAI,UAAU,WACb,gBAAC,SAAM,UAAU,gBAAgB,QAAQ,sBAAqB,QAE9D,EAEA,gBAAC,OAAI,UAAU,YACb,gBAAC6B,EAAA,IACC,QAAS,qBACT,QAAS,KAAK,aACd,SAAU,KAAK,qBACf,MAAO,KAAK,eAAe,EAC7B,CACF,CACF,EACA,gBAAC,OAAI,UAAU,yBAA0B,GACxCC,EAAO,+BACN,gBAAC,KAAU,CAAC,QAAQ,UAAU,KAAK,mBAAkB,cAErD,EAEF,gBAACvB,EAAA,GAAM,CAAC,QAAQ,YAAY,QAAS,KAAK,aAAa,qBAEvD,CACF,EACA,gBAACE,GAAiB,IAAC,EACnB,gBAAC,KAAa,CAAC,QAAQ,QACpBgB,EAAW,IAAK1B,GAEb,gBAAC,IACC,KAAAA,EACA,IAAKA,EAAK,GACV,OAAAC,EACA,cAAe,IAAM,KAAK,cAAcD,CAAI,EAC9C,CAEH,CACH,CACF,CACF,CAEJ,CACF,CAEA,SAAeqB,GAAUC,EAAwB,C,oJC3I1C,SAASU,EAAmBC,EAA+C,CAChF,MAAO,OAAOtC,GAAa,CACzBA,KAAS,MAAe,CAAC,EACzB,MAAMuC,EAAwB,QAAM,KAAc,EAAE,IAAI,cAAeD,CAAO,EAC9EtC,KAAS,MAAiBuC,CAAK,CAAC,CAClC,CACF,CAEO,SAASC,EAAqBC,EAAYH,EAAiD,CAChG,MAAO,OAAOtC,GAAa,CACzB,QAAM,KAAc,EAAE,KAAK,eAAeyC,UAAYH,CAAO,EAC7D,MAAMI,EAAc,KAAgB,gBAAgB,EAAE,OAAS,MAC/D1C,EAASqC,EAAmB,CAAE,MAAOK,EAAY,SAAS,CAAE,CAAC,CAAC,CAChE,CACF,CAEO,SAASC,EAA0BC,EAAuC,CAC/E,MAAO,OAAO5C,GAAa,CACzB,GAAI,CACF,QAAM,KAAc,EAAE,KAAK,2BAA4B4C,CAAI,EAC3D5C,KAAS,SAAU,MAA0B,sBAAsB,CAAC,CAAC,EACrE,KAAgB,KAAK,yBAAyB,CAChD,OAAS6C,EAAP,IACI,MAAaA,CAAK,GACpB7C,KAAS,SAAU,MAAwB6C,EAAM,KAAK,KAAK,CAAC,CAAC,CAEjE,CACF,CACF,CAEO,SAASC,EAA0BF,EAA8B,CACtE,MAAO,OAAO5C,GAAa,CACzB,GAAI,CACF,QAAM,KAAc,EAAE,IAAI,4BAA4B4C,EAAK,KAAMA,CAAI,EACrE5C,KAAS,SAAU,MAA0B,sBAAsB,CAAC,CAAC,CACvE,OAAS6C,EAAP,IACI,MAAaA,CAAK,GACpB7C,KAAS,SAAU,MAAwB6C,EAAM,KAAK,KAAK,CAAC,CAAC,CAEjE,CACF,CACF,CAEO,SAASE,EAAwBH,EAA8B,CACpE,MAAO,OAAO5C,EAAUgD,IAAa,CACnC,MAAMC,EAAUD,EAAS,EAAE,oBAAoB,oBAC/C,QAAM,KAAc,EAAE,KAAK,gCAAiC,CAAE,GAAIC,EAAQ,GAAI,GAAGL,CAAK,CAAC,CACzF,CACF,CAEO,SAASM,GAA2C,CACzD,MAAO,OAAOlD,GAAa,CAGzB,MAAMmD,GAFgC,QAAM,KAAc,EAAE,IAAI,sBAAsB,GAE7C,KAAK,CAACC,EAAIC,IAC7CD,EAAG,KAAOC,EAAG,KACR,EAEF,EACR,EAEDrD,KAAS,MAAwBmD,CAAiB,CAAC,CACrD,CACF,CAEO,SAASG,EAAwBb,EAA+B,CACrE,MAAO,OAAOzC,GAAa,CACzB,MAAMA,EAASkD,EAAsB,CAAC,EACtC,MAAMK,EAAsB,QAAM,KAAc,EAAE,IAAI,4BAA4Bd,GAAI,EACtFzC,KAAS,KAA0BuD,CAAmB,CAAC,CACzD,CACF,C,qTChEO,SAASC,GAAqB,CAAE,QAAAC,CAAQ,EAA8B,CAC3E,KAAM,CAACC,EAAWC,CAAY,KAAI,YAAwB,MAAM,EAEhE,OACE,gBAACC,GAAA,GACC,UAAAF,EACA,YAAaC,EACb,QAAAF,EACA,gBAAiB,OAAO,OAAO,KAAyB,GAExD,gBAACI,GAAA,CAA0B,aAAcH,EAAW,QAAAD,CAAA,CAAkB,CACxE,CAEJ,CAOA,SAASI,GAA0B,CAAE,aAAAC,EAAc,QAAAL,CAAQ,EAAmC,CAC5F,KAAM,CAAE,YAAaM,EAAkB,GAAI,WAAAC,CAAW,EAAIC,GAAa,uBAAU,YAAY,SAAS,CACpG,OAAQH,CACV,CAAC,EAEKI,EAAmB,eAAe,IAAI,KAAK,EAAE,QAAQ,IAE3D,OAAIF,EACK,gBAACG,GAAA,EAAkB,CAAC,KAAK,aAAc,GAI9C,gBAACC,GAAA,GACC,OAAQN,EACR,eAAgBC,EAChB,iBAAAG,EACA,QAAAT,CAAA,CACF,CAEJ,C,gBCxCO,SAASY,GAAuB,CAAC,EAAU,CAChD,KAAM,CAACC,EAAGC,CAAe,KAAI,OAAsB,MAAkB,aAAa,EAC5E,CAACC,EAAqBC,CAAiB,KAAI,OAAsB,MAAkB,eAAe,EAClG,CAACC,EAA0BC,CAAsB,KAAI,OACzD,MAAkB,uBACpB,EAEMC,EAAwBJ,GAAuBC,EAC/CI,EAAsBH,GAA4BC,EAElDG,KAAW,MAAY,EACvB,CAACC,EAAkBC,CAAsB,KAAIC,EAAA,GAAU,EAAK,EAC5DC,EACJ,gBAACC,EAAA,EAAI,MACDP,GAAyBC,IACzB,gBAACO,EAAA,GACC,IAAKC,EAAA,GAAQ,UAAU,yBAA0B,CAC/C,SAAUP,EAAS,SAAWA,EAAS,MACzC,CAAC,EACD,MAAM,qBACR,EAEDP,GAAmB,gBAACa,EAAA,EAAQ,CAAC,QAASJ,EAAwB,MAAM,kCAAmC,EAC1G,EAGF,OACE,iCACIJ,GAAyBC,IACzB,gBAAC,MACC,KAAMQ,EAAA,GAAQ,UAAU,wBAAyB,CAAE,SAAUP,EAAS,SAAWA,EAAS,MAAO,CAAC,EAClG,KAAK,OACL,QAAS,OAAM,MAAQ,KAAY,oBAAoB,GACxD,gBAED,EAGF,gBAACQ,EAAA,EAAQ,CAAC,QAASJ,CAAA,EACjB,gBAACrE,EAAA,GAAM,CAAC,QAAQ,aAAY,OAE1B,gBAACD,EAAA,EAAI,CAAC,KAAK,YAAa,EAC1B,CACF,EACCmE,GAAoB,gBAACvB,GAAoB,CAAC,QAASwB,CAAA,CAAwB,CAC9E,CAEJ,C,8DChDO,MAAMO,EAAgB,IAAM,CACjC,KAAM,CAAE,sBAAAX,EAAuB,oBAAAC,CAAoB,KAAI,MAAe,EAChEW,KAAS,MAAWC,CAAS,EACnC,OAAIb,GAAyBC,EAEzB,gBAAC,WACC,gBAAC,SAAG,yCAA0C,EAC9C,gBAACa,EAAA,EAAK,CAAC,UAAU,MAAM,IAAK,EAAG,WAAW,UAAU,SAAU,GAC5D,gBAAC,OAAI,UAAWF,EAAO,aACrB,gBAACG,GAAA,GACC,MAAM,GACN,WAAW,OACX,WAAY,wBACZ,YAAY,iBACZ,OAAO,oEACP,WAAW,4BACX,gBAAgB,aAChB,aAAa,SACb,QAAS,OAAM,OAAQ,KAAY,oBAAoB,EACzD,CACF,EAEA,gBAAC,OAAI,UAAWH,EAAO,aACrB,gBAACG,GAAA,GACC,MAAM,GACN,WAAW,OACX,WAAY,yBACZ,YAAY,qBACZ,QAAS,OAAM,OAAQ,KAAY,wBAAwB,EAC7D,CACF,CACF,CACF,EAGG,gBAACC,GAAA,EAAgB,CAAC,QAAQ,sBAAsB,oBAAqB,gBAAC,UAAI,EAAI,CACvF,EAEMH,EAAaI,IAA0B,CAC3C,eAAa;AAAA,wBACSA,EAAM,QAAQ,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,GAMvC,G,qHC5CO,SAASC,IAA+B,CAC7C,KAAM,CAACC,EAAUC,CAAW,KAAI,YAAS,EAAK,EACxC,CAACC,EAAQC,CAAS,KAAIC,GAAA,GAAgB,qCAAsC,EAAK,EACjFC,KAA2BC,GAAA,GAA4BnF,GAAUA,EAAM,WAAW,EAClFoF,KAAmBD,GAAA,GAA4BnF,GAAUA,EAAM,SAAS,EACxEqF,KAAoBF,GAAA,GAA4BnF,GAAUA,EAAM,UAAU,EAC1EsE,KAAS,MAAW,EAAS,EAE7BgB,KAAS,WAAQ,IAAqB,CAC1C,KAAM,CAACC,EAAwBC,EAAmBC,CAAkB,EAAI,CACtEP,EACAE,EACAC,CACF,EAAE,IAAKK,MACL,MAAoB,EAAE,OACpB,CAACC,EAAQC,IAAe,CACtB,MAAMjE,GAAQ+D,EAASE,EAAW,IAAI,GAAG,MACzC,OAAIF,EAASE,EAAW,IAAI,GAAKjE,IAAS,IAAC,MAA4B+D,EAASE,EAAW,IAAI,CAAC,EACvF,CAAC,GAAGD,EAAQ,CAAE,WAAAC,EAAY,MAAAjE,EAAM,CAAC,EAEnCgE,CACT,EACA,CAAC,CACH,CACF,EACME,EAAmBT,EAAiB,IAAyB,GAAG,MAChEU,EAAoBT,EAAkB,IAAyB,GAAG,MAElEM,EAAwB,CAAC,EAE/B,OAAIE,GACFF,EAAO,KAAK,gCAAE,uCAAqCE,EAAiB,SAAW,gBAAiB,CAAG,EAEjGC,GACFH,EAAO,KAAK,gCAAE,wCAAsCG,EAAkB,SAAW,gBAAiB,CAAG,EAGvGP,EAAuB,QAAQ,CAAC,CAAE,WAAAK,EAAY,MAAAjE,CAAM,IAAM,CACxDgE,EAAO,KACL,gCAAE,mDACiD,IACjD,gBAAC,KAAE,QAAM,OAAmBC,CAAU,EAAG,UAAWtB,EAAO,QACxDsB,EAAW,IACd,EAAI,KACDjE,EAAM,SAAW,gBACtB,CACF,CACF,CAAC,EAED6D,EAAkB,QAAQ,CAAC,CAAE,WAAAI,EAAY,MAAAjE,CAAM,IAC7CgE,EAAO,KACL,gCAAE,kCACgC,IAChC,gBAAC,KAAE,QAAM,OAAmBC,CAAU,EAAG,UAAWtB,EAAO,QACxDsB,EAAW,IACd,EAAI,KACDjE,EAAM,SAAW,gBACtB,CACF,CACF,EAEA8D,EAAmB,QAAQ,CAAC,CAAE,WAAAG,EAAY,MAAAjE,CAAM,IAC9CgE,EAAO,KACL,gCAAE,mCACiC,IACjC,gBAAC,KAAE,QAAM,OAAmBC,CAAU,EAAG,UAAWtB,EAAO,QACxDsB,EAAW,IACd,EAAI,KACDjE,EAAM,SAAW,gBACtB,CACF,CACF,EAEOgE,CACT,EAAG,CAACT,EAA0BE,EAAkBC,EAAmBf,EAAO,MAAM,CAAC,EAEjF,OACE,gCACG,CAAC,CAACgB,EAAO,QAAUP,GAClB,gBAACgB,GAAA,CAAmB,MAAOT,EAAO,OAAQ,QAAS,IAAMN,EAAWD,GAAW,CAACA,CAAM,EAAG,EAE1F,CAAC,CAACO,EAAO,QAAU,CAACP,GACnB,gBAACjF,GAAA,GACC,cAAY,2BACZ,MAAM,uBACN,SAAS,QACT,SAAU,IAAMkF,EAAU,EAAI,GAE7BH,GAAYS,EAAO,IAAI,CAACnF,EAAM6F,IAAQ,gBAAC,OAAI,IAAKA,CAAA,EAAM7F,CAAK,CAAM,EACjE,CAAC0E,GACA,gCACE,gBAAC,WAAKS,EAAO,CAAC,CAAE,EACfA,EAAO,QAAU,GAChB,gBAAC3F,EAAA,IACC,UAAW2E,EAAO,WAClB,KAAK,OACL,KAAK,cACL,KAAK,KACL,QAAS,IAAMQ,EAAY,EAAI,GAE9BQ,EAAO,OAAS,EAAE,SAAO,IAAU,QAASA,EAAO,OAAS,CAAC,CAChE,CAEJ,CAEJ,CAEJ,CAEJ,CAOA,MAAMS,GAA4C,CAAC,CAAE,MAAAE,EAAO,QAAAC,CAAQ,IAAM,CACxE,MAAM5B,KAAS,MAAW,EAAS,EAEnC,OACE,gBAAC,OAAI,UAAWA,EAAO,YACrB,gBAAC6B,GAAA,EAAO,CAAC,QAAQ,kBAAkB,UAAU,UAC3C,gBAACxG,EAAA,GAAM,CAAC,KAAK,OAAO,QAAQ,cAAc,KAAK,uBAAuB,QAAAuG,CAAA,EACnED,EAAQ,EAAI,gCAAGA,EAAM,SAAO,EAAM,gCAAE,SAAO,CAC9C,CACF,CACF,CAEJ,EAEM,GAAatB,IAA0B,CAC3C,cAAY;AAAA;AAAA,IAGZ,cAAY;AAAA;AAAA;AAAA,IAIZ,UAAQ;AAAA,mBACSA,EAAM,WAAW;AAAA,GAEpC,G,sLC3IO,SAASyB,GAA0B,CAAE,OAAAC,EAAQ,QAAA9D,CAAQ,EAAmC,CAC7F,KAAM,CAACC,EAAWC,CAAY,KAAI,YAAwB,MAAM,EAEhE,OACE,gBAACC,GAAA,GACC,MAAO,UAAU2D,EAAO,cACxB,UAAA7D,EACA,YAAaC,EACb,QAAAF,EACA,gBAAiB,OAAO,OAAO,KAAyB,GAExD,gBAAC+D,GAAA,CAA+B,OAAAD,EAAgB,aAAc7D,EAAW,QAAAD,CAAA,CAAkB,CAC7F,CAEJ,CAQA,SAAS+D,GAA+B,CAAE,OAAAD,EAAQ,aAAAzD,EAAc,QAAAL,CAAQ,EAAwC,CAC9G,KAAM,CAAE,YAAagE,EAAyB,GAAI,WAAAzD,CAAW,EAAIC,GAAa,uBAAU,YAAY,SAAS,CAC3G,UAAWsD,EAAO,IAClB,OAAQzD,CACV,CAAC,EAED,GAAIE,EACF,OAAO,gBAACG,GAAA,EAAkB,CAAC,KAAK,aAAc,GAGhD,MAAMD,EAAmB,GAAGqD,EAAO,SAASA,EAAO,MAEnD,OACE,gBAACnD,GAAA,GACC,OAAQN,EACR,eAAgB2D,EAChB,iBAAAvD,EACA,QAAAT,CAAA,CACF,CAEJ,CC1CO,SAASiE,GAAyB,CAAE,UAAAC,EAAW,UAAAC,EAAW,QAAAnE,CAAQ,EAAkC,CACzG,KAAM,CAACC,EAAWC,CAAY,KAAI,YAAwB,MAAM,EAEhE,OACE,gBAACC,GAAA,GACC,MAAO,UAAUgE,UACjB,UAAAlE,EACA,YAAaC,EACb,QAAAF,EACA,gBAAiB,OAAO,OAAO,KAAyB,GAExD,gBAACoE,GAAA,CACC,UAAAF,EACA,UAAAC,EACA,aAAclE,EACd,QAAAD,CAAA,CACF,CACF,CAEJ,CASA,SAASoE,GAA8B,CACrC,UAAAF,EACA,UAAAC,EACA,aAAA9D,EACA,QAAAL,CACF,EAAuC,CACrC,KAAM,CAAE,YAAaqE,EAA0B,GAAI,WAAA9D,CAAW,EAAIC,GAAa,uBAAU,YAAY,SAAS,CAC5G,UAAA0D,EACA,MAAOC,EACP,OAAQ9D,CACV,CAAC,EAED,OAAIE,EACK,gBAACG,GAAA,EAAkB,CAAC,KAAK,aAAc,GAI9C,gBAACC,GAAA,GACC,OAAQN,EACR,eAAgBgE,EAChB,iBAAkBF,EAClB,QAAAnE,CAAA,CACF,CAEJ,C,2HCnCO,MAAMsE,GAA0BC,GAAsB,CAC3D,KAAM,CAAE,MAAAC,EAAO,UAAAC,EAAW,QAAAzE,CAAQ,EAAIuE,EAChC,CAACG,EAASC,CAAU,KAAI,YAAkB,EAAK,EAC/C,CAACC,EAAWC,CAAY,KAAI,YAAyBL,EAAM,KAAK,EAEhEzC,KAAS,MAAW,EAAS,EAE7B+C,KAAY,eACf1B,GAAuB,CAOtB,GALI,CAACA,EAAO,aAIMA,EAAO,YAAY,QAAUA,EAAO,OAAO,MAE3D,OAGF,MAAM2B,EAAkBC,GAAQJ,EAAWxB,EAAO,OAAO,MAAOA,EAAO,YAAY,KAAK,EACxFyB,EAAaE,CAAe,EAE5B,MAAME,KAAkB,MAAmBR,EAAU,WAAW,EAC1DS,KAAa,YAAQH,EAAgB,IAAKnI,GAASA,EAAK,SAAS,CAAC,EAExE+H,EAAW,EAAI,KACf,UACE,OAAiB,CACf,cAAeF,EAAU,KACzB,UAAWD,EAAM,KACjB,gBAAAS,EACA,SAAUC,CACZ,CAAC,CACH,EACG,OAAO,EACP,QAAQ,IAAM,CACbP,EAAW,EAAK,CAClB,CAAC,CACL,EACA,CAACH,EAAM,KAAMC,EAAU,KAAMA,EAAU,YAAaG,CAAS,CAC/D,EAGMO,EAAsCP,EAAU,IAAKhI,IAAU,CACnE,GAAGA,EACH,IAAK,UAAO,OAAcA,EAAK,SAAU,CAAC,CAC5C,EAAE,EAEF,OACE,gBAACD,GAAA,GACC,UAAWoF,EAAO,MAClB,OAAQ,GACR,MAAO,gBAACqD,GAAA,CAAY,UAAAX,EAAsB,MAAAD,CAAA,CAAc,EACxD,UAAWxE,EACX,gBAAiBA,CAAA,EAEjB,gBAAC,MAAe,CAAC,UAAA8E,CAAA,EACf,gBAAC,OACC,YAAY,aACZ,KAAK,WACL,YAAa,CAACO,EAAUC,EAAWC,IACjC,gBAACC,GAAA,CAAS,SAAAH,EAAoB,KAAMF,EAAaI,EAAO,OAAO,KAAK,EAAG,QAAO,GAAC,GAG/EE,GACA,gBAAC,OACC,IAAKA,EAAkB,SACvB,UAAW,KAAG1D,EAAO,cAAe2C,GAAW3C,EAAO,QAAQ,EAC7D,GAAG0D,EAAkB,gBAErBN,EAAa,IAAI,CAACvI,EAAM8I,IACvB,gBAAC,MAAS,CAAC,IAAK9I,EAAK,IAAK,YAAaA,EAAK,IAAK,MAAA8I,EAAc,eAAgBhB,CAAA,EAC3EW,GAAgC,gBAACG,GAAA,CAAS,IAAK5I,EAAK,IAAK,SAAAyI,EAAoB,KAAAzI,CAAA,CAAY,CAC7F,CACD,EACA6I,EAAkB,WACrB,CAEJ,CACF,CACF,CAEJ,EASMD,GAAW,CAAC,CAAE,SAAAH,EAAU,KAAAzI,EAAM,QAAA+I,EAAU,GAAO,WAAAC,EAAa,EAAM,IAAqB,CAC3F,MAAM7D,KAAS,MAAW,EAAS,EAEnC,OACE,gBAAC,OACC,UAAW,KAAGA,EAAO,SAAU4D,GAAW,UAAWC,GAAc,YAAY,EAC/E,IAAKP,EAAS,SACb,GAAGA,EAAS,eACZ,GAAGA,EAAS,oBAEZ,MAAezI,EAAK,QAAQ,GAAK,gBAACiJ,GAAA,EAAa,CAAC,MAAOjJ,EAAK,SAAS,MAAO,KAC5E,MAAgBA,EAAK,QAAQ,GAAK,gBAACkJ,GAAA,EAAK,CAAC,KAAM,YAAa,MAAO,OAAQ,EAC5E,gBAAC,OAAI,UAAW/D,EAAO,cAAenF,EAAK,IAAK,EAChD,gBAACO,EAAA,EAAI,CAAC,KAAM,gBAAiB,CAC/B,CAEJ,EAOMiI,GAAc,CAAC,CAAE,UAAAX,EAAW,MAAAD,CAAM,IAAwB,CAC9D,MAAMzC,KAAS,MAAW,EAAS,EAEnC,OACE,gBAAC,OAAI,UAAWA,EAAO,QACrB,gBAAC5E,EAAA,EAAI,CAAC,KAAK,QAAS,MACnB,MAAmBsH,EAAU,WAAW,GACvC,gBAACb,GAAA,EAAO,CAAC,QAASa,EAAU,YAAY,KAAM,UAAU,OACtD,gBAAC,OACC,IAAKA,EAAU,YAAY,KAAK,KAChC,UAAW1C,EAAO,eAClB,IAAK0C,EAAU,YAAY,KAAK,KAAK,MAAM,MAC7C,CACF,EAEF,gBAAC,YAAMA,EAAU,IAAK,EACtB,gBAACtH,EAAA,EAAI,CAAC,KAAK,aAAc,GACzB,gBAAC,YAAMqH,EAAM,IAAK,CACpB,CAEJ,EAEM,GAAapC,IAA0B,CAC3C,SAAO;AAAA;AAAA;AAAA;AAAA,IAKP,YAAU;AAAA;AAAA;AAAA;AAAA;AAAA,WAKDA,EAAM,QAAQ;AAAA;AAAA,kBAEPA,EAAM,OAAO,WAAW;AAAA,aAC7BA,EAAM,OAAO,KAAK;AAAA;AAAA,+BAEAA,EAAM,OAAO,OAAO;AAAA,eACpCA,EAAM,QAAQ,CAAC,KAAKA,EAAM,QAAQ,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAOxBA,EAAM,OAAO,QAAQ;AAAA;AAAA,IAG7C,iBAAe;AAAA;AAAA,wBAEOA,EAAM,OAAO,OAAO;AAAA,IAE1C,YAAU;AAAA;AAAA;AAAA,IAIV,gBAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOd,UAAQ;AAAA;AAAA;AAAA;AAAA,WAICA,EAAM,QAAQ,CAAC;AAAA,IAExB,kBAAgB;AAAA,aACLA,EAAM,QAAQ,CAAC;AAAA,cACdA,EAAM,QAAQ,CAAC;AAAA,GAE7B,GAEO,SAAS4C,GAAWlG,EAAYiH,EAAoBC,EAAuB,CAChF,MAAM5C,EAAS,MAAM,KAAKtE,CAAK,EACzB,CAACmH,CAAO,EAAI7C,EAAO,OAAO2C,EAAY,CAAC,EAC7C,OAAA3C,EAAO,OAAO4C,EAAU,EAAGC,CAAO,EAE3B7C,CACT,C,2BC9LO,MAAM8C,GAAa,OAAW,CAAC,CAAE,MAAA1B,EAAO,UAAAC,EAAW,UAAA0B,EAAW,SAAAC,CAAS,IAAa,CACzF,KAAM,CAAE,YAAAC,CAAY,EAAI5B,EAClBlI,KAAW,eAAY,EACvBwF,KAAS,MAAW,EAAS,EAE7B,CAACuE,EAAgBC,CAAiB,KAAI,YAAS,EAAK,EACpD,CAACC,EAAiBC,CAAkB,KAAI,YAAS,EAAK,EACtD,CAACC,EAAmBC,CAAoB,KAAI,YAAS,EAAK,EAC1D,CAACC,EAAaC,CAAc,KAAI,YAAyC,MAAS,EAClF,CAACC,EAAaC,CAAc,KAAI,YAAS,CAACZ,CAAS,EAEnD,CAAE,aAAAa,CAAa,KAAI,MAAe,KAExC,aAAU,IAAM,CACdD,EAAe,CAACZ,CAAS,CAC3B,EAAG,CAACA,CAAS,CAAC,EAEd,KAAM,CAAE,SAAAc,GAAU,iBAAAC,CAAiB,KAAIC,GAAA,GAAY,EAC7CC,EAAY5C,EAAM,MAAM,CAAC,GAAG,UAC5B6C,EAAaD,MAAa,MAAmBA,CAAS,GAAKA,EAAU,cAAc,eAAkB,OACrG,CAAE,OAAAtD,CAAO,KAAIwD,GAAA,GAAUD,CAAS,EAGhCE,EACJN,GAASZ,CAAW,GAAKa,EAAiBb,CAAW,GAAK,CAAC7B,EAAM,MAAM,KAAM5H,IAAS,CAAC,CAACA,GAAK,SAAS,EAClG4K,KAAc,MAAqBhD,CAAK,EAGxCiD,GAAgBjD,EAAM,MAAM,KAAM5H,OAC/B,MAAmBA,GAAK,SAAS,GAAKA,GAAK,UAAU,cAAc,UAC3E,EAGK8K,GAAatB,IAAa,OAC1BuB,EAAcvB,IAAa,UAE3BwB,GAAc,IAAM,CACxBrL,KAAS,OAAuBkI,EAAWD,CAAK,CAAC,EACjDiC,EAAmB,EAAK,CAC1B,EAEMoB,EAAiC,CAAC,EAGxC,GAAIN,EACFM,EAAY,KACV,gBAAC,MAAe,CAAC,IAAI,eACnB,gBAACC,GAAA,EAAO,IAAC,EAAE,UAEb,CACF,UACSzB,IAAgB,MACzB,GAAIgB,EAAW,CACb,MAAMU,MAAU,OAAeV,CAAS,EACpCvD,GAAQ,UACN6D,GAAe,CAACF,KAClBI,EAAY,KACV,gBAACG,GAAA,GACC,aAAW,kBACX,cAAY,aACZ,IAAI,OACJ,KAAK,MACL,QAAQ,kBACR,QAAS,IAAMzB,EAAkB,EAAI,EACvC,CACF,EACAsB,EAAY,KACV,gBAACG,GAAA,GACC,aAAW,iBACX,cAAY,gBACZ,IAAI,UACJ,KAAK,eACL,QAAQ,gBACR,UAAWjG,EAAO,SAClB,QAAS,IAAM4E,EAAqB,EAAI,EAC1C,CACF,GAEEe,KACFG,EAAY,KACV,gBAACG,GAAA,GACC,aAAW,eACX,IAAI,OACJ,KAAK,cACL,QAAQ,eACR,GAAID,GACJ,OAAO,UACT,CACF,EAEIjE,GAAQ,UACV+D,EAAY,KACV,gBAACG,GAAA,GACC,aAAW,qBACX,IAAI,eACJ,KAAK,OACL,QAAQ,qBACR,GAAID,GAAU,eACd,OAAO,UACT,CACF,IAIFjE,IACE4D,GACFG,EAAY,KACV,gBAACG,GAAA,GACC,aAAW,qBACX,cAAY,gBACZ,IAAI,gBACJ,KAAK,eACL,QAAQ,sBACR,QAAS,IAAMnB,EAAe,QAAQ,EACxC,CACF,EACSc,GACTE,EAAY,KACV,gBAACG,GAAA,GACC,aAAW,oBACX,cAAY,eACZ,IAAI,eACJ,KAAK,eACL,QAAQ,oBACR,QAAS,IAAMnB,EAAe,OAAO,EACvC,CACF,SAIGG,EAAaX,EAAY,IAAI,GAAKY,GAASZ,CAAW,IAC1DmB,IACHK,EAAY,KACV,gBAACG,GAAA,GACC,aAAW,kBACX,cAAY,aACZ,IAAI,OACJ,KAAK,MACL,QAAQ,kBACR,QAAS,IAAMzB,EAAkB,EAAI,EACvC,CACF,EACAsB,EAAY,KACV,gBAACG,GAAA,GACC,aAAW,iBACX,cAAY,gBACZ,IAAI,UACJ,KAAK,eACL,QAAQ,iBACR,UAAWjG,EAAO,SAClB,QAAS,IAAM4E,EAAqB,EAAI,EAC1C,CACF,GAGFkB,EAAY,KACV,gBAACG,GAAA,GACC,aAAW,oBACX,cAAY,eACZ,IAAI,eACJ,KAAK,YACL,QAAQ,oBACR,QAAS,IAAMvB,EAAmB,EAAI,EACxC,CACF,GAIF,MAAMtC,GAAYuD,GAChB,gBAACO,GAAA,EAAY,CAAC,UAAWxD,EAAU,KAAM,EAEzC,gBAACwD,GAAA,EAAY,CAAC,UAAWxD,EAAU,KAAM,MAAOD,EAAM,KAAM,EAGxD0D,GAAiB,CAACC,GAAQ,KAAU,CACnCA,OACH,OAAQ,KAAY,oBAAoB,EAE1C5B,EAAkB,EAAK,CACzB,EAEA,OACE,gBAAC,OAAI,UAAWxE,EAAO,QAAS,cAAY,cAC1C,gBAAC,OAAI,UAAWA,EAAO,OAAQ,cAAY,qBACzC,gBAACqG,GAAA,GACC,KAAK,KACL,UAAWrG,EAAO,eAClB,YAAA+E,EACA,SAAUC,EACV,cAAY,wBACd,EACA,gBAAC5J,EAAA,EAAI,CAAC,KAAM2J,EAAc,SAAW,cAAe,KACnD,MAAmBT,CAAW,GAC7B,gBAACzC,GAAA,EAAO,CAAC,QAASyC,EAAY,KAAM,UAAU,OAC5C,gBAAC,OACC,IAAKA,EAAY,KAAK,KACtB,UAAWtE,EAAO,eAClB,IAAKsE,EAAY,KAAK,KAAK,MAAM,MACnC,CACF,EAIA,gBAAC,OAAI,UAAWtE,EAAO,UAAW,QAAS,IAAMgF,EAAe,CAACD,CAAW,GACzEU,GAAe,gBAAC1B,GAAA,EAAK,CAAC,MAAM,SAAS,KAAK,WAAY,GAAG,IAAE3B,EAC9D,EAEF,gBAAC,OAAI,UAAWpC,EAAO,OAAQ,EAC/B,gBAAC,OAAI,UAAWA,EAAO,aACrB,gBAAC,MAAc,CAAC,MAAAyC,CAAA,CAAc,CAChC,EACCiD,IACC,gCACE,gBAAC,OAAI,UAAW1F,EAAO,kBAAkB,GAAC,EAC1C,gBAAC,OAAI,UAAWA,EAAO,aACrB,gBAAC+D,GAAA,EAAK,CAAC,MAAM,SAAS,KAAK,aAAc,EAC3C,CACF,EAED,CAAC,CAAC+B,EAAY,QACb,gCACE,gBAAC,OAAI,UAAW9F,EAAO,kBAAkB,GAAC,EAC1C,gBAAC,OAAI,UAAWA,EAAO,aACrB,gBAACE,EAAA,EAAK,CAAC,IAAK,IAAM4F,CAAY,CAChC,CACF,CAEJ,EACC,CAACf,GACA,gBAACuB,GAAA,GACC,kBAAmB,GACnB,UAAWtG,EAAO,WAClB,eAAgB,GAChB,yBAA0B,EAAQyC,EAAM,SACxC,MAAOA,EAAM,MACf,EAED8B,GACC,gBAAC,OACC,UAAA7B,EACA,MAAAD,EACA,QAAS,IAAM0D,GAAe,EAC9B,UAAWpE,GAAQ,WAAU,OAAuBA,CAAM,EAAI,OAChE,EAED4C,GACC,gBAACpC,GAAsB,CAAC,MAAAE,EAAc,UAAAC,EAAsB,QAAS,IAAMkC,EAAqB,EAAK,EAAG,EAE1G,gBAAC2B,GAAA,GACC,OAAQ9B,EACR,MAAM,eACN,KACE,gBAAC,WACC,gBAAC,SAAE,aACc,gBAAC,cAAQhC,EAAM,IAAK,EAAS,0CAA6C,IACxFA,EAAM,MAAM,OAAO,UAAQ,IAAU,OAAQA,EAAM,MAAM,MAAM,EAAE,mBACpE,EACA,gBAAC,SAAE,6CAA2C,CAChD,EAEF,UAAWoD,GACX,UAAW,IAAMnB,EAAmB,EAAK,EACzC,YAAY,SACd,EACC3C,GAAU8C,IAAgB,UACzB,gBAAC/C,GAAyB,CAAC,OAAAC,EAAgB,QAAS,IAAM+C,EAAe,MAAS,EAAG,EAEtF/C,GAAU8C,IAAgB,SACzB,gBAAC3C,GAAA,CACC,UAAWH,EAAO,IAClB,UAAWU,EAAM,KACjB,QAAS,IAAMqC,EAAe,MAAS,EACzC,CAEJ,CAEJ,CAAC,EAEDX,GAAW,YAAc,aAElB,MAAM,GAAa9D,IACjB,CACL,WAAS,SACT,UAAQ;AAAA;AAAA;AAAA;AAAA,iBAIKA,EAAM,QAAQ,CAAC,KAAKA,EAAM,QAAQ,CAAC,KAAKA,EAAM,QAAQ,CAAC;AAAA;AAAA,iCAEvCA,EAAM,OAAO,OAAO;AAAA;AAAA;AAAA,4BAGzBA,EAAM,WAAW,MAAM;AAAA;AAAA,MAG/C,eAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAOTA,EAAM,YAAY,KAAK,IAAI;AAAA;AAAA;AAAA,wBAGXA,EAAM,QAAQ,CAAC;AAAA;AAAA,MAGnC,aAAW;AAAA,qBACMA,EAAM,QAAQ,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQhC,UAAQ;AAAA;AAAA,MAGR,kBAAgB;AAAA;AAAA;AAAA,qBAGCA,EAAM,QAAQ,CAAC;AAAA,wBACZA,EAAM,QAAQ,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,MAMnC,kBAAgB;AAAA,eACLA,EAAM,QAAQ,CAAC;AAAA,gBACdA,EAAM,QAAQ,CAAC;AAAA,qBACVA,EAAM,QAAQ,CAAC;AAAA,MAEhC,oBAAkB;AAAA;AAAA,eAEPA,EAAM,OAAO,KAAK;AAAA,MAE7B,oBAAkB;AAAA,kBACJA,EAAM,QAAQ,CAAC;AAAA,MAE7B,eAAa;AAAA;AAAA;AAAA;AAAA;AAAA,MAMb,cAAY;AAAA,gBACAA,EAAM,QAAQ,EAAG,CAAC;AAAA,MAE9B,YAAU;AAAA;AAAA,KAGZ,GCrYK,SAASmG,GAA0BC,EAAqC,CAC7E,SAAO,WACL,IACEA,EAAW,QAASC,GAClBA,EAAG,OAAO,IAAKC,IAAO,CACpB,UAAWD,EACX,MAAOC,CACT,EAAE,CACJ,EACF,CAACF,CAAU,CACb,CACF,CCQO,MAAMG,GAAa,CAAC,CAAE,WAAAH,EAAY,UAAArC,CAAU,IAAa,CAC9D,MAAMpE,KAAS,MAAW,EAAS,EAE7B6G,KAAYhG,GAAA,GAA4BnF,GAAUA,EAAM,WAAW,EACnEoL,KAAYjG,GAAA,GAA4BnF,GAAUA,EAAM,SAAS,EACjEqL,KAAmB,WAAQ,KAAqB,CAAC,CAAC,EAClDC,EAAuBR,GAA0BC,CAAU,EAE3DQ,KAAqB,WACzB,IACEF,EAAiB,OACdG,MAAO,OAA2BJ,EAAUI,EAAG,IAAI,CAAC,MAAK,OAA2BL,EAAUK,EAAG,IAAI,CAAC,CACzG,EACF,CAACJ,EAAWD,EAAWE,CAAgB,CACzC,EAEMI,EAAiBJ,EAAiB,KAAMG,GAAO,EAAQJ,EAAUI,EAAG,IAAI,GAAG,QAAQ,MAAO,EAE1FE,EAA2BL,EAAiB,OAAS,EACrDM,EAAwBJ,EAAmB,OAAS,EACpDK,EAAgBb,EAAW,OAAS,EAEpC,CAAE,cAAAc,EAAe,aAAAC,EAAc,KAAAC,EAAM,UAAAC,CAAU,KAAIC,GAAA,GACvDX,EACA,EACA,KACF,EAEA,OACE,gBAAC,WAAQ,UAAWhH,EAAO,SACzB,gBAAC,OAAI,UAAWA,EAAO,eACrB,gBAAC,UAAG,uBAAqB,EACxBiH,EAAmB,OAClB,gBAACtI,GAAA,GACC,UAAWqB,EAAO,OAClB,KAAM,sBAAsBiH,EAAmB,UAAU,IAAU,SAAUA,EAAmB,MAAM,IACxG,EAEA,gBAAC,UAAI,CAET,EAECS,EAAU,IAAI,CAAC,CAAE,MAAAjF,EAAO,UAAAC,CAAU,IAE/B,gBAACyB,GAAA,CACC,MAAA1B,EACA,IAAK,MAAG,MAAkBC,EAAU,WAAW,KAAKA,EAAU,QAAQD,EAAM,OAC5E,UAAAC,EACA,UAAA0B,EACA,SAAU,UACZ,CAEH,EAEA,CAACgD,GAA4B,gBAAC,SAAE,0DAAwD,EACxFA,GAA4B,CAACC,GAAyB,CAACC,GAAiB,gBAAC,SAAE,iBAAe,EAC1F,CAACH,GAAkBE,GAAyB,gBAACtB,GAAA,EAAO,CAAC,KAAM,GAAI,UAAW/F,EAAO,QAAS,EAE3F,gBAAC4H,GAAA,GACC,UAAW5H,EAAO,WAClB,YAAayH,EACb,cAAAF,EACA,WAAYC,EACZ,mBAAkB,GACpB,CACF,CAEJ,EAEM,GAAanH,IAA0B,CAC3C,UAAQ;AAAA;AAAA,IAGR,iBAAe;AAAA;AAAA;AAAA,IAIf,WAAS;AAAA,qBACUA,EAAM,QAAQ,CAAC;AAAA,IAElC,WAAS;AAAA;AAAA,eAEIA,EAAM,QAAQ,CAAC;AAAA,IAE5B,cAAY,MAAoBA,CAAK,CACvC,G,gBCpFO,MAAMwH,GAAe,CAAC,CAAE,WAAApB,EAAY,UAAArC,CAAU,IAAa,CAChE,MAAMpE,KAAS,MAAW,EAAS,EAC7B,CAAC8H,CAAW,KAAIC,EAAA,GAAe,EAE/B,CAAE,KAAAC,EAAM,MAAAC,CAAM,KAAIpH,GAAA,GAA4BnF,IAAW,CAC7D,KAAMA,EAAM,UAAU,IAAyB,GAAK,MACpD,MAAOA,EAAM,WAAW,IAAyB,GAAK,KACxD,EAAE,EAEIwM,EAAUF,EAAK,SAAWC,EAAM,QAChCE,EAAY,CAAC,CAACH,EAAK,QAAU,CAAC,CAACC,EAAM,OAErCG,EAAgBN,EAAY,OAAY,OACxCO,EAAmBD,KAAgB,OAA2B3B,CAAU,EAAIA,EAE5EO,EAAuBR,GAA0B6B,CAAgB,EAEjE,CAAE,cAAAd,EAAe,aAAAC,EAAc,KAAAC,EAAM,UAAAC,CAAU,KAAIC,GAAA,GACvDX,EACA,EACA,KACF,EAEA,OACE,gBAAC,WAAQ,UAAWhH,EAAO,SACzB,gBAAC,OAAI,UAAWA,EAAO,eACrB,gBAAC,UAAG,SAAO,EACVkI,EAAU,gBAACvJ,GAAA,EAAkB,CAAC,UAAWqB,EAAO,OAAQ,KAAK,YAAa,GAAK,gBAAC,UAAI,CACvF,EAEC0H,EAAU,IAAI,CAAC,CAAE,MAAAjF,EAAO,UAAAC,CAAU,IACjC,gBAACyB,GAAA,CACC,MAAA1B,EACA,IAAK,GAAGC,EAAU,QAAQD,EAAM,OAChC,UAAAC,EACA,UAAA0B,EACA,SAAUgE,EAAgB,OAAS,UACrC,CACD,EACAD,GAAaE,GAAkB,SAAW,GAAK,gBAAC,SAAE,iBAAe,EACjE,CAACF,GAAaD,GAAW,gBAACnC,GAAA,EAAO,CAAC,KAAM,GAAI,UAAW/F,EAAO,QAAS,EACxE,gBAAC4H,GAAA,GACC,UAAW5H,EAAO,WAClB,YAAayH,EACb,cAAAF,EACA,WAAYC,EACZ,mBAAkB,GACpB,CACF,CAEJ,EAEM,GAAanH,IAA0B,CAC3C,UAAQ;AAAA;AAAA,IAGR,iBAAe;AAAA;AAAA;AAAA,qBAGIA,EAAM,QAAQ,CAAC;AAAA,IAElC,WAAS;AAAA,qBACUA,EAAM,QAAQ,CAAC;AAAA,IAElC,WAAS;AAAA;AAAA,eAEIA,EAAM,QAAQ,CAAC;AAAA,IAE5B,cAAY,MAAoBA,CAAK,CACvC,GC3EaiI,GAAoB,CAAC,CAAE,WAAA7B,EAAY,UAAArC,CAAU,IAAa,CACrE,KAAM,CAACmE,EAAmBC,CAAe,KAAI,WAAQ,IAAM,CACzD,MAAMC,EAAShC,EACZ,IAAK/D,IAAe,CACnB,GAAGA,EACH,OAAQA,EAAU,OAAO,KAAK,CAACgG,EAAGC,IAAMD,EAAE,KAAK,cAAcC,EAAE,IAAI,CAAC,CACtE,EAAE,EACD,KAAK,CAACD,EAAGC,IAAMD,EAAE,KAAK,cAAcC,EAAE,IAAI,CAAC,EAC9C,MAAO,CACLF,EAAO,OAAQ/B,MAAO,MAAqBA,EAAG,WAAW,CAAC,EAC1D+B,EAAO,OAAQ/B,MAAO,MAAmBA,EAAG,WAAW,CAAC,CAC1D,CACF,EAAG,CAACD,CAAU,CAAC,EAEf,sBAAU,IAAM,IACd,OAAQ,KAAY,UAAU,CAChC,EAAG,CAAC,CAAC,EAGH,gCACE,gBAACmC,GAAA,EAAS,CAAC,QAAS,CAAC,MAAkB,aAAa,GAClD,gBAACf,GAAY,CAAC,WAAYU,EAAmB,UAAAnE,CAAA,CAAsB,CACrE,EACA,gBAACwE,GAAA,EAAS,CAAC,QAAS,CAAC,MAAkB,qBAAqB,GAC1D,gBAAChC,GAAU,CAAC,WAAY4B,EAAiB,UAAApE,CAAA,CAAsB,CACjE,CACF,CAEJ,E,eC3BO,MAAMyE,GAAuB,CAAC,CAAE,MAAA9L,EAAO,MAAArB,EAAO,iBAAAoN,EAAmB,EAAM,IAAa,CACzF,KAAM,CAACC,EAAWC,CAAY,KAAI,YAASF,CAAgB,EACrD9I,KAAS,MAAW,EAAS,EACnC,OACE,gCACE,gBAAC,MAAG,UAAWA,EAAO,QACpB,gBAACqG,GAAA,GACC,UAAWrG,EAAO,eAClB,KAAK,MACL,YAAa+I,EACb,SAAU,IAAMC,EAAa,CAACD,CAAS,EACzC,KACC,MAAqBrN,CAAK,EAAE,KAAGqB,EAAM,OAAO,GAC/C,EACC,CAACgM,GAAa,gBAACzC,GAAA,EAAU,CAAC,UAAWtG,EAAO,WAAY,MAAAjD,EAAc,gBAAiB,GAAM,CAChG,CAEJ,EAEM,GAAasD,IAA0B,CAC3C,kBAAgB;AAAA;AAAA,IAGhB,UAAQ;AAAA,kBACQA,EAAM,QAAQ,CAAC;AAAA,IAE/B,cAAY;AAAA,kBACIA,EAAM,QAAQ,CAAC;AAAA,GAEjC,GC9Ba4I,GAAoB,CAAC,CAAE,WAAAxC,CAAW,IAAa,CAC1D,MAAMyC,KAAU,UAAwBnB,EAAA,GAAe,EAAE,CAAC,CAAC,EAErDoB,KAAe,WAAQ,IAAM,CACjC,MAAM9H,EAAuB,CAC3B,CAAC,KAAsB,MAAM,EAAG,CAAC,EACjC,CAAC,KAAsB,QAAQ,EAAG,CAAC,EACnC,CAAC,KAAsB,OAAO,EAAG,CAAC,CACpC,EAEA,OAAAoF,EAAW,QAAS/D,GAClBA,EAAU,OAAO,QAASD,GACxBA,EAAM,MAAM,QAAS5H,GAAS,CACxBA,EAAK,aAAY,MAAeA,EAAK,QAAQ,GAC/CwG,EAAOxG,EAAK,SAAS,KAAK,EAAE,KAAKA,CAAI,CAEzC,CAAC,CACH,CACF,EAEA,OAAO,OAAOwG,CAAM,EAAE,QAAStE,GAAUA,EAAM,KAAK,CAAC2L,EAAGC,IAAMD,EAAE,KAAK,cAAcC,EAAE,IAAI,CAAC,CAAC,EAEpFtH,CACT,EAAG,CAACoF,CAAU,CAAC,EACf,OACE,iCACI,CAACyC,EAAQ,YAAcA,EAAQ,aAAe,KAAsB,SACpE,gBAACL,GAAoB,CAAC,MAAO,KAAsB,OAAQ,MAAOM,EAAa,KAAsB,MAAM,EAAG,GAE9G,CAACD,EAAQ,YAAcA,EAAQ,aAAe,KAAsB,UACpE,gBAACL,GAAA,CACC,MAAO,KAAsB,QAC7B,MAAOM,EAAa,KAAsB,OAAO,EACnD,GAEA,CAACD,EAAQ,YAAcA,EAAQ,aAAe,KAAsB,WACpE,gBAACL,GAAA,CACC,iBAAkBK,EAAQ,aAAe,KAAsB,SAC/D,MAAO,KAAsB,SAC7B,MAAOC,EAAa,KAAsB,QAAQ,EACpD,CAEJ,CAEJ,E,mJC3CO,SAASC,IAAiB,CAC/B,KAAM,CAACtB,EAAauB,CAAiB,KAAIC,GAAA,GAAmB,EACtDC,EAAczB,EAAY,IAAI,QAAQ,GAAK,GAE3C0B,KAAc,WAAQ,OAAM,OAAyBD,CAAW,EAAG,CAACA,CAAW,CAAC,EAChFE,KAAmB,WAAQ,IAAM,OAAO,OAAOD,CAAW,EAAE,KAAME,GAAW,IAAC,YAAQA,CAAM,CAAC,EAAG,CAACF,CAAW,CAAC,EAE7GG,KAAgB,eACnBC,GAA2B,CAC1B,MAAMC,KAAiB,OAAyBN,EAAaK,CAAS,EACtEP,EAAkB,CAAE,OAAQQ,CAAe,CAAC,CAC9C,EACA,CAACN,EAAaF,CAAiB,CACjC,EAEMS,KAAiB,eACpBD,GAAuC,CACtCR,EAAkB,CAAE,OAAQQ,CAAe,CAAC,CAC9C,EACA,CAACR,CAAiB,CACpB,EAGA,sBAAU,IAAM,CACd,MAAMU,EAAgB,CACpB,WAAYjC,EAAY,IAAI,YAAY,GAAK,OAC7C,WAAYA,EAAY,IAAI,YAAY,GAAK,OAC7C,SAAUA,EAAY,IAAI,UAAU,GAAK,OACzC,UAAQ,OAAcA,EAAY,IAAI,aAAa,GAAK,EAAE,EAAE,IAAI,KAAqB,CACvF,EAEyB,OAAO,OAAOiC,CAAa,EAAE,KAAMC,GAAiB,IAAC,YAAQA,CAAY,CAAC,IAEjGX,EAAkB,CAAE,WAAY,OAAW,WAAY,OAAW,SAAU,OAAW,YAAa,MAAU,CAAC,EAE/GM,KACE,OAAQH,EAAcS,GAAU,CAQ9B,GAPAA,EAAM,kBAAoBF,EAAc,WAAa,CAACA,EAAc,UAAU,EAAI,CAAC,EAC/EA,EAAc,eAAc,MAAwBA,EAAc,UAAU,IAC9EE,EAAM,YAAcF,EAAc,YAEhCA,EAAc,aAAY,MAAeA,EAAc,QAAQ,IACjEE,EAAM,WAAaF,EAAc,UAE/BE,EAAM,OAAO,SAAW,GAAKF,EAAc,OAAO,OAAS,EAAG,CAChE,MAAMG,EAAwBH,EAAc,OAAO,IACjD,CAAC,CAAE,KAAAI,EAAM,SAAAC,EAAU,MAAA/N,CAAM,IAAM,GAAG8N,IAAOC,IAAW/N,GACtD,EACA4N,EAAM,OAAO,KAAK,GAAGC,CAAqB,EAE9C,CAAC,CACH,EAEJ,EAAG,CAACpC,EAAa6B,EAAeH,EAAaH,CAAiB,CAAC,EAExD,CAAE,YAAAG,EAAa,iBAAAC,EAAkB,YAAAF,EAAa,eAAAO,EAAgB,cAAAH,CAAc,CACrF,CAEO,MAAMU,GAAmB,CAAC5D,EAAqC+C,OAC7D,WAAQ,IAAM,CACnB,MAAMc,EAAgBC,GAAY9D,EAAY+C,CAAW,EAGzD,OAAAc,EAAc,QAAS5H,GAAc,CACnCA,EAAU,OAAO,QAASD,GAAU,CAClCA,EAAM,MAAM,QAAS5H,GAAS,IACxB,MAAeA,EAAK,QAAQ,IAC9BA,EAAK,kBAAiB,OAAoBA,EAAK,QAAQ,EACvDA,EAAK,0BAAyB,OAA4BA,EAAK,QAAQ,EAE3E,CAAC,EAED4H,EAAM,UAAS,OAAqB,CAClC,MAAOA,EAAM,MAAM,IAAK+H,GAAMA,EAAE,QAAQ,EAAE,OAAQA,GAAiB,CAAC,CAACA,CAAC,CACxE,CAAC,CACH,CAAC,CACH,CAAC,EAEMF,CACT,EAAG,CAAC7D,EAAY+C,CAAW,CAAC,EAMxBiB,GAAS,IAAI,KAAO,CACxB,UAAW,EACX,SAAU,EACV,SAAU,EACV,SAAU,EACV,SAAU,CACZ,CAAC,EAEYF,GAAc,CACzB9D,EACA+C,EAA2B,CAAE,gBAAiB,CAAC,EAAG,OAAQ,CAAC,EAAG,cAAe,CAAC,CAAE,IACpD,CAC5B,IAAIkB,EAAqBjE,EAEzB,MAAMkE,EAAmBnB,EAAY,gBACjCmB,EAAiB,SACnBD,EAAqBA,EAAmB,OAAO,CAAC,CAAE,YAAApG,CAAY,OAC5D,MAAmBA,CAAW,EAAIqG,EAAiB,SAASrG,EAAY,IAAI,EAAI,EAClF,GAGF,MAAMsG,EAAkBpB,EAAY,UACpC,GAAIoB,EAAiB,CACnB,MAAMC,EAAoBH,EAAmB,IAAKhE,GAAOA,EAAG,IAAI,EAE1D,CAACoE,EAAMC,EAAMC,CAAK,EAAIP,GAAO,OAAOI,EAAmBD,CAAe,EACxEG,GAAQC,EACVN,EAAqBM,EAAM,IAAKtJ,GAAQgJ,EAAmBK,EAAK,IAAIrJ,CAAG,CAAC,CAAC,EAChEoJ,IACTJ,EAAqBI,EAAK,IAAKpJ,GAAQgJ,EAAmBhJ,CAAG,CAAC,GAKlE,OAAOgJ,EAAmB,OAAgCO,GAAiBzB,CAAW,EAAG,CAAC,CAAC,CAC7F,EAEMyB,GAAoBzB,GACjB,CAAC0B,EAAuCxI,IAAqC,CAClF,MAAMyI,EAAkB3B,EAAY,UACpC,IAAI4B,EAAiB1I,EAAU,OAE/B,GAAIyI,EAAiB,CACnB,MAAME,EAAiBD,EAAe,IAAKzE,GAAMA,EAAE,IAAI,EACjD,CAACmE,EAAMC,EAAMC,CAAK,EAAIP,GAAO,OAAOY,EAAgBF,CAAe,EACrEJ,GAAQC,EACVI,EAAiBJ,EAAM,IAAKtJ,GAAQ0J,EAAeL,EAAK,IAAIrJ,CAAG,CAAC,CAAC,EACxDoJ,IACTM,EAAiBN,EAAK,IAAKpJ,GAAQ0J,EAAe1J,CAAG,CAAC,GAI1D,OAAA0J,EAAiBA,EAAe,OAA4BE,GAAa9B,CAAW,EAAG,CAAC,CAAC,EAErF4B,EAAe,QACjBF,EAAa,KAAK,CAChB,GAAGxI,EACH,OAAQ0I,CACV,CAAC,EAGIF,CACT,EAIII,GAAgB9B,GAA6B,CACjD,MAAM+B,EAAgB/B,EAAY,UAAYA,EAAY,cAAc,KAAK,GAAG,EAEhF,MAAO,CAACgC,EAA+B/I,IAA6B,CAClE,IAAI6H,EAAgB7H,EAAM,MAE1B,GAAI8I,EAAe,CACjB,MAAME,EAAgBnB,EAAc,IAAKE,GAAMA,EAAE,IAAI,EAC/C,CAACM,EAAMC,EAAMC,CAAK,EAAIP,GAAO,OAAOgB,EAAeF,CAAa,EAClER,GAAQC,EACVV,EAAgBU,EAAM,IAAKtJ,GAAQ4I,EAAcS,EAAK,IAAIrJ,CAAG,CAAC,CAAC,EACtDoJ,IACTR,EAAgBQ,EAAK,IAAKpJ,GAAQ4I,EAAc5I,CAAG,CAAC,GAIxD,OAAA4I,EAAgBA,EAAc,OAAQzP,GAAS,CAC7C,GAAI2O,EAAY,UAAYA,EAAY,WAAa3O,EAAK,UAAU,KAClE,MAAO,GAGT,MAAM6Q,KAAiB,MAAmB7Q,EAAK,SAAS,GAAK,CAAC8Q,GAAqB9Q,EAAK,UAAW2O,CAAW,EAC9G,GAAIA,EAAY,iBAAiB,QAAUkC,EACzC,MAAO,GAGT,GAAIlC,EAAY,YAAc3O,EAAK,SAAU,CAC3C,MAAM+Q,KAAa,MAAc/Q,EAAK,SAAS,MAAM,EACrD,OAAO2O,EAAY,aAAeoC,EAIpC,GAAIpC,EAAY,OAAO,OAAS,EAAG,CAEjC,MAAMqC,KAAW,YAAQrC,EAAY,OAAO,IAAIsC,EAAiB,CAAC,EAE5DC,EAAyBF,EAAS,OAAS,MAAK,OAAoBhR,EAAK,OAAQgR,CAAQ,EACzFG,EACJH,EAAS,OAAS,GAClBhR,EAAK,UACLA,EAAK,SAAS,OAAS,KAAa,UACpCA,EAAK,SAAS,QACdA,EAAK,SAAS,OAAO,KAAMoR,MAAU,OAAoBA,EAAM,OAAQJ,CAAQ,CAAC,EAElF,GAAI,EAAEE,GAA0BC,GAC9B,MAAO,GAGX,MACE,EAAAxC,EAAY,WACZ,EAAE3O,EAAK,aAAY,MAAeA,EAAK,QAAQ,GAAKA,EAAK,SAAS,QAAU2O,EAAY,WAK5F,CAAC,EAEGc,EAAc,QAChBkB,EAAS,KAAK,CACZ,GAAG/I,EACH,MAAO6H,CACT,CAAC,EAEIkB,CACT,CACF,EAEA,SAASM,GAAkBI,EAA2C,CACpE,GAAI,CACF,SAAO,OAAaA,CAAY,CAClC,MAAE,CAEA,MAAO,CAAE,KAAMA,EAAc,MAAO,GAAI,QAAS,GAAM,QAAS,EAAK,CACvE,CACF,CAEA,MAAMP,GAAuB,CAACtG,EAAgCmE,IACvDA,EAAY,iBAAiB,OAI3B,CAAC,CAACnE,EAAU,cAAc,KAAK,KAAM8G,GAAU,CACpD,GAAI,CAACA,EAAM,cACT,MAAO,GAET,MAAMjF,KAAK,MAAiB,EAAE,oBAAoBiF,EAAM,aAAa,EACrE,OAAOjF,GAAI,MAAQsC,GAAa,iBAAiB,SAAStC,EAAG,IAAI,CACnE,CAAC,EATQ,G,uFCnOJ,MAAMkF,GAA4B5J,GAAyC,CAChF,MAAM6J,KAAgB,MAAiB,EAEjC,CAAC3Q,EAAO4Q,CAAQ,KAAI,YAAgC,EAEpDC,EAAW,CAACC,EAAuCC,IAA2B,CAClF,GAAIA,EAAW,SAAW,SAAWjK,EAAM,QAAS,CAClDA,EAAM,QAAQ,EACd,OAGF,MAAMkK,EAAeF,EAAMA,EAAM,OAAS,CAAC,EAE3C,IAAIG,EAAgBC,EAEhBH,EAAW,SAAW,aAAeA,EAAW,SAAW,gBAI7DE,EADkDF,EAChB,cAAc,MAChDG,EAAS,WAETD,EAAiBD,EAAa,MAC9BE,EAAS,OAGX,MAAMC,EAAaR,EAAc,oBAAoBM,CAAc,EAE/DE,IACFrK,EAAM,SAASqK,EAAYD,CAAM,EACjCN,EAAS,CAAE,MAAO,MAAU,CAAC,EAEjC,EAEMQ,EAAkB,IAAkD,CACxE,KAAM,CAAE,QAAAC,EAAS,cAAAC,EAAe,UAAAC,CAAU,EAAIzK,EAC9C,GAAI,GAACuK,GAAWE,GAIhB,OAAOF,GAAS,IAAKJ,GAA2B,CAC9C,MAAMzF,EAAKmF,EAAc,oBAAoBM,CAAc,EAC3D,GAAIzF,EACF,MAAO,CACL,MAAOA,EAAG,KAAK,MAAM,EAAG,EAAE,EAC1B,MAAOA,EAAG,KACV,OAAQA,EAAG,KAAK,KAAK,MAAM,MAC3B,SAAU8F,EACV,KAAM9F,EAAG,IACX,EAGF,MAAMgG,KAAM,OAAiBP,CAAc,EAE3C,OAAIO,IAAQ,MAAwB,KAAOA,IAAQ,MAAwB,KAClE,CAAE,MAAOA,EAAK,MAAOA,EAAK,SAAUF,CAAc,EAGpD,CACL,OAAQE,GAAO,WAAa,eAC5B,MAAOA,GAAO,OACd,OAAQ,GACR,SAAUF,CACZ,CACF,CAAC,CACH,EAEMG,EAAuB,IAAM,CACjC,KAAM,CAAE,SAAAC,EAAU,QAAAC,EAAS,QAAAC,EAAS,MAAAC,EAAO,UAAAC,EAAW,UAAAC,EAAW,YAAAC,GAAa,SAAAC,GAAU,KAAAC,EAAM,OAAAlE,GAAQ,KAAAmE,CAAK,EACzGrL,EAEIsL,GAAczB,EAAc,QAAQ,CACxC,SAAAe,EACA,QAAAC,EACA,QAAAC,EACA,KAAAO,EACA,UAAAL,EACA,MAAAD,EACA,UAAAE,EACA,YAAAC,GACA,SAAAC,GACA,OAAAjE,GACA,KAAAkE,CACF,CAAC,EAEKG,GAAkBD,GAAY,OAAO,IAA0B,EAAE,IAAK5G,IAAQ,CAClF,MAAOA,EAAG,KACV,MAAO,GAAGA,EAAG,OAAOA,EAAG,UAAY,aAAe,KAClD,OAAQA,EAAG,KAAK,KAAK,MAAM,MAC3B,KAAMA,EAAG,IACX,EAAE,EAEI8G,GAAqBF,GACxB,OAAQ5G,GAAO,IAAC,MAA2BA,CAAE,CAAC,EAC9C,IAAKA,IAAQ,CACZ,MAAOA,EAAG,KACV,MAAO,GAAGA,EAAG,OAAOA,EAAG,UAAY,aAAe,KAClD,OAAQA,EAAG,KAAK,KAAK,MAAM,MAC3B,KAAMA,EAAG,IACX,EAAE,EAOJ,MALuB,CACrB,CAAE,MAAO,2CAA4C,QAAS6G,GAAiB,SAAU,EAAK,EAC9F,CAAE,MAAO,qBAAsB,QAASC,GAAoB,SAAU,EAAK,CAC7E,CAGF,EAEM,CACJ,UAAAC,EACA,OAAAC,EACA,QAAAC,EACA,gBAAAC,EACA,YAAAC,EACA,MAAAC,EACA,QAAAC,EACA,SAAAC,EAAW,GACX,UAAAhS,EAAY,EACd,EAAIgG,EAEE1F,EAAUqQ,EAAqB,EAC/B9Q,EAAQyQ,EAAgB,EACxB2B,GAAc,OAAON,GAAY,WAEvC,OACE,gBAAC,OAAI,cAAaO,GAAA,GAAU,WAAW,iBAAiB,WACtD,gBAAC,OACC,UAAAlS,EACA,SAAAgS,EACA,cAAaE,GAAA,GAAU,WAAW,iBAAiB,QACnD,QAASH,GAAW,qBACpB,UAAU,6BACV,YAAAE,GACA,sBAAuB,GACvB,SAAAlC,EACA,QAAAzP,EACA,UAAAmR,EACA,OAAAC,EACA,MAAAI,EACA,gBAAAF,EACA,cAAe,IACf,YAAAC,EACA,iBAAiB,uBACjB,MAAOhS,GAAS,CAAC,EACjB,QAAS,EAAQX,GAAO,OAAU,EAAQ8G,EAAM,QAChD,eAAiBmM,GACXA,EAAE,SAAQ,MAA0BA,EAAE,KAAK,SAAS,GAAKA,IAAMtS,EAE/D,gBAAC,MAAe,CAAC,MAAM,SAAS,QAAQ,gBAAgB,OAAO,QAC7D,gBAAC,YAAMsS,EAAE,KAAM,EAAO,IAAC,gBAACC,GAAA,EAAoB,CAAC,OAAQD,EAAE,KAAK,UAAW,CACzE,EAGGA,EAAE,OAAS,EACpB,CACF,CACF,CAEJ,ECjKME,GAAiC,CACrC,CACE,KAAM,SACN,MAAO,UACP,MAAO,SACT,EACA,CACE,KAAM,UACN,MAAO,OACP,MAAO,MACT,EACA,CACE,KAAM,aACN,MAAO,QACP,MAAO,OACT,CACF,EAEMC,GAAqC,CACzC,CACE,MAAO,SACP,MAAO,KAAa,QACtB,EACA,CACE,MAAO,aACP,MAAO,KAAa,SACtB,CACF,EAEMC,GAAuC,CAC3C,CAAE,MAAO,KAAM,MAAO,MAAW,EAAG,EACpC,CAAE,MAAO,UAAW,MAAO,MAAW,MAAO,EAC7C,CAAE,MAAO,QAAS,MAAO,MAAW,KAAM,CAC5C,EAMMC,GAAmB,OAAO,QAAQ,IAAqB,EAAE,IAAI,CAAC,CAACC,EAAK5S,CAAK,KAAO,CACpF,SAAO,MAAqBA,CAAK,EACjC,MAAAA,CACF,EAAE,EAEI6S,GAAc,CAAC,CAAE,gBAAAC,EAAkB,IAAG,EAAa,IAAuB,CAC9E,MAAMnP,KAAS,MAAW,EAAS,EAC7B,CAAC8H,EAAasH,CAAc,KAAIrH,EAAA,GAAe,EAC/C,CAAE,YAAAyB,EAAa,iBAAAC,EAAkB,YAAAF,EAAa,eAAAO,EAAgB,cAAAH,CAAc,EAAIP,GAAe,EAG/F,CAACiG,EAAWC,CAAY,KAAI,YAAiB,KAAK,MAAM,KAAK,OAAO,EAAI,GAAG,CAAC,EAC5EC,EAAgB,cAAcF,IAC9BG,EAAiB,eAAeH,IAEhCI,KAAiB,UAAgC,IAAI,EACrD,CAAE,aAAAC,EAAc,SAAAC,EAAU,SAAAC,CAAS,KAAI,OAAiC,CAAE,cAAe,CAAE,YAAArG,CAAY,CAAE,CAAC,EAC1G,CAAE,IAAAsG,EAAK,GAAGC,EAAK,EAAIH,EAAS,aAAa,KAE/C,aAAU,IAAM,CACdC,EAAS,cAAerG,CAAW,CACrC,EAAG,CAACA,EAAaqG,CAAQ,CAAC,EAE1B,MAAMG,EAAyB,CAACC,EAA6CpD,KAA6B,CACxG,MAAMqD,EACJrD,KAAW,MACP,CAAC,GAAGpD,EAAY,eAAe,EAAE,OAAO,CAACwG,EAAgB,IAAI,CAAC,EAC9DxG,EAAY,gBAAgB,OAAQW,IAASA,KAAS6F,EAAgB,IAAI,EAEhFrG,EAAc,CACZ,GAAGH,EACH,gBAAAyG,CACF,CAAC,EAEDX,EAAcL,IAAQA,GAAM,CAAC,CAC/B,EAEMiB,EAAkB,IAAM,CAC5BvG,EAAc,CAAE,GAAGH,EAAa,gBAAiB,CAAC,CAAE,CAAC,EACrD8F,EAAcL,GAAQA,EAAM,CAAC,CAC/B,EAEMkB,EAA0B9T,GAAiC,IAC/D,OAAQ,KAAY,yBAAyB,EAC7CsN,EAAc,CAAE,GAAGH,EAAa,UAAWnN,CAAM,CAAC,EAClDiT,EAAcL,IAAQA,GAAM,CAAC,CAC/B,EAEMmB,EAAoBC,GAAiB,CACzCjB,EAAe,CAAE,KAAAiB,CAAK,CAAC,CACzB,EAEMC,EAAwBC,GAA2B,CACvD5G,EAAc,CAAE,GAAGH,EAAa,SAAA+G,CAAS,CAAC,EAC1CjB,EAAcL,IAAQA,GAAM,CAAC,CAC/B,EAEMuB,EAA0B5E,GAA2B,CACzDjC,EAAc,CAAE,GAAGH,EAAa,WAAAoC,CAAW,CAAC,EAC5C0D,EAAcL,IAAQA,GAAM,CAAC,CAC/B,EAEMwB,GAA0B,IAAM,CACpC3G,EAAe,MAAS,EACxBqF,EAAgB,EAEhB,WAAW,IAAMG,EAAaD,EAAY,CAAC,EAAG,GAAG,CACnD,EAEMqB,GAAa,gBAACtV,EAAA,EAAI,CAAC,KAAM,SAAU,EACzC,OACE,gBAAC,OAAI,UAAW4E,EAAO,WACrB,gBAACE,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,GAC7B,gBAACA,EAAA,EAAK,CAAC,UAAU,MAAM,IAAK,GAC1B,gBAACyQ,GAAA,GACC,UAAW3Q,EAAO,kBAClB,MACE,gBAAC4Q,GAAA,EAAK,CAAC,QAAQ,sBACb,gBAAC1Q,EAAA,EAAK,CAAC,IAAK,IACV,gBAAC,YAAK,wBAAsB,EAC5B,gBAAC2B,GAAA,GACC,QACE,gBAAC,WACC,gBAAC,SAAE,qJAGH,EACA,gBAAC,SAAE,wLAGH,CACF,GAGF,gBAACzG,EAAA,EAAI,CAAC,KAAK,cAAc,KAAK,IAAK,EACrC,CACF,CACF,GAGF,gBAACgR,GAAA,CACC,IAAKmD,EACL,SAAQ,GACR,UAAS,GACT,YAAY,mBACZ,QAAS/F,EAAY,gBACrB,SAAUuG,EACV,QAASG,CAAA,CACX,CACF,EAEA,gBAAC,WACC,gBAACU,GAAA,EAAK,KAAC,OAAK,EACZ,gBAACC,GAAA,GACC,QAAS7B,GACT,MAAOxF,EAAY,UACnB,SAAU2G,CAAA,CACZ,CACF,EACA,gBAAC,WACC,gBAACS,GAAA,EAAK,KAAC,WAAS,EAChB,gBAACC,GAAA,EAAgB,CAAC,QAAS/B,GAAiB,MAAOtF,EAAY,SAAU,SAAU8G,CAAA,CAAsB,CAC3G,EACA,gBAAC,WACC,gBAACM,GAAA,EAAK,KAAC,QAAM,EACb,gBAACC,GAAA,GACC,QAAS9B,GACT,MAAOvF,EAAY,WACnB,SAAUgH,CAAA,CACZ,CACF,CACF,EACA,gBAACtQ,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,GAC7B,gBAACA,EAAA,EAAK,CAAC,UAAU,MAAM,IAAK,GAC1B,gBAAC,QACC,UAAWF,EAAO,YAClB,SAAU0P,EAActS,GAAS,CAC/B0M,EAAe1M,EAAK,WAAW,EAC/BqS,EAAe,SAAS,KAAK,CAC/B,CAAC,GAED,gBAACkB,GAAA,GACC,MACE,gBAACC,GAAA,EAAK,CAAC,QAAQ,oBACb,gBAAC1Q,EAAA,EAAK,CAAC,IAAK,IACV,gBAAC,YAAK,QAAM,EACZ,gBAAC4Q,GAAA,EAAS,CAAC,QAAS,gBAACC,GAAA,IAAgB,GACnC,gBAAC3V,EAAA,EAAI,CAAC,KAAK,cAAc,KAAK,KAAK,SAAU,EAAG,CAClD,CACF,CACF,GAGF,gBAAC4V,GAAA,GACC,GAAG,mBACH,IAAKxB,EACL,OAAQkB,GACR,IAAMO,GAAM,CACVpB,EAAIoB,CAAC,EACLxB,EAAe,QAAUwB,CAC3B,EACC,GAAGnB,GACJ,YAAY,SACZ,cAAY,qBACd,CACF,EACA,gBAAC,SAAM,KAAK,SAAS,OAAM,GAAC,CAC9B,EACA,gBAAC,WACC,gBAACc,GAAA,EAAK,KAAC,SAAO,EACd,gBAACC,GAAA,GACC,QAAShC,GACT,MAAO,OAAO/G,EAAY,MAAW+G,GAAY,CAAC,EAAE,KAAK,EACzD,SAAUuB,CAAA,CACZ,CACF,CACF,EACC3G,GACC,gBAAC,WACC,gBAACpO,EAAA,GAAM,CAAC,UAAW,GAAO,KAAK,QAAQ,QAAQ,YAAY,QAASoV,EAAA,EAAyB,eAE7F,CACF,CAEJ,CACF,CACF,CAEJ,EAEM,GAAapQ,IACV,CACL,aAAW;AAAA,uBACQA,EAAM,QAAQ,CAAC;AAAA,MAElC,qBAAmB;AAAA;AAAA;AAAA;AAAA,MAKnB,eAAa;AAAA;AAAA;AAAA,KAIf,GAGF,SAAS0Q,IAAkB,CACzB,MAAM/Q,KAAS,MAAWkR,EAAU,EAEpC,OACE,gBAAC,WACC,gBAAC,WAAI,4EAA0E,EAC/E,gBAAC,SAAG,EACJ,gBAAC,OAAI,UAAWlR,EAAO,MACrB,gBAAC,WAAI,aAAW,EAChB,gBAAC,WAAI,YAAU,EACf,gBAACmR,GAAA,CAAQ,MAAM,cAAc,KAAK,wCAAyC,GAC3E,gBAACA,GAAA,CAAQ,MAAM,mBAAmB,KAAK,kBAAmB,GAC1D,gBAACA,GAAA,CAAQ,MAAM,QAAQ,KAAK,iBAAkB,GAC9C,gBAACA,GAAA,CAAQ,MAAM,OAAO,KAAK,gBAAiB,GAC5C,gBAACA,GAAA,CAAQ,MAAM,SAAS,KAAK,+BAAgC,GAC7D,gBAACA,GAAA,CAAQ,MAAM,QAAQ,KAAK,6BAA8B,GAC1D,gBAACA,GAAA,CAAQ,MAAM,OAAO,KAAK,yBAA0B,GACrD,gBAACA,GAAA,CAAQ,MAAM,SAAS,KAAK,wBAAyB,EACxD,CACF,CAEJ,CAEA,SAASA,GAAQ,CAAE,MAAAC,EAAO,KAAAC,CAAK,EAAoC,CACjE,MAAMrR,KAAS,MAAWkR,EAAU,EAEpC,OACE,gCACE,gBAAC,WAAKE,CAAM,EACZ,gBAAC,QAAK,UAAWpR,EAAO,MAAOqR,CAAK,CACtC,CAEJ,CAEA,MAAMH,GAAc7Q,IAA0B,CAC5C,QAAM;AAAA;AAAA;AAAA,WAGGA,EAAM,QAAQ,CAAC;AAAA;AAAA,IAGxB,QAAM;AAAA;AAAA;AAAA,GAIR,GAEA,GAAe6O,G,gBC3Rf,MAAMoC,GAAQ,CACZ,OAAQhJ,GACR,MAAOW,EACT,EAGMsI,GAAe,KAA0B,EAEzCC,MAAW,MACf,IAAM,CACJ,MAAMhX,KAAW,eAAY,EACvBwF,KAAS,MAAW,EAAS,EAC7ByR,KAAuB,WAAQ,KAAwB,CAAC,CAAC,EACzD,CAACrN,EAAWsN,CAAY,KAAI,YAAS,EAAK,EAE1CvC,KAAkB,eAAY,IAAMuC,EAAa,EAAK,EAAG,CAAC,CAAC,EAE3D,CAAC5J,CAAW,KAAIC,EAAA,GAAe,EAC/B,CAAE,YAAAyB,EAAa,iBAAAC,CAAiB,EAAIL,GAAe,EAEnDiH,EAAOiB,GAAMxJ,EAAY,IAA6B,EACvDA,EAAY,KACb,SAEE6J,EAAgBL,GAAMjB,CAAI,EAE1BvP,KAAmBD,GAAA,GAA4BnF,GAAUA,EAAM,SAAS,EACxEqF,KAAoBF,GAAA,GAA4BnF,GAAUA,EAAM,UAAU,EAE1EwM,EAAUuJ,EAAqB,KAClCtH,GAASrJ,EAAiBqJ,CAAI,GAAG,SAAWpJ,EAAkBoJ,CAAI,GAAG,OACxE,EAEMyH,EAAe,OAAO,QAAQ9Q,CAAgB,EAC9C+Q,EAAgBD,EAAa,MACjC,CAAC,CAAC9S,EAAGpD,CAAK,IAAMA,EAAM,aAAeA,GAAO,SAAW,QAAaA,GAAO,QAAU,OACvF,EACMoW,EAAeF,EAAa,MAAM,CAAC,CAAC9S,EAAGpD,CAAK,IAAMA,EAAM,YAAcA,GAAO,QAAQ,SAAW,CAAC,EAEjGqW,EAActI,EAAmB,OAAY8H,GAE7C,CAACzS,GAAGkT,CAAU,KAAIC,EAAA,GAAW,SAAY,CACxC/J,GACH,MAAM1N,KAAS,OAAgC,GAAO,CAAE,YAAAuX,CAAY,CAAC,CAAC,CAE1E,EAAG,CAAC7J,EAAS6J,EAAavX,CAAQ,CAAC,KAEnC,aAAU,IAAM,IACd,MAAwB,EAAE,MAAM,IAAM,CAAC,CAAC,CAC1C,EAAG,CAAC,CAAC,KAGL,aAAU,IAAM,CACdA,KAAS,OAAgC,GAAO,CAAE,YAAAuX,CAAY,CAAC,CAAC,CAClE,EAAG,CAACvX,EAAUuX,CAAW,CAAC,KAC1BG,EAAA,GAAYF,EAAY,KAA0B,EAGlD,MAAMG,EAA4BN,GAAiBC,GAAgBF,EAAa,OAAS,EAEnFQ,KAA8CC,GAAA,IAA0B,EACxE3H,EAAqBL,GAAiB+H,EAAoB5I,CAAW,EAE3E,OAGE,gBAAC8I,GAAA,EAAmB,CAAC,OAAO,aAAa,UAAW,IAClD,gBAAChS,GAAc,IAAC,EAChB,gBAAC,GAAW,CAAC,gBAAA6O,CAAA,CAAkC,EAC9C,CAACgD,GACA,gCACE,gBAAC,OAAI,UAAWnS,EAAO,MAAO,EAC9B,gBAAC,OAAI,UAAWA,EAAO,kBACrB,gBAAC,OAAI,UAAWA,EAAO,gBACpBqQ,IAAS,UAAY5G,GACpB,gBAACpO,EAAA,IACC,UAAW2E,EAAO,gBAClB,KAAMoE,EAAY,kBAAoB,oBACtC,QAAQ,YACR,QAAS,IAAMsN,EAAa,CAACtN,CAAS,GAErCA,EAAY,eAAiB,YAChC,EAEF,gBAACmO,GAAA,GAAS,CAAC,WAAY7H,CAAA,CAAoB,CAC7C,EACA,gBAACxK,EAAA,EAAK,CAAC,UAAU,MAAM,IAAK,IAC1B,gBAACrB,GAAsB,IAAC,CAC1B,CACF,CACF,EAEDsT,GAA6B,gBAACpS,EAAa,IAAC,EAC5C,CAACoS,GAA6B,gBAACR,EAAA,CAAc,UAAAvN,EAAsB,WAAYsG,CAAA,CAAoB,CACtG,CAEJ,EACA,CAAE,MAAO,MAAO,CAClB,EAEM,GAAarK,IAA0B,CAC3C,SAAO;AAAA;AAAA;AAAA,qBAGYA,EAAM,QAAQ,CAAC;AAAA,+BACLA,EAAM,OAAO,OAAO;AAAA,IAEjD,oBAAkB;AAAA,qBACCA,EAAM,QAAQ,CAAC;AAAA;AAAA;AAAA,IAIlC,kBAAgB;AAAA;AAAA;AAAA;AAAA,IAKhB,mBAAiB;AAAA,oBACCA,EAAM,QAAQ,CAAC;AAAA,GAEnC,GAEA,GAAemR,E,kFCvIR,MAAM5I,EAAY,CAAC,CAAE,QAAA4J,EAAS,SAAAC,CAAS,IAAsB,CAClE,MAAMC,KAAsB,UAAOF,EAASG,CAAoB,EAC1DC,KAAqB,UAAOJ,EAASK,CAAmB,EAE9D,OAAIH,EAAoB,OACf,gBAACI,EAAA,CAAsB,QAASJ,CAAA,EAAsBD,CAAS,EAGpEG,EAAmB,OACd,gBAACG,EAAA,CAAqB,QAASH,CAAA,EAAqBH,CAAS,EAG/D,IACT,EAMMK,EAAwB,CAAC,CAAE,QAAAN,EAAS,SAAAC,CAAS,IAAwC,CACzF,MAAMO,KAAuB,MAA4B,EAGzD,OAFgBC,EAAeD,EAAsBR,CAAO,EAGnD,gCAAGC,CAAS,EAEZ,IAEX,EAEMM,EAAuB,CAAC,CAAE,QAAAP,EAAS,SAAAC,CAAS,IAAuC,CACvF,MAAMS,KAAuB,MAAwB,EAGrD,OAFgBD,EAAeC,EAAsBV,CAAO,EAGnD,gCAAGC,CAAS,EAEZ,IAEX,EAGA,SAASQ,EAAiCE,EAAyBX,EAAc,CAC/E,SAAO,SAAMW,CAAS,EACnB,KAAKX,CAAO,EACZ,OAAO,EACP,MAAM,EACN,KAAK,CAAC,CAACY,EAAYC,CAAO,IAAMA,IAAY,EAAI,CACrD,CAEA,SAASV,EAAqB/F,EAA4B,CACxD,OAAO,OAAO,OAAO,IAAkB,EAAE,SAASA,CAAM,CAC1D,CAEA,SAASiG,EAAoBjG,EAA2B,CACtD,OAAO,OAAO,OAAO,IAAiB,EAAE,SAASA,CAAM,CACzD,C,qHC3DO,SAAS0G,EAAa,CAAE,YAAAC,EAAa,aAAAC,EAAc,SAAAC,EAAU,MAAArC,CAAM,EAAsB,CAC9F,MAAMpR,KAAS,MAAWC,CAAS,EACnC,OACE,gBAAC,KACC,QAAS,gBAAC,OAAI,UAAWD,EAAO,WAAYuT,CAAY,EACxD,MACE,gBAAC,IAAK,CAAC,IAAK,EAAG,UAAU,OACvB,gBAAC,IAAI,CAAC,KAAK,iBAAkB,GAC5BnC,CACH,EAEF,OACEoC,EACE,gBAAC,KAAE,KAAMA,EAAc,OAAO,SAAS,IAAI,cACzC,gBAAC,IAAK,CAAC,UAAU,MAAM,IAAK,GAAK,WAAW,UAC1C,gBAAC,IAAI,CAAC,MAAM,QACTC,EAAS,IAAC,gBAAC,IAAI,CAAC,KAAK,KAAK,KAAK,mBAAoB,EACtD,CACF,CACF,EACE,OAEN,YAAa,GACb,UAAU,gBAEV,gBAAC,OAAI,UAAWzT,EAAO,UACrB,gBAAC,IAAK,CAAC,UAAU,MAAM,WAAW,SAAS,IAAK,IAC9C,gBAAC,IAAI,CAAC,KAAK,kBAAkB,KAAK,IAAK,GACvC,gBAAC,IAAI,CAAC,QAAQ,YAAY,MAAM,WAAU,YAE1C,CACF,CACF,CACF,CAEJ,CAEA,MAAMC,EAAaI,IAA0B,CAC3C,aAAW;AAAA,aACAA,EAAM,OAAO,KAAK;AAAA,iBACdA,EAAM,WAAW,KAAK;AAAA,IAErC,YAAU;AAAA;AAAA;AAAA,GAIZ,E,yGC7CO,MAAMqT,EAAoB,CAAC,CAChC,MAAAtC,EACA,OAAAuC,EACA,SAAAlB,EACA,UAAAmB,EAAY,GACZ,YAAAC,CACF,IAAuD,CACrD,MAAM7T,KAAS,MAAWC,CAAS,EAEnC,OACE,gBAAC,OAAI,UAAWD,EAAO,QACrB,gBAAC,KACC,aAAW,MAAG4T,GAAa5T,EAAO,SAAS,EAC3C,MACE,gBAAC,IAAI,CAAC,QAAQ,MACX2T,EAAO,KAAGvC,CACb,GAGF,gBAAC,IAAK,CAAC,UAAU,UACdyC,GAAe,gBAAC,OAAI,UAAW7T,EAAO,aAAc6T,CAAY,EAChEpB,CACH,CACF,CACF,CAEJ,EAEMxS,EAAaI,IAA0B,CAC3C,UAAQ;AAAA;AAAA;AAAA,iBAGOA,EAAM,YAAY,OAAO;AAAA,wBAClBA,EAAM,OAAO,OAAO;AAAA,qBACvBA,EAAM,MAAM,OAAO;AAAA,eACzBA,EAAM,QAAQ,CAAC,KAAKA,EAAM,QAAQ,CAAC;AAAA,IAEhD,eAAa;AAAA,mBACIA,EAAM,QAAQ,CAAC;AAAA,IAEhC,aAAW;AAAA;AAAA,GAGb,E,wECzCO,MAAM4F,EAAa,CAAC,CACzB,QAAA6N,EACA,KAAAC,EACA,GAAAC,EACA,OAAAC,EACA,QAAArS,EACA,UAAAsS,EACA,iBAAAC,EAAmB,MACnB,GAAGrE,CACL,IAAa,CACX,MAAMsE,EAAY,OAAON,GAAY,SAAWA,EAAU,OAE1D,OACE,gBAAC,IAAO,CAAC,QAASA,EAAS,UAAWK,CAAA,EACnCH,EACC,gBAAC,MACC,QAAQ,YACR,KAAK,OACL,KAAAD,EACA,KAAMC,EACN,KAAK,KACL,OAAAC,EACC,GAAGnE,EACJ,aAAYsE,CAAA,CACd,EAEA,gBAAC,MACC,UAAAF,EACA,QAAQ,YACR,KAAK,OACL,KAAK,KACL,KAAAH,EACA,KAAK,SACL,QAAAnS,EACC,GAAGkO,EACJ,aAAYsE,CAAA,CACd,CAEJ,CAEJ,C,oJC3CYC,GAAAA,IAEVA,EAAA,0BAA4B,8BAC5BA,EAAA,4BAA8B,gCAG9BA,EAAA,mBAAqB,uBACrBA,EAAA,iBAAmB,qBACnBA,EAAA,mBAAqB,sBACrBA,EAAA,mBAAqB,uBACrBA,EAAA,mBAAqB,uBAGrBA,EAAA,2BAA6B,+BAC7BA,EAAA,yBAA2B,6BAC3BA,EAAA,2BAA6B,6BAC7BA,EAAA,2BAA6B,+BAC7BA,EAAA,eAAiB,kBAGjBA,EAAA,yBAA2B,6BAC3BA,EAAA,2BAA6B,gCAC7BA,EAAA,6BAA+B,kCAC/BA,EAAA,yBAA2B,6BAC3BA,EAAA,2BAA6B,+BAG7BA,EAAA,cAAgB,iBAChBA,EAAA,YAAc,eACdA,EAAA,cAAgB,iBAGhBA,EAAA,eAAiB,mBACjBA,EAAA,iBAAmB,qBACnBA,EAAA,iBAAmB,qBACnBA,EAAA,iBAAmB,qBAnCTA,IAAAA,GAAA,IAsCAC,GAAAA,IAEVA,EAAA,gBAAkB,oBAClBA,EAAA,cAAgB,kBAChBA,EAAA,gBAAkB,oBAClBA,EAAA,gBAAkB,oBAElBA,EAAA,wBAA0B,6BAC1BA,EAAA,sBAAwB,2BACxBA,EAAA,wBAA0B,6BAC1BA,EAAA,wBAA0B,6BAVhBA,IAAAA,GAAA,IAaZ,MAAMC,EAAkB,GAMjB,SAASC,GAAwD,CA6BtE,MA1BgD,CAE9C,CAAC,mBAAiC,EAAG,CAACD,EAAiB,aAAI,cAAc,sBAAoB,kBAAkB,CAAC,EAChH,CAAC,iBAA+B,EAAG,CAACA,EAAiB,aAAI,cAAc,sBAAoB,gBAAgB,CAAC,EAC5G,CAAC,mBAAiC,EAAG,CAACA,EAAiB,aAAI,cAAc,sBAAoB,kBAAkB,CAAC,EAChH,CAAC,mBAAiC,EAAG,CAACA,EAAiB,aAAI,cAAc,sBAAoB,kBAAkB,CAAC,EAGhH,CAAC,4BAAyC,EAAG,CAC3CA,EACA,aAAI,cAAc,sBAAoB,yBAAyB,CACjE,EACA,CAAC,0BAAuC,EAAG,CACzCA,EACA,aAAI,cAAc,sBAAoB,wBAAwB,CAChE,EACA,CAAC,4BAAyC,EAAG,CAC3CA,EACA,aAAI,cAAc,sBAAoB,yBAAyB,CACjE,EACA,CAAC,4BAAyC,EAAG,CAC3CA,EACA,aAAI,cAAc,sBAAoB,yBAAyB,CACjE,CACF,CAGF,CAEO,SAASE,GAA6D,CAC3E,KAAM,CACJ,qBAAAC,EACA,oBAAAC,EACA,sBAAuBC,CACzB,KAAI,MAAgB,EAIdC,KAA2B,MAA4BH,CAAqB,EAC5EI,KAAsB,MAAwBJ,CAAqB,EAyEzE,MAtEiD,CAE/C,CAAC,6BAA4C,EAAG,CAC9CH,EACA,aAAI,cAAc,sBAAoB,iCAAiC,CACzE,EACA,CAAC,+BAA8C,EAAG,CAChDI,EACA,aAAI,cAAc,sBAAoB,kCAAkC,CAC1E,EAEA,CAAC,sBAAqC,EAAG,CAACA,EAAqB,aAAI,cAAcE,EAAyB,MAAM,CAAC,EACjH,CAAC,oBAAmC,EAAG,CAACN,EAAiB,aAAI,cAAcM,EAAyB,IAAI,CAAC,EACzG,CAAC,qBAAqC,EAAG,CAACF,EAAqB,aAAI,cAAcE,EAAyB,MAAM,CAAC,EACjH,CAAC,sBAAqC,EAAG,CAACF,EAAqB,aAAI,cAAcE,EAAyB,MAAM,CAAC,EAEjH,CAAC,sBAAqC,EAAG,CACvCD,EACA,aAAI,cAAcC,EAAyB,IAAI,CACjD,EAEA,CAAC,8BAA6C,EAAG,CAC/CF,EACA,aAAI,cAAcE,EAAyB,MAAM,CACnD,EACA,CAAC,4BAA2C,EAAG,CAACN,EAAiB,aAAI,cAAcM,EAAyB,IAAI,CAAC,EACjH,CAAC,4BAA6C,EAAG,CAC/CF,EACA,aAAI,cAAcE,EAAyB,MAAM,CACnD,EACA,CAAC,8BAA6C,EAAG,CAC/CF,EACA,aAAI,cAAcE,EAAyB,MAAM,CACnD,EAEA,CAAC,4BAA2C,EAAG,CAC7CF,EACA,aAAI,cAAcE,EAAyB,MAAM,CACnD,EACA,CAAC,+BAA6C,EAAG,CAC/CN,EACA,aAAI,cAAcM,EAAyB,IAAI,CACjD,EACA,CAAC,iCAA+C,EAAG,CACjDF,EACA,aAAI,cAAcE,EAAyB,MAAM,CACnD,EACA,CAAC,4BAA2C,EAAG,CAC7CF,EACA,aAAI,cAAcE,EAAyB,MAAM,CACnD,EACA,CAAC,8BAA6C,EAAG,CAC/CD,EACA,aAAI,cAAcC,EAAyB,IAAI,CACjD,EACA,CAAC,iBAAiC,EAAG,CACnCD,EACA,aAAI,cAAcC,EAAyB,aAAa,WAAW,CACrE,EAEA,CAAC,gBAAgC,EAAG,CAACF,EAAqB,aAAI,cAAcG,EAAoB,MAAM,CAAC,EACvG,CAAC,cAA8B,EAAG,CAACP,EAAiB,aAAI,cAAcO,EAAoB,IAAI,CAAC,EAC/F,CAAC,gBAAgC,EAAG,CAACH,EAAqB,aAAI,cAAcG,EAAoB,MAAM,CAAC,EAEvG,CAAC,oBAAmC,EAAG,CAACH,EAAqB,aAAI,cAAcE,EAAyB,MAAM,CAAC,EAC/G,CAAC,kBAAiC,EAAG,CAACN,EAAiB,aAAI,cAAcM,EAAyB,IAAI,CAAC,EACvG,CAAC,oBAAmC,EAAG,CAACF,EAAqB,aAAI,cAAcE,EAAyB,MAAM,CAAC,EAC/G,CAAC,oBAAmC,EAAG,CAACF,EAAqB,aAAI,cAAcE,EAAyB,MAAM,CAAC,CACjH,CAGF,CAEO,SAASE,EAAuBnI,EAAqC,CAC1E,MAAMuG,EAAYsB,EAA4B,EAE9C,SAAO,WAAQ,IACNtB,EAAUvG,CAAM,EACtB,CAACuG,EAAWvG,CAAM,CAAC,CACxB,CAEO,SAASoI,EAAyBxC,EAA0C,CACjF,MAAMW,EAAYsB,EAA4B,EAE9C,SAAO,WAAQ,IACNjC,EAAQ,IAAK5F,GAAWuG,EAAUvG,CAAM,CAAC,EAC/C,CAACuG,EAAWX,CAAO,CAAC,CACzB,CAEO,SAASyC,EAAsBrI,EAAoC,CACxE,MAAMuG,EAAYqB,EAAwB,EAC1C,SAAO,WAAQ,IAAMrB,EAAUvG,CAAM,EAAG,CAACuG,EAAWvG,CAAM,CAAC,CAC7D,C,mDC9MIsF,EAAc,SAAUgD,EAAUC,EAAO,CACzC,IAAIC,KAAgB,UAAO,UAAY,CAAE,CAAC,KAC1C,aAAU,UAAY,CAClBA,EAAc,QAAUF,CAC5B,CAAC,KACD,aAAU,UAAY,CAClB,GAAIC,IAAU,KAAM,CAChB,IAAIE,EAAa,YAAY,UAAY,CAAE,OAAOD,EAAc,QAAQ,CAAG,EAAGD,GAAS,CAAC,EACxF,OAAO,UAAY,CAAE,OAAO,cAAcE,CAAU,CAAG,EAG/D,EAAG,CAACF,CAAK,CAAC,CACd,EACA,QAAejD,C","sources":["webpack://grafana/./public/app/core/hooks/useCleanup.ts","webpack://grafana/./public/app/features/alerting/AlertHowToModal.tsx","webpack://grafana/./public/app/features/alerting/AlertRuleItem.tsx","webpack://grafana/./public/app/features/alerting/components/DeprecationNotice.tsx","webpack://grafana/./public/app/features/alerting/state/selectors.ts","webpack://grafana/./public/app/features/alerting/AlertRuleList.tsx","webpack://grafana/./public/app/features/alerting/state/actions.ts","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaRulesExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/MoreActionsRuleButtons.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/NoRulesCTA.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListErrors.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaRuleFolderExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaRuleGroupExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/ReorderRuleGroupModal.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RulesGroup.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/useCombinedGroupNamespace.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/CloudRules.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/GrafanaRules.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListGroupView.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListStateSection.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListStateView.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useFilteredRules.ts","webpack://grafana/./public/app/features/alerting/unified/components/rules/MultipleDataSourcePicker.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RulesFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/RuleList.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Authorize.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/NeedHelpInfo.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/RuleEditorSection.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/ActionIcon.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAbilities.ts","webpack://grafana/./.yarn/__virtual__/react-use-virtual-dd7926f458/0/cache/react-use-npm-17.4.0-0ef4521544-0889da919b.zip/node_modules/react-use/esm/useInterval.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\nimport { useDispatch } from 'app/types';\n\nimport { cleanUpAction, CleanUpAction } from '../actions/cleanUp';\n\nexport function useCleanup(cleanupAction: CleanUpAction) {\n  const dispatch = useDispatch();\n  //bit of a hack to unburden user from having to wrap stateSelcetor in a useCallback. Otherwise cleanup would happen on every render\n  const selectorRef = useRef(cleanupAction);\n  selectorRef.current = cleanupAction;\n  useEffect(() => {\n    return () => {\n      dispatch(cleanUpAction({ cleanupAction: selectorRef.current }));\n    };\n  }, [dispatch]);\n}\n","import React from 'react';\n\nimport { Modal, VerticalGroup } from '@grafana/ui';\n\nexport interface AlertHowToModalProps {\n  onDismiss: () => void;\n}\n\nexport function AlertHowToModal({ onDismiss }: AlertHowToModalProps): JSX.Element {\n  return (\n    <Modal title=\"Adding an Alert\" isOpen onDismiss={onDismiss} onClickBackdrop={onDismiss}>\n      <VerticalGroup spacing=\"sm\">\n        <img src=\"public/img/alert_howto_new.png\" alt=\"\" />\n        <p>\n          Alerts are added and configured in the Alert tab of any dashboard graph panel, letting you build and visualize\n          an alert using existing queries.\n        </p>\n        <p>Remember to save the dashboard to persist your alert rule changes.</p>\n      </VerticalGroup>\n    </Modal>\n  );\n}\n","import React, { useCallback } from 'react';\nimport Highlighter from 'react-highlight-words';\n\nimport { Icon, Button, LinkButton, Card } from '@grafana/ui';\n\nimport { AlertRule } from '../../types';\n\nexport interface Props {\n  rule: AlertRule;\n  search: string;\n  onTogglePause: () => void;\n}\n\nconst AlertRuleItem = ({ rule, search, onTogglePause }: Props) => {\n  const ruleUrl = `${rule.url}?editPanel=${rule.panelId}&tab=alert`;\n  const renderText = useCallback(\n    (text: string) => (\n      <Highlighter\n        key={text}\n        highlightClassName=\"highlight-search-match\"\n        textToHighlight={text}\n        searchWords={[search]}\n      />\n    ),\n    [search]\n  );\n\n  return (\n    <Card>\n      <Card.Heading>{renderText(rule.name)}</Card.Heading>\n      <Card.Figure>\n        <Icon size=\"xl\" name={rule.stateIcon} className={`alert-rule-item__icon ${rule.stateClass}`} />\n      </Card.Figure>\n      <Card.Meta>\n        <span key=\"state\">\n          <span key=\"text\" className={`${rule.stateClass}`}>\n            {renderText(rule.stateText)}{' '}\n          </span>\n          for {rule.stateAge}\n        </span>\n        {rule.info ? renderText(rule.info) : null}\n      </Card.Meta>\n      <Card.Actions>\n        <Button\n          key=\"play\"\n          variant=\"secondary\"\n          icon={rule.state === 'paused' ? 'play' : 'pause'}\n          onClick={onTogglePause}\n        >\n          {rule.state === 'paused' ? 'Resume' : 'Pause'}\n        </Button>\n        <LinkButton key=\"edit\" variant=\"secondary\" href={ruleUrl} icon=\"cog\">\n          Edit alert\n        </LinkButton>\n      </Card.Actions>\n    </Card>\n  );\n};\n\nexport default AlertRuleItem;\n","import React from 'react';\n\nimport { Alert } from '@grafana/ui';\n\nexport const LOCAL_STORAGE_KEY = 'grafana.legacyalerting.unifiedalertingpromo';\n\nconst DeprecationNotice = () => (\n  <Alert severity=\"warning\" title=\"Grafana legacy alerting is deprecated and will be removed in a future release.\">\n    <p>\n      You are using Grafana legacy alerting, which has been deprecated since Grafana 9.0. The codebase is now staying as\n      is and will be removed in Grafana 11.0.\n      <br />\n      We recommend upgrading to Grafana Alerting as soon as possible.\n    </p>\n    <p>\n      See{' '}\n      <a href=\"https://grafana.com/docs/grafana/latest/alerting/migrating-alerts/\">\n        how to upgrade to Grafana Alerting\n      </a>{' '}\n      to learn more.\n    </p>\n  </Alert>\n);\n\nexport { DeprecationNotice };\n","import { AlertRule, AlertRulesState, NotificationChannelState, StoreState } from 'app/types';\n\nexport const getSearchQuery = (state: AlertRulesState) => state.searchQuery;\n\nexport const getAlertRuleItems = (state: StoreState): AlertRule[] => {\n  const regex = new RegExp(state.alertRules.searchQuery, 'i');\n\n  return state.alertRules.items.filter((item) => {\n    return regex.test(item.name) || regex.test(item.stateText) || regex.test(item.info!);\n  });\n};\n\nexport const getNotificationChannel = (state: NotificationChannelState, channelId: number) => {\n  if (state.notificationChannel.id === channelId) {\n    return state.notificationChannel;\n  }\n\n  return null;\n};\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { SelectableValue } from '@grafana/data';\nimport { config, locationService } from '@grafana/runtime';\nimport { Button, FilterInput, LinkButton, Select, VerticalGroup } from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\nimport { Page } from 'app/core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { AlertRule, StoreState } from 'app/types';\n\nimport { ShowModalReactEvent } from '../../types/events';\n\nimport { AlertHowToModal } from './AlertHowToModal';\nimport AlertRuleItem from './AlertRuleItem';\nimport { DeprecationNotice } from './components/DeprecationNotice';\nimport { getAlertRulesAsync, togglePauseAlertRule } from './state/actions';\nimport { setSearchQuery } from './state/reducers';\nimport { getAlertRuleItems, getSearchQuery } from './state/selectors';\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    alertRules: getAlertRuleItems(state),\n    search: getSearchQuery(state.alertRules),\n    isLoading: state.alertRules.isLoading,\n  };\n}\n\nconst mapDispatchToProps = {\n  getAlertRulesAsync,\n  setSearchQuery,\n  togglePauseAlertRule,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface OwnProps extends GrafanaRouteComponentProps<{}, { state: string }> {}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class AlertRuleListUnconnected extends PureComponent<Props> {\n  stateFilters = [\n    { label: 'All', value: 'all' },\n    { label: 'OK', value: 'ok' },\n    { label: 'Not OK', value: 'not_ok' },\n    { label: 'Alerting', value: 'alerting' },\n    { label: 'No data', value: 'no_data' },\n    { label: 'Paused', value: 'paused' },\n    { label: 'Pending', value: 'pending' },\n  ];\n\n  componentDidMount() {\n    this.fetchRules();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.queryParams.state !== this.props.queryParams.state) {\n      this.fetchRules();\n    }\n  }\n\n  async fetchRules() {\n    await this.props.getAlertRulesAsync({ state: this.getStateFilter() });\n  }\n\n  getStateFilter(): string {\n    return this.props.queryParams.state ?? 'all';\n  }\n\n  onStateFilterChanged = (option: SelectableValue) => {\n    locationService.partial({ state: option.value });\n  };\n\n  onOpenHowTo = () => {\n    appEvents.publish(new ShowModalReactEvent({ component: AlertHowToModal }));\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchQuery(value);\n  };\n\n  onTogglePause = (rule: AlertRule) => {\n    this.props.togglePauseAlertRule(rule.id, { paused: rule.state !== 'paused' });\n  };\n\n  alertStateFilterOption = ({ text, value }: { text: string; value: string }) => {\n    return (\n      <option key={value} value={value}>\n        {text}\n      </option>\n    );\n  };\n\n  render() {\n    const { alertRules, search, isLoading } = this.props;\n\n    return (\n      <Page navId=\"alert-list\">\n        <Page.Contents isLoading={isLoading}>\n          <div className=\"page-action-bar\">\n            <div className=\"gf-form gf-form--grow\">\n              <FilterInput placeholder=\"Search alerts\" value={search} onChange={this.onSearchQueryChange} />\n            </div>\n            <div className=\"gf-form\">\n              <label className=\"gf-form-label\" htmlFor=\"alert-state-filter\">\n                States\n              </label>\n\n              <div className=\"width-13\">\n                <Select\n                  inputId={'alert-state-filter'}\n                  options={this.stateFilters}\n                  onChange={this.onStateFilterChanged}\n                  value={this.getStateFilter()}\n                />\n              </div>\n            </div>\n            <div className=\"page-action-bar__spacer\" />\n            {config.unifiedAlertingEnabled && (\n              <LinkButton variant=\"primary\" href=\"alerting/ng/new\">\n                Add NG Alert\n              </LinkButton>\n            )}\n            <Button variant=\"secondary\" onClick={this.onOpenHowTo}>\n              How to add an alert\n            </Button>\n          </div>\n          <DeprecationNotice />\n          <VerticalGroup spacing=\"none\">\n            {alertRules.map((rule) => {\n              return (\n                <AlertRuleItem\n                  rule={rule}\n                  key={rule.id}\n                  search={search}\n                  onTogglePause={() => this.onTogglePause(rule)}\n                />\n              );\n            })}\n          </VerticalGroup>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(AlertRuleListUnconnected);\n","import { getBackendSrv, isFetchError, locationService } from '@grafana/runtime';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification, createSuccessNotification } from 'app/core/copy/appNotification';\nimport { AlertRuleDTO, NotifierDTO, ThunkResult } from 'app/types';\n\nimport { loadAlertRules, loadedAlertRules, notificationChannelLoaded, setNotificationChannels } from './reducers';\n\nexport function getAlertRulesAsync(options: { state: string }): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(loadAlertRules());\n    const rules: AlertRuleDTO[] = await getBackendSrv().get('/api/alerts', options);\n    dispatch(loadedAlertRules(rules));\n  };\n}\n\nexport function togglePauseAlertRule(id: number, options: { paused: boolean }): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().post(`/api/alerts/${id}/pause`, options);\n    const stateFilter = locationService.getSearchObject().state || 'all';\n    dispatch(getAlertRulesAsync({ state: stateFilter.toString() }));\n  };\n}\n\nexport function createNotificationChannel(data: any): ThunkResult<Promise<void>> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().post(`/api/alert-notifications`, data);\n      dispatch(notifyApp(createSuccessNotification('Notification created')));\n      locationService.push('/alerting/notifications');\n    } catch (error) {\n      if (isFetchError(error)) {\n        dispatch(notifyApp(createErrorNotification(error.data.error)));\n      }\n    }\n  };\n}\n\nexport function updateNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().put(`/api/alert-notifications/${data.id}`, data);\n      dispatch(notifyApp(createSuccessNotification('Notification updated')));\n    } catch (error) {\n      if (isFetchError(error)) {\n        dispatch(notifyApp(createErrorNotification(error.data.error)));\n      }\n    }\n  };\n}\n\nexport function testNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const channel = getState().notificationChannel.notificationChannel;\n    await getBackendSrv().post('/api/alert-notifications/test', { id: channel.id, ...data });\n  };\n}\n\nexport function loadNotificationTypes(): ThunkResult<void> {\n  return async (dispatch) => {\n    const alertNotifiers: NotifierDTO[] = await getBackendSrv().get(`/api/alert-notifiers`);\n\n    const notificationTypes = alertNotifiers.sort((o1, o2) => {\n      if (o1.name > o2.name) {\n        return 1;\n      }\n      return -1;\n    });\n\n    dispatch(setNotificationChannels(notificationTypes));\n  };\n}\n\nexport function loadNotificationChannel(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await dispatch(loadNotificationTypes());\n    const notificationChannel = await getBackendSrv().get(`/api/alert-notifications/${id}`);\n    dispatch(notificationChannelLoaded(notificationChannel));\n  };\n}\n","import React, { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { allGrafanaExportProviders, ExportFormats } from './providers';\n\ninterface GrafanaRulesExporterProps {\n  onClose: () => void;\n}\n\nexport function GrafanaRulesExporter({ onClose }: GrafanaRulesExporterProps) {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaRulesExportPreview exportFormat={activeTab} onClose={onClose} />\n    </GrafanaExportDrawer>\n  );\n}\n\ninterface GrafanaRulesExportPreviewProps {\n  exportFormat: ExportFormats;\n  onClose: () => void;\n}\n\nfunction GrafanaRulesExportPreview({ exportFormat, onClose }: GrafanaRulesExportPreviewProps) {\n  const { currentData: rulesDefinition = '', isFetching } = alertRuleApi.endpoints.exportRules.useQuery({\n    format: exportFormat,\n  });\n\n  const downloadFileName = `alert-rules-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={rulesDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n}\n","import React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useToggle } from 'react-use';\n\nimport { urlUtil } from '@grafana/data';\nimport { Button, Dropdown, Icon, LinkButton, Menu, MenuItem } from '@grafana/ui';\n\nimport { logInfo, LogMessages } from './Analytics';\nimport { GrafanaRulesExporter } from './components/export/GrafanaRulesExporter';\nimport { AlertSourceAction, useAlertSourceAbility } from './hooks/useAbilities';\n\ninterface Props {}\n\nexport function MoreActionsRuleButtons({}: Props) {\n  const [_, viewRuleAllowed] = useAlertSourceAbility(AlertSourceAction.ViewAlertRule);\n  const [createRuleSupported, createRuleAllowed] = useAlertSourceAbility(AlertSourceAction.CreateAlertRule);\n  const [createCloudRuleSupported, createCloudRuleAllowed] = useAlertSourceAbility(\n    AlertSourceAction.CreateExternalAlertRule\n  );\n\n  const canCreateGrafanaRules = createRuleSupported && createRuleAllowed;\n  const canCreateCloudRules = createCloudRuleSupported && createCloudRuleAllowed;\n\n  const location = useLocation();\n  const [showExportDrawer, toggleShowExportDrawer] = useToggle(false);\n  const newMenu = (\n    <Menu>\n      {(canCreateGrafanaRules || canCreateCloudRules) && (\n        <MenuItem\n          url={urlUtil.renderUrl(`alerting/new/recording`, {\n            returnTo: location.pathname + location.search,\n          })}\n          label=\"New recording rule\"\n        />\n      )}\n      {viewRuleAllowed && <MenuItem onClick={toggleShowExportDrawer} label=\"Export all Grafana-managed rules\" />}\n    </Menu>\n  );\n\n  return (\n    <>\n      {(canCreateGrafanaRules || canCreateCloudRules) && (\n        <LinkButton\n          href={urlUtil.renderUrl('alerting/new/alerting', { returnTo: location.pathname + location.search })}\n          icon=\"plus\"\n          onClick={() => logInfo(LogMessages.alertRuleFromScratch)}\n        >\n          New alert rule\n        </LinkButton>\n      )}\n\n      <Dropdown overlay={newMenu}>\n        <Button variant=\"secondary\">\n          More\n          <Icon name=\"angle-down\" />\n        </Button>\n      </Dropdown>\n      {showExportDrawer && <GrafanaRulesExporter onClose={toggleShowExportDrawer} />}\n    </>\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data/src/themes';\nimport { Stack } from '@grafana/experimental';\nimport { logInfo } from '@grafana/runtime';\nimport { CallToActionCard, useStyles2 } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\n\nimport { LogMessages } from '../../Analytics';\nimport { useRulesAccess } from '../../utils/accessControlHooks';\n\nexport const NoRulesSplash = () => {\n  const { canCreateGrafanaRules, canCreateCloudRules } = useRulesAccess();\n  const styles = useStyles2(getStyles);\n  if (canCreateGrafanaRules || canCreateCloudRules) {\n    return (\n      <div>\n        <p>{\"You haven't created any alert rules yet\"}</p>\n        <Stack direction=\"row\" gap={1} alignItems=\"stretch\" flexGrow={1}>\n          <div className={styles.newRuleCard}>\n            <EmptyListCTA\n              title=\"\"\n              buttonIcon=\"bell\"\n              buttonLink={'alerting/new/alerting'}\n              buttonTitle=\"New alert rule\"\n              proTip=\"you can also create alert rules from existing panels and queries.\"\n              proTipLink=\"https://grafana.com/docs/\"\n              proTipLinkTitle=\"Learn more\"\n              proTipTarget=\"_blank\"\n              onClick={() => logInfo(LogMessages.alertRuleFromScratch)}\n            />\n          </div>\n\n          <div className={styles.newRuleCard}>\n            <EmptyListCTA\n              title=\"\"\n              buttonIcon=\"plus\"\n              buttonLink={'alerting/new/recording'}\n              buttonTitle=\"New recording rule\"\n              onClick={() => logInfo(LogMessages.recordingRuleFromScratch)}\n            />\n          </div>\n        </Stack>\n      </div>\n    );\n  }\n  return <CallToActionCard message=\"No rules exist yet.\" callToActionElement={<div />} />;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  newRuleCard: css`\n    width: calc(50% - ${theme.spacing(1)});\n\n    > div {\n      height: 100%;\n    }\n  `,\n});\n","import { css } from '@emotion/css';\nimport { SerializedError } from '@reduxjs/toolkit';\nimport pluralize from 'pluralize';\nimport React, { useMemo, ReactElement, useState, FC } from 'react';\nimport { useLocalStorage } from 'react-use';\n\nimport { DataSourceInstanceSettings, GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { getRulesDataSources, GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { makeDataSourceLink } from '../../utils/misc';\nimport { isRulerNotSupportedResponse } from '../../utils/rules';\n\nexport function RuleListErrors(): ReactElement {\n  const [expanded, setExpanded] = useState(false);\n  const [closed, setClosed] = useLocalStorage('grafana.unifiedalerting.hideErrors', false);\n  const dataSourceConfigRequests = useUnifiedAlertingSelector((state) => state.dataSources);\n  const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n  const styles = useStyles2(getStyles);\n\n  const errors = useMemo((): JSX.Element[] => {\n    const [dataSourceConfigErrors, promRequestErrors, rulerRequestErrors] = [\n      dataSourceConfigRequests,\n      promRuleRequests,\n      rulerRuleRequests,\n    ].map((requests) =>\n      getRulesDataSources().reduce<Array<{ error: SerializedError; dataSource: DataSourceInstanceSettings }>>(\n        (result, dataSource) => {\n          const error = requests[dataSource.name]?.error;\n          if (requests[dataSource.name] && error && !isRulerNotSupportedResponse(requests[dataSource.name])) {\n            return [...result, { dataSource, error }];\n          }\n          return result;\n        },\n        []\n      )\n    );\n    const grafanaPromError = promRuleRequests[GRAFANA_RULES_SOURCE_NAME]?.error;\n    const grafanaRulerError = rulerRuleRequests[GRAFANA_RULES_SOURCE_NAME]?.error;\n\n    const result: JSX.Element[] = [];\n\n    if (grafanaPromError) {\n      result.push(<>Failed to load Grafana rules state: {grafanaPromError.message || 'Unknown error.'}</>);\n    }\n    if (grafanaRulerError) {\n      result.push(<>Failed to load Grafana rules config: {grafanaRulerError.message || 'Unknown error.'}</>);\n    }\n\n    dataSourceConfigErrors.forEach(({ dataSource, error }) => {\n      result.push(\n        <>\n          Failed to load the data source configuration for{' '}\n          <a href={makeDataSourceLink(dataSource)} className={styles.dsLink}>\n            {dataSource.name}\n          </a>\n          : {error.message || 'Unknown error.'}\n        </>\n      );\n    });\n\n    promRequestErrors.forEach(({ dataSource, error }) =>\n      result.push(\n        <>\n          Failed to load rules state from{' '}\n          <a href={makeDataSourceLink(dataSource)} className={styles.dsLink}>\n            {dataSource.name}\n          </a>\n          : {error.message || 'Unknown error.'}\n        </>\n      )\n    );\n\n    rulerRequestErrors.forEach(({ dataSource, error }) =>\n      result.push(\n        <>\n          Failed to load rules config from{' '}\n          <a href={makeDataSourceLink(dataSource)} className={styles.dsLink}>\n            {dataSource.name}\n          </a>\n          : {error.message || 'Unknown error.'}\n        </>\n      )\n    );\n\n    return result;\n  }, [dataSourceConfigRequests, promRuleRequests, rulerRuleRequests, styles.dsLink]);\n\n  return (\n    <>\n      {!!errors.length && closed && (\n        <ErrorSummaryButton count={errors.length} onClick={() => setClosed((closed) => !closed)} />\n      )}\n      {!!errors.length && !closed && (\n        <Alert\n          data-testid=\"cloud-rulessource-errors\"\n          title=\"Errors loading rules\"\n          severity=\"error\"\n          onRemove={() => setClosed(true)}\n        >\n          {expanded && errors.map((item, idx) => <div key={idx}>{item}</div>)}\n          {!expanded && (\n            <>\n              <div>{errors[0]}</div>\n              {errors.length >= 2 && (\n                <Button\n                  className={styles.moreButton}\n                  fill=\"text\"\n                  icon=\"angle-right\"\n                  size=\"sm\"\n                  onClick={() => setExpanded(true)}\n                >\n                  {errors.length - 1} more {pluralize('error', errors.length - 1)}\n                </Button>\n              )}\n            </>\n          )}\n        </Alert>\n      )}\n    </>\n  );\n}\n\ninterface ErrorSummaryProps {\n  count: number;\n  onClick: () => void;\n}\n\nconst ErrorSummaryButton: FC<ErrorSummaryProps> = ({ count, onClick }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.floatRight}>\n      <Tooltip content=\"Show all errors\" placement=\"bottom\">\n        <Button fill=\"text\" variant=\"destructive\" icon=\"exclamation-triangle\" onClick={onClick}>\n          {count > 1 ? <>{count} errors</> : <>1 error</>}\n        </Button>\n      </Tooltip>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  moreButton: css`\n    padding: 0;\n  `,\n  floatRight: css`\n    display: flex;\n    justify-content: flex-end;\n  `,\n  dsLink: css`\n    font-weight: ${theme.typography.fontWeightBold};\n  `,\n});\n","import React, { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nimport { FolderDTO } from '../../../../../types';\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { allGrafanaExportProviders, ExportFormats } from './providers';\n\ninterface GrafanaRuleFolderExporterProps {\n  folder: FolderDTO;\n  onClose: () => void;\n}\n\nexport function GrafanaRuleFolderExporter({ folder, onClose }: GrafanaRuleFolderExporterProps) {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      title={`Export ${folder.title} rules`}\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaRuleFolderExportPreview folder={folder} exportFormat={activeTab} onClose={onClose} />\n    </GrafanaExportDrawer>\n  );\n}\n\ninterface GrafanaRuleFolderExportPreviewProps {\n  folder: FolderDTO;\n  exportFormat: ExportFormats;\n  onClose: () => void;\n}\n\nfunction GrafanaRuleFolderExportPreview({ folder, exportFormat, onClose }: GrafanaRuleFolderExportPreviewProps) {\n  const { currentData: exportFolderDefinition = '', isFetching } = alertRuleApi.endpoints.exportRules.useQuery({\n    folderUid: folder.uid,\n    format: exportFormat,\n  });\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n\n  const downloadFileName = `${folder.title}-${folder.uid}`;\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={exportFolderDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n}\n","import React, { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { allGrafanaExportProviders, ExportFormats } from './providers';\n\ninterface GrafanaRuleGroupExporterProps {\n  folderUid: string;\n  groupName: string;\n  onClose: () => void;\n}\n\nexport function GrafanaRuleGroupExporter({ folderUid, groupName, onClose }: GrafanaRuleGroupExporterProps) {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      title={`Export ${groupName} rules`}\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaRuleGroupExportPreview\n        folderUid={folderUid}\n        groupName={groupName}\n        exportFormat={activeTab}\n        onClose={onClose}\n      />\n    </GrafanaExportDrawer>\n  );\n}\n\ninterface GrafanaRuleGroupExportPreviewProps {\n  folderUid: string;\n  groupName: string;\n  exportFormat: ExportFormats;\n  onClose: () => void;\n}\n\nfunction GrafanaRuleGroupExportPreview({\n  folderUid,\n  groupName,\n  exportFormat,\n  onClose,\n}: GrafanaRuleGroupExportPreviewProps) {\n  const { currentData: ruleGroupTextDefinition = '', isFetching } = alertRuleApi.endpoints.exportRules.useQuery({\n    folderUid,\n    group: groupName,\n    format: exportFormat,\n  });\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={ruleGroupTextDefinition}\n      downloadFileName={groupName}\n      onClose={onClose}\n    />\n  );\n}\n","import { css } from '@emotion/css';\nimport cx from 'classnames';\nimport { compact } from 'lodash';\nimport React, { useCallback, useState } from 'react';\nimport {\n  DragDropContext,\n  Draggable,\n  DraggableProvided,\n  Droppable,\n  DroppableProvided,\n  DropResult,\n} from 'react-beautiful-dnd';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Badge, Icon, Modal, Tooltip, useStyles2 } from '@grafana/ui';\nimport { dispatch } from 'app/store/store';\nimport { CombinedRule, CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { updateRulesOrder } from '../../state/actions';\nimport { getRulesSourceName, isCloudRulesSource } from '../../utils/datasource';\nimport { hashRulerRule } from '../../utils/rule-id';\nimport { isAlertingRule, isRecordingRule } from '../../utils/rules';\n\nimport { AlertStateTag } from './AlertStateTag';\n\ninterface ModalProps {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n  onClose: () => void;\n}\n\ntype CombinedRuleWithUID = { uid: string } & CombinedRule;\n\nexport const ReorderCloudGroupModal = (props: ModalProps) => {\n  const { group, namespace, onClose } = props;\n  const [pending, setPending] = useState<boolean>(false);\n  const [rulesList, setRulesList] = useState<CombinedRule[]>(group.rules);\n\n  const styles = useStyles2(getStyles);\n\n  const onDragEnd = useCallback(\n    (result: DropResult) => {\n      // check for no-ops so we don't update the group unless we have changes\n      if (!result.destination) {\n        return;\n      }\n\n      const sameIndex = result.destination.index === result.source.index;\n      if (sameIndex) {\n        return;\n      }\n\n      const newOrderedRules = reorder(rulesList, result.source.index, result.destination.index);\n      setRulesList(newOrderedRules); // optimistically update the new rules list\n\n      const rulesSourceName = getRulesSourceName(namespace.rulesSource);\n      const rulerRules = compact(newOrderedRules.map((rule) => rule.rulerRule));\n\n      setPending(true);\n      dispatch(\n        updateRulesOrder({\n          namespaceName: namespace.name,\n          groupName: group.name,\n          rulesSourceName: rulesSourceName,\n          newRules: rulerRules,\n        })\n      )\n        .unwrap()\n        .finally(() => {\n          setPending(false);\n        });\n    },\n    [group.name, namespace.name, namespace.rulesSource, rulesList]\n  );\n\n  // assign unique but stable identifiers to each (alerting / recording) rule\n  const rulesWithUID: CombinedRuleWithUID[] = rulesList.map((rule) => ({\n    ...rule,\n    uid: String(hashRulerRule(rule.rulerRule!)), // TODO fix this coercion?\n  }));\n\n  return (\n    <Modal\n      className={styles.modal}\n      isOpen={true}\n      title={<ModalHeader namespace={namespace} group={group} />}\n      onDismiss={onClose}\n      onClickBackdrop={onClose}\n    >\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable\n          droppableId=\"alert-list\"\n          mode=\"standard\"\n          renderClone={(provided, _snapshot, rubric) => (\n            <ListItem provided={provided} rule={rulesWithUID[rubric.source.index]} isClone />\n          )}\n        >\n          {(droppableProvided: DroppableProvided) => (\n            <div\n              ref={droppableProvided.innerRef}\n              className={cx(styles.listContainer, pending && styles.disabled)}\n              {...droppableProvided.droppableProps}\n            >\n              {rulesWithUID.map((rule, index) => (\n                <Draggable key={rule.uid} draggableId={rule.uid} index={index} isDragDisabled={pending}>\n                  {(provided: DraggableProvided) => <ListItem key={rule.uid} provided={provided} rule={rule} />}\n                </Draggable>\n              ))}\n              {droppableProvided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </Modal>\n  );\n};\n\ninterface ListItemProps extends React.HTMLAttributes<HTMLDivElement> {\n  provided: DraggableProvided;\n  rule: CombinedRule;\n  isClone?: boolean;\n  isDragging?: boolean;\n}\n\nconst ListItem = ({ provided, rule, isClone = false, isDragging = false }: ListItemProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div\n      className={cx(styles.listItem, isClone && 'isClone', isDragging && 'isDragging')}\n      ref={provided.innerRef}\n      {...provided.draggableProps}\n      {...provided.dragHandleProps}\n    >\n      {isAlertingRule(rule.promRule) && <AlertStateTag state={rule.promRule.state} />}\n      {isRecordingRule(rule.promRule) && <Badge text={'Recording'} color={'blue'} />}\n      <div className={styles.listItemName}>{rule.name}</div>\n      <Icon name={'draggabledots'} />\n    </div>\n  );\n};\n\ninterface ModalHeaderProps {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n}\n\nconst ModalHeader = ({ namespace, group }: ModalHeaderProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.header}>\n      <Icon name=\"folder\" />\n      {isCloudRulesSource(namespace.rulesSource) && (\n        <Tooltip content={namespace.rulesSource.name} placement=\"top\">\n          <img\n            alt={namespace.rulesSource.meta.name}\n            className={styles.dataSourceIcon}\n            src={namespace.rulesSource.meta.info.logos.small}\n          />\n        </Tooltip>\n      )}\n      <span>{namespace.name}</span>\n      <Icon name=\"angle-right\" />\n      <span>{group.name}</span>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  modal: css`\n    max-width: 640px;\n    max-height: 80%;\n    overflow: hidden;\n  `,\n  listItem: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n\n    gap: ${theme.spacing()};\n\n    background: ${theme.colors.background.primary};\n    color: ${theme.colors.text.secondary};\n\n    border-bottom: solid 1px ${theme.colors.border.medium};\n    padding: ${theme.spacing(1)} ${theme.spacing(2)};\n\n    &:last-child {\n      border-bottom: none;\n    }\n\n    &.isClone {\n      border: solid 1px ${theme.colors.primary.shade};\n    }\n  `,\n  listContainer: css`\n    user-select: none;\n    border: solid 1px ${theme.colors.border.medium};\n  `,\n  disabled: css`\n    opacity: 0.5;\n    pointer-events: none;\n  `,\n  listItemName: css`\n    flex: 1;\n\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  `,\n  header: css`\n    display: flex;\n    align-items: center;\n\n    gap: ${theme.spacing(1)};\n  `,\n  dataSourceIcon: css`\n    width: ${theme.spacing(2)};\n    height: ${theme.spacing(2)};\n  `,\n});\n\nexport function reorder<T>(rules: T[], startIndex: number, endIndex: number): T[] {\n  const result = Array.from(rules);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n}\n","import { css } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport React, { useEffect, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { logInfo } from '@grafana/runtime';\nimport { Badge, ConfirmModal, HorizontalGroup, Icon, Spinner, Tooltip, useStyles2 } from '@grafana/ui';\nimport { useDispatch } from 'app/types';\nimport { CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { LogMessages } from '../../Analytics';\nimport { useFolder } from '../../hooks/useFolder';\nimport { useHasRuler } from '../../hooks/useHasRuler';\nimport { deleteRulesGroupAction } from '../../state/actions';\nimport { useRulesAccess } from '../../utils/accessControlHooks';\nimport { GRAFANA_RULES_SOURCE_NAME, isCloudRulesSource } from '../../utils/datasource';\nimport { makeFolderLink, makeFolderSettingsLink } from '../../utils/misc';\nimport { isFederatedRuleGroup, isGrafanaRulerRule } from '../../utils/rules';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { RuleLocation } from '../RuleLocation';\nimport { GrafanaRuleFolderExporter } from '../export/GrafanaRuleFolderExporter';\nimport { GrafanaRuleGroupExporter } from '../export/GrafanaRuleGroupExporter';\n\nimport { ActionIcon } from './ActionIcon';\nimport { EditCloudGroupModal } from './EditRuleGroupModal';\nimport { ReorderCloudGroupModal } from './ReorderRuleGroupModal';\nimport { RuleGroupStats } from './RuleStats';\nimport { RulesTable } from './RulesTable';\n\ntype ViewMode = 'grouped' | 'list';\n\ninterface Props {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n  expandAll: boolean;\n  viewMode: ViewMode;\n}\n\nexport const RulesGroup = React.memo(({ group, namespace, expandAll, viewMode }: Props) => {\n  const { rulesSource } = namespace;\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n\n  const [isEditingGroup, setIsEditingGroup] = useState(false);\n  const [isDeletingGroup, setIsDeletingGroup] = useState(false);\n  const [isReorderingGroup, setIsReorderingGroup] = useState(false);\n  const [isExporting, setIsExporting] = useState<'group' | 'folder' | undefined>(undefined);\n  const [isCollapsed, setIsCollapsed] = useState(!expandAll);\n\n  const { canEditRules } = useRulesAccess();\n\n  useEffect(() => {\n    setIsCollapsed(!expandAll);\n  }, [expandAll]);\n\n  const { hasRuler, rulerRulesLoaded } = useHasRuler();\n  const rulerRule = group.rules[0]?.rulerRule;\n  const folderUID = (rulerRule && isGrafanaRulerRule(rulerRule) && rulerRule.grafana_alert.namespace_uid) || undefined;\n  const { folder } = useFolder(folderUID);\n\n  // group \"is deleting\" if rules source has ruler, but this group has no rules that are in ruler\n  const isDeleting =\n    hasRuler(rulesSource) && rulerRulesLoaded(rulesSource) && !group.rules.find((rule) => !!rule.rulerRule);\n  const isFederated = isFederatedRuleGroup(group);\n\n  // check if group has provisioned items\n  const isProvisioned = group.rules.some((rule) => {\n    return isGrafanaRulerRule(rule.rulerRule) && rule.rulerRule.grafana_alert.provenance;\n  });\n\n  // check what view mode we are in\n  const isListView = viewMode === 'list';\n  const isGroupView = viewMode === 'grouped';\n\n  const deleteGroup = () => {\n    dispatch(deleteRulesGroupAction(namespace, group));\n    setIsDeletingGroup(false);\n  };\n\n  const actionIcons: React.ReactNode[] = [];\n\n  // for grafana, link to folder views\n  if (isDeleting) {\n    actionIcons.push(\n      <HorizontalGroup key=\"is-deleting\">\n        <Spinner />\n        deleting\n      </HorizontalGroup>\n    );\n  } else if (rulesSource === GRAFANA_RULES_SOURCE_NAME) {\n    if (folderUID) {\n      const baseUrl = makeFolderLink(folderUID);\n      if (folder?.canSave) {\n        if (isGroupView && !isProvisioned) {\n          actionIcons.push(\n            <ActionIcon\n              aria-label=\"edit rule group\"\n              data-testid=\"edit-group\"\n              key=\"edit\"\n              icon=\"pen\"\n              tooltip=\"edit rule group\"\n              onClick={() => setIsEditingGroup(true)}\n            />\n          );\n          actionIcons.push(\n            <ActionIcon\n              aria-label=\"re-order rules\"\n              data-testid=\"reorder-group\"\n              key=\"reorder\"\n              icon=\"exchange-alt\"\n              tooltip=\"reorder rules\"\n              className={styles.rotate90}\n              onClick={() => setIsReorderingGroup(true)}\n            />\n          );\n        }\n        if (isListView) {\n          actionIcons.push(\n            <ActionIcon\n              aria-label=\"go to folder\"\n              key=\"goto\"\n              icon=\"folder-open\"\n              tooltip=\"go to folder\"\n              to={baseUrl}\n              target=\"__blank\"\n            />\n          );\n\n          if (folder?.canAdmin) {\n            actionIcons.push(\n              <ActionIcon\n                aria-label=\"manage permissions\"\n                key=\"manage-perms\"\n                icon=\"lock\"\n                tooltip=\"manage permissions\"\n                to={baseUrl + '/permissions'}\n                target=\"__blank\"\n              />\n            );\n          }\n        }\n      }\n      if (folder) {\n        if (isListView) {\n          actionIcons.push(\n            <ActionIcon\n              aria-label=\"export rule folder\"\n              data-testid=\"export-folder\"\n              key=\"export-folder\"\n              icon=\"download-alt\"\n              tooltip=\"Export rules folder\"\n              onClick={() => setIsExporting('folder')}\n            />\n          );\n        } else if (isGroupView) {\n          actionIcons.push(\n            <ActionIcon\n              aria-label=\"export rule group\"\n              data-testid=\"export-group\"\n              key=\"export-group\"\n              icon=\"download-alt\"\n              tooltip=\"Export rule group\"\n              onClick={() => setIsExporting('group')}\n            />\n          );\n        }\n      }\n    }\n  } else if (canEditRules(rulesSource.name) && hasRuler(rulesSource)) {\n    if (!isFederated) {\n      actionIcons.push(\n        <ActionIcon\n          aria-label=\"edit rule group\"\n          data-testid=\"edit-group\"\n          key=\"edit\"\n          icon=\"pen\"\n          tooltip=\"edit rule group\"\n          onClick={() => setIsEditingGroup(true)}\n        />\n      );\n      actionIcons.push(\n        <ActionIcon\n          aria-label=\"re-order rules\"\n          data-testid=\"reorder-group\"\n          key=\"reorder\"\n          icon=\"exchange-alt\"\n          tooltip=\"re-order rules\"\n          className={styles.rotate90}\n          onClick={() => setIsReorderingGroup(true)}\n        />\n      );\n    }\n\n    actionIcons.push(\n      <ActionIcon\n        aria-label=\"delete rule group\"\n        data-testid=\"delete-group\"\n        key=\"delete-group\"\n        icon=\"trash-alt\"\n        tooltip=\"delete rule group\"\n        onClick={() => setIsDeletingGroup(true)}\n      />\n    );\n  }\n\n  // ungrouped rules are rules that are in the \"default\" group name\n  const groupName = isListView ? (\n    <RuleLocation namespace={namespace.name} />\n  ) : (\n    <RuleLocation namespace={namespace.name} group={group.name} />\n  );\n\n  const closeEditModal = (saved = false) => {\n    if (!saved) {\n      logInfo(LogMessages.leavingRuleGroupEdit);\n    }\n    setIsEditingGroup(false);\n  };\n\n  return (\n    <div className={styles.wrapper} data-testid=\"rule-group\">\n      <div className={styles.header} data-testid=\"rule-group-header\">\n        <CollapseToggle\n          size=\"sm\"\n          className={styles.collapseToggle}\n          isCollapsed={isCollapsed}\n          onToggle={setIsCollapsed}\n          data-testid=\"group-collapse-toggle\"\n        />\n        <Icon name={isCollapsed ? 'folder' : 'folder-open'} />\n        {isCloudRulesSource(rulesSource) && (\n          <Tooltip content={rulesSource.name} placement=\"top\">\n            <img\n              alt={rulesSource.meta.name}\n              className={styles.dataSourceIcon}\n              src={rulesSource.meta.info.logos.small}\n            />\n          </Tooltip>\n        )}\n        {\n          // eslint-disable-next-line\n          <div className={styles.groupName} onClick={() => setIsCollapsed(!isCollapsed)}>\n            {isFederated && <Badge color=\"purple\" text=\"Federated\" />} {groupName}\n          </div>\n        }\n        <div className={styles.spacer} />\n        <div className={styles.headerStats}>\n          <RuleGroupStats group={group} />\n        </div>\n        {isProvisioned && (\n          <>\n            <div className={styles.actionsSeparator}>|</div>\n            <div className={styles.actionIcons}>\n              <Badge color=\"purple\" text=\"Provisioned\" />\n            </div>\n          </>\n        )}\n        {!!actionIcons.length && (\n          <>\n            <div className={styles.actionsSeparator}>|</div>\n            <div className={styles.actionIcons}>\n              <Stack gap={0.5}>{actionIcons}</Stack>\n            </div>\n          </>\n        )}\n      </div>\n      {!isCollapsed && (\n        <RulesTable\n          showSummaryColumn={true}\n          className={styles.rulesTable}\n          showGuidelines={true}\n          showNextEvaluationColumn={Boolean(group.interval)}\n          rules={group.rules}\n        />\n      )}\n      {isEditingGroup && (\n        <EditCloudGroupModal\n          namespace={namespace}\n          group={group}\n          onClose={() => closeEditModal()}\n          folderUrl={folder?.canEdit ? makeFolderSettingsLink(folder) : undefined}\n        />\n      )}\n      {isReorderingGroup && (\n        <ReorderCloudGroupModal group={group} namespace={namespace} onClose={() => setIsReorderingGroup(false)} />\n      )}\n      <ConfirmModal\n        isOpen={isDeletingGroup}\n        title=\"Delete group\"\n        body={\n          <div>\n            <p>\n              Deleting &quot;<strong>{group.name}</strong>&quot; will permanently remove the group and{' '}\n              {group.rules.length} alert {pluralize('rule', group.rules.length)} belonging to it.\n            </p>\n            <p>Are you sure you want to delete this group?</p>\n          </div>\n        }\n        onConfirm={deleteGroup}\n        onDismiss={() => setIsDeletingGroup(false)}\n        confirmText=\"Delete\"\n      />\n      {folder && isExporting === 'folder' && (\n        <GrafanaRuleFolderExporter folder={folder} onClose={() => setIsExporting(undefined)} />\n      )}\n      {folder && isExporting === 'group' && (\n        <GrafanaRuleGroupExporter\n          folderUid={folder.uid}\n          groupName={group.name}\n          onClose={() => setIsExporting(undefined)}\n        />\n      )}\n    </div>\n  );\n});\n\nRulesGroup.displayName = 'RulesGroup';\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css``,\n    header: css`\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n      padding: ${theme.spacing(1)} ${theme.spacing(1)} ${theme.spacing(1)} 0;\n      flex-wrap: nowrap;\n      border-bottom: 1px solid ${theme.colors.border.weak};\n\n      &:hover {\n        background-color: ${theme.components.table.rowHoverBackground};\n      }\n    `,\n    headerStats: css`\n      flex-shrink: 0;\n\n      span {\n        vertical-align: middle;\n      }\n\n      ${theme.breakpoints.down('sm')} {\n        order: 2;\n        width: 100%;\n        padding-left: ${theme.spacing(1)};\n      }\n    `,\n    groupName: css`\n      margin-left: ${theme.spacing(1)};\n      margin-bottom: 0;\n      cursor: pointer;\n\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n    `,\n    spacer: css`\n      flex: 1;\n    `,\n    collapseToggle: css`\n      background: none;\n      border: none;\n      margin-top: -${theme.spacing(1)};\n      margin-bottom: -${theme.spacing(1)};\n\n      svg {\n        margin-bottom: 0;\n      }\n    `,\n    dataSourceIcon: css`\n      width: ${theme.spacing(2)};\n      height: ${theme.spacing(2)};\n      margin-left: ${theme.spacing(2)};\n    `,\n    dataSourceOrigin: css`\n      margin-right: 1em;\n      color: ${theme.colors.text.disabled};\n    `,\n    actionsSeparator: css`\n      margin: 0 ${theme.spacing(2)};\n    `,\n    actionIcons: css`\n      width: 80px;\n      align-items: center;\n\n      flex-shrink: 0;\n    `,\n    rulesTable: css`\n      margin: ${theme.spacing(2, 0)};\n    `,\n    rotate90: css`\n      transform: rotate(90deg);\n    `,\n  };\n};\n","import { useMemo } from 'react';\n\nimport { CombinedRuleNamespace } from '../../../../../types/unified-alerting';\n\nexport function useCombinedGroupNamespace(namespaces: CombinedRuleNamespace[]) {\n  return useMemo(\n    () =>\n      namespaces.flatMap((ns) =>\n        ns.groups.map((g) => ({\n          namespace: ns,\n          group: g,\n        }))\n      ),\n    [namespaces]\n  );\n}\n","import { css } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport React, { useMemo } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { LoadingPlaceholder, Pagination, Spinner, useStyles2 } from '@grafana/ui';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { DEFAULT_PER_PAGE_PAGINATION } from '../../../../../core/constants';\nimport { usePagination } from '../../hooks/usePagination';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { getPaginationStyles } from '../../styles/pagination';\nimport { getRulesDataSources, getRulesSourceUid } from '../../utils/datasource';\nimport { isAsyncRequestStatePending } from '../../utils/redux';\n\nimport { RulesGroup } from './RulesGroup';\nimport { useCombinedGroupNamespace } from './useCombinedGroupNamespace';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll: boolean;\n}\n\nexport const CloudRules = ({ namespaces, expandAll }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const dsConfigs = useUnifiedAlertingSelector((state) => state.dataSources);\n  const promRules = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulesDataSources = useMemo(getRulesDataSources, []);\n  const groupsWithNamespaces = useCombinedGroupNamespace(namespaces);\n\n  const dataSourcesLoading = useMemo(\n    () =>\n      rulesDataSources.filter(\n        (ds) => isAsyncRequestStatePending(promRules[ds.name]) || isAsyncRequestStatePending(dsConfigs[ds.name])\n      ),\n    [promRules, dsConfigs, rulesDataSources]\n  );\n\n  const hasSomeResults = rulesDataSources.some((ds) => Boolean(promRules[ds.name]?.result?.length));\n\n  const hasDataSourcesConfigured = rulesDataSources.length > 0;\n  const hasDataSourcesLoading = dataSourcesLoading.length > 0;\n  const hasNamespaces = namespaces.length > 0;\n\n  const { numberOfPages, onPageChange, page, pageItems } = usePagination(\n    groupsWithNamespaces,\n    1,\n    DEFAULT_PER_PAGE_PAGINATION\n  );\n\n  return (\n    <section className={styles.wrapper}>\n      <div className={styles.sectionHeader}>\n        <h5>Mimir / Cortex / Loki</h5>\n        {dataSourcesLoading.length ? (\n          <LoadingPlaceholder\n            className={styles.loader}\n            text={`Loading rules from ${dataSourcesLoading.length} ${pluralize('source', dataSourcesLoading.length)}`}\n          />\n        ) : (\n          <div />\n        )}\n      </div>\n\n      {pageItems.map(({ group, namespace }) => {\n        return (\n          <RulesGroup\n            group={group}\n            key={`${getRulesSourceUid(namespace.rulesSource)}-${namespace.name}-${group.name}`}\n            namespace={namespace}\n            expandAll={expandAll}\n            viewMode={'grouped'}\n          />\n        );\n      })}\n\n      {!hasDataSourcesConfigured && <p>There are no Prometheus or Loki data sources configured.</p>}\n      {hasDataSourcesConfigured && !hasDataSourcesLoading && !hasNamespaces && <p>No rules found.</p>}\n      {!hasSomeResults && hasDataSourcesLoading && <Spinner size={24} className={styles.spinner} />}\n\n      <Pagination\n        className={styles.pagination}\n        currentPage={page}\n        numberOfPages={numberOfPages}\n        onNavigate={onPageChange}\n        hideWhenSinglePage\n      />\n    </section>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  loader: css`\n    margin-bottom: 0;\n  `,\n  sectionHeader: css`\n    display: flex;\n    justify-content: space-between;\n  `,\n  wrapper: css`\n    margin-bottom: ${theme.spacing(4)};\n  `,\n  spinner: css`\n    text-align: center;\n    padding: ${theme.spacing(2)};\n  `,\n  pagination: getPaginationStyles(theme),\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { LoadingPlaceholder, Pagination, Spinner, useStyles2 } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { DEFAULT_PER_PAGE_PAGINATION } from '../../../../../core/constants';\nimport { flattenGrafanaManagedRules } from '../../hooks/useCombinedRuleNamespaces';\nimport { usePagination } from '../../hooks/usePagination';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { getPaginationStyles } from '../../styles/pagination';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { initialAsyncRequestState } from '../../utils/redux';\n\nimport { RulesGroup } from './RulesGroup';\nimport { useCombinedGroupNamespace } from './useCombinedGroupNamespace';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll: boolean;\n}\n\nexport const GrafanaRules = ({ namespaces, expandAll }: Props) => {\n  const styles = useStyles2(getStyles);\n  const [queryParams] = useQueryParams();\n\n  const { prom, ruler } = useUnifiedAlertingSelector((state) => ({\n    prom: state.promRules[GRAFANA_RULES_SOURCE_NAME] || initialAsyncRequestState,\n    ruler: state.rulerRules[GRAFANA_RULES_SOURCE_NAME] || initialAsyncRequestState,\n  }));\n\n  const loading = prom.loading || ruler.loading;\n  const hasResult = !!prom.result || !!ruler.result;\n\n  const wantsListView = queryParams['view'] === 'list';\n  const namespacesFormat = wantsListView ? flattenGrafanaManagedRules(namespaces) : namespaces;\n\n  const groupsWithNamespaces = useCombinedGroupNamespace(namespacesFormat);\n\n  const { numberOfPages, onPageChange, page, pageItems } = usePagination(\n    groupsWithNamespaces,\n    1,\n    DEFAULT_PER_PAGE_PAGINATION\n  );\n\n  return (\n    <section className={styles.wrapper}>\n      <div className={styles.sectionHeader}>\n        <h5>Grafana</h5>\n        {loading ? <LoadingPlaceholder className={styles.loader} text=\"Loading...\" /> : <div />}\n      </div>\n\n      {pageItems.map(({ group, namespace }) => (\n        <RulesGroup\n          group={group}\n          key={`${namespace.name}-${group.name}`}\n          namespace={namespace}\n          expandAll={expandAll}\n          viewMode={wantsListView ? 'list' : 'grouped'}\n        />\n      ))}\n      {hasResult && namespacesFormat?.length === 0 && <p>No rules found.</p>}\n      {!hasResult && loading && <Spinner size={24} className={styles.spinner} />}\n      <Pagination\n        className={styles.pagination}\n        currentPage={page}\n        numberOfPages={numberOfPages}\n        onNavigate={onPageChange}\n        hideWhenSinglePage\n      />\n    </section>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  loader: css`\n    margin-bottom: 0;\n  `,\n  sectionHeader: css`\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  wrapper: css`\n    margin-bottom: ${theme.spacing(4)};\n  `,\n  spinner: css`\n    text-align: center;\n    padding: ${theme.spacing(2)};\n  `,\n  pagination: getPaginationStyles(theme),\n});\n","import React, { useEffect, useMemo } from 'react';\n\nimport { logInfo } from '@grafana/runtime';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { LogMessages } from '../../Analytics';\nimport { AlertSourceAction } from '../../hooks/useAbilities';\nimport { isCloudRulesSource, isGrafanaRulesSource } from '../../utils/datasource';\nimport { Authorize } from '../Authorize';\n\nimport { CloudRules } from './CloudRules';\nimport { GrafanaRules } from './GrafanaRules';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll: boolean;\n}\n\nexport const RuleListGroupView = ({ namespaces, expandAll }: Props) => {\n  const [grafanaNamespaces, cloudNamespaces] = useMemo(() => {\n    const sorted = namespaces\n      .map((namespace) => ({\n        ...namespace,\n        groups: namespace.groups.sort((a, b) => a.name.localeCompare(b.name)),\n      }))\n      .sort((a, b) => a.name.localeCompare(b.name));\n    return [\n      sorted.filter((ns) => isGrafanaRulesSource(ns.rulesSource)),\n      sorted.filter((ns) => isCloudRulesSource(ns.rulesSource)),\n    ];\n  }, [namespaces]);\n\n  useEffect(() => {\n    logInfo(LogMessages.loadedList);\n  }, []);\n\n  return (\n    <>\n      <Authorize actions={[AlertSourceAction.ViewAlertRule]}>\n        <GrafanaRules namespaces={grafanaNamespaces} expandAll={expandAll} />\n      </Authorize>\n      <Authorize actions={[AlertSourceAction.ViewExternalAlertRule]}>\n        <CloudRules namespaces={cloudNamespaces} expandAll={expandAll} />\n      </Authorize>\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { CombinedRule } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nimport { alertStateToReadable } from '../../utils/rules';\nimport { CollapseToggle } from '../CollapseToggle';\n\nimport { RulesTable } from './RulesTable';\n\ninterface Props {\n  rules: CombinedRule[];\n  state: PromAlertingRuleState;\n  defaultCollapsed?: boolean;\n}\n\nexport const RuleListStateSection = ({ rules, state, defaultCollapsed = false }: Props) => {\n  const [collapsed, setCollapsed] = useState(defaultCollapsed);\n  const styles = useStyles2(getStyles);\n  return (\n    <>\n      <h4 className={styles.header}>\n        <CollapseToggle\n          className={styles.collapseToggle}\n          size=\"xxl\"\n          isCollapsed={collapsed}\n          onToggle={() => setCollapsed(!collapsed)}\n        />\n        {alertStateToReadable(state)} ({rules.length})\n      </h4>\n      {!collapsed && <RulesTable className={styles.rulesTable} rules={rules} showGroupColumn={true} />}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  collapseToggle: css`\n    vertical-align: middle;\n  `,\n  header: css`\n    margin-top: ${theme.spacing(2)};\n  `,\n  rulesTable: css`\n    margin-top: ${theme.spacing(3)};\n  `,\n});\n","import React, { useMemo } from 'react';\n\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { CombinedRule, CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nimport { getFiltersFromUrlParams } from '../../utils/misc';\nimport { isAlertingRule } from '../../utils/rules';\n\nimport { RuleListStateSection } from './RuleListStateSection';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll?: boolean;\n}\n\ntype GroupedRules = Record<PromAlertingRuleState, CombinedRule[]>;\n\nexport const RuleListStateView = ({ namespaces }: Props) => {\n  const filters = getFiltersFromUrlParams(useQueryParams()[0]);\n\n  const groupedRules = useMemo(() => {\n    const result: GroupedRules = {\n      [PromAlertingRuleState.Firing]: [],\n      [PromAlertingRuleState.Inactive]: [],\n      [PromAlertingRuleState.Pending]: [],\n    };\n\n    namespaces.forEach((namespace) =>\n      namespace.groups.forEach((group) =>\n        group.rules.forEach((rule) => {\n          if (rule.promRule && isAlertingRule(rule.promRule)) {\n            result[rule.promRule.state].push(rule);\n          }\n        })\n      )\n    );\n\n    Object.values(result).forEach((rules) => rules.sort((a, b) => a.name.localeCompare(b.name)));\n\n    return result;\n  }, [namespaces]);\n  return (\n    <>\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Firing) && (\n        <RuleListStateSection state={PromAlertingRuleState.Firing} rules={groupedRules[PromAlertingRuleState.Firing]} />\n      )}\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Pending) && (\n        <RuleListStateSection\n          state={PromAlertingRuleState.Pending}\n          rules={groupedRules[PromAlertingRuleState.Pending]}\n        />\n      )}\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Inactive) && (\n        <RuleListStateSection\n          defaultCollapsed={filters.alertState !== PromAlertingRuleState.Inactive}\n          state={PromAlertingRuleState.Inactive}\n          rules={groupedRules[PromAlertingRuleState.Inactive]}\n        />\n      )}\n    </>\n  );\n};\n","import uFuzzy from '@leeoniya/ufuzzy';\nimport { produce } from 'immer';\nimport { compact, isEmpty } from 'lodash';\nimport { useCallback, useEffect, useMemo } from 'react';\n\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { Matcher } from 'app/plugins/datasource/alertmanager/types';\nimport { CombinedRuleGroup, CombinedRuleNamespace, Rule } from 'app/types/unified-alerting';\nimport { isPromAlertingRuleState, PromRuleType, RulerGrafanaRuleDTO } from 'app/types/unified-alerting-dto';\n\nimport { applySearchFilterToQuery, getSearchFilterFromQuery, RulesFilter } from '../search/rulesSearchParser';\nimport { labelsMatchMatchers, matcherToMatcherField, parseMatchers } from '../utils/alertmanager';\nimport { isCloudRulesSource } from '../utils/datasource';\nimport { parseMatcher } from '../utils/matchers';\nimport { getRuleHealth, isAlertingRule, isGrafanaRulerRule, isPromRuleType } from '../utils/rules';\n\nimport { calculateGroupTotals, calculateRuleFilteredTotals, calculateRuleTotals } from './useCombinedRuleNamespaces';\nimport { useURLSearchParams } from './useURLSearchParams';\n\nexport function useRulesFilter() {\n  const [queryParams, updateQueryParams] = useURLSearchParams();\n  const searchQuery = queryParams.get('search') ?? '';\n\n  const filterState = useMemo(() => getSearchFilterFromQuery(searchQuery), [searchQuery]);\n  const hasActiveFilters = useMemo(() => Object.values(filterState).some((filter) => !isEmpty(filter)), [filterState]);\n\n  const updateFilters = useCallback(\n    (newFilter: RulesFilter) => {\n      const newSearchQuery = applySearchFilterToQuery(searchQuery, newFilter);\n      updateQueryParams({ search: newSearchQuery });\n    },\n    [searchQuery, updateQueryParams]\n  );\n\n  const setSearchQuery = useCallback(\n    (newSearchQuery: string | undefined) => {\n      updateQueryParams({ search: newSearchQuery });\n    },\n    [updateQueryParams]\n  );\n\n  // Handle legacy filters\n  useEffect(() => {\n    const legacyFilters = {\n      dataSource: queryParams.get('dataSource') ?? undefined,\n      alertState: queryParams.get('alertState') ?? undefined,\n      ruleType: queryParams.get('ruleType') ?? undefined,\n      labels: parseMatchers(queryParams.get('queryString') ?? '').map(matcherToMatcherField),\n    };\n\n    const hasLegacyFilters = Object.values(legacyFilters).some((legacyFilter) => !isEmpty(legacyFilter));\n    if (hasLegacyFilters) {\n      updateQueryParams({ dataSource: undefined, alertState: undefined, ruleType: undefined, queryString: undefined });\n      // Existing query filters takes precedence over legacy ones\n      updateFilters(\n        produce(filterState, (draft) => {\n          draft.dataSourceNames ??= legacyFilters.dataSource ? [legacyFilters.dataSource] : [];\n          if (legacyFilters.alertState && isPromAlertingRuleState(legacyFilters.alertState)) {\n            draft.ruleState ??= legacyFilters.alertState;\n          }\n          if (legacyFilters.ruleType && isPromRuleType(legacyFilters.ruleType)) {\n            draft.ruleType ??= legacyFilters.ruleType;\n          }\n          if (draft.labels.length === 0 && legacyFilters.labels.length > 0) {\n            const legacyLabelsAsStrings = legacyFilters.labels.map(\n              ({ name, operator, value }) => `${name}${operator}${value}`\n            );\n            draft.labels.push(...legacyLabelsAsStrings);\n          }\n        })\n      );\n    }\n  }, [queryParams, updateFilters, filterState, updateQueryParams]);\n\n  return { filterState, hasActiveFilters, searchQuery, setSearchQuery, updateFilters };\n}\n\nexport const useFilteredRules = (namespaces: CombinedRuleNamespace[], filterState: RulesFilter) => {\n  return useMemo(() => {\n    const filteredRules = filterRules(namespaces, filterState);\n\n    // Totals recalculation is a workaround for the lack of server-side filtering\n    filteredRules.forEach((namespace) => {\n      namespace.groups.forEach((group) => {\n        group.rules.forEach((rule) => {\n          if (isAlertingRule(rule.promRule)) {\n            rule.instanceTotals = calculateRuleTotals(rule.promRule);\n            rule.filteredInstanceTotals = calculateRuleFilteredTotals(rule.promRule);\n          }\n        });\n\n        group.totals = calculateGroupTotals({\n          rules: group.rules.map((r) => r.promRule).filter((r): r is Rule => !!r),\n        });\n      });\n    });\n\n    return filteredRules;\n  }, [namespaces, filterState]);\n};\n\n// Options details can be found here https://github.com/leeoniya/uFuzzy#options\n// The following configuration complies with Damerau-Levenshtein distance\n// https://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance\nconst ufuzzy = new uFuzzy({\n  intraMode: 1,\n  intraIns: 1,\n  intraSub: 1,\n  intraTrn: 1,\n  intraDel: 1,\n});\n\nexport const filterRules = (\n  namespaces: CombinedRuleNamespace[],\n  filterState: RulesFilter = { dataSourceNames: [], labels: [], freeFormWords: [] }\n): CombinedRuleNamespace[] => {\n  let filteredNamespaces = namespaces;\n\n  const dataSourceFilter = filterState.dataSourceNames;\n  if (dataSourceFilter.length) {\n    filteredNamespaces = filteredNamespaces.filter(({ rulesSource }) =>\n      isCloudRulesSource(rulesSource) ? dataSourceFilter.includes(rulesSource.name) : true\n    );\n  }\n\n  const namespaceFilter = filterState.namespace;\n  if (namespaceFilter) {\n    const namespaceHaystack = filteredNamespaces.map((ns) => ns.name);\n\n    const [idxs, info, order] = ufuzzy.search(namespaceHaystack, namespaceFilter);\n    if (info && order) {\n      filteredNamespaces = order.map((idx) => filteredNamespaces[info.idx[idx]]);\n    } else if (idxs) {\n      filteredNamespaces = idxs.map((idx) => filteredNamespaces[idx]);\n    }\n  }\n\n  // If a namespace and group have rules that match the rules filters then keep them.\n  return filteredNamespaces.reduce<CombinedRuleNamespace[]>(reduceNamespaces(filterState), []);\n};\n\nconst reduceNamespaces = (filterState: RulesFilter) => {\n  return (namespaceAcc: CombinedRuleNamespace[], namespace: CombinedRuleNamespace) => {\n    const groupNameFilter = filterState.groupName;\n    let filteredGroups = namespace.groups;\n\n    if (groupNameFilter) {\n      const groupsHaystack = filteredGroups.map((g) => g.name);\n      const [idxs, info, order] = ufuzzy.search(groupsHaystack, groupNameFilter);\n      if (info && order) {\n        filteredGroups = order.map((idx) => filteredGroups[info.idx[idx]]);\n      } else if (idxs) {\n        filteredGroups = idxs.map((idx) => filteredGroups[idx]);\n      }\n    }\n\n    filteredGroups = filteredGroups.reduce<CombinedRuleGroup[]>(reduceGroups(filterState), []);\n\n    if (filteredGroups.length) {\n      namespaceAcc.push({\n        ...namespace,\n        groups: filteredGroups,\n      });\n    }\n\n    return namespaceAcc;\n  };\n};\n\n// Reduces groups to only groups that have rules matching the filters\nconst reduceGroups = (filterState: RulesFilter) => {\n  const ruleNameQuery = filterState.ruleName ?? filterState.freeFormWords.join(' ');\n\n  return (groupAcc: CombinedRuleGroup[], group: CombinedRuleGroup) => {\n    let filteredRules = group.rules;\n\n    if (ruleNameQuery) {\n      const rulesHaystack = filteredRules.map((r) => r.name);\n      const [idxs, info, order] = ufuzzy.search(rulesHaystack, ruleNameQuery);\n      if (info && order) {\n        filteredRules = order.map((idx) => filteredRules[info.idx[idx]]);\n      } else if (idxs) {\n        filteredRules = idxs.map((idx) => filteredRules[idx]);\n      }\n    }\n\n    filteredRules = filteredRules.filter((rule) => {\n      if (filterState.ruleType && filterState.ruleType !== rule.promRule?.type) {\n        return false;\n      }\n\n      const doesNotQueryDs = isGrafanaRulerRule(rule.rulerRule) && !isQueryingDataSource(rule.rulerRule, filterState);\n      if (filterState.dataSourceNames?.length && doesNotQueryDs) {\n        return false;\n      }\n\n      if (filterState.ruleHealth && rule.promRule) {\n        const ruleHealth = getRuleHealth(rule.promRule.health);\n        return filterState.ruleHealth === ruleHealth;\n      }\n\n      // Query strings can match alert name, label keys, and label values\n      if (filterState.labels.length > 0) {\n        // const matchers = parseMatchers(filters.queryString);\n        const matchers = compact(filterState.labels.map(looseParseMatcher));\n\n        const doRuleLabelsMatchQuery = matchers.length > 0 && labelsMatchMatchers(rule.labels, matchers);\n        const doAlertsContainMatchingLabels =\n          matchers.length > 0 &&\n          rule.promRule &&\n          rule.promRule.type === PromRuleType.Alerting &&\n          rule.promRule.alerts &&\n          rule.promRule.alerts.some((alert) => labelsMatchMatchers(alert.labels, matchers));\n\n        if (!(doRuleLabelsMatchQuery || doAlertsContainMatchingLabels)) {\n          return false;\n        }\n      }\n      if (\n        filterState.ruleState &&\n        !(rule.promRule && isAlertingRule(rule.promRule) && rule.promRule.state === filterState.ruleState)\n      ) {\n        return false;\n      }\n      return true;\n    });\n    // Add rules to the group that match the rule list filters\n    if (filteredRules.length) {\n      groupAcc.push({\n        ...group,\n        rules: filteredRules,\n      });\n    }\n    return groupAcc;\n  };\n};\n\nfunction looseParseMatcher(matcherQuery: string): Matcher | undefined {\n  try {\n    return parseMatcher(matcherQuery);\n  } catch {\n    // Try to createa a matcher than matches all values for a given key\n    return { name: matcherQuery, value: '', isRegex: true, isEqual: true };\n  }\n}\n\nconst isQueryingDataSource = (rulerRule: RulerGrafanaRuleDTO, filterState: RulesFilter): boolean => {\n  if (!filterState.dataSourceNames?.length) {\n    return true;\n  }\n\n  return !!rulerRule.grafana_alert.data.find((query) => {\n    if (!query.datasourceUid) {\n      return false;\n    }\n    const ds = getDataSourceSrv().getInstanceSettings(query.datasourceUid);\n    return ds?.name && filterState?.dataSourceNames?.includes(ds.name);\n  });\n};\n","import React, { useState } from 'react';\nimport { PopValueActionMeta, RemoveValueActionMeta } from 'react-select';\n\nimport {\n  DataSourceInstanceSettings,\n  getDataSourceUID,\n  isUnsignedPluginSignature,\n  SelectableValue,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { getDataSourceSrv, DataSourcePickerState, DataSourcePickerProps } from '@grafana/runtime';\nimport { ExpressionDatasourceRef } from '@grafana/runtime/src/utils/DataSourceWithBackend';\nimport { ActionMeta, HorizontalGroup, PluginSignatureBadge, MultiSelect } from '@grafana/ui';\n\nimport { isDataSourceManagingAlerts } from '../../utils/datasource';\n\nexport interface MultipleDataSourcePickerProps extends Omit<DataSourcePickerProps, 'onChange' | 'current'> {\n  onChange: (ds: DataSourceInstanceSettings, action: 'add' | 'remove') => void;\n  current: string[] | undefined;\n}\n\nexport const MultipleDataSourcePicker = (props: MultipleDataSourcePickerProps) => {\n  const dataSourceSrv = getDataSourceSrv();\n\n  const [state, setState] = useState<DataSourcePickerState>();\n\n  const onChange = (items: Array<SelectableValue<string>>, actionMeta: ActionMeta) => {\n    if (actionMeta.action === 'clear' && props.onClear) {\n      props.onClear();\n      return;\n    }\n\n    const selectedItem = items[items.length - 1];\n\n    let dataSourceName, action: 'add' | 'remove';\n\n    if (actionMeta.action === 'pop-value' || actionMeta.action === 'remove-value') {\n      const castedActionMeta:\n        | RemoveValueActionMeta<SelectableValue<string>>\n        | PopValueActionMeta<SelectableValue<string>> = actionMeta;\n      dataSourceName = castedActionMeta.removedValue?.value;\n      action = 'remove';\n    } else {\n      dataSourceName = selectedItem.value;\n      action = 'add';\n    }\n\n    const dsSettings = dataSourceSrv.getInstanceSettings(dataSourceName);\n\n    if (dsSettings) {\n      props.onChange(dsSettings, action);\n      setState({ error: undefined });\n    }\n  };\n\n  const getCurrentValue = (): Array<SelectableValue<string>> | undefined => {\n    const { current, hideTextValue, noDefault } = props;\n    if (!current && noDefault) {\n      return;\n    }\n\n    return current?.map((dataSourceName: string) => {\n      const ds = dataSourceSrv.getInstanceSettings(dataSourceName);\n      if (ds) {\n        return {\n          label: ds.name.slice(0, 37),\n          value: ds.name,\n          imgUrl: ds.meta.info.logos.small,\n          hideText: hideTextValue,\n          meta: ds.meta,\n        };\n      }\n\n      const uid = getDataSourceUID(dataSourceName);\n\n      if (uid === ExpressionDatasourceRef.uid || uid === ExpressionDatasourceRef.name) {\n        return { label: uid, value: uid, hideText: hideTextValue };\n      }\n\n      return {\n        label: (uid ?? 'no name') + ' - not found',\n        value: uid ?? undefined,\n        imgUrl: '',\n        hideText: hideTextValue,\n      };\n    });\n  };\n\n  const getDataSourceOptions = () => {\n    const { alerting, tracing, metrics, mixed, dashboard, variables, annotations, pluginId, type, filter, logs } =\n      props;\n\n    const dataSources = dataSourceSrv.getList({\n      alerting,\n      tracing,\n      metrics,\n      logs,\n      dashboard,\n      mixed,\n      variables,\n      annotations,\n      pluginId,\n      filter,\n      type,\n    });\n\n    const alertManagingDs = dataSources.filter(isDataSourceManagingAlerts).map((ds) => ({\n      value: ds.name,\n      label: `${ds.name}${ds.isDefault ? ' (default)' : ''}`,\n      imgUrl: ds.meta.info.logos.small,\n      meta: ds.meta,\n    }));\n\n    const nonAlertManagingDs = dataSources\n      .filter((ds) => !isDataSourceManagingAlerts(ds))\n      .map((ds) => ({\n        value: ds.name,\n        label: `${ds.name}${ds.isDefault ? ' (default)' : ''}`,\n        imgUrl: ds.meta.info.logos.small,\n        meta: ds.meta,\n      }));\n\n    const groupedOptions = [\n      { label: 'Data sources with configured alert rules', options: alertManagingDs, expanded: true },\n      { label: 'Other data sources', options: nonAlertManagingDs, expanded: true },\n    ];\n\n    return groupedOptions;\n  };\n\n  const {\n    autoFocus,\n    onBlur,\n    onClear,\n    openMenuOnFocus,\n    placeholder,\n    width,\n    inputId,\n    disabled = false,\n    isLoading = false,\n  } = props;\n\n  const options = getDataSourceOptions();\n  const value = getCurrentValue();\n  const isClearable = typeof onClear === 'function';\n\n  return (\n    <div data-testid={selectors.components.DataSourcePicker.container}>\n      <MultiSelect\n        isLoading={isLoading}\n        disabled={disabled}\n        data-testid={selectors.components.DataSourcePicker.inputV2}\n        inputId={inputId || 'data-source-picker'}\n        className=\"ds-picker select-container\"\n        isClearable={isClearable}\n        backspaceRemovesValue={true}\n        onChange={onChange}\n        options={options}\n        autoFocus={autoFocus}\n        onBlur={onBlur}\n        width={width}\n        openMenuOnFocus={openMenuOnFocus}\n        maxMenuHeight={500}\n        placeholder={placeholder}\n        noOptionsMessage=\"No datasources found\"\n        value={value ?? []}\n        invalid={Boolean(state?.error) || Boolean(props.invalid)}\n        getOptionLabel={(o) => {\n          if (o.meta && isUnsignedPluginSignature(o.meta.signature) && o !== value) {\n            return (\n              <HorizontalGroup align=\"center\" justify=\"space-between\" height=\"auto\">\n                <span>{o.label}</span> <PluginSignatureBadge status={o.meta.signature} />\n              </HorizontalGroup>\n            );\n          }\n          return o.label || '';\n        }}\n      />\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useForm } from 'react-hook-form';\n\nimport { DataSourceInstanceSettings, GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { logInfo } from '@grafana/runtime';\nimport { Button, Field, Icon, Input, Label, RadioButtonGroup, Tooltip, useStyles2 } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { PromAlertingRuleState, PromRuleType } from 'app/types/unified-alerting-dto';\n\nimport { LogMessages } from '../../Analytics';\nimport { useRulesFilter } from '../../hooks/useFilteredRules';\nimport { RuleHealth } from '../../search/rulesSearchParser';\nimport { alertStateToReadable } from '../../utils/rules';\nimport { HoverCard } from '../HoverCard';\n\nimport { MultipleDataSourcePicker } from './MultipleDataSourcePicker';\n\nconst ViewOptions: SelectableValue[] = [\n  {\n    icon: 'folder',\n    label: 'Grouped',\n    value: 'grouped',\n  },\n  {\n    icon: 'list-ul',\n    label: 'List',\n    value: 'list',\n  },\n  {\n    icon: 'heart-rate',\n    label: 'State',\n    value: 'state',\n  },\n];\n\nconst RuleTypeOptions: SelectableValue[] = [\n  {\n    label: 'Alert ',\n    value: PromRuleType.Alerting,\n  },\n  {\n    label: 'Recording ',\n    value: PromRuleType.Recording,\n  },\n];\n\nconst RuleHealthOptions: SelectableValue[] = [\n  { label: 'Ok', value: RuleHealth.Ok },\n  { label: 'No Data', value: RuleHealth.NoData },\n  { label: 'Error', value: RuleHealth.Error },\n];\n\ninterface RulesFilerProps {\n  onFilterCleared?: () => void;\n}\n\nconst RuleStateOptions = Object.entries(PromAlertingRuleState).map(([key, value]) => ({\n  label: alertStateToReadable(value),\n  value,\n}));\n\nconst RulesFilter = ({ onFilterCleared = () => undefined }: RulesFilerProps) => {\n  const styles = useStyles2(getStyles);\n  const [queryParams, setQueryParams] = useQueryParams();\n  const { filterState, hasActiveFilters, searchQuery, setSearchQuery, updateFilters } = useRulesFilter();\n\n  // This key is used to force a rerender on the inputs when the filters are cleared\n  const [filterKey, setFilterKey] = useState<number>(Math.floor(Math.random() * 100));\n  const dataSourceKey = `dataSource-${filterKey}`;\n  const queryStringKey = `queryString-${filterKey}`;\n\n  const searchQueryRef = useRef<HTMLInputElement | null>(null);\n  const { handleSubmit, register, setValue } = useForm<{ searchQuery: string }>({ defaultValues: { searchQuery } });\n  const { ref, ...rest } = register('searchQuery');\n\n  useEffect(() => {\n    setValue('searchQuery', searchQuery);\n  }, [searchQuery, setValue]);\n\n  const handleDataSourceChange = (dataSourceValue: DataSourceInstanceSettings, action: 'add' | 'remove') => {\n    const dataSourceNames =\n      action === 'add'\n        ? [...filterState.dataSourceNames].concat([dataSourceValue.name])\n        : filterState.dataSourceNames.filter((name) => name !== dataSourceValue.name);\n\n    updateFilters({\n      ...filterState,\n      dataSourceNames,\n    });\n\n    setFilterKey((key) => key + 1);\n  };\n\n  const clearDataSource = () => {\n    updateFilters({ ...filterState, dataSourceNames: [] });\n    setFilterKey((key) => key + 1);\n  };\n\n  const handleAlertStateChange = (value: PromAlertingRuleState) => {\n    logInfo(LogMessages.clickingAlertStateFilters);\n    updateFilters({ ...filterState, ruleState: value });\n    setFilterKey((key) => key + 1);\n  };\n\n  const handleViewChange = (view: string) => {\n    setQueryParams({ view });\n  };\n\n  const handleRuleTypeChange = (ruleType: PromRuleType) => {\n    updateFilters({ ...filterState, ruleType });\n    setFilterKey((key) => key + 1);\n  };\n\n  const handleRuleHealthChange = (ruleHealth: RuleHealth) => {\n    updateFilters({ ...filterState, ruleHealth });\n    setFilterKey((key) => key + 1);\n  };\n\n  const handleClearFiltersClick = () => {\n    setSearchQuery(undefined);\n    onFilterCleared();\n\n    setTimeout(() => setFilterKey(filterKey + 1), 100);\n  };\n\n  const searchIcon = <Icon name={'search'} />;\n  return (\n    <div className={styles.container}>\n      <Stack direction=\"column\" gap={1}>\n        <Stack direction=\"row\" gap={1}>\n          <Field\n            className={styles.dsPickerContainer}\n            label={\n              <Label htmlFor=\"data-source-picker\">\n                <Stack gap={0.5}>\n                  <span>Search by data sources</span>\n                  <Tooltip\n                    content={\n                      <div>\n                        <p>\n                          Data sources containing configured alert rules are Mimir or Loki data sources where alert\n                          rules are stored and evaluated in the data source itself.\n                        </p>\n                        <p>\n                          In these data sources, you can select Manage alerts via Alerting UI to be able to manage these\n                          alert rules in the Grafana UI as well as in the data source where they were configured.\n                        </p>\n                      </div>\n                    }\n                  >\n                    <Icon name=\"info-circle\" size=\"sm\" />\n                  </Tooltip>\n                </Stack>\n              </Label>\n            }\n          >\n            <MultipleDataSourcePicker\n              key={dataSourceKey}\n              alerting\n              noDefault\n              placeholder=\"All data sources\"\n              current={filterState.dataSourceNames}\n              onChange={handleDataSourceChange}\n              onClear={clearDataSource}\n            />\n          </Field>\n\n          <div>\n            <Label>State</Label>\n            <RadioButtonGroup\n              options={RuleStateOptions}\n              value={filterState.ruleState}\n              onChange={handleAlertStateChange}\n            />\n          </div>\n          <div>\n            <Label>Rule type</Label>\n            <RadioButtonGroup options={RuleTypeOptions} value={filterState.ruleType} onChange={handleRuleTypeChange} />\n          </div>\n          <div>\n            <Label>Health</Label>\n            <RadioButtonGroup\n              options={RuleHealthOptions}\n              value={filterState.ruleHealth}\n              onChange={handleRuleHealthChange}\n            />\n          </div>\n        </Stack>\n        <Stack direction=\"column\" gap={1}>\n          <Stack direction=\"row\" gap={1}>\n            <form\n              className={styles.searchInput}\n              onSubmit={handleSubmit((data) => {\n                setSearchQuery(data.searchQuery);\n                searchQueryRef.current?.blur();\n              })}\n            >\n              <Field\n                label={\n                  <Label htmlFor=\"rulesSearchInput\">\n                    <Stack gap={0.5}>\n                      <span>Search</span>\n                      <HoverCard content={<SearchQueryHelp />}>\n                        <Icon name=\"info-circle\" size=\"sm\" tabIndex={0} />\n                      </HoverCard>\n                    </Stack>\n                  </Label>\n                }\n              >\n                <Input\n                  id=\"rulesSearchInput\"\n                  key={queryStringKey}\n                  prefix={searchIcon}\n                  ref={(e) => {\n                    ref(e);\n                    searchQueryRef.current = e;\n                  }}\n                  {...rest}\n                  placeholder=\"Search\"\n                  data-testid=\"search-query-input\"\n                />\n              </Field>\n              <input type=\"submit\" hidden />\n            </form>\n            <div>\n              <Label>View as</Label>\n              <RadioButtonGroup\n                options={ViewOptions}\n                value={String(queryParams['view'] ?? ViewOptions[0].value)}\n                onChange={handleViewChange}\n              />\n            </div>\n          </Stack>\n          {hasActiveFilters && (\n            <div>\n              <Button fullWidth={false} icon=\"times\" variant=\"secondary\" onClick={handleClearFiltersClick}>\n                Clear filters\n              </Button>\n            </div>\n          )}\n        </Stack>\n      </Stack>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      margin-bottom: ${theme.spacing(1)};\n    `,\n    dsPickerContainer: css`\n      width: 550px;\n      flex-grow: 0;\n      margin: 0;\n    `,\n    searchInput: css`\n      flex: 1;\n      margin: 0;\n    `,\n  };\n};\n\nfunction SearchQueryHelp() {\n  const styles = useStyles2(helpStyles);\n\n  return (\n    <div>\n      <div>Search syntax allows to query alert rules by the parameters defined below.</div>\n      <hr />\n      <div className={styles.grid}>\n        <div>Filter type</div>\n        <div>Expression</div>\n        <HelpRow title=\"Datasources\" expr=\"datasource:mimir datasource:prometheus\" />\n        <HelpRow title=\"Folder/Namespace\" expr=\"namespace:global\" />\n        <HelpRow title=\"Group\" expr=\"group:cpu-usage\" />\n        <HelpRow title=\"Rule\" expr='rule:\"cpu 80%\"' />\n        <HelpRow title=\"Labels\" expr=\"label:team=A label:cluster=a1\" />\n        <HelpRow title=\"State\" expr=\"state:firing|normal|pending\" />\n        <HelpRow title=\"Type\" expr=\"type:alerting|recording\" />\n        <HelpRow title=\"Health\" expr=\"health:ok|nodata|error\" />\n      </div>\n    </div>\n  );\n}\n\nfunction HelpRow({ title, expr }: { title: string; expr: string }) {\n  const styles = useStyles2(helpStyles);\n\n  return (\n    <>\n      <div>{title}</div>\n      <code className={styles.code}>{expr}</code>\n    </>\n  );\n}\n\nconst helpStyles = (theme: GrafanaTheme2) => ({\n  grid: css`\n    display: grid;\n    grid-template-columns: max-content auto;\n    gap: ${theme.spacing(1)};\n    align-items: center;\n  `,\n  code: css`\n    display: block;\n    text-align: center;\n  `,\n});\n\nexport default RulesFilter;\n","import { css } from '@emotion/css';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useAsyncFn, useInterval } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Button, useStyles2, withErrorBoundary } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { useDispatch } from 'app/types';\n\nimport { CombinedRuleNamespace } from '../../../types/unified-alerting';\n\nimport { trackRuleListNavigation } from './Analytics';\nimport { MoreActionsRuleButtons } from './MoreActionsRuleButtons';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { NoRulesSplash } from './components/rules/NoRulesCTA';\nimport { INSTANCES_DISPLAY_LIMIT } from './components/rules/RuleDetails';\nimport { RuleListErrors } from './components/rules/RuleListErrors';\nimport { RuleListGroupView } from './components/rules/RuleListGroupView';\nimport { RuleListStateView } from './components/rules/RuleListStateView';\nimport { RuleStats } from './components/rules/RuleStats';\nimport RulesFilter from './components/rules/RulesFilter';\nimport { useCombinedRuleNamespaces } from './hooks/useCombinedRuleNamespaces';\nimport { useFilteredRules, useRulesFilter } from './hooks/useFilteredRules';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAllPromAndRulerRulesAction } from './state/actions';\nimport { RULE_LIST_POLL_INTERVAL_MS } from './utils/constants';\nimport { getAllRulesSourceNames } from './utils/datasource';\n\nconst VIEWS = {\n  groups: RuleListGroupView,\n  state: RuleListStateView,\n};\n\n// make sure we ask for 1 more so we show the \"show x more\" button\nconst LIMIT_ALERTS = INSTANCES_DISPLAY_LIMIT + 1;\n\nconst RuleList = withErrorBoundary(\n  () => {\n    const dispatch = useDispatch();\n    const styles = useStyles2(getStyles);\n    const rulesDataSourceNames = useMemo(getAllRulesSourceNames, []);\n    const [expandAll, setExpandAll] = useState(false);\n\n    const onFilterCleared = useCallback(() => setExpandAll(false), []);\n\n    const [queryParams] = useQueryParams();\n    const { filterState, hasActiveFilters } = useRulesFilter();\n\n    const view = VIEWS[queryParams['view'] as keyof typeof VIEWS]\n      ? (queryParams['view'] as keyof typeof VIEWS)\n      : 'groups';\n\n    const ViewComponent = VIEWS[view];\n\n    const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n    const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n\n    const loading = rulesDataSourceNames.some(\n      (name) => promRuleRequests[name]?.loading || rulerRuleRequests[name]?.loading\n    );\n\n    const promRequests = Object.entries(promRuleRequests);\n    const allPromLoaded = promRequests.every(\n      ([_, state]) => state.dispatched && (state?.result !== undefined || state?.error !== undefined)\n    );\n    const allPromEmpty = promRequests.every(([_, state]) => state.dispatched && state?.result?.length === 0);\n\n    const limitAlerts = hasActiveFilters ? undefined : LIMIT_ALERTS;\n    // Trigger data refresh only when the RULE_LIST_POLL_INTERVAL_MS elapsed since the previous load FINISHED\n    const [_, fetchRules] = useAsyncFn(async () => {\n      if (!loading) {\n        await dispatch(fetchAllPromAndRulerRulesAction(false, { limitAlerts }));\n      }\n    }, [loading, limitAlerts, dispatch]);\n\n    useEffect(() => {\n      trackRuleListNavigation().catch(() => {});\n    }, []);\n\n    // fetch rules, then poll every RULE_LIST_POLL_INTERVAL_MS\n    useEffect(() => {\n      dispatch(fetchAllPromAndRulerRulesAction(false, { limitAlerts }));\n    }, [dispatch, limitAlerts]);\n    useInterval(fetchRules, RULE_LIST_POLL_INTERVAL_MS);\n\n    // Show splash only when we loaded all of the data sources and none of them has alerts\n    const hasNoAlertRulesCreatedYet = allPromLoaded && allPromEmpty && promRequests.length > 0;\n\n    const combinedNamespaces: CombinedRuleNamespace[] = useCombinedRuleNamespaces();\n    const filteredNamespaces = useFilteredRules(combinedNamespaces, filterState);\n\n    return (\n      // We don't want to show the Loading... indicator for the whole page.\n      // We show separate indicators for Grafana-managed and Cloud rules\n      <AlertingPageWrapper pageId=\"alert-list\" isLoading={false}>\n        <RuleListErrors />\n        <RulesFilter onFilterCleared={onFilterCleared} />\n        {!hasNoAlertRulesCreatedYet && (\n          <>\n            <div className={styles.break} />\n            <div className={styles.buttonsContainer}>\n              <div className={styles.statsContainer}>\n                {view === 'groups' && hasActiveFilters && (\n                  <Button\n                    className={styles.expandAllButton}\n                    icon={expandAll ? 'angle-double-up' : 'angle-double-down'}\n                    variant=\"secondary\"\n                    onClick={() => setExpandAll(!expandAll)}\n                  >\n                    {expandAll ? 'Collapse all' : 'Expand all'}\n                  </Button>\n                )}\n                <RuleStats namespaces={filteredNamespaces} />\n              </div>\n              <Stack direction=\"row\" gap={0.5}>\n                <MoreActionsRuleButtons />\n              </Stack>\n            </div>\n          </>\n        )}\n        {hasNoAlertRulesCreatedYet && <NoRulesSplash />}\n        {!hasNoAlertRulesCreatedYet && <ViewComponent expandAll={expandAll} namespaces={filteredNamespaces} />}\n      </AlertingPageWrapper>\n    );\n  },\n  { style: 'page' }\n);\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  break: css`\n    width: 100%;\n    height: 0;\n    margin-bottom: ${theme.spacing(2)};\n    border-bottom: solid 1px ${theme.colors.border.medium};\n  `,\n  buttonsContainer: css`\n    margin-bottom: ${theme.spacing(2)};\n    display: flex;\n    justify-content: space-between;\n  `,\n  statsContainer: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  `,\n  expandAllButton: css`\n    margin-right: ${theme.spacing(1)};\n  `,\n});\n\nexport default RuleList;\n","import { chain, filter } from 'lodash';\nimport React, { PropsWithChildren } from 'react';\n\nimport {\n  Abilities,\n  Action,\n  AlertmanagerAction,\n  AlertSourceAction,\n  useAlertSourceAbilities,\n  useAllAlertmanagerAbilities,\n} from '../hooks/useAbilities';\n\ninterface AuthorizeProps extends PropsWithChildren {\n  actions: AlertmanagerAction[] | AlertSourceAction[];\n}\n\nexport const Authorize = ({ actions, children }: AuthorizeProps) => {\n  const alertmanagerActions = filter(actions, isAlertmanagerAction) as AlertmanagerAction[];\n  const alertSourceActions = filter(actions, isAlertSourceAction) as AlertSourceAction[];\n\n  if (alertmanagerActions.length) {\n    return <AuthorizeAlertmanager actions={alertmanagerActions}>{children}</AuthorizeAlertmanager>;\n  }\n\n  if (alertSourceActions.length) {\n    return <AuthorizeAlertsource actions={alertSourceActions}>{children}</AuthorizeAlertsource>;\n  }\n\n  return null;\n};\n\ninterface ActionsProps<T extends Action> extends PropsWithChildren {\n  actions: T[];\n}\n\nconst AuthorizeAlertmanager = ({ actions, children }: ActionsProps<AlertmanagerAction>) => {\n  const alertmanagerAbilties = useAllAlertmanagerAbilities();\n  const allowed = actionsAllowed(alertmanagerAbilties, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\nconst AuthorizeAlertsource = ({ actions, children }: ActionsProps<AlertSourceAction>) => {\n  const alertSourceAbilities = useAlertSourceAbilities();\n  const allowed = actionsAllowed(alertSourceAbilities, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\n// check if some action is allowed from the abilities\nfunction actionsAllowed<T extends Action>(abilities: Abilities<T>, actions: T[]) {\n  return chain(abilities)\n    .pick(actions)\n    .values()\n    .value()\n    .some(([_supported, allowed]) => allowed === true);\n}\n\nfunction isAlertmanagerAction(action: AlertmanagerAction) {\n  return Object.values(AlertmanagerAction).includes(action);\n}\n\nfunction isAlertSourceAction(action: AlertSourceAction) {\n  return Object.values(AlertSourceAction).includes(action);\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Icon, Text, Toggletip, useStyles2 } from '@grafana/ui';\n\ninterface NeedHelpInfoProps {\n  contentText: string | JSX.Element;\n  externalLink?: string;\n  linkText?: string;\n  title: string;\n}\nexport function NeedHelpInfo({ contentText, externalLink, linkText, title }: NeedHelpInfoProps) {\n  const styles = useStyles2(getStyles);\n  return (\n    <Toggletip\n      content={<div className={styles.mutedText}>{contentText}</div>}\n      title={\n        <Stack gap={1} direction=\"row\">\n          <Icon name=\"question-circle\" />\n          {title}\n        </Stack>\n      }\n      footer={\n        externalLink ? (\n          <a href={externalLink} target=\"_blank\" rel=\"noreferrer\">\n            <Stack direction=\"row\" gap={0.5} alignItems=\"center\">\n              <Text color=\"link\">\n                {linkText} <Icon size=\"sm\" name=\"external-link-alt\" />\n              </Text>\n            </Stack>\n          </a>\n        ) : undefined\n      }\n      closeButton={true}\n      placement=\"bottom-start\"\n    >\n      <div className={styles.helpInfo}>\n        <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n          <Icon name=\"question-circle\" size=\"sm\" />\n          <Text variant=\"bodySmall\" color=\"primary\">\n            Need help?\n          </Text>\n        </Stack>\n      </div>\n    </Toggletip>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  mutedText: css`\n    color: ${theme.colors.text.secondary};\n    font-size: ${theme.typography.size.sm};\n  `,\n  helpInfo: css`\n    cursor: pointer;\n    text-decoration: underline;\n  `,\n});\n","import { css, cx } from '@emotion/css';\nimport React, { ReactElement } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { FieldSet, Text, useStyles2 } from '@grafana/ui';\n\nexport interface RuleEditorSectionProps {\n  title: string;\n  stepNo: number;\n  description?: string | ReactElement;\n  fullWidth?: boolean;\n}\n\nexport const RuleEditorSection = ({\n  title,\n  stepNo,\n  children,\n  fullWidth = false,\n  description,\n}: React.PropsWithChildren<RuleEditorSectionProps>) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.parent}>\n      <FieldSet\n        className={cx(fullWidth && styles.fullWidth)}\n        label={\n          <Text variant=\"h3\">\n            {stepNo}. {title}\n          </Text>\n        }\n      >\n        <Stack direction=\"column\">\n          {description && <div className={styles.description}>{description}</div>}\n          {children}\n        </Stack>\n      </FieldSet>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  parent: css`\n    display: flex;\n    flex-direction: row;\n    max-width: ${theme.breakpoints.values.xl}px;\n    border: solid 1px ${theme.colors.border.weak};\n    border-radius: ${theme.shape.radius.default};\n    padding: ${theme.spacing(2)} ${theme.spacing(3)};\n  `,\n  description: css`\n    margin-top: -${theme.spacing(2)};\n  `,\n  fullWidth: css`\n    width: 100%;\n  `,\n});\n","import React from 'react';\n\nimport { IconName, Tooltip, LinkButton, Button } from '@grafana/ui';\nimport { PopoverContent, TooltipPlacement } from '@grafana/ui/src/components/Tooltip';\n\ninterface Props {\n  tooltip: PopoverContent;\n  icon: IconName;\n  className?: string;\n  tooltipPlacement?: TooltipPlacement;\n  to?: string;\n  target?: string;\n  onClick?: () => void;\n  'data-testid'?: string;\n}\n\nexport const ActionIcon = ({\n  tooltip,\n  icon,\n  to,\n  target,\n  onClick,\n  className,\n  tooltipPlacement = 'top',\n  ...rest\n}: Props) => {\n  const ariaLabel = typeof tooltip === 'string' ? tooltip : undefined;\n\n  return (\n    <Tooltip content={tooltip} placement={tooltipPlacement}>\n      {to ? (\n        <LinkButton\n          variant=\"secondary\"\n          fill=\"text\"\n          icon={icon}\n          href={to}\n          size=\"sm\"\n          target={target}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      ) : (\n        <Button\n          className={className}\n          variant=\"secondary\"\n          fill=\"text\"\n          size=\"sm\"\n          icon={icon}\n          type=\"button\"\n          onClick={onClick}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      )}\n    </Tooltip>\n  );\n};\n","import { useMemo } from 'react';\n\nimport { contextSrv as ctx } from 'app/core/services/context_srv';\nimport { AccessControlAction } from 'app/types';\n\nimport { useAlertmanager } from '../state/AlertmanagerContext';\nimport { getInstancesPermissions, getNotificationsPermissions } from '../utils/access-control';\n\n/**\n * These hooks will determine if\n *  1. the action is supported in the current alertmanager or data source context\n *  2. user is allowed to perform actions based on their set of permissions / assigned role\n */\nexport enum AlertmanagerAction {\n  // configuration\n  ViewExternalConfiguration = 'view-external-configuration',\n  UpdateExternalConfiguration = 'update-external-configuration',\n\n  // contact points\n  CreateContactPoint = 'create-contact-point',\n  ViewContactPoint = 'view-contact-point',\n  UpdateContactPoint = 'edit-contact-points',\n  DeleteContactPoint = 'delete-contact-point',\n  ExportContactPoint = 'export-contact-point',\n\n  // notification templates\n  CreateNotificationTemplate = 'create-notification-template',\n  ViewNotificationTemplate = 'view-notification-template',\n  UpdateNotificationTemplate = 'edit-notification-template',\n  DeleteNotificationTemplate = 'delete-notification-template',\n  DecryptSecrets = 'decrypt-secrets',\n\n  // notification policies\n  CreateNotificationPolicy = 'create-notification-policy',\n  ViewNotificationPolicyTree = 'view-notification-policy-tree',\n  UpdateNotificationPolicyTree = 'update-notification-policy-tree',\n  DeleteNotificationPolicy = 'delete-notification-policy',\n  ExportNotificationPolicies = 'export-notification-policies',\n\n  // silences – these cannot be deleted only \"expired\" (updated)\n  CreateSilence = 'create-silence',\n  ViewSilence = 'view-silence',\n  UpdateSilence = 'update-silence',\n\n  // mute timings\n  ViewMuteTiming = 'view-mute-timing',\n  CreateMuteTiming = 'create-mute-timing',\n  UpdateMuteTiming = 'update-mute-timing',\n  DeleteMuteTiming = 'delete-mute-timing',\n}\n\nexport enum AlertSourceAction {\n  // internal (Grafana managed)\n  CreateAlertRule = 'create-alert-rule',\n  ViewAlertRule = 'view-alert-rule',\n  UpdateAlertRule = 'update-alert-rule',\n  DeleteAlertRule = 'delete-alert-rule',\n  // external (any compatible alerting data source)\n  CreateExternalAlertRule = 'create-external-alert-rule',\n  ViewExternalAlertRule = 'view-external-alert-rule',\n  UpdateExternalAlertRule = 'update-external-alert-rule',\n  DeleteExternalAlertRule = 'delete-external-alert-rule',\n}\n\nconst AlwaysSupported = true; // this just makes it easier to understand the code\nexport type Action = AlertmanagerAction | AlertSourceAction;\n\nexport type Ability = [actionSupported: boolean, actionAllowed: boolean];\nexport type Abilities<T extends Action> = Record<T, Ability>;\n\nexport function useAlertSourceAbilities(): Abilities<AlertSourceAction> {\n  // TODO add the \"supported\" booleans here, we currently only do authorization\n\n  const abilities: Abilities<AlertSourceAction> = {\n    // -- Grafana managed alert rules --\n    [AlertSourceAction.CreateAlertRule]: [AlwaysSupported, ctx.hasPermission(AccessControlAction.AlertingRuleCreate)],\n    [AlertSourceAction.ViewAlertRule]: [AlwaysSupported, ctx.hasPermission(AccessControlAction.AlertingRuleRead)],\n    [AlertSourceAction.UpdateAlertRule]: [AlwaysSupported, ctx.hasPermission(AccessControlAction.AlertingRuleUpdate)],\n    [AlertSourceAction.DeleteAlertRule]: [AlwaysSupported, ctx.hasPermission(AccessControlAction.AlertingRuleDelete)],\n    // -- External alert rules (Mimir / Loki / etc) --\n    // for these we only have \"read\" and \"write\" permissions\n    [AlertSourceAction.CreateExternalAlertRule]: [\n      AlwaysSupported,\n      ctx.hasPermission(AccessControlAction.AlertingRuleExternalWrite),\n    ],\n    [AlertSourceAction.ViewExternalAlertRule]: [\n      AlwaysSupported,\n      ctx.hasPermission(AccessControlAction.AlertingRuleExternalRead),\n    ],\n    [AlertSourceAction.UpdateExternalAlertRule]: [\n      AlwaysSupported,\n      ctx.hasPermission(AccessControlAction.AlertingRuleExternalWrite),\n    ],\n    [AlertSourceAction.DeleteExternalAlertRule]: [\n      AlwaysSupported,\n      ctx.hasPermission(AccessControlAction.AlertingRuleExternalWrite),\n    ],\n  };\n\n  return abilities;\n}\n\nexport function useAllAlertmanagerAbilities(): Abilities<AlertmanagerAction> {\n  const {\n    selectedAlertmanager,\n    hasConfigurationAPI,\n    isGrafanaAlertmanager: isGrafanaFlavoredAlertmanager,\n  } = useAlertmanager();\n\n  // These are used for interacting with Alertmanager resources where we apply alert.notifications:<name> permissions.\n  // There are different permissions based on wether the built-in alertmanager is selected (grafana) or an external one.\n  const notificationsPermissions = getNotificationsPermissions(selectedAlertmanager!);\n  const instancePermissions = getInstancesPermissions(selectedAlertmanager!);\n\n  // list out all of the abilities, and if the user has permissions to perform them\n  const abilities: Abilities<AlertmanagerAction> = {\n    // -- configuration --\n    [AlertmanagerAction.ViewExternalConfiguration]: [\n      AlwaysSupported,\n      ctx.hasPermission(AccessControlAction.AlertingNotificationsExternalRead),\n    ],\n    [AlertmanagerAction.UpdateExternalConfiguration]: [\n      hasConfigurationAPI,\n      ctx.hasPermission(AccessControlAction.AlertingNotificationsExternalWrite),\n    ],\n    // -- contact points --\n    [AlertmanagerAction.CreateContactPoint]: [hasConfigurationAPI, ctx.hasPermission(notificationsPermissions.create)],\n    [AlertmanagerAction.ViewContactPoint]: [AlwaysSupported, ctx.hasPermission(notificationsPermissions.read)],\n    [AlertmanagerAction.UpdateContactPoint]: [hasConfigurationAPI, ctx.hasPermission(notificationsPermissions.update)],\n    [AlertmanagerAction.DeleteContactPoint]: [hasConfigurationAPI, ctx.hasPermission(notificationsPermissions.delete)],\n    // only Grafana flavored alertmanager supports exporting\n    [AlertmanagerAction.ExportContactPoint]: [\n      isGrafanaFlavoredAlertmanager,\n      ctx.hasPermission(notificationsPermissions.read),\n    ],\n    // -- notification templates --\n    [AlertmanagerAction.CreateNotificationTemplate]: [\n      hasConfigurationAPI,\n      ctx.hasPermission(notificationsPermissions.create),\n    ],\n    [AlertmanagerAction.ViewNotificationTemplate]: [AlwaysSupported, ctx.hasPermission(notificationsPermissions.read)],\n    [AlertmanagerAction.UpdateNotificationTemplate]: [\n      hasConfigurationAPI,\n      ctx.hasPermission(notificationsPermissions.update),\n    ],\n    [AlertmanagerAction.DeleteNotificationTemplate]: [\n      hasConfigurationAPI,\n      ctx.hasPermission(notificationsPermissions.delete),\n    ],\n    // -- notification policies --\n    [AlertmanagerAction.CreateNotificationPolicy]: [\n      hasConfigurationAPI,\n      ctx.hasPermission(notificationsPermissions.create),\n    ],\n    [AlertmanagerAction.ViewNotificationPolicyTree]: [\n      AlwaysSupported,\n      ctx.hasPermission(notificationsPermissions.read),\n    ],\n    [AlertmanagerAction.UpdateNotificationPolicyTree]: [\n      hasConfigurationAPI,\n      ctx.hasPermission(notificationsPermissions.update),\n    ],\n    [AlertmanagerAction.DeleteNotificationPolicy]: [\n      hasConfigurationAPI,\n      ctx.hasPermission(notificationsPermissions.delete),\n    ],\n    [AlertmanagerAction.ExportNotificationPolicies]: [\n      isGrafanaFlavoredAlertmanager,\n      ctx.hasPermission(notificationsPermissions.read),\n    ],\n    [AlertmanagerAction.DecryptSecrets]: [\n      isGrafanaFlavoredAlertmanager,\n      ctx.hasPermission(notificationsPermissions.provisioning.readSecrets),\n    ],\n    // -- silences --\n    [AlertmanagerAction.CreateSilence]: [hasConfigurationAPI, ctx.hasPermission(instancePermissions.create)],\n    [AlertmanagerAction.ViewSilence]: [AlwaysSupported, ctx.hasPermission(instancePermissions.read)],\n    [AlertmanagerAction.UpdateSilence]: [hasConfigurationAPI, ctx.hasPermission(instancePermissions.update)],\n    // -- mute timtings --\n    [AlertmanagerAction.CreateMuteTiming]: [hasConfigurationAPI, ctx.hasPermission(notificationsPermissions.create)],\n    [AlertmanagerAction.ViewMuteTiming]: [AlwaysSupported, ctx.hasPermission(notificationsPermissions.read)],\n    [AlertmanagerAction.UpdateMuteTiming]: [hasConfigurationAPI, ctx.hasPermission(notificationsPermissions.update)],\n    [AlertmanagerAction.DeleteMuteTiming]: [hasConfigurationAPI, ctx.hasPermission(notificationsPermissions.delete)],\n  };\n\n  return abilities;\n}\n\nexport function useAlertmanagerAbility(action: AlertmanagerAction): Ability {\n  const abilities = useAllAlertmanagerAbilities();\n\n  return useMemo(() => {\n    return abilities[action];\n  }, [abilities, action]);\n}\n\nexport function useAlertmanagerAbilities(actions: AlertmanagerAction[]): Ability[] {\n  const abilities = useAllAlertmanagerAbilities();\n\n  return useMemo(() => {\n    return actions.map((action) => abilities[action]);\n  }, [abilities, actions]);\n}\n\nexport function useAlertSourceAbility(action: AlertSourceAction): Ability {\n  const abilities = useAlertSourceAbilities();\n  return useMemo(() => abilities[action], [abilities, action]);\n}\n","import { useEffect, useRef } from 'react';\nvar useInterval = function (callback, delay) {\n    var savedCallback = useRef(function () { });\n    useEffect(function () {\n        savedCallback.current = callback;\n    });\n    useEffect(function () {\n        if (delay !== null) {\n            var interval_1 = setInterval(function () { return savedCallback.current(); }, delay || 0);\n            return function () { return clearInterval(interval_1); };\n        }\n        return undefined;\n    }, [delay]);\n};\nexport default useInterval;\n"],"names":["useCleanup","cleanupAction","dispatch","selectorRef","AlertHowToModal","onDismiss","Modal","rule","search","onTogglePause","ruleUrl","renderText","text","Card","Icon","Button","LOCAL_STORAGE_KEY","DeprecationNotice","Alert","getSearchQuery","state","getAlertRuleItems","regex","item","getNotificationChannel","channelId","mapStateToProps","mapDispatchToProps","connector","AlertRuleListUnconnected","option","value","prevProps","alertRules","isLoading","Page","FilterInput","Select","config","getAlertRulesAsync","options","rules","togglePauseAlertRule","id","stateFilter","createNotificationChannel","data","error","updateNotificationChannel","testNotificationChannel","getState","channel","loadNotificationTypes","notificationTypes","o1","o2","loadNotificationChannel","notificationChannel","GrafanaRulesExporter","onClose","activeTab","setActiveTab","GrafanaExportDrawer","GrafanaRulesExportPreview","exportFormat","rulesDefinition","isFetching","alertRuleApi","downloadFileName","LoadingPlaceholder","FileExportPreview","MoreActionsRuleButtons","_","viewRuleAllowed","createRuleSupported","createRuleAllowed","createCloudRuleSupported","createCloudRuleAllowed","canCreateGrafanaRules","canCreateCloudRules","location","showExportDrawer","toggleShowExportDrawer","useToggle","newMenu","Menu","MenuItem","url","Dropdown","NoRulesSplash","styles","getStyles","Stack","EmptyListCTA","CallToActionCard","theme","RuleListErrors","expanded","setExpanded","closed","setClosed","useLocalStorage","dataSourceConfigRequests","useUnifiedAlertingSelector","promRuleRequests","rulerRuleRequests","errors","dataSourceConfigErrors","promRequestErrors","rulerRequestErrors","requests","result","dataSource","grafanaPromError","grafanaRulerError","ErrorSummaryButton","idx","count","onClick","Tooltip","GrafanaRuleFolderExporter","folder","GrafanaRuleFolderExportPreview","exportFolderDefinition","GrafanaRuleGroupExporter","folderUid","groupName","GrafanaRuleGroupExportPreview","ruleGroupTextDefinition","ReorderCloudGroupModal","props","group","namespace","pending","setPending","rulesList","setRulesList","onDragEnd","newOrderedRules","reorder","rulesSourceName","rulerRules","rulesWithUID","ModalHeader","provided","_snapshot","rubric","ListItem","droppableProvided","index","isClone","isDragging","AlertStateTag","Badge","startIndex","endIndex","removed","RulesGroup","expandAll","viewMode","rulesSource","isEditingGroup","setIsEditingGroup","isDeletingGroup","setIsDeletingGroup","isReorderingGroup","setIsReorderingGroup","isExporting","setIsExporting","isCollapsed","setIsCollapsed","canEditRules","hasRuler","rulerRulesLoaded","useHasRuler","rulerRule","folderUID","useFolder","isDeleting","isFederated","isProvisioned","isListView","isGroupView","deleteGroup","actionIcons","Spinner","baseUrl","ActionIcon","RuleLocation","closeEditModal","saved","CollapseToggle","RulesTable","ConfirmModal","useCombinedGroupNamespace","namespaces","ns","g","CloudRules","dsConfigs","promRules","rulesDataSources","groupsWithNamespaces","dataSourcesLoading","ds","hasSomeResults","hasDataSourcesConfigured","hasDataSourcesLoading","hasNamespaces","numberOfPages","onPageChange","page","pageItems","usePagination","Pagination","GrafanaRules","queryParams","useQueryParams","prom","ruler","loading","hasResult","wantsListView","namespacesFormat","RuleListGroupView","grafanaNamespaces","cloudNamespaces","sorted","a","b","Authorize","RuleListStateSection","defaultCollapsed","collapsed","setCollapsed","RuleListStateView","filters","groupedRules","useRulesFilter","updateQueryParams","useURLSearchParams","searchQuery","filterState","hasActiveFilters","filter","updateFilters","newFilter","newSearchQuery","setSearchQuery","legacyFilters","legacyFilter","draft","legacyLabelsAsStrings","name","operator","useFilteredRules","filteredRules","filterRules","r","ufuzzy","filteredNamespaces","dataSourceFilter","namespaceFilter","namespaceHaystack","idxs","info","order","reduceNamespaces","namespaceAcc","groupNameFilter","filteredGroups","groupsHaystack","reduceGroups","ruleNameQuery","groupAcc","rulesHaystack","doesNotQueryDs","isQueryingDataSource","ruleHealth","matchers","looseParseMatcher","doRuleLabelsMatchQuery","doAlertsContainMatchingLabels","alert","matcherQuery","query","MultipleDataSourcePicker","dataSourceSrv","setState","onChange","items","actionMeta","selectedItem","dataSourceName","action","dsSettings","getCurrentValue","current","hideTextValue","noDefault","uid","getDataSourceOptions","alerting","tracing","metrics","mixed","dashboard","variables","annotations","pluginId","type","logs","dataSources","alertManagingDs","nonAlertManagingDs","autoFocus","onBlur","onClear","openMenuOnFocus","placeholder","width","inputId","disabled","isClearable","selectors","o","PluginSignatureBadge","ViewOptions","RuleTypeOptions","RuleHealthOptions","RuleStateOptions","key","RulesFilter","onFilterCleared","setQueryParams","filterKey","setFilterKey","dataSourceKey","queryStringKey","searchQueryRef","handleSubmit","register","setValue","ref","rest","handleDataSourceChange","dataSourceValue","dataSourceNames","clearDataSource","handleAlertStateChange","handleViewChange","view","handleRuleTypeChange","ruleType","handleRuleHealthChange","handleClearFiltersClick","searchIcon","Field","Label","RadioButtonGroup","HoverCard","SearchQueryHelp","Input","e","helpStyles","HelpRow","title","expr","VIEWS","LIMIT_ALERTS","RuleList","rulesDataSourceNames","setExpandAll","ViewComponent","promRequests","allPromLoaded","allPromEmpty","limitAlerts","fetchRules","useAsyncFn","useInterval","hasNoAlertRulesCreatedYet","combinedNamespaces","useCombinedRuleNamespaces","AlertingPageWrapper","RuleStats","actions","children","alertmanagerActions","isAlertmanagerAction","alertSourceActions","isAlertSourceAction","AuthorizeAlertmanager","AuthorizeAlertsource","alertmanagerAbilties","actionsAllowed","alertSourceAbilities","abilities","_supported","allowed","NeedHelpInfo","contentText","externalLink","linkText","RuleEditorSection","stepNo","fullWidth","description","tooltip","icon","to","target","className","tooltipPlacement","ariaLabel","AlertmanagerAction","AlertSourceAction","AlwaysSupported","useAlertSourceAbilities","useAllAlertmanagerAbilities","selectedAlertmanager","hasConfigurationAPI","isGrafanaFlavoredAlertmanager","notificationsPermissions","instancePermissions","useAlertmanagerAbility","useAlertmanagerAbilities","useAlertSourceAbility","callback","delay","savedCallback","interval_1"],"sourceRoot":""}