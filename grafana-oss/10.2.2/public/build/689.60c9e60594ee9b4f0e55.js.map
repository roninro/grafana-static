{"version":3,"file":"689.60c9e60594ee9b4f0e55.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/Provisioning.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/alert-details/useRuleViewerPageTitle.tsx","webpack://grafana/./public/app/features/alerting/unified/components/AlertStateDot.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-viewer/tabs/History.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-viewer/tabs/Instances.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-viewer/tabs/Query.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-viewer/tabs/Routing.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-viewer/v2/RuleViewer.v2.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useCombinedRule.ts"],"sourcesContent":["import React from 'react';\n\nimport { Alert, Badge } from '@grafana/ui';\n\nexport enum ProvisionedResource {\n  ContactPoint = 'contact point',\n  Template = 'template',\n  MuteTiming = 'mute timing',\n  AlertRule = 'alert rule',\n  RootNotificationPolicy = 'root notification policy',\n}\n\ninterface ProvisioningAlertProps {\n  resource: ProvisionedResource;\n}\n\nexport const ProvisioningAlert = ({ resource }: ProvisioningAlertProps) => {\n  return (\n    <Alert title={`This ${resource} cannot be edited through the UI`} severity=\"info\">\n      This {resource} has been provisioned, that means it was created by config. Please contact your server admin to\n      update this {resource}.\n    </Alert>\n  );\n};\n\nexport const ProvisioningBadge = () => {\n  return <Badge text={'Provisioned'} color={'purple'} />;\n};\n","import { useLayoutEffect } from 'react';\n\nimport { Branding } from 'app/core/components/Branding/Branding';\nimport { useGrafana } from 'app/core/context/GrafanaContext';\nimport { CombinedRule } from 'app/types/unified-alerting';\n\n/**\n * We're definitely doing something odd here, and it all boils down to\n * 1. we have a page layout that is different from what <Page /> forces us to do with pageNav\n * 2. because of 1. we don't get to update the pageNav that way and circumvents\n *     the `usePageTitle` hook in the <Page /> component\n *\n * Therefore we are manually setting the breadcrumb and the page title.\n */\nexport function useRuleViewerPageTitle(rule?: CombinedRule) {\n  const { chrome } = useGrafana();\n\n  useLayoutEffect(() => {\n    if (rule?.name) {\n      chrome.update({ pageNav: { text: rule.name } });\n    }\n  }, [chrome, rule]);\n\n  if (!rule) {\n    return;\n  }\n\n  document.title = `${rule.name} - Alerting - ${Branding.AppTitle}`;\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { ComponentSize, Tooltip, useStyles2 } from '@grafana/ui';\nimport { GrafanaAlertState } from 'app/types/unified-alerting-dto';\n\nconst AlertStateDot = (props: DotStylesProps) => {\n  const styles = useStyles2(getDotStyles, props);\n\n  return (\n    <Tooltip content={String(props.state)} placement=\"top\">\n      <div className={styles.dot} />\n    </Tooltip>\n  );\n};\n\ninterface DotStylesProps {\n  state?: GrafanaAlertState;\n  size?: ComponentSize; // TODO support this\n}\n\nconst getDotStyles = (theme: GrafanaTheme2, props: DotStylesProps) => {\n  const size = theme.spacing(1.25);\n\n  return {\n    dot: css`\n      width: ${size};\n      height: ${size};\n\n      border-radius: 100%;\n\n      background-color: ${theme.colors.secondary.main};\n      outline: solid calc(${size} / 2.5) ${theme.colors.secondary.transparent};\n\n      ${props.state === GrafanaAlertState.Normal &&\n      css`\n        background-color: ${theme.colors.success.main};\n        outline-color: ${theme.colors.success.transparent};\n      `}\n\n      ${props.state === GrafanaAlertState.Pending &&\n      css`\n        background-color: ${theme.colors.warning.main};\n        outline-color: ${theme.colors.warning.transparent};\n      `}\n\n      ${props.state === GrafanaAlertState.Alerting &&\n      css`\n        background-color: ${theme.colors.error.main};\n        outline-color: ${theme.colors.error.transparent};\n      `}\n    `,\n  };\n};\n\nexport { AlertStateDot };\n","import React from 'react';\n\nconst History = () => <>History</>;\n\nexport { History };\n","import React from 'react';\n\nconst InstancesList = () => <>Instances</>;\n\nexport { InstancesList };\n","import React from 'react';\n\nconst QueryResults = () => <>Query results</>;\n\nexport { QueryResults };\n","import React from 'react';\n\nconst Routing = () => <>Routing</>;\n\nexport { Routing };\n","import React, { useMemo, useState } from 'react';\n\nimport { Stack } from '@grafana/experimental';\nimport { Alert, Button, Icon, LoadingPlaceholder, Tab, TabContent, TabsBar, Text } from '@grafana/ui';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { GrafanaAlertState } from 'app/types/unified-alerting-dto';\n\nimport { useRuleViewerPageTitle } from '../../../hooks/alert-details/useRuleViewerPageTitle';\nimport { useCombinedRule } from '../../../hooks/useCombinedRule';\nimport * as ruleId from '../../../utils/rule-id';\nimport { isAlertingRule, isFederatedRuleGroup, isGrafanaRulerRule } from '../../../utils/rules';\nimport { AlertStateDot } from '../../AlertStateDot';\nimport { ProvisionedResource, ProvisioningAlert } from '../../Provisioning';\nimport { Spacer } from '../../Spacer';\nimport { History } from '../tabs/History';\nimport { InstancesList } from '../tabs/Instances';\nimport { QueryResults } from '../tabs/Query';\nimport { Routing } from '../tabs/Routing';\n\ntype RuleViewerProps = GrafanaRouteComponentProps<{\n  id: string;\n  sourceName: string;\n}>;\n\nenum Tabs {\n  Instances,\n  Query,\n  Routing,\n  History,\n}\n\n// @TODO\n// hook up tabs to query params or path segment\n// figure out why we needed <AlertingPageWrapper>\n// add provisioning and federation stuff back in\nconst RuleViewer = ({ match }: RuleViewerProps) => {\n  const { id } = match.params;\n  const [activeTab, setActiveTab] = useState<Tabs>(Tabs.Instances);\n\n  const identifier = useMemo(() => {\n    if (!id) {\n      throw new Error('Rule ID is required');\n    }\n\n    return ruleId.parse(id, true);\n  }, [id]);\n\n  const { loading, error, result: rule } = useCombinedRule({ ruleIdentifier: identifier });\n\n  // we're setting the document title and the breadcrumb manually\n  useRuleViewerPageTitle(rule);\n\n  if (loading) {\n    return <LoadingPlaceholder text={'Loading...'} />;\n  }\n\n  if (error) {\n    return String(error);\n  }\n\n  if (rule) {\n    const summary = rule.annotations['summary'];\n    const promRule = rule.promRule;\n\n    const isAlertType = isAlertingRule(promRule);\n    const numberOfInstance = isAlertType ? promRule.alerts?.length : undefined;\n\n    const isFederatedRule = isFederatedRuleGroup(rule.group);\n    const isProvisioned = isGrafanaRulerRule(rule.rulerRule) && Boolean(rule.rulerRule.grafana_alert.provenance);\n\n    return (\n      <>\n        <Stack direction=\"column\" gap={3}>\n          {/* breadcrumb and actions */}\n          <Stack>\n            <BreadCrumb folder={rule.namespace.name} evaluationGroup={rule.group.name} />\n            <Spacer />\n            <Stack gap={1}>\n              <Button variant=\"secondary\" icon=\"pen\">\n                Edit\n              </Button>\n              <Button variant=\"secondary\">\n                <Stack alignItems=\"center\" gap={1}>\n                  More <Icon name=\"angle-down\" />\n                </Stack>\n              </Button>\n            </Stack>\n          </Stack>\n          {/* header */}\n          <Stack direction=\"column\" gap={1}>\n            <Stack alignItems=\"center\">\n              <Title name={rule.name} state={GrafanaAlertState.Alerting} />\n            </Stack>\n            {summary && <Summary text={summary} />}\n          </Stack>\n          {/* alerts and notifications and stuff */}\n          {isFederatedRule && (\n            <Alert severity=\"info\" title=\"This rule is part of a federated rule group.\">\n              <Stack direction=\"column\">\n                Federated rule groups are currently an experimental feature.\n                <Button fill=\"text\" icon=\"book\">\n                  <a href=\"https://grafana.com/docs/metrics-enterprise/latest/tenant-management/tenant-federation/#cross-tenant-alerting-and-recording-rule-federation\">\n                    Read documentation\n                  </a>\n                </Button>\n              </Stack>\n            </Alert>\n          )}\n          {isProvisioned && <ProvisioningAlert resource={ProvisionedResource.AlertRule} />}\n          {/* tabs and tab content */}\n          <TabsBar>\n            <Tab label=\"Instances\" active counter={numberOfInstance} onChangeTab={() => setActiveTab(Tabs.Instances)} />\n            <Tab label=\"Query\" onChangeTab={() => setActiveTab(Tabs.Query)} />\n            <Tab label=\"Routing\" onChangeTab={() => setActiveTab(Tabs.Routing)} />\n            <Tab label=\"History\" onChangeTab={() => setActiveTab(Tabs.History)} />\n          </TabsBar>\n          <TabContent>\n            {activeTab === Tabs.Instances && <InstancesList />}\n            {activeTab === Tabs.Query && <QueryResults />}\n            {activeTab === Tabs.Routing && <Routing />}\n            {activeTab === Tabs.History && <History />}\n          </TabContent>\n        </Stack>\n      </>\n    );\n  }\n\n  return null;\n};\n\ninterface BreadcrumbProps {\n  folder: string;\n  evaluationGroup: string;\n}\n\nconst BreadCrumb = ({ folder, evaluationGroup }: BreadcrumbProps) => (\n  <Stack alignItems=\"center\" gap={0.5}>\n    <Text color=\"secondary\">\n      <Icon name=\"folder\" />\n    </Text>\n    <Text variant=\"body\" color=\"primary\">\n      {folder}\n    </Text>\n    <Text variant=\"body\" color=\"secondary\">\n      <Icon name=\"angle-right\" />\n    </Text>\n    <Text variant=\"body\" color=\"primary\">\n      {evaluationGroup}\n    </Text>\n  </Stack>\n);\n\ninterface TitleProps {\n  name: string;\n  state: GrafanaAlertState;\n}\n\nconst Title = ({ name, state }: TitleProps) => (\n  <header>\n    <Stack alignItems={'center'} gap={1}>\n      <AlertStateDot size=\"md\" state={state} />\n      {/* <Button variant=\"secondary\" fill=\"outline\" icon=\"angle-left\" /> */}\n      <Text element=\"h1\" variant=\"h2\" weight=\"bold\">\n        {name}\n      </Text>\n      {/* <Badge color=\"red\" text={state} icon=\"exclamation-circle\" /> */}\n    </Stack>\n  </header>\n);\n\ninterface SummaryProps {\n  text: string;\n}\n\nconst Summary = ({ text }: SummaryProps) => (\n  <Text variant=\"body\" color=\"secondary\">\n    {text}\n  </Text>\n);\n\nexport default RuleViewer;\n","import { useEffect, useMemo } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { useDispatch } from 'app/types';\nimport { CombinedRule, RuleIdentifier, RuleNamespace, RulerDataSourceConfig } from 'app/types/unified-alerting';\nimport { RulerRuleGroupDTO, RulerRulesConfigDTO } from 'app/types/unified-alerting-dto';\n\nimport { alertRuleApi } from '../api/alertRuleApi';\nimport { featureDiscoveryApi } from '../api/featureDiscoveryApi';\nimport { fetchPromAndRulerRulesAction } from '../state/actions';\nimport { getDataSourceByName, GRAFANA_RULES_SOURCE_NAME, isGrafanaRulesSource } from '../utils/datasource';\nimport { AsyncRequestMapSlice, AsyncRequestState, initialAsyncRequestState } from '../utils/redux';\nimport * as ruleId from '../utils/rule-id';\nimport {\n  isCloudRuleIdentifier,\n  isGrafanaRuleIdentifier,\n  isPrometheusRuleIdentifier,\n  isRulerNotSupportedResponse,\n} from '../utils/rules';\n\nimport {\n  attachRulerRulesToCombinedRules,\n  combineRulesNamespaces,\n  useCombinedRuleNamespaces,\n} from './useCombinedRuleNamespaces';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\nexport function useCombinedRulesMatching(\n  ruleName: string | undefined,\n  ruleSourceName: string | undefined\n): AsyncRequestState<CombinedRule[]> {\n  const requestState = useCombinedRulesLoader(ruleSourceName);\n  const combinedRules = useCombinedRuleNamespaces(ruleSourceName);\n\n  const rules = useMemo(() => {\n    if (!ruleName || !ruleSourceName || combinedRules.length === 0) {\n      return [];\n    }\n\n    const rules: CombinedRule[] = [];\n\n    for (const namespace of combinedRules) {\n      for (const group of namespace.groups) {\n        for (const rule of group.rules) {\n          if (rule.name === ruleName) {\n            rules.push(rule);\n          }\n        }\n      }\n    }\n\n    return rules;\n  }, [ruleName, ruleSourceName, combinedRules]);\n\n  return {\n    ...requestState,\n    result: rules,\n  };\n}\n\nexport function useCloudCombinedRulesMatching(\n  ruleName: string,\n  ruleSourceName: string,\n  filter?: { namespace?: string; groupName?: string }\n): { loading: boolean; error?: unknown; rules?: CombinedRule[] } {\n  const dsSettings = getDataSourceByName(ruleSourceName);\n  const { dsFeatures, isLoadingDsFeatures } = useDataSourceFeatures(ruleSourceName);\n\n  const {\n    currentData: promRuleNs = [],\n    isLoading: isLoadingPromRules,\n    error: promRuleNsError,\n  } = alertRuleApi.endpoints.prometheusRuleNamespaces.useQuery({\n    ruleSourceName: ruleSourceName,\n    ruleName: ruleName,\n    namespace: filter?.namespace,\n    groupName: filter?.groupName,\n  });\n\n  const [fetchRulerRuleGroup] = alertRuleApi.endpoints.rulerRuleGroup.useLazyQuery();\n\n  const { loading, error, value } = useAsync(async () => {\n    if (!dsSettings) {\n      throw new Error('Unable to obtain data source settings');\n    }\n\n    if (promRuleNsError) {\n      throw new Error('Unable to obtain Prometheus rules');\n    }\n\n    const rulerGroups: RulerRuleGroupDTO[] = [];\n    if (dsFeatures?.rulerConfig) {\n      const rulerConfig = dsFeatures.rulerConfig;\n\n      const nsGroups = promRuleNs\n        .map((namespace) => namespace.groups.map((group) => ({ namespace: namespace, group: group })))\n        .flat();\n\n      // RTK query takes care of deduplication\n      await Promise.allSettled(\n        nsGroups.map(async (nsGroup) => {\n          const rulerGroup = await fetchRulerRuleGroup({\n            rulerConfig: rulerConfig,\n            namespace: nsGroup.namespace.name,\n            group: nsGroup.group.name,\n          }).unwrap();\n          rulerGroups.push(rulerGroup);\n        })\n      );\n    }\n\n    // TODO Join with ruler rules\n    const namespaces = promRuleNs.map((ns) => attachRulerRulesToCombinedRules(dsSettings, ns, rulerGroups));\n    const rules = namespaces.flatMap((ns) => ns.groups.flatMap((group) => group.rules));\n\n    return rules;\n  }, [dsSettings, dsFeatures, isLoadingPromRules, promRuleNsError, promRuleNs, fetchRulerRuleGroup]);\n\n  return { loading: isLoadingDsFeatures || loading, error: error, rules: value };\n}\n\nfunction useCombinedRulesLoader(\n  rulesSourceName: string | undefined,\n  identifier?: RuleIdentifier\n): AsyncRequestState<void> {\n  const dispatch = useDispatch();\n  const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n  const promRuleRequest = getRequestState(rulesSourceName, promRuleRequests);\n  const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n  const rulerRuleRequest = getRequestState(rulesSourceName, rulerRuleRequests);\n\n  const { loading } = useAsync(async () => {\n    if (!rulesSourceName) {\n      return;\n    }\n\n    await dispatch(fetchPromAndRulerRulesAction({ rulesSourceName, identifier }));\n  }, [dispatch, rulesSourceName]);\n\n  return {\n    loading,\n    error: promRuleRequest.error ?? isRulerNotSupportedResponse(rulerRuleRequest) ? undefined : rulerRuleRequest.error,\n    dispatched: promRuleRequest.dispatched && rulerRuleRequest.dispatched,\n  };\n}\n\nfunction getRequestState(\n  ruleSourceName: string | undefined,\n  slice: AsyncRequestMapSlice<RulerRulesConfigDTO | RuleNamespace[] | null>\n): AsyncRequestState<RulerRulesConfigDTO | RuleNamespace[] | null> {\n  if (!ruleSourceName) {\n    return initialAsyncRequestState;\n  }\n\n  const state = slice[ruleSourceName];\n\n  if (!state) {\n    return initialAsyncRequestState;\n  }\n\n  return state;\n}\n\nexport function useCombinedRule({ ruleIdentifier }: { ruleIdentifier: RuleIdentifier }): {\n  loading: boolean;\n  result?: CombinedRule;\n  error?: unknown;\n} {\n  const { ruleSourceName } = ruleIdentifier;\n  const dsSettings = getDataSourceByName(ruleSourceName);\n\n  const { dsFeatures, isLoadingDsFeatures } = useDataSourceFeatures(ruleSourceName);\n\n  const {\n    currentData: promRuleNs,\n    isLoading: isLoadingPromRules,\n    error: promRuleNsError,\n  } = alertRuleApi.endpoints.prometheusRuleNamespaces.useQuery(\n    {\n      // TODO Refactor parameters\n      ruleSourceName: ruleIdentifier.ruleSourceName,\n      namespace:\n        isPrometheusRuleIdentifier(ruleIdentifier) || isCloudRuleIdentifier(ruleIdentifier)\n          ? ruleIdentifier.namespace\n          : undefined,\n      groupName:\n        isPrometheusRuleIdentifier(ruleIdentifier) || isCloudRuleIdentifier(ruleIdentifier)\n          ? ruleIdentifier.groupName\n          : undefined,\n      ruleName:\n        isPrometheusRuleIdentifier(ruleIdentifier) || isCloudRuleIdentifier(ruleIdentifier)\n          ? ruleIdentifier.ruleName\n          : undefined,\n    }\n    // TODO – experiment with enabling these now that we request a single alert rule more efficiently.\n    // Requires a recent version of Prometheus with support for query params on /api/v1/rules\n    // {\n    //   refetchOnFocus: true,\n    //   refetchOnReconnect: true,\n    // }\n  );\n\n  const [\n    fetchRulerRuleGroup,\n    { currentData: rulerRuleGroup, isLoading: isLoadingRulerGroup, error: rulerRuleGroupError },\n  ] = alertRuleApi.endpoints.rulerRuleGroup.useLazyQuery();\n\n  const [fetchRulerRules, { currentData: rulerRules, isLoading: isLoadingRulerRules, error: rulerRulesError }] =\n    alertRuleApi.endpoints.rulerRules.useLazyQuery();\n\n  useEffect(() => {\n    if (!dsFeatures?.rulerConfig) {\n      return;\n    }\n\n    if (dsFeatures.rulerConfig && isCloudRuleIdentifier(ruleIdentifier)) {\n      fetchRulerRuleGroup({\n        rulerConfig: dsFeatures.rulerConfig,\n        namespace: ruleIdentifier.namespace,\n        group: ruleIdentifier.groupName,\n      });\n    } else if (isGrafanaRuleIdentifier(ruleIdentifier)) {\n      // TODO Fetch a single group for Grafana managed rules, we're currently still fetching all rules for Grafana managed\n      fetchRulerRules({ rulerConfig: dsFeatures.rulerConfig });\n    }\n  }, [dsFeatures, fetchRulerRuleGroup, fetchRulerRules, ruleIdentifier]);\n\n  const rule = useMemo(() => {\n    if (!promRuleNs) {\n      return;\n    }\n\n    if (isGrafanaRuleIdentifier(ruleIdentifier)) {\n      const combinedNamespaces = combineRulesNamespaces('grafana', promRuleNs, rulerRules);\n\n      for (const namespace of combinedNamespaces) {\n        for (const group of namespace.groups) {\n          for (const rule of group.rules) {\n            const id = ruleId.fromCombinedRule(ruleSourceName, rule);\n\n            if (ruleId.equal(id, ruleIdentifier)) {\n              return rule;\n            }\n          }\n        }\n      }\n    }\n\n    if (!dsSettings) {\n      return;\n    }\n\n    if (\n      promRuleNs.length > 0 &&\n      (isCloudRuleIdentifier(ruleIdentifier) || isPrometheusRuleIdentifier(ruleIdentifier))\n    ) {\n      const namespaces = promRuleNs.map((ns) =>\n        attachRulerRulesToCombinedRules(dsSettings, ns, rulerRuleGroup ? [rulerRuleGroup] : [])\n      );\n\n      for (const namespace of namespaces) {\n        for (const group of namespace.groups) {\n          for (const rule of group.rules) {\n            const id = ruleId.fromCombinedRule(ruleSourceName, rule);\n\n            if (ruleId.equal(id, ruleIdentifier)) {\n              return rule;\n            }\n          }\n        }\n      }\n    }\n\n    return;\n  }, [ruleIdentifier, ruleSourceName, promRuleNs, rulerRuleGroup, rulerRules, dsSettings]);\n\n  return {\n    loading: isLoadingDsFeatures || isLoadingPromRules || isLoadingRulerGroup || isLoadingRulerRules,\n    error: promRuleNsError ?? rulerRuleGroupError ?? rulerRulesError,\n    result: rule,\n  };\n}\n\nconst grafanaRulerConfig: RulerDataSourceConfig = {\n  dataSourceName: GRAFANA_RULES_SOURCE_NAME,\n  apiVersion: 'legacy',\n};\n\nconst grafanaDsFeatures = {\n  rulerConfig: grafanaRulerConfig,\n};\n\nexport function useDataSourceFeatures(dataSourceName: string) {\n  const isGrafanaDs = isGrafanaRulesSource(dataSourceName);\n\n  const { currentData: dsFeatures, isLoading: isLoadingDsFeatures } =\n    featureDiscoveryApi.endpoints.discoverDsFeatures.useQuery(\n      {\n        rulesSourceName: dataSourceName,\n      },\n      { skip: isGrafanaDs }\n    );\n\n  if (isGrafanaDs) {\n    return { isLoadingDsFeatures: false, dsFeatures: grafanaDsFeatures };\n  }\n\n  return { isLoadingDsFeatures, dsFeatures };\n}\n"],"names":["ProvisionedResource","ProvisioningAlert","resource","ProvisioningBadge","useRuleViewerPageTitle","rule","chrome","Branding","AlertStateDot","props","styles","getDotStyles","Tooltip","theme","size","History","InstancesList","QueryResults","Routing","Tabs","RuleViewer","match","id","activeTab","setActiveTab","identifier","loading","error","useCombinedRule","LoadingPlaceholder","summary","promRule","numberOfInstance","isFederatedRule","isProvisioned","Stack","BreadCrumb","Spacer","Button","Icon","Title","Summary","Alert","Provisioning","TabsBar","Tab","TabContent","folder","evaluationGroup","Text","name","state","text","useCombinedRulesMatching","ruleName","ruleSourceName","requestState","useCombinedRulesLoader","combinedRules","rules","namespace","group","useCloudCombinedRulesMatching","filter","dsSettings","dsFeatures","isLoadingDsFeatures","useDataSourceFeatures","promRuleNs","isLoadingPromRules","promRuleNsError","fetchRulerRuleGroup","value","rulerGroups","rulerConfig","nsGroups","nsGroup","rulerGroup","ns","rulesSourceName","dispatch","promRuleRequests","promRuleRequest","getRequestState","rulerRuleRequests","rulerRuleRequest","slice","ruleIdentifier","rulerRuleGroup","isLoadingRulerGroup","rulerRuleGroupError","fetchRulerRules","rulerRules","isLoadingRulerRules","rulerRulesError","combinedNamespaces","namespaces","grafanaDsFeatures","dataSourceName","isGrafanaDs"],"sourceRoot":""}