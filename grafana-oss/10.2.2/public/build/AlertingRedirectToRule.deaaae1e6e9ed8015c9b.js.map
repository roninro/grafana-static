{"version":3,"file":"AlertingRedirectToRule.deaaae1e6e9ed8015c9b.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/RedirectToRuleViewer.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-viewer/RuleViewerLayout.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useCombinedRule.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { useLocation } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config, isFetchError } from '@grafana/runtime';\nimport { Alert, Card, Icon, LoadingPlaceholder, useStyles2, withErrorBoundary } from '@grafana/ui';\n\nimport { AlertLabels } from './components/AlertLabels';\nimport { RuleViewerLayout } from './components/rule-viewer/RuleViewerLayout';\nimport { useCloudCombinedRulesMatching } from './hooks/useCombinedRule';\nimport { getRulesSourceByName } from './utils/datasource';\nimport { createViewLink } from './utils/misc';\nimport { unescapePathSeparators } from './utils/rule-id';\n\nconst pageTitle = 'Find rule';\nconst subUrl = config.appSubUrl;\n\nfunction useRuleFindParams() {\n  // DO NOT USE REACT-ROUTER HOOKS FOR THIS CODE\n  // React-router's useLocation/useParams/props.match are broken and don't preserve original param values when parsing location\n  // so, they cannot be used to parse name and sourceName path params\n  // React-router messes the pathname up resulting in a string that is neither encoded nor decoded\n  // Relevant issue: https://github.com/remix-run/history/issues/505#issuecomment-453175833\n  // It was probably fixed in React-Router v6\n  const location = useLocation();\n\n  return useMemo(() => {\n    const segments = location.pathname?.replace(subUrl, '').split('/') ?? []; // [\"\", \"alerting\", \"{sourceName}\", \"{name}]\n    const name = unescapePathSeparators(decodeURIComponent(unescapePathSeparators(segments[3])));\n    const sourceName = decodeURIComponent(segments[2]);\n\n    const searchParams = new URLSearchParams(location.search);\n\n    return {\n      name,\n      sourceName,\n      namespace: searchParams.get('namespace') ?? undefined,\n      group: searchParams.get('group') ?? undefined,\n    };\n  }, [location]);\n}\n\nexport function RedirectToRuleViewer(): JSX.Element | null {\n  const styles = useStyles2(getStyles);\n\n  const { name, sourceName, namespace, group } = useRuleFindParams();\n  const {\n    error,\n    loading,\n    rules = [],\n  } = useCloudCombinedRulesMatching(name, sourceName, { namespace, groupName: group });\n\n  if (!name || !sourceName) {\n    return <Redirect to=\"/notfound\" />;\n  }\n\n  if (error) {\n    return (\n      <RuleViewerLayout title={pageTitle}>\n        <Alert title={`Failed to load rules from ${sourceName}`}>\n          {isFetchError(error) && (\n            <details className={styles.errorMessage}>\n              {error.message}\n              <br />\n              {/* {!!error?.stack && error.stack} */}\n            </details>\n          )}\n        </Alert>\n      </RuleViewerLayout>\n    );\n  }\n\n  if (loading) {\n    return (\n      <RuleViewerLayout title={pageTitle}>\n        <LoadingPlaceholder text=\"Loading rule...\" />\n      </RuleViewerLayout>\n    );\n  }\n\n  const rulesSource = getRulesSourceByName(sourceName);\n\n  if (!rulesSource) {\n    return (\n      <RuleViewerLayout title={pageTitle}>\n        <Alert title=\"Could not view rule\">\n          <details className={styles.errorMessage}>{`Could not find data source with name: ${sourceName}.`}</details>\n        </Alert>\n      </RuleViewerLayout>\n    );\n  }\n\n  if (rules.length === 1) {\n    const [rule] = rules;\n    const to = createViewLink(rulesSource, rule, '/alerting/list').replace(subUrl, '');\n    return <Redirect to={to} />;\n  }\n\n  if (rules.length === 0) {\n    return (\n      <RuleViewerLayout title={pageTitle}>\n        <div data-testid=\"no-rules\">\n          No rules in <span className={styles.param}>{sourceName}</span> matched the name{' '}\n          <span className={styles.param}>{name}</span>\n        </div>\n      </RuleViewerLayout>\n    );\n  }\n\n  return (\n    <RuleViewerLayout title={pageTitle}>\n      <div>\n        Several rules in <span className={styles.param}>{sourceName}</span> matched the name{' '}\n        <span className={styles.param}>{name}</span>, please select the rule you want to view.\n      </div>\n      <div className={styles.rules}>\n        {rules.map((rule, index) => {\n          return (\n            <Card key={`${rule.name}-${index}`} href={createViewLink(rulesSource, rule, '/alerting/list')}>\n              <Card.Heading>{rule.name}</Card.Heading>\n              <Card.Meta separator={''}>\n                <Icon name=\"folder\" />\n                <span className={styles.namespace}>{`${rule.namespace.name} / ${rule.group.name}`}</span>\n              </Card.Meta>\n              <Card.Tags>\n                <AlertLabels labels={rule.labels} />\n              </Card.Tags>\n            </Card>\n          );\n        })}\n      </div>\n    </RuleViewerLayout>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    param: css`\n      font-style: italic;\n      color: ${theme.colors.text.secondary};\n    `,\n    rules: css`\n      margin-top: ${theme.spacing(2)};\n    `,\n    namespace: css`\n      margin-left: ${theme.spacing(1)};\n    `,\n    errorMessage: css`\n      white-space: pre-wrap;\n    `,\n  };\n}\n\nexport default withErrorBoundary(RedirectToRuleViewer, { style: 'page' });\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, NavModelItem } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\n\ntype Props = {\n  children: React.ReactNode | React.ReactNode[];\n  title: string;\n  wrapInContent?: boolean;\n};\n\nconst defaultPageNav: Partial<NavModelItem> = {\n  icon: 'bell',\n  id: 'alert-rule-view',\n};\n\nexport function RuleViewerLayout(props: Props): JSX.Element | null {\n  const { wrapInContent = true, children, title } = props;\n  const styles = useStyles2(getPageStyles);\n\n  return (\n    <Page pageNav={{ ...defaultPageNav, text: title }} navId=\"alert-list\">\n      <Page.Contents>\n        <div className={styles.content}>{wrapInContent ? <RuleViewerLayoutContent {...props} /> : children}</div>\n      </Page.Contents>\n    </Page>\n  );\n}\n\ntype ContentProps = {\n  children: React.ReactNode | React.ReactNode[];\n  padding?: number;\n};\n\nexport function RuleViewerLayoutContent({ children, padding = 2 }: ContentProps): JSX.Element | null {\n  const styles = useStyles2(getContentStyles(padding));\n  return <div className={styles.wrapper}>{children}</div>;\n}\n\nconst getPageStyles = (theme: GrafanaTheme2) => {\n  return {\n    content: css`\n      max-width: ${theme.breakpoints.values.xxl}px;\n    `,\n  };\n};\n\nconst getContentStyles = (padding: number) => (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css`\n      background: ${theme.colors.background.primary};\n      border: 1px solid ${theme.colors.border.weak};\n      border-radius: ${theme.shape.radius.default};\n      padding: ${theme.spacing(padding)};\n    `,\n  };\n};\n","import { useEffect, useMemo } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { useDispatch } from 'app/types';\nimport { CombinedRule, RuleIdentifier, RuleNamespace, RulerDataSourceConfig } from 'app/types/unified-alerting';\nimport { RulerRuleGroupDTO, RulerRulesConfigDTO } from 'app/types/unified-alerting-dto';\n\nimport { alertRuleApi } from '../api/alertRuleApi';\nimport { featureDiscoveryApi } from '../api/featureDiscoveryApi';\nimport { fetchPromAndRulerRulesAction } from '../state/actions';\nimport { getDataSourceByName, GRAFANA_RULES_SOURCE_NAME, isGrafanaRulesSource } from '../utils/datasource';\nimport { AsyncRequestMapSlice, AsyncRequestState, initialAsyncRequestState } from '../utils/redux';\nimport * as ruleId from '../utils/rule-id';\nimport {\n  isCloudRuleIdentifier,\n  isGrafanaRuleIdentifier,\n  isPrometheusRuleIdentifier,\n  isRulerNotSupportedResponse,\n} from '../utils/rules';\n\nimport {\n  attachRulerRulesToCombinedRules,\n  combineRulesNamespaces,\n  useCombinedRuleNamespaces,\n} from './useCombinedRuleNamespaces';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\nexport function useCombinedRulesMatching(\n  ruleName: string | undefined,\n  ruleSourceName: string | undefined\n): AsyncRequestState<CombinedRule[]> {\n  const requestState = useCombinedRulesLoader(ruleSourceName);\n  const combinedRules = useCombinedRuleNamespaces(ruleSourceName);\n\n  const rules = useMemo(() => {\n    if (!ruleName || !ruleSourceName || combinedRules.length === 0) {\n      return [];\n    }\n\n    const rules: CombinedRule[] = [];\n\n    for (const namespace of combinedRules) {\n      for (const group of namespace.groups) {\n        for (const rule of group.rules) {\n          if (rule.name === ruleName) {\n            rules.push(rule);\n          }\n        }\n      }\n    }\n\n    return rules;\n  }, [ruleName, ruleSourceName, combinedRules]);\n\n  return {\n    ...requestState,\n    result: rules,\n  };\n}\n\nexport function useCloudCombinedRulesMatching(\n  ruleName: string,\n  ruleSourceName: string,\n  filter?: { namespace?: string; groupName?: string }\n): { loading: boolean; error?: unknown; rules?: CombinedRule[] } {\n  const dsSettings = getDataSourceByName(ruleSourceName);\n  const { dsFeatures, isLoadingDsFeatures } = useDataSourceFeatures(ruleSourceName);\n\n  const {\n    currentData: promRuleNs = [],\n    isLoading: isLoadingPromRules,\n    error: promRuleNsError,\n  } = alertRuleApi.endpoints.prometheusRuleNamespaces.useQuery({\n    ruleSourceName: ruleSourceName,\n    ruleName: ruleName,\n    namespace: filter?.namespace,\n    groupName: filter?.groupName,\n  });\n\n  const [fetchRulerRuleGroup] = alertRuleApi.endpoints.rulerRuleGroup.useLazyQuery();\n\n  const { loading, error, value } = useAsync(async () => {\n    if (!dsSettings) {\n      throw new Error('Unable to obtain data source settings');\n    }\n\n    if (promRuleNsError) {\n      throw new Error('Unable to obtain Prometheus rules');\n    }\n\n    const rulerGroups: RulerRuleGroupDTO[] = [];\n    if (dsFeatures?.rulerConfig) {\n      const rulerConfig = dsFeatures.rulerConfig;\n\n      const nsGroups = promRuleNs\n        .map((namespace) => namespace.groups.map((group) => ({ namespace: namespace, group: group })))\n        .flat();\n\n      // RTK query takes care of deduplication\n      await Promise.allSettled(\n        nsGroups.map(async (nsGroup) => {\n          const rulerGroup = await fetchRulerRuleGroup({\n            rulerConfig: rulerConfig,\n            namespace: nsGroup.namespace.name,\n            group: nsGroup.group.name,\n          }).unwrap();\n          rulerGroups.push(rulerGroup);\n        })\n      );\n    }\n\n    // TODO Join with ruler rules\n    const namespaces = promRuleNs.map((ns) => attachRulerRulesToCombinedRules(dsSettings, ns, rulerGroups));\n    const rules = namespaces.flatMap((ns) => ns.groups.flatMap((group) => group.rules));\n\n    return rules;\n  }, [dsSettings, dsFeatures, isLoadingPromRules, promRuleNsError, promRuleNs, fetchRulerRuleGroup]);\n\n  return { loading: isLoadingDsFeatures || loading, error: error, rules: value };\n}\n\nfunction useCombinedRulesLoader(\n  rulesSourceName: string | undefined,\n  identifier?: RuleIdentifier\n): AsyncRequestState<void> {\n  const dispatch = useDispatch();\n  const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n  const promRuleRequest = getRequestState(rulesSourceName, promRuleRequests);\n  const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n  const rulerRuleRequest = getRequestState(rulesSourceName, rulerRuleRequests);\n\n  const { loading } = useAsync(async () => {\n    if (!rulesSourceName) {\n      return;\n    }\n\n    await dispatch(fetchPromAndRulerRulesAction({ rulesSourceName, identifier }));\n  }, [dispatch, rulesSourceName]);\n\n  return {\n    loading,\n    error: promRuleRequest.error ?? isRulerNotSupportedResponse(rulerRuleRequest) ? undefined : rulerRuleRequest.error,\n    dispatched: promRuleRequest.dispatched && rulerRuleRequest.dispatched,\n  };\n}\n\nfunction getRequestState(\n  ruleSourceName: string | undefined,\n  slice: AsyncRequestMapSlice<RulerRulesConfigDTO | RuleNamespace[] | null>\n): AsyncRequestState<RulerRulesConfigDTO | RuleNamespace[] | null> {\n  if (!ruleSourceName) {\n    return initialAsyncRequestState;\n  }\n\n  const state = slice[ruleSourceName];\n\n  if (!state) {\n    return initialAsyncRequestState;\n  }\n\n  return state;\n}\n\nexport function useCombinedRule({ ruleIdentifier }: { ruleIdentifier: RuleIdentifier }): {\n  loading: boolean;\n  result?: CombinedRule;\n  error?: unknown;\n} {\n  const { ruleSourceName } = ruleIdentifier;\n  const dsSettings = getDataSourceByName(ruleSourceName);\n\n  const { dsFeatures, isLoadingDsFeatures } = useDataSourceFeatures(ruleSourceName);\n\n  const {\n    currentData: promRuleNs,\n    isLoading: isLoadingPromRules,\n    error: promRuleNsError,\n  } = alertRuleApi.endpoints.prometheusRuleNamespaces.useQuery(\n    {\n      // TODO Refactor parameters\n      ruleSourceName: ruleIdentifier.ruleSourceName,\n      namespace:\n        isPrometheusRuleIdentifier(ruleIdentifier) || isCloudRuleIdentifier(ruleIdentifier)\n          ? ruleIdentifier.namespace\n          : undefined,\n      groupName:\n        isPrometheusRuleIdentifier(ruleIdentifier) || isCloudRuleIdentifier(ruleIdentifier)\n          ? ruleIdentifier.groupName\n          : undefined,\n      ruleName:\n        isPrometheusRuleIdentifier(ruleIdentifier) || isCloudRuleIdentifier(ruleIdentifier)\n          ? ruleIdentifier.ruleName\n          : undefined,\n    }\n    // TODO – experiment with enabling these now that we request a single alert rule more efficiently.\n    // Requires a recent version of Prometheus with support for query params on /api/v1/rules\n    // {\n    //   refetchOnFocus: true,\n    //   refetchOnReconnect: true,\n    // }\n  );\n\n  const [\n    fetchRulerRuleGroup,\n    { currentData: rulerRuleGroup, isLoading: isLoadingRulerGroup, error: rulerRuleGroupError },\n  ] = alertRuleApi.endpoints.rulerRuleGroup.useLazyQuery();\n\n  const [fetchRulerRules, { currentData: rulerRules, isLoading: isLoadingRulerRules, error: rulerRulesError }] =\n    alertRuleApi.endpoints.rulerRules.useLazyQuery();\n\n  useEffect(() => {\n    if (!dsFeatures?.rulerConfig) {\n      return;\n    }\n\n    if (dsFeatures.rulerConfig && isCloudRuleIdentifier(ruleIdentifier)) {\n      fetchRulerRuleGroup({\n        rulerConfig: dsFeatures.rulerConfig,\n        namespace: ruleIdentifier.namespace,\n        group: ruleIdentifier.groupName,\n      });\n    } else if (isGrafanaRuleIdentifier(ruleIdentifier)) {\n      // TODO Fetch a single group for Grafana managed rules, we're currently still fetching all rules for Grafana managed\n      fetchRulerRules({ rulerConfig: dsFeatures.rulerConfig });\n    }\n  }, [dsFeatures, fetchRulerRuleGroup, fetchRulerRules, ruleIdentifier]);\n\n  const rule = useMemo(() => {\n    if (!promRuleNs) {\n      return;\n    }\n\n    if (isGrafanaRuleIdentifier(ruleIdentifier)) {\n      const combinedNamespaces = combineRulesNamespaces('grafana', promRuleNs, rulerRules);\n\n      for (const namespace of combinedNamespaces) {\n        for (const group of namespace.groups) {\n          for (const rule of group.rules) {\n            const id = ruleId.fromCombinedRule(ruleSourceName, rule);\n\n            if (ruleId.equal(id, ruleIdentifier)) {\n              return rule;\n            }\n          }\n        }\n      }\n    }\n\n    if (!dsSettings) {\n      return;\n    }\n\n    if (\n      promRuleNs.length > 0 &&\n      (isCloudRuleIdentifier(ruleIdentifier) || isPrometheusRuleIdentifier(ruleIdentifier))\n    ) {\n      const namespaces = promRuleNs.map((ns) =>\n        attachRulerRulesToCombinedRules(dsSettings, ns, rulerRuleGroup ? [rulerRuleGroup] : [])\n      );\n\n      for (const namespace of namespaces) {\n        for (const group of namespace.groups) {\n          for (const rule of group.rules) {\n            const id = ruleId.fromCombinedRule(ruleSourceName, rule);\n\n            if (ruleId.equal(id, ruleIdentifier)) {\n              return rule;\n            }\n          }\n        }\n      }\n    }\n\n    return;\n  }, [ruleIdentifier, ruleSourceName, promRuleNs, rulerRuleGroup, rulerRules, dsSettings]);\n\n  return {\n    loading: isLoadingDsFeatures || isLoadingPromRules || isLoadingRulerGroup || isLoadingRulerRules,\n    error: promRuleNsError ?? rulerRuleGroupError ?? rulerRulesError,\n    result: rule,\n  };\n}\n\nconst grafanaRulerConfig: RulerDataSourceConfig = {\n  dataSourceName: GRAFANA_RULES_SOURCE_NAME,\n  apiVersion: 'legacy',\n};\n\nconst grafanaDsFeatures = {\n  rulerConfig: grafanaRulerConfig,\n};\n\nexport function useDataSourceFeatures(dataSourceName: string) {\n  const isGrafanaDs = isGrafanaRulesSource(dataSourceName);\n\n  const { currentData: dsFeatures, isLoading: isLoadingDsFeatures } =\n    featureDiscoveryApi.endpoints.discoverDsFeatures.useQuery(\n      {\n        rulesSourceName: dataSourceName,\n      },\n      { skip: isGrafanaDs }\n    );\n\n  if (isGrafanaDs) {\n    return { isLoadingDsFeatures: false, dsFeatures: grafanaDsFeatures };\n  }\n\n  return { isLoadingDsFeatures, dsFeatures };\n}\n"],"names":["pageTitle","subUrl","useRuleFindParams","location","segments","name","sourceName","searchParams","RedirectToRuleViewer","styles","getStyles","namespace","group","error","loading","rules","rulesSource","rule","to","index","theme","defaultPageNav","RuleViewerLayout","props","wrapInContent","children","title","getPageStyles","RuleViewerLayoutContent","padding","getContentStyles","useCombinedRulesMatching","ruleName","ruleSourceName","requestState","useCombinedRulesLoader","combinedRules","useCloudCombinedRulesMatching","filter","dsSettings","dsFeatures","isLoadingDsFeatures","useDataSourceFeatures","promRuleNs","isLoadingPromRules","promRuleNsError","fetchRulerRuleGroup","value","rulerGroups","rulerConfig","nsGroups","nsGroup","rulerGroup","ns","rulesSourceName","identifier","dispatch","promRuleRequests","state","promRuleRequest","getRequestState","rulerRuleRequests","rulerRuleRequest","slice","useCombinedRule","ruleIdentifier","rulerRuleGroup","isLoadingRulerGroup","rulerRuleGroupError","fetchRulerRules","rulerRules","isLoadingRulerRules","rulerRulesError","combinedNamespaces","id","namespaces","grafanaDsFeatures","dataSourceName","isGrafanaDs"],"sourceRoot":""}