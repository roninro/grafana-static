{"version":3,"file":"1080.9119741bd5e8d167acf1.js","mappings":"+IAaO,MAAMA,UAA4B,IAA8B,CACrE,YAAYC,EAA8C,CACxD,MAAMA,CAAgB,CACxB,CAEA,iBAAiBC,EAAuB,CACtC,MAAO,wBAAwBA,EAAM,SACvC,CAEA,MAAMC,EAAuE,CAC3E,OAAO,QAAQ,OAAO,oCAAoC,CAC5D,CAEA,gBAAkD,CAChD,OAAO,QAAQ,QAAQ,CAAE,QAAS,GAAI,OAAQ,EAAG,CAAC,CACpD,CACF,CCzBO,MAAM,EAAS,IAAI,KAAiBH,CAAmB,C","sources":["webpack://grafana/./public/app/plugins/datasource/dashboard/datasource.ts","webpack://grafana/./public/app/plugins/datasource/dashboard/module.ts"],"sourcesContent":["import {\n  DataSourceApi,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  TestDataSourceResponse,\n} from '@grafana/data';\n\nimport { DashboardQuery } from './types';\n\n/**\n * This should not really be called\n */\nexport class DashboardDatasource extends DataSourceApi<DashboardQuery> {\n  constructor(instanceSettings: DataSourceInstanceSettings) {\n    super(instanceSettings);\n  }\n\n  getCollapsedText(query: DashboardQuery) {\n    return `Dashboard Reference: ${query.panelId}`;\n  }\n\n  query(options: DataQueryRequest<DashboardQuery>): Promise<DataQueryResponse> {\n    return Promise.reject('This should not be called directly');\n  }\n\n  testDatasource(): Promise<TestDataSourceResponse> {\n    return Promise.resolve({ message: '', status: '' });\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport { DashboardDatasource } from './datasource';\n\nexport const plugin = new DataSourcePlugin(DashboardDatasource);\n"],"names":["DashboardDatasource","instanceSettings","query","options"],"sourceRoot":""}