{"version":3,"file":"zipkinPlugin.8dfe1ae60331975f9460.js","mappings":"yJAMO,MAAMA,EAAU,CAAC,CAAE,SAAAC,EAAW,EAAM,IAAM,CAC/C,MAAMC,KAAS,MAAWC,CAAS,EAEnC,OAAIF,EACK,gBAAC,MAAG,UAAWC,EAAO,gBAAiB,EAGzC,gBAAC,MAAG,UAAWA,EAAO,QAAS,CACxC,EAEMC,EAAaC,IAA0B,CAC3C,WAAS;AAAA,cACGA,EAAM,QAAQ,EAAG,CAAC;AAAA,IAE9B,mBAAiB;AAAA;AAAA,cAELA,EAAM,QAAQ,EAAG,CAAC;AAAA,GAEhC,E,0ICAO,SAASC,EAAkB,CAAE,QAAAC,EAAS,gBAAAC,CAAgB,EAAU,CACrE,MAAML,KAAS,MAAWC,CAAS,EAEnC,OACE,gBAAC,OAAI,UAAWD,EAAO,WACrB,gBAAC,IAAc,CAAC,UAAWA,EAAO,KAChC,gBAAC,KACC,QAAQ,kEACR,MAAM,oBACN,WAAY,IAEZ,gBAAC,KACC,GAAG,kBACH,MAAOI,EAAQ,SAAS,WAAW,QACnC,SAAWE,MACT,MAAqC,CAAE,gBAAAD,EAAiB,QAAAD,CAAQ,EAAG,YAAa,CAC9E,GAAGA,EAAQ,SAAS,UACpB,QAASE,EAAM,cAAc,OAC/B,CAAC,EAEL,CACF,CACF,CACF,CAEJ,CAEO,MAAMC,EAAmB,CAAC,CAAE,QAAAH,EAAS,gBAAAC,CAAgB,IAExD,gBAAC,KACC,MAAM,aACN,YACE,gBAAC,KACC,YAAY,6CACZ,OAAQ,GAAGD,EAAQ,mBACnB,QAAQ,iBACV,GAGF,gBAACD,EAAA,CAAkB,QAAAC,EAAkB,gBAAAC,CAAA,CAAkC,CACzE,EAIEJ,EAAaC,IAA0B,CAC3C,YAAU;AAAA;AAAA,sBAEUA,EAAM,QAAQ,CAAC;AAAA,aACxBA,EAAM,OAAO,KAAK;AAAA,IAE7B,aAAW;AAAA;AAAA;AAAA,IAIX,OAAK;AAAA;AAAA;AAAA,GAIP,E,gMC5CO,SAASM,EAAuB,CAAE,QAAAJ,EAAS,gBAAAC,CAAgB,EAAU,CAC1E,MAAML,KAAS,MAAWC,CAAS,EAEnC,OACE,gBAAC,OAAI,aAAW,OAAI,CAAE,MAAO,MAAO,CAAC,GACnC,gBAAC,IAAc,CAAC,UAAWD,EAAO,KAChC,gBAAC,KACC,QAAQ,+DACR,MAAM,cACN,WAAY,IAEZ,gBAAC,KACC,QAAQ,sCACR,SAAS,aACT,QAASI,EAAQ,SAAS,iBAAiB,cAC3C,UAAW,GACX,MAAO,GACP,SAAWK,MACT,MAAqC,CAAE,gBAAAJ,EAAiB,QAAAD,CAAQ,EAAG,kBAAmB,CACpF,GAAGA,EAAQ,SAAS,gBACpB,cAAeK,EAAG,GACpB,CAAC,EAEL,CACF,EACCL,EAAQ,SAAS,iBAAiB,cACjC,gBAAC,MACC,KAAK,SACL,QAAQ,YACR,KAAK,KACL,KAAK,OACL,QAAS,IAAM,IACb,MAAqC,CAAE,gBAAAC,EAAiB,QAAAD,CAAQ,EAAG,kBAAmB,CACpF,GAAGA,EAAQ,SAAS,gBACpB,cAAe,MACjB,CAAC,CACH,GACD,OAED,EACE,IACN,EAEA,gBAAC,IAAc,KACb,gBAAC,KACC,SAAO,MAAkB,OAAO,EAChC,WAAS,MAAoB,QAAS,KAAK,EAC3C,MAAOA,EAAQ,SAAS,iBAAiB,oBAAsB,GAC/D,SAAWM,GAAQ,IACjB,MAAqC,CAAE,gBAAAL,EAAiB,QAAAD,CAAQ,EAAG,kBAAmB,CACpF,GAAGA,EAAQ,SAAS,gBACpB,mBAAoBM,CACtB,CAAC,CACH,EACA,YAAa,MACb,eAAgB,KAClB,CACF,EAEA,gBAAC,IAAc,KACb,gBAAC,KACC,SAAO,MAAkB,KAAK,EAC9B,WAAS,MAAoB,MAAO,IAAI,EACxC,MAAON,EAAQ,SAAS,iBAAiB,kBAAoB,GAC7D,SAAWM,GAAQ,IACjB,MAAqC,CAAE,gBAAAL,EAAiB,QAAAD,CAAQ,EAAG,kBAAmB,CACpF,GAAGA,EAAQ,SAAS,gBACpB,iBAAkBM,CACpB,CAAC,CACH,EACA,YAAa,KACb,eAAgB,KAClB,CACF,EAEA,gBAAC,IAAc,KACb,gBAAC,IAAW,CAAC,QAAQ,8CAA8C,MAAM,OAAO,WAAY,IAC1F,gBAAC,KACC,OAAQN,EAAQ,SAAS,iBAAiB,MAAQ,CAAC,EACnD,SAAWO,MACT,MAAqC,CAAE,gBAAAN,EAAiB,QAAAD,CAAQ,EAAG,kBAAmB,CACpF,GAAGA,EAAQ,SAAS,gBACpB,KAAMO,CACR,CAAC,EAEL,CACF,CACF,EAECP,EAAQ,SAAS,iBAAiB,SAAS,IAAI,CAACQ,EAAOC,IACtD,gBAAC,OAAI,IAAKA,EAAG,UAAWb,EAAO,UAC7B,gBAAC,IAAW,CAAC,MAAM,aAAa,WAAY,GAAI,QAAQ,0CACtD,gBAAC,KACC,MAAM,aACN,KAAK,OACL,gBAAe,GACf,MAAOY,EAAM,KACb,MAAO,GACP,SAAWE,GAAM,CACf,IAAIC,EAAaX,EAAQ,SAAS,iBAAiB,QAAQ,MAAM,GAAK,CAAC,EACvEW,EAAWF,CAAC,EAAE,KAAOC,EAAE,cAAc,SACrC,MAAqC,CAAE,gBAAAT,EAAiB,QAAAD,CAAQ,EAAG,kBAAmB,CACpF,GAAGA,EAAQ,SAAS,gBACpB,QAASW,CACX,CAAC,CACH,EACF,CACF,EACA,gBAAC,KACC,MAAM,QACN,WAAY,GACZ,QAAQ,2HACR,KAAI,IAEJ,gBAAC,KACC,MAAM,QACN,KAAK,OACL,gBAAe,GACf,MAAOH,EAAM,MACb,SAAWE,GAAM,CACf,IAAIC,EAAaX,EAAQ,SAAS,iBAAiB,QAAQ,MAAM,GAAK,CAAC,EACvEW,EAAWF,CAAC,EAAE,MAAQC,EAAE,cAAc,SACtC,MAAqC,CAAE,gBAAAT,EAAiB,QAAAD,CAAQ,EAAG,kBAAmB,CACpF,GAAGA,EAAQ,SAAS,gBACpB,QAASW,CACX,CAAC,CACH,EACF,CACF,EAEA,gBAAC,MACC,QAAQ,cACR,MAAM,eACN,KAAK,QACL,KAAK,SACL,QAAS,IAAM,CACb,IAAIA,EAAaX,EAAQ,SAAS,iBAAiB,QAAQ,MAAM,EACjEW,GAAY,OAAOF,EAAG,CAAC,KACvB,MAAqC,CAAE,gBAAAR,EAAiB,QAAAD,CAAQ,EAAG,kBAAmB,CACpF,GAAGA,EAAQ,SAAS,gBACpB,QAASW,CACX,CAAC,CACH,EACF,CACF,CACD,EAED,gBAAC,MACC,QAAQ,YACR,MAAM,YACN,KAAK,OACL,KAAK,SACL,QAAS,IAAM,IACb,MAAqC,CAAE,gBAAAV,EAAiB,QAAAD,CAAQ,EAAG,kBAAmB,CACpF,GAAGA,EAAQ,SAAS,gBACpB,QAAS,CAAC,GAAIA,EAAQ,SAAS,iBAAiB,SAAW,CAAC,EAAI,CAAE,MAAO,EAAG,CAAC,CAC/E,CAAC,CACH,GACD,WAED,CACF,CAEJ,CAEO,MAAMY,EAAwB,CAAC,CAAE,QAAAZ,EAAS,gBAAAC,CAAgB,IAE7D,gBAAC,KACC,MAAM,mBACN,YACE,gBAAC,KACC,YAAY,oEACZ,OAAQ,GAAGD,EAAQ,yBACnB,QAAQ,mBACV,EAEF,cAAe,GACf,gBAAiB,IAEjB,gBAACI,EAAA,CAAuB,QAAAJ,EAAkB,gBAAAC,CAAA,CAAkC,CAC9E,EAIEJ,EAAaC,IAA0B,CAC3C,YAAU;AAAA,sBACUA,EAAM,QAAQ,CAAC;AAAA,aACxBA,EAAM,OAAO,KAAK;AAAA,IAE7B,OAAK;AAAA;AAAA;AAAA,IAIL,YAAU;AAAA;AAAA;AAAA;AAAA,GAKZ,E,kMC7NO,MAAMe,EAAe,CAAC,CAAE,QAAAb,EAAS,gBAAAC,CAAgB,IAAa,CACnE,MAAML,KAAS,MAAWC,CAAS,EAEnC,OACE,gBAAC,OAAI,UAAWD,EAAO,WACrB,gBAACkB,EAAA,GACC,eAAe,SACf,SAAS,6DACT,kBAAmB,GACrB,EAEA,gBAACpB,EAAA,EAAO,IAAC,EAET,gBAACqB,EAAA,GACC,WAAW,wBACX,iBAAkBf,EAClB,kBAAmB,GACnB,SAAUC,EACV,0BAA2Be,EAAO,iCACpC,EAEA,gBAAC,KAAkB,CAAC,QAAAhB,EAAkB,gBAAAC,CAAA,CAAkC,EAExE,gBAACP,EAAA,EAAO,IAAC,EAERsB,EAAO,sBAAe,eACrB,gCACE,gBAAC,IAAqB,CAAC,QAAAhB,EAAkB,gBAAAC,CAAA,CAAkC,EAC3E,gBAACP,EAAA,EAAO,IAAC,CACX,EACE,KAEJ,gBAACuB,EAAA,GACC,MAAM,sBACN,YAAY,2GACZ,cAAe,GACf,gBAAiB,IAEjB,gBAAC,IAAgB,CAAC,QAAAjB,EAAkB,gBAAAC,CAAA,CAAkC,EACtE,gBAACP,EAAA,EAAO,CAAC,SAAU,GAAM,EACzB,gBAAC,KAAc,CAAC,QAAAM,EAAkB,gBAAAC,CAAA,CAAkC,CACtE,CACF,CAEJ,EAEMJ,EAAaC,IAA0B,CAC3C,aAAW;AAAA;AAAA,qBAEQA,EAAM,QAAQ,CAAC;AAAA;AAAA,GAGpC,G,qLCnEO,MAAMoB,EAAY,UC+BnB,GAAapB,IACV,CACL,kBAAgB,OAAI,CAClB,MAAO,iBACP,YAAaA,EAAM,QAAQ,CAAC,CAC9B,CAAC,CACH,GAGWqB,GAAmB,CAAC,CAAE,MAAAX,EAAO,SAAAY,EAAU,WAAAC,EAAY,WAAAC,CAAW,IAAa,CACtF,KAAM,CAACC,EAAiBC,CAAkB,KAAI,YAAS,EAAK,EACtDC,EAAiBC,GAAYJ,CAAU,EACvCxB,KAAQ,MAAU,EAClBF,KAAS,MAAW,EAAS,EAC7B,CAAE,cAAA+B,EAAe,WAAAC,CAAW,EAAIC,GAAeP,CAAU,EAEzDQ,KAAgB,eACpB,CAACC,EAAkBC,IAAsC,CACvD,GAAIA,EAAgB,SAAW,EAAG,CAChC,MAAMC,EAAUD,EAAgB,CAAC,EAAE,MACnCZ,EAAS,CAAE,GAAGZ,EAAO,MAAOyB,CAAQ,CAAC,EACrCZ,EAAW,EAEf,EACA,CAACD,EAAUC,EAAYb,CAAK,CAC9B,KAEA,aAAU,IAAM,CACTA,EAAM,WACTY,EAAS,CACP,GAAGZ,EACH,UAAW,SACb,CAAC,CAEL,EAAG,CAACA,EAAOY,CAAQ,CAAC,EAEpB,MAAMc,EAAiBC,GAAkB,CACvC,MAAMC,EAAY,CAAE,GAAG5B,EAAO,MAAO2B,CAAM,EAC3Cf,EAASgB,CAAS,CACpB,EAEA,IAAIC,EAAkBC,GAAwBb,EAAgBG,CAAU,EAExE,OACE,gCACE,gBAACW,EAAA,EAAK,CAAC,MAAO,eAAgB,OAAQhB,EAAiB,UAAW,IAAMC,EAAmB,EAAK,GAC9F,gBAAC,OAAI,aAAW,OAAI,CAAE,QAAS1B,EAAM,QAAQ,CAAC,CAAE,CAAC,GAC/C,gBAAC0C,EAAA,IACC,QAAS,CAAE,SAAU,EAAM,EAC3B,OAASC,GAAW,CAClBnB,EAAW,aAAemB,EAC1BrB,EAAS,CACP,GAAGZ,EACH,UAAW,QACb,CAAC,EACDgB,EAAmB,EAAK,EACxBH,EAAW,CACb,EACF,CACF,CACF,EACA,gBAACqB,EAAA,EAAc,KACb,gBAACC,EAAA,EAAW,CAAC,MAAM,aAAa,KAAM,IACpC,gBAAC,KAAe,CAAC,QAAS,KAAM,MAAO,SAAU,QAAS,iBACxD,gBAACC,EAAA,GACC,QAAS,CAAC,CAAE,MAAO,UAAW,MAAO,SAAU,CAAC,EAChD,MAAOpC,EAAM,WAAa,UAC1B,SAAWD,GACTa,EAAS,CACP,GAAGZ,EACH,UAAWD,CACb,CAAC,EAEH,KAAK,KACP,EACA,gBAACsC,EAAA,IACC,QAAQ,YACR,KAAK,KACL,QAAS,IAAM,CACbrB,EAAmB,EAAI,CACzB,GACD,cAED,CACF,CACF,CACF,EACChB,EAAM,YAAc,WACnB,gBAACkC,EAAA,EAAc,KACb,gBAACI,GAAA,GACC,QAAST,EACT,SAAUP,EACV,SAAUH,EACV,QAAQ,YACR,YAAa,CAAE,UAAW/B,EAAO,cAAe,GACjD,QAED,EACA,gBAAC,OAAI,UAAU,oDACb,gBAACmD,GAAA,GACC,MAAOvC,EAAM,MACb,SAAU0B,EACV,WAAAb,EACA,YAAa,yCACb,aAAa,SACf,CACF,CACF,CAEJ,CAEJ,EAGO,SAASK,GAAYJ,EAA4D,CACtF,MAAM0B,EAAM,GAAG9B,aAET,CAAC+B,EAAiBC,CAAK,KAAIC,EAAA,GAAW,SAAuC,CACjF,GAAI,CACF,MAAMC,EAA4B,MAAM9B,EAAW,gBAAgB0B,CAAG,EACtE,OAAII,EACKA,EAAS,KAAK,EAAE,IAAKC,IAAa,CACvC,MAAOA,EACP,MAAOA,EACP,OAAQ,EACV,EAAE,EAEG,CAAC,CACV,OAASC,EAAP,CACA,MAAMC,EAAcD,aAAiB,MAAQA,EAAQ,4BACrD,iBAAS,SAAU,MAAwB,sCAAuCC,CAAW,CAAC,CAAC,EACzFD,CACR,CACF,EAAG,CAAChC,CAAU,CAAC,EAEf,SAAAkC,EAAA,GAAS,IAAM,CAEbN,EAAM,CACR,CAAC,EAEMD,CACT,CAWO,SAASpB,GAAeP,EAA8B,CAC3D,MAAMmC,KAAYC,EAAA,GAAgB,EAC5B,CAAC9B,EAAY+B,CAAa,KAAI,YAAS,CAAC,CAAiB,EAEzD,CAAC,CAAEC,CAAU,KAAIT,EAAA,GACrB,eAAyBE,EAAgC,CACvD,MAAML,EAAM,GAAG9B,UACf,GAAI,CAIF,MAAM2C,EAAqB,MAAMvC,EAAW,gBAAgB0B,EAAK,CAAE,YAAaK,CAAQ,CAAC,EACrFI,EAAU,GACZE,EAAeG,GAAU,CACvB,MAAMC,KAAc,aAAUF,EAAS,IAAKG,GAAiB,CAACA,EAAM,MAAS,CAAC,CAAC,EAC/E,MAAO,CACL,GAAGF,EACH,CAACT,CAAO,EAAGU,CACb,CACF,CAAC,CAEL,OAAST,EAAP,CACA,MAAMC,EAAcD,aAAiB,MAAQA,EAAQ,4BACrD,iBAAS,SAAU,MAAwB,mCAAoCC,CAAW,CAAC,CAAC,EACtFD,CACR,CACF,EACA,CAAChC,EAAYM,CAAU,CACzB,EAEM,CAAC,CAAEqC,CAAW,KAAId,EAAA,GACtB,eAA0Be,EAAqBC,EAAiC,CAC9E,MAAMnB,EAAM,GAAG9B,WACTkD,EAAS,CACb,YAAAF,EACA,SAAAC,CAEF,EACA,GAAI,CAEF,MAAME,EAAyB,MAAM/C,EAAW,gBAAgB0B,EAAKoB,CAAM,EAC3E,GAAIX,EAAU,EAAG,CACf,MAAMa,EAAYD,EAAO,UACrB,aACEA,EAAO,IAAKE,GAAU,CACpB,MAAMC,EAAWD,EAAM,KAAMP,GAAS,CAACA,EAAK,QAAQ,EAEpD,MAAO,CAAC,GAAGQ,EAAS,SAAS,KAAK,MAAMA,EAAS,SAAW,GAAI,QAASA,EAAS,OAAO,CAC3F,CAAC,CACH,EACAC,GAEJd,EAAeG,GAAU,CACvB,MAAMY,EAAQZ,EAAMI,CAAW,EAC/B,MAAO,CACL,GAAGJ,EACH,CAACI,CAAW,EAAG,CACb,GAAGQ,EACH,CAACP,CAAQ,EAAGG,CACd,CACF,CACF,CAAC,EAEL,OAAShB,EAAP,CACA,MAAMC,EAAcD,aAAiB,MAAQA,EAAQ,4BACrD,iBAAS,SAAU,MAAwB,mCAAoCC,CAAW,CAAC,CAAC,EACtFD,CACR,CACF,EACA,CAAChC,CAAU,CACb,EAeA,MAAO,CACL,iBAdoB,eACnBU,GAAsC,CACrC,MAAMqB,EAAUrB,EAAgB,CAAC,EAAE,MACnC,GAAIA,EAAgB,SAAW,EAC7B4B,EAAWP,CAAO,UACTrB,EAAgB,SAAW,EAAG,CACvC,MAAMmC,EAAWnC,EAAgB,CAAC,EAAE,MACpCiC,EAAYZ,EAASc,CAAQ,EAEjC,EACA,CAACP,EAAYK,CAAW,CAC1B,EAIE,WAAArC,CACF,CACF,CAEA,SAASU,GAAwBc,EAAwCxB,EAA0B,CACjG,SAAO,WAAQ,IAAM,CACnB,IAAIS,EAAoC,CAAC,EAEzC,OAAIe,EAAS,OAASA,EAAS,MAAM,OACnCf,EAAkBe,EAAS,MAAM,IAAKA,IAC7B,CACL,GAAGA,EACH,SACExB,EAAWwB,EAAS,KAAK,GACzB,OAAO,KAAKxB,EAAWwB,EAAS,KAAK,CAAC,EAAE,IAAKe,IACpC,CACL,MAAOA,EACP,MAAOA,EACP,OAAQ,GACR,SACEvC,EAAWwB,EAAS,KAAK,EAAEe,CAAQ,GACnC,OAAO,KAAKvC,EAAWwB,EAAS,KAAK,EAAEe,CAAQ,CAAC,EAAE,IAAKQ,IAC9C,CACL,MAAOA,EACP,MAAO/C,EAAWwB,EAAS,KAAK,EAAEe,CAAQ,EAAEQ,CAAS,CACvD,EACD,CACL,EACD,CACL,EACD,EACQvB,EAAS,OAAS,CAACA,EAAS,MAAM,SAC3Cf,EAAkBuC,IAGbvC,CACT,EAAG,CAACe,EAAUxB,CAAU,CAAC,CAC3B,CAEA,MAAMiD,GAAgB,gBAChBD,GAAuB,CAC3B,CACE,MAAO,kBACP,MAAO,YACP,OAAQ,EAIV,CACF,EAEMH,GAAkB,CACtB,4BAA6BI,EAC/B,E,sHC/SO,SAASC,GAAkBC,EAAiC,CACjE,KAAM,CAAE,MAAAC,EAAO,MAAAC,CAAM,EAAIC,GAAoBH,CAAI,EAC3C,CAACI,EAAYC,CAAU,KAAI,MAAW,EAE5C,UAAWC,KAAQL,EACjBG,EAAW,IAAIE,CAAI,EAGrB,UAAWC,KAAQL,EACjBG,EAAW,IAAIE,CAAI,EAGrB,MAAO,CAACH,EAAYC,CAAU,CAChC,CAEA,SAASF,GAAoBR,EAAuD,CAClF,MAAMM,EAAgB,CAAC,EACjBC,EAAgB,CAAC,EAEjBM,EAAgBC,GAAkBd,CAAK,EACvCe,KAAU,MAAaC,GAAU,CACrC,GAAI,EAAAA,GAAShB,EAAM,QAGnB,MAAO,CACL,KAAMA,EAAMgB,CAAK,EACjB,GAAIhB,EAAMgB,CAAK,EAAE,GACjB,UAAWhB,EAAMgB,CAAK,EAAE,SAAW,CAAChB,EAAMgB,CAAK,EAAE,QAAS,EAAI,CAAC,CACjE,CACF,CAAC,EAED,UAAW1B,KAAQU,EAAO,CACxB,MAAMiB,EAAkCF,EAAQzB,EAAK,EAAE,EAAE,SAAS,IAAK4B,GAAM,CAC3E,MAAM5B,EAAOyB,EAAQG,CAAC,EAAE,KACxB,MAAO,CAAC5B,EAAK,UAAWA,EAAK,UAAYA,EAAK,QAAQ,CACxD,CAAC,EACK6B,KAAmB,MAA0BF,CAAM,EACnDG,EAAe9B,EAAK,SAAW6B,EAC/BE,KAAQ,MAAS/B,EAAK,SAAW,IAAMuB,EAAgB,IAAMO,EAAe,GAAI,EAEtFd,EAAM,KAAK,CACT,CAAC,IAAO,EAAE,EAAGhB,EAAK,GAClB,CAAC,IAAO,KAAK,EAAGA,EAAK,eAAe,aAAeA,EAAK,gBAAgB,aAAe,UACvF,CAAC,IAAO,QAAQ,EAAGA,EAAK,KACxB,CAAC,IAAO,QAAQ,EAAG+B,EAAM,KACzB,CAAC,IAAO,aAAa,EAAGA,EAAM,UAC9B,CAAC,IAAO,KAAK,EAAGD,EAAeP,CACjC,CAAC,EAEGvB,EAAK,UAAYyB,EAAQzB,EAAK,QAAQ,EAAE,MAC1CiB,EAAM,KAAK,CACT,CAAC,IAAO,EAAE,EAAGjB,EAAK,SAAW,KAAOA,EAAK,GACzC,CAAC,IAAO,MAAM,EAAGA,EAAK,GACtB,CAAC,IAAO,MAAM,EAAGA,EAAK,QACxB,CAAC,EAIL,MAAO,CAAE,MAAAgB,EAAO,MAAAC,CAAM,CACxB,CAMA,SAASO,GAAkBd,EAA6B,CACtD,IAAIsB,EAAe,EACfC,EAAiB,IAErB,UAAWjC,KAAQU,EACbV,EAAK,UAAYiC,IACnBA,EAAiBjC,EAAK,WAGpBA,EAAK,UAAYA,EAAK,SAAWgC,IACnCA,EAAehC,EAAK,UAAYA,EAAK,UAGzC,OAAOgC,EAAeC,CACxB,C,gBCvEO,MAAMC,WAAyB,IAA2C,CAI/E,YACUC,EACSC,KAA2B,MAAe,EAC3D,CACA,MAAMD,CAAgB,EAHd,sBAAAA,EACS,iBAAAC,EALnB,kBAA4C,KAQ1C,KAAK,UAAYD,EAAiB,SAAS,SAC7C,CAEA,MAAMnG,EAAuE,CAC3E,MAAMqG,EAASrG,EAAQ,QAAQ,CAAC,EAChC,GAAIqG,EAAO,YAAc,SAAU,CACjC,GAAI,CAAC,KAAK,aACR,SAAOC,EAAA,IAAG,CAAE,KAAM,CAAC,CAAE,CAAC,EAGxB,GAAI,CACF,MAAMC,EAAY,KAAK,MAAM,KAAK,YAAsB,EACxD,SAAOD,EAAA,IAAGE,EAA4B,CAAE,KAAMD,CAAU,EAAG,KAAK,WAAW,OAAO,CAAC,CACrF,MAAE,CACA,SAAOD,EAAA,IAAG,CAAE,MAAO,CAAE,QAAS,iCAAkC,EAAG,KAAM,CAAC,CAAE,CAAC,CAC/E,EAGF,GAAID,EAAO,MAAO,CAChB,MAAM7F,EAAQ,KAAK,eAAe6F,EAAQrG,EAAQ,UAAU,EAC5D,OAAO,KAAK,QAAsB,GAAGkB,WAAmB,mBAAmBV,EAAM,KAAK,GAAG,EAAE,QACzFiG,GAAA,GAAKC,GAAQF,EAA4BE,EAAK,KAAK,WAAW,OAAO,CAAC,CACxE,EAEF,SAAOJ,EAAA,IAAGK,EAAsB,CAClC,CAEA,MAAM,gBAAgB3D,EAAa4D,EAA4C,CAE7E,OADY,QAAMC,GAAA,GAAc,KAAK,QAAQ7D,EAAK4D,EAAQ,CAAE,kBAAmB,EAAK,CAAC,CAAC,GAC3E,IACb,CAEA,MAAM,gBAA+D,CACnE,aAAM,KAAK,gBAAgB,GAAG1F,YAAoB,EAC3C,CAAE,OAAQ,UAAW,QAAS,wBAAyB,CAChE,CAEA,oBAAoBV,EAA4B,CAC9C,OAAOA,EAAM,KACf,CAEA,8BAA8BsG,EAAwBC,EAAuC,CAC3F,MAAI,CAACD,GAAWA,EAAQ,SAAW,EAC1B,CAAC,EAGHA,EAAQ,IAAKtG,IACX,CACL,GAAGA,EACH,WAAY,KAAK,OAAO,EACxB,GAAG,KAAK,eAAeA,EAAOuG,CAAU,CAC1C,EACD,CACH,CAEA,eAAevG,EAAoBuG,EAAwB,CAGzD,MAAO,CACL,GAHoB,CAAE,GAAGvG,CAAM,EAI/B,MAAO,KAAK,YAAY,QAAQA,EAAM,OAAS,GAAIuG,CAAU,CAC/D,CACF,CAEQ,QACNC,EACAjC,EACA/E,EAC8B,CAC9B,MAAM4G,EAAS7B,KAAO,OAAgBA,CAAI,EAAI,GACxC/B,EAAM,GAAG,KAAK,iBAAiB,MAAMgE,IAASJ,EAAO,OAAS,IAAIA,IAAW,KAC7EK,EAAM,CACV,GAAGjH,EACH,IAAAgD,CACF,EAEA,SAAO,MAAc,EAAE,MAASiE,CAAG,CACrC,CACF,CAEA,SAAST,EAA4B3C,EAAkCqD,EAAY,GAA0B,CAC3G,IAAInC,EAAOlB,GAAU,KAAO,IAAC,MAAkBA,GAAU,IAAI,CAAC,EAAI,CAAC,EACnE,OAAIqD,GACFnC,EAAK,KAAK,GAAGD,GAAkBjB,GAAU,IAAI,CAAC,EAEzC,CACL,KAAAkB,CACF,CACF,CAEA,MAAM4B,GAAyB,CAC7B,KAAM,IACJ,OAAgB,CACd,OAAQ,CACN,CACE,KAAM,QACN,KAAM,MAAU,MAChB,OAAQ,CAAC,CACX,CACF,EACA,KAAM,CACJ,2BAA4B,QAC5B,OAAQ,CACN,YAAa,QACf,CACF,CACF,CAAC,CACH,CACF,EC3Ia,GAAS,IAAI,KAAiBT,EAAgB,EACxD,eAAe/E,EAAgB,EAC/B,gBAAgBN,CAAY,C,kDCP3B2C,EAAW,SAAU2D,EAAI,IACzB,KAAc,UAAY,CACtBA,EAAG,CACP,CAAC,CACL,EACA,QAAe3D,C","sources":["webpack://grafana/./public/app/core/components/Divider.tsx","webpack://grafana/./public/app/core/components/NodeGraphSettings.tsx","webpack://grafana/./public/app/core/components/TraceToMetrics/TraceToMetricsSettings.tsx","webpack://grafana/./public/app/plugins/datasource/zipkin/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/zipkin/constants.ts","webpack://grafana/./public/app/plugins/datasource/zipkin/QueryField.tsx","webpack://grafana/./public/app/plugins/datasource/zipkin/utils/graphTransform.ts","webpack://grafana/./public/app/plugins/datasource/zipkin/datasource.ts","webpack://grafana/./public/app/plugins/datasource/zipkin/module.ts","webpack://grafana/./.yarn/__virtual__/react-use-virtual-dd7926f458/0/cache/react-use-npm-17.4.0-0ef4521544-0889da919b.zip/node_modules/react-use/esm/useMount.js"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nexport const Divider = ({ hideLine = false }) => {\n  const styles = useStyles2(getStyles);\n\n  if (hideLine) {\n    return <hr className={styles.dividerHideLine} />;\n  }\n\n  return <hr className={styles.divider} />;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  divider: css`\n    margin: ${theme.spacing(4, 0)};\n  `,\n  dividerHideLine: css`\n    border: none;\n    margin: ${theme.spacing(3, 0)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport {\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme2,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { ConfigSubSection } from '@grafana/experimental';\nimport { InlineField, InlineFieldRow, InlineSwitch, useStyles2 } from '@grafana/ui';\n\nimport { ConfigDescriptionLink } from './ConfigDescriptionLink';\n\nexport interface NodeGraphOptions {\n  enabled?: boolean;\n}\n\nexport interface NodeGraphData extends DataSourceJsonData {\n  nodeGraph?: NodeGraphOptions;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<NodeGraphData> {}\n\nexport function NodeGraphSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <InlineFieldRow className={styles.row}>\n        <InlineField\n          tooltip=\"Displays the node graph above the trace view. Default: disabled\"\n          label=\"Enable node graph\"\n          labelWidth={26}\n        >\n          <InlineSwitch\n            id=\"enableNodeGraph\"\n            value={options.jsonData.nodeGraph?.enabled}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'nodeGraph', {\n                ...options.jsonData.nodeGraph,\n                enabled: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </div>\n  );\n}\n\nexport const NodeGraphSection = ({ options, onOptionsChange }: DataSourcePluginOptionsEditorProps) => {\n  return (\n    <ConfigSubSection\n      title=\"Node graph\"\n      description={\n        <ConfigDescriptionLink\n          description=\"Show or hide the node graph visualization.\"\n          suffix={`${options.type}/#node-graph`}\n          feature=\"the node graph\"\n        />\n      }\n    >\n      <NodeGraphSettings options={options} onOptionsChange={onOptionsChange} />\n    </ConfigSubSection>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  infoText: css`\n    label: infoText;\n    padding-bottom: ${theme.spacing(2)};\n    color: ${theme.colors.text.secondary};\n  `,\n  container: css`\n    label: container;\n    width: 100%;\n  `,\n  row: css`\n    label: row;\n    align-items: baseline;\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport {\n  DataSourceInstanceSettings,\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme2,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { ConfigSection } from '@grafana/experimental';\nimport { Button, InlineField, InlineFieldRow, Input, useStyles2 } from '@grafana/ui';\nimport { DataSourcePicker } from 'app/features/datasources/components/picker/DataSourcePicker';\n\nimport { ConfigDescriptionLink } from '../ConfigDescriptionLink';\nimport { IntervalInput } from '../IntervalInput/IntervalInput';\nimport { TagMappingInput } from '../TraceToLogs/TagMappingInput';\nimport { getTimeShiftLabel, getTimeShiftTooltip, invalidTimeShiftError } from '../TraceToLogs/TraceToLogsSettings';\n\nexport interface TraceToMetricsOptions {\n  datasourceUid?: string;\n  tags?: Array<{ key: string; value: string }>;\n  queries: TraceToMetricQuery[];\n  spanStartTimeShift?: string;\n  spanEndTimeShift?: string;\n}\n\nexport interface TraceToMetricQuery {\n  name?: string;\n  query?: string;\n}\n\nexport interface TraceToMetricsData extends DataSourceJsonData {\n  tracesToMetrics?: TraceToMetricsOptions;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TraceToMetricsData> {}\n\nexport function TraceToMetricsSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={css({ width: '100%' })}>\n      <InlineFieldRow className={styles.row}>\n        <InlineField\n          tooltip=\"The Prometheus data source the trace is going to navigate to\"\n          label=\"Data source\"\n          labelWidth={26}\n        >\n          <DataSourcePicker\n            inputId=\"trace-to-metrics-data-source-picker\"\n            pluginId=\"prometheus\"\n            current={options.jsonData.tracesToMetrics?.datasourceUid}\n            noDefault={true}\n            width={40}\n            onChange={(ds: DataSourceInstanceSettings) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                ...options.jsonData.tracesToMetrics,\n                datasourceUid: ds.uid,\n              })\n            }\n          />\n        </InlineField>\n        {options.jsonData.tracesToMetrics?.datasourceUid ? (\n          <Button\n            type=\"button\"\n            variant=\"secondary\"\n            size=\"sm\"\n            fill=\"text\"\n            onClick={() => {\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                ...options.jsonData.tracesToMetrics,\n                datasourceUid: undefined,\n              });\n            }}\n          >\n            Clear\n          </Button>\n        ) : null}\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <IntervalInput\n          label={getTimeShiftLabel('start')}\n          tooltip={getTimeShiftTooltip('start', '-2m')}\n          value={options.jsonData.tracesToMetrics?.spanStartTimeShift || ''}\n          onChange={(val) => {\n            updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n              ...options.jsonData.tracesToMetrics,\n              spanStartTimeShift: val,\n            });\n          }}\n          placeholder={'-2m'}\n          isInvalidError={invalidTimeShiftError}\n        />\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <IntervalInput\n          label={getTimeShiftLabel('end')}\n          tooltip={getTimeShiftTooltip('end', '2m')}\n          value={options.jsonData.tracesToMetrics?.spanEndTimeShift || ''}\n          onChange={(val) => {\n            updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n              ...options.jsonData.tracesToMetrics,\n              spanEndTimeShift: val,\n            });\n          }}\n          placeholder={'2m'}\n          isInvalidError={invalidTimeShiftError}\n        />\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField tooltip=\"Tags that will be used in the metrics query\" label=\"Tags\" labelWidth={26}>\n          <TagMappingInput\n            values={options.jsonData.tracesToMetrics?.tags ?? []}\n            onChange={(v) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                ...options.jsonData.tracesToMetrics,\n                tags: v,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      {options.jsonData.tracesToMetrics?.queries?.map((query, i) => (\n        <div key={i} className={styles.queryRow}>\n          <InlineField label=\"Link Label\" labelWidth={26} tooltip=\"Descriptive label for the linked query\">\n            <Input\n              label=\"Link Label\"\n              type=\"text\"\n              allowFullScreen\n              value={query.name}\n              width={40}\n              onChange={(e) => {\n                let newQueries = options.jsonData.tracesToMetrics?.queries.slice() ?? [];\n                newQueries[i].name = e.currentTarget.value;\n                updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                  ...options.jsonData.tracesToMetrics,\n                  queries: newQueries,\n                });\n              }}\n            />\n          </InlineField>\n          <InlineField\n            label=\"Query\"\n            labelWidth={10}\n            tooltip=\"The Prometheus query that will run when navigating from a trace to metrics. Interpolate tags using the `$__tags` keyword\"\n            grow\n          >\n            <Input\n              label=\"Query\"\n              type=\"text\"\n              allowFullScreen\n              value={query.query}\n              onChange={(e) => {\n                let newQueries = options.jsonData.tracesToMetrics?.queries.slice() ?? [];\n                newQueries[i].query = e.currentTarget.value;\n                updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                  ...options.jsonData.tracesToMetrics,\n                  queries: newQueries,\n                });\n              }}\n            />\n          </InlineField>\n\n          <Button\n            variant=\"destructive\"\n            title=\"Remove query\"\n            icon=\"times\"\n            type=\"button\"\n            onClick={() => {\n              let newQueries = options.jsonData.tracesToMetrics?.queries.slice();\n              newQueries?.splice(i, 1);\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                ...options.jsonData.tracesToMetrics,\n                queries: newQueries,\n              });\n            }}\n          />\n        </div>\n      ))}\n\n      <Button\n        variant=\"secondary\"\n        title=\"Add query\"\n        icon=\"plus\"\n        type=\"button\"\n        onClick={() => {\n          updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n            ...options.jsonData.tracesToMetrics,\n            queries: [...(options.jsonData.tracesToMetrics?.queries ?? []), { query: '' }],\n          });\n        }}\n      >\n        Add query\n      </Button>\n    </div>\n  );\n}\n\nexport const TraceToMetricsSection = ({ options, onOptionsChange }: DataSourcePluginOptionsEditorProps) => {\n  return (\n    <ConfigSection\n      title=\"Trace to metrics\"\n      description={\n        <ConfigDescriptionLink\n          description=\"Navigate from a trace span to the selected data source's metrics.\"\n          suffix={`${options.type}/#trace-to-metrics`}\n          feature=\"trace to metrics\"\n        />\n      }\n      isCollapsible={true}\n      isInitiallyOpen={true}\n    >\n      <TraceToMetricsSettings options={options} onOptionsChange={onOptionsChange} />\n    </ConfigSection>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing(2)};\n    color: ${theme.colors.text.secondary};\n  `,\n  row: css`\n    label: row;\n    align-items: baseline;\n  `,\n  queryRow: css`\n    label: queryRow;\n    display: flex;\n    flex-flow: wrap;\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { DataSourcePluginOptionsEditorProps, GrafanaTheme2 } from '@grafana/data';\nimport { ConfigSection, DataSourceDescription } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { DataSourceHttpSettings, useStyles2 } from '@grafana/ui';\nimport { Divider } from 'app/core/components/Divider';\nimport { NodeGraphSection } from 'app/core/components/NodeGraphSettings';\nimport { TraceToLogsSection } from 'app/core/components/TraceToLogs/TraceToLogsSettings';\nimport { TraceToMetricsSection } from 'app/core/components/TraceToMetrics/TraceToMetricsSettings';\nimport { SpanBarSection } from 'app/features/explore/TraceView/components/settings/SpanBarSettings';\n\nexport type Props = DataSourcePluginOptionsEditorProps;\n\nexport const ConfigEditor = ({ options, onOptionsChange }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <DataSourceDescription\n        dataSourceName=\"Zipkin\"\n        docsLink=\"https://grafana.com/docs/grafana/latest/datasources/zipkin\"\n        hasRequiredFields={false}\n      />\n\n      <Divider />\n\n      <DataSourceHttpSettings\n        defaultUrl=\"http://localhost:9411\"\n        dataSourceConfig={options}\n        showAccessOptions={false}\n        onChange={onOptionsChange}\n        secureSocksDSProxyEnabled={config.secureSocksDSProxyEnabled}\n      />\n\n      <TraceToLogsSection options={options} onOptionsChange={onOptionsChange} />\n\n      <Divider />\n\n      {config.featureToggles.traceToMetrics ? (\n        <>\n          <TraceToMetricsSection options={options} onOptionsChange={onOptionsChange} />\n          <Divider />\n        </>\n      ) : null}\n\n      <ConfigSection\n        title=\"Additional settings\"\n        description=\"Additional settings are optional settings that can be configured for more control over your data source.\"\n        isCollapsible={true}\n        isInitiallyOpen={false}\n      >\n        <NodeGraphSection options={options} onOptionsChange={onOptionsChange} />\n        <Divider hideLine={true} />\n        <SpanBarSection options={options} onOptionsChange={onOptionsChange} />\n      </ConfigSection>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    label: container;\n    margin-bottom: ${theme.spacing(2)};\n    max-width: 900px;\n  `,\n});\n","export const apiPrefix = '/api/v2';\n","import { css } from '@emotion/css';\nimport { fromPairs } from 'lodash';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useAsyncFn, useMount, useMountedState } from 'react-use';\nimport { AsyncState } from 'react-use/lib/useAsyncFn';\n\nimport { GrafanaTheme2, QueryEditorProps } from '@grafana/data';\nimport {\n  ButtonCascader,\n  CascaderOption,\n  FileDropzone,\n  InlineField,\n  InlineFieldRow,\n  RadioButtonGroup,\n  useTheme2,\n  QueryField,\n  useStyles2,\n  Modal,\n  HorizontalGroup,\n  Button,\n} from '@grafana/ui';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { dispatch } from 'app/store/store';\n\nimport { apiPrefix } from './constants';\nimport { ZipkinDatasource } from './datasource';\nimport { ZipkinQuery, ZipkinQueryType, ZipkinSpan } from './types';\n\ntype Props = QueryEditorProps<ZipkinDatasource, ZipkinQuery>;\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    tracesCascader: css({\n      label: 'tracesCascader',\n      marginRight: theme.spacing(1),\n    }),\n  };\n};\n\nexport const ZipkinQueryField = ({ query, onChange, onRunQuery, datasource }: Props) => {\n  const [uploadModalOpen, setUploadModalOpen] = useState(false);\n  const serviceOptions = useServices(datasource);\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n  const { onLoadOptions, allOptions } = useLoadOptions(datasource);\n\n  const onSelectTrace = useCallback(\n    (values: string[], selectedOptions: CascaderOption[]) => {\n      if (selectedOptions.length === 3) {\n        const traceID = selectedOptions[2].value;\n        onChange({ ...query, query: traceID });\n        onRunQuery();\n      }\n    },\n    [onChange, onRunQuery, query]\n  );\n\n  useEffect(() => {\n    if (!query.queryType) {\n      onChange({\n        ...query,\n        queryType: 'traceID',\n      });\n    }\n  }, [query, onChange]);\n\n  const onChangeQuery = (value: string) => {\n    const nextQuery = { ...query, query: value };\n    onChange(nextQuery);\n  };\n\n  let cascaderOptions = useMapToCascaderOptions(serviceOptions, allOptions);\n\n  return (\n    <>\n      <Modal title={'Upload trace'} isOpen={uploadModalOpen} onDismiss={() => setUploadModalOpen(false)}>\n        <div className={css({ padding: theme.spacing(2) })}>\n          <FileDropzone\n            options={{ multiple: false }}\n            onLoad={(result) => {\n              datasource.uploadedJson = result;\n              onChange({\n                ...query,\n                queryType: 'upload',\n              });\n              setUploadModalOpen(false);\n              onRunQuery();\n            }}\n          />\n        </div>\n      </Modal>\n      <InlineFieldRow>\n        <InlineField label=\"Query type\" grow={true}>\n          <HorizontalGroup spacing={'sm'} align={'center'} justify={'space-between'}>\n            <RadioButtonGroup<ZipkinQueryType>\n              options={[{ value: 'traceID', label: 'TraceID' }]}\n              value={query.queryType || 'traceID'}\n              onChange={(v) =>\n                onChange({\n                  ...query,\n                  queryType: v,\n                })\n              }\n              size=\"md\"\n            />\n            <Button\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={() => {\n                setUploadModalOpen(true);\n              }}\n            >\n              Import trace\n            </Button>\n          </HorizontalGroup>\n        </InlineField>\n      </InlineFieldRow>\n      {query.queryType === 'traceID' && (\n        <InlineFieldRow>\n          <ButtonCascader\n            options={cascaderOptions}\n            onChange={onSelectTrace}\n            loadData={onLoadOptions}\n            variant=\"secondary\"\n            buttonProps={{ className: styles.tracesCascader }}\n          >\n            Traces\n          </ButtonCascader>\n          <div className=\"gf-form gf-form--grow flex-shrink-1 min-width-15\">\n            <QueryField\n              query={query.query}\n              onChange={onChangeQuery}\n              onRunQuery={onRunQuery}\n              placeholder={'Insert Trace ID (run with Shift+Enter)'}\n              portalOrigin=\"zipkin\"\n            />\n          </div>\n        </InlineFieldRow>\n      )}\n    </>\n  );\n};\n\n// Exported for tests\nexport function useServices(datasource: ZipkinDatasource): AsyncState<CascaderOption[]> {\n  const url = `${apiPrefix}/services`;\n\n  const [servicesOptions, fetch] = useAsyncFn(async (): Promise<CascaderOption[]> => {\n    try {\n      const services: string[] | null = await datasource.metadataRequest(url);\n      if (services) {\n        return services.sort().map((service) => ({\n          label: service,\n          value: service,\n          isLeaf: false,\n        }));\n      }\n      return [];\n    } catch (error) {\n      const errorToShow = error instanceof Error ? error : 'An unknown error occurred';\n      dispatch(notifyApp(createErrorNotification('Failed to load services from Zipkin', errorToShow)));\n      throw error;\n    }\n  }, [datasource]);\n\n  useMount(() => {\n    // We should probably call this periodically to get new services after mount.\n    fetch();\n  });\n\n  return servicesOptions;\n}\n\ntype OptionsState = {\n  [serviceName: string]: {\n    [spanName: string]: {\n      [traceId: string]: string;\n    };\n  };\n};\n\n// Exported for tests\nexport function useLoadOptions(datasource: ZipkinDatasource) {\n  const isMounted = useMountedState();\n  const [allOptions, setAllOptions] = useState({} as OptionsState);\n\n  const [, fetchSpans] = useAsyncFn(\n    async function findSpans(service: string): Promise<void> {\n      const url = `${apiPrefix}/spans`;\n      try {\n        // The response of this should have been full ZipkinSpan objects based on API docs but is just list\n        // of span names.\n        // TODO: check if this is some issue of version used or something else\n        const response: string[] = await datasource.metadataRequest(url, { serviceName: service });\n        if (isMounted()) {\n          setAllOptions((state) => {\n            const spanOptions = fromPairs(response.map((span: string) => [span, undefined]));\n            return {\n              ...state,\n              [service]: spanOptions as any,\n            };\n          });\n        }\n      } catch (error) {\n        const errorToShow = error instanceof Error ? error : 'An unknown error occurred';\n        dispatch(notifyApp(createErrorNotification('Failed to load spans from Zipkin', errorToShow)));\n        throw error;\n      }\n    },\n    [datasource, allOptions]\n  );\n\n  const [, fetchTraces] = useAsyncFn(\n    async function findTraces(serviceName: string, spanName: string): Promise<void> {\n      const url = `${apiPrefix}/traces`;\n      const search = {\n        serviceName,\n        spanName,\n        // See other params and default here https://zipkin.io/zipkin-api/#/default/get_traces\n      };\n      try {\n        // This should return just root traces as there isn't any nesting\n        const traces: ZipkinSpan[][] = await datasource.metadataRequest(url, search);\n        if (isMounted()) {\n          const newTraces = traces.length\n            ? fromPairs(\n                traces.map((trace) => {\n                  const rootSpan = trace.find((span) => !span.parentId)!;\n\n                  return [`${rootSpan.name} [${Math.floor(rootSpan.duration / 1000)} ms]`, rootSpan.traceId];\n                })\n              )\n            : noTracesOptions;\n\n          setAllOptions((state) => {\n            const spans = state[serviceName];\n            return {\n              ...state,\n              [serviceName]: {\n                ...spans,\n                [spanName]: newTraces,\n              },\n            };\n          });\n        }\n      } catch (error) {\n        const errorToShow = error instanceof Error ? error : 'An unknown error occurred';\n        dispatch(notifyApp(createErrorNotification('Failed to load spans from Zipkin', errorToShow)));\n        throw error;\n      }\n    },\n    [datasource]\n  );\n\n  const onLoadOptions = useCallback(\n    (selectedOptions: CascaderOption[]) => {\n      const service = selectedOptions[0].value;\n      if (selectedOptions.length === 1) {\n        fetchSpans(service);\n      } else if (selectedOptions.length === 2) {\n        const spanName = selectedOptions[1].value;\n        fetchTraces(service, spanName);\n      }\n    },\n    [fetchSpans, fetchTraces]\n  );\n\n  return {\n    onLoadOptions,\n    allOptions,\n  };\n}\n\nfunction useMapToCascaderOptions(services: AsyncState<CascaderOption[]>, allOptions: OptionsState) {\n  return useMemo(() => {\n    let cascaderOptions: CascaderOption[] = [];\n\n    if (services.value && services.value.length) {\n      cascaderOptions = services.value.map((services) => {\n        return {\n          ...services,\n          children:\n            allOptions[services.value] &&\n            Object.keys(allOptions[services.value]).map((spanName) => {\n              return {\n                label: spanName,\n                value: spanName,\n                isLeaf: false,\n                children:\n                  allOptions[services.value][spanName] &&\n                  Object.keys(allOptions[services.value][spanName]).map((traceName) => {\n                    return {\n                      label: traceName,\n                      value: allOptions[services.value][spanName][traceName],\n                    };\n                  }),\n              };\n            }),\n        };\n      });\n    } else if (services.value && !services.value.length) {\n      cascaderOptions = noTracesFoundOptions;\n    }\n\n    return cascaderOptions;\n  }, [services, allOptions]);\n}\n\nconst NO_TRACES_KEY = '__NO_TRACES__';\nconst noTracesFoundOptions = [\n  {\n    label: 'No traces found',\n    value: 'no_traces',\n    isLeaf: true,\n\n    // Cannot be disabled because then cascader shows 'loading' for some reason.\n    // disabled: true,\n  },\n];\n\nconst noTracesOptions = {\n  '[No traces in time range]': NO_TRACES_KEY,\n};\n","import { DataFrame, NodeGraphDataFrameFieldNames as Fields } from '@grafana/data';\n\nimport { getNonOverlappingDuration, getStats, makeFrames, makeSpanMap } from '../../../../core/utils/tracing';\nimport { ZipkinSpan } from '../types';\n\ninterface Node {\n  [Fields.id]: string;\n  [Fields.title]: string;\n  [Fields.subTitle]: string;\n  [Fields.mainStat]: string;\n  [Fields.secondaryStat]: string;\n  [Fields.color]: number;\n}\n\ninterface Edge {\n  [Fields.id]: string;\n  [Fields.target]: string;\n  [Fields.source]: string;\n}\n\nexport function createGraphFrames(data: ZipkinSpan[]): DataFrame[] {\n  const { nodes, edges } = convertTraceToGraph(data);\n  const [nodesFrame, edgesFrame] = makeFrames();\n\n  for (const node of nodes) {\n    nodesFrame.add(node);\n  }\n\n  for (const edge of edges) {\n    edgesFrame.add(edge);\n  }\n\n  return [nodesFrame, edgesFrame];\n}\n\nfunction convertTraceToGraph(spans: ZipkinSpan[]): { nodes: Node[]; edges: Edge[] } {\n  const nodes: Node[] = [];\n  const edges: Edge[] = [];\n\n  const traceDuration = findTraceDuration(spans);\n  const spanMap = makeSpanMap((index) => {\n    if (index >= spans.length) {\n      return undefined;\n    }\n    return {\n      span: spans[index],\n      id: spans[index].id,\n      parentIds: spans[index].parentId ? [spans[index].parentId!] : [],\n    };\n  });\n\n  for (const span of spans) {\n    const ranges: Array<[number, number]> = spanMap[span.id].children.map((c) => {\n      const span = spanMap[c].span;\n      return [span.timestamp, span.timestamp + span.duration];\n    });\n    const childrenDuration = getNonOverlappingDuration(ranges);\n    const selfDuration = span.duration - childrenDuration;\n    const stats = getStats(span.duration / 1000, traceDuration / 1000, selfDuration / 1000);\n\n    nodes.push({\n      [Fields.id]: span.id,\n      [Fields.title]: span.localEndpoint?.serviceName || span.remoteEndpoint?.serviceName || 'unknown',\n      [Fields.subTitle]: span.name,\n      [Fields.mainStat]: stats.main,\n      [Fields.secondaryStat]: stats.secondary,\n      [Fields.color]: selfDuration / traceDuration,\n    });\n\n    if (span.parentId && spanMap[span.parentId].span) {\n      edges.push({\n        [Fields.id]: span.parentId + '--' + span.id,\n        [Fields.target]: span.id,\n        [Fields.source]: span.parentId,\n      });\n    }\n  }\n\n  return { nodes, edges };\n}\n\n/**\n * Get the duration of the whole trace as it isn't a part of the response data.\n * Note: Seems like this should be the same as just longest span, but this is probably safer.\n */\nfunction findTraceDuration(spans: ZipkinSpan[]): number {\n  let traceEndTime = 0;\n  let traceStartTime = Infinity;\n\n  for (const span of spans) {\n    if (span.timestamp < traceStartTime) {\n      traceStartTime = span.timestamp;\n    }\n\n    if (span.timestamp + span.duration > traceEndTime) {\n      traceEndTime = span.timestamp + span.duration;\n    }\n  }\n  return traceEndTime - traceStartTime;\n}\n","import { lastValueFrom, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  DataSourceJsonData,\n  FieldType,\n  createDataFrame,\n  ScopedVars,\n} from '@grafana/data';\nimport { BackendSrvRequest, FetchResponse, getBackendSrv, getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport { NodeGraphOptions } from 'app/core/components/NodeGraphSettings';\nimport { SpanBarOptions } from 'app/features/explore/TraceView/components';\n\nimport { serializeParams } from '../../../core/utils/fetch';\n\nimport { apiPrefix } from './constants';\nimport { ZipkinQuery, ZipkinSpan } from './types';\nimport { createGraphFrames } from './utils/graphTransform';\nimport { transformResponse } from './utils/transforms';\n\nexport interface ZipkinJsonData extends DataSourceJsonData {\n  nodeGraph?: NodeGraphOptions;\n}\n\nexport class ZipkinDatasource extends DataSourceApi<ZipkinQuery, ZipkinJsonData> {\n  uploadedJson: string | ArrayBuffer | null = null;\n  nodeGraph?: NodeGraphOptions;\n  spanBar?: SpanBarOptions;\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings<ZipkinJsonData>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n    this.nodeGraph = instanceSettings.jsonData.nodeGraph;\n  }\n\n  query(options: DataQueryRequest<ZipkinQuery>): Observable<DataQueryResponse> {\n    const target = options.targets[0];\n    if (target.queryType === 'upload') {\n      if (!this.uploadedJson) {\n        return of({ data: [] });\n      }\n\n      try {\n        const traceData = JSON.parse(this.uploadedJson as string);\n        return of(responseToDataQueryResponse({ data: traceData }, this.nodeGraph?.enabled));\n      } catch (error) {\n        return of({ error: { message: 'JSON is not valid Zipkin format' }, data: [] });\n      }\n    }\n\n    if (target.query) {\n      const query = this.applyVariables(target, options.scopedVars);\n      return this.request<ZipkinSpan[]>(`${apiPrefix}/trace/${encodeURIComponent(query.query)}`).pipe(\n        map((res) => responseToDataQueryResponse(res, this.nodeGraph?.enabled))\n      );\n    }\n    return of(emptyDataQueryResponse);\n  }\n\n  async metadataRequest(url: string, params?: Record<string, any>): Promise<any> {\n    const res = await lastValueFrom(this.request(url, params, { hideFromInspector: true }));\n    return res.data;\n  }\n\n  async testDatasource(): Promise<{ status: string; message: string }> {\n    await this.metadataRequest(`${apiPrefix}/services`);\n    return { status: 'success', message: 'Data source is working' };\n  }\n\n  getQueryDisplayText(query: ZipkinQuery): string {\n    return query.query;\n  }\n\n  interpolateVariablesInQueries(queries: ZipkinQuery[], scopedVars: ScopedVars): ZipkinQuery[] {\n    if (!queries || queries.length === 0) {\n      return [];\n    }\n\n    return queries.map((query) => {\n      return {\n        ...query,\n        datasource: this.getRef(),\n        ...this.applyVariables(query, scopedVars),\n      };\n    });\n  }\n\n  applyVariables(query: ZipkinQuery, scopedVars: ScopedVars) {\n    const expandedQuery = { ...query };\n\n    return {\n      ...expandedQuery,\n      query: this.templateSrv.replace(query.query ?? '', scopedVars),\n    };\n  }\n\n  private request<T = any>(\n    apiUrl: string,\n    data?: any,\n    options?: Partial<BackendSrvRequest>\n  ): Observable<FetchResponse<T>> {\n    const params = data ? serializeParams(data) : '';\n    const url = `${this.instanceSettings.url}${apiUrl}${params.length ? `?${params}` : ''}`;\n    const req = {\n      ...options,\n      url,\n    };\n\n    return getBackendSrv().fetch<T>(req);\n  }\n}\n\nfunction responseToDataQueryResponse(response: { data: ZipkinSpan[] }, nodeGraph = false): DataQueryResponse {\n  let data = response?.data ? [transformResponse(response?.data)] : [];\n  if (nodeGraph) {\n    data.push(...createGraphFrames(response?.data));\n  }\n  return {\n    data,\n  };\n}\n\nconst emptyDataQueryResponse = {\n  data: [\n    createDataFrame({\n      fields: [\n        {\n          name: 'trace',\n          type: FieldType.trace,\n          values: [],\n        },\n      ],\n      meta: {\n        preferredVisualisationType: 'trace',\n        custom: {\n          traceFormat: 'zipkin',\n        },\n      },\n    }),\n  ],\n};\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport { ConfigEditor } from './ConfigEditor';\nimport { ZipkinQueryField } from './QueryField';\nimport { ZipkinDatasource } from './datasource';\n\nexport const plugin = new DataSourcePlugin(ZipkinDatasource)\n  .setQueryEditor(ZipkinQueryField)\n  .setConfigEditor(ConfigEditor);\n","import useEffectOnce from './useEffectOnce';\nvar useMount = function (fn) {\n    useEffectOnce(function () {\n        fn();\n    });\n};\nexport default useMount;\n"],"names":["Divider","hideLine","styles","getStyles","theme","NodeGraphSettings","options","onOptionsChange","event","NodeGraphSection","TraceToMetricsSettings","ds","val","v","query","i","e","newQueries","TraceToMetricsSection","ConfigEditor","DataSourceDescription","DataSourceHttpSettings","config","ConfigSection","apiPrefix","ZipkinQueryField","onChange","onRunQuery","datasource","uploadModalOpen","setUploadModalOpen","serviceOptions","useServices","onLoadOptions","allOptions","useLoadOptions","onSelectTrace","values","selectedOptions","traceID","onChangeQuery","value","nextQuery","cascaderOptions","useMapToCascaderOptions","Modal","FileDropzone","result","InlineFieldRow","InlineField","RadioButtonGroup","Button","ButtonCascader","QueryField","url","servicesOptions","fetch","useAsyncFn","services","service","error","errorToShow","useMount","isMounted","useMountedState","setAllOptions","fetchSpans","response","state","spanOptions","span","fetchTraces","serviceName","spanName","search","traces","newTraces","trace","rootSpan","noTracesOptions","spans","traceName","noTracesFoundOptions","NO_TRACES_KEY","createGraphFrames","data","nodes","edges","convertTraceToGraph","nodesFrame","edgesFrame","node","edge","traceDuration","findTraceDuration","spanMap","index","ranges","c","childrenDuration","selfDuration","stats","traceEndTime","traceStartTime","ZipkinDatasource","instanceSettings","templateSrv","target","of","traceData","responseToDataQueryResponse","map","res","emptyDataQueryResponse","params","lastValueFrom","queries","scopedVars","apiUrl","req","nodeGraph","fn"],"sourceRoot":""}