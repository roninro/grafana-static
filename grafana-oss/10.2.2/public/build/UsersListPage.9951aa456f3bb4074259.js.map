{"version":3,"file":"UsersListPage.9951aa456f3bb4074259.js","mappings":"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","sources":["webpack://grafana/./public/app/features/admin/Users/OrgUsersTable.tsx","webpack://grafana/./public/app/features/invites/InviteeRow.tsx","webpack://grafana/./public/app/features/invites/InviteesTable.tsx","webpack://grafana/./public/app/features/invites/state/selectors.ts","webpack://grafana/./public/app/features/users/state/actions.ts","webpack://grafana/./public/app/features/users/state/selectors.ts","webpack://grafana/./public/app/features/users/UsersActionBar.tsx","webpack://grafana/./public/app/features/users/UsersListPage.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useEffect, useMemo, useState } from 'react';\n\nimport { GrafanaTheme2, OrgRole } from '@grafana/data';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors';\nimport {\n  Button,\n  ConfirmModal,\n  Icon,\n  Tooltip,\n  CellProps,\n  useStyles2,\n  Tag,\n  InteractiveTable,\n  Column,\n  FetchDataFunc,\n  Pagination,\n  HorizontalGroup,\n  VerticalGroup,\n  Avatar,\n} from '@grafana/ui';\nimport { UserRolePicker } from 'app/core/components/RolePicker/UserRolePicker';\nimport { fetchRoleOptions } from 'app/core/components/RolePicker/api';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, OrgUser, Role } from 'app/types';\n\nimport { OrgRolePicker } from '../OrgRolePicker';\n\ntype Cell<T extends keyof OrgUser = keyof OrgUser> = CellProps<OrgUser, OrgUser[T]>;\n\nconst disabledRoleMessage = `This user's role is not editable because it is synchronized from your auth provider.\n  Refer to the Grafana authentication docs for details.`;\n\nconst getBasicRoleDisabled = (user: OrgUser) => {\n  let basicRoleDisabled = !contextSrv.hasPermissionInMetadata(AccessControlAction.OrgUsersWrite, user);\n  let authLabel = Array.isArray(user.authLabels) && user.authLabels.length > 0 ? user.authLabels[0] : '';\n  // A GCom specific feature toggle for role locking has been introduced, as the previous implementation had a bug with locking down external users synced through GCom (https://github.com/grafana/grafana/pull/72044)\n  // Remove this conditional once FlagGcomOnlyExternalOrgRoleSync feature toggle has been removed\n  if (authLabel !== 'grafana.com' || config.featureToggles.gcomOnlyExternalOrgRoleSync) {\n    const isUserSynced = user?.isExternallySynced;\n    basicRoleDisabled = isUserSynced || basicRoleDisabled;\n  }\n\n  return basicRoleDisabled;\n};\n\nconst selectors = e2eSelectors.pages.UserListPage.UsersListPage;\n\nexport interface Props {\n  users: OrgUser[];\n  orgId?: number;\n  onRoleChange: (role: OrgRole, user: OrgUser) => void;\n  onRemoveUser: (user: OrgUser) => void;\n  fetchData?: FetchDataFunc<OrgUser>;\n  changePage: (page: number) => void;\n  page: number;\n  totalPages: number;\n  rolesLoading?: boolean;\n}\n\nexport const OrgUsersTable = ({\n  users,\n  orgId,\n  onRoleChange,\n  onRemoveUser,\n  fetchData,\n  changePage,\n  page,\n  totalPages,\n  rolesLoading,\n}: Props) => {\n  const [userToRemove, setUserToRemove] = useState<OrgUser | null>(null);\n  const [roleOptions, setRoleOptions] = useState<Role[]>([]);\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    async function fetchOptions() {\n      try {\n        if (contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n          let options = await fetchRoleOptions(orgId);\n          setRoleOptions(options);\n        }\n      } catch (e) {\n        console.error('Error loading options');\n      }\n    }\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchOptions();\n    }\n  }, [orgId]);\n\n  const columns: Array<Column<OrgUser>> = useMemo(\n    () => [\n      {\n        id: 'avatarUrl',\n        header: '',\n        cell: ({ cell: { value } }: Cell<'avatarUrl'>) => value && <Avatar src={value} alt=\"User avatar\" />,\n      },\n      {\n        id: 'login',\n        header: 'Login',\n        cell: ({ cell: { value } }: Cell<'login'>) => <div>{value}</div>,\n        sortType: 'string',\n      },\n      {\n        id: 'email',\n        header: 'Email',\n        cell: ({ cell: { value } }: Cell<'email'>) => value,\n        sortType: 'string',\n      },\n      {\n        id: 'name',\n        header: 'Name',\n        cell: ({ cell: { value } }: Cell<'name'>) => value,\n        sortType: 'string',\n      },\n      {\n        id: 'lastSeenAtAge',\n        header: 'Last active',\n        cell: ({ cell: { value } }: Cell<'lastSeenAtAge'>) => value,\n        sortType: (a, b) => new Date(a.original.lastSeenAt).getTime() - new Date(b.original.lastSeenAt).getTime(),\n      },\n      {\n        id: 'role',\n        header: 'Role',\n        cell: ({ cell: { value }, row: { original } }: Cell<'role'>) => {\n          const basicRoleDisabled = getBasicRoleDisabled(original);\n          return contextSrv.licensedAccessControlEnabled() ? (\n            <UserRolePicker\n              userId={original.userId}\n              roles={original.roles || []}\n              isLoading={rolesLoading}\n              orgId={orgId}\n              roleOptions={roleOptions}\n              basicRole={value}\n              onBasicRoleChange={(newRole) => onRoleChange(newRole, original)}\n              basicRoleDisabled={basicRoleDisabled}\n              basicRoleDisabledMessage={disabledRoleMessage}\n              width={40}\n            />\n          ) : (\n            <OrgRolePicker\n              aria-label=\"Role\"\n              value={value}\n              disabled={basicRoleDisabled}\n              onChange={(newRole) => onRoleChange(newRole, original)}\n            />\n          );\n        },\n      },\n      {\n        id: 'info',\n        header: '',\n        cell: InfoCell,\n      },\n      {\n        id: 'authLabels',\n        header: 'Origin',\n        cell: ({ cell: { value } }: Cell<'authLabels'>) => (\n          <>{Array.isArray(value) && value.length > 0 && <TagBadge label={value[0]} removeIcon={false} count={0} />}</>\n        ),\n      },\n      {\n        id: 'isDisabled',\n        header: '',\n        cell: ({ cell: { value } }: Cell<'isDisabled'>) => <>{value && <Tag colorIndex={9} name={'Disabled'} />}</>,\n      },\n      {\n        id: 'delete',\n        header: '',\n        cell: ({ row: { original } }: Cell) => {\n          return (\n            contextSrv.hasPermissionInMetadata(AccessControlAction.OrgUsersRemove, original) && (\n              <Button\n                size=\"sm\"\n                variant=\"destructive\"\n                onClick={() => {\n                  setUserToRemove(original);\n                }}\n                icon=\"times\"\n                aria-label={`Delete user ${original.name}`}\n              />\n            )\n          );\n        },\n      },\n    ],\n    [rolesLoading, orgId, roleOptions, onRoleChange]\n  );\n\n  return (\n    <VerticalGroup spacing=\"md\" data-testid={selectors.container}>\n      <div className={styles.wrapper}>\n        <InteractiveTable\n          columns={columns}\n          data={users}\n          getRowId={(user) => String(user.userId)}\n          fetchData={fetchData}\n        />\n        <HorizontalGroup justify=\"flex-end\">\n          <Pagination onNavigate={changePage} currentPage={page} numberOfPages={totalPages} hideWhenSinglePage={true} />\n        </HorizontalGroup>\n      </div>\n      {Boolean(userToRemove) && (\n        <ConfirmModal\n          body={`Are you sure you want to delete user ${userToRemove?.login}?`}\n          confirmText=\"Delete\"\n          title=\"Delete\"\n          onDismiss={() => {\n            setUserToRemove(null);\n          }}\n          isOpen={true}\n          onConfirm={() => {\n            if (!userToRemove) {\n              return;\n            }\n            onRemoveUser(userToRemove);\n            setUserToRemove(null);\n          }}\n        />\n      )}\n    </VerticalGroup>\n  );\n};\n\nconst InfoCell = ({ row: { original } }: Cell) => {\n  const styles = useStyles2(getStyles);\n  const basicRoleDisabled = getBasicRoleDisabled(original);\n  return (\n    basicRoleDisabled && (\n      <div className={styles.row}>\n        <Tooltip content={disabledRoleMessage}>\n          <Icon name=\"question-circle\" className={styles.icon} />\n        </Tooltip>\n      </div>\n    )\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  row: css({\n    display: 'flex',\n    alignItems: 'center',\n  }),\n  icon: css({\n    marginLeft: theme.spacing(1),\n  }),\n  // Enable RolePicker overflow\n  wrapper: css({\n    display: 'flex',\n    flexDirection: 'column',\n    overflowX: 'auto',\n    overflowY: 'hidden',\n    minHeight: '100vh',\n    width: '100%',\n    '& > div': {\n      overflowX: 'unset',\n      marginBottom: theme.spacing(2),\n    },\n  }),\n});\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { Button, ClipboardButton } from '@grafana/ui';\nimport { Invitee } from 'app/types';\n\nimport { revokeInvite } from './state/actions';\n\nconst mapDispatchToProps = {\n  revokeInvite,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\ninterface OwnProps {\n  invitee: Invitee;\n}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nclass InviteeRow extends PureComponent<Props> {\n  render() {\n    const { invitee, revokeInvite } = this.props;\n    return (\n      <tr>\n        <td>{invitee.email}</td>\n        <td>{invitee.name}</td>\n        <td className=\"text-right\">\n          <ClipboardButton icon=\"copy\" variant=\"secondary\" size=\"sm\" getText={() => invitee.url}>\n            Copy Invite\n          </ClipboardButton>\n          &nbsp;\n        </td>\n        <td>\n          <Button\n            variant=\"destructive\"\n            size=\"sm\"\n            icon=\"times\"\n            onClick={() => revokeInvite(invitee.code)}\n            aria-label=\"Revoke Invite\"\n          />\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport default connector(InviteeRow);\n","import React, { PureComponent } from 'react';\n\nimport { Invitee } from 'app/types';\n\nimport InviteeRow from './InviteeRow';\n\nexport interface Props {\n  invitees: Invitee[];\n}\n\nexport default class InviteesTable extends PureComponent<Props> {\n  render() {\n    const { invitees } = this.props;\n\n    return (\n      <table className=\"filter-table form-inline\">\n        <thead>\n          <tr>\n            <th>Email</th>\n            <th>Name</th>\n            <th />\n            <th style={{ width: '34px' }} />\n          </tr>\n        </thead>\n        <tbody data-testid=\"InviteesTable-body\">\n          {invitees.map((invitee, index) => {\n            return <InviteeRow key={`${invitee.id}-${index}`} invitee={invitee} />;\n          })}\n        </tbody>\n      </table>\n    );\n  }\n}\n","import { createSelector } from '@reduxjs/toolkit';\n\nimport { selectors } from './reducers';\n\nexport const { selectAll, selectById, selectTotal } = selectors;\n\nconst selectQuery = (_: any, query: string) => query;\nexport const selectInvitesMatchingQuery = createSelector([selectAll, selectQuery], (invites, searchQuery) => {\n  const regex = new RegExp(searchQuery, 'i');\n  const matches = invites.filter((invite) => regex.test(invite.name) || regex.test(invite.email));\n  return matches;\n});\n","import { debounce } from 'lodash';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { FetchDataArgs } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { accessControlQueryParam } from 'app/core/utils/accessControl';\nimport { OrgUser } from 'app/types';\n\nimport { ThunkResult } from '../../../types';\n\nimport {\n  usersLoaded,\n  pageChanged,\n  usersFetchBegin,\n  usersFetchEnd,\n  searchQueryChanged,\n  sortChanged,\n  rolesFetchBegin,\n  rolesFetchEnd,\n} from './reducers';\n\nexport function loadUsers(): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    try {\n      dispatch(usersFetchBegin());\n      const { perPage, page, searchQuery, sort } = getState().users;\n      const users = await getBackendSrv().get(\n        `/api/org/users/search`,\n        accessControlQueryParam({ perpage: perPage, page, query: searchQuery, sort })\n      );\n\n      if (contextSrv.licensedAccessControlEnabled()) {\n        dispatch(rolesFetchBegin());\n        const orgId = contextSrv.user.orgId;\n        const userIds = users?.orgUsers.map((u: OrgUser) => u.userId);\n        const roles = await getBackendSrv().post(`/api/access-control/users/roles/search`, { userIds, orgId });\n        users.orgUsers.forEach((u: OrgUser) => {\n          u.roles = roles ? roles[u.userId] || [] : [];\n        });\n        dispatch(rolesFetchEnd());\n      }\n      dispatch(usersLoaded(users));\n    } catch (error) {\n      usersFetchEnd();\n    }\n  };\n}\n\nconst fetchUsersWithDebounce = debounce((dispatch) => dispatch(loadUsers()), 300);\n\nexport function updateUser(user: OrgUser): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().patch(`/api/org/users/${user.userId}`, { role: user.role });\n    dispatch(loadUsers());\n  };\n}\n\nexport function removeUser(userId: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`/api/org/users/${userId}`);\n    dispatch(loadUsers());\n  };\n}\n\nexport function changePage(page: number): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(pageChanged(page));\n    dispatch(loadUsers());\n  };\n}\n\nexport function changeSort({ sortBy }: FetchDataArgs<OrgUser>): ThunkResult<void> {\n  const sort = sortBy.length ? `${sortBy[0].id}-${sortBy[0].desc ? 'desc' : 'asc'}` : undefined;\n  return async (dispatch) => {\n    dispatch(sortChanged(sort));\n    dispatch(loadUsers());\n  };\n}\n\nexport function changeSearchQuery(query: string): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(searchQueryChanged(query));\n    fetchUsersWithDebounce(dispatch);\n  };\n}\n","import { UsersState } from 'app/types';\n\nexport const getUsers = (state: UsersState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.users.filter((user) => {\n    return regex.test(user.login) || regex.test(user.email) || regex.test(user.name);\n  });\n};\n\nexport const getUsersSearchQuery = (state: UsersState) => state.searchQuery;\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { RadioButtonGroup, LinkButton, FilterInput, InlineField } from '@grafana/ui';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, StoreState } from 'app/types';\n\nimport { selectTotal } from '../invites/state/selectors';\n\nimport { changeSearchQuery } from './state/actions';\nimport { getUsersSearchQuery } from './state/selectors';\n\nexport interface OwnProps {\n  showInvites: boolean;\n  onShowInvites: () => void;\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    searchQuery: getUsersSearchQuery(state.users),\n    pendingInvitesCount: selectTotal(state.invites),\n    externalUserMngLinkName: state.users.externalUserMngLinkName,\n    externalUserMngLinkUrl: state.users.externalUserMngLinkUrl,\n  };\n}\n\nconst mapDispatchToProps = {\n  changeSearchQuery,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = ConnectedProps<typeof connector> & OwnProps;\n\nexport const UsersActionBarUnconnected = ({\n  externalUserMngLinkName,\n  externalUserMngLinkUrl,\n  searchQuery,\n  pendingInvitesCount,\n  changeSearchQuery,\n  onShowInvites,\n  showInvites,\n}: Props): JSX.Element => {\n  const options = [\n    { label: 'Users', value: 'users' },\n    { label: `Pending Invites (${pendingInvitesCount})`, value: 'invites' },\n  ];\n  const canAddToOrg: boolean = contextSrv.hasPermission(AccessControlAction.OrgUsersAdd);\n  // Show invite button in the following cases:\n  // 1) the instance is not a hosted Grafana instance (!config.externalUserMngInfo)\n  // 2) new basic auth users can be created for this instance (!config.disableLoginForm).\n  const showInviteButton: boolean = canAddToOrg && !(config.disableLoginForm && config.externalUserMngInfo);\n\n  return (\n    <div className=\"page-action-bar\" data-testid=\"users-action-bar\">\n      <InlineField grow>\n        <FilterInput\n          value={searchQuery}\n          onChange={changeSearchQuery}\n          placeholder=\"Search user by login, email or name\"\n        />\n      </InlineField>\n      {pendingInvitesCount > 0 && (\n        <div style={{ marginLeft: '1rem' }}>\n          <RadioButtonGroup value={showInvites ? 'invites' : 'users'} options={options} onChange={onShowInvites} />\n        </div>\n      )}\n      {showInviteButton && <LinkButton href=\"org/users/invite\">Invite</LinkButton>}\n      {externalUserMngLinkUrl && (\n        <LinkButton href={externalUserMngLinkUrl} target=\"_blank\" rel=\"noopener\">\n          {externalUserMngLinkName}\n        </LinkButton>\n      )}\n    </div>\n  );\n};\n\nexport const UsersActionBar = connector(UsersActionBarUnconnected);\n","import React, { useEffect, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { renderMarkdown } from '@grafana/data';\nimport { Page } from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { OrgUser, OrgRole, StoreState } from 'app/types';\n\nimport { OrgUsersTable } from '../admin/Users/OrgUsersTable';\nimport InviteesTable from '../invites/InviteesTable';\nimport { fetchInvitees } from '../invites/state/actions';\nimport { selectInvitesMatchingQuery } from '../invites/state/selectors';\n\nimport { UsersActionBar } from './UsersActionBar';\nimport { loadUsers, removeUser, updateUser, changePage, changeSort } from './state/actions';\nimport { getUsers, getUsersSearchQuery } from './state/selectors';\n\nfunction mapStateToProps(state: StoreState) {\n  const searchQuery = getUsersSearchQuery(state.users);\n  return {\n    users: getUsers(state.users),\n    searchQuery: getUsersSearchQuery(state.users),\n    page: state.users.page,\n    totalPages: state.users.totalPages,\n    perPage: state.users.perPage,\n    invitees: selectInvitesMatchingQuery(state.invites, searchQuery),\n    externalUserMngInfo: state.users.externalUserMngInfo,\n    isLoading: state.users.isLoading,\n    rolesLoading: state.users.rolesLoading,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadUsers,\n  fetchInvitees,\n  changePage,\n  changeSort,\n  updateUser,\n  removeUser,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = ConnectedProps<typeof connector>;\n\nexport interface State {\n  showInvites: boolean;\n}\n\nexport const UsersListPageUnconnected = ({\n  users,\n  page,\n  totalPages,\n  invitees,\n  externalUserMngInfo,\n  isLoading,\n  rolesLoading,\n  loadUsers,\n  fetchInvitees,\n  changePage,\n  updateUser,\n  removeUser,\n  changeSort,\n}: Props) => {\n  const [showInvites, setShowInvites] = useState(false);\n  const externalUserMngInfoHtml = externalUserMngInfo ? renderMarkdown(externalUserMngInfo) : '';\n\n  useEffect(() => {\n    loadUsers();\n    fetchInvitees();\n  }, [fetchInvitees, loadUsers]);\n\n  const onRoleChange = (role: OrgRole, user: OrgUser) => {\n    updateUser({ ...user, role: role });\n  };\n\n  const onRemoveUser = (user: OrgUser) => removeUser(user.userId);\n\n  const onShowInvites = () => {\n    setShowInvites(!showInvites);\n  };\n\n  const renderTable = () => {\n    if (showInvites) {\n      return <InviteesTable invitees={invitees} />;\n    } else {\n      return (\n        <OrgUsersTable\n          users={users}\n          orgId={contextSrv.user.orgId}\n          rolesLoading={rolesLoading}\n          onRoleChange={onRoleChange}\n          onRemoveUser={onRemoveUser}\n          fetchData={changeSort}\n          changePage={changePage}\n          page={page}\n          totalPages={totalPages}\n        />\n      );\n    }\n  };\n\n  return (\n    <Page.Contents isLoading={!isLoading}>\n      <UsersActionBar onShowInvites={onShowInvites} showInvites={showInvites} />\n      {externalUserMngInfoHtml && (\n        <div className=\"grafana-info-box\" dangerouslySetInnerHTML={{ __html: externalUserMngInfoHtml }} />\n      )}\n      {isLoading && renderTable()}\n    </Page.Contents>\n  );\n};\n\nexport const UsersListPageContent = connector(UsersListPageUnconnected);\n\nexport default function UsersListPage() {\n  return (\n    <Page navId=\"users\">\n      <UsersListPageContent />\n    </Page>\n  );\n}\n"],"names":["disabledRoleMessage","getBasicRoleDisabled","user","basicRoleDisabled","selectors","OrgUsersTable","users","orgId","onRoleChange","onRemoveUser","fetchData","changePage","page","totalPages","rolesLoading","userToRemove","setUserToRemove","roleOptions","setRoleOptions","styles","getStyles","fetchOptions","options","columns","value","b","original","newRole","InfoCell","theme","mapDispatchToProps","connector","InviteeRow","invitee","revokeInvite","ClipboardButton","Button","InviteesTable","invitees","index","selectAll","selectById","selectTotal","selectQuery","_","query","selectInvitesMatchingQuery","invites","searchQuery","regex","invite","loadUsers","dispatch","getState","perPage","sort","accessControl","userIds","u","roles","fetchUsersWithDebounce","updateUser","removeUser","userId","changeSort","sortBy","changeSearchQuery","getUsers","state","getUsersSearchQuery","mapStateToProps","UsersActionBar","externalUserMngLinkName","externalUserMngLinkUrl","pendingInvitesCount","onShowInvites","showInvites","showInviteButton","config","InlineField","FilterInput","RadioButtonGroup","UsersListPageUnconnected","externalUserMngInfo","isLoading","fetchInvitees","setShowInvites","externalUserMngInfoHtml","role","renderTable","Page","UsersListPageContent","UsersListPage"],"sourceRoot":""}