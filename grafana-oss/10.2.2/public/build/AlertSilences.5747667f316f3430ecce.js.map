{"version":3,"file":"AlertSilences.5747667f316f3430ecce.js","mappings":"wJAMO,SAASA,EAAWC,EAA8B,CACvD,MAAMC,KAAW,eAAY,EAEvBC,KAAc,UAAOF,CAAa,EACxCE,EAAY,QAAUF,KACtB,aAAU,IACD,IAAM,CACXC,KAAS,KAAc,CAAE,cAAeC,EAAY,OAAQ,CAAC,CAAC,CAChE,EACC,CAACD,CAAQ,CAAC,CACf,C,0aCDA,MAAME,GAAgB,CAAC,CAAE,UAAAC,CAAU,IAAa,CAC9C,MAAMC,KAAS,MAAWC,EAAS,EAC7BC,KAAU,MAAkC,EAC5C,CACJ,QAAAC,EACA,SAAAC,EACA,UAAW,CAAE,OAAAC,CAAO,CACtB,EAAIH,EAEE,CAAE,OAAQI,EAAW,CAAC,EAAG,OAAAC,EAAQ,OAAAC,CAAO,KAAI,MAAiC,CAAE,KAAM,UAAW,CAAC,EAEvG,OACE,gBAAC,OAAI,aAAW,MAAGT,EAAWC,EAAO,OAAO,GAC1C,gBAACS,EAAA,EAAK,CAAC,MAAM,kBAAkB,SAAQ,IACrC,gBAAC,WACC,gBAAC,OAAI,UAAWT,EAAO,UACpBM,EAAS,IAAI,CAACI,EAASC,IAEpB,gBAAC,OAAI,UAAWX,EAAO,IAAK,IAAK,GAAGU,EAAQ,KAAM,cAAY,WAC5D,gBAACD,EAAA,GACC,MAAM,QACN,QAAS,CAAC,CAACJ,GAAQ,WAAWM,CAAK,GAAG,KACtC,MAAON,GAAQ,WAAWM,CAAK,GAAG,MAAM,SAExC,gBAACC,EAAA,GACE,GAAGR,EAAS,YAAYO,SAAuB,CAC9C,SAAU,CAAE,MAAO,GAAM,QAAS,WAAY,CAChD,CAAC,EACD,aAAcD,EAAQ,KACtB,YAAY,QACd,CACF,EACA,gBAACD,EAAA,EAAK,CAAC,MAAO,YACZ,gBAACI,GAAA,GACC,QAAAV,EACA,OAAQ,CAAC,CAAE,MAAO,CAAE,SAAAW,EAAU,IAAAC,EAAK,GAAGC,CAAM,CAAE,IAC5C,gBAACC,GAAA,IACE,GAAGD,EACJ,SAAWE,GAAUJ,EAASI,EAAM,KAAK,EACzC,UAAWlB,EAAO,eAClB,QAAS,KACT,aAAW,WACb,EAEF,aAAcU,EAAQ,UAAY,KAAoB,CAAC,EAAE,MACzD,KAAM,YAAYC,aAClB,MAAO,CAAE,SAAU,CAAE,MAAO,GAAM,QAAS,WAAY,CAAE,EAC3D,CACF,EACA,gBAACF,EAAA,GACC,MAAM,QACN,QAAS,CAAC,CAACJ,GAAQ,WAAWM,CAAK,GAAG,MACtC,MAAON,GAAQ,WAAWM,CAAK,GAAG,OAAO,SAEzC,gBAACC,EAAA,GACE,GAAGR,EAAS,YAAYO,UAAwB,CAC/C,SAAU,CAAE,MAAO,GAAM,QAAS,WAAY,CAChD,CAAC,EACD,aAAcD,EAAQ,MACtB,YAAY,QACd,CACF,EACCJ,EAAS,OAAS,GACjB,gBAACa,GAAA,GACC,UAAWnB,EAAO,aAClB,QAAQ,iBACR,KAAK,YACL,QAAS,IAAMQ,EAAOG,CAAK,GAC5B,QAED,CAEJ,CAEH,CACH,EACA,gBAACS,EAAA,IACC,KAAK,SACL,KAAK,OACL,QAAQ,YACR,QAAS,IAAM,CACb,MAAMC,EAAa,CAAE,KAAM,GAAI,MAAO,GAAI,SAAU,KAAgB,KAAM,EAC1Ed,EAAOc,CAAU,CACnB,GACD,aAED,CACF,CACF,CACF,CAEJ,EAEMpB,GAAaqB,IACV,CACL,WAAS;AAAA,oBACOA,EAAM,QAAQ,CAAC;AAAA,MAE/B,OAAK;AAAA;AAAA;AAAA;AAAA,0BAIiBA,EAAM,OAAO,WAAW;AAAA,iBACjCA,EAAM,QAAQ,CAAC,KAAKA,EAAM,QAAQ,CAAC,OAAOA,EAAM,QAAQ,CAAC;AAAA;AAAA,uBAEnDA,EAAM,QAAQ,CAAC;AAAA;AAAA,MAGlC,gBAAc;AAAA,qBACGA,EAAM,QAAQ,CAAC;AAAA,oBAChBA,EAAM,QAAQ,GAAG;AAAA,MAEjC,kBAAgB;AAAA;AAAA,MAGhB,YAAU;AAAA,mBACKA,EAAM,YAAY,OAAO;AAAA,gBAC5BA,EAAM,QAAQ,CAAC;AAAA,qBACVA,EAAM,QAAQ,EAAG;AAAA,KAEpC,GAGF,GAAexB,G,gBCjIR,MAAMyB,GAAgB,IAAM,CACjC,KAAM,CAAE,QAAApB,EAAS,UAAAqB,CAAU,KAAI,MAAkC,EAE3D,CACJ,MAAO,CAAE,SAAUC,EAAkB,MAAOC,CAAS,EACrD,WAAY,CAAE,QAASC,CAAgB,CACzC,KAAI,MAAc,CAChB,KAAM,WACN,QAAAxB,EACA,MAAO,CACL,SAAWe,GAAUM,EAAU,EAAE,OAASN,CAC5C,CACF,CAAC,EAEK,CACJ,MAAO,CAAE,SAAUU,EAAgB,MAAOC,CAAO,EACjD,WAAY,CAAE,QAASC,CAAc,CACvC,KAAI,MAAc,CAChB,KAAM,SACN,QAAA3B,EACA,MAAO,CACL,SAAWe,GAAUM,EAAU,EAAE,SAAWN,CAC9C,CACF,CAAC,EAEK,CACJ,MAAO,CAAE,SAAUa,EAAkB,MAAOC,CAAS,CACvD,KAAI,MAAc,CAChB,KAAM,WACN,QAAA7B,CACF,CAAC,EAEK8B,EAAUN,GAAmBG,EAE7BI,KAAO,MAASR,CAAQ,EACxBS,KAAK,MAASN,CAAM,EAE1B,OACE,gBAACpB,EAAA,GACC,UAAWT,GAAO,UAClB,MAAM,wBACN,MAAOiC,EAAU,mCAAqC,GACtD,QAAAA,CAAA,EAEA,gBAACG,GAAA,GACC,MAAO,CACL,KAAAF,EACA,GAAAC,EACA,IAAK,CACH,KAAAD,EACA,GAAAC,CACF,CACF,EACA,SAAAH,EACA,SAAWK,GAAa,CACtBZ,KAAiB,MAASY,EAAS,IAAI,CAAC,EACxCT,KAAe,MAASS,EAAS,EAAE,CAAC,CACtC,EACA,iBAAmBA,GAAaN,EAAiBM,CAAQ,EACzD,aAAc,GACd,gBAAiB,GACjB,YAAa,oBACf,CACF,CAEJ,EAEMrC,GAAS,CACb,aAAW;AAAA;AAAA,GAGb,E,uFC7DO,MAAMsC,GAA2B,CAAC,CAAE,aAAAC,EAAc,SAAAjC,CAAS,IAAa,CAC7E,KAAM,CAAE,8BAAAkC,CAA8B,EAAIC,GAAA,gBACpCzC,KAAS,MAAW,EAAS,EAC7B0C,EAAUC,GAAW,EAIrBC,EAAmBtC,EAAS,KAAMI,GAAYA,EAAQ,OAASA,EAAQ,IAAI,EAE3E,CACJ,YAAamC,EAAS,CAAC,EACvB,WAAAC,EACA,QAAAC,CACF,EAAIP,EACF,CAAE,aAAAD,EAAc,OAAQ,CAAE,SAAAjC,CAAS,CAAE,EACrC,CAAE,KAAM,CAACsC,EAAkB,0BAA2B,EAAK,CAC7D,EAEMI,EAAkBH,EAAO,IAA+CI,IAAW,CACvF,GAAIA,EAAM,YACV,KAAMA,CACR,EAAE,EAEF,OACE,gBAAC,WACC,gBAAC,MAAG,UAAWjD,EAAO,OAAO,2BAE1BgD,EAAgB,OAAS,EACxB,gBAACE,GAAA,EAAK,CAAC,UAAWlD,EAAO,MAAO,MAAM,OAAO,KAAMgD,EAAgB,OAAQ,EACzE,IACN,EACC,CAACJ,GAAoB,gBAAC,YAAK,4CAA0C,EACrEG,GACC,gBAACI,EAAA,EAAK,CAAC,MAAM,wBAAwB,SAAS,SAAQ,gFAEtD,EAEDL,GAAc,gBAACM,GAAA,EAAkB,CAAC,KAAK,YAAa,GACpD,CAACN,GAAc,CAACC,GAAWH,GAC1B,gBAAC,OAAI,UAAW5C,EAAO,OACpBgD,EAAgB,OAAS,EACxB,gBAACK,GAAA,GACC,MAAOL,EACP,aAAc,GACd,KAAMN,EACN,WAAY,CAAE,aAAc,EAAG,EACjC,EAEA,gBAAC,YAAK,mCAAiC,CAE3C,CAEJ,CAEJ,EAEA,SAASC,IAAgE,CACvE,MAAM3C,KAAS,MAAW,EAAS,EAEnC,MAAO,CACL,CACE,GAAI,QACJ,MAAO,QACP,WAAY,SAAwB,CAAE,KAAAsD,CAAK,EAAG,CAC5C,OAAO,gBAACC,GAAA,EAAe,CAAC,MAAOD,EAAK,OAAO,MAAO,CACpD,EACA,KAAM,QACN,UAAWtD,EAAO,WACpB,EACA,CACE,GAAI,SACJ,MAAO,SACP,WAAY,SAAoB,CAAE,KAAAsD,CAAK,EAAG,CACxC,OAAO,gBAACE,GAAA,EAAW,CAAC,OAAQF,EAAK,OAAQ,KAAK,IAAK,EACrD,EACA,KAAM,MACR,EACA,CACE,GAAI,UACJ,MAAO,UACP,WAAY,SAAuB,CAAE,KAAAA,CAAK,EAAG,CAC3C,OAAO,mCAAG,OAAWA,EAAK,QAAQ,EAAI,OAAM,MAASA,EAAK,QAAQ,EAAE,OAAO,qBAAqB,CAAE,CACpG,EACA,KAAM,OACR,CACF,CACF,CAEA,MAAM,GAAahC,IAA0B,CAC3C,SAAO;AAAA,iBACQA,EAAM,YAAY,OAAO;AAAA,IAExC,eAAa;AAAA,kBACGA,EAAM,QAAQ,CAAC;AAAA,IAE/B,SAAO;AAAA;AAAA;AAAA,IAIP,SAAO;AAAA,mBACUA,EAAM,QAAQ,CAAC;AAAA,IAEhC,eAAa;AAAA;AAAA;AAAA,GAIf,GCtFMmC,GAAqBC,GAA8D,CACvF,MAAMC,EAAuC,CAAC,EAExCC,EAAUF,EAAa,IAAI,SAAS,EACpCpD,EAAWoD,EAAa,OAAO,SAAS,EAExCG,KAAe,OAAwBvD,CAAQ,EACrD,OAAIuD,EAAa,SACfF,EAAS,SAAWE,EAAa,IAAI,IAAqB,GAGxDD,IACFD,EAAS,QAAUC,GAGdD,CACT,EAEMG,GAAuB,CAACJ,EAA+BK,IAAyC,CACpG,MAAMC,EAAM,IAAI,KAChB,GAAID,EAAS,CAEX,MAAME,EADY,KAAK,MAAMF,EAAQ,MAAM,EAAI,KAAK,IAAI,EAEpD,CACE,MAAOC,EACP,OAAK,MAAkBA,EAAK,CAAE,MAAO,CAAE,CAAC,CAC1C,EACA,CAAE,MAAO,IAAI,KAAKD,EAAQ,QAAQ,EAAG,IAAK,IAAI,KAAKA,EAAQ,MAAM,CAAE,EACvE,MAAO,CACL,GAAIA,EAAQ,GACZ,SAAUE,EAAS,MAAM,YAAY,EACrC,OAAQA,EAAS,IAAI,YAAY,EACjC,QAASF,EAAQ,QACjB,UAAWA,EAAQ,UACnB,YAAU,MAAoCE,CAAQ,EACtD,QAAS,GACT,SAAUF,EAAQ,UAAU,IAAI,IAAqB,GAAK,CAAC,EAC3D,YAAa,GACb,aAAc,GACd,SAAU,IACZ,MACK,CACL,MAAMlC,KAAS,MAAkBmC,EAAK,CAAE,MAAO,CAAE,CAAC,EAClD,MAAO,CACL,GAAI,GACJ,SAAUA,EAAI,YAAY,EAC1B,OAAQnC,EAAO,YAAY,EAC3B,QAAS,cAAW,MAAS,EAAE,OAAO,kBAAkB,IACxD,UAAWqC,EAAO,gBAAS,KAAK,KAChC,SAAU,KACV,QAAS,GACT,SAAU,CAAC,CAAE,KAAM,GAAI,MAAO,GAAI,SAAU,KAAgB,KAAM,CAAC,EACnE,YAAa,GACb,aAAc,GACd,SAAU,KACV,GAAGT,GAAkBC,CAAY,CACnC,EAEJ,EAEaS,GAAiB,CAAC,CAAE,QAAAJ,EAAS,uBAAAK,CAAuB,IAAa,CAC5E,KAAM,CAACC,CAAe,KAAIC,GAAA,GAAmB,EAEvCC,KAAgB,WAAQ,IAAMT,GAAqBO,EAAiBN,CAAO,EAAG,CAACA,EAASM,CAAe,CAAC,EACxGG,KAAU,MAAQ,CAAE,cAAAD,CAAc,CAAC,EACnC3E,KAAW,eAAY,EACvBI,KAAS,MAAW,EAAS,EAC7B,CAACyE,EAAoBC,CAAqB,KAAI,YAClDH,EAAc,SAAS,IAAI,IAAqB,CAClD,EAEM,CAAE,QAAAI,CAAQ,KAAIC,EAAA,GAA4BC,GAAUA,EAAM,aAAa,KAE7EnF,GAAA,GAAYmF,GAAWA,EAAM,gBAAgB,cAAgB,IAAyB,EAEtF,KAAM,CAAE,SAAAzE,EAAU,aAAA0E,EAAc,UAAAC,EAAW,MAAAC,EAAO,SAAAC,EAAU,YAAAC,EAAY,EAAIV,EAEtEW,GAAY7B,GAA4B,CAC5C,KAAM,CAAE,GAAA8B,EAAI,SAAA1D,EAAU,OAAAG,GAAQ,QAAA+B,GAAS,UAAAyB,GAAW,SAAUC,EAAe,EAAIhC,EACzEhD,GAAWgF,GAAe,IAAI,IAAqB,EACnDC,MAAU,UACd,CACE,GAAAH,EACA,SAAA1D,EACA,OAAAG,GACA,QAAA+B,GACA,UAAAyB,GACA,SAAA/E,EACF,EACCY,IAAU,CAAC,CAACA,EACf,EACAtB,KACE,MAA4B,CAC1B,uBAAAwE,EACA,QAAAmB,GACA,WAAY,GACZ,eAAgB,WAAWA,GAAQ,GAAK,UAAY,WACtD,CAAC,CACH,CACF,EAEMC,EAAWR,EAAM,UAAU,EAC3BtD,EAAWsD,EAAM,UAAU,EAC3BnD,EAASmD,EAAM,QAAQ,EACvBS,GAAgBT,EAAM,UAAU,EAGhC,CAACU,GAAcC,EAAe,KAAI,YAASH,CAAQ,KACzDI,EAAA,GACE,IAAM,CACJ,MAAI,MAAYlE,CAAQ,MAAK,MAAYG,CAAM,EAC7C,GAAI2D,IAAaE,GACfT,EAAS,YAAU,SAAS,MAAkB,IAAI,KAAKvD,CAAQ,KAAG,MAAc8D,CAAQ,CAAC,CAAC,EAAE,YAAY,CAAC,EACzGG,GAAgBH,CAAQ,MACnB,CACL,MAAMK,EAAa,IAAI,KAAKnE,CAAQ,EAAE,QAAQ,EAE9C,GADiB,IAAI,KAAKG,CAAM,EAAE,QAAQ,EAC3BgE,EAAY,CACzB,MAAMC,KAAe,MAAoC,CACvD,MAAO,IAAI,KAAKpE,CAAQ,EACxB,IAAK,IAAI,KAAKG,CAAM,CACtB,CAAC,EACDoD,EAAS,WAAYa,CAAY,EACjCH,GAAgBG,CAAY,GAIpC,EACA,IACA,CAACZ,GAAaM,EAAU3D,EAAQ6D,GAAcT,EAAUvD,CAAQ,CAClE,KAEAkE,EAAA,GACE,IAAM,CAEJ,MAAMG,EAAcN,GAAc,OAAQO,GAAMA,EAAE,MAAQA,EAAE,KAAK,EAAE,IAAI,IAAqB,KACvF,WAAQvB,EAAoBsB,CAAW,GAC1CrB,EAAsBqB,CAAW,CAErC,EACA,IACA,CAACN,EAAa,CAChB,EAEA,MAAMQ,GAAa,GAAQ/B,EAAO,gBAAS,KAAK,YAAcA,EAAO,gBAAS,KAAK,MAEnF,OACE,gBAAC,KAAY,CAAE,GAAGM,CAAA,EAChB,gBAAC,QAAK,SAAUM,EAAaK,EAAQ,GACnC,gBAACe,EAAA,EAAQ,CAAC,MAAO,GAAGnC,EAAU,mBAAqB,oBACjD,gBAAC,OAAI,aAAW,MAAG/D,EAAO,QAASA,EAAO,aAAa,GACrD,gBAACuB,GAAa,IAAC,EACf,gBAACd,EAAA,GACC,MAAM,WACN,QAAS,CAAC,CAACsE,EAAU,OAAO,SAC5B,MACEA,EAAU,OAAO,WAChBA,EAAU,OAAO,SAAS,OAAS,WAAa,iBAAmBA,EAAU,OAAO,SAAS,UAGhG,gBAACnE,EAAA,GACC,UAAWZ,EAAO,UACjB,GAAGI,EAAS,WAAY,CACvB,SAAWc,GACT,OAAO,QAAK,MAAcA,CAAK,CAAC,EAAE,SAAW,EACzC,gFACA,MACR,CAAC,EACD,GAAG,WACL,CACF,CACF,EAEA,gBAAC,GAAa,IAAC,EACf,gBAACT,EAAA,GACC,aAAW,MAAGT,EAAO,MAAOA,EAAO,QAAQ,EAC3C,MAAM,UACN,SAAQ,GACR,MAAO+E,EAAU,OAAO,SAAS,QACjC,QAAS,CAAC,CAACA,EAAU,OAAO,SAE5B,gBAACoB,GAAA,GACE,GAAG/F,EAAS,UAAW,CAAE,SAAU,CAAE,MAAO,GAAM,QAAS,WAAY,CAAE,CAAC,EAC3E,KAAM,EACN,YAAY,4BACd,CACF,EACC,CAAC6F,IACA,gBAACxF,EAAA,GACC,aAAW,MAAGT,EAAO,MAAOA,EAAO,SAAS,EAC5C,MAAM,aACN,SAAQ,GACR,MAAO+E,EAAU,OAAO,WAAW,QACnC,QAAS,CAAC,CAACA,EAAU,OAAO,WAE5B,gBAACnE,EAAA,GACE,GAAGR,EAAS,YAAa,CAAE,SAAU,CAAE,MAAO,GAAM,QAAS,WAAY,CAAE,CAAC,EAC7E,YAAY,6BACd,CACF,EAEF,gBAACkC,GAAwB,CAAC,aAAc8B,EAAwB,SAAUK,CAAA,CAAoB,CAChG,EACA,gBAAC,OAAI,UAAWzE,EAAO,SACpB2E,GACC,gBAACvD,EAAA,GAAM,CAAC,SAAU,GAAM,KAAK,gBAAgB,QAAQ,WAAU,WAE/D,EAED,CAACuD,GAAW,gBAACvD,EAAA,GAAM,CAAC,KAAK,UAAS,cAAY,EAC/C,gBAAC,KAAU,CAAC,QAAM,MAAW,oBAAqBgD,CAAsB,EAAG,QAAS,aAAa,QAEjG,CACF,CACF,CACF,CAEJ,EAEM,GAAa9C,IAA0B,CAC3C,SAAO;AAAA,cACKA,EAAM,QAAQ,EAAG,CAAC;AAAA,IAE9B,YAAU;AAAA,iBACKA,EAAM,YAAY,OAAO;AAAA,IAExC,aAAW;AAAA;AAAA,IAGX,WAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAMWA,EAAM,QAAQ,CAAC;AAAA;AAAA,IAGnC,iBAAe;AAAA,iBACAA,EAAM,YAAY,OAAO;AAAA,GAE1C,GAEA,GAAe6C,G,gGCjRR,MAAMiC,GAAe,CAAC,CAAE,UAAArG,EAAW,GAAGsG,CAAU,IAAa,CAClE,MAAMrG,KAAS,MAAWsG,EAAQ,EAClC,OAAO,gBAAClF,EAAA,GAAM,CAAC,QAAQ,YAAY,KAAK,KAAK,aAAW,MAAGpB,EAAO,QAASD,CAAS,EAAI,GAAGsG,CAAA,CAAW,CACxG,EAEaC,GAAYhF,IAA0B,CACjD,WAAS;AAAA;AAAA,iBAEMA,EAAM,WAAW,UAAU;AAAA,GAE5C,G,2BCTO,MAAMiF,GAAW,CAAC,CAAE,SAAAjG,CAAS,IAAqB,CACvD,MAAMN,KAAS,MAAW,EAAS,EACnC,OACE,gBAAC,WACC,gBAACwG,GAAA,GACC,UAAWxG,EAAO,KAClB,KAAMM,EAAS,IAAKI,GAAY,GAAGA,EAAQ,UAAO,MAAkBA,CAAO,IAAIA,EAAQ,OAAO,EAChG,CACF,CAEJ,EAEM,GAAY,KAAO,CACvB,QAAM;AAAA;AAAA,GAGR,G,oDCbO,MAAM+F,GAAmB,CAAC,CAAE,uBAAArC,CAAuB,IAAa,CACrE,MAAMsC,KAAc,OAAwBtC,CAAsB,EAElE,OAAI,cAAW,cAAcsC,EAAY,MAAM,EAE3C,gBAACC,GAAA,GACC,MAAM,uCACN,WAAW,aACX,cAAY,MAAW,uBAAwBvC,CAAsB,EACrE,YAAY,iBACd,EAGG,gBAACwC,GAAA,EAAgB,CAAC,oBAAqB,gBAAC,UAAI,EAAI,QAAQ,oBAAqB,EACtF,E,4BCZO,MAAMC,GAAyB,CAAC,CAAE,MAAA5D,EAAO,UAAAlD,CAAU,IAAa,CACrE,KAAM,CAAC+G,EAAaC,CAAc,KAAI,YAAS,EAAI,EAE7CvB,KAAW,MAAoC,CACnD,MAAO,IAAI,KAAKvC,EAAM,QAAQ,EAC9B,IAAK,IAAI,KAAKA,EAAM,MAAM,CAC5B,CAAC,EACK+D,EAAY,OAAO,QAAQ/D,EAAM,MAAM,EAAE,OAAO,CAACgE,EAAM,CAACC,EAAUC,CAAU,MAC5ED,IAAa,aAAeA,IAAa,0BAC3CD,EAAOE,GAEFF,GACN,EAAE,EACL,OACE,gCACE,gBAAC,MAAG,UAAAlH,CAAA,EACF,gBAAC,UACC,gBAACqH,GAAA,EAAc,CAAC,YAAAN,EAA0B,SAAWO,GAAcN,EAAeM,CAAS,EAAG,CAChG,EACA,gBAAC,UACC,gBAAC9D,GAAA,EAAe,CAAC,MAAON,EAAM,OAAO,MAAO,CAC9C,EACA,gBAAC,UAAG,OAAKuC,EAAS,UAAQ,EAC1B,gBAAC,UAAIwB,CAAU,CACjB,EACC,CAACF,GACA,gBAAC,MAAG,UAAA/G,CAAA,EACF,gBAAC,SAAG,EACJ,gBAAC,MAAG,QAAS,GACX,gBAACyD,GAAA,EAAW,CAAC,OAAQP,EAAM,OAAQ,KAAK,IAAK,EAC/C,CACF,CAEJ,CAEJ,ECnCMqE,GAAsB,CAAC,CAAE,eAAAC,CAAe,IAAa,CACzD,MAAMC,KAAc,MAAW,IAAmB,EAC5CxH,KAAS,MAAW,EAAS,EAEnC,OAAMuH,EAAe,OAEjB,gBAAC,SAAM,aAAW,MAAGC,EAAY,MAAOxH,EAAO,WAAW,GACxD,gBAAC,gBACC,gBAAC,OAAI,UAAWwH,EAAY,UAAW,EACvC,gBAAC,OAAI,UAAWxH,EAAO,SAAU,EACjC,gBAAC,UAAI,EACL,gBAAC,OAAI,UAAWA,EAAO,QAAS,CAClC,EACA,gBAAC,aACC,gBAAC,UACC,gBAAC,SAAG,EACJ,gBAAC,UAAG,OAAK,EACT,gBAAC,SAAG,EACJ,gBAAC,UAAG,YAAU,CAChB,CACF,EACA,gBAAC,aACEuH,EAAe,IAAI,CAACtE,EAAOtC,IAExB,gBAACkG,GAAA,CACC,IAAK5D,EAAM,YACX,MAAAA,EACA,UAAWtC,EAAQ,IAAM,EAAI6G,EAAY,QAAU,GACrD,CAEH,CACH,CACF,EAGK,IAEX,EAEM,GAAalG,IAA0B,CAC3C,eAAa;AAAA,qBACMA,EAAM,QAAQ,CAAC;AAAA,IAElC,YAAU;AAAA;AAAA,IAGV,WAAS;AAAA;AAAA,GAGX,GAEA,GAAegG,GCrDFG,GAAiB,CAAC,CAAE,QAAA1D,CAAQ,IAAa,CACpD,KAAM,CAAE,SAAArC,EAAU,OAAAG,EAAQ,QAAA+B,EAAS,UAAAyB,EAAW,eAAAkC,CAAe,EAAIxD,EAC3D/D,KAAS,MAAW,EAAS,EAE7B0H,EAAoB,mBACpBC,EAAe,QAAejG,CAAQ,EACtCkG,EAAa,QAAe/F,CAAM,EAClC2D,KAAW,MAAoC,CAAE,MAAO,IAAI,KAAK9D,CAAQ,EAAG,IAAK,IAAI,KAAKG,CAAM,CAAE,CAAC,EACzG,OACE,gBAAC,OAAI,UAAW7B,EAAO,WACrB,gBAAC,OAAI,UAAWA,EAAO,OAAO,SAAO,EACrC,gBAAC,WAAK4D,CAAQ,EACd,gBAAC,OAAI,UAAW5D,EAAO,OAAO,UAAQ,EACtC,gBAAC,WAAK,GAAG2H,GAAc,OAAOD,CAAiB,OAAOE,GAAY,OAAOF,CAAiB,GAAI,EAC9F,gBAAC,OAAI,UAAW1H,EAAO,OAAO,UAAQ,EACtC,gBAAC,WAAI,IAAEwF,CAAS,EAChB,gBAAC,OAAI,UAAWxF,EAAO,OAAO,YAAU,EACxC,gBAAC,WAAI,IAAEqF,CAAU,EACjB,gBAAC,OAAI,UAAWrF,EAAO,OAAO,iBAAe,EAC7C,gBAAC,GAAmB,CAAC,eAAAuH,CAAA,CAAgC,CACvD,CAEJ,EAEM,GAAajG,IAA0B,CAC3C,aAAW;AAAA;AAAA;AAAA;AAAA,IAKX,SAAO;AAAA,aACIA,EAAM,OAAO,KAAK;AAAA,IAE7B,OAAK;AAAA,cACOA,EAAM,QAAQ,EAAG,CAAC;AAAA,GAEhC,G,gBC3CA,MAAMuG,GAAmD,CACvD,CAAC,KAAa,MAAM,EAAG,OACvB,CAAC,KAAa,OAAO,EAAG,UACxB,CAAC,KAAa,OAAO,EAAG,SAC1B,EAMaC,GAAkB,CAAC,CAAE,MAAAjD,CAAM,IAAa,gBAACkD,GAAA,EAAQ,CAAC,MAAOF,GAAoBhD,CAAK,GAAIA,CAAM,E,4BCJzG,MAAMmD,GAAoB,OAAM,YAAS,eAAe,EAE3CC,GAAiB,IAAM,CAClC,KAAM,CAACC,EAAgBC,CAAiB,KAAI,YAASH,GAAkB,CAAC,EAClE,CAACI,EAAaC,CAAc,KAAIC,GAAA,GAAe,EAC/C,CAAE,YAAAC,CAAY,KAAI,MAA+BH,CAAW,EAC5DpI,KAAS,MAAW,EAAS,EAE7BwI,KAA0B,YAAUC,GAAmC,CAC3E,MAAMC,EAASD,EAAE,OACjBJ,EAAe,CAAE,YAAaK,EAAO,OAAS,IAAK,CAAC,CACtD,EAAG,GAAG,EAEAC,EAAe,IAAM,CACzBN,EAAe,CACb,YAAa,KACb,aAAc,IAChB,CAAC,EACD,WAAW,IAAMF,EAAkBH,GAAkB,CAAC,CAAC,CACzD,EAEMY,EAAeL,GAAeA,EAAY,OAAS,KAAI,MAAcA,CAAW,EAAE,SAAW,EAAI,GAEvG,OACE,gBAAC,OAAI,UAAWvI,EAAO,SACrB,gBAACS,EAAA,GACC,UAAWT,EAAO,SAClB,MACE,gBAAC6I,GAAA,EAAK,KACJ,gBAACC,EAAA,EAAK,CAAC,IAAK,IACV,gBAAC,YAAK,oBAAkB,EACxB,gBAACC,GAAA,GACC,QACE,gBAAC,WAAI,4EAEH,gBAAC,WAAK,4CAA6C,CACrD,GAGF,gBAACC,EAAA,EAAI,CAAC,KAAK,cAAc,KAAK,IAAK,EACrC,CACF,CACF,EAEF,QAASJ,EACT,MAAOA,EAAe,sCAAwC,MAE9D,gBAAChI,EAAA,GACC,IAAKsH,EACL,UAAWlI,EAAO,YAClB,OAAQ,gBAACgJ,EAAA,EAAI,CAAC,KAAK,QAAS,GAC5B,SAAUR,EACV,aAAcD,GAAe,GAC7B,YAAY,SACZ,cAAY,qBACd,CACF,EAECA,GACC,gBAAC,OAAI,UAAWvI,EAAO,UACrB,gBAACoB,EAAA,GAAM,CAAC,QAAQ,YAAY,KAAK,QAAQ,QAASuH,CAAA,EAAc,eAEhE,CACF,CAEJ,CAEJ,EAEM,GAAarH,IAA0B,CAC3C,eAAa;AAAA;AAAA,IAGb,WAAS;AAAA;AAAA;AAAA;AAAA,sBAIWA,EAAM,QAAQ,CAAC;AAAA,+BACNA,EAAM,OAAO,OAAO;AAAA,IAEjD,YAAU;AAAA,oBACQA,EAAM,QAAQ,CAAC;AAAA;AAAA;AAAA,IAIjC,cAAY;AAAA;AAAA;AAAA,GAId,GChEM2H,GAAgB,CAAC,CAAE,SAAAC,EAAU,mBAAAC,EAAoB,uBAAA/E,CAAuB,IAAa,CACzF,MAAMpE,KAAS,MAAW,EAAS,EAC7B,CAACoI,CAAW,KAAIE,GAAA,GAAe,EAC/Bc,EAA6BC,GAAoBH,EAAU,EAAK,EAChEI,EAA0BD,GAAoBH,EAAU,EAAI,EAE5D,CAAE,aAAcK,CAAqB,KAAI,MAA+BnB,CAAW,EACnFoB,EAAqBD,IAAyB,KAAa,QAE3DE,KAAkB,WAAQ,IAA+B,CAC7D,MAAMC,EAAsBtE,GACnB+D,EAAmB,OAAQlG,GAAUA,EAAM,OAAO,WAAW,SAASmC,CAAE,CAAC,EAElF,OAAOgE,EAA2B,IAAKrF,GAAY,CACjD,MAAMwD,EAAiBmC,EAAmB3F,EAAQ,EAAE,EACpD,MAAO,CACL,GAAIA,EAAQ,GACZ,KAAM,CAAE,GAAGA,EAAS,eAAAwD,CAAe,CACrC,CACF,CAAC,CACH,EAAG,CAAC6B,EAA4BD,CAAkB,CAAC,EAE7CQ,KAAe,WAAQ,IAA+B,CAC1D,MAAMD,EAAsBtE,GACnB+D,EAAmB,OAAQlG,GAAUA,EAAM,OAAO,WAAW,SAASmC,CAAE,CAAC,EAElF,OAAOkE,EAAwB,IAAKvF,GAAY,CAC9C,MAAMwD,EAAiBmC,EAAmB3F,EAAQ,EAAE,EACpD,MAAO,CACL,GAAIA,EAAQ,GACZ,KAAM,CAAE,GAAGA,EAAS,eAAAwD,CAAe,CACrC,CACF,CAAC,CACH,EAAG,CAAC+B,EAAyBH,CAAkB,CAAC,EAEhD,OACE,gBAAC,OAAI,cAAY,kBACd,CAAC,CAACD,EAAS,QACV,gBAACJ,EAAA,EAAK,CAAC,UAAU,UACf,gBAACb,GAAc,IAAC,EAChB,gBAAC2B,GAAA,EAAS,CAAC,QAAS,CAAC,MAAmB,aAAa,GACnD,gBAAC,OAAI,UAAW5J,EAAO,oBACrB,gBAAC,KAAU,CAAC,QAAM,MAAW,wBAAyBoE,CAAsB,EAAG,KAAK,QAAO,aAE3F,CACF,CACF,EACA,gBAACyF,GAAA,CACC,MAAOJ,EACP,uBAAArF,EACA,WAAW,oBACb,EACCuF,EAAa,OAAS,GACrB,gBAACG,GAAA,EAAkB,CAAC,MAAO,qBAAqBH,EAAa,UAAW,OAAQH,CAAA,EAC9E,gBAAC,OAAI,UAAWxJ,EAAO,SACrB,gBAACgJ,EAAA,EAAI,CAAC,UAAWhJ,EAAO,YAAa,KAAK,aAAc,GACxD,gBAAC,YAAK,0DAAwD,CAChE,EACA,gBAAC6J,GAAA,CACC,MAAOF,EACP,uBAAAvF,EACA,WAAW,gBACb,CACF,CAEJ,EAED,CAAC8E,EAAS,QAAU,gBAACzC,GAAgB,CAAC,uBAAArC,CAAA,CAAgD,CACzF,CAEJ,EAEA,SAASyF,GAAY,CACnB,MAAAE,EACA,uBAAA3F,EACA,WAAA4F,CACF,EAIG,CACD,MAAMtH,EAAU,GAAW0B,CAAsB,EACjD,OAAM2F,EAAM,OAER,gBAAC1G,GAAA,GACC,WAAY,CAAE,aAAc,EAAG,EAC/B,MAAA0G,EACA,KAAMrH,EACN,aAAY,GACZ,WAAAsH,EACA,sBAAuB,CAAC,CAAE,KAAA1G,CAAK,IAAM,gBAACmE,GAAc,CAAC,QAASnE,CAAA,CAAM,EACtE,EAGK,gCAAE,4BAA0B,CAEvC,CAEA,MAAM+F,GAAsB,CAACH,EAAqBe,EAAU,KAAU,CACpE,KAAM,CAAC7B,CAAW,KAAIE,GAAA,GAAe,EACrC,SAAO,WAAQ,IAAM,CACnB,KAAM,CAAE,YAAAC,CAAY,KAAI,MAA+BH,CAAW,EAC5D8B,EAAmB9B,GAAa,WACtC,OAAOc,EAAS,OAAQnF,GAClB,OAAOmG,GAAqB,UAE1B,CADgBA,EAAiB,MAAM,GAAG,EAAE,SAASnG,EAAQ,EAAE,GAKjEwE,GAYE,IAXa,MAAcA,CAAW,EACX,MAC5B7H,GACCqD,EAAQ,UAAU,KAChB,CAAC,CAAE,KAAAkD,EAAM,MAAA/F,EAAO,QAAAiJ,EAAS,QAAAC,CAAQ,IAC/B1J,EAAQ,OAASuG,GACjBvG,EAAQ,QAAUQ,GAClBR,EAAQ,UAAYyJ,GACpBzJ,EAAQ,UAAY0J,CACxB,CACJ,EAES,GAGPH,EACKlG,EAAQ,OAAO,QAAU,KAAa,QAEtCA,EAAQ,OAAO,QAAU,KAAa,OAEhD,CACH,EAAG,CAACqE,EAAac,EAAUe,CAAO,CAAC,CACrC,EAEM,GAAa3I,IAA0B,CAC3C,sBAAoB;AAAA;AAAA;AAAA;AAAA,IAKpB,iBAAe;AAAA,cACHA,EAAM,QAAQ,EAAG,CAAC;AAAA,IAE9B,WAAS;AAAA,wBACaA,EAAM,OAAO,WAAW;AAAA,4BACpBA,EAAM,OAAO,KAAK;AAAA,qBACzBA,EAAM,MAAM,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAOnBA,EAAM,QAAQ,CAAC;AAAA;AAAA,IAGlC,eAAa;AAAA,aACFA,EAAM,OAAO,KAAK;AAAA,IAE7B,cAAY;AAAA,mBACKA,EAAM,QAAQ,EAAG;AAAA,GAEpC,GAEA,SAAS,GAAW8C,EAAgC,CAClD,MAAMxE,KAAW,eAAY,EACvBI,KAAS,MAAW,EAAS,EAC7B,CAACqK,EAAiBC,CAAa,KAAI,OAAuB,MAAmB,aAAa,EAEhG,SAAO,WAAQ,IAAiC,CAC9C,MAAMC,EAA4BnF,GAAe,CAC/CxF,KAAS,MAAoBwE,EAAwBgB,CAAE,CAAC,CAC1D,EACM1C,EAAqC,CACzC,CACE,GAAI,QACJ,MAAO,QACP,WAAY,SAAwB,CAAE,KAAM,CAAE,OAAA8H,CAAO,CAAE,EAAG,CACxD,OAAO,gBAAC1C,GAAe,CAAC,MAAO0C,EAAO,MAAO,CAC/C,EACA,KAAM,CACR,EACA,CACE,GAAI,WACJ,MAAO,kBACP,WAAY,SAAwB,CAAE,KAAM,CAAE,SAAAlK,CAAS,CAAE,EAAG,CAC1D,OAAO,gBAACiG,GAAQ,CAAC,SAAUjG,GAAY,CAAC,EAAG,CAC7C,EACA,KAAM,EACR,EACA,CACE,GAAI,SACJ,MAAO,SACP,WAAY,SAA8B,CAAE,KAAM,CAAE,eAAAiH,CAAe,CAAE,EAAG,CACtE,OAAO,gBAAC,QAAK,cAAY,UAAUA,EAAe,MAAO,CAC3D,EACA,KAAM,CACR,EACA,CACE,GAAI,WACJ,MAAO,WACP,WAAY,SAAwB,CAAE,KAAM,CAAE,SAAA7F,EAAU,OAAAG,CAAO,CAAE,EAAG,CAClE,MAAM8F,EAAe,QAAejG,CAAQ,EACtCkG,EAAa,QAAe/F,CAAM,EAClC6F,EAAoB,mBAC1B,OACE,gCACG,IACAC,GAAc,OAAOD,CAAiB,EAAE,IAAE,IAC1CE,GAAY,OAAOF,CAAiB,CACvC,CAEJ,EACA,KAAM,CACR,CACF,EACA,OAAI2C,GAAmBC,GACrB5H,EAAQ,KAAK,CACX,GAAI,UACJ,MAAO,UACP,WAAY,SAAuB,CAAE,KAAMqB,CAAQ,EAAG,CACpD,OACE,gBAAC+E,EAAA,EAAK,CAAC,IAAK,IACT/E,EAAQ,OAAO,QAAU,UACxB,gBAAC0G,GAAA,EAAI,CAAC,QAAM,MAAW,qBAAqB1G,EAAQ,UAAWK,CAAsB,GACnF,gBAACgC,GAAY,CAAC,KAAK,QAAO,UAAQ,CACpC,EAEA,gBAACA,GAAY,CAAC,KAAK,OAAO,QAAS,IAAMmE,EAAyBxG,EAAQ,EAAE,GAAG,WAE/E,EAEDA,EAAQ,OAAO,QAAU,WACxB,gBAAC2G,GAAA,GACC,UAAW1K,EAAO,WAClB,MAAI,MAAW,qBAAqB+D,EAAQ,UAAWK,CAAsB,EAC7E,KAAK,MACL,QAAQ,OACV,CAEJ,CAEJ,EACA,KAAM,CACR,CAAC,EAEI1B,CACT,EAAG,CAAC0B,EAAwBxE,EAAUI,EAAO,WAAYsK,EAAeD,CAAe,CAAC,CAC1F,CACA,SAAepB,GC1RT0B,GAAwC,CAC5C,KAAM,YACR,EAEO,SAASC,IAAoB,CAClC,KAAM,CAAE,QAAAC,EAAS,KAAAC,CAAK,KAAI,MAAc,EAClC,CAACC,EAASC,CAAU,KAAI,YAAiE,EAE/F,sBAAU,IAAM,CACVF,IAAS,wBACXE,EAAW,CACT,GAAGL,GACH,GAAI,cACJ,KAAM,aACR,CAAC,EACQG,IAAS,8BAClBE,EAAW,CACT,GAAGL,GACH,GAAI,eACJ,KAAM,cACR,CAAC,CAEL,EAAG,CAACG,EAAMD,CAAO,CAAC,EAEXE,CACT,C,0BCXA,MAAME,GAAW,IAAM,CACrB,KAAM,CAAE,qBAAAC,CAAqB,KAAI,OAAgB,EAE3CtL,KAAW,eAAY,EACvBsJ,KAAWtE,EAAA,GAA4BC,GAAUA,EAAM,QAAQ,EAC/DsG,KAAiBvG,EAAA,GAA4BC,GAAUA,EAAM,QAAQ,EACrEuG,EAAgBF,EAClBC,EAAeD,CAAoB,GAAK,KACxC,OAEE,CAAE,YAAaG,CAAW,EAAIC,EAAA,EAAoB,2BACtD,CAAE,aAAcJ,GAAwB,EAAG,EAC3C,CAAE,KAAM,CAACA,CAAqB,CAChC,KAEA,aAAU,IAAM,CACd,SAASK,GAAW,CACdL,IACFtL,KAAS,MAAoBsL,CAAoB,CAAC,EAClDtL,KAAS,MAAoBsL,CAAoB,CAAC,EAEtD,CACAK,EAAS,EACT,MAAMtH,EAAW,YAAY,IAAMsH,EAAU,KAAyB,EACtE,MAAO,IAAM,CACX,cAActH,CAAQ,CACxB,CACF,EAAG,CAACiH,EAAsBtL,CAAQ,CAAC,EAEnC,KAAM,CAAE,OAAA4L,EAAQ,QAAA7G,EAAS,MAAA8G,CAAM,EAC5BP,GAAwBhC,EAASgC,CAAoB,GAAM,KAExDQ,KAAiB,eAAatG,GAAeoG,GAAUA,EAAO,KAAMzH,GAAYA,EAAQ,KAAOqB,CAAE,EAAG,CAACoG,CAAM,CAAC,EAE5GG,EACJF,GAAO,SAAS,SAAS,oCAAoC,GAAKJ,GAAY,eAEhF,OAAKH,EAKH,gCACE,gBAACU,EAAA,EAAkC,CAAC,oBAAqBV,CAAA,CAAsB,EAE9ES,GACC,gBAACxI,EAAA,EAAK,CAAC,MAAM,iDAAiD,SAAS,WAAU,yIAGjF,EAEDsI,GAAS,CAAC9G,GAAW,CAACgH,GACrB,gBAACxI,EAAA,EAAK,CAAC,SAAS,QAAQ,MAAM,0BAC3BsI,EAAM,SAAW,gBACpB,EAEDL,GAAe,OAAS,CAACA,GAAe,SAAW,CAACO,GACnD,gBAACxI,EAAA,EAAK,CAAC,SAAS,QAAQ,MAAM,qCAC3BiI,EAAc,OAAO,SAAW,gBACnC,EAEDI,GAAU,CAACC,GACV,gBAAC,KAAM,KACL,gBAAC,KAAK,CAAC,MAAK,GAAC,KAAK,sBAChB,gBAAC,IACC,SAAUD,EACV,mBAAoBJ,GAAe,QAAU,CAAC,EAC9C,uBAAwBF,CAAA,CAC1B,CACF,EACA,gBAAC,KAAK,CAAC,MAAK,GAAC,KAAK,yBAChB,gBAAC,GAAc,CAAC,uBAAwBA,CAAA,CAAsB,CAChE,EACA,gBAAC,KAAK,CAAC,MAAK,GAAC,KAAK,8BACf,CAAC,CAAE,MAAAW,CAAM,IAENA,GAAO,OAAO,IACZ,gBAAC,IACC,QAASH,EAAeG,EAAM,OAAO,EAAE,EACvC,uBAAwBX,CAAA,CAC1B,CAIR,CACF,CAEJ,EAjDO,IAmDX,EAEA,SAASY,IAAe,CACtB,MAAMf,EAAUH,GAAkB,EAElC,OACE,gBAAC,IAAuB,CAAC,OAAO,WAAW,QAAAG,EAAkB,WAAW,YACtE,gBAACE,GAAA,IAAS,CACZ,CAEJ,CAEA,YAAe,MAAkBa,GAAc,CAAE,MAAO,MAAO,CAAC,C,iFCxGzD,MAAMlC,EAAY,CAAC,CAAE,QAAAmC,EAAS,SAAAC,CAAS,IAAsB,CAClE,MAAMC,KAAsB,UAAOF,EAASG,CAAoB,EAC1DC,KAAqB,UAAOJ,EAASK,CAAmB,EAE9D,OAAIH,EAAoB,OACf,gBAACI,EAAA,CAAsB,QAASJ,CAAA,EAAsBD,CAAS,EAGpEG,EAAmB,OACd,gBAACG,EAAA,CAAqB,QAASH,CAAA,EAAqBH,CAAS,EAG/D,IACT,EAMMK,EAAwB,CAAC,CAAE,QAAAN,EAAS,SAAAC,CAAS,IAAwC,CACzF,MAAMO,KAAuB,MAA4B,EAGzD,OAFgBC,EAAeD,EAAsBR,CAAO,EAGnD,gCAAGC,CAAS,EAEZ,IAEX,EAEMM,EAAuB,CAAC,CAAE,QAAAP,EAAS,SAAAC,CAAS,IAAuC,CACvF,MAAMS,KAAuB,MAAwB,EAGrD,OAFgBD,EAAeC,EAAsBV,CAAO,EAGnD,gCAAGC,CAAS,EAEZ,IAEX,EAGA,SAASQ,EAAiCE,EAAyBX,EAAc,CAC/E,SAAO,SAAMW,CAAS,EACnB,KAAKX,CAAO,EACZ,OAAO,EACP,MAAM,EACN,KAAK,CAAC,CAACY,EAAYC,CAAO,IAAMA,IAAY,EAAI,CACrD,CAEA,SAASV,EAAqBW,EAA4B,CACxD,OAAO,OAAO,OAAO,IAAkB,EAAE,SAASA,CAAM,CAC1D,CAEA,SAAST,EAAoBS,EAA2B,CACtD,OAAO,OAAO,OAAO,IAAiB,EAAE,SAASA,CAAM,CACzD,C,oHC1DO,SAASjB,EAAmC,CAAE,oBAAAkB,CAAoB,EAA4C,CACnH,MAAM9M,KAAS,MAAWC,CAAS,EAE7B,CAAE,oCAAA8M,CAAoC,EAAI,kBAC1C,CAAE,YAAaC,CAAe,EAAID,EAAoC,EAEtEE,EAAoBH,IAAwB,KAMlD,GAAI,EAHFE,GAAgB,qBAChB,CAAC,KAAmB,SAAU,KAAmB,GAAG,EAAE,SAASA,GAAgB,mBAAmB,IAEnE,CAACC,EAChC,OAAO,KAGT,MAAMC,EAAuBF,EAAe,yBAA2B,EAEvE,OAAIA,EAAe,sBAAwB,KAAmB,SAE1D,gBAAC,IAAK,CAAC,MAAM,4DAA2D,4JAGtE,gBAAC,OAAI,UAAWhN,EAAO,WAAW,0HAGlC,CACF,EAIAgN,EAAe,sBAAwB,KAAmB,KAAOE,EAEjE,gBAAC,IAAK,CAAC,MAAM,iDAAiD,SAAS,WAAU,2IAG/E,gBAAC,OAAI,UAAWlN,EAAO,WAAW,0HAGlC,CACF,EAIG,IACT,CAEA,MAAMC,EAAaqB,IAA0B,CAC3C,aAAW;AAAA,iBACIA,EAAM,WAAW,UAAU;AAAA,mBACzBA,EAAM,WAAW,UAAU;AAAA,GAE9C,E,uEClDO,MAAMoJ,EAAa,CAAC,CACzB,QAAAyC,EACA,KAAAC,EACA,GAAAjL,EACA,OAAAuG,EACA,QAAA2E,EACA,UAAAtN,EACA,iBAAAuN,EAAmB,MACnB,GAAGC,CACL,IAAa,CACX,MAAMC,EAAY,OAAOL,GAAY,SAAWA,EAAU,OAE1D,OACE,gBAAC,IAAO,CAAC,QAASA,EAAS,UAAWG,CAAA,EACnCnL,EACC,gBAAC,MACC,QAAQ,YACR,KAAK,OACL,KAAAiL,EACA,KAAMjL,EACN,KAAK,KACL,OAAAuG,EACC,GAAG6E,EACJ,aAAYC,CAAA,CACd,EAEA,gBAAC,MACC,UAAAzN,EACA,QAAQ,YACR,KAAK,OACL,KAAK,KACL,KAAAqN,EACA,KAAK,SACL,QAAAC,EACC,GAAGE,EACJ,aAAYC,CAAA,CACd,CAEJ,CAEJ,C,wEClDA,MAAMC,EAA+C,CACnD,CAAC,KAAW,MAAM,EAAG,MACrB,CAAC,KAAW,WAAW,EAAG,UAC1B,CAAC,KAAW,UAAU,EAAG,MAC3B,EAMalK,EAAkB,CAAC,CAAE,MAAAsB,CAAM,IAAa,gBAAC,IAAQ,CAAC,MAAO4I,EAAkB5I,CAAK,GAAIA,CAAM,C,mJCH3F6I,GAAAA,IAEVA,EAAA,0BAA4B,8BAC5BA,EAAA,4BAA8B,gCAG9BA,EAAA,mBAAqB,uBACrBA,EAAA,iBAAmB,qBACnBA,EAAA,mBAAqB,sBACrBA,EAAA,mBAAqB,uBACrBA,EAAA,mBAAqB,uBAGrBA,EAAA,2BAA6B,+BAC7BA,EAAA,yBAA2B,6BAC3BA,EAAA,2BAA6B,6BAC7BA,EAAA,2BAA6B,+BAC7BA,EAAA,eAAiB,kBAGjBA,EAAA,yBAA2B,6BAC3BA,EAAA,2BAA6B,gCAC7BA,EAAA,6BAA+B,kCAC/BA,EAAA,yBAA2B,6BAC3BA,EAAA,2BAA6B,+BAG7BA,EAAA,cAAgB,iBAChBA,EAAA,YAAc,eACdA,EAAA,cAAgB,iBAGhBA,EAAA,eAAiB,mBACjBA,EAAA,iBAAmB,qBACnBA,EAAA,iBAAmB,qBACnBA,EAAA,iBAAmB,qBAnCTA,IAAAA,GAAA,IAsCAC,GAAAA,IAEVA,EAAA,gBAAkB,oBAClBA,EAAA,cAAgB,kBAChBA,EAAA,gBAAkB,oBAClBA,EAAA,gBAAkB,oBAElBA,EAAA,wBAA0B,6BAC1BA,EAAA,sBAAwB,2BACxBA,EAAA,wBAA0B,6BAC1BA,EAAA,wBAA0B,6BAVhBA,IAAAA,GAAA,IAaZ,MAAMC,EAAkB,GAMjB,SAASC,GAAwD,CA6BtE,MA1BgD,CAE9C,CAAC,mBAAiC,EAAG,CAACD,EAAiB,aAAI,cAAc,sBAAoB,kBAAkB,CAAC,EAChH,CAAC,iBAA+B,EAAG,CAACA,EAAiB,aAAI,cAAc,sBAAoB,gBAAgB,CAAC,EAC5G,CAAC,mBAAiC,EAAG,CAACA,EAAiB,aAAI,cAAc,sBAAoB,kBAAkB,CAAC,EAChH,CAAC,mBAAiC,EAAG,CAACA,EAAiB,aAAI,cAAc,sBAAoB,kBAAkB,CAAC,EAGhH,CAAC,4BAAyC,EAAG,CAC3CA,EACA,aAAI,cAAc,sBAAoB,yBAAyB,CACjE,EACA,CAAC,0BAAuC,EAAG,CACzCA,EACA,aAAI,cAAc,sBAAoB,wBAAwB,CAChE,EACA,CAAC,4BAAyC,EAAG,CAC3CA,EACA,aAAI,cAAc,sBAAoB,yBAAyB,CACjE,EACA,CAAC,4BAAyC,EAAG,CAC3CA,EACA,aAAI,cAAc,sBAAoB,yBAAyB,CACjE,CACF,CAGF,CAEO,SAASE,GAA6D,CAC3E,KAAM,CACJ,qBAAA5C,EACA,oBAAA6C,EACA,sBAAuBC,CACzB,KAAI,MAAgB,EAIdC,KAA2B,MAA4B/C,CAAqB,EAC5EgD,KAAsB,MAAwBhD,CAAqB,EAyEzE,MAtEiD,CAE/C,CAAC,6BAA4C,EAAG,CAC9C0C,EACA,aAAI,cAAc,sBAAoB,iCAAiC,CACzE,EACA,CAAC,+BAA8C,EAAG,CAChDG,EACA,aAAI,cAAc,sBAAoB,kCAAkC,CAC1E,EAEA,CAAC,sBAAqC,EAAG,CAACA,EAAqB,aAAI,cAAcE,EAAyB,MAAM,CAAC,EACjH,CAAC,oBAAmC,EAAG,CAACL,EAAiB,aAAI,cAAcK,EAAyB,IAAI,CAAC,EACzG,CAAC,qBAAqC,EAAG,CAACF,EAAqB,aAAI,cAAcE,EAAyB,MAAM,CAAC,EACjH,CAAC,sBAAqC,EAAG,CAACF,EAAqB,aAAI,cAAcE,EAAyB,MAAM,CAAC,EAEjH,CAAC,sBAAqC,EAAG,CACvCD,EACA,aAAI,cAAcC,EAAyB,IAAI,CACjD,EAEA,CAAC,8BAA6C,EAAG,CAC/CF,EACA,aAAI,cAAcE,EAAyB,MAAM,CACnD,EACA,CAAC,4BAA2C,EAAG,CAACL,EAAiB,aAAI,cAAcK,EAAyB,IAAI,CAAC,EACjH,CAAC,4BAA6C,EAAG,CAC/CF,EACA,aAAI,cAAcE,EAAyB,MAAM,CACnD,EACA,CAAC,8BAA6C,EAAG,CAC/CF,EACA,aAAI,cAAcE,EAAyB,MAAM,CACnD,EAEA,CAAC,4BAA2C,EAAG,CAC7CF,EACA,aAAI,cAAcE,EAAyB,MAAM,CACnD,EACA,CAAC,+BAA6C,EAAG,CAC/CL,EACA,aAAI,cAAcK,EAAyB,IAAI,CACjD,EACA,CAAC,iCAA+C,EAAG,CACjDF,EACA,aAAI,cAAcE,EAAyB,MAAM,CACnD,EACA,CAAC,4BAA2C,EAAG,CAC7CF,EACA,aAAI,cAAcE,EAAyB,MAAM,CACnD,EACA,CAAC,8BAA6C,EAAG,CAC/CD,EACA,aAAI,cAAcC,EAAyB,IAAI,CACjD,EACA,CAAC,iBAAiC,EAAG,CACnCD,EACA,aAAI,cAAcC,EAAyB,aAAa,WAAW,CACrE,EAEA,CAAC,gBAAgC,EAAG,CAACF,EAAqB,aAAI,cAAcG,EAAoB,MAAM,CAAC,EACvG,CAAC,cAA8B,EAAG,CAACN,EAAiB,aAAI,cAAcM,EAAoB,IAAI,CAAC,EAC/F,CAAC,gBAAgC,EAAG,CAACH,EAAqB,aAAI,cAAcG,EAAoB,MAAM,CAAC,EAEvG,CAAC,oBAAmC,EAAG,CAACH,EAAqB,aAAI,cAAcE,EAAyB,MAAM,CAAC,EAC/G,CAAC,kBAAiC,EAAG,CAACL,EAAiB,aAAI,cAAcK,EAAyB,IAAI,CAAC,EACvG,CAAC,oBAAmC,EAAG,CAACF,EAAqB,aAAI,cAAcE,EAAyB,MAAM,CAAC,EAC/G,CAAC,oBAAmC,EAAG,CAACF,EAAqB,aAAI,cAAcE,EAAyB,MAAM,CAAC,CACjH,CAGF,CAEO,SAASE,EAAuBtB,EAAqC,CAC1E,MAAMH,EAAYoB,EAA4B,EAE9C,SAAO,WAAQ,IACNpB,EAAUG,CAAM,EACtB,CAACH,EAAWG,CAAM,CAAC,CACxB,CAEO,SAASuB,EAAyBrC,EAA0C,CACjF,MAAMW,EAAYoB,EAA4B,EAE9C,SAAO,WAAQ,IACN/B,EAAQ,IAAKc,GAAWH,EAAUG,CAAM,CAAC,EAC/C,CAACH,EAAWX,CAAO,CAAC,CACzB,CAEO,SAASsC,EAAsBxB,EAAoC,CACxE,MAAMH,EAAYmB,EAAwB,EAC1C,SAAO,WAAQ,IAAMnB,EAAUG,CAAM,EAAG,CAACH,EAAWG,CAAM,CAAC,CAC7D,C,wEC1MO,SAASvI,GAGd,CACA,KAAM,CAAE,OAAAgK,CAAO,KAAI,MAAY,EACzBlG,KAAc,WAAQ,IAAM,IAAI,gBAAgBkG,CAAM,EAAG,CAACA,CAAM,CAAC,EAEjEC,KAAS,eAAY,CAACC,EAA6DC,IAAsB,CAC7G,KAAgB,QAAQD,EAAcC,CAAO,CAC/C,EAAG,CAAC,CAAC,EAEL,MAAO,CAACrG,EAAamG,CAAM,CAC7B,C,kDCbO,MAAMG,EAAuBpN,IAA0B,CAC5D,SAAO;AAAA;AAAA,qBAEYA,EAAM,MAAM,OAAO;AAAA,wBAChBA,EAAM,OAAO,OAAO;AAAA,wBACpBA,EAAM,OAAO,WAAW;AAAA;AAAA;AAAA,iBAG/BA,EAAM,QAAQ,CAAC;AAAA;AAAA;AAAA;AAAA,mBAIbA,EAAM,QAAQ,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOhC,WAAS;AAAA,wBACaA,EAAM,OAAO,WAAW;AAAA,IAE9C,aAAW;AAAA;AAAA,IAGX,YAAU;AAAA,WACDA,EAAM,QAAQ,CAAC;AAAA,IAExB,eAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAMMA,EAAM,QAAQ,EAAG;AAAA;AAAA,GAGtC,E","sources":["webpack://grafana/./public/app/core/hooks/useCleanup.ts","webpack://grafana/./public/app/features/alerting/unified/components/silences/MatchersField.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencePeriod.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencedInstancesPreview.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencesEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/ActionButton.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/Matchers.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/NoSilencesCTA.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencedAlertsTableRow.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencedAlertsTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilenceDetails.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilenceStateTag.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencesFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencesTable.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useSilenceNavData.ts","webpack://grafana/./public/app/features/alerting/unified/Silences.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Authorize.tsx","webpack://grafana/./public/app/features/alerting/unified/components/GrafanaAlertmanagerDeliveryWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/ActionIcon.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/AmAlertStateTag.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAbilities.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useURLSearchParams.ts","webpack://grafana/./public/app/features/alerting/unified/styles/table.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\nimport { useDispatch } from 'app/types';\n\nimport { cleanUpAction, CleanUpAction } from '../actions/cleanUp';\n\nexport function useCleanup(cleanupAction: CleanUpAction) {\n  const dispatch = useDispatch();\n  //bit of a hack to unburden user from having to wrap stateSelcetor in a useCallback. Otherwise cleanup would happen on every render\n  const selectorRef = useRef(cleanupAction);\n  selectorRef.current = cleanupAction;\n  useEffect(() => {\n    return () => {\n      dispatch(cleanUpAction({ cleanupAction: selectorRef.current }));\n    };\n  }, [dispatch]);\n}\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\nimport { useFormContext, useFieldArray } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Field, Input, IconButton, InputControl, useStyles2, Select } from '@grafana/ui';\nimport { MatcherOperator } from 'app/plugins/datasource/alertmanager/types';\n\nimport { SilenceFormFields } from '../../types/silence-form';\nimport { matcherFieldOptions } from '../../utils/alertmanager';\n\ninterface Props {\n  className?: string;\n}\n\nconst MatchersField = ({ className }: Props) => {\n  const styles = useStyles2(getStyles);\n  const formApi = useFormContext<SilenceFormFields>();\n  const {\n    control,\n    register,\n    formState: { errors },\n  } = formApi;\n\n  const { fields: matchers = [], append, remove } = useFieldArray<SilenceFormFields>({ name: 'matchers' });\n\n  return (\n    <div className={cx(className, styles.wrapper)}>\n      <Field label=\"Matching labels\" required>\n        <div>\n          <div className={styles.matchers}>\n            {matchers.map((matcher, index) => {\n              return (\n                <div className={styles.row} key={`${matcher.id}`} data-testid=\"matcher\">\n                  <Field\n                    label=\"Label\"\n                    invalid={!!errors?.matchers?.[index]?.name}\n                    error={errors?.matchers?.[index]?.name?.message}\n                  >\n                    <Input\n                      {...register(`matchers.${index}.name` as const, {\n                        required: { value: true, message: 'Required.' },\n                      })}\n                      defaultValue={matcher.name}\n                      placeholder=\"label\"\n                    />\n                  </Field>\n                  <Field label={'Operator'}>\n                    <InputControl\n                      control={control}\n                      render={({ field: { onChange, ref, ...field } }) => (\n                        <Select\n                          {...field}\n                          onChange={(value) => onChange(value.value)}\n                          className={styles.matcherOptions}\n                          options={matcherFieldOptions}\n                          aria-label=\"operator\"\n                        />\n                      )}\n                      defaultValue={matcher.operator || matcherFieldOptions[0].value}\n                      name={`matchers.${index}.operator` as const}\n                      rules={{ required: { value: true, message: 'Required.' } }}\n                    />\n                  </Field>\n                  <Field\n                    label=\"Value\"\n                    invalid={!!errors?.matchers?.[index]?.value}\n                    error={errors?.matchers?.[index]?.value?.message}\n                  >\n                    <Input\n                      {...register(`matchers.${index}.value` as const, {\n                        required: { value: true, message: 'Required.' },\n                      })}\n                      defaultValue={matcher.value}\n                      placeholder=\"value\"\n                    />\n                  </Field>\n                  {matchers.length > 1 && (\n                    <IconButton\n                      className={styles.removeButton}\n                      tooltip=\"Remove matcher\"\n                      name=\"trash-alt\"\n                      onClick={() => remove(index)}\n                    >\n                      Remove\n                    </IconButton>\n                  )}\n                </div>\n              );\n            })}\n          </div>\n          <Button\n            type=\"button\"\n            icon=\"plus\"\n            variant=\"secondary\"\n            onClick={() => {\n              const newMatcher = { name: '', value: '', operator: MatcherOperator.equal };\n              append(newMatcher);\n            }}\n          >\n            Add matcher\n          </Button>\n        </div>\n      </Field>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css`\n      margin-top: ${theme.spacing(2)};\n    `,\n    row: css`\n      display: flex;\n      align-items: flex-start;\n      flex-direction: row;\n      background-color: ${theme.colors.background.secondary};\n      padding: ${theme.spacing(1)} ${theme.spacing(1)} 0 ${theme.spacing(1)};\n      & > * + * {\n        margin-left: ${theme.spacing(2)};\n      }\n    `,\n    removeButton: css`\n      margin-left: ${theme.spacing(1)};\n      margin-top: ${theme.spacing(2.5)};\n    `,\n    matcherOptions: css`\n      min-width: 140px;\n    `,\n    matchers: css`\n      max-width: ${theme.breakpoints.values.sm}px;\n      margin: ${theme.spacing(1)} 0;\n      padding-top: ${theme.spacing(0.5)};\n    `,\n  };\n};\n\nexport default MatchersField;\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport { useController, useFormContext } from 'react-hook-form';\n\nimport { dateTime } from '@grafana/data';\nimport { Field, TimeRangeInput } from '@grafana/ui';\n\nimport { SilenceFormFields } from '../../types/silence-form';\n\nexport const SilencePeriod = () => {\n  const { control, getValues } = useFormContext<SilenceFormFields>();\n\n  const {\n    field: { onChange: onChangeStartsAt, value: startsAt },\n    fieldState: { invalid: startsAtInvalid },\n  } = useController({\n    name: 'startsAt',\n    control,\n    rules: {\n      validate: (value) => getValues().endsAt > value,\n    },\n  });\n\n  const {\n    field: { onChange: onChangeEndsAt, value: endsAt },\n    fieldState: { invalid: endsAtInvalid },\n  } = useController({\n    name: 'endsAt',\n    control,\n    rules: {\n      validate: (value) => getValues().startsAt < value,\n    },\n  });\n\n  const {\n    field: { onChange: onChangeTimeZone, value: timeZone },\n  } = useController({\n    name: 'timeZone',\n    control,\n  });\n\n  const invalid = startsAtInvalid || endsAtInvalid;\n\n  const from = dateTime(startsAt);\n  const to = dateTime(endsAt);\n\n  return (\n    <Field\n      className={styles.timeRange}\n      label=\"Silence start and end\"\n      error={invalid ? 'To is before or the same as from' : ''}\n      invalid={invalid}\n    >\n      <TimeRangeInput\n        value={{\n          from,\n          to,\n          raw: {\n            from,\n            to,\n          },\n        }}\n        timeZone={timeZone}\n        onChange={(newValue) => {\n          onChangeStartsAt(dateTime(newValue.from));\n          onChangeEndsAt(dateTime(newValue.to));\n        }}\n        onChangeTimeZone={(newValue) => onChangeTimeZone(newValue)}\n        hideTimeZone={false}\n        hideQuickRanges={true}\n        placeholder={'Select time range'}\n      />\n    </Field>\n  );\n};\n\nconst styles = {\n  timeRange: css`\n    width: 400px;\n  `,\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { dateTime, GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Badge, LoadingPlaceholder, useStyles2 } from '@grafana/ui';\nimport { AlertmanagerAlert, Matcher } from 'app/plugins/datasource/alertmanager/types';\n\nimport { alertmanagerApi } from '../../api/alertmanagerApi';\nimport { isNullDate } from '../../utils/time';\nimport { AlertLabels } from '../AlertLabels';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\n\nimport { AmAlertStateTag } from './AmAlertStateTag';\n\ninterface Props {\n  amSourceName: string;\n  matchers: Matcher[];\n}\n\nexport const SilencedInstancesPreview = ({ amSourceName, matchers }: Props) => {\n  const { useGetAlertmanagerAlertsQuery } = alertmanagerApi;\n  const styles = useStyles2(getStyles);\n  const columns = useColumns();\n\n  // By default the form contains an empty matcher - with empty name and value and = operator\n  // We don't want to fetch previews for empty matchers as it results in all alerts returned\n  const hasValidMatchers = matchers.some((matcher) => matcher.value && matcher.name);\n\n  const {\n    currentData: alerts = [],\n    isFetching,\n    isError,\n  } = useGetAlertmanagerAlertsQuery(\n    { amSourceName, filter: { matchers } },\n    { skip: !hasValidMatchers, refetchOnMountOrArgChange: true }\n  );\n\n  const tableItemAlerts = alerts.map<DynamicTableItemProps<AlertmanagerAlert>>((alert) => ({\n    id: alert.fingerprint,\n    data: alert,\n  }));\n\n  return (\n    <div>\n      <h4 className={styles.title}>\n        Affected alert instances\n        {tableItemAlerts.length > 0 ? (\n          <Badge className={styles.badge} color=\"blue\" text={tableItemAlerts.length} />\n        ) : null}\n      </h4>\n      {!hasValidMatchers && <span>Add a valid matcher to see affected alerts</span>}\n      {isError && (\n        <Alert title=\"Preview not available\" severity=\"error\">\n          Error occured when generating affected alerts preview. Are you matchers valid?\n        </Alert>\n      )}\n      {isFetching && <LoadingPlaceholder text=\"Loading...\" />}\n      {!isFetching && !isError && hasValidMatchers && (\n        <div className={styles.table}>\n          {tableItemAlerts.length > 0 ? (\n            <DynamicTable\n              items={tableItemAlerts}\n              isExpandable={false}\n              cols={columns}\n              pagination={{ itemsPerPage: 10 }}\n            />\n          ) : (\n            <span>No matching alert instances found</span>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction useColumns(): Array<DynamicTableColumnProps<AlertmanagerAlert>> {\n  const styles = useStyles2(getStyles);\n\n  return [\n    {\n      id: 'state',\n      label: 'State',\n      renderCell: function renderStateTag({ data }) {\n        return <AmAlertStateTag state={data.status.state} />;\n      },\n      size: '120px',\n      className: styles.stateColumn,\n    },\n    {\n      id: 'labels',\n      label: 'Labels',\n      renderCell: function renderName({ data }) {\n        return <AlertLabels labels={data.labels} size=\"sm\" />;\n      },\n      size: 'auto',\n    },\n    {\n      id: 'created',\n      label: 'Created',\n      renderCell: function renderSummary({ data }) {\n        return <>{isNullDate(data.startsAt) ? '-' : dateTime(data.startsAt).format('YYYY-MM-DD HH:mm:ss')}</>;\n      },\n      size: '180px',\n    },\n  ];\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  table: css`\n    max-width: ${theme.breakpoints.values.lg}px;\n  `,\n  moreMatches: css`\n    margin-top: ${theme.spacing(1)};\n  `,\n  title: css`\n    display: flex;\n    align-items: center;\n  `,\n  badge: css`\n    margin-left: ${theme.spacing(1)};\n  `,\n  stateColumn: css`\n    display: flex;\n    align-items: center;\n  `,\n});\n","import { css, cx } from '@emotion/css';\nimport { isEqual, pickBy } from 'lodash';\nimport React, { useMemo, useState } from 'react';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport { useDebounce } from 'react-use';\n\nimport {\n  addDurationToDate,\n  dateTime,\n  DefaultTimeZone,\n  GrafanaTheme2,\n  intervalToAbbreviatedDurationString,\n  isValidDate,\n  parseDuration,\n} from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Button, Field, FieldSet, Input, LinkButton, TextArea, useStyles2 } from '@grafana/ui';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { Matcher, MatcherOperator, Silence, SilenceCreatePayload } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { useURLSearchParams } from '../../hooks/useURLSearchParams';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { createOrUpdateSilenceAction } from '../../state/actions';\nimport { SilenceFormFields } from '../../types/silence-form';\nimport { matcherFieldToMatcher, matcherToMatcherField } from '../../utils/alertmanager';\nimport { parseQueryParamMatchers } from '../../utils/matchers';\nimport { makeAMLink } from '../../utils/misc';\nimport { initialAsyncRequestState } from '../../utils/redux';\n\nimport MatchersField from './MatchersField';\nimport { SilencePeriod } from './SilencePeriod';\nimport { SilencedInstancesPreview } from './SilencedInstancesPreview';\n\ninterface Props {\n  silence?: Silence;\n  alertManagerSourceName: string;\n}\n\nconst defaultsFromQuery = (searchParams: URLSearchParams): Partial<SilenceFormFields> => {\n  const defaults: Partial<SilenceFormFields> = {};\n\n  const comment = searchParams.get('comment');\n  const matchers = searchParams.getAll('matcher');\n\n  const formMatchers = parseQueryParamMatchers(matchers);\n  if (formMatchers.length) {\n    defaults.matchers = formMatchers.map(matcherToMatcherField);\n  }\n\n  if (comment) {\n    defaults.comment = comment;\n  }\n\n  return defaults;\n};\n\nconst getDefaultFormValues = (searchParams: URLSearchParams, silence?: Silence): SilenceFormFields => {\n  const now = new Date();\n  if (silence) {\n    const isExpired = Date.parse(silence.endsAt) < Date.now();\n    const interval = isExpired\n      ? {\n          start: now,\n          end: addDurationToDate(now, { hours: 2 }),\n        }\n      : { start: new Date(silence.startsAt), end: new Date(silence.endsAt) };\n    return {\n      id: silence.id,\n      startsAt: interval.start.toISOString(),\n      endsAt: interval.end.toISOString(),\n      comment: silence.comment,\n      createdBy: silence.createdBy,\n      duration: intervalToAbbreviatedDurationString(interval),\n      isRegex: false,\n      matchers: silence.matchers?.map(matcherToMatcherField) || [],\n      matcherName: '',\n      matcherValue: '',\n      timeZone: DefaultTimeZone,\n    };\n  } else {\n    const endsAt = addDurationToDate(now, { hours: 2 }); // Default time period is now + 2h\n    return {\n      id: '',\n      startsAt: now.toISOString(),\n      endsAt: endsAt.toISOString(),\n      comment: `created ${dateTime().format('YYYY-MM-DD HH:mm')}`,\n      createdBy: config.bootData.user.name,\n      duration: '2h',\n      isRegex: false,\n      matchers: [{ name: '', value: '', operator: MatcherOperator.equal }],\n      matcherName: '',\n      matcherValue: '',\n      timeZone: DefaultTimeZone,\n      ...defaultsFromQuery(searchParams),\n    };\n  }\n};\n\nexport const SilencesEditor = ({ silence, alertManagerSourceName }: Props) => {\n  const [urlSearchParams] = useURLSearchParams();\n\n  const defaultValues = useMemo(() => getDefaultFormValues(urlSearchParams, silence), [silence, urlSearchParams]);\n  const formAPI = useForm({ defaultValues });\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n  const [matchersForPreview, setMatchersForPreview] = useState<Matcher[]>(\n    defaultValues.matchers.map(matcherFieldToMatcher)\n  );\n\n  const { loading } = useUnifiedAlertingSelector((state) => state.updateSilence);\n\n  useCleanup((state) => (state.unifiedAlerting.updateSilence = initialAsyncRequestState));\n\n  const { register, handleSubmit, formState, watch, setValue, clearErrors } = formAPI;\n\n  const onSubmit = (data: SilenceFormFields) => {\n    const { id, startsAt, endsAt, comment, createdBy, matchers: matchersFields } = data;\n    const matchers = matchersFields.map(matcherFieldToMatcher);\n    const payload = pickBy(\n      {\n        id,\n        startsAt,\n        endsAt,\n        comment,\n        createdBy,\n        matchers,\n      },\n      (value) => !!value\n    ) as SilenceCreatePayload;\n    dispatch(\n      createOrUpdateSilenceAction({\n        alertManagerSourceName,\n        payload,\n        exitOnSave: true,\n        successMessage: `Silence ${payload.id ? 'updated' : 'created'}`,\n      })\n    );\n  };\n\n  const duration = watch('duration');\n  const startsAt = watch('startsAt');\n  const endsAt = watch('endsAt');\n  const matcherFields = watch('matchers');\n\n  // Keep duration and endsAt in sync\n  const [prevDuration, setPrevDuration] = useState(duration);\n  useDebounce(\n    () => {\n      if (isValidDate(startsAt) && isValidDate(endsAt)) {\n        if (duration !== prevDuration) {\n          setValue('endsAt', dateTime(addDurationToDate(new Date(startsAt), parseDuration(duration))).toISOString());\n          setPrevDuration(duration);\n        } else {\n          const startValue = new Date(startsAt).valueOf();\n          const endValue = new Date(endsAt).valueOf();\n          if (endValue > startValue) {\n            const nextDuration = intervalToAbbreviatedDurationString({\n              start: new Date(startsAt),\n              end: new Date(endsAt),\n            });\n            setValue('duration', nextDuration);\n            setPrevDuration(nextDuration);\n          }\n        }\n      }\n    },\n    700,\n    [clearErrors, duration, endsAt, prevDuration, setValue, startsAt]\n  );\n\n  useDebounce(\n    () => {\n      // React-hook-form watch does not return referentialy equal values so this trick is needed\n      const newMatchers = matcherFields.filter((m) => m.name && m.value).map(matcherFieldToMatcher);\n      if (!isEqual(matchersForPreview, newMatchers)) {\n        setMatchersForPreview(newMatchers);\n      }\n    },\n    700,\n    [matcherFields]\n  );\n\n  const userLogged = Boolean(config.bootData.user.isSignedIn && config.bootData.user.name);\n\n  return (\n    <FormProvider {...formAPI}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <FieldSet label={`${silence ? 'Recreate silence' : 'Create silence'}`}>\n          <div className={cx(styles.flexRow, styles.silencePeriod)}>\n            <SilencePeriod />\n            <Field\n              label=\"Duration\"\n              invalid={!!formState.errors.duration}\n              error={\n                formState.errors.duration &&\n                (formState.errors.duration.type === 'required' ? 'Required field' : formState.errors.duration.message)\n              }\n            >\n              <Input\n                className={styles.createdBy}\n                {...register('duration', {\n                  validate: (value) =>\n                    Object.keys(parseDuration(value)).length === 0\n                      ? 'Invalid duration. Valid example: 1d 4h (Available units: y, M, w, d, h, m, s)'\n                      : undefined,\n                })}\n                id=\"duration\"\n              />\n            </Field>\n          </div>\n\n          <MatchersField />\n          <Field\n            className={cx(styles.field, styles.textArea)}\n            label=\"Comment\"\n            required\n            error={formState.errors.comment?.message}\n            invalid={!!formState.errors.comment}\n          >\n            <TextArea\n              {...register('comment', { required: { value: true, message: 'Required.' } })}\n              rows={5}\n              placeholder=\"Details about the silence\"\n            />\n          </Field>\n          {!userLogged && (\n            <Field\n              className={cx(styles.field, styles.createdBy)}\n              label=\"Created By\"\n              required\n              error={formState.errors.createdBy?.message}\n              invalid={!!formState.errors.createdBy}\n            >\n              <Input\n                {...register('createdBy', { required: { value: true, message: 'Required.' } })}\n                placeholder=\"Who's creating the silence\"\n              />\n            </Field>\n          )}\n          <SilencedInstancesPreview amSourceName={alertManagerSourceName} matchers={matchersForPreview} />\n        </FieldSet>\n        <div className={styles.flexRow}>\n          {loading && (\n            <Button disabled={true} icon=\"fa fa-spinner\" variant=\"primary\">\n              Saving...\n            </Button>\n          )}\n          {!loading && <Button type=\"submit\">Save silence</Button>}\n          <LinkButton href={makeAMLink('alerting/silences', alertManagerSourceName)} variant={'secondary'}>\n            Cancel\n          </LinkButton>\n        </div>\n      </form>\n    </FormProvider>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  field: css`\n    margin: ${theme.spacing(1, 0)};\n  `,\n  textArea: css`\n    max-width: ${theme.breakpoints.values.sm}px;\n  `,\n  createdBy: css`\n    width: 200px;\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n\n    & > * {\n      margin-right: ${theme.spacing(1)};\n    }\n  `,\n  silencePeriod: css`\n    max-width: ${theme.breakpoints.values.sm}px;\n  `,\n});\n\nexport default SilencesEditor;\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { Button, ButtonProps } from '@grafana/ui/src/components/Button';\n\ntype Props = Omit<ButtonProps, 'variant' | 'size'>;\n\nexport const ActionButton = ({ className, ...restProps }: Props) => {\n  const styles = useStyles2(getStyle);\n  return <Button variant=\"secondary\" size=\"xs\" className={cx(styles.wrapper, className)} {...restProps} />;\n};\n\nexport const getStyle = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    height: 24px;\n    font-size: ${theme.typography.bodySmall.fontSize};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { TagList, useStyles2 } from '@grafana/ui';\nimport { Matcher } from 'app/plugins/datasource/alertmanager/types';\n\nimport { matcherToOperator } from '../../utils/alertmanager';\n\ntype MatchersProps = { matchers: Matcher[] };\n\nexport const Matchers = ({ matchers }: MatchersProps) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <div>\n      <TagList\n        className={styles.tags}\n        tags={matchers.map((matcher) => `${matcher.name}${matcherToOperator(matcher)}${matcher.value}`)}\n      />\n    </div>\n  );\n};\n\nconst getStyles = () => ({\n  tags: css`\n    justify-content: flex-start;\n  `,\n});\n","import React from 'react';\n\nimport { CallToActionCard } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { contextSrv } from 'app/core/services/context_srv';\n\nimport { getInstancesPermissions } from '../../utils/access-control';\nimport { makeAMLink } from '../../utils/misc';\n\ntype Props = {\n  alertManagerSourceName: string;\n};\n\nexport const NoSilencesSplash = ({ alertManagerSourceName }: Props) => {\n  const permissions = getInstancesPermissions(alertManagerSourceName);\n\n  if (contextSrv.hasPermission(permissions.create)) {\n    return (\n      <EmptyListCTA\n        title=\"You haven't created any silences yet\"\n        buttonIcon=\"bell-slash\"\n        buttonLink={makeAMLink('alerting/silence/new', alertManagerSourceName)}\n        buttonTitle=\"Create silence\"\n      />\n    );\n  }\n  return <CallToActionCard callToActionElement={<div />} message=\"No silences found.\" />;\n};\n","import React, { useState } from 'react';\n\nimport { intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\n\nimport { AlertLabels } from '../AlertLabels';\nimport { CollapseToggle } from '../CollapseToggle';\n\nimport { AmAlertStateTag } from './AmAlertStateTag';\n\ninterface Props {\n  alert: AlertmanagerAlert;\n  className?: string;\n}\n\nexport const SilencedAlertsTableRow = ({ alert, className }: Props) => {\n  const [isCollapsed, setIsCollapsed] = useState(true);\n\n  const duration = intervalToAbbreviatedDurationString({\n    start: new Date(alert.startsAt),\n    end: new Date(alert.endsAt),\n  });\n  const alertName = Object.entries(alert.labels).reduce((name, [labelKey, labelValue]) => {\n    if (labelKey === 'alertname' || labelKey === '__alert_rule_title__') {\n      name = labelValue;\n    }\n    return name;\n  }, '');\n  return (\n    <>\n      <tr className={className}>\n        <td>\n          <CollapseToggle isCollapsed={isCollapsed} onToggle={(collapsed) => setIsCollapsed(collapsed)} />\n        </td>\n        <td>\n          <AmAlertStateTag state={alert.status.state} />\n        </td>\n        <td>for {duration} seconds</td>\n        <td>{alertName}</td>\n      </tr>\n      {!isCollapsed && (\n        <tr className={className}>\n          <td></td>\n          <td colSpan={5}>\n            <AlertLabels labels={alert.labels} size=\"sm\" />\n          </td>\n        </tr>\n      )}\n    </>\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\n\nimport { getAlertTableStyles } from '../../styles/table';\n\nimport { SilencedAlertsTableRow } from './SilencedAlertsTableRow';\n\ninterface Props {\n  silencedAlerts: AlertmanagerAlert[];\n}\n\nconst SilencedAlertsTable = ({ silencedAlerts }: Props) => {\n  const tableStyles = useStyles2(getAlertTableStyles);\n  const styles = useStyles2(getStyles);\n\n  if (!!silencedAlerts.length) {\n    return (\n      <table className={cx(tableStyles.table, styles.tableMargin)}>\n        <colgroup>\n          <col className={tableStyles.colExpand} />\n          <col className={styles.colState} />\n          <col />\n          <col className={styles.colName} />\n        </colgroup>\n        <thead>\n          <tr>\n            <th></th>\n            <th>State</th>\n            <th></th>\n            <th>Alert name</th>\n          </tr>\n        </thead>\n        <tbody>\n          {silencedAlerts.map((alert, index) => {\n            return (\n              <SilencedAlertsTableRow\n                key={alert.fingerprint}\n                alert={alert}\n                className={index % 2 === 0 ? tableStyles.evenRow : ''}\n              />\n            );\n          })}\n        </tbody>\n      </table>\n    );\n  } else {\n    return null;\n  }\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tableMargin: css`\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  colState: css`\n    width: 110px;\n  `,\n  colName: css`\n    width: 65%;\n  `,\n});\n\nexport default SilencedAlertsTable;\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { dateMath, GrafanaTheme2, intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport SilencedAlertsTable from './SilencedAlertsTable';\nimport { SilenceTableItem } from './SilencesTable';\n\ninterface Props {\n  silence: SilenceTableItem;\n}\n\nexport const SilenceDetails = ({ silence }: Props) => {\n  const { startsAt, endsAt, comment, createdBy, silencedAlerts } = silence;\n  const styles = useStyles2(getStyles);\n\n  const dateDisplayFormat = 'YYYY-MM-DD HH:mm';\n  const startsAtDate = dateMath.parse(startsAt);\n  const endsAtDate = dateMath.parse(endsAt);\n  const duration = intervalToAbbreviatedDurationString({ start: new Date(startsAt), end: new Date(endsAt) });\n  return (\n    <div className={styles.container}>\n      <div className={styles.title}>Comment</div>\n      <div>{comment}</div>\n      <div className={styles.title}>Schedule</div>\n      <div>{`${startsAtDate?.format(dateDisplayFormat)} - ${endsAtDate?.format(dateDisplayFormat)}`}</div>\n      <div className={styles.title}>Duration</div>\n      <div> {duration}</div>\n      <div className={styles.title}>Created by</div>\n      <div> {createdBy}</div>\n      <div className={styles.title}>Affected alerts</div>\n      <SilencedAlertsTable silencedAlerts={silencedAlerts} />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: grid;\n    grid-template-columns: 1fr 9fr;\n    grid-row-gap: 1rem;\n  `,\n  title: css`\n    color: ${theme.colors.text.primary};\n  `,\n  row: css`\n    margin: ${theme.spacing(1, 0)};\n  `,\n});\n","import React from 'react';\n\nimport { SilenceState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { State, StateTag } from '../StateTag';\n\nconst silenceStateToState: Record<SilenceState, State> = {\n  [SilenceState.Active]: 'good',\n  [SilenceState.Expired]: 'neutral',\n  [SilenceState.Pending]: 'neutral',\n};\n\ninterface Props {\n  state: SilenceState;\n}\n\nexport const SilenceStateTag = ({ state }: Props) => <StateTag state={silenceStateToState[state]}>{state}</StateTag>;\n","import { css } from '@emotion/css';\nimport { debounce, uniqueId } from 'lodash';\nimport React, { FormEvent, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Button, Field, Icon, Input, Label, Tooltip, useStyles2 } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\n\nimport { parseMatchers } from '../../utils/alertmanager';\nimport { getSilenceFiltersFromUrlParams } from '../../utils/misc';\n\nconst getQueryStringKey = () => uniqueId('query-string-');\n\nexport const SilencesFilter = () => {\n  const [queryStringKey, setQueryStringKey] = useState(getQueryStringKey());\n  const [queryParams, setQueryParams] = useQueryParams();\n  const { queryString } = getSilenceFiltersFromUrlParams(queryParams);\n  const styles = useStyles2(getStyles);\n\n  const handleQueryStringChange = debounce((e: FormEvent<HTMLInputElement>) => {\n    const target = e.target as HTMLInputElement;\n    setQueryParams({ queryString: target.value || null });\n  }, 400);\n\n  const clearFilters = () => {\n    setQueryParams({\n      queryString: null,\n      silenceState: null,\n    });\n    setTimeout(() => setQueryStringKey(getQueryStringKey()));\n  };\n\n  const inputInvalid = queryString && queryString.length > 3 ? parseMatchers(queryString).length === 0 : false;\n\n  return (\n    <div className={styles.flexRow}>\n      <Field\n        className={styles.rowChild}\n        label={\n          <Label>\n            <Stack gap={0.5}>\n              <span>Search by matchers</span>\n              <Tooltip\n                content={\n                  <div>\n                    Filter silences by matchers using a comma separated list of matchers, ie:\n                    <pre>{`severity=critical, instance=~cluster-us-.+`}</pre>\n                  </div>\n                }\n              >\n                <Icon name=\"info-circle\" size=\"sm\" />\n              </Tooltip>\n            </Stack>\n          </Label>\n        }\n        invalid={inputInvalid}\n        error={inputInvalid ? 'Query must use valid matcher syntax' : null}\n      >\n        <Input\n          key={queryStringKey}\n          className={styles.searchInput}\n          prefix={<Icon name=\"search\" />}\n          onChange={handleQueryStringChange}\n          defaultValue={queryString ?? ''}\n          placeholder=\"Search\"\n          data-testid=\"search-query-input\"\n        />\n      </Field>\n\n      {queryString && (\n        <div className={styles.rowChild}>\n          <Button variant=\"secondary\" icon=\"times\" onClick={clearFilters}>\n            Clear filters\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  searchInput: css`\n    width: 360px;\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    align-items: flex-end;\n    padding-bottom: ${theme.spacing(3)};\n    border-bottom: 1px solid ${theme.colors.border.medium};\n  `,\n  rowChild: css`\n    margin-right: ${theme.spacing(1)};\n    margin-bottom: 0;\n    max-height: 52px;\n  `,\n  fieldLabel: css`\n    font-size: 12px;\n    font-weight: 500;\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport { dateMath, GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { CollapsableSection, Icon, Link, LinkButton, useStyles2 } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { AlertmanagerAlert, Silence, SilenceState } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { AlertmanagerAction, useAlertmanagerAbility } from '../../hooks/useAbilities';\nimport { expireSilenceAction } from '../../state/actions';\nimport { parseMatchers } from '../../utils/alertmanager';\nimport { getSilenceFiltersFromUrlParams, makeAMLink } from '../../utils/misc';\nimport { Authorize } from '../Authorize';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { ActionButton } from '../rules/ActionButton';\nimport { ActionIcon } from '../rules/ActionIcon';\n\nimport { Matchers } from './Matchers';\nimport { NoSilencesSplash } from './NoSilencesCTA';\nimport { SilenceDetails } from './SilenceDetails';\nimport { SilenceStateTag } from './SilenceStateTag';\nimport { SilencesFilter } from './SilencesFilter';\n\nexport interface SilenceTableItem extends Silence {\n  silencedAlerts: AlertmanagerAlert[];\n}\n\ntype SilenceTableColumnProps = DynamicTableColumnProps<SilenceTableItem>;\ntype SilenceTableItemProps = DynamicTableItemProps<SilenceTableItem>;\ninterface Props {\n  silences: Silence[];\n  alertManagerAlerts: AlertmanagerAlert[];\n  alertManagerSourceName: string;\n}\n\nconst SilencesTable = ({ silences, alertManagerAlerts, alertManagerSourceName }: Props) => {\n  const styles = useStyles2(getStyles);\n  const [queryParams] = useQueryParams();\n  const filteredSilencesNotExpired = useFilteredSilences(silences, false);\n  const filteredSilencesExpired = useFilteredSilences(silences, true);\n\n  const { silenceState: silenceStateInParams } = getSilenceFiltersFromUrlParams(queryParams);\n  const showExpiredFromUrl = silenceStateInParams === SilenceState.Expired;\n\n  const itemsNotExpired = useMemo((): SilenceTableItemProps[] => {\n    const findSilencedAlerts = (id: string) => {\n      return alertManagerAlerts.filter((alert) => alert.status.silencedBy.includes(id));\n    };\n    return filteredSilencesNotExpired.map((silence) => {\n      const silencedAlerts = findSilencedAlerts(silence.id);\n      return {\n        id: silence.id,\n        data: { ...silence, silencedAlerts },\n      };\n    });\n  }, [filteredSilencesNotExpired, alertManagerAlerts]);\n\n  const itemsExpired = useMemo((): SilenceTableItemProps[] => {\n    const findSilencedAlerts = (id: string) => {\n      return alertManagerAlerts.filter((alert) => alert.status.silencedBy.includes(id));\n    };\n    return filteredSilencesExpired.map((silence) => {\n      const silencedAlerts = findSilencedAlerts(silence.id);\n      return {\n        id: silence.id,\n        data: { ...silence, silencedAlerts },\n      };\n    });\n  }, [filteredSilencesExpired, alertManagerAlerts]);\n\n  return (\n    <div data-testid=\"silences-table\">\n      {!!silences.length && (\n        <Stack direction=\"column\">\n          <SilencesFilter />\n          <Authorize actions={[AlertmanagerAction.CreateSilence]}>\n            <div className={styles.topButtonContainer}>\n              <LinkButton href={makeAMLink('/alerting/silence/new', alertManagerSourceName)} icon=\"plus\">\n                Add Silence\n              </LinkButton>\n            </div>\n          </Authorize>\n          <SilenceList\n            items={itemsNotExpired}\n            alertManagerSourceName={alertManagerSourceName}\n            dataTestId=\"not-expired-table\"\n          />\n          {itemsExpired.length > 0 && (\n            <CollapsableSection label={`Expired silences (${itemsExpired.length})`} isOpen={showExpiredFromUrl}>\n              <div className={styles.callout}>\n                <Icon className={styles.calloutIcon} name=\"info-circle\" />\n                <span>Expired silences are automatically deleted after 5 days.</span>\n              </div>\n              <SilenceList\n                items={itemsExpired}\n                alertManagerSourceName={alertManagerSourceName}\n                dataTestId=\"expired-table\"\n              />\n            </CollapsableSection>\n          )}\n        </Stack>\n      )}\n      {!silences.length && <NoSilencesSplash alertManagerSourceName={alertManagerSourceName} />}\n    </div>\n  );\n};\n\nfunction SilenceList({\n  items,\n  alertManagerSourceName,\n  dataTestId,\n}: {\n  items: SilenceTableItemProps[];\n  alertManagerSourceName: string;\n  dataTestId: string;\n}) {\n  const columns = useColumns(alertManagerSourceName);\n  if (!!items.length) {\n    return (\n      <DynamicTable\n        pagination={{ itemsPerPage: 25 }}\n        items={items}\n        cols={columns}\n        isExpandable\n        dataTestId={dataTestId}\n        renderExpandedContent={({ data }) => <SilenceDetails silence={data} />}\n      />\n    );\n  } else {\n    return <>No matching silences found</>;\n  }\n}\n\nconst useFilteredSilences = (silences: Silence[], expired = false) => {\n  const [queryParams] = useQueryParams();\n  return useMemo(() => {\n    const { queryString } = getSilenceFiltersFromUrlParams(queryParams);\n    const silenceIdsString = queryParams?.silenceIds;\n    return silences.filter((silence) => {\n      if (typeof silenceIdsString === 'string') {\n        const idsIncluded = silenceIdsString.split(',').includes(silence.id);\n        if (!idsIncluded) {\n          return false;\n        }\n      }\n      if (queryString) {\n        const matchers = parseMatchers(queryString);\n        const matchersMatch = matchers.every(\n          (matcher) =>\n            silence.matchers?.some(\n              ({ name, value, isEqual, isRegex }) =>\n                matcher.name === name &&\n                matcher.value === value &&\n                matcher.isEqual === isEqual &&\n                matcher.isRegex === isRegex\n            )\n        );\n        if (!matchersMatch) {\n          return false;\n        }\n      }\n      if (expired) {\n        return silence.status.state === SilenceState.Expired;\n      } else {\n        return silence.status.state !== SilenceState.Expired;\n      }\n    });\n  }, [queryParams, silences, expired]);\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  topButtonContainer: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-end;\n  `,\n  addNewSilence: css`\n    margin: ${theme.spacing(2, 0)};\n  `,\n  callout: css`\n    background-color: ${theme.colors.background.secondary};\n    border-top: 3px solid ${theme.colors.info.border};\n    border-radius: ${theme.shape.radius.default};\n    height: 62px;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n\n    & > * {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  calloutIcon: css`\n    color: ${theme.colors.info.text};\n  `,\n  editButton: css`\n    margin-left: ${theme.spacing(0.5)};\n  `,\n});\n\nfunction useColumns(alertManagerSourceName: string) {\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n  const [updateSupported, updateAllowed] = useAlertmanagerAbility(AlertmanagerAction.UpdateSilence);\n\n  return useMemo((): SilenceTableColumnProps[] => {\n    const handleExpireSilenceClick = (id: string) => {\n      dispatch(expireSilenceAction(alertManagerSourceName, id));\n    };\n    const columns: SilenceTableColumnProps[] = [\n      {\n        id: 'state',\n        label: 'State',\n        renderCell: function renderStateTag({ data: { status } }) {\n          return <SilenceStateTag state={status.state} />;\n        },\n        size: 4,\n      },\n      {\n        id: 'matchers',\n        label: 'Matching labels',\n        renderCell: function renderMatchers({ data: { matchers } }) {\n          return <Matchers matchers={matchers || []} />;\n        },\n        size: 10,\n      },\n      {\n        id: 'alerts',\n        label: 'Alerts',\n        renderCell: function renderSilencedAlerts({ data: { silencedAlerts } }) {\n          return <span data-testid=\"alerts\">{silencedAlerts.length}</span>;\n        },\n        size: 4,\n      },\n      {\n        id: 'schedule',\n        label: 'Schedule',\n        renderCell: function renderSchedule({ data: { startsAt, endsAt } }) {\n          const startsAtDate = dateMath.parse(startsAt);\n          const endsAtDate = dateMath.parse(endsAt);\n          const dateDisplayFormat = 'YYYY-MM-DD HH:mm';\n          return (\n            <>\n              {' '}\n              {startsAtDate?.format(dateDisplayFormat)} {'-'}\n              {endsAtDate?.format(dateDisplayFormat)}\n            </>\n          );\n        },\n        size: 7,\n      },\n    ];\n    if (updateSupported && updateAllowed) {\n      columns.push({\n        id: 'actions',\n        label: 'Actions',\n        renderCell: function renderActions({ data: silence }) {\n          return (\n            <Stack gap={0.5}>\n              {silence.status.state === 'expired' ? (\n                <Link href={makeAMLink(`/alerting/silence/${silence.id}/edit`, alertManagerSourceName)}>\n                  <ActionButton icon=\"sync\">Recreate</ActionButton>\n                </Link>\n              ) : (\n                <ActionButton icon=\"bell\" onClick={() => handleExpireSilenceClick(silence.id)}>\n                  Unsilence\n                </ActionButton>\n              )}\n              {silence.status.state !== 'expired' && (\n                <ActionIcon\n                  className={styles.editButton}\n                  to={makeAMLink(`/alerting/silence/${silence.id}/edit`, alertManagerSourceName)}\n                  icon=\"pen\"\n                  tooltip=\"edit\"\n                />\n              )}\n            </Stack>\n          );\n        },\n        size: 5,\n      });\n    }\n    return columns;\n  }, [alertManagerSourceName, dispatch, styles.editButton, updateAllowed, updateSupported]);\n}\nexport default SilencesTable;\n","import { useEffect, useState } from 'react';\nimport { useRouteMatch } from 'react-router-dom';\n\nimport { NavModelItem } from '@grafana/data';\n\nconst defaultPageNav: Partial<NavModelItem> = {\n  icon: 'bell-slash',\n};\n\nexport function useSilenceNavData() {\n  const { isExact, path } = useRouteMatch();\n  const [pageNav, setPageNav] = useState<Pick<NavModelItem, 'id' | 'text' | 'icon'> | undefined>();\n\n  useEffect(() => {\n    if (path === '/alerting/silence/new') {\n      setPageNav({\n        ...defaultPageNav,\n        id: 'silence-new',\n        text: 'Add silence',\n      });\n    } else if (path === '/alerting/silence/:id/edit') {\n      setPageNav({\n        ...defaultPageNav,\n        id: 'silence-edit',\n        text: 'Edit silence',\n      });\n    }\n  }, [path, isExact]);\n\n  return pageNav;\n}\n","import React, { useCallback, useEffect } from 'react';\nimport { Route, RouteChildrenProps, Switch } from 'react-router-dom';\n\nimport { Alert, withErrorBoundary } from '@grafana/ui';\nimport { Silence } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { featureDiscoveryApi } from './api/featureDiscoveryApi';\nimport { AlertmanagerPageWrapper } from './components/AlertingPageWrapper';\nimport { GrafanaAlertmanagerDeliveryWarning } from './components/GrafanaAlertmanagerDeliveryWarning';\nimport SilencesEditor from './components/silences/SilencesEditor';\nimport SilencesTable from './components/silences/SilencesTable';\nimport { useSilenceNavData } from './hooks/useSilenceNavData';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { useAlertmanager } from './state/AlertmanagerContext';\nimport { fetchAmAlertsAction, fetchSilencesAction } from './state/actions';\nimport { SILENCES_POLL_INTERVAL_MS } from './utils/constants';\nimport { AsyncRequestState, initialAsyncRequestState } from './utils/redux';\n\nconst Silences = () => {\n  const { selectedAlertmanager } = useAlertmanager();\n\n  const dispatch = useDispatch();\n  const silences = useUnifiedAlertingSelector((state) => state.silences);\n  const alertsRequests = useUnifiedAlertingSelector((state) => state.amAlerts);\n  const alertsRequest = selectedAlertmanager\n    ? alertsRequests[selectedAlertmanager] || initialAsyncRequestState\n    : undefined;\n\n  const { currentData: amFeatures } = featureDiscoveryApi.useDiscoverAmFeaturesQuery(\n    { amSourceName: selectedAlertmanager ?? '' },\n    { skip: !selectedAlertmanager }\n  );\n\n  useEffect(() => {\n    function fetchAll() {\n      if (selectedAlertmanager) {\n        dispatch(fetchSilencesAction(selectedAlertmanager));\n        dispatch(fetchAmAlertsAction(selectedAlertmanager));\n      }\n    }\n    fetchAll();\n    const interval = setInterval(() => fetchAll, SILENCES_POLL_INTERVAL_MS);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [selectedAlertmanager, dispatch]);\n\n  const { result, loading, error }: AsyncRequestState<Silence[]> =\n    (selectedAlertmanager && silences[selectedAlertmanager]) || initialAsyncRequestState;\n\n  const getSilenceById = useCallback((id: string) => result && result.find((silence) => silence.id === id), [result]);\n\n  const mimirLazyInitError =\n    error?.message?.includes('the Alertmanager is not configured') && amFeatures?.lazyConfigInit;\n\n  if (!selectedAlertmanager) {\n    return null;\n  }\n\n  return (\n    <>\n      <GrafanaAlertmanagerDeliveryWarning currentAlertmanager={selectedAlertmanager} />\n\n      {mimirLazyInitError && (\n        <Alert title=\"The selected Alertmanager has no configuration\" severity=\"warning\">\n          Create a new contact point to create a configuration using the default values or contact your administrator to\n          set up the Alertmanager.\n        </Alert>\n      )}\n      {error && !loading && !mimirLazyInitError && (\n        <Alert severity=\"error\" title=\"Error loading silences\">\n          {error.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {alertsRequest?.error && !alertsRequest?.loading && !mimirLazyInitError && (\n        <Alert severity=\"error\" title=\"Error loading Alertmanager alerts\">\n          {alertsRequest.error?.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {result && !error && (\n        <Switch>\n          <Route exact path=\"/alerting/silences\">\n            <SilencesTable\n              silences={result}\n              alertManagerAlerts={alertsRequest?.result ?? []}\n              alertManagerSourceName={selectedAlertmanager}\n            />\n          </Route>\n          <Route exact path=\"/alerting/silence/new\">\n            <SilencesEditor alertManagerSourceName={selectedAlertmanager} />\n          </Route>\n          <Route exact path=\"/alerting/silence/:id/edit\">\n            {({ match }: RouteChildrenProps<{ id: string }>) => {\n              return (\n                match?.params.id && (\n                  <SilencesEditor\n                    silence={getSilenceById(match.params.id)}\n                    alertManagerSourceName={selectedAlertmanager}\n                  />\n                )\n              );\n            }}\n          </Route>\n        </Switch>\n      )}\n    </>\n  );\n};\n\nfunction SilencesPage() {\n  const pageNav = useSilenceNavData();\n\n  return (\n    <AlertmanagerPageWrapper pageId=\"silences\" pageNav={pageNav} accessType=\"instance\">\n      <Silences />\n    </AlertmanagerPageWrapper>\n  );\n}\n\nexport default withErrorBoundary(SilencesPage, { style: 'page' });\n","import { chain, filter } from 'lodash';\nimport React, { PropsWithChildren } from 'react';\n\nimport {\n  Abilities,\n  Action,\n  AlertmanagerAction,\n  AlertSourceAction,\n  useAlertSourceAbilities,\n  useAllAlertmanagerAbilities,\n} from '../hooks/useAbilities';\n\ninterface AuthorizeProps extends PropsWithChildren {\n  actions: AlertmanagerAction[] | AlertSourceAction[];\n}\n\nexport const Authorize = ({ actions, children }: AuthorizeProps) => {\n  const alertmanagerActions = filter(actions, isAlertmanagerAction) as AlertmanagerAction[];\n  const alertSourceActions = filter(actions, isAlertSourceAction) as AlertSourceAction[];\n\n  if (alertmanagerActions.length) {\n    return <AuthorizeAlertmanager actions={alertmanagerActions}>{children}</AuthorizeAlertmanager>;\n  }\n\n  if (alertSourceActions.length) {\n    return <AuthorizeAlertsource actions={alertSourceActions}>{children}</AuthorizeAlertsource>;\n  }\n\n  return null;\n};\n\ninterface ActionsProps<T extends Action> extends PropsWithChildren {\n  actions: T[];\n}\n\nconst AuthorizeAlertmanager = ({ actions, children }: ActionsProps<AlertmanagerAction>) => {\n  const alertmanagerAbilties = useAllAlertmanagerAbilities();\n  const allowed = actionsAllowed(alertmanagerAbilties, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\nconst AuthorizeAlertsource = ({ actions, children }: ActionsProps<AlertSourceAction>) => {\n  const alertSourceAbilities = useAlertSourceAbilities();\n  const allowed = actionsAllowed(alertSourceAbilities, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\n// check if some action is allowed from the abilities\nfunction actionsAllowed<T extends Action>(abilities: Abilities<T>, actions: T[]) {\n  return chain(abilities)\n    .pick(actions)\n    .values()\n    .value()\n    .some(([_supported, allowed]) => allowed === true);\n}\n\nfunction isAlertmanagerAction(action: AlertmanagerAction) {\n  return Object.values(AlertmanagerAction).includes(action);\n}\n\nfunction isAlertSourceAction(action: AlertSourceAction) {\n  return Object.values(AlertSourceAction).includes(action);\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport { Alert, useStyles2 } from '@grafana/ui/src';\n\nimport { AlertmanagerChoice } from '../../../../plugins/datasource/alertmanager/types';\nimport { alertmanagerApi } from '../api/alertmanagerApi';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\ninterface GrafanaAlertmanagerDeliveryWarningProps {\n  currentAlertmanager: string;\n}\n\nexport function GrafanaAlertmanagerDeliveryWarning({ currentAlertmanager }: GrafanaAlertmanagerDeliveryWarningProps) {\n  const styles = useStyles2(getStyles);\n\n  const { useGetAlertmanagerChoiceStatusQuery } = alertmanagerApi;\n  const { currentData: amChoiceStatus } = useGetAlertmanagerChoiceStatusQuery();\n\n  const viewingInternalAM = currentAlertmanager === GRAFANA_RULES_SOURCE_NAME;\n\n  const interactsWithExternalAMs =\n    amChoiceStatus?.alertmanagersChoice &&\n    [AlertmanagerChoice.External, AlertmanagerChoice.All].includes(amChoiceStatus?.alertmanagersChoice);\n\n  if (!interactsWithExternalAMs || !viewingInternalAM) {\n    return null;\n  }\n\n  const hasActiveExternalAMs = amChoiceStatus.numExternalAlertmanagers > 0;\n\n  if (amChoiceStatus.alertmanagersChoice === AlertmanagerChoice.External) {\n    return (\n      <Alert title=\"Grafana alerts are not delivered to Grafana Alertmanager\">\n        Grafana is configured to send alerts to external Alertmanagers only. Changing Grafana Alertmanager configuration\n        will not affect delivery of your alerts.\n        <div className={styles.adminHint}>\n          To change your Alertmanager setup, go to the Alerting Admin page. If you do not have access, contact your\n          Administrator.\n        </div>\n      </Alert>\n    );\n  }\n\n  if (amChoiceStatus.alertmanagersChoice === AlertmanagerChoice.All && hasActiveExternalAMs) {\n    return (\n      <Alert title=\"You have additional Alertmanagers to configure\" severity=\"warning\">\n        Ensure you make configuration changes in the correct Alertmanagers; both internal and external. Changing one\n        will not affect the others.\n        <div className={styles.adminHint}>\n          To change your Alertmanager setup, go to the Alerting Admin page. If you do not have access, contact your\n          Administrator.\n        </div>\n      </Alert>\n    );\n  }\n\n  return null;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  adminHint: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n    font-weight: ${theme.typography.bodySmall.fontWeight};\n  `,\n});\n","import React from 'react';\n\nimport { IconName, Tooltip, LinkButton, Button } from '@grafana/ui';\nimport { PopoverContent, TooltipPlacement } from '@grafana/ui/src/components/Tooltip';\n\ninterface Props {\n  tooltip: PopoverContent;\n  icon: IconName;\n  className?: string;\n  tooltipPlacement?: TooltipPlacement;\n  to?: string;\n  target?: string;\n  onClick?: () => void;\n  'data-testid'?: string;\n}\n\nexport const ActionIcon = ({\n  tooltip,\n  icon,\n  to,\n  target,\n  onClick,\n  className,\n  tooltipPlacement = 'top',\n  ...rest\n}: Props) => {\n  const ariaLabel = typeof tooltip === 'string' ? tooltip : undefined;\n\n  return (\n    <Tooltip content={tooltip} placement={tooltipPlacement}>\n      {to ? (\n        <LinkButton\n          variant=\"secondary\"\n          fill=\"text\"\n          icon={icon}\n          href={to}\n          size=\"sm\"\n          target={target}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      ) : (\n        <Button\n          className={className}\n          variant=\"secondary\"\n          fill=\"text\"\n          size=\"sm\"\n          icon={icon}\n          type=\"button\"\n          onClick={onClick}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      )}\n    </Tooltip>\n  );\n};\n","import React from 'react';\n\nimport { AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { State, StateTag } from '../StateTag';\n\nconst alertStateToState: Record<AlertState, State> = {\n  [AlertState.Active]: 'bad',\n  [AlertState.Unprocessed]: 'neutral',\n  [AlertState.Suppressed]: 'info',\n};\n\ninterface Props {\n  state: AlertState;\n}\n\nexport const AmAlertStateTag = ({ state }: Props) => <StateTag state={alertStateToState[state]}>{state}</StateTag>;\n","import { useMemo } from 'react';\n\nimport { contextSrv as ctx } from 'app/core/services/context_srv';\nimport { AccessControlAction } from 'app/types';\n\nimport { useAlertmanager } from '../state/AlertmanagerContext';\nimport { getInstancesPermissions, getNotificationsPermissions } from '../utils/access-control';\n\n/**\n * These hooks will determine if\n *  1. the action is supported in the current alertmanager or data source context\n *  2. user is allowed to perform actions based on their set of permissions / assigned role\n */\nexport enum AlertmanagerAction {\n  // configuration\n  ViewExternalConfiguration = 'view-external-configuration',\n  UpdateExternalConfiguration = 'update-external-configuration',\n\n  // contact points\n  CreateContactPoint = 'create-contact-point',\n  ViewContactPoint = 'view-contact-point',\n  UpdateContactPoint = 'edit-contact-points',\n  DeleteContactPoint = 'delete-contact-point',\n  ExportContactPoint = 'export-contact-point',\n\n  // notification templates\n  CreateNotificationTemplate = 'create-notification-template',\n  ViewNotificationTemplate = 'view-notification-template',\n  UpdateNotificationTemplate = 'edit-notification-template',\n  DeleteNotificationTemplate = 'delete-notification-template',\n  DecryptSecrets = 'decrypt-secrets',\n\n  // notification policies\n  CreateNotificationPolicy = 'create-notification-policy',\n  ViewNotificationPolicyTree = 'view-notification-policy-tree',\n  UpdateNotificationPolicyTree = 'update-notification-policy-tree',\n  DeleteNotificationPolicy = 'delete-notification-policy',\n  ExportNotificationPolicies = 'export-notification-policies',\n\n  // silences – these cannot be deleted only \"expired\" (updated)\n  CreateSilence = 'create-silence',\n  ViewSilence = 'view-silence',\n  UpdateSilence = 'update-silence',\n\n  // mute timings\n  ViewMuteTiming = 'view-mute-timing',\n  CreateMuteTiming = 'create-mute-timing',\n  UpdateMuteTiming = 'update-mute-timing',\n  DeleteMuteTiming = 'delete-mute-timing',\n}\n\nexport enum AlertSourceAction {\n  // internal (Grafana managed)\n  CreateAlertRule = 'create-alert-rule',\n  ViewAlertRule = 'view-alert-rule',\n  UpdateAlertRule = 'update-alert-rule',\n  DeleteAlertRule = 'delete-alert-rule',\n  // external (any compatible alerting data source)\n  CreateExternalAlertRule = 'create-external-alert-rule',\n  ViewExternalAlertRule = 'view-external-alert-rule',\n  UpdateExternalAlertRule = 'update-external-alert-rule',\n  DeleteExternalAlertRule = 'delete-external-alert-rule',\n}\n\nconst AlwaysSupported = true; // this just makes it easier to understand the code\nexport type Action = AlertmanagerAction | AlertSourceAction;\n\nexport type Ability = [actionSupported: boolean, actionAllowed: boolean];\nexport type Abilities<T extends Action> = Record<T, Ability>;\n\nexport function useAlertSourceAbilities(): Abilities<AlertSourceAction> {\n  // TODO add the \"supported\" booleans here, we currently only do authorization\n\n  const abilities: Abilities<AlertSourceAction> = {\n    // -- Grafana managed alert rules --\n    [AlertSourceAction.CreateAlertRule]: [AlwaysSupported, ctx.hasPermission(AccessControlAction.AlertingRuleCreate)],\n    [AlertSourceAction.ViewAlertRule]: [AlwaysSupported, ctx.hasPermission(AccessControlAction.AlertingRuleRead)],\n    [AlertSourceAction.UpdateAlertRule]: [AlwaysSupported, ctx.hasPermission(AccessControlAction.AlertingRuleUpdate)],\n    [AlertSourceAction.DeleteAlertRule]: [AlwaysSupported, ctx.hasPermission(AccessControlAction.AlertingRuleDelete)],\n    // -- External alert rules (Mimir / Loki / etc) --\n    // for these we only have \"read\" and \"write\" permissions\n    [AlertSourceAction.CreateExternalAlertRule]: [\n      AlwaysSupported,\n      ctx.hasPermission(AccessControlAction.AlertingRuleExternalWrite),\n    ],\n    [AlertSourceAction.ViewExternalAlertRule]: [\n      AlwaysSupported,\n      ctx.hasPermission(AccessControlAction.AlertingRuleExternalRead),\n    ],\n    [AlertSourceAction.UpdateExternalAlertRule]: [\n      AlwaysSupported,\n      ctx.hasPermission(AccessControlAction.AlertingRuleExternalWrite),\n    ],\n    [AlertSourceAction.DeleteExternalAlertRule]: [\n      AlwaysSupported,\n      ctx.hasPermission(AccessControlAction.AlertingRuleExternalWrite),\n    ],\n  };\n\n  return abilities;\n}\n\nexport function useAllAlertmanagerAbilities(): Abilities<AlertmanagerAction> {\n  const {\n    selectedAlertmanager,\n    hasConfigurationAPI,\n    isGrafanaAlertmanager: isGrafanaFlavoredAlertmanager,\n  } = useAlertmanager();\n\n  // These are used for interacting with Alertmanager resources where we apply alert.notifications:<name> permissions.\n  // There are different permissions based on wether the built-in alertmanager is selected (grafana) or an external one.\n  const notificationsPermissions = getNotificationsPermissions(selectedAlertmanager!);\n  const instancePermissions = getInstancesPermissions(selectedAlertmanager!);\n\n  // list out all of the abilities, and if the user has permissions to perform them\n  const abilities: Abilities<AlertmanagerAction> = {\n    // -- configuration --\n    [AlertmanagerAction.ViewExternalConfiguration]: [\n      AlwaysSupported,\n      ctx.hasPermission(AccessControlAction.AlertingNotificationsExternalRead),\n    ],\n    [AlertmanagerAction.UpdateExternalConfiguration]: [\n      hasConfigurationAPI,\n      ctx.hasPermission(AccessControlAction.AlertingNotificationsExternalWrite),\n    ],\n    // -- contact points --\n    [AlertmanagerAction.CreateContactPoint]: [hasConfigurationAPI, ctx.hasPermission(notificationsPermissions.create)],\n    [AlertmanagerAction.ViewContactPoint]: [AlwaysSupported, ctx.hasPermission(notificationsPermissions.read)],\n    [AlertmanagerAction.UpdateContactPoint]: [hasConfigurationAPI, ctx.hasPermission(notificationsPermissions.update)],\n    [AlertmanagerAction.DeleteContactPoint]: [hasConfigurationAPI, ctx.hasPermission(notificationsPermissions.delete)],\n    // only Grafana flavored alertmanager supports exporting\n    [AlertmanagerAction.ExportContactPoint]: [\n      isGrafanaFlavoredAlertmanager,\n      ctx.hasPermission(notificationsPermissions.read),\n    ],\n    // -- notification templates --\n    [AlertmanagerAction.CreateNotificationTemplate]: [\n      hasConfigurationAPI,\n      ctx.hasPermission(notificationsPermissions.create),\n    ],\n    [AlertmanagerAction.ViewNotificationTemplate]: [AlwaysSupported, ctx.hasPermission(notificationsPermissions.read)],\n    [AlertmanagerAction.UpdateNotificationTemplate]: [\n      hasConfigurationAPI,\n      ctx.hasPermission(notificationsPermissions.update),\n    ],\n    [AlertmanagerAction.DeleteNotificationTemplate]: [\n      hasConfigurationAPI,\n      ctx.hasPermission(notificationsPermissions.delete),\n    ],\n    // -- notification policies --\n    [AlertmanagerAction.CreateNotificationPolicy]: [\n      hasConfigurationAPI,\n      ctx.hasPermission(notificationsPermissions.create),\n    ],\n    [AlertmanagerAction.ViewNotificationPolicyTree]: [\n      AlwaysSupported,\n      ctx.hasPermission(notificationsPermissions.read),\n    ],\n    [AlertmanagerAction.UpdateNotificationPolicyTree]: [\n      hasConfigurationAPI,\n      ctx.hasPermission(notificationsPermissions.update),\n    ],\n    [AlertmanagerAction.DeleteNotificationPolicy]: [\n      hasConfigurationAPI,\n      ctx.hasPermission(notificationsPermissions.delete),\n    ],\n    [AlertmanagerAction.ExportNotificationPolicies]: [\n      isGrafanaFlavoredAlertmanager,\n      ctx.hasPermission(notificationsPermissions.read),\n    ],\n    [AlertmanagerAction.DecryptSecrets]: [\n      isGrafanaFlavoredAlertmanager,\n      ctx.hasPermission(notificationsPermissions.provisioning.readSecrets),\n    ],\n    // -- silences --\n    [AlertmanagerAction.CreateSilence]: [hasConfigurationAPI, ctx.hasPermission(instancePermissions.create)],\n    [AlertmanagerAction.ViewSilence]: [AlwaysSupported, ctx.hasPermission(instancePermissions.read)],\n    [AlertmanagerAction.UpdateSilence]: [hasConfigurationAPI, ctx.hasPermission(instancePermissions.update)],\n    // -- mute timtings --\n    [AlertmanagerAction.CreateMuteTiming]: [hasConfigurationAPI, ctx.hasPermission(notificationsPermissions.create)],\n    [AlertmanagerAction.ViewMuteTiming]: [AlwaysSupported, ctx.hasPermission(notificationsPermissions.read)],\n    [AlertmanagerAction.UpdateMuteTiming]: [hasConfigurationAPI, ctx.hasPermission(notificationsPermissions.update)],\n    [AlertmanagerAction.DeleteMuteTiming]: [hasConfigurationAPI, ctx.hasPermission(notificationsPermissions.delete)],\n  };\n\n  return abilities;\n}\n\nexport function useAlertmanagerAbility(action: AlertmanagerAction): Ability {\n  const abilities = useAllAlertmanagerAbilities();\n\n  return useMemo(() => {\n    return abilities[action];\n  }, [abilities, action]);\n}\n\nexport function useAlertmanagerAbilities(actions: AlertmanagerAction[]): Ability[] {\n  const abilities = useAllAlertmanagerAbilities();\n\n  return useMemo(() => {\n    return actions.map((action) => abilities[action]);\n  }, [abilities, actions]);\n}\n\nexport function useAlertSourceAbility(action: AlertSourceAction): Ability {\n  const abilities = useAlertSourceAbilities();\n  return useMemo(() => abilities[action], [abilities, action]);\n}\n","import { useCallback, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { locationService } from '@grafana/runtime';\n\nexport function useURLSearchParams(): [\n  URLSearchParams,\n  (searchValues: Record<string, string | string[] | undefined>, replace?: boolean) => void,\n] {\n  const { search } = useLocation();\n  const queryParams = useMemo(() => new URLSearchParams(search), [search]);\n\n  const update = useCallback((searchValues: Record<string, string | string[] | undefined>, replace?: boolean) => {\n    locationService.partial(searchValues, replace);\n  }, []);\n\n  return [queryParams, update];\n}\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getAlertTableStyles = (theme: GrafanaTheme2) => ({\n  table: css`\n    width: 100%;\n    border-radius: ${theme.shape.radius.default};\n    border: solid 1px ${theme.colors.border.weak};\n    background-color: ${theme.colors.background.secondary};\n\n    th {\n      padding: ${theme.spacing(1)};\n    }\n\n    td {\n      padding: 0 ${theme.spacing(1)};\n    }\n\n    tr {\n      height: 38px;\n    }\n  `,\n  evenRow: css`\n    background-color: ${theme.colors.background.primary};\n  `,\n  colExpand: css`\n    width: 36px;\n  `,\n  nameCell: css`\n    gap: ${theme.spacing(1)};\n  `,\n  actionsCell: css`\n    text-align: right;\n    width: 1%;\n    white-space: nowrap;\n\n    & > * + * {\n      margin-left: ${theme.spacing(0.5)};\n    }\n  `,\n});\n"],"names":["useCleanup","cleanupAction","dispatch","selectorRef","MatchersField","className","styles","getStyles","formApi","control","register","errors","matchers","append","remove","Field","matcher","index","Input","InputControl","onChange","ref","field","Select","value","IconButton","Button","newMatcher","theme","SilencePeriod","getValues","onChangeStartsAt","startsAt","startsAtInvalid","onChangeEndsAt","endsAt","endsAtInvalid","onChangeTimeZone","timeZone","invalid","from","to","TimeRangeInput","newValue","SilencedInstancesPreview","amSourceName","useGetAlertmanagerAlertsQuery","alertmanagerApi","columns","useColumns","hasValidMatchers","alerts","isFetching","isError","tableItemAlerts","alert","Badge","Alert","LoadingPlaceholder","DynamicTable","data","AmAlertStateTag","AlertLabels","defaultsFromQuery","searchParams","defaults","comment","formMatchers","getDefaultFormValues","silence","now","interval","config","SilencesEditor","alertManagerSourceName","urlSearchParams","useURLSearchParams","defaultValues","formAPI","matchersForPreview","setMatchersForPreview","loading","useUnifiedAlertingSelector","state","handleSubmit","formState","watch","setValue","clearErrors","onSubmit","id","createdBy","matchersFields","payload","duration","matcherFields","prevDuration","setPrevDuration","useDebounce","startValue","nextDuration","newMatchers","m","userLogged","FieldSet","TextArea","ActionButton","restProps","getStyle","Matchers","TagList","NoSilencesSplash","permissions","EmptyListCTA","CallToActionCard","SilencedAlertsTableRow","isCollapsed","setIsCollapsed","alertName","name","labelKey","labelValue","CollapseToggle","collapsed","SilencedAlertsTable","silencedAlerts","tableStyles","SilenceDetails","dateDisplayFormat","startsAtDate","endsAtDate","silenceStateToState","SilenceStateTag","StateTag","getQueryStringKey","SilencesFilter","queryStringKey","setQueryStringKey","queryParams","setQueryParams","useQueryParams","queryString","handleQueryStringChange","e","target","clearFilters","inputInvalid","Label","Stack","Tooltip","Icon","SilencesTable","silences","alertManagerAlerts","filteredSilencesNotExpired","useFilteredSilences","filteredSilencesExpired","silenceStateInParams","showExpiredFromUrl","itemsNotExpired","findSilencedAlerts","itemsExpired","Authorize","SilenceList","CollapsableSection","items","dataTestId","expired","silenceIdsString","isEqual","isRegex","updateSupported","updateAllowed","handleExpireSilenceClick","status","Link","ActionIcon","defaultPageNav","useSilenceNavData","isExact","path","pageNav","setPageNav","Silences","selectedAlertmanager","alertsRequests","alertsRequest","amFeatures","featureDiscoveryApi","fetchAll","result","error","getSilenceById","mimirLazyInitError","GrafanaAlertmanagerDeliveryWarning","match","SilencesPage","actions","children","alertmanagerActions","isAlertmanagerAction","alertSourceActions","isAlertSourceAction","AuthorizeAlertmanager","AuthorizeAlertsource","alertmanagerAbilties","actionsAllowed","alertSourceAbilities","abilities","_supported","allowed","action","currentAlertmanager","useGetAlertmanagerChoiceStatusQuery","amChoiceStatus","viewingInternalAM","hasActiveExternalAMs","tooltip","icon","onClick","tooltipPlacement","rest","ariaLabel","alertStateToState","AlertmanagerAction","AlertSourceAction","AlwaysSupported","useAlertSourceAbilities","useAllAlertmanagerAbilities","hasConfigurationAPI","isGrafanaFlavoredAlertmanager","notificationsPermissions","instancePermissions","useAlertmanagerAbility","useAlertmanagerAbilities","useAlertSourceAbility","search","update","searchValues","replace","getAlertTableStyles"],"sourceRoot":""}