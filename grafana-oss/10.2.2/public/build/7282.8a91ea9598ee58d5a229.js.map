{"version":3,"file":"7282.8a91ea9598ee58d5a229.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/components/ConditionalWrap.tsx","webpack://grafana/./public/app/features/alerting/unified/api/onCallApi.ts","webpack://grafana/./public/app/features/alerting/unified/components/MetaText.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Provisioning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Strong.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/MessageTemplates.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/Modals.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/ContactPoints.v2.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/editor/alertManagerSuggestions.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/editor/autocomplete.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/editor/definition.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/editor/register.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/TemplateEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/editor/snippets.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/editor/templateDataSuggestions.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/grafanaAppReceivers/onCall/onCall.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/grafanaAppReceivers/types.ts","webpack://grafana/./public/app/features/alerting/unified/components/rules/ActionIcon.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertmanagerConfig.ts","webpack://grafana/./public/app/features/alerting/unified/types/contact-points.ts","webpack://grafana/./public/app/features/plugins/admin/permissions.ts"],"sourcesContent":["import React, { forwardRef, Ref } from 'react';\n\ninterface ConditionalWrapProps {\n  shouldWrap: boolean;\n  children: JSX.Element;\n  wrap: (children: JSX.Element) => JSX.Element;\n}\n\nfunction ConditionalWrap({ children, shouldWrap, wrap }: ConditionalWrapProps, _ref: Ref<HTMLElement>) {\n  return shouldWrap ? React.cloneElement(wrap(children)) : children;\n}\n\nexport default forwardRef(ConditionalWrap);\n","import { FetchError, isFetchError } from '@grafana/runtime';\n\nimport { GRAFANA_ONCALL_INTEGRATION_TYPE } from '../components/receivers/grafanaAppReceivers/onCall/onCall';\nimport { SupportedPlugin } from '../types/pluginBridges';\n\nimport { alertingApi } from './alertingApi';\n\nexport interface NewOnCallIntegrationDTO {\n  id: string;\n  connected_escalations_chains_count: number;\n  integration: string;\n  integration_url: string;\n  verbal_name: string;\n}\n\nexport interface OnCallPaginatedResult<T> {\n  results: T[];\n}\n\nexport const ONCALL_INTEGRATION_V2_FEATURE = 'grafana_alerting_v2';\ntype OnCallFeature = typeof ONCALL_INTEGRATION_V2_FEATURE | string;\n\ntype AlertReceiveChannelsResult = OnCallPaginatedResult<OnCallIntegrationDTO> | OnCallIntegrationDTO[];\n\nexport interface OnCallIntegrationDTO {\n  value: string;\n  display_name: string;\n  integration_url: string;\n}\n\nexport interface CreateIntegrationDTO {\n  integration: typeof GRAFANA_ONCALL_INTEGRATION_TYPE; // The only one supported right now\n  verbal_name: string;\n}\n\nconst getProxyApiUrl = (path: string) => `/api/plugin-proxy/${SupportedPlugin.OnCall}${path}`;\n\nexport const onCallApi = alertingApi.injectEndpoints({\n  endpoints: (build) => ({\n    grafanaOnCallIntegrations: build.query<OnCallIntegrationDTO[], void>({\n      query: () => ({\n        url: getProxyApiUrl('/api/internal/v1/alert_receive_channels/'),\n        // legacy_grafana_alerting is necessary for OnCall.\n        // We do NOT need to differentiate between these two on our side\n        params: { filters: true, integration: [GRAFANA_ONCALL_INTEGRATION_TYPE, 'legacy_grafana_alerting'] },\n      }),\n      transformResponse: (response: AlertReceiveChannelsResult) => {\n        if (isPaginatedResponse(response)) {\n          return response.results;\n        }\n        return response;\n      },\n      providesTags: ['OnCallIntegrations'],\n    }),\n    validateIntegrationName: build.query<boolean, string>({\n      query: (name) => ({\n        url: getProxyApiUrl('/api/internal/v1/alert_receive_channels/validate_name/'),\n        params: { verbal_name: name },\n        showErrorAlert: false,\n      }),\n    }),\n    createIntegration: build.mutation<NewOnCallIntegrationDTO, CreateIntegrationDTO>({\n      query: (integration) => ({\n        url: getProxyApiUrl('/api/internal/v1/alert_receive_channels/'),\n        data: integration,\n        method: 'POST',\n        showErrorAlert: true,\n      }),\n      invalidatesTags: ['OnCallIntegrations'],\n    }),\n    features: build.query<OnCallFeature[], void>({\n      query: () => ({\n        url: getProxyApiUrl('/api/internal/v1/features/'),\n      }),\n    }),\n  }),\n});\n\nfunction isPaginatedResponse(\n  response: AlertReceiveChannelsResult\n): response is OnCallPaginatedResult<OnCallIntegrationDTO> {\n  return 'results' in response && Array.isArray(response.results);\n}\n\nexport const { useGrafanaOnCallIntegrationsQuery } = onCallApi;\n\nexport function isOnCallFetchError(error: unknown): error is FetchError<{ detail: string }> {\n  return isFetchError(error) && 'detail' in error.data;\n}\n","import { css, cx } from '@emotion/css';\nimport React, { ComponentProps, HTMLAttributes } from 'react';\n\nimport { Stack } from '@grafana/experimental';\nimport { Icon, IconName, useStyles2, Text } from '@grafana/ui';\n\ninterface Props extends HTMLAttributes<HTMLDivElement> {\n  icon?: IconName;\n  color?: ComponentProps<typeof Text>['color'];\n}\n\nconst MetaText = ({ children, icon, color = 'secondary', ...rest }: Props) => {\n  const styles = useStyles2(getStyles);\n  const interactive = typeof rest.onClick === 'function';\n\n  return (\n    <div\n      className={cx({\n        [styles.interactive]: interactive,\n      })}\n      // allow passing ARIA and data- attributes\n      {...rest}\n    >\n      <Text variant=\"bodySmall\" color={color}>\n        <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n          {icon && <Icon size=\"sm\" name={icon} />}\n          {children}\n        </Stack>\n      </Text>\n    </div>\n  );\n};\n\nconst getStyles = () => ({\n  interactive: css`\n    cursor: pointer;\n  `,\n});\n\nexport { MetaText };\n","import React from 'react';\n\nimport { Alert, Badge } from '@grafana/ui';\n\nexport enum ProvisionedResource {\n  ContactPoint = 'contact point',\n  Template = 'template',\n  MuteTiming = 'mute timing',\n  AlertRule = 'alert rule',\n  RootNotificationPolicy = 'root notification policy',\n}\n\ninterface ProvisioningAlertProps {\n  resource: ProvisionedResource;\n}\n\nexport const ProvisioningAlert = ({ resource }: ProvisioningAlertProps) => {\n  return (\n    <Alert title={`This ${resource} cannot be edited through the UI`} severity=\"info\">\n      This {resource} has been provisioned, that means it was created by config. Please contact your server admin to\n      update this {resource}.\n    </Alert>\n  );\n};\n\nexport const ProvisioningBadge = () => {\n  return <Badge text={'Provisioned'} color={'purple'} />;\n};\n","import React from 'react';\n\nimport { useTheme2 } from '@grafana/ui';\n\ninterface Props {}\n\nconst Strong = ({ children }: React.PropsWithChildren<Props>) => {\n  const theme = useTheme2();\n  return <strong style={{ color: theme.colors.text.primary }}>{children}</strong>;\n};\n\nexport { Strong };\n","import React from 'react';\n\nimport { Alert } from '@grafana/ui';\n\nimport { useAlertmanagerConfig } from '../../hooks/useAlertmanagerConfig';\nimport { useAlertmanager } from '../../state/AlertmanagerContext';\nimport { TemplatesTable } from '../receivers/TemplatesTable';\n\nexport const MessageTemplates = () => {\n  const { selectedAlertmanager } = useAlertmanager();\n  const { data, error } = useAlertmanagerConfig(selectedAlertmanager);\n\n  if (error) {\n    return <Alert title=\"Failed to fetch message templates\">{String(error)}</Alert>;\n  }\n\n  if (data) {\n    return <TemplatesTable config={data} alertManagerName={selectedAlertmanager!} />;\n  }\n\n  return null;\n};\n","import React, { useCallback, useMemo, useState } from 'react';\n\nimport { Button, Modal, ModalProps } from '@grafana/ui';\n\ntype ModalHook<T = undefined> = [JSX.Element, (item: T) => void, () => void];\n\n/**\n * This hook controls the delete modal for contact points, showing loading and error states when appropriate\n */\nexport const useDeleteContactPointModal = (\n  handleDelete: (name: string) => Promise<void>,\n  isLoading: boolean\n): ModalHook<string> => {\n  const [showModal, setShowModal] = useState(false);\n  const [contactPoint, setContactPoint] = useState<string>();\n  const [error, setError] = useState<unknown | undefined>();\n\n  const handleDismiss = useCallback(() => {\n    if (isLoading) {\n      return;\n    }\n\n    setContactPoint(undefined);\n    setShowModal(false);\n    setError(undefined);\n  }, [isLoading]);\n\n  const handleShow = useCallback((name: string) => {\n    setContactPoint(name);\n    setShowModal(true);\n    setError(undefined);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    if (contactPoint) {\n      handleDelete(contactPoint)\n        .then(() => setShowModal(false))\n        .catch(setError);\n    }\n  }, [handleDelete, contactPoint]);\n\n  const modalElement = useMemo(() => {\n    if (error) {\n      return <ErrorModal isOpen={showModal} onDismiss={handleDismiss} error={error} />;\n    }\n\n    return (\n      <Modal\n        isOpen={showModal}\n        onDismiss={handleDismiss}\n        closeOnBackdropClick={!isLoading}\n        closeOnEscape={!isLoading}\n        title=\"Delete contact point\"\n      >\n        <p>Deleting this contact point will permanently remove it.</p>\n        <p>Are you sure you want to delete this contact point?</p>\n\n        <Modal.ButtonRow>\n          <Button type=\"button\" variant=\"destructive\" onClick={handleSubmit} disabled={isLoading}>\n            {isLoading ? 'Deleting...' : 'Yes, delete contact point'}\n          </Button>\n          <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss} disabled={isLoading}>\n            Cancel\n          </Button>\n        </Modal.ButtonRow>\n      </Modal>\n    );\n  }, [error, handleDismiss, handleSubmit, isLoading, showModal]);\n\n  return [modalElement, handleShow, handleDismiss];\n};\n\ninterface ErrorModalProps extends Pick<ModalProps, 'isOpen' | 'onDismiss'> {\n  error: unknown;\n}\nconst ErrorModal = ({ isOpen, onDismiss, error }: ErrorModalProps) => (\n  <Modal\n    isOpen={isOpen}\n    onDismiss={onDismiss}\n    closeOnBackdropClick={true}\n    closeOnEscape={true}\n    title={'Something went wrong'}\n  >\n    <p>Failed to update your configuration:</p>\n    <p>\n      <code>{String(error)}</code>\n    </p>\n  </Modal>\n);\n","import { css } from '@emotion/css';\nimport { SerializedError } from '@reduxjs/toolkit';\nimport { groupBy, size, uniqueId, upperFirst } from 'lodash';\nimport pluralize from 'pluralize';\nimport React, { ReactNode, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { dateTime, GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport {\n  Alert,\n  Button,\n  Dropdown,\n  Icon,\n  LoadingPlaceholder,\n  Menu,\n  Tooltip,\n  useStyles2,\n  Text,\n  LinkButton,\n  TabsBar,\n  TabContent,\n  Tab,\n  Pagination,\n} from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport ConditionalWrap from 'app/features/alerting/components/ConditionalWrap';\nimport { isOrgAdmin } from 'app/features/plugins/admin/permissions';\nimport { receiverTypeNames } from 'app/plugins/datasource/alertmanager/consts';\nimport { GrafanaManagedReceiverConfig } from 'app/plugins/datasource/alertmanager/types';\nimport { GrafanaNotifierType, NotifierStatus } from 'app/types/alerting';\n\nimport { usePagination } from '../../hooks/usePagination';\nimport { useAlertmanager } from '../../state/AlertmanagerContext';\nimport { INTEGRATION_ICONS } from '../../types/contact-points';\nimport { getNotificationsPermissions } from '../../utils/access-control';\nimport { GRAFANA_RULES_SOURCE_NAME, isVanillaPrometheusAlertManagerDataSource } from '../../utils/datasource';\nimport { createUrl } from '../../utils/url';\nimport { MetaText } from '../MetaText';\nimport { ProvisioningBadge } from '../Provisioning';\nimport { Spacer } from '../Spacer';\nimport { Strong } from '../Strong';\nimport { GlobalConfigAlert } from '../receivers/ReceiversAndTemplatesView';\nimport { UnusedContactPointBadge } from '../receivers/ReceiversTable';\n\nimport { MessageTemplates } from './MessageTemplates';\nimport { useDeleteContactPointModal } from './Modals';\nimport { RECEIVER_STATUS_KEY, useContactPointsWithStatus, useDeleteContactPoint } from './useContactPoints';\nimport { ContactPointWithStatus, getReceiverDescription, isProvisioned, ReceiverConfigWithStatus } from './utils';\n\nenum ActiveTab {\n  ContactPoints,\n  MessageTemplates,\n}\n\nconst DEFAULT_PAGE_SIZE = 25;\n\nconst ContactPoints = () => {\n  const { selectedAlertmanager } = useAlertmanager();\n  // TODO hook up to query params\n  const [activeTab, setActiveTab] = useState<ActiveTab>(ActiveTab.ContactPoints);\n  let { isLoading, error, contactPoints } = useContactPointsWithStatus(selectedAlertmanager!);\n  const { deleteTrigger, updateAlertmanagerState } = useDeleteContactPoint(selectedAlertmanager!);\n\n  const [DeleteModal, showDeleteModal] = useDeleteContactPointModal(deleteTrigger, updateAlertmanagerState.isLoading);\n\n  const showingContactPoints = activeTab === ActiveTab.ContactPoints;\n  const showingMessageTemplates = activeTab === ActiveTab.MessageTemplates;\n\n  if (error) {\n    // TODO fix this type casting, when error comes from \"getContactPointsStatus\" it probably won't be a SerializedError\n    return <Alert title=\"Failed to fetch contact points\">{(error as SerializedError).message}</Alert>;\n  }\n\n  const isGrafanaManagedAlertmanager = selectedAlertmanager === GRAFANA_RULES_SOURCE_NAME;\n  const isVanillaAlertmanager = isVanillaPrometheusAlertManagerDataSource(selectedAlertmanager!);\n  const permissions = getNotificationsPermissions(selectedAlertmanager!);\n\n  const allowedToAddContactPoint = contextSrv.hasPermission(permissions.create);\n\n  return (\n    <>\n      <Stack direction=\"column\">\n        <TabsBar>\n          <Tab\n            label=\"Contact Points\"\n            active={showingContactPoints}\n            counter={contactPoints.length}\n            onChangeTab={() => setActiveTab(ActiveTab.ContactPoints)}\n          />\n          <Tab\n            label=\"Message Templates\"\n            active={showingMessageTemplates}\n            onChangeTab={() => setActiveTab(ActiveTab.MessageTemplates)}\n          />\n          <Spacer />\n          {showingContactPoints && (\n            <LinkButton\n              icon=\"plus\"\n              variant=\"primary\"\n              href=\"/alerting/notifications/receivers/new\"\n              // TODO clarify why the button has been disabled\n              disabled={!allowedToAddContactPoint || isVanillaAlertmanager}\n            >\n              Add contact point\n            </LinkButton>\n          )}\n          {showingMessageTemplates && (\n            <LinkButton icon=\"plus\" variant=\"primary\" href=\"/alerting/notifications/templates/new\">\n              Add message template\n            </LinkButton>\n          )}\n        </TabsBar>\n        <TabContent>\n          <Stack direction=\"column\">\n            <>\n              {isLoading && <LoadingPlaceholder text={'Loading...'} />}\n              {/* Contact Points tab */}\n              {showingContactPoints && (\n                <>\n                  {error ? (\n                    <Alert title=\"Failed to fetch contact points\">{String(error)}</Alert>\n                  ) : (\n                    <>\n                      {/* TODO we can add some additional info here with a ToggleTip */}\n                      <Text variant=\"body\" color=\"secondary\">\n                        Define where notifications are sent, a contact point can contain multiple integrations.\n                      </Text>\n                      <ContactPointsList\n                        contactPoints={contactPoints}\n                        pageSize={DEFAULT_PAGE_SIZE}\n                        onDelete={(name) => showDeleteModal(name)}\n                        disabled={updateAlertmanagerState.isLoading}\n                      />\n                      {/* Grafana manager Alertmanager does not support global config, Mimir and Cortex do */}\n                      {!isGrafanaManagedAlertmanager && <GlobalConfigAlert alertManagerName={selectedAlertmanager!} />}\n                    </>\n                  )}\n                </>\n              )}\n              {/* Message Templates tab */}\n              {showingMessageTemplates && (\n                <>\n                  <Text variant=\"body\" color=\"secondary\">\n                    Create message templates to customize your notifications.\n                  </Text>\n                  <MessageTemplates />\n                </>\n              )}\n            </>\n          </Stack>\n        </TabContent>\n      </Stack>\n      {DeleteModal}\n    </>\n  );\n};\n\ninterface ContactPointsListProps {\n  contactPoints: ContactPointWithStatus[];\n  disabled?: boolean;\n  onDelete: (name: string) => void;\n  pageSize?: number;\n}\n\nconst ContactPointsList = ({\n  contactPoints,\n  disabled = false,\n  pageSize = DEFAULT_PAGE_SIZE,\n  onDelete,\n}: ContactPointsListProps) => {\n  const { page, pageItems, numberOfPages, onPageChange } = usePagination(contactPoints, 1, pageSize);\n\n  return (\n    <>\n      {pageItems.map((contactPoint, index) => {\n        const provisioned = isProvisioned(contactPoint);\n        const policies = contactPoint.numberOfPolicies;\n\n        return (\n          <ContactPoint\n            key={`${contactPoint.name}-${index}`}\n            name={contactPoint.name}\n            disabled={disabled}\n            onDelete={onDelete}\n            receivers={contactPoint.grafana_managed_receiver_configs}\n            provisioned={provisioned}\n            policies={policies}\n          />\n        );\n      })}\n      <Pagination currentPage={page} numberOfPages={numberOfPages} onNavigate={onPageChange} hideWhenSinglePage />\n    </>\n  );\n};\n\ninterface ContactPointProps {\n  name: string;\n  disabled?: boolean;\n  provisioned?: boolean;\n  receivers: ReceiverConfigWithStatus[];\n  policies?: number;\n  onDelete: (name: string) => void;\n}\n\nexport const ContactPoint = ({\n  name,\n  disabled = false,\n  provisioned = false,\n  receivers,\n  policies = 0,\n  onDelete,\n}: ContactPointProps) => {\n  const styles = useStyles2(getStyles);\n\n  // TODO probably not the best way to figure out if we want to show either only the summary or full metadata for the receivers?\n  const showFullMetadata = receivers.some((receiver) => Boolean(receiver[RECEIVER_STATUS_KEY]));\n\n  return (\n    <div className={styles.contactPointWrapper} data-testid=\"contact-point\">\n      <Stack direction=\"column\" gap={0}>\n        <ContactPointHeader\n          name={name}\n          policies={policies}\n          provisioned={provisioned}\n          disabled={disabled}\n          onDelete={onDelete}\n        />\n        {showFullMetadata ? (\n          <div>\n            {receivers?.map((receiver) => {\n              const diagnostics = receiver[RECEIVER_STATUS_KEY];\n              const sendingResolved = !Boolean(receiver.disableResolveMessage);\n\n              return (\n                <ContactPointReceiver\n                  key={uniqueId()}\n                  type={receiver.type}\n                  description={getReceiverDescription(receiver)}\n                  diagnostics={diagnostics}\n                  sendingResolved={sendingResolved}\n                />\n              );\n            })}\n          </div>\n        ) : (\n          <div>\n            <ContactPointReceiverSummary receivers={receivers} />\n          </div>\n        )}\n      </Stack>\n    </div>\n  );\n};\n\ninterface ContactPointHeaderProps {\n  name: string;\n  disabled?: boolean;\n  provisioned?: boolean;\n  policies?: number;\n  onDelete: (name: string) => void;\n}\n\nconst ContactPointHeader = (props: ContactPointHeaderProps) => {\n  const { name, disabled = false, provisioned = false, policies = 0, onDelete } = props;\n  const styles = useStyles2(getStyles);\n  const { selectedAlertmanager } = useAlertmanager();\n  const permissions = getNotificationsPermissions(selectedAlertmanager ?? '');\n\n  const isReferencedByPolicies = policies > 0;\n  const isGranaManagedAlertmanager = selectedAlertmanager === GRAFANA_RULES_SOURCE_NAME;\n\n  // we make a distinction here becase for \"canExport\" we show the menu item, if not we hide it\n  const canExport = isGranaManagedAlertmanager;\n  const allowedToExport = contextSrv.hasPermission(permissions.provisioning.read);\n\n  return (\n    <div className={styles.headerWrapper}>\n      <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n        <Stack alignItems=\"center\" gap={1}>\n          <Text variant=\"body\" weight=\"medium\">\n            {name}\n          </Text>\n        </Stack>\n        {isReferencedByPolicies ? (\n          <MetaText>\n            <Link to={createUrl('/alerting/routes', { contactPoint: name })}>\n              is used by <Strong>{policies}</Strong> {pluralize('notification policy', policies)}\n            </Link>\n          </MetaText>\n        ) : (\n          <UnusedContactPointBadge />\n        )}\n        {provisioned && <ProvisioningBadge />}\n        <Spacer />\n        <LinkButton\n          tooltipPlacement=\"top\"\n          tooltip={provisioned ? 'Provisioned contact points cannot be edited in the UI' : undefined}\n          variant=\"secondary\"\n          size=\"sm\"\n          icon={provisioned ? 'document-info' : 'edit'}\n          type=\"button\"\n          disabled={disabled}\n          aria-label={`${provisioned ? 'view' : 'edit'}-action`}\n          data-testid={`${provisioned ? 'view' : 'edit'}-action`}\n          href={`/alerting/notifications/receivers/${encodeURIComponent(name)}/edit`}\n        >\n          {provisioned ? 'View' : 'Edit'}\n        </LinkButton>\n        {/* TODO probably want to split this off since there's lots of RBAC involved here */}\n        <Dropdown\n          overlay={\n            <Menu>\n              {canExport && (\n                <>\n                  <Menu.Item\n                    icon=\"download-alt\"\n                    label={isOrgAdmin() ? 'Export' : 'Export redacted'}\n                    disabled={!allowedToExport}\n                    url={createUrl(`/api/v1/provisioning/contact-points/export/`, {\n                      download: 'true',\n                      format: 'yaml',\n                      decrypt: isOrgAdmin().toString(),\n                      name: name,\n                    })}\n                    target=\"_blank\"\n                    data-testid=\"export\"\n                  />\n                  <Menu.Divider />\n                </>\n              )}\n              <ConditionalWrap\n                shouldWrap={policies > 0}\n                wrap={(children) => (\n                  <Tooltip\n                    content={'Contact point is currently in use by one or more notification policies'}\n                    placement=\"top\"\n                  >\n                    <span>{children}</span>\n                  </Tooltip>\n                )}\n              >\n                <Menu.Item\n                  label=\"Delete\"\n                  icon=\"trash-alt\"\n                  destructive\n                  disabled={disabled || provisioned || policies > 0}\n                  onClick={() => onDelete(name)}\n                />\n              </ConditionalWrap>\n            </Menu>\n          }\n        >\n          <Button\n            variant=\"secondary\"\n            size=\"sm\"\n            icon=\"ellipsis-h\"\n            type=\"button\"\n            aria-label=\"more-actions\"\n            data-testid=\"more-actions\"\n          />\n        </Dropdown>\n      </Stack>\n    </div>\n  );\n};\n\ninterface ContactPointReceiverProps {\n  type: GrafanaNotifierType | string;\n  description?: ReactNode;\n  sendingResolved?: boolean;\n  diagnostics?: NotifierStatus;\n}\n\nconst ContactPointReceiver = (props: ContactPointReceiverProps) => {\n  const { type, description, diagnostics, sendingResolved = true } = props;\n  const styles = useStyles2(getStyles);\n\n  const iconName = INTEGRATION_ICONS[type];\n  const hasMetadata = diagnostics !== undefined;\n\n  // TODO get the actual name of the type from /ngalert if grafanaManaged AM\n  const receiverName = receiverTypeNames[type] ?? upperFirst(type);\n\n  return (\n    <div className={styles.integrationWrapper}>\n      <Stack direction=\"column\" gap={0.5}>\n        <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n          <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n            {iconName && <Icon name={iconName} />}\n            <Text variant=\"body\" color=\"primary\">\n              {receiverName}\n            </Text>\n          </Stack>\n          {description && (\n            <Text variant=\"bodySmall\" color=\"secondary\">\n              {description}\n            </Text>\n          )}\n        </Stack>\n        {hasMetadata && <ContactPointReceiverMetadataRow diagnostics={diagnostics} sendingResolved={sendingResolved} />}\n      </Stack>\n    </div>\n  );\n};\n\ninterface ContactPointReceiverMetadata {\n  sendingResolved: boolean;\n  diagnostics: NotifierStatus;\n}\n\ntype ContactPointReceiverSummaryProps = {\n  receivers: GrafanaManagedReceiverConfig[];\n};\n\n/**\n * This summary is used when we're dealing with non-Grafana managed alertmanager since they\n * don't have any metadata worth showing other than a summary of what types are configured for the contact point\n */\nconst ContactPointReceiverSummary = ({ receivers }: ContactPointReceiverSummaryProps) => {\n  const styles = useStyles2(getStyles);\n  const countByType = groupBy(receivers, (receiver) => receiver.type);\n\n  return (\n    <div className={styles.integrationWrapper}>\n      <Stack direction=\"column\" gap={0}>\n        <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n          {Object.entries(countByType).map(([type, receivers], index) => {\n            const iconName = INTEGRATION_ICONS[type];\n            const receiverName = receiverTypeNames[type] ?? upperFirst(type);\n            const isLastItem = size(countByType) - 1 === index;\n\n            return (\n              <React.Fragment key={type}>\n                <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n                  {iconName && <Icon name={iconName} />}\n                  <Text variant=\"body\" color=\"primary\">\n                    {receiverName}\n                    {receivers.length > 1 && <> ({receivers.length})</>}\n                  </Text>\n                </Stack>\n                {!isLastItem && '⋅'}\n              </React.Fragment>\n            );\n          })}\n        </Stack>\n      </Stack>\n    </div>\n  );\n};\n\nconst ContactPointReceiverMetadataRow = ({ diagnostics, sendingResolved }: ContactPointReceiverMetadata) => {\n  const styles = useStyles2(getStyles);\n\n  const failedToSend = Boolean(diagnostics.lastNotifyAttemptError);\n  const lastDeliveryAttempt = dateTime(diagnostics.lastNotifyAttempt);\n  const lastDeliveryAttemptDuration = diagnostics.lastNotifyAttemptDuration;\n  const hasDeliveryAttempt = lastDeliveryAttempt.isValid();\n\n  return (\n    <div className={styles.metadataRow}>\n      <Stack direction=\"row\" gap={1}>\n        {/* this is shown when the last delivery failed – we don't show any additional metadata */}\n        {failedToSend ? (\n          <>\n            <MetaText color=\"error\" icon=\"exclamation-circle\">\n              <Tooltip content={diagnostics.lastNotifyAttemptError!}>\n                <span>Last delivery attempt failed</span>\n              </Tooltip>\n            </MetaText>\n          </>\n        ) : (\n          <>\n            {/* this is shown when we have a last delivery attempt */}\n            {hasDeliveryAttempt && (\n              <>\n                <MetaText icon=\"clock-nine\">\n                  Last delivery attempt{' '}\n                  <Tooltip content={lastDeliveryAttempt.toLocaleString()}>\n                    <span>\n                      <Strong>{lastDeliveryAttempt.locale('en').fromNow()}</Strong>\n                    </span>\n                  </Tooltip>\n                </MetaText>\n                <MetaText icon=\"stopwatch\">\n                  took <Strong>{lastDeliveryAttemptDuration}</Strong>\n                </MetaText>\n              </>\n            )}\n            {/* when we have no last delivery attempt */}\n            {!hasDeliveryAttempt && <MetaText icon=\"clock-nine\">No delivery attempts</MetaText>}\n            {/* this is only shown for contact points that only want \"firing\" updates */}\n            {!sendingResolved && (\n              <MetaText icon=\"info-circle\">\n                Delivering <Strong>only firing</Strong> notifications\n              </MetaText>\n            )}\n          </>\n        )}\n      </Stack>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  contactPointWrapper: css({\n    borderRadius: `${theme.shape.radius.default}`,\n    border: `solid 1px ${theme.colors.border.weak}`,\n    borderBottom: 'none',\n  }),\n  integrationWrapper: css({\n    position: 'relative',\n\n    background: `${theme.colors.background.primary}`,\n    padding: `${theme.spacing(1)} ${theme.spacing(1.5)}`,\n\n    borderBottom: `solid 1px ${theme.colors.border.weak}`,\n  }),\n  headerWrapper: css({\n    background: `${theme.colors.background.secondary}`,\n    padding: `${theme.spacing(1)} ${theme.spacing(1.5)}`,\n\n    borderBottom: `solid 1px ${theme.colors.border.weak}`,\n    borderTopLeftRadius: `${theme.shape.radius.default}`,\n    borderTopRightRadius: `${theme.shape.radius.default}`,\n  }),\n  metadataRow: css({\n    borderBottomLeftRadius: `${theme.shape.radius.default}`,\n    borderBottomRightRadius: `${theme.shape.radius.default}`,\n  }),\n});\n\nexport default ContactPoints;\n","import type { Monaco } from '@grafana/ui';\n\nimport { AlertmanagerTemplateFunction } from './language';\nimport { SuggestionDefinition } from './suggestionDefinition';\n\nexport function getAlertManagerSuggestions(monaco: Monaco): SuggestionDefinition[] {\n  const kind = monaco.languages.CompletionItemKind.Function;\n  return [\n    {\n      label: AlertmanagerTemplateFunction.toUpper,\n      detail: 'function(s string)',\n      kind,\n    },\n    {\n      label: AlertmanagerTemplateFunction.toLower,\n      detail: 'function(s string)',\n      kind,\n    },\n    {\n      label: AlertmanagerTemplateFunction.title,\n      documentation: 'Capitalizes the first letter of each word',\n      detail: 'function(s string)',\n      kind,\n    },\n    {\n      label: AlertmanagerTemplateFunction.join,\n      documentation: { value: 'Joins an array of strings using the separator provided.' },\n      detail: 'function(separator string, s []string)',\n      kind,\n    },\n    {\n      label: AlertmanagerTemplateFunction.match,\n      detail: 'function',\n      kind,\n    },\n    {\n      label: AlertmanagerTemplateFunction.safeHtml,\n      detail: 'function(pattern, repl, text)',\n      kind,\n    },\n    {\n      label: AlertmanagerTemplateFunction.reReplaceAll,\n      detail: 'function(pattern, repl, text)',\n      kind,\n    },\n    {\n      label: AlertmanagerTemplateFunction.stringSlice,\n      detail: 'function(s ...string)',\n      kind,\n    },\n  ];\n}\n","import { concat } from 'lodash';\nimport type { languages, editor, Position, IRange, IDisposable } from 'monaco-editor/esm/vs/editor/editor.api';\n\nimport type { Monaco } from '@grafana/ui';\n\nimport { getAlertManagerSuggestions } from './alertManagerSuggestions';\nimport { SuggestionDefinition } from './suggestionDefinition';\nimport {\n  getAlertsSuggestions,\n  getAlertSuggestions,\n  getGlobalSuggestions,\n  getKeyValueSuggestions,\n  getSnippetsSuggestions,\n} from './templateDataSuggestions';\n\nexport function registerGoTemplateAutocomplete(monaco: Monaco): IDisposable {\n  const goTemplateAutocompleteProvider: languages.CompletionItemProvider = {\n    triggerCharacters: ['.'],\n    provideCompletionItems(model, position, context): languages.ProviderResult<languages.CompletionList> {\n      const word = model.getWordUntilPosition(position);\n      const range = {\n        startLineNumber: position.lineNumber,\n        endLineNumber: position.lineNumber,\n        startColumn: word.startColumn,\n        endColumn: word.endColumn,\n      };\n\n      const completionProvider = new CompletionProvider(monaco, range);\n\n      const insideExpression = isInsideGoExpression(model, position);\n      if (!insideExpression) {\n        return completionProvider.getSnippetsSuggestions();\n      }\n\n      if (context.triggerKind === monaco.languages.CompletionTriggerKind.Invoke && !context.triggerCharacter) {\n        return completionProvider.getFunctionsSuggestions();\n      }\n\n      const wordBeforeDot = model.getWordUntilPosition({\n        lineNumber: position.lineNumber,\n        column: position.column - 1,\n      });\n\n      return completionProvider.getTemplateDataSuggestions(wordBeforeDot.word);\n    },\n  };\n\n  return monaco.languages.registerCompletionItemProvider('go-template', goTemplateAutocompleteProvider);\n}\n\nfunction isInsideGoExpression(model: editor.ITextModel, position: Position) {\n  const searchRange = {\n    startLineNumber: position.lineNumber,\n    endLineNumber: position.lineNumber,\n    startColumn: model.getLineMinColumn(position.lineNumber),\n    endColumn: model.getLineMaxColumn(position.lineNumber),\n  };\n\n  const goSyntaxRegex = '\\\\{\\\\{[a-zA-Z0-9._() \"]+\\\\}\\\\}';\n  const matches = model.findMatches(goSyntaxRegex, searchRange, true, false, null, true);\n\n  return matches.some((match) => match.range.containsPosition(position));\n}\n\nexport class CompletionProvider {\n  constructor(\n    private readonly monaco: Monaco,\n    private readonly range: IRange\n  ) {}\n\n  getSnippetsSuggestions = (): languages.ProviderResult<languages.CompletionList> => {\n    return this.getCompletionsFromDefinitions(getSnippetsSuggestions(this.monaco));\n  };\n\n  getFunctionsSuggestions = (): languages.ProviderResult<languages.CompletionList> => {\n    return this.getCompletionsFromDefinitions(getAlertManagerSuggestions(this.monaco));\n  };\n\n  getTemplateDataSuggestions = (wordContext: string): languages.ProviderResult<languages.CompletionList> => {\n    switch (wordContext) {\n      case '':\n        return this.getCompletionsFromDefinitions(getGlobalSuggestions(this.monaco), getAlertSuggestions(this.monaco));\n      case 'Alerts':\n        return this.getCompletionsFromDefinitions(getAlertsSuggestions(this.monaco));\n      case 'GroupLabels':\n      case 'CommonLabels':\n      case 'CommonAnnotations':\n      case 'Labels':\n      case 'Annotations':\n        return this.getCompletionsFromDefinitions(getKeyValueSuggestions(this.monaco));\n      default:\n        return { suggestions: [] };\n    }\n  };\n\n  private getCompletionsFromDefinitions = (...args: SuggestionDefinition[][]): languages.CompletionList => {\n    const allDefinitions = concat(...args);\n\n    return {\n      suggestions: allDefinitions.map((definition) => buildAutocompleteSuggestion(definition, this.range)),\n    };\n  };\n}\n\nfunction buildAutocompleteSuggestion(\n  { label, detail, documentation, kind, insertText }: SuggestionDefinition,\n  range: IRange\n): languages.CompletionItem {\n  const insertFallback = typeof label === 'string' ? label : label.label;\n  const labelObject = typeof label === 'string' ? { label: label, description: detail } : { ...label };\n\n  labelObject.description ??= detail;\n\n  return {\n    label: labelObject,\n    kind: kind,\n    insertText: insertText ?? insertFallback,\n    range,\n    documentation: documentation,\n    detail: detail,\n  };\n}\n","import { LanguageDefinition } from './register';\n\nexport const GO_TEMPLATE_LANGUAGE_ID = 'go-template';\n\nconst goTemplateLanguageDefinition: LanguageDefinition = {\n  id: GO_TEMPLATE_LANGUAGE_ID,\n  extensions: [],\n  aliases: [],\n  mimetypes: [],\n  loader: () => import('./language'),\n};\nexport default goTemplateLanguageDefinition;\n","import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\n\nimport { Monaco } from '@grafana/ui';\n\nexport type LanguageDefinition = {\n  id: string;\n  extensions: string[];\n  aliases: string[];\n  mimetypes: string[];\n  loader: () => Promise<{\n    language: monacoType.languages.IMonarchLanguage;\n    conf: monacoType.languages.LanguageConfiguration;\n  }>;\n};\n\nexport const registerLanguage = (\n  monaco: Monaco,\n  language: LanguageDefinition\n  // completionItemProvider: Completeable\n) => {\n  const { id, loader } = language;\n\n  const languages = monaco.languages.getLanguages();\n  if (languages.find((l) => l.id === id)) {\n    return;\n  }\n\n  monaco.languages.register({ id });\n  loader().then((monarch) => {\n    monaco.languages.setMonarchTokensProvider(id, monarch.language);\n    monaco.languages.setLanguageConfiguration(id, monarch.conf);\n    // monaco.languages.registerCompletionItemProvider(id, completionItemProvider.getCompletionProvider(monaco, language));\n  });\n};\n","/**\n * This file contains the template editor we'll be using for alertmanager templates.\n *\n * It includes auto-complete for template data and syntax highlighting\n */\nimport { editor, IDisposable } from 'monaco-editor';\nimport React, { useEffect, useRef } from 'react';\n\nimport { CodeEditor } from '@grafana/ui';\nimport { CodeEditorProps } from '@grafana/ui/src/components/Monaco/types';\n\nimport { registerGoTemplateAutocomplete } from './editor/autocomplete';\nimport goTemplateLanguageDefinition, { GO_TEMPLATE_LANGUAGE_ID } from './editor/definition';\nimport { registerLanguage } from './editor/register';\n\ntype TemplateEditorProps = Omit<CodeEditorProps, 'language' | 'theme'> & {\n  autoHeight?: boolean;\n};\n\nconst TemplateEditor = (props: TemplateEditorProps) => {\n  const shouldAutoHeight = Boolean(props.autoHeight);\n  const disposeSuggestions = useRef<IDisposable | null>(null);\n\n  const onEditorDidMount = (editor: editor.IStandaloneCodeEditor) => {\n    if (shouldAutoHeight) {\n      const contentHeight = editor.getContentHeight();\n\n      try {\n        // we're passing NaN in to the width because the type definition wants a number (NaN is a number, go figure)\n        // but the width could be defined as a string \"auto\", passing NaN seems to just ignore our width update here\n        editor.layout({ height: contentHeight, width: NaN });\n      } catch (err) {}\n    }\n  };\n\n  useEffect(() => {\n    return () => {\n      disposeSuggestions.current?.dispose();\n    };\n  }, []);\n\n  return (\n    <CodeEditor\n      showLineNumbers={true}\n      showMiniMap={false}\n      {...props}\n      onEditorDidMount={onEditorDidMount}\n      onBeforeEditorMount={(monaco) => {\n        registerLanguage(monaco, goTemplateLanguageDefinition);\n        disposeSuggestions.current = registerGoTemplateAutocomplete(monaco);\n      }}\n      language={GO_TEMPLATE_LANGUAGE_ID}\n    />\n  );\n};\n\nexport { TemplateEditor };\n","export const alertsLoopSnippet = `\n{{ range .Alerts }}\n  Status: {{ .Status }}\n  Starts at: {{ .StartsAt }}\n{{ end }}\n`;\n\nexport const alertDetailsSnippet = `\n[{{.Status}}] {{ .Labels.alertname }}\n\nLabels:\n{{ range .Labels.SortedPairs }}\n  {{ .Name }}: {{ .Value }}\n{{ end }}\n\n{{ if gt (len .Annotations) 0 }}\nAnnotations:\n{{ range .Annotations.SortedPairs }}\n  {{ .Name }}: {{ .Value }}\n{{ end }}\n{{ end }}\n\n{{ if gt (len .SilenceURL ) 0 }}\n  Silence alert: {{ .SilenceURL }}\n{{ end }}\n{{ if gt (len .DashboardURL ) 0 }}\n  Go to dashboard: {{ .DashboardURL }}\n{{ end }}\n`;\n\nexport const groupLabelsLoopSnippet = getKeyValueTemplate('GroupLabels.SortedPairs');\nexport const commonLabelsLoopSnippet = getKeyValueTemplate('CommonLabels.SortedPairs');\nexport const commonAnnotationsLoopSnippet = getKeyValueTemplate('CommonAnnotations.SortedPairs');\nexport const labelsLoopSnippet = getKeyValueTemplate('Labels.SortedPairs');\nexport const annotationsLoopSnippet = getKeyValueTemplate('Annotations.SortedPairs');\n\nfunction getKeyValueTemplate(arrayName: string) {\n  return `\n{{ range .${arrayName} }}\n  {{ .Name }} = {{ .Value }}\n{{ end }}`;\n}\n","import type { Monaco } from '@grafana/ui';\n\nimport {\n  alertDetailsSnippet,\n  alertsLoopSnippet,\n  annotationsLoopSnippet,\n  commonAnnotationsLoopSnippet,\n  commonLabelsLoopSnippet,\n  groupLabelsLoopSnippet,\n  labelsLoopSnippet,\n} from './snippets';\nimport { SuggestionDefinition } from './suggestionDefinition';\n\n// Suggestions available at the top level of a template\nexport function getGlobalSuggestions(monaco: Monaco): SuggestionDefinition[] {\n  const kind = monaco.languages.CompletionItemKind.Field;\n\n  return [\n    {\n      label: 'Alerts',\n      kind,\n      detail: 'Alert[]',\n      documentation: { value: 'An Array containing all alerts' },\n    },\n    { label: 'Receiver', kind, detail: 'string' },\n    { label: 'Status', kind, detail: 'string' },\n    { label: 'GroupLabels', kind, detail: '[]KeyValue' },\n    { label: 'CommonLabels', kind, detail: '[]KeyValue' },\n    { label: 'CommonAnnotations', kind, detail: '[]KeyValue' },\n    { label: 'ExternalURL', kind, detail: 'string' },\n  ];\n}\n\n// Suggestions that are valid only in the scope of an alert (e.g. in the .Alerts loop)\nexport function getAlertSuggestions(monaco: Monaco): SuggestionDefinition[] {\n  const kind = monaco.languages.CompletionItemKind.Field;\n\n  return [\n    {\n      label: { label: 'Status', detail: '(Alert)', description: 'string' },\n      kind,\n      detail: 'string',\n      documentation: { value: 'Status of the alert. It can be `firing` or `resolved`' },\n    },\n    {\n      label: { label: 'Labels', detail: '(Alert)' },\n      kind,\n      detail: '[]KeyValue',\n      documentation: { value: 'A set of labels attached to the alert.' },\n    },\n    {\n      label: { label: 'Annotations', detail: '(Alert)' },\n      kind,\n      detail: '[]KeyValue',\n      documentation: 'A set of annotations attached to the alert.',\n    },\n    {\n      label: { label: 'StartsAt', detail: '(Alert)' },\n      kind,\n      detail: 'time.Time',\n      documentation: 'Time the alert started firing.',\n    },\n    {\n      label: { label: 'EndsAt', detail: '(Alert)' },\n      kind,\n      detail: 'time.Time',\n      documentation:\n        'Only set if the end time of an alert is known. Otherwise set to a configurable timeout period from the time since the last alert was received.',\n    },\n    {\n      label: { label: 'GeneratorURL', detail: '(Alert)' },\n      kind,\n      detail: 'string',\n      documentation: 'Back link to Grafana or external Alertmanager.',\n    },\n    {\n      label: { label: 'SilenceURL', detail: '(Alert)' },\n      kind,\n      detail: 'string',\n      documentation:\n        'Link to Grafana silence for with labels for this alert pre-filled. Only for Grafana managed alerts.',\n    },\n    {\n      label: { label: 'DashboardURL', detail: '(Alert)' },\n      kind,\n      detail: 'string',\n      documentation: 'Link to Grafana dashboard, if alert rule belongs to one. Only for Grafana managed alerts.',\n    },\n    {\n      label: { label: 'PanelURL', detail: '(Alert)' },\n      kind,\n      detail: 'string',\n      documentation: 'Link to Grafana dashboard panel, if alert rule belongs to one. Only for Grafana managed alerts.',\n    },\n    {\n      label: { label: 'Fingerprint', detail: '(Alert)' },\n      kind,\n      detail: 'string',\n      documentation: 'Fingerprint that can be used to identify the alert.',\n    },\n    {\n      label: { label: 'ValueString', detail: '(Alert)' },\n      kind,\n      detail: 'string',\n      documentation: 'String that contains labels and values of each reduced expression in the alert.',\n    },\n  ];\n}\n\n// Suggestions for .Alerts\nexport function getAlertsSuggestions(monaco: Monaco): SuggestionDefinition[] {\n  const kind = monaco.languages.CompletionItemKind.Field;\n\n  return [\n    { label: 'Firing', kind, detail: 'Alert[]' },\n    { label: 'Resolved', kind, detail: 'Alert[]' },\n  ];\n}\n\n// Suggestions for the KeyValue types\nexport function getKeyValueSuggestions(monaco: Monaco): SuggestionDefinition[] {\n  const kind = monaco.languages.CompletionItemKind.Field;\n\n  return [\n    { label: 'SortedPairs', kind, detail: '[]KeyValue' },\n    { label: 'Names', kind, detail: '[]string' },\n    { label: 'Values', kind, detail: '[]string' },\n    {\n      label: 'Remove',\n      detail: 'KeyValue[] function(keys []string)',\n      kind: monaco.languages.CompletionItemKind.Method,\n    },\n  ];\n}\n\nexport const snippets = {\n  alerts: {\n    label: 'alertsloop',\n    description: 'Renders a loop through alerts',\n    snippet: alertsLoopSnippet,\n  },\n  alertDetails: {\n    label: 'alertdetails',\n    description: 'Renders all information available about the alert',\n    snippet: alertDetailsSnippet,\n  },\n  groupLabels: {\n    label: 'grouplabelsloop',\n    description: 'Renders a loop through group labels',\n    snippet: groupLabelsLoopSnippet,\n  },\n  commonLabels: {\n    label: 'commonlabelsloop',\n    description: 'Renders a loop through common labels',\n    snippet: commonLabelsLoopSnippet,\n  },\n  commonAnnotations: {\n    label: 'commonannotationsloop',\n    description: 'Renders a loop through common annotations',\n    snippet: commonAnnotationsLoopSnippet,\n  },\n  labels: {\n    label: 'labelsloop',\n    description: 'Renders a loop through labels',\n    snippet: labelsLoopSnippet,\n  },\n  annotations: {\n    label: 'annotationsloop',\n    description: 'Renders a loop through annotations',\n    snippet: annotationsLoopSnippet,\n  },\n};\n\n// Snippets\nexport function getSnippetsSuggestions(monaco: Monaco): SuggestionDefinition[] {\n  const snippetKind = monaco.languages.CompletionItemKind.Snippet;\n  const snippetInsertRule = monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet;\n\n  const { alerts, alertDetails, groupLabels, commonLabels, commonAnnotations, labels, annotations } = snippets;\n\n  return [\n    {\n      label: alerts.label,\n      documentation: alerts.description,\n      kind: snippetKind,\n      insertText: alerts.snippet,\n      insertTextRules: snippetInsertRule,\n    },\n    {\n      label: {\n        label: alertDetails.label,\n        detail: '(Alert)',\n      },\n      documentation: alertDetails.description,\n      kind: snippetKind,\n      insertText: alertDetails.snippet,\n      insertTextRules: snippetInsertRule,\n    },\n    {\n      label: groupLabels.label,\n      documentation: groupLabels.description,\n      kind: snippetKind,\n      insertText: groupLabels.snippet,\n      insertTextRules: snippetInsertRule,\n    },\n    {\n      label: commonLabels.label,\n      documentation: commonLabels.description,\n      kind: snippetKind,\n      insertText: commonLabels.snippet,\n      insertTextRules: snippetInsertRule,\n    },\n    {\n      label: commonAnnotations.label,\n      documentation: commonAnnotations.description,\n      kind: snippetKind,\n      insertText: commonAnnotations.snippet,\n      insertTextRules: snippetInsertRule,\n    },\n    {\n      label: { label: labels.label, detail: '(Alert)' },\n      documentation: labels.description,\n      kind: snippetKind,\n      insertText: labels.snippet,\n      insertTextRules: snippetInsertRule,\n    },\n    {\n      label: { label: annotations.label, detail: '(Alert)' },\n      documentation: annotations.description,\n      kind: snippetKind,\n      insertText: annotations.snippet,\n      insertTextRules: snippetInsertRule,\n    },\n  ];\n}\n","import { Receiver } from 'app/plugins/datasource/alertmanager/types';\n\nimport { OnCallIntegrationDTO } from '../../../../api/onCallApi';\n\n// TODO This value needs to be changed to grafana_alerting when the OnCall team introduces the necessary changes\nexport const GRAFANA_ONCALL_INTEGRATION_TYPE = 'grafana_alerting';\n\nexport enum ReceiverTypes {\n  OnCall = 'oncall',\n}\n\nexport const isInOnCallIntegrations = (url: string, integrationsUrls: string[]) => {\n  return integrationsUrls.includes(url);\n};\n\nexport const isOnCallReceiver = (receiver: Receiver, integrations: OnCallIntegrationDTO[]) => {\n  if (!receiver.grafana_managed_receiver_configs) {\n    return false;\n  }\n  // A receiver it's an onCall contact point if it includes only one integration, and this integration it's an onCall\n  // An integration it's an onCall type if it's included in the list of integrations returned by the onCall api endpoint\n  const onlyOneIntegration = receiver.grafana_managed_receiver_configs.length === 1;\n  const isOnCall = isInOnCallIntegrations(\n    receiver.grafana_managed_receiver_configs[0]?.settings?.url ?? '',\n    integrations.map((i) => i.integration_url)\n  );\n  return onlyOneIntegration && isOnCall;\n};\n","import { GrafanaManagedContactPoint } from '../../../../../../plugins/datasource/alertmanager/types';\nimport { SupportedPlugin } from '../../../types/pluginBridges';\n\nexport interface AmRouteReceiver {\n  label: string;\n  value: string;\n  grafanaAppReceiverType?: SupportedPlugin;\n}\n\nexport interface ReceiverWithTypes extends GrafanaManagedContactPoint {\n  grafanaAppReceiverType?: SupportedPlugin;\n}\nexport const GRAFANA_APP_RECEIVERS_SOURCE_IMAGE: Record<SupportedPlugin, string> = {\n  [SupportedPlugin.OnCall]: 'public/img/alerting/oncall_logo.svg',\n\n  [SupportedPlugin.Incident]: '',\n  [SupportedPlugin.MachineLearning]: '',\n};\n","import React from 'react';\n\nimport { IconName, Tooltip, LinkButton, Button } from '@grafana/ui';\nimport { PopoverContent, TooltipPlacement } from '@grafana/ui/src/components/Tooltip';\n\ninterface Props {\n  tooltip: PopoverContent;\n  icon: IconName;\n  className?: string;\n  tooltipPlacement?: TooltipPlacement;\n  to?: string;\n  target?: string;\n  onClick?: () => void;\n  'data-testid'?: string;\n}\n\nexport const ActionIcon = ({\n  tooltip,\n  icon,\n  to,\n  target,\n  onClick,\n  className,\n  tooltipPlacement = 'top',\n  ...rest\n}: Props) => {\n  const ariaLabel = typeof tooltip === 'string' ? tooltip : undefined;\n\n  return (\n    <Tooltip content={tooltip} placement={tooltipPlacement}>\n      {to ? (\n        <LinkButton\n          variant=\"secondary\"\n          fill=\"text\"\n          icon={icon}\n          href={to}\n          size=\"sm\"\n          target={target}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      ) : (\n        <Button\n          className={className}\n          variant=\"secondary\"\n          fill=\"text\"\n          size=\"sm\"\n          icon={icon}\n          type=\"button\"\n          onClick={onClick}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      )}\n    </Tooltip>\n  );\n};\n","import { SerializedError } from '@reduxjs/toolkit';\n\nimport { alertmanagerApi } from '../api/alertmanagerApi';\n\ntype Options = {\n  refetchOnFocus: boolean;\n  refetchOnReconnect: boolean;\n};\n\n// TODO refactor this so we can just call \"alertmanagerApi.endpoints.getAlertmanagerConfiguration\" everywhere\n// and remove this hook since it adds little value\nexport function useAlertmanagerConfig(amSourceName?: string, options?: Options) {\n  const fetchConfig = alertmanagerApi.endpoints.getAlertmanagerConfiguration.useQuery(amSourceName ?? '', {\n    ...options,\n    skip: !amSourceName,\n  });\n\n  return {\n    ...fetchConfig,\n    // TODO refactor to get rid of this type assertion\n    error: fetchConfig.error as SerializedError,\n  };\n}\n","import { IconName } from '@grafana/ui';\n\nexport const INTEGRATION_ICONS: Record<string, IconName> = {\n  discord: 'discord',\n  email: 'envelope',\n  googlechat: 'google-hangouts-alt',\n  hipchat: 'hipchat',\n  line: 'line',\n  pagerduty: 'pagerduty',\n  slack: 'slack',\n  teams: 'microsoft',\n  telegram: 'telegram-alt',\n  webhook: 'link',\n  sns: 'amazon',\n};\n","import { config } from 'app/core/config';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction } from 'app/types';\n\nexport function isGrafanaAdmin(): boolean {\n  return config.bootData.user.isGrafanaAdmin;\n}\n\nexport function isOrgAdmin() {\n  return contextSrv.hasRole('Admin');\n}\n\nexport function isDataSourceEditor() {\n  return (\n    contextSrv.hasPermission(AccessControlAction.DataSourcesCreate) &&\n    contextSrv.hasPermission(AccessControlAction.DataSourcesWrite)\n  );\n}\n"],"names":["ConditionalWrap","children","shouldWrap","wrap","_ref","ONCALL_INTEGRATION_V2_FEATURE","getProxyApiUrl","path","onCallApi","build","response","isPaginatedResponse","name","integration","useGrafanaOnCallIntegrationsQuery","isOnCallFetchError","error","MetaText","icon","color","rest","styles","getStyles","interactive","ProvisionedResource","ProvisioningAlert","resource","ProvisioningBadge","Strong","theme","MessageTemplates","selectedAlertmanager","data","useAlertmanagerConfig","Alert","TemplatesTable","useDeleteContactPointModal","handleDelete","isLoading","showModal","setShowModal","contactPoint","setContactPoint","setError","handleDismiss","handleShow","handleSubmit","ErrorModal","Modal","Button","isOpen","onDismiss","ActiveTab","DEFAULT_PAGE_SIZE","ContactPoints","activeTab","setActiveTab","contactPoints","useContactPoints","deleteTrigger","updateAlertmanagerState","DeleteModal","showDeleteModal","showingContactPoints","showingMessageTemplates","isGrafanaManagedAlertmanager","isVanillaAlertmanager","permissions","allowedToAddContactPoint","Stack","TabsBar","Tab","Spacer","TabContent","LoadingPlaceholder","Text","ContactPointsList","disabled","pageSize","onDelete","page","pageItems","numberOfPages","onPageChange","usePagination","index","provisioned","policies","ContactPoint","Pagination","receivers","showFullMetadata","receiver","ContactPointHeader","diagnostics","sendingResolved","ContactPointReceiver","ContactPointReceiverSummary","props","isReferencedByPolicies","canExport","allowedToExport","Provisioning","Dropdown","Menu","Tooltip","type","description","iconName","hasMetadata","receiverName","Icon","ContactPointReceiverMetadataRow","countByType","isLastItem","failedToSend","lastDeliveryAttempt","lastDeliveryAttemptDuration","hasDeliveryAttempt","getAlertManagerSuggestions","monaco","kind","registerGoTemplateAutocomplete","goTemplateAutocompleteProvider","model","position","context","word","range","completionProvider","CompletionProvider","isInsideGoExpression","wordBeforeDot","searchRange","goSyntaxRegex","match","wordContext","args","definition","buildAutocompleteSuggestion","label","detail","documentation","insertText","insertFallback","labelObject","GO_TEMPLATE_LANGUAGE_ID","registerLanguage","language","id","loader","l","monarch","TemplateEditor","shouldAutoHeight","disposeSuggestions","onEditorDidMount","editor","contentHeight","CodeEditor","alertsLoopSnippet","alertDetailsSnippet","groupLabelsLoopSnippet","getKeyValueTemplate","commonLabelsLoopSnippet","commonAnnotationsLoopSnippet","labelsLoopSnippet","annotationsLoopSnippet","arrayName","getGlobalSuggestions","getAlertSuggestions","getAlertsSuggestions","getKeyValueSuggestions","snippets","getSnippetsSuggestions","snippetKind","snippetInsertRule","alerts","alertDetails","groupLabels","commonLabels","commonAnnotations","labels","annotations","GRAFANA_ONCALL_INTEGRATION_TYPE","ReceiverTypes","isInOnCallIntegrations","url","integrationsUrls","isOnCallReceiver","integrations","onlyOneIntegration","isOnCall","i","GRAFANA_APP_RECEIVERS_SOURCE_IMAGE","ActionIcon","tooltip","to","target","onClick","className","tooltipPlacement","ariaLabel","amSourceName","options","fetchConfig","INTEGRATION_ICONS","isGrafanaAdmin","isOrgAdmin","isDataSourceEditor"],"sourceRoot":""}