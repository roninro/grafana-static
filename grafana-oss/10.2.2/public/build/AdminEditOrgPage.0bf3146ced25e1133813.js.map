{"version":3,"file":"AdminEditOrgPage.0bf3146ced25e1133813.js","mappings":"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","sources":["webpack://grafana/./public/app/features/admin/api.ts","webpack://grafana/./public/app/features/admin/AdminEditOrgPage.tsx","webpack://grafana/./public/app/features/admin/Users/OrgUsersTable.tsx"],"sourcesContent":["import { UrlQueryValue } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { contextSrv } from 'app/core/core';\nimport { accessControlQueryParam } from 'app/core/utils/accessControl';\nimport { OrgUser, AccessControlAction } from 'app/types';\n\nconst perPage = 30;\n\nexport const getOrg = async (orgId: UrlQueryValue) => {\n  return await getBackendSrv().get(`/api/orgs/${orgId}`);\n};\n\nexport const getOrgUsers = async (orgId: UrlQueryValue, page: number) => {\n  if (contextSrv.hasPermission(AccessControlAction.OrgUsersRead)) {\n    return getBackendSrv().get(`/api/orgs/${orgId}/users/search`, accessControlQueryParam({ perpage: perPage, page }));\n  }\n  return { orgUsers: [] };\n};\n\nexport const getUsersRoles = async (orgId: number, users: OrgUser[]) => {\n  const userIds = users.map((u) => u.userId);\n  const roles = await getBackendSrv().post(`/api/access-control/users/roles/search`, { userIds, orgId });\n  users.forEach((u) => {\n    u.roles = roles ? roles[u.userId] || [] : [];\n  });\n};\n\nexport const updateOrgUserRole = (orgUser: OrgUser, orgId: UrlQueryValue) => {\n  return getBackendSrv().patch(`/api/orgs/${orgId}/users/${orgUser.userId}`, orgUser);\n};\n\nexport const removeOrgUser = (orgUser: OrgUser, orgId: UrlQueryValue) => {\n  return getBackendSrv().delete(`/api/orgs/${orgId}/users/${orgUser.userId}`);\n};\n\nexport const updateOrgName = (name: string, orgId: number) => {\n  return getBackendSrv().put(`/api/orgs/${orgId}`, { name });\n};\n","import React, { useState, useEffect } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { NavModelItem } from '@grafana/data';\nimport { Form, Field, Input, Button, Legend, Alert } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { OrgUser, AccessControlAction, OrgRole } from 'app/types';\n\nimport { OrgUsersTable } from './Users/OrgUsersTable';\nimport { getOrg, getOrgUsers, getUsersRoles, removeOrgUser, updateOrgName, updateOrgUserRole } from './api';\n\ninterface OrgNameDTO {\n  orgName: string;\n}\n\ninterface Props extends GrafanaRouteComponentProps<{ id: string }> {}\n\nconst AdminEditOrgPage = ({ match }: Props) => {\n  const orgId = parseInt(match.params.id, 10);\n  const canWriteOrg = contextSrv.hasPermission(AccessControlAction.OrgsWrite);\n  const canReadUsers = contextSrv.hasPermission(AccessControlAction.OrgUsersRead);\n\n  const [users, setUsers] = useState<OrgUser[]>([]);\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n\n  const [orgState, fetchOrg] = useAsyncFn(() => getOrg(orgId), []);\n  const [, fetchOrgUsers] = useAsyncFn(async (page) => {\n    const result = await getOrgUsers(orgId, page);\n\n    if (contextSrv.licensedAccessControlEnabled()) {\n      await getUsersRoles(orgId, result.orgUsers);\n    }\n\n    const totalPages = result?.perPage !== 0 ? Math.ceil(result.totalCount / result.perPage) : 0;\n    setTotalPages(totalPages);\n    setUsers(result.orgUsers);\n    return result.orgUsers;\n  }, []);\n\n  useEffect(() => {\n    fetchOrg();\n    fetchOrgUsers(page);\n  }, [fetchOrg, fetchOrgUsers, page]);\n\n  const onUpdateOrgName = async (name: string) => {\n    await updateOrgName(name, orgId);\n  };\n\n  const renderMissingPermissionMessage = () => (\n    <Alert severity=\"info\" title=\"Access denied\">\n      You do not have permission to see users in this organization. To update this organization, contact your server\n      administrator.\n    </Alert>\n  );\n\n  const onPageChange = (toPage: number) => {\n    setPage(toPage);\n  };\n\n  const onRemoveUser = async (orgUser: OrgUser) => {\n    await removeOrgUser(orgUser, orgId);\n    fetchOrgUsers(page);\n  };\n\n  const onRoleChange = async (role: OrgRole, orgUser: OrgUser) => {\n    await updateOrgUserRole({ ...orgUser, role }, orgId);\n    fetchOrgUsers(page);\n  };\n\n  const pageNav: NavModelItem = {\n    text: orgState?.value?.name ?? '',\n    icon: 'shield',\n    subTitle: 'Manage settings and user roles for an organization.',\n  };\n\n  return (\n    <Page navId=\"global-orgs\" pageNav={pageNav} subTitle=\"Manage settings for this specific org.\">\n      <Page.Contents>\n        <>\n          <Legend>Edit organization</Legend>\n          {orgState.value && (\n            <Form\n              defaultValues={{ orgName: orgState.value.name }}\n              onSubmit={(values: OrgNameDTO) => onUpdateOrgName(values.orgName)}\n            >\n              {({ register, errors }) => (\n                <>\n                  <Field label=\"Name\" invalid={!!errors.orgName} error=\"Name is required\" disabled={!canWriteOrg}>\n                    <Input {...register('orgName', { required: true })} id=\"org-name-input\" />\n                  </Field>\n                  <Button type=\"submit\" disabled={!canWriteOrg}>\n                    Update\n                  </Button>\n                </>\n              )}\n            </Form>\n          )}\n\n          <div style={{ marginTop: '20px' }}>\n            <Legend>Organization users</Legend>\n            {!canReadUsers && renderMissingPermissionMessage()}\n            {canReadUsers && !!users.length && (\n              <OrgUsersTable\n                users={users}\n                orgId={orgId}\n                onRoleChange={onRoleChange}\n                onRemoveUser={onRemoveUser}\n                changePage={onPageChange}\n                page={page}\n                totalPages={totalPages}\n              />\n            )}\n          </div>\n        </>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default AdminEditOrgPage;\n","import { css } from '@emotion/css';\nimport React, { useEffect, useMemo, useState } from 'react';\n\nimport { GrafanaTheme2, OrgRole } from '@grafana/data';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors';\nimport {\n  Button,\n  ConfirmModal,\n  Icon,\n  Tooltip,\n  CellProps,\n  useStyles2,\n  Tag,\n  InteractiveTable,\n  Column,\n  FetchDataFunc,\n  Pagination,\n  HorizontalGroup,\n  VerticalGroup,\n  Avatar,\n} from '@grafana/ui';\nimport { UserRolePicker } from 'app/core/components/RolePicker/UserRolePicker';\nimport { fetchRoleOptions } from 'app/core/components/RolePicker/api';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, OrgUser, Role } from 'app/types';\n\nimport { OrgRolePicker } from '../OrgRolePicker';\n\ntype Cell<T extends keyof OrgUser = keyof OrgUser> = CellProps<OrgUser, OrgUser[T]>;\n\nconst disabledRoleMessage = `This user's role is not editable because it is synchronized from your auth provider.\n  Refer to the Grafana authentication docs for details.`;\n\nconst getBasicRoleDisabled = (user: OrgUser) => {\n  let basicRoleDisabled = !contextSrv.hasPermissionInMetadata(AccessControlAction.OrgUsersWrite, user);\n  let authLabel = Array.isArray(user.authLabels) && user.authLabels.length > 0 ? user.authLabels[0] : '';\n  // A GCom specific feature toggle for role locking has been introduced, as the previous implementation had a bug with locking down external users synced through GCom (https://github.com/grafana/grafana/pull/72044)\n  // Remove this conditional once FlagGcomOnlyExternalOrgRoleSync feature toggle has been removed\n  if (authLabel !== 'grafana.com' || config.featureToggles.gcomOnlyExternalOrgRoleSync) {\n    const isUserSynced = user?.isExternallySynced;\n    basicRoleDisabled = isUserSynced || basicRoleDisabled;\n  }\n\n  return basicRoleDisabled;\n};\n\nconst selectors = e2eSelectors.pages.UserListPage.UsersListPage;\n\nexport interface Props {\n  users: OrgUser[];\n  orgId?: number;\n  onRoleChange: (role: OrgRole, user: OrgUser) => void;\n  onRemoveUser: (user: OrgUser) => void;\n  fetchData?: FetchDataFunc<OrgUser>;\n  changePage: (page: number) => void;\n  page: number;\n  totalPages: number;\n  rolesLoading?: boolean;\n}\n\nexport const OrgUsersTable = ({\n  users,\n  orgId,\n  onRoleChange,\n  onRemoveUser,\n  fetchData,\n  changePage,\n  page,\n  totalPages,\n  rolesLoading,\n}: Props) => {\n  const [userToRemove, setUserToRemove] = useState<OrgUser | null>(null);\n  const [roleOptions, setRoleOptions] = useState<Role[]>([]);\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    async function fetchOptions() {\n      try {\n        if (contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n          let options = await fetchRoleOptions(orgId);\n          setRoleOptions(options);\n        }\n      } catch (e) {\n        console.error('Error loading options');\n      }\n    }\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchOptions();\n    }\n  }, [orgId]);\n\n  const columns: Array<Column<OrgUser>> = useMemo(\n    () => [\n      {\n        id: 'avatarUrl',\n        header: '',\n        cell: ({ cell: { value } }: Cell<'avatarUrl'>) => value && <Avatar src={value} alt=\"User avatar\" />,\n      },\n      {\n        id: 'login',\n        header: 'Login',\n        cell: ({ cell: { value } }: Cell<'login'>) => <div>{value}</div>,\n        sortType: 'string',\n      },\n      {\n        id: 'email',\n        header: 'Email',\n        cell: ({ cell: { value } }: Cell<'email'>) => value,\n        sortType: 'string',\n      },\n      {\n        id: 'name',\n        header: 'Name',\n        cell: ({ cell: { value } }: Cell<'name'>) => value,\n        sortType: 'string',\n      },\n      {\n        id: 'lastSeenAtAge',\n        header: 'Last active',\n        cell: ({ cell: { value } }: Cell<'lastSeenAtAge'>) => value,\n        sortType: (a, b) => new Date(a.original.lastSeenAt).getTime() - new Date(b.original.lastSeenAt).getTime(),\n      },\n      {\n        id: 'role',\n        header: 'Role',\n        cell: ({ cell: { value }, row: { original } }: Cell<'role'>) => {\n          const basicRoleDisabled = getBasicRoleDisabled(original);\n          return contextSrv.licensedAccessControlEnabled() ? (\n            <UserRolePicker\n              userId={original.userId}\n              roles={original.roles || []}\n              isLoading={rolesLoading}\n              orgId={orgId}\n              roleOptions={roleOptions}\n              basicRole={value}\n              onBasicRoleChange={(newRole) => onRoleChange(newRole, original)}\n              basicRoleDisabled={basicRoleDisabled}\n              basicRoleDisabledMessage={disabledRoleMessage}\n              width={40}\n            />\n          ) : (\n            <OrgRolePicker\n              aria-label=\"Role\"\n              value={value}\n              disabled={basicRoleDisabled}\n              onChange={(newRole) => onRoleChange(newRole, original)}\n            />\n          );\n        },\n      },\n      {\n        id: 'info',\n        header: '',\n        cell: InfoCell,\n      },\n      {\n        id: 'authLabels',\n        header: 'Origin',\n        cell: ({ cell: { value } }: Cell<'authLabels'>) => (\n          <>{Array.isArray(value) && value.length > 0 && <TagBadge label={value[0]} removeIcon={false} count={0} />}</>\n        ),\n      },\n      {\n        id: 'isDisabled',\n        header: '',\n        cell: ({ cell: { value } }: Cell<'isDisabled'>) => <>{value && <Tag colorIndex={9} name={'Disabled'} />}</>,\n      },\n      {\n        id: 'delete',\n        header: '',\n        cell: ({ row: { original } }: Cell) => {\n          return (\n            contextSrv.hasPermissionInMetadata(AccessControlAction.OrgUsersRemove, original) && (\n              <Button\n                size=\"sm\"\n                variant=\"destructive\"\n                onClick={() => {\n                  setUserToRemove(original);\n                }}\n                icon=\"times\"\n                aria-label={`Delete user ${original.name}`}\n              />\n            )\n          );\n        },\n      },\n    ],\n    [rolesLoading, orgId, roleOptions, onRoleChange]\n  );\n\n  return (\n    <VerticalGroup spacing=\"md\" data-testid={selectors.container}>\n      <div className={styles.wrapper}>\n        <InteractiveTable\n          columns={columns}\n          data={users}\n          getRowId={(user) => String(user.userId)}\n          fetchData={fetchData}\n        />\n        <HorizontalGroup justify=\"flex-end\">\n          <Pagination onNavigate={changePage} currentPage={page} numberOfPages={totalPages} hideWhenSinglePage={true} />\n        </HorizontalGroup>\n      </div>\n      {Boolean(userToRemove) && (\n        <ConfirmModal\n          body={`Are you sure you want to delete user ${userToRemove?.login}?`}\n          confirmText=\"Delete\"\n          title=\"Delete\"\n          onDismiss={() => {\n            setUserToRemove(null);\n          }}\n          isOpen={true}\n          onConfirm={() => {\n            if (!userToRemove) {\n              return;\n            }\n            onRemoveUser(userToRemove);\n            setUserToRemove(null);\n          }}\n        />\n      )}\n    </VerticalGroup>\n  );\n};\n\nconst InfoCell = ({ row: { original } }: Cell) => {\n  const styles = useStyles2(getStyles);\n  const basicRoleDisabled = getBasicRoleDisabled(original);\n  return (\n    basicRoleDisabled && (\n      <div className={styles.row}>\n        <Tooltip content={disabledRoleMessage}>\n          <Icon name=\"question-circle\" className={styles.icon} />\n        </Tooltip>\n      </div>\n    )\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  row: css({\n    display: 'flex',\n    alignItems: 'center',\n  }),\n  icon: css({\n    marginLeft: theme.spacing(1),\n  }),\n  // Enable RolePicker overflow\n  wrapper: css({\n    display: 'flex',\n    flexDirection: 'column',\n    overflowX: 'auto',\n    overflowY: 'hidden',\n    minHeight: '100vh',\n    width: '100%',\n    '& > div': {\n      overflowX: 'unset',\n      marginBottom: theme.spacing(2),\n    },\n  }),\n});\n"],"names":["perPage","getOrg","orgId","getOrgUsers","page","accessControl","getUsersRoles","users","userIds","u","roles","updateOrgUserRole","orgUser","removeOrgUser","updateOrgName","name","match","canWriteOrg","canReadUsers","setUsers","setPage","totalPages","setTotalPages","orgState","fetchOrg","useAsyncFn","fetchOrgUsers","result","onUpdateOrgName","renderMissingPermissionMessage","Alert","onPageChange","toPage","onRemoveUser","onRoleChange","role","pageNav","Page","Legend","Form","values","register","errors","Field","Input","Button","OrgUsersTable","disabledRoleMessage","getBasicRoleDisabled","user","basicRoleDisabled","selectors","fetchData","changePage","rolesLoading","userToRemove","setUserToRemove","roleOptions","setRoleOptions","styles","getStyles","fetchOptions","options","columns","value","a","b","original","newRole","InfoCell","theme"],"sourceRoot":""}