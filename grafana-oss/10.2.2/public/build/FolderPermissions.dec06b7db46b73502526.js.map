{"version":3,"file":"FolderPermissions.dec06b7db46b73502526.js","mappings":"6QAeA,SAASA,EAAgBC,EAAmBC,EAAmB,CAC7D,MAAMC,EAAMD,EAAM,MAAM,OAAO,IAC/B,MAAO,CACL,IAAAC,EACA,WAAS,MAAYF,EAAM,SAAU,sBAAsBE,OAAO,MAAc,CAAC,CAAC,CACpF,CACF,CAEA,MAAMC,EAAqB,CACzB,eAAc,IAChB,EAEMC,KAAY,WAAQL,EAAiBI,CAAkB,EAGhDE,EAAiC,CAAC,CAAE,IAAAH,EAAK,eAAAI,EAAgB,QAAAC,CAAQ,IAAa,IACzF,aAAU,IAAM,CACdD,EAAeJ,CAAG,CACpB,EAAG,CAACI,EAAgBJ,CAAG,CAAC,EAExB,MAAMM,EAAoB,KAAW,cAAc,sBAAoB,uBAAuB,EAE9F,OACE,gBAAC,IAAI,CAAC,MAAM,oBAAoB,QAASD,EAAQ,MAC/C,gBAAC,IAAK,SAAL,KACC,gBAAC,IAAW,CAAC,SAAS,UAAU,WAAYL,EAAK,kBAAAM,CAAA,CAAsC,CACzF,CACF,CAEJ,EAEA,EAAeJ,EAAUC,CAA8B,C","sources":["webpack://grafana/./public/app/features/folders/AccessControlFolderPermissions.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { Permissions } from 'app/core/components/AccessControl';\nimport { Page } from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AccessControlAction, StoreState } from 'app/types';\n\nimport { getFolderByUid } from './state/actions';\nimport { getLoadingNav } from './state/navModel';\n\ninterface RouteProps extends GrafanaRouteComponentProps<{ uid: string }> {}\n\nfunction mapStateToProps(state: StoreState, props: RouteProps) {\n  const uid = props.match.params.uid;\n  return {\n    uid: uid,\n    pageNav: getNavModel(state.navIndex, `folder-permissions-${uid}`, getLoadingNav(1)),\n  };\n}\n\nconst mapDispatchToProps = {\n  getFolderByUid,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport type Props = ConnectedProps<typeof connector>;\n\nexport const AccessControlFolderPermissions = ({ uid, getFolderByUid, pageNav }: Props) => {\n  useEffect(() => {\n    getFolderByUid(uid);\n  }, [getFolderByUid, uid]);\n\n  const canSetPermissions = contextSrv.hasPermission(AccessControlAction.FoldersPermissionsWrite);\n\n  return (\n    <Page navId=\"dashboards/browse\" pageNav={pageNav.main}>\n      <Page.Contents>\n        <Permissions resource=\"folders\" resourceId={uid} canSetPermissions={canSetPermissions} />\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default connector(AccessControlFolderPermissions);\n"],"names":["mapStateToProps","state","props","uid","mapDispatchToProps","connector","AccessControlFolderPermissions","getFolderByUid","pageNav","canSetPermissions"],"sourceRoot":""}