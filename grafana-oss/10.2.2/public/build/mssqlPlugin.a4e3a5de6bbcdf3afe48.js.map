{"version":3,"file":"mssqlPlugin.a4e3a5de6bbcdf3afe48.js","mappings":"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","sources":["webpack://grafana/./public/app/features/plugins/sql/components/configuration/ConnectionLimits.tsx","webpack://grafana/./public/app/features/plugins/sql/components/configuration/useMigrateDatabaseFields.ts","webpack://grafana/./public/app/plugins/datasource/mssql/CheatSheet.tsx","webpack://grafana/./public/app/plugins/datasource/mssql/types.ts","webpack://grafana/./public/app/plugins/datasource/mssql/azureauth/AzureCredentials.ts","webpack://grafana/./public/app/plugins/datasource/mssql/azureauth/AzureCredentialsConfig.ts","webpack://grafana/./public/app/plugins/datasource/mssql/azureauth/AzureCredentialsForm.tsx","webpack://grafana/./public/app/plugins/datasource/mssql/azureauth/AzureAuthSettings.tsx","webpack://grafana/./public/app/plugins/datasource/mssql/configuration/ConfigurationEditor.tsx","webpack://grafana/./public/app/plugins/datasource/mssql/MSSqlMetaQuery.ts","webpack://grafana/./public/app/plugins/datasource/mssql/MSSqlQueryModel.ts","webpack://grafana/./public/app/plugins/datasource/mssql/sqlCompletionProvider.ts","webpack://grafana/./public/app/plugins/datasource/mssql/sqlUtil.ts","webpack://grafana/./public/app/plugins/datasource/mssql/datasource.ts","webpack://grafana/./public/app/plugins/datasource/mssql/module.ts"],"sourcesContent":["import React from 'react';\n\nimport { DataSourceSettings } from '@grafana/data';\nimport { ConfigSubSection, Stack } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { Field, Icon, InlineLabel, Input, Label, Switch, Tooltip } from '@grafana/ui';\n\nimport { SQLConnectionLimits, SQLOptions } from '../../types';\n\ninterface Props<T> {\n  onOptionsChange: Function;\n  options: DataSourceSettings<SQLOptions>;\n}\n\nfunction toNumber(text: string): number {\n  if (text.trim() === '') {\n    // calling `Number('')` returns zero,\n    // so we have to handle this case\n    return NaN;\n  }\n\n  return Number(text);\n}\n\nexport const ConnectionLimits = <T extends SQLConnectionLimits>(props: Props<T>) => {\n  const { onOptionsChange, options } = props;\n  const jsonData = options.jsonData;\n  const autoIdle = jsonData.maxIdleConnsAuto !== undefined ? jsonData.maxIdleConnsAuto : false;\n\n  // Update JSON data with new values\n  const updateJsonData = (values: {}) => {\n    const newOpts = {\n      ...options,\n      jsonData: {\n        ...jsonData,\n        ...values,\n      },\n    };\n\n    return onOptionsChange(newOpts);\n  };\n\n  // For the case of idle connections and connection lifetime\n  // use a shared function to update respective properties\n  const onJSONDataNumberChanged = (property: keyof SQLConnectionLimits) => {\n    return (number?: number) => {\n      updateJsonData({ [property]: number });\n    };\n  };\n\n  // When the maximum number of connections is changed\n  // see if we have the automatic idle option enabled\n  const onMaxConnectionsChanged = (number?: number) => {\n    if (autoIdle && number) {\n      updateJsonData({\n        maxOpenConns: number,\n        maxIdleConns: number,\n      });\n    } else {\n      updateJsonData({\n        maxOpenConns: number,\n      });\n    }\n  };\n\n  // Update auto idle setting when control is toggled\n  // and set minimum idle connections if automatic\n  // is selected\n  const onConnectionIdleAutoChanged = () => {\n    let idleConns = undefined;\n    let maxConns = undefined;\n\n    // If the maximum number of open connections is undefined\n    // and we're setting auto idle then set the default amount\n    // otherwise take the numeric amount and get the value from that\n    if (!autoIdle) {\n      if (jsonData.maxOpenConns !== undefined) {\n        maxConns = jsonData.maxOpenConns;\n        idleConns = jsonData.maxOpenConns;\n      }\n    } else {\n      maxConns = jsonData.maxOpenConns;\n      idleConns = jsonData.maxIdleConns;\n    }\n\n    updateJsonData({\n      maxIdleConnsAuto: !autoIdle,\n      maxIdleConns: idleConns,\n      maxOpenConns: maxConns,\n    });\n  };\n\n  const labelWidth = 40;\n\n  return (\n    <ConfigSubSection title=\"Connection limits\">\n      <Field\n        label={\n          <Label>\n            <Stack gap={0.5}>\n              <span>Max open</span>\n              <Tooltip\n                content={\n                  <span>\n                    The maximum number of open connections to the database. If <i>Max idle connections</i> is greater\n                    than 0 and the <i>Max open connections</i> is less than <i>Max idle connections</i>, then\n                    <i>Max idle connections</i> will be reduced to match the <i>Max open connections</i> limit. If set\n                    to 0, there is no limit on the number of open connections.\n                  </span>\n                }\n              >\n                <Icon name=\"info-circle\" size=\"sm\" />\n              </Tooltip>\n            </Stack>\n          </Label>\n        }\n      >\n        <Input\n          type=\"number\"\n          placeholder=\"unlimited\"\n          defaultValue={jsonData.maxOpenConns}\n          onChange={(e) => {\n            const newVal = toNumber(e.currentTarget.value);\n            if (!Number.isNaN(newVal)) {\n              onMaxConnectionsChanged(newVal);\n            }\n          }}\n          width={labelWidth}\n        />\n      </Field>\n\n      <Field\n        label={\n          <Label>\n            <Stack gap={0.5}>\n              <span>Auto Max Idle</span>\n              <Tooltip\n                content={\n                  <span>\n                    If enabled, automatically set the number of <i>Maximum idle connections</i> to the same value as\n                    <i> Max open connections</i>. If the number of maximum open connections is not set it will be set to\n                    the default ({config.sqlConnectionLimits.maxIdleConns}).\n                  </span>\n                }\n              >\n                <Icon name=\"info-circle\" size=\"sm\" />\n              </Tooltip>\n            </Stack>\n          </Label>\n        }\n      >\n        <Switch value={autoIdle} onChange={onConnectionIdleAutoChanged} />\n      </Field>\n\n      <Field\n        label={\n          <Label>\n            <Stack gap={0.5}>\n              <span>Max idle</span>\n              <Tooltip\n                content={\n                  <span>\n                    The maximum number of connections in the idle connection pool.If <i>Max open connections</i> is\n                    greater than 0 but less than the <i>Max idle connections</i>, then the <i>Max idle connections</i>{' '}\n                    will be reduced to match the <i>Max open connections</i> limit. If set to 0, no idle connections are\n                    retained.\n                  </span>\n                }\n              >\n                <Icon name=\"info-circle\" size=\"sm\" />\n              </Tooltip>\n            </Stack>\n          </Label>\n        }\n      >\n        {autoIdle ? (\n          <InlineLabel width={labelWidth}>{options.jsonData.maxIdleConns}</InlineLabel>\n        ) : (\n          <Input\n            type=\"number\"\n            placeholder=\"2\"\n            defaultValue={jsonData.maxIdleConns}\n            onChange={(e) => {\n              const newVal = toNumber(e.currentTarget.value);\n              if (!Number.isNaN(newVal)) {\n                onJSONDataNumberChanged('maxIdleConns')(newVal);\n              }\n            }}\n            width={labelWidth}\n            disabled={autoIdle}\n          />\n        )}\n      </Field>\n\n      <Field\n        label={\n          <Label>\n            <Stack gap={0.5}>\n              <span>Max lifetime</span>\n              <Tooltip\n                content={\n                  <span>\n                    The maximum amount of time in seconds a connection may be reused. If set to 0, connections are\n                    reused forever.\n                  </span>\n                }\n              >\n                <Icon name=\"info-circle\" size=\"sm\" />\n              </Tooltip>\n            </Stack>\n          </Label>\n        }\n      >\n        <Input\n          type=\"number\"\n          placeholder=\"14400\"\n          defaultValue={jsonData.connMaxLifetime}\n          onChange={(e) => {\n            const newVal = toNumber(e.currentTarget.value);\n            if (!Number.isNaN(newVal)) {\n              onJSONDataNumberChanged('connMaxLifetime')(newVal);\n            }\n          }}\n          width={labelWidth}\n        />\n      </Field>\n    </ConfigSubSection>\n  );\n};\n","import { useEffect } from 'react';\n\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { logDebug, config } from '@grafana/runtime';\n\nimport { SQLOptions } from '../../types';\n\n/**\n * 1. Moves the database field from the options object to jsonData.database and empties the database field.\n * 2. If max open connections, max idle connections, and auto idle are all undefined set these to default values.\n */\nexport function useMigrateDatabaseFields<T extends SQLOptions, S = {}>({\n  onOptionsChange,\n  options,\n}: DataSourcePluginOptionsEditorProps<T, S>) {\n  useEffect(() => {\n    const jsonData = options.jsonData;\n    let newOptions = { ...options };\n    let optionsUpdated = false;\n\n    // Migrate the database field from the column into the jsonData object\n    if (options.database) {\n      logDebug(`Migrating from options.database with value ${options.database} for ${options.name}`);\n      newOptions.database = '';\n      newOptions.jsonData = { ...jsonData, database: options.database };\n      optionsUpdated = true;\n    }\n\n    // Set default values for max open connections, max idle connection,\n    // and auto idle if they're all undefined\n    if (\n      jsonData.maxOpenConns === undefined &&\n      jsonData.maxIdleConns === undefined &&\n      jsonData.maxIdleConnsAuto === undefined\n    ) {\n      const { maxOpenConns, maxIdleConns } = config.sqlConnectionLimits;\n\n      logDebug(\n        `Setting default max open connections to ${maxOpenConns} and setting max idle connection to ${maxIdleConns}`\n      );\n\n      // Spread from the jsonData in new options in case\n      // the database field was migrated as well\n      newOptions.jsonData = {\n        ...newOptions.jsonData,\n        maxOpenConns: maxOpenConns,\n        maxIdleConns: maxIdleConns,\n        maxIdleConnsAuto: true,\n      };\n\n      // Make sure we issue an update if options changed\n      optionsUpdated = true;\n    }\n\n    // If the maximum connection lifetime hasn't been\n    // otherwise set fill in with the default from configuration\n    if (jsonData.connMaxLifetime === undefined) {\n      const { connMaxLifetime } = config.sqlConnectionLimits;\n\n      // Spread new options and add our value\n      newOptions.jsonData = {\n        ...newOptions.jsonData,\n        connMaxLifetime: connMaxLifetime,\n      };\n\n      // Note that we've updated the options\n      optionsUpdated = true;\n    }\n\n    // Only issue an update if we changed options\n    if (optionsUpdated) {\n      onOptionsChange(newOptions);\n    }\n  }, [onOptionsChange, options]);\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nexport function CheatSheet() {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div>\n      <h2>MSSQL cheat sheet</h2>\n      Time series:\n      <ul className={styles.ulPadding}>\n        <li>\n          return column named time (in UTC), as a unix time stamp or any sql native date data type. You can use the\n          macros below.\n        </li>\n        <li>any other columns returned will be the time point values.</li>\n      </ul>\n      Optional:\n      <ul className={styles.ulPadding}>\n        <li>\n          return column named <i>metric</i> to represent the series name.\n        </li>\n        <li>If multiple value columns are returned the metric column is used as prefix.</li>\n        <li>If no column named metric is found the column name of the value column is used as series name</li>\n      </ul>\n      <p>Resultsets of time series queries need to be sorted by time.</p>\n      Table:\n      <ul className={styles.ulPadding}>\n        <li>return any set of columns</li>\n      </ul>\n      Macros:\n      <ul className={styles.ulPadding}>\n        <li>$__time(column) -&gt; column AS time</li>\n        <li>$__timeEpoch(column) -&gt; DATEDIFF(second, &apos;1970-01-01&apos;, column) AS time</li>\n        <li>\n          $__timeFilter(column) -&gt; column BETWEEN &apos;2017-04-21T05:01:17Z&apos; AND\n          &apos;2017-04-21T05:01:17Z&apos;\n        </li>\n        <li>$__unixEpochFilter(column) -&gt; column &gt;= 1492750877 AND column &lt;= 1492750877</li>\n        <li>\n          $__unixEpochNanoFilter(column) -&gt; column &gt;= 1494410783152415214 AND column &lt;= 1494497183142514872\n        </li>\n        <li>\n          $__timeGroup(column, &apos;5m&apos;[, fillvalue]) -&gt; CAST(ROUND(DATEDIFF(second, &apos;1970-01-01&apos;,\n          column)/300.0, 0) as bigint)*300 by setting fillvalue grafana will fill in missing values according to the\n          interval fillvalue can be either a literal value, NULL or previous; previous will fill in the previous seen\n          value or NULL if none has been seen yet\n        </li>\n        <li>\n          $__timeGroupAlias(column, &apos;5m&apos;[, fillvalue]) -&gt; CAST(ROUND(DATEDIFF(second,\n          &apos;1970-01-01&apos;, column)/300.0, 0) as bigint)*300 AS [time]\n        </li>\n        <li>$__unixEpochGroup(column,&apos;5m&apos;) -&gt; FLOOR(column/300)*300</li>\n        <li>$__unixEpochGroupAlias(column,&apos;5m&apos;) -&gt; FLOOR(column/300)*300 AS [time]</li>\n      </ul>\n      <p>Example of group by and order by with $__timeGroup:</p>\n      <pre>\n        <code>\n          SELECT $__timeGroup(date_time_col, &apos;1h&apos;) AS time, sum(value) as value <br />\n          FROM yourtable\n          <br />\n          GROUP BY $__timeGroup(date_time_col, &apos;1h&apos;)\n          <br />\n          ORDER BY 1\n          <br />\n        </code>\n      </pre>\n      Or build your own conditionals using these macros which just return the values:\n      <ul className={styles.ulPadding}>\n        <li>$__timeFrom() -&gt; &apos;2017-04-21T05:01:17Z&apos;</li>\n        <li>$__timeTo() -&gt; &apos;2017-04-21T05:01:17Z&apos;</li>\n        <li>$__unixEpochFrom() -&gt; 1492750877</li>\n        <li>$__unixEpochTo() -&gt; 1492750877</li>\n        <li>$__unixEpochNanoFrom() -&gt; 1494410783152415214</li>\n        <li>$__unixEpochNanoTo() -&gt; 1494497183142514872</li>\n      </ul>\n    </div>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    ulPadding: css({\n      margin: theme.spacing(1, 0),\n      paddingLeft: theme.spacing(5),\n    }),\n  };\n}\n","import { DataSourceJsonData } from '@grafana/data';\nimport { HttpSettingsBaseProps } from '@grafana/ui/src/components/DataSourceSettings/types';\nimport { SQLOptions } from 'app/features/plugins/sql/types';\n\nexport enum MSSQLAuthenticationType {\n  sqlAuth = 'SQL Server Authentication',\n  windowsAuth = 'Windows Authentication',\n  azureAuth = 'Azure AD Authentication',\n}\n\nexport enum MSSQLEncryptOptions {\n  disable = 'disable',\n  false = 'false',\n  true = 'true',\n}\n\nexport enum AzureCloud {\n  Public = 'AzureCloud',\n  None = '',\n}\n\nexport type ConcealedSecretType = symbol;\n\nexport enum AzureAuthType {\n  MSI = 'msi',\n  CLIENT_SECRET = 'clientsecret',\n}\n\nexport interface AzureCredentialsType {\n  authType: AzureAuthType;\n  azureCloud?: string;\n  tenantId?: string;\n  clientId?: string;\n  clientSecret?: string | ConcealedSecretType;\n}\n\nexport interface MssqlOptions extends SQLOptions {\n  authenticationType?: MSSQLAuthenticationType;\n  encrypt?: MSSQLEncryptOptions;\n  sslRootCertFile?: string;\n  serverName?: string;\n  connectionTimeout?: number;\n  azureCredentials?: AzureCredentialsType;\n}\n\nexport interface MssqlSecureOptions {\n  password?: string;\n}\n\nexport type AzureAuthJSONDataType = DataSourceJsonData & {\n  azureCredentials: AzureCredentialsType;\n};\n\nexport type AzureAuthSecureJSONDataType = {\n  azureClientSecret: undefined | string | ConcealedSecretType;\n};\n\nexport type AzureAuthConfigType = {\n  azureAuthIsSupported: boolean;\n  azureAuthSettingsUI: (props: HttpSettingsBaseProps) => JSX.Element;\n};\n","import { SelectableValue } from '@grafana/data';\n\nimport { AzureCredentialsType, AzureAuthType } from '../types';\n\nexport enum AzureCloud {\n  Public = 'AzureCloud',\n  None = '',\n}\n\nexport const KnownAzureClouds: Array<SelectableValue<AzureCloud>> = [{ value: AzureCloud.Public, label: 'Azure' }];\n\nexport function isCredentialsComplete(credentials: AzureCredentialsType): boolean {\n  switch (credentials.authType) {\n    case AzureAuthType.MSI:\n      return true;\n    case AzureAuthType.CLIENT_SECRET:\n      return !!(credentials.azureCloud && credentials.tenantId && credentials.clientId && credentials.clientSecret);\n  }\n}\n","import { DataSourceSettings } from '@grafana/data';\nimport { GrafanaBootConfig } from '@grafana/runtime';\n\nimport {\n  AzureCloud,\n  AzureCredentialsType,\n  ConcealedSecretType,\n  AzureAuthSecureJSONDataType,\n  AzureAuthJSONDataType,\n  AzureAuthType,\n} from '../types';\n\nexport const getDefaultCredentials = (managedIdentityEnabled: boolean, cloud: string): AzureCredentialsType => {\n  if (managedIdentityEnabled) {\n    return { authType: AzureAuthType.MSI };\n  } else {\n    return { authType: AzureAuthType.CLIENT_SECRET, azureCloud: cloud };\n  }\n};\n\nexport const getSecret = (\n  clientSecretStoredServerSide: boolean,\n  clientSecret: string | symbol | undefined\n): undefined | string | ConcealedSecretType => {\n  const concealedSecret: ConcealedSecretType = Symbol('Concealed client secret');\n  if (clientSecretStoredServerSide) {\n    // The secret is concealed server side, so return the symbol\n    return concealedSecret;\n  } else {\n    return typeof clientSecret === 'string' && clientSecret.length > 0 ? clientSecret : undefined;\n  }\n};\n\nexport const getCredentials = (\n  dsSettings: DataSourceSettings<AzureAuthJSONDataType, AzureAuthSecureJSONDataType>,\n  bootConfig: GrafanaBootConfig\n): AzureCredentialsType => {\n  // JSON data\n  const credentials = dsSettings.jsonData?.azureCredentials;\n\n  // Secure JSON data/fields\n  const clientSecretStoredServerSide = dsSettings.secureJsonFields?.azureClientSecret;\n  const clientSecret = dsSettings.secureJsonData?.azureClientSecret;\n\n  // BootConfig data\n  const managedIdentityEnabled = !!bootConfig.azure?.managedIdentityEnabled;\n  const cloud = bootConfig.azure?.cloud || AzureCloud.Public;\n\n  // If no credentials saved, then return empty credentials\n  // of type based on whether the managed identity enabled\n  if (!credentials) {\n    return getDefaultCredentials(managedIdentityEnabled, cloud);\n  }\n\n  switch (credentials.authType) {\n    case AzureAuthType.MSI:\n      if (managedIdentityEnabled) {\n        return {\n          authType: AzureAuthType.MSI,\n        };\n      } else {\n        // If authentication type is managed identity but managed identities were disabled in Grafana config,\n        // then we should fallback to an empty app registration (client secret) configuration\n        return {\n          authType: AzureAuthType.CLIENT_SECRET,\n          azureCloud: cloud,\n        };\n      }\n    case AzureAuthType.CLIENT_SECRET:\n      return {\n        authType: AzureAuthType.CLIENT_SECRET,\n        azureCloud: credentials.azureCloud || cloud,\n        tenantId: credentials.tenantId,\n        clientId: credentials.clientId,\n        clientSecret: getSecret(clientSecretStoredServerSide, clientSecret),\n      };\n  }\n};\n\nexport const updateCredentials = (\n  dsSettings: DataSourceSettings<AzureAuthJSONDataType>,\n  bootConfig: GrafanaBootConfig,\n  credentials: AzureCredentialsType\n): DataSourceSettings<AzureAuthJSONDataType> => {\n  // BootConfig data\n  const managedIdentityEnabled = !!bootConfig.azure?.managedIdentityEnabled;\n  const cloud = bootConfig.azure?.cloud || AzureCloud.Public;\n\n  switch (credentials.authType) {\n    case AzureAuthType.MSI:\n      if (!managedIdentityEnabled) {\n        throw new Error('Managed Identity authentication is not enabled in Grafana config.');\n      }\n\n      dsSettings = {\n        ...dsSettings,\n        jsonData: {\n          ...dsSettings.jsonData,\n          azureCredentials: {\n            authType: AzureAuthType.MSI,\n          },\n        },\n      };\n\n      return dsSettings;\n\n    case AzureAuthType.CLIENT_SECRET:\n      dsSettings = {\n        ...dsSettings,\n        jsonData: {\n          ...dsSettings.jsonData,\n          azureCredentials: {\n            authType: AzureAuthType.CLIENT_SECRET,\n            azureCloud: credentials.azureCloud || cloud,\n            tenantId: credentials.tenantId,\n            clientId: credentials.clientId,\n          },\n        },\n        secureJsonData: {\n          ...dsSettings.secureJsonData,\n          azureClientSecret:\n            typeof credentials.clientSecret === 'string' && credentials.clientSecret.length > 0\n              ? credentials.clientSecret\n              : undefined,\n        },\n        secureJsonFields: {\n          ...dsSettings.secureJsonFields,\n          azureClientSecret: typeof credentials.clientSecret === 'symbol',\n        },\n      };\n\n      return dsSettings;\n  }\n};\n","import React, { ChangeEvent } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Button, Field, Select, Input } from '@grafana/ui/src/components';\n\nimport { AzureCredentialsType, AzureAuthType } from '../types';\n\nexport interface Props {\n  managedIdentityEnabled: boolean;\n  credentials: AzureCredentialsType;\n  azureCloudOptions?: SelectableValue[];\n  onCredentialsChange: (updatedCredentials: AzureCredentialsType) => void;\n  disabled?: boolean;\n}\n\nconst authTypeOptions: Array<SelectableValue<AzureAuthType>> = [\n  {\n    value: AzureAuthType.MSI,\n    label: 'Managed Identity',\n  },\n  {\n    value: AzureAuthType.CLIENT_SECRET,\n    label: 'App Registration',\n  },\n];\n\nexport const AzureCredentialsForm = (props: Props) => {\n  const { managedIdentityEnabled, credentials, azureCloudOptions, onCredentialsChange, disabled } = props;\n\n  const onAuthTypeChange = (selected: SelectableValue<AzureAuthType>) => {\n    if (onCredentialsChange) {\n      const updated: AzureCredentialsType = {\n        ...credentials,\n        authType: selected.value || AzureAuthType.MSI,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onInputChange = ({ property, value }: { property: keyof AzureCredentialsType; value: string }) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      const updated: AzureCredentialsType = {\n        ...credentials,\n        [property]: value,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  return (\n    <div>\n      {managedIdentityEnabled && (\n        <Field\n          label=\"Authentication\"\n          description=\"Choose the type of authentication to Azure services\"\n          htmlFor=\"authentication-type\"\n        >\n          <Select\n            width={20}\n            value={authTypeOptions.find((opt) => opt.value === credentials.authType)}\n            options={authTypeOptions}\n            onChange={onAuthTypeChange}\n            disabled={disabled}\n          />\n        </Field>\n      )}\n      {credentials.authType === 'clientsecret' && (\n        <>\n          {azureCloudOptions && (\n            <Field label=\"Azure Cloud\" htmlFor=\"azure-cloud-type\" disabled={disabled}>\n              <Select\n                value={azureCloudOptions.find((opt) => opt.value === credentials.azureCloud)}\n                options={azureCloudOptions}\n                onChange={(selected: SelectableValue<AzureAuthType>) => {\n                  const value = selected.value || '';\n                  onInputChange({ property: 'azureCloud', value });\n                }}\n                isDisabled={disabled}\n                inputId=\"azure-cloud-type\"\n                aria-label=\"Azure Cloud\"\n                width={20}\n              />\n            </Field>\n          )}\n          <Field\n            label=\"Directory (tenant) ID\"\n            required\n            htmlFor=\"tenant-id\"\n            invalid={!credentials.tenantId}\n            error={'Tenant ID is required'}\n          >\n            <Input\n              width={45}\n              placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n              value={credentials.tenantId || ''}\n              onChange={(event: ChangeEvent<HTMLInputElement>) => {\n                const value = event.target.value;\n                onInputChange({ property: 'tenantId', value });\n              }}\n              disabled={disabled}\n              aria-label=\"Tenant ID\"\n            />\n          </Field>\n          <Field\n            label=\"Application (client) ID\"\n            required\n            htmlFor=\"client-id\"\n            invalid={!credentials.clientId}\n            error={'Client ID is required'}\n          >\n            <Input\n              width={45}\n              placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n              value={credentials.clientId || ''}\n              onChange={(event: ChangeEvent<HTMLInputElement>) => {\n                const value = event.target.value;\n                onInputChange({ property: 'clientId', value });\n              }}\n              disabled={disabled}\n              aria-label=\"Client ID\"\n            />\n          </Field>\n          {!disabled &&\n            (typeof credentials.clientSecret === 'symbol' ? (\n              <Field label=\"Client Secret\" htmlFor=\"client-secret\" required>\n                <div className=\"width-30\" style={{ display: 'flex', gap: '4px' }}>\n                  <Input\n                    aria-label=\"Client Secret\"\n                    placeholder=\"configured\"\n                    disabled={true}\n                    data-testid={'client-secret'}\n                    width={45}\n                  />\n                  <Button\n                    variant=\"secondary\"\n                    type=\"button\"\n                    onClick={() => {\n                      onInputChange({ property: 'clientSecret', value: '' });\n                    }}\n                    disabled={disabled}\n                  >\n                    Reset\n                  </Button>\n                </div>\n              </Field>\n            ) : (\n              <Field\n                label=\"Client Secret\"\n                required\n                htmlFor=\"client-secret\"\n                invalid={!credentials.clientSecret}\n                error={'Client secret is required'}\n              >\n                <Input\n                  width={45}\n                  aria-label=\"Client Secret\"\n                  placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                  value={credentials.clientSecret || ''}\n                  onChange={(event: ChangeEvent<HTMLInputElement>) => {\n                    const value = event.target.value;\n                    onInputChange({ property: 'clientSecret', value });\n                  }}\n                  id=\"client-secret\"\n                  disabled={disabled}\n                />\n              </Field>\n            ))}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default AzureCredentialsForm;\n","import React, { useMemo } from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { HttpSettingsBaseProps } from '@grafana/ui/src/components/DataSourceSettings/types';\n\nimport { AzureCredentialsType } from '../types';\n\nimport { KnownAzureClouds } from './AzureCredentials';\nimport { getCredentials, updateCredentials } from './AzureCredentialsConfig';\nimport { AzureCredentialsForm } from './AzureCredentialsForm';\n\nexport const AzureAuthSettings = (props: HttpSettingsBaseProps) => {\n  const { dataSourceConfig: dsSettings, onChange } = props;\n  const managedIdentityEnabled = config.azure.managedIdentityEnabled;\n\n  const credentials = useMemo(() => getCredentials(dsSettings, config), [dsSettings]);\n\n  const onCredentialsChange = (credentials: AzureCredentialsType): void => {\n    onChange(updateCredentials(dsSettings, config, credentials));\n  };\n\n  return (\n    <AzureCredentialsForm\n      managedIdentityEnabled={managedIdentityEnabled}\n      credentials={credentials}\n      azureCloudOptions={KnownAzureClouds}\n      onCredentialsChange={onCredentialsChange}\n      disabled={dsSettings.readOnly}\n    />\n  );\n};\n\nexport default AzureAuthSettings;\n","import { css } from '@emotion/css';\nimport React, { SyntheticEvent } from 'react';\n\nimport {\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme2,\n  onUpdateDatasourceJsonDataOption,\n  onUpdateDatasourceSecureJsonDataOption,\n  SelectableValue,\n  updateDatasourcePluginJsonDataOption,\n  updateDatasourcePluginResetOption,\n} from '@grafana/data';\nimport { ConfigSection, ConfigSubSection, DataSourceDescription } from '@grafana/experimental';\nimport {\n  Alert,\n  FieldSet,\n  Input,\n  Link,\n  SecretInput,\n  Select,\n  useStyles2,\n  SecureSocksProxySettings,\n  Divider,\n  Field,\n  Switch,\n} from '@grafana/ui';\nimport { NumberInput } from 'app/core/components/OptionsUI/NumberInput';\nimport { config } from 'app/core/config';\nimport { ConnectionLimits } from 'app/features/plugins/sql/components/configuration/ConnectionLimits';\nimport { useMigrateDatabaseFields } from 'app/features/plugins/sql/components/configuration/useMigrateDatabaseFields';\n\nimport { AzureAuthSettings } from '../azureauth/AzureAuthSettings';\nimport {\n  MSSQLAuthenticationType,\n  MSSQLEncryptOptions,\n  MssqlOptions,\n  AzureAuthConfigType,\n  MssqlSecureOptions,\n} from '../types';\n\nconst LONG_WIDTH = 40;\n\nexport const ConfigurationEditor = (props: DataSourcePluginOptionsEditorProps<MssqlOptions, MssqlSecureOptions>) => {\n  useMigrateDatabaseFields(props);\n\n  const { options: dsSettings, onOptionsChange } = props;\n  const styles = useStyles2(getStyles);\n  const jsonData = dsSettings.jsonData;\n  const azureAuthIsSupported = config.azureAuthEnabled;\n\n  const azureAuthSettings: AzureAuthConfigType = {\n    azureAuthIsSupported,\n    azureAuthSettingsUI: AzureAuthSettings,\n  };\n\n  const onResetPassword = () => {\n    updateDatasourcePluginResetOption(props, 'password');\n  };\n\n  const onDSOptionChanged = (property: keyof MssqlOptions) => {\n    return (event: SyntheticEvent<HTMLInputElement>) => {\n      onOptionsChange({ ...dsSettings, ...{ [property]: event.currentTarget.value } });\n    };\n  };\n\n  const onSkipTLSVerifyChanged = (event: SyntheticEvent<HTMLInputElement>) => {\n    updateDatasourcePluginJsonDataOption(props, 'tlsSkipVerify', event.currentTarget.checked);\n  };\n\n  const onEncryptChanged = (value: SelectableValue) => {\n    updateDatasourcePluginJsonDataOption(props, 'encrypt', value.value);\n  };\n\n  const onAuthenticationMethodChanged = (value: SelectableValue) => {\n    onOptionsChange({\n      ...dsSettings,\n      ...{\n        jsonData: { ...jsonData, ...{ authenticationType: value.value }, azureCredentials: undefined },\n        secureJsonData: { ...dsSettings.secureJsonData, ...{ password: '' } },\n        secureJsonFields: { ...dsSettings.secureJsonFields, ...{ password: false } },\n        user: '',\n      },\n    });\n  };\n\n  const onConnectionTimeoutChanged = (connectionTimeout?: number) => {\n    updateDatasourcePluginJsonDataOption(props, 'connectionTimeout', connectionTimeout ?? 0);\n  };\n\n  const buildAuthenticationOptions = (): Array<SelectableValue<MSSQLAuthenticationType>> => {\n    const basicAuthenticationOptions: Array<SelectableValue<MSSQLAuthenticationType>> = [\n      { value: MSSQLAuthenticationType.sqlAuth, label: 'SQL Server Authentication' },\n      { value: MSSQLAuthenticationType.windowsAuth, label: 'Windows Authentication' },\n    ];\n\n    if (azureAuthIsSupported) {\n      return [\n        ...basicAuthenticationOptions,\n        { value: MSSQLAuthenticationType.azureAuth, label: 'Azure AD Authentication' },\n      ];\n    }\n\n    return basicAuthenticationOptions;\n  };\n\n  const encryptOptions: Array<SelectableValue<string>> = [\n    { value: MSSQLEncryptOptions.disable, label: 'disable' },\n    { value: MSSQLEncryptOptions.false, label: 'false' },\n    { value: MSSQLEncryptOptions.true, label: 'true' },\n  ];\n\n  return (\n    <>\n      <DataSourceDescription\n        dataSourceName=\"Microsoft SQL Server\"\n        docsLink=\"https://grafana.com/docs/grafana/latest/datasources/mssql/\"\n        hasRequiredFields\n      />\n      <Alert title=\"User Permission\" severity=\"info\">\n        The database user should only be granted SELECT permissions on the specified database and tables you want to\n        query. Grafana does not validate that queries are safe so queries can contain any SQL statement. For example,\n        statements like <code>USE otherdb;</code> and <code>DROP TABLE user;</code> would be executed. To protect\n        against this we <em>highly</em> recommend you create a specific MS SQL user with restricted permissions. Check\n        out the{' '}\n        <Link rel=\"noreferrer\" target=\"_blank\" href=\"http://docs.grafana.org/features/datasources/mssql/\">\n          Microsoft SQL Server Data Source Docs\n        </Link>{' '}\n        for more information.\n      </Alert>\n      <Divider />\n      <ConfigSection title=\"Connection\">\n        <Field label=\"Host\" required invalid={!dsSettings.url} error={'Host is required'}>\n          <Input\n            width={LONG_WIDTH}\n            name=\"host\"\n            type=\"text\"\n            value={dsSettings.url || ''}\n            placeholder=\"localhost:1433\"\n            onChange={onDSOptionChanged('url')}\n          />\n        </Field>\n        <Field label=\"Database\" required invalid={!jsonData.database} error={'Database is required'}>\n          <Input\n            width={LONG_WIDTH}\n            name=\"database\"\n            value={jsonData.database || ''}\n            placeholder=\"database name\"\n            onChange={onUpdateDatasourceJsonDataOption(props, 'database')}\n          />\n        </Field>\n      </ConfigSection>\n\n      <ConfigSection title=\"TLS/SSL Auth\">\n        <Field\n          htmlFor=\"encrypt\"\n          description={\n            <>\n              Determines whether or to which extent a secure SSL TCP/IP connection will be negotiated with the server.\n              <ul className={styles.ulPadding}>\n                <li>\n                  <i>disable</i> - Data sent between client and server is not encrypted.\n                </li>\n                <li>\n                  <i>false</i> - Data sent between client and server is not encrypted beyond the login packet. (default)\n                </li>\n                <li>\n                  <i>true</i> - Data sent between client and server is encrypted.\n                </li>\n              </ul>\n              If you&apos;re using an older version of Microsoft SQL Server like 2008 and 2008R2 you may need to disable\n              encryption to be able to connect.\n            </>\n          }\n          label=\"Encrypt\"\n        >\n          <Select\n            options={encryptOptions}\n            value={jsonData.encrypt || MSSQLEncryptOptions.false}\n            inputId=\"encrypt\"\n            onChange={onEncryptChanged}\n            width={LONG_WIDTH}\n          />\n        </Field>\n\n        {jsonData.encrypt === MSSQLEncryptOptions.true ? (\n          <>\n            <Field htmlFor=\"skipTlsVerify\" label=\"Skip TLS Verify\">\n              <Switch id=\"skipTlsVerify\" onChange={onSkipTLSVerifyChanged} value={jsonData.tlsSkipVerify || false} />\n            </Field>\n            {jsonData.tlsSkipVerify ? null : (\n              <>\n                <Field\n                  description={\n                    <span>\n                      Path to file containing the public key certificate of the CA that signed the SQL Server\n                      certificate. Needed when the server certificate is self signed.\n                    </span>\n                  }\n                  label=\"TLS/SSL Root Certificate\"\n                >\n                  <Input\n                    value={jsonData.sslRootCertFile || ''}\n                    onChange={onUpdateDatasourceJsonDataOption(props, 'sslRootCertFile')}\n                    placeholder=\"TLS/SSL root certificate file path\"\n                    width={LONG_WIDTH}\n                  />\n                </Field>\n                <Field label=\"Hostname in server certificate\">\n                  <Input\n                    placeholder=\"Common Name (CN) in server certificate\"\n                    value={jsonData.serverName || ''}\n                    onChange={onUpdateDatasourceJsonDataOption(props, 'serverName')}\n                    width={LONG_WIDTH}\n                  />\n                </Field>\n              </>\n            )}\n          </>\n        ) : null}\n      </ConfigSection>\n\n      <ConfigSection title=\"Authentication\">\n        <Field\n          label=\"Authentication Type\"\n          htmlFor=\"authenticationType\"\n          description={\n            <ul className={styles.ulPadding}>\n              <li>\n                <i>SQL Server Authentication</i> This is the default mechanism to connect to MS SQL Server. Enter the\n                SQL Server Authentication login or the Windows Authentication login in the DOMAIN\\User format.\n              </li>\n              <li>\n                <i>Windows Authentication</i> Windows Integrated Security - single sign on for users who are already\n                logged onto Windows and have enabled this option for MS SQL Server.\n              </li>\n              {azureAuthIsSupported && (\n                <li>\n                  <i>Azure Authentication</i> Securely authenticate and access Azure resources and applications using\n                  Azure AD credentials - Managed Service Identity and Client Secret Credentials are supported.\n                </li>\n              )}\n            </ul>\n          }\n        >\n          <Select\n            // Default to basic authentication of none is set\n            value={jsonData.authenticationType || MSSQLAuthenticationType.sqlAuth}\n            inputId=\"authenticationType\"\n            options={buildAuthenticationOptions()}\n            onChange={onAuthenticationMethodChanged}\n            width={LONG_WIDTH}\n          />\n        </Field>\n\n        {/* Basic SQL auth. Render if authType === MSSQLAuthenticationType.sqlAuth OR\n        if no authType exists, which will be the case when creating a new data source */}\n        {(jsonData.authenticationType === MSSQLAuthenticationType.sqlAuth || !jsonData.authenticationType) && (\n          <>\n            <Field label=\"Username\" required invalid={!dsSettings.user} error={'Username is required'}>\n              <Input\n                value={dsSettings.user || ''}\n                placeholder=\"user\"\n                onChange={onDSOptionChanged('user')}\n                width={LONG_WIDTH}\n              />\n            </Field>\n            <Field\n              label=\"Password\"\n              required\n              invalid={!dsSettings.secureJsonFields.password && !dsSettings.secureJsonData?.password}\n              error={'Password is required'}\n            >\n              <SecretInput\n                width={LONG_WIDTH}\n                placeholder=\"Password\"\n                isConfigured={dsSettings.secureJsonFields && dsSettings.secureJsonFields.password}\n                onReset={onResetPassword}\n                onChange={onUpdateDatasourceSecureJsonDataOption(props, 'password')}\n                required\n              />\n            </Field>\n          </>\n        )}\n\n        {azureAuthIsSupported && jsonData.authenticationType === MSSQLAuthenticationType.azureAuth && (\n          <FieldSet label=\"Azure Authentication Settings\">\n            <azureAuthSettings.azureAuthSettingsUI dataSourceConfig={dsSettings} onChange={onOptionsChange} />\n          </FieldSet>\n        )}\n      </ConfigSection>\n\n      <Divider />\n      <ConfigSection\n        title=\"Additional settings\"\n        description=\"Additional settings are optional settings that can be configured for more control over your data source. This includes connection limits, connection timeout, group-by time interval, and Secure Socks Proxy.\"\n        isCollapsible={true}\n        isInitiallyOpen={true}\n      >\n        <ConnectionLimits options={dsSettings} onOptionsChange={onOptionsChange} />\n\n        <ConfigSubSection title=\"Connection details\">\n          <Field\n            description={\n              <span>\n                A lower limit for the auto group by time interval. Recommended to be set to write frequency, for example\n                <code>1m</code> if your data is written every minute.\n              </span>\n            }\n            label=\"Min time interval\"\n          >\n            <Input\n              width={LONG_WIDTH}\n              placeholder=\"1m\"\n              value={jsonData.timeInterval || ''}\n              onChange={onUpdateDatasourceJsonDataOption(props, 'timeInterval')}\n            />\n          </Field>\n          <Field\n            description={\n              <span>\n                The number of seconds to wait before canceling the request when connecting to the database. The default\n                is <code>0</code>, meaning no timeout.\n              </span>\n            }\n            label=\"Connection timeout\"\n          >\n            <NumberInput\n              width={LONG_WIDTH}\n              placeholder=\"60\"\n              min={0}\n              value={jsonData.connectionTimeout}\n              onChange={onConnectionTimeoutChanged}\n            />\n          </Field>\n        </ConfigSubSection>\n        {config.secureSocksDSProxyEnabled && (\n          <SecureSocksProxySettings options={dsSettings} onOptionsChange={onOptionsChange} />\n        )}\n      </ConfigSection>\n    </>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    ulPadding: css({\n      margin: theme.spacing(1, 0),\n      paddingLeft: theme.spacing(5),\n    }),\n  };\n}\n","export function showDatabases() {\n  // Return only user defined databases\n  return `SELECT name FROM sys.databases WHERE name NOT IN ('master', 'tempdb', 'model', 'msdb');`;\n}\n\nexport function getSchemaAndName(database?: string) {\n  return `SELECT TABLE_SCHEMA + '.' + TABLE_NAME as schemaAndName\n    FROM [${database}].INFORMATION_SCHEMA.TABLES`;\n}\n\nexport function getSchema(database?: string, table?: string) {\n  return `\n   USE ${database}\n   SELECT COLUMN_NAME as 'column',DATA_TYPE as 'type'\n   FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='${table}';`;\n}\n","import { ScopedVars } from '@grafana/data';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { applyQueryDefaults } from 'app/features/plugins/sql/defaults';\nimport { SQLQuery, SqlQueryModel } from 'app/features/plugins/sql/types';\n\nexport class MSSqlQueryModel implements SqlQueryModel {\n  target: SQLQuery;\n  templateSrv?: TemplateSrv;\n  scopedVars?: ScopedVars;\n\n  constructor(target?: SQLQuery, templateSrv?: TemplateSrv, scopedVars?: ScopedVars) {\n    this.target = applyQueryDefaults(target || { refId: 'A' });\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n  }\n\n  quoteLiteral(value: string) {\n    return \"'\" + value.replace(/'/g, \"''\") + \"'\";\n  }\n}\n","import {\n  ColumnDefinition,\n  getStandardSQLCompletionProvider,\n  LanguageCompletionProvider,\n  LinkedToken,\n  TableDefinition,\n  TableIdentifier,\n  TokenType,\n} from '@grafana/experimental';\nimport { DB, SQLQuery } from 'app/features/plugins/sql/types';\n\ninterface CompletionProviderGetterArgs {\n  getColumns: React.MutableRefObject<(t: SQLQuery) => Promise<ColumnDefinition[]>>;\n  getTables: React.MutableRefObject<(d?: string) => Promise<TableDefinition[]>>;\n}\n\nexport const getSqlCompletionProvider: (args: CompletionProviderGetterArgs) => LanguageCompletionProvider =\n  ({ getColumns, getTables }) =>\n  (monaco, language) => ({\n    ...(language && getStandardSQLCompletionProvider(monaco, language)),\n    tables: {\n      resolve: async (identifier) => {\n        return await getTables.current(identifier?.table);\n      },\n      parseName: (token: LinkedToken | undefined | null) => {\n        if (!token) {\n          return { table: '' };\n        }\n\n        let processedToken = token;\n        let tablePath = processedToken.value;\n\n        while (processedToken.next && processedToken.next.type !== TokenType.Whitespace) {\n          tablePath += processedToken.next.value;\n          processedToken = processedToken.next;\n        }\n\n        if (processedToken.value.endsWith('.')) {\n          tablePath = processedToken.value.slice(0, processedToken.value.length - 1);\n        }\n\n        return { table: tablePath };\n      },\n    },\n\n    columns: {\n      resolve: async (t: TableIdentifier | undefined) => {\n        if (!t?.table) {\n          return [];\n        }\n        // TODO: Use schema instead of table\n        const [database, schema, tableName] = t.table.split('.');\n        return await getColumns.current({ table: `${schema}.${tableName}`, dataset: database, refId: 'A' });\n      },\n    },\n  });\n\nexport async function fetchColumns(db: DB, q: SQLQuery) {\n  const cols = await db.fields(q);\n  if (cols.length > 0) {\n    return cols.map((c) => {\n      return { name: c.value, type: c.value, description: c.value };\n    });\n  } else {\n    return [];\n  }\n}\n\nexport async function fetchTables(db: DB, dataset?: string) {\n  const tables = await db.lookup?.(dataset);\n  return tables || [];\n}\n","import { isEmpty } from 'lodash';\n\nimport { RAQBFieldTypes, SQLExpression, SQLQuery } from 'app/features/plugins/sql/types';\nimport { haveColumns } from 'app/features/plugins/sql/utils/sql.utils';\n\nexport function getIcon(type: string): string | undefined {\n  switch (type) {\n    case 'datetimeoffset':\n    case 'date':\n    case 'datetime2':\n    case 'smalldatetime':\n    case 'datetime':\n    case 'time':\n      return 'clock-nine';\n    case 'bit':\n      return 'toggle-off';\n    case 'tinyint':\n    case 'smallint':\n    case 'int':\n    case 'bigint':\n    case 'decimal':\n    case 'numeric':\n    case 'real':\n    case 'float':\n    case 'money':\n    case 'smallmoney':\n      return 'calculator-alt';\n    case 'char':\n    case 'varchar':\n    case 'text':\n    case 'nchar':\n    case 'nvarchar':\n    case 'ntext':\n    case 'binary':\n    case 'varbinary':\n    case 'image':\n      return 'text';\n    default:\n      return undefined;\n  }\n}\n\nexport function getRAQBType(type: string): RAQBFieldTypes {\n  switch (type) {\n    case 'datetimeoffset':\n    case 'datetime2':\n    case 'smalldatetime':\n    case 'datetime':\n      return 'datetime';\n    case 'time':\n      return 'time';\n    case 'date':\n      return 'date';\n    case 'bit':\n      return 'boolean';\n    case 'tinyint':\n    case 'smallint':\n    case 'int':\n    case 'bigint':\n    case 'decimal':\n    case 'numeric':\n    case 'real':\n    case 'float':\n    case 'money':\n    case 'smallmoney':\n      return 'number';\n    case 'char':\n    case 'varchar':\n    case 'text':\n    case 'nchar':\n    case 'nvarchar':\n    case 'ntext':\n    case 'binary':\n    case 'varbinary':\n    case 'image':\n      return 'text';\n    default:\n      return 'text';\n  }\n}\n\nexport function toRawSql({ sql, dataset, table }: SQLQuery): string {\n  let rawQuery = '';\n\n  // Return early with empty string if there is no sql column\n  if (!sql || !haveColumns(sql.columns)) {\n    return rawQuery;\n  }\n\n  rawQuery += createSelectClause(sql.columns, sql.limit);\n\n  if (dataset && table) {\n    rawQuery += `FROM ${dataset}.${table} `;\n  }\n\n  if (sql.whereString) {\n    rawQuery += `WHERE ${sql.whereString} `;\n  }\n\n  if (sql.groupBy?.[0]?.property.name) {\n    const groupBy = sql.groupBy.map((g) => g.property.name).filter((g) => !isEmpty(g));\n    rawQuery += `GROUP BY ${groupBy.join(', ')} `;\n  }\n\n  if (sql.orderBy?.property.name) {\n    rawQuery += `ORDER BY ${sql.orderBy.property.name} `;\n  }\n\n  if (sql.orderBy?.property.name && sql.orderByDirection) {\n    rawQuery += `${sql.orderByDirection} `;\n  }\n\n  return rawQuery;\n}\n\nfunction createSelectClause(sqlColumns: NonNullable<SQLExpression['columns']>, limit?: number): string {\n  const columns = sqlColumns.map((c) => {\n    let rawColumn = '';\n    if (c.name && c.alias) {\n      rawColumn += `${c.name}(${c.parameters?.map((p) => `${p.name}`)}) AS ${c.alias}`;\n    } else if (c.name) {\n      rawColumn += `${c.name}(${c.parameters?.map((p) => `${p.name}`)})`;\n    } else if (c.alias) {\n      rawColumn += `${c.parameters?.map((p) => `${p.name}`)} AS ${c.alias}`;\n    } else {\n      rawColumn += `${c.parameters?.map((p) => `${p.name}`)}`;\n    }\n    return rawColumn;\n  });\n  return `SELECT ${isLimit(limit) ? 'TOP(' + limit + ')' : ''} ${columns.join(', ')} `;\n}\n\nconst isLimit = (limit: number | undefined): boolean => limit !== undefined && limit >= 0;\n","import { DataSourceInstanceSettings, ScopedVars } from '@grafana/data';\nimport { LanguageDefinition } from '@grafana/experimental';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { SqlDatasource } from 'app/features/plugins/sql/datasource/SqlDatasource';\nimport { DB, SQLQuery, SQLSelectableValue } from 'app/features/plugins/sql/types';\nimport { formatSQL } from 'app/features/plugins/sql/utils/formatSQL';\n\nimport { getSchema, showDatabases, getSchemaAndName } from './MSSqlMetaQuery';\nimport { MSSqlQueryModel } from './MSSqlQueryModel';\nimport { fetchColumns, fetchTables, getSqlCompletionProvider } from './sqlCompletionProvider';\nimport { getIcon, getRAQBType, toRawSql } from './sqlUtil';\nimport { MssqlOptions } from './types';\n\nexport class MssqlDatasource extends SqlDatasource {\n  sqlLanguageDefinition: LanguageDefinition | undefined = undefined;\n  constructor(instanceSettings: DataSourceInstanceSettings<MssqlOptions>) {\n    super(instanceSettings);\n  }\n\n  getQueryModel(target?: SQLQuery, templateSrv?: TemplateSrv, scopedVars?: ScopedVars): MSSqlQueryModel {\n    return new MSSqlQueryModel(target, templateSrv, scopedVars);\n  }\n\n  async fetchDatasets(): Promise<string[]> {\n    const datasets = await this.runSql<{ name: string[] }>(showDatabases(), { refId: 'datasets' });\n    return datasets.fields.name?.values.flat() ?? [];\n  }\n\n  async fetchTables(dataset?: string): Promise<string[]> {\n    // We get back the table name with the schema as well. like dbo.table\n    const tables = await this.runSql<{ schemaAndName: string[] }>(getSchemaAndName(dataset), { refId: 'tables' });\n    return tables.fields.schemaAndName?.values.flat() ?? [];\n  }\n\n  async fetchFields(query: SQLQuery): Promise<SQLSelectableValue[]> {\n    if (!query.table) {\n      return [];\n    }\n    const [_, table] = query.table.split('.');\n    const schema = await this.runSql<{ column: string; type: string }>(getSchema(query.dataset, table), {\n      refId: 'columns',\n    });\n    const result: SQLSelectableValue[] = [];\n    for (let i = 0; i < schema.length; i++) {\n      const column = schema.fields.column.values[i];\n      const type = schema.fields.type.values[i];\n      result.push({ label: column, value: column, type, icon: getIcon(type), raqbFieldType: getRAQBType(type) });\n    }\n    return result;\n  }\n\n  getSqlLanguageDefinition(db: DB): LanguageDefinition {\n    if (this.sqlLanguageDefinition !== undefined) {\n      return this.sqlLanguageDefinition;\n    }\n    const args = {\n      getColumns: { current: (query: SQLQuery) => fetchColumns(db, query) },\n      getTables: { current: (dataset?: string) => fetchTables(db, dataset) },\n    };\n    this.sqlLanguageDefinition = {\n      id: 'sql',\n      completionProvider: getSqlCompletionProvider(args),\n      formatter: formatSQL,\n    };\n    return this.sqlLanguageDefinition;\n  }\n\n  getDB(): DB {\n    if (this.db !== undefined) {\n      return this.db;\n    }\n    return {\n      init: () => Promise.resolve(true),\n      datasets: () => this.fetchDatasets(),\n      tables: (dataset?: string) => this.fetchTables(dataset),\n      getEditorLanguageDefinition: () => this.getSqlLanguageDefinition(this.db),\n      fields: async (query: SQLQuery) => {\n        if (!query?.dataset || !query?.table) {\n          return [];\n        }\n        return this.fetchFields(query);\n      },\n      validateQuery: (query) =>\n        Promise.resolve({ isError: false, isValid: true, query, error: '', rawSql: query.rawSql }),\n      dsID: () => this.id,\n      dispose: (_dsID?: string) => {},\n      toRawSql,\n      lookup: async (path?: string) => {\n        if (!path) {\n          const datasets = await this.fetchDatasets();\n          return datasets.map((d) => ({ name: d, completion: `${d}.` }));\n        } else {\n          const parts = path.split('.').filter((s: string) => s);\n          if (parts.length > 2) {\n            return [];\n          }\n          if (parts.length === 1) {\n            const tables = await this.fetchTables(parts[0]);\n            return tables.map((t) => ({ name: t, completion: t }));\n          } else {\n            return [];\n          }\n        }\n      },\n    };\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport { SqlQueryEditor } from 'app/features/plugins/sql/components/QueryEditor';\nimport { SQLQuery } from 'app/features/plugins/sql/types';\n\nimport { CheatSheet } from './CheatSheet';\nimport { ConfigurationEditor } from './configuration/ConfigurationEditor';\nimport { MssqlDatasource } from './datasource';\nimport { MssqlOptions } from './types';\n\nexport const plugin = new DataSourcePlugin<MssqlDatasource, SQLQuery, MssqlOptions>(MssqlDatasource)\n  .setQueryEditor(SqlQueryEditor)\n  .setQueryEditorHelp(CheatSheet)\n  .setConfigEditor(ConfigurationEditor);\n"],"names":["toNumber","text","ConnectionLimits","props","onOptionsChange","options","jsonData","autoIdle","updateJsonData","values","newOpts","onJSONDataNumberChanged","property","number","onMaxConnectionsChanged","onConnectionIdleAutoChanged","idleConns","maxConns","labelWidth","e","newVal","useMigrateDatabaseFields","newOptions","optionsUpdated","maxOpenConns","maxIdleConns","connMaxLifetime","CheatSheet","styles","getStyles","theme","MSSQLAuthenticationType","MSSQLEncryptOptions","AzureCloud","AzureAuthType","KnownAzureClouds","isCredentialsComplete","credentials","getDefaultCredentials","managedIdentityEnabled","cloud","getSecret","clientSecretStoredServerSide","clientSecret","concealedSecret","getCredentials","dsSettings","bootConfig","updateCredentials","authTypeOptions","AzureCredentialsForm","azureCloudOptions","onCredentialsChange","disabled","onAuthTypeChange","selected","updated","onInputChange","value","Field","Select","opt","Input","event","Button","AzureAuthSettings","onChange","LONG_WIDTH","ConfigurationEditor","azureAuthIsSupported","config","azureAuthSettings","onResetPassword","onDSOptionChanged","onSkipTLSVerifyChanged","onEncryptChanged","onAuthenticationMethodChanged","onConnectionTimeoutChanged","connectionTimeout","buildAuthenticationOptions","basicAuthenticationOptions","encryptOptions","DataSourceDescription","Alert","Link","Divider","ConfigSection","Switch","SecretInput","FieldSet","ConfigSubSection","NumberInput","SecureSocksProxySettings","showDatabases","getSchemaAndName","database","getSchema","table","MSSqlQueryModel","target","templateSrv","scopedVars","getSqlCompletionProvider","getColumns","getTables","monaco","language","identifier","token","processedToken","tablePath","t","schema","tableName","fetchColumns","db","q","cols","c","fetchTables","dataset","getIcon","type","getRAQBType","toRawSql","sql","rawQuery","createSelectClause","groupBy","g","sqlColumns","limit","columns","rawColumn","p","isLimit","MssqlDatasource","SqlDatasource","instanceSettings","query","_","result","i","column","args","formatSQL","_dsID","path","parts","s","d"],"sourceRoot":""}