{"version":3,"file":"1569.24498ab99f78586b0a22.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/loki/components/LokiOptionFields.tsx","webpack://grafana/./public/app/plugins/datasource/loki/components/monaco-query-field/monaco-completion-provider/validation.ts","webpack://grafana/./.yarn/cache/lru-cache-npm-10.0.0-256d74bb20-18f101675f.zip/node_modules/lru-cache/dist/mjs/index.js","webpack://grafana/./public/app/plugins/datasource/loki/LanguageProvider.ts","webpack://grafana/./.yarn/cache/rxjs-npm-7.8.1-41c443a75b-de4b53db10.zip/node_modules/rxjs/dist/esm5/internal/observable/dom/WebSocketSubject.js","webpack://grafana/./.yarn/cache/rxjs-npm-7.8.1-41c443a75b-de4b53db10.zip/node_modules/rxjs/dist/esm5/internal/observable/dom/webSocket.js","webpack://grafana/./.yarn/cache/uuid-npm-9.0.0-46c41e3e43-8dd2c83c43.zip/node_modules/uuid/dist/esm-browser/regex.js","webpack://grafana/./.yarn/cache/uuid-npm-9.0.0-46c41e3e43-8dd2c83c43.zip/node_modules/uuid/dist/esm-browser/validate.js","webpack://grafana/./.yarn/cache/uuid-npm-9.0.0-46c41e3e43-8dd2c83c43.zip/node_modules/uuid/dist/esm-browser/parse.js","webpack://grafana/./.yarn/cache/uuid-npm-9.0.0-46c41e3e43-8dd2c83c43.zip/node_modules/uuid/dist/esm-browser/v35.js","webpack://grafana/./.yarn/cache/uuid-npm-9.0.0-46c41e3e43-8dd2c83c43.zip/node_modules/uuid/dist/esm-browser/sha1.js","webpack://grafana/./.yarn/cache/uuid-npm-9.0.0-46c41e3e43-8dd2c83c43.zip/node_modules/uuid/dist/esm-browser/v5.js","webpack://grafana/./public/app/plugins/datasource/loki/liveStreamsResultTransformer.ts","webpack://grafana/./public/app/plugins/datasource/loki/LiveStreams.ts","webpack://grafana/./public/app/plugins/datasource/loki/components/LokiContextUi.tsx","webpack://grafana/./public/app/plugins/datasource/loki/sortDataFrame.ts","webpack://grafana/./public/app/plugins/datasource/loki/LogContextProvider.ts","webpack://grafana/./public/app/plugins/datasource/loki/getDerivedFields.ts","webpack://grafana/./public/app/plugins/datasource/loki/makeTableFrames.ts","webpack://grafana/./public/app/plugins/datasource/loki/backendResultTransformer.ts","webpack://grafana/./public/app/plugins/datasource/loki/components/AnnotationsQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/loki/migrations/variableQueryMigrations.ts","webpack://grafana/./public/app/plugins/datasource/loki/queryHints.ts","webpack://grafana/./public/app/plugins/datasource/loki/logsTimeSplitting.ts","webpack://grafana/./public/app/plugins/datasource/loki/metricTimeSplitting.ts","webpack://grafana/./public/app/plugins/datasource/loki/querySplitting.ts","webpack://grafana/./public/app/plugins/datasource/loki/streaming.ts","webpack://grafana/./public/app/plugins/datasource/loki/components/VariableQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/loki/variables.ts","webpack://grafana/./public/app/plugins/datasource/loki/datasource.ts","webpack://grafana/./public/app/plugins/datasource/loki/modifyQuery.ts","webpack://grafana/./public/app/plugins/datasource/loki/queryUtils.ts","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/LokiQueryModeller.ts","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/binaryScalarOperations.ts","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/operationUtils.ts","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/UnwrapParamEditor.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/operations.ts","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/parsing.ts","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/types.ts","webpack://grafana/./public/app/plugins/datasource/loki/lineParser.ts","webpack://grafana/./public/app/plugins/datasource/loki/responseUtils.ts","webpack://grafana/./public/app/plugins/datasource/loki/tracking.ts","webpack://grafana/./public/app/plugins/datasource/loki/dataquery.gen.ts","webpack://grafana/./public/app/plugins/datasource/loki/types.ts","webpack://grafana/./.yarn/__virtual__/@grafana-lezer-logql-virtual-1cf20fd578/0/cache/@grafana-lezer-logql-npm-0.2.0-6aaa225d81-7f4382291f.zip/node_modules/@grafana/lezer-logql/index.es.js"],"sourcesContent":["// Libraries\nimport { css, cx } from '@emotion/css';\nimport { map } from 'lodash';\nimport React, { memo } from 'react';\n\n// Types\nimport { SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { InlineFormLabel, RadioButtonGroup, InlineField, Input, Select } from '@grafana/ui';\n\nimport { getLokiQueryType } from '../queryUtils';\nimport { LokiQuery, LokiQueryType } from '../types';\n\nexport interface LokiOptionFieldsProps {\n  lineLimitValue: string;\n  resolution: number;\n  query: LokiQuery;\n  onChange: (value: LokiQuery) => void;\n  onRunQuery: () => void;\n  runOnBlur?: boolean;\n}\n\nexport const queryTypeOptions: Array<SelectableValue<LokiQueryType>> = [\n  { value: LokiQueryType.Range, label: 'Range', description: 'Run query over a range of time.' },\n  {\n    value: LokiQueryType.Instant,\n    label: 'Instant',\n    description: 'Run query against a single point in time. For this query, the \"To\" time is used.',\n  },\n];\n\nif (config.featureToggles.lokiExperimentalStreaming) {\n  queryTypeOptions.push({\n    value: LokiQueryType.Stream,\n    label: 'Stream',\n    description: 'Run a query and keep sending results on an interval',\n  });\n}\n\nexport const DEFAULT_RESOLUTION: SelectableValue<number> = {\n  value: 1,\n  label: '1/1',\n};\n\nexport const RESOLUTION_OPTIONS: Array<SelectableValue<number>> = [DEFAULT_RESOLUTION].concat(\n  map([2, 3, 4, 5, 10], (value: number) => ({\n    value,\n    label: '1/' + value,\n  }))\n);\n\nexport function LokiOptionFields(props: LokiOptionFieldsProps) {\n  const { lineLimitValue, resolution, onRunQuery, runOnBlur, onChange } = props;\n  const query = props.query ?? {};\n  const queryType = getLokiQueryType(query);\n\n  function onChangeQueryLimit(value: string) {\n    const nextQuery = { ...query, maxLines: preprocessMaxLines(value) };\n    onChange(nextQuery);\n  }\n\n  function onQueryTypeChange(queryType: LokiQueryType) {\n    const { instant, range, ...rest } = query;\n    onChange({ ...rest, queryType });\n  }\n\n  function onMaxLinesChange(e: React.SyntheticEvent<HTMLInputElement>) {\n    if (query.maxLines !== preprocessMaxLines(e.currentTarget.value)) {\n      onChangeQueryLimit(e.currentTarget.value);\n    }\n  }\n\n  function onReturnKeyDown(e: React.KeyboardEvent<HTMLInputElement>) {\n    if (e.key === 'Enter') {\n      onRunQuery();\n    }\n  }\n\n  function onResolutionChange(option: SelectableValue<number>) {\n    const nextQuery = { ...query, resolution: option.value };\n    onChange(nextQuery);\n  }\n\n  return (\n    <div aria-label=\"Loki extra field\" className=\"gf-form-inline\">\n      {/*Query type field*/}\n      <div\n        data-testid=\"queryTypeField\"\n        className={cx(\n          'gf-form explore-input-margin',\n          css`\n            flex-wrap: nowrap;\n          `\n        )}\n        aria-label=\"Query type field\"\n      >\n        <InlineFormLabel width=\"auto\">Query type</InlineFormLabel>\n\n        <RadioButtonGroup\n          options={queryTypeOptions}\n          value={queryType}\n          onChange={(type: LokiQueryType) => {\n            onQueryTypeChange(type);\n            if (runOnBlur) {\n              onRunQuery();\n            }\n          }}\n        />\n      </div>\n      {/*Line limit field*/}\n      <div\n        data-testid=\"lineLimitField\"\n        className={cx(\n          'gf-form',\n          css`\n            flex-wrap: nowrap;\n          `\n        )}\n        aria-label=\"Line limit field\"\n      >\n        <InlineField label=\"Line limit\" tooltip={'Upper limit for number of log lines returned by query.'}>\n          <Input\n            className=\"width-4\"\n            placeholder=\"auto\"\n            type=\"number\"\n            min={0}\n            onChange={onMaxLinesChange}\n            onKeyDown={onReturnKeyDown}\n            value={lineLimitValue}\n            onBlur={() => {\n              if (runOnBlur) {\n                onRunQuery();\n              }\n            }}\n          />\n        </InlineField>\n        <InlineField\n          label=\"Resolution\"\n          tooltip={\n            'Resolution 1/1 sets step parameter of Loki metrics range queries such that each pixel corresponds to one data point. For better performance, lower resolutions can be picked. 1/2 only retrieves a data point for every other pixel, and 1/10 retrieves one data point per 10 pixels.'\n          }\n        >\n          <Select\n            isSearchable={false}\n            onChange={onResolutionChange}\n            options={RESOLUTION_OPTIONS}\n            value={resolution}\n            aria-label=\"Select resolution\"\n          />\n        </InlineField>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(LokiOptionFields);\n\nexport function preprocessMaxLines(value: string): number | undefined {\n  const maxLines = parseInt(value, 10);\n  if (isNaN(maxLines) || maxLines < 0) {\n    return undefined;\n  }\n\n  return maxLines;\n}\n","import { SyntaxNode } from '@lezer/common';\n\nimport { parser } from '@grafana/lezer-logql';\nimport { ErrorId } from 'app/plugins/datasource/prometheus/querybuilder/shared/parsingUtils';\n\ninterface ParserErrorBoundary {\n  startLineNumber: number;\n  startColumn: number;\n  endLineNumber: number;\n  endColumn: number;\n  error: string;\n}\n\ninterface ParseError {\n  text: string;\n  node: SyntaxNode;\n}\n\n/**\n * Conceived to work in combination with the MonacoQueryField component.\n * Given an original query, and it's interpolated version, it will return an array of ParserErrorBoundary\n * objects containing nodes which are actual errors. The interpolated version (even with placeholder variables)\n * is required because variables look like errors for Lezer.\n * @internal\n */\nexport function validateQuery(\n  query: string,\n  interpolatedQuery: string,\n  queryLines: string[]\n): ParserErrorBoundary[] | false {\n  if (!query) {\n    return false;\n  }\n\n  /**\n   * To provide support to variable interpolation in query validation, we run the parser in the interpolated\n   * query. If there are errors there, we trace them back to the original unparsed query, so we can more\n   * accurately highlight the error in the query, since it's likely that the variable name and variable value\n   * have different lengths. With this, we also exclude irrelevant parser errors that are produced by\n   * lezer not understanding $variables and $__variables, which usually generate 2 or 3 error SyntaxNode.\n   */\n  const interpolatedErrors: ParseError[] = parseQuery(interpolatedQuery);\n  if (!interpolatedErrors.length) {\n    return false;\n  }\n\n  let parseErrors: ParseError[] = interpolatedErrors;\n  if (query !== interpolatedQuery) {\n    const queryErrors: ParseError[] = parseQuery(query);\n    parseErrors = interpolatedErrors.flatMap(\n      (interpolatedError) =>\n        queryErrors.filter((queryError) => interpolatedError.text === queryError.text) || interpolatedError\n    );\n  }\n\n  return parseErrors.map((parseError) => findErrorBoundary(query, queryLines, parseError)).filter(isErrorBoundary);\n}\n\nfunction parseQuery(query: string) {\n  const parseErrors: ParseError[] = [];\n  const tree = parser.parse(query);\n  tree.iterate({\n    enter: (nodeRef): false | void => {\n      if (nodeRef.type.id === ErrorId) {\n        const node = nodeRef.node;\n        parseErrors.push({\n          node: node,\n          text: query.substring(node.from, node.to),\n        });\n      }\n    },\n  });\n  return parseErrors;\n}\n\nfunction findErrorBoundary(query: string, queryLines: string[], parseError: ParseError): ParserErrorBoundary | null {\n  if (queryLines.length === 1) {\n    const isEmptyString = parseError.node.from === parseError.node.to;\n    const errorNode = isEmptyString && parseError.node.parent ? parseError.node.parent : parseError.node;\n    const error = isEmptyString ? query.substring(errorNode.from, errorNode.to) : parseError.text;\n    return {\n      startLineNumber: 1,\n      startColumn: errorNode.from + 1,\n      endLineNumber: 1,\n      endColumn: errorNode.to + 1,\n      error,\n    };\n  }\n\n  let startPos = 0,\n    endPos = 0;\n  for (let line = 0; line < queryLines.length; line++) {\n    endPos = startPos + queryLines[line].length;\n\n    if (parseError.node.from > endPos) {\n      startPos += queryLines[line].length + 1;\n      continue;\n    }\n\n    return {\n      startLineNumber: line + 1,\n      startColumn: parseError.node.from - startPos + 1,\n      endLineNumber: line + 1,\n      endColumn: parseError.node.to - startPos + 1,\n      error: parseError.text,\n    };\n  }\n\n  return null;\n}\n\nfunction isErrorBoundary(boundary: ParserErrorBoundary | null): boundary is ParserErrorBoundary {\n  return boundary !== null;\n}\n\nexport const placeHolderScopedVars = {\n  __interval: { text: '1s', value: '1s' },\n  __auto: { text: '1s', value: '1s' },\n  __interval_ms: { text: '1000', value: 1000 },\n  __range_ms: { text: '1000', value: 1000 },\n  __range_s: { text: '1', value: 1 },\n  __range: { text: '1s', value: '1s' },\n};\n","/**\n * @module LRUCache\n */\nconst perf = typeof performance === 'object' &&\n    performance &&\n    typeof performance.now === 'function'\n    ? performance\n    : Date;\nconst warned = new Set();\n/* c8 ignore start */\nconst PROCESS = (typeof process === 'object' && !!process ? process : {});\n/* c8 ignore start */\nconst emitWarning = (msg, type, code, fn) => {\n    typeof PROCESS.emitWarning === 'function'\n        ? PROCESS.emitWarning(msg, type, code, fn)\n        : console.error(`[${code}] ${type}: ${msg}`);\n};\nlet AC = globalThis.AbortController;\nlet AS = globalThis.AbortSignal;\n/* c8 ignore start */\nif (typeof AC === 'undefined') {\n    //@ts-ignore\n    AS = class AbortSignal {\n        onabort;\n        _onabort = [];\n        reason;\n        aborted = false;\n        addEventListener(_, fn) {\n            this._onabort.push(fn);\n        }\n    };\n    //@ts-ignore\n    AC = class AbortController {\n        constructor() {\n            warnACPolyfill();\n        }\n        signal = new AS();\n        abort(reason) {\n            if (this.signal.aborted)\n                return;\n            //@ts-ignore\n            this.signal.reason = reason;\n            //@ts-ignore\n            this.signal.aborted = true;\n            //@ts-ignore\n            for (const fn of this.signal._onabort) {\n                fn(reason);\n            }\n            this.signal.onabort?.(reason);\n        }\n    };\n    let printACPolyfillWarning = PROCESS.env?.LRU_CACHE_IGNORE_AC_WARNING !== '1';\n    const warnACPolyfill = () => {\n        if (!printACPolyfillWarning)\n            return;\n        printACPolyfillWarning = false;\n        emitWarning('AbortController is not defined. If using lru-cache in ' +\n            'node 14, load an AbortController polyfill from the ' +\n            '`node-abort-controller` package. A minimal polyfill is ' +\n            'provided for use by LRUCache.fetch(), but it should not be ' +\n            'relied upon in other contexts (eg, passing it to other APIs that ' +\n            'use AbortController/AbortSignal might have undesirable effects). ' +\n            'You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.', 'NO_ABORT_CONTROLLER', 'ENOTSUP', warnACPolyfill);\n    };\n}\n/* c8 ignore stop */\nconst shouldWarn = (code) => !warned.has(code);\nconst TYPE = Symbol('type');\nconst isPosInt = (n) => n && n === Math.floor(n) && n > 0 && isFinite(n);\n/* c8 ignore start */\n// This is a little bit ridiculous, tbh.\n// The maximum array length is 2^32-1 or thereabouts on most JS impls.\n// And well before that point, you're caching the entire world, I mean,\n// that's ~32GB of just integers for the next/prev links, plus whatever\n// else to hold that many keys and values.  Just filling the memory with\n// zeroes at init time is brutal when you get that big.\n// But why not be complete?\n// Maybe in the future, these limits will have expanded.\nconst getUintArray = (max) => !isPosInt(max)\n    ? null\n    : max <= Math.pow(2, 8)\n        ? Uint8Array\n        : max <= Math.pow(2, 16)\n            ? Uint16Array\n            : max <= Math.pow(2, 32)\n                ? Uint32Array\n                : max <= Number.MAX_SAFE_INTEGER\n                    ? ZeroArray\n                    : null;\n/* c8 ignore stop */\nclass ZeroArray extends Array {\n    constructor(size) {\n        super(size);\n        this.fill(0);\n    }\n}\nclass Stack {\n    heap;\n    length;\n    // private constructor\n    static #constructing = false;\n    static create(max) {\n        const HeapCls = getUintArray(max);\n        if (!HeapCls)\n            return [];\n        Stack.#constructing = true;\n        const s = new Stack(max, HeapCls);\n        Stack.#constructing = false;\n        return s;\n    }\n    constructor(max, HeapCls) {\n        /* c8 ignore start */\n        if (!Stack.#constructing) {\n            throw new TypeError('instantiate Stack using Stack.create(n)');\n        }\n        /* c8 ignore stop */\n        this.heap = new HeapCls(max);\n        this.length = 0;\n    }\n    push(n) {\n        this.heap[this.length++] = n;\n    }\n    pop() {\n        return this.heap[--this.length];\n    }\n}\n/**\n * Default export, the thing you're using this module to get.\n *\n * All properties from the options object (with the exception of\n * {@link OptionsBase.max} and {@link OptionsBase.maxSize}) are added as\n * normal public members. (`max` and `maxBase` are read-only getters.)\n * Changing any of these will alter the defaults for subsequent method calls,\n * but is otherwise safe.\n */\nexport class LRUCache {\n    // properties coming in from the options of these, only max and maxSize\n    // really *need* to be protected. The rest can be modified, as they just\n    // set defaults for various methods.\n    #max;\n    #maxSize;\n    #dispose;\n    #disposeAfter;\n    #fetchMethod;\n    /**\n     * {@link LRUCache.OptionsBase.ttl}\n     */\n    ttl;\n    /**\n     * {@link LRUCache.OptionsBase.ttlResolution}\n     */\n    ttlResolution;\n    /**\n     * {@link LRUCache.OptionsBase.ttlAutopurge}\n     */\n    ttlAutopurge;\n    /**\n     * {@link LRUCache.OptionsBase.updateAgeOnGet}\n     */\n    updateAgeOnGet;\n    /**\n     * {@link LRUCache.OptionsBase.updateAgeOnHas}\n     */\n    updateAgeOnHas;\n    /**\n     * {@link LRUCache.OptionsBase.allowStale}\n     */\n    allowStale;\n    /**\n     * {@link LRUCache.OptionsBase.noDisposeOnSet}\n     */\n    noDisposeOnSet;\n    /**\n     * {@link LRUCache.OptionsBase.noUpdateTTL}\n     */\n    noUpdateTTL;\n    /**\n     * {@link LRUCache.OptionsBase.maxEntrySize}\n     */\n    maxEntrySize;\n    /**\n     * {@link LRUCache.OptionsBase.sizeCalculation}\n     */\n    sizeCalculation;\n    /**\n     * {@link LRUCache.OptionsBase.noDeleteOnFetchRejection}\n     */\n    noDeleteOnFetchRejection;\n    /**\n     * {@link LRUCache.OptionsBase.noDeleteOnStaleGet}\n     */\n    noDeleteOnStaleGet;\n    /**\n     * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort}\n     */\n    allowStaleOnFetchAbort;\n    /**\n     * {@link LRUCache.OptionsBase.allowStaleOnFetchRejection}\n     */\n    allowStaleOnFetchRejection;\n    /**\n     * {@link LRUCache.OptionsBase.ignoreFetchAbort}\n     */\n    ignoreFetchAbort;\n    // computed properties\n    #size;\n    #calculatedSize;\n    #keyMap;\n    #keyList;\n    #valList;\n    #next;\n    #prev;\n    #head;\n    #tail;\n    #free;\n    #disposed;\n    #sizes;\n    #starts;\n    #ttls;\n    #hasDispose;\n    #hasFetchMethod;\n    #hasDisposeAfter;\n    /**\n     * Do not call this method unless you need to inspect the\n     * inner workings of the cache.  If anything returned by this\n     * object is modified in any way, strange breakage may occur.\n     *\n     * These fields are private for a reason!\n     *\n     * @internal\n     */\n    static unsafeExposeInternals(c) {\n        return {\n            // properties\n            starts: c.#starts,\n            ttls: c.#ttls,\n            sizes: c.#sizes,\n            keyMap: c.#keyMap,\n            keyList: c.#keyList,\n            valList: c.#valList,\n            next: c.#next,\n            prev: c.#prev,\n            get head() {\n                return c.#head;\n            },\n            get tail() {\n                return c.#tail;\n            },\n            free: c.#free,\n            // methods\n            isBackgroundFetch: (p) => c.#isBackgroundFetch(p),\n            backgroundFetch: (k, index, options, context) => c.#backgroundFetch(k, index, options, context),\n            moveToTail: (index) => c.#moveToTail(index),\n            indexes: (options) => c.#indexes(options),\n            rindexes: (options) => c.#rindexes(options),\n            isStale: (index) => c.#isStale(index),\n        };\n    }\n    // Protected read-only members\n    /**\n     * {@link LRUCache.OptionsBase.max} (read-only)\n     */\n    get max() {\n        return this.#max;\n    }\n    /**\n     * {@link LRUCache.OptionsBase.maxSize} (read-only)\n     */\n    get maxSize() {\n        return this.#maxSize;\n    }\n    /**\n     * The total computed size of items in the cache (read-only)\n     */\n    get calculatedSize() {\n        return this.#calculatedSize;\n    }\n    /**\n     * The number of items stored in the cache (read-only)\n     */\n    get size() {\n        return this.#size;\n    }\n    /**\n     * {@link LRUCache.OptionsBase.fetchMethod} (read-only)\n     */\n    get fetchMethod() {\n        return this.#fetchMethod;\n    }\n    /**\n     * {@link LRUCache.OptionsBase.dispose} (read-only)\n     */\n    get dispose() {\n        return this.#dispose;\n    }\n    /**\n     * {@link LRUCache.OptionsBase.disposeAfter} (read-only)\n     */\n    get disposeAfter() {\n        return this.#disposeAfter;\n    }\n    constructor(options) {\n        const { max = 0, ttl, ttlResolution = 1, ttlAutopurge, updateAgeOnGet, updateAgeOnHas, allowStale, dispose, disposeAfter, noDisposeOnSet, noUpdateTTL, maxSize = 0, maxEntrySize = 0, sizeCalculation, fetchMethod, noDeleteOnFetchRejection, noDeleteOnStaleGet, allowStaleOnFetchRejection, allowStaleOnFetchAbort, ignoreFetchAbort, } = options;\n        if (max !== 0 && !isPosInt(max)) {\n            throw new TypeError('max option must be a nonnegative integer');\n        }\n        const UintArray = max ? getUintArray(max) : Array;\n        if (!UintArray) {\n            throw new Error('invalid max value: ' + max);\n        }\n        this.#max = max;\n        this.#maxSize = maxSize;\n        this.maxEntrySize = maxEntrySize || this.#maxSize;\n        this.sizeCalculation = sizeCalculation;\n        if (this.sizeCalculation) {\n            if (!this.#maxSize && !this.maxEntrySize) {\n                throw new TypeError('cannot set sizeCalculation without setting maxSize or maxEntrySize');\n            }\n            if (typeof this.sizeCalculation !== 'function') {\n                throw new TypeError('sizeCalculation set to non-function');\n            }\n        }\n        if (fetchMethod !== undefined &&\n            typeof fetchMethod !== 'function') {\n            throw new TypeError('fetchMethod must be a function if specified');\n        }\n        this.#fetchMethod = fetchMethod;\n        this.#hasFetchMethod = !!fetchMethod;\n        this.#keyMap = new Map();\n        this.#keyList = new Array(max).fill(undefined);\n        this.#valList = new Array(max).fill(undefined);\n        this.#next = new UintArray(max);\n        this.#prev = new UintArray(max);\n        this.#head = 0;\n        this.#tail = 0;\n        this.#free = Stack.create(max);\n        this.#size = 0;\n        this.#calculatedSize = 0;\n        if (typeof dispose === 'function') {\n            this.#dispose = dispose;\n        }\n        if (typeof disposeAfter === 'function') {\n            this.#disposeAfter = disposeAfter;\n            this.#disposed = [];\n        }\n        else {\n            this.#disposeAfter = undefined;\n            this.#disposed = undefined;\n        }\n        this.#hasDispose = !!this.#dispose;\n        this.#hasDisposeAfter = !!this.#disposeAfter;\n        this.noDisposeOnSet = !!noDisposeOnSet;\n        this.noUpdateTTL = !!noUpdateTTL;\n        this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection;\n        this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection;\n        this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort;\n        this.ignoreFetchAbort = !!ignoreFetchAbort;\n        // NB: maxEntrySize is set to maxSize if it's set\n        if (this.maxEntrySize !== 0) {\n            if (this.#maxSize !== 0) {\n                if (!isPosInt(this.#maxSize)) {\n                    throw new TypeError('maxSize must be a positive integer if specified');\n                }\n            }\n            if (!isPosInt(this.maxEntrySize)) {\n                throw new TypeError('maxEntrySize must be a positive integer if specified');\n            }\n            this.#initializeSizeTracking();\n        }\n        this.allowStale = !!allowStale;\n        this.noDeleteOnStaleGet = !!noDeleteOnStaleGet;\n        this.updateAgeOnGet = !!updateAgeOnGet;\n        this.updateAgeOnHas = !!updateAgeOnHas;\n        this.ttlResolution =\n            isPosInt(ttlResolution) || ttlResolution === 0\n                ? ttlResolution\n                : 1;\n        this.ttlAutopurge = !!ttlAutopurge;\n        this.ttl = ttl || 0;\n        if (this.ttl) {\n            if (!isPosInt(this.ttl)) {\n                throw new TypeError('ttl must be a positive integer if specified');\n            }\n            this.#initializeTTLTracking();\n        }\n        // do not allow completely unbounded caches\n        if (this.#max === 0 && this.ttl === 0 && this.#maxSize === 0) {\n            throw new TypeError('At least one of max, maxSize, or ttl is required');\n        }\n        if (!this.ttlAutopurge && !this.#max && !this.#maxSize) {\n            const code = 'LRU_CACHE_UNBOUNDED';\n            if (shouldWarn(code)) {\n                warned.add(code);\n                const msg = 'TTL caching without ttlAutopurge, max, or maxSize can ' +\n                    'result in unbounded memory consumption.';\n                emitWarning(msg, 'UnboundedCacheWarning', code, LRUCache);\n            }\n        }\n    }\n    /**\n     * Return the remaining TTL time for a given entry key\n     */\n    getRemainingTTL(key) {\n        return this.#keyMap.has(key) ? Infinity : 0;\n    }\n    #initializeTTLTracking() {\n        const ttls = new ZeroArray(this.#max);\n        const starts = new ZeroArray(this.#max);\n        this.#ttls = ttls;\n        this.#starts = starts;\n        this.#setItemTTL = (index, ttl, start = perf.now()) => {\n            starts[index] = ttl !== 0 ? start : 0;\n            ttls[index] = ttl;\n            if (ttl !== 0 && this.ttlAutopurge) {\n                const t = setTimeout(() => {\n                    if (this.#isStale(index)) {\n                        this.delete(this.#keyList[index]);\n                    }\n                }, ttl + 1);\n                // unref() not supported on all platforms\n                /* c8 ignore start */\n                if (t.unref) {\n                    t.unref();\n                }\n                /* c8 ignore stop */\n            }\n        };\n        this.#updateItemAge = index => {\n            starts[index] = ttls[index] !== 0 ? perf.now() : 0;\n        };\n        this.#statusTTL = (status, index) => {\n            if (ttls[index]) {\n                const ttl = ttls[index];\n                const start = starts[index];\n                status.ttl = ttl;\n                status.start = start;\n                status.now = cachedNow || getNow();\n                const age = status.now - start;\n                status.remainingTTL = ttl - age;\n            }\n        };\n        // debounce calls to perf.now() to 1s so we're not hitting\n        // that costly call repeatedly.\n        let cachedNow = 0;\n        const getNow = () => {\n            const n = perf.now();\n            if (this.ttlResolution > 0) {\n                cachedNow = n;\n                const t = setTimeout(() => (cachedNow = 0), this.ttlResolution);\n                // not available on all platforms\n                /* c8 ignore start */\n                if (t.unref) {\n                    t.unref();\n                }\n                /* c8 ignore stop */\n            }\n            return n;\n        };\n        this.getRemainingTTL = key => {\n            const index = this.#keyMap.get(key);\n            if (index === undefined) {\n                return 0;\n            }\n            const ttl = ttls[index];\n            const start = starts[index];\n            if (ttl === 0 || start === 0) {\n                return Infinity;\n            }\n            const age = (cachedNow || getNow()) - start;\n            return ttl - age;\n        };\n        this.#isStale = index => {\n            return (ttls[index] !== 0 &&\n                starts[index] !== 0 &&\n                (cachedNow || getNow()) - starts[index] > ttls[index]);\n        };\n    }\n    // conditionally set private methods related to TTL\n    #updateItemAge = () => { };\n    #statusTTL = () => { };\n    #setItemTTL = () => { };\n    /* c8 ignore stop */\n    #isStale = () => false;\n    #initializeSizeTracking() {\n        const sizes = new ZeroArray(this.#max);\n        this.#calculatedSize = 0;\n        this.#sizes = sizes;\n        this.#removeItemSize = index => {\n            this.#calculatedSize -= sizes[index];\n            sizes[index] = 0;\n        };\n        this.#requireSize = (k, v, size, sizeCalculation) => {\n            // provisionally accept background fetches.\n            // actual value size will be checked when they return.\n            if (this.#isBackgroundFetch(v)) {\n                return 0;\n            }\n            if (!isPosInt(size)) {\n                if (sizeCalculation) {\n                    if (typeof sizeCalculation !== 'function') {\n                        throw new TypeError('sizeCalculation must be a function');\n                    }\n                    size = sizeCalculation(v, k);\n                    if (!isPosInt(size)) {\n                        throw new TypeError('sizeCalculation return invalid (expect positive integer)');\n                    }\n                }\n                else {\n                    throw new TypeError('invalid size value (must be positive integer). ' +\n                        'When maxSize or maxEntrySize is used, sizeCalculation ' +\n                        'or size must be set.');\n                }\n            }\n            return size;\n        };\n        this.#addItemSize = (index, size, status) => {\n            sizes[index] = size;\n            if (this.#maxSize) {\n                const maxSize = this.#maxSize - sizes[index];\n                while (this.#calculatedSize > maxSize) {\n                    this.#evict(true);\n                }\n            }\n            this.#calculatedSize += sizes[index];\n            if (status) {\n                status.entrySize = size;\n                status.totalCalculatedSize = this.#calculatedSize;\n            }\n        };\n    }\n    #removeItemSize = _i => { };\n    #addItemSize = (_i, _s, _st) => { };\n    #requireSize = (_k, _v, size, sizeCalculation) => {\n        if (size || sizeCalculation) {\n            throw new TypeError('cannot set size without setting maxSize or maxEntrySize on cache');\n        }\n        return 0;\n    };\n    *#indexes({ allowStale = this.allowStale } = {}) {\n        if (this.#size) {\n            for (let i = this.#tail; true;) {\n                if (!this.#isValidIndex(i)) {\n                    break;\n                }\n                if (allowStale || !this.#isStale(i)) {\n                    yield i;\n                }\n                if (i === this.#head) {\n                    break;\n                }\n                else {\n                    i = this.#prev[i];\n                }\n            }\n        }\n    }\n    *#rindexes({ allowStale = this.allowStale } = {}) {\n        if (this.#size) {\n            for (let i = this.#head; true;) {\n                if (!this.#isValidIndex(i)) {\n                    break;\n                }\n                if (allowStale || !this.#isStale(i)) {\n                    yield i;\n                }\n                if (i === this.#tail) {\n                    break;\n                }\n                else {\n                    i = this.#next[i];\n                }\n            }\n        }\n    }\n    #isValidIndex(index) {\n        return (index !== undefined &&\n            this.#keyMap.get(this.#keyList[index]) === index);\n    }\n    /**\n     * Return a generator yielding `[key, value]` pairs,\n     * in order from most recently used to least recently used.\n     */\n    *entries() {\n        for (const i of this.#indexes()) {\n            if (this.#valList[i] !== undefined &&\n                this.#keyList[i] !== undefined &&\n                !this.#isBackgroundFetch(this.#valList[i])) {\n                yield [this.#keyList[i], this.#valList[i]];\n            }\n        }\n    }\n    /**\n     * Inverse order version of {@link LRUCache.entries}\n     *\n     * Return a generator yielding `[key, value]` pairs,\n     * in order from least recently used to most recently used.\n     */\n    *rentries() {\n        for (const i of this.#rindexes()) {\n            if (this.#valList[i] !== undefined &&\n                this.#keyList[i] !== undefined &&\n                !this.#isBackgroundFetch(this.#valList[i])) {\n                yield [this.#keyList[i], this.#valList[i]];\n            }\n        }\n    }\n    /**\n     * Return a generator yielding the keys in the cache,\n     * in order from most recently used to least recently used.\n     */\n    *keys() {\n        for (const i of this.#indexes()) {\n            const k = this.#keyList[i];\n            if (k !== undefined &&\n                !this.#isBackgroundFetch(this.#valList[i])) {\n                yield k;\n            }\n        }\n    }\n    /**\n     * Inverse order version of {@link LRUCache.keys}\n     *\n     * Return a generator yielding the keys in the cache,\n     * in order from least recently used to most recently used.\n     */\n    *rkeys() {\n        for (const i of this.#rindexes()) {\n            const k = this.#keyList[i];\n            if (k !== undefined &&\n                !this.#isBackgroundFetch(this.#valList[i])) {\n                yield k;\n            }\n        }\n    }\n    /**\n     * Return a generator yielding the values in the cache,\n     * in order from most recently used to least recently used.\n     */\n    *values() {\n        for (const i of this.#indexes()) {\n            const v = this.#valList[i];\n            if (v !== undefined &&\n                !this.#isBackgroundFetch(this.#valList[i])) {\n                yield this.#valList[i];\n            }\n        }\n    }\n    /**\n     * Inverse order version of {@link LRUCache.values}\n     *\n     * Return a generator yielding the values in the cache,\n     * in order from least recently used to most recently used.\n     */\n    *rvalues() {\n        for (const i of this.#rindexes()) {\n            const v = this.#valList[i];\n            if (v !== undefined &&\n                !this.#isBackgroundFetch(this.#valList[i])) {\n                yield this.#valList[i];\n            }\n        }\n    }\n    /**\n     * Iterating over the cache itself yields the same results as\n     * {@link LRUCache.entries}\n     */\n    [Symbol.iterator]() {\n        return this.entries();\n    }\n    /**\n     * Find a value for which the supplied fn method returns a truthy value,\n     * similar to Array.find().  fn is called as fn(value, key, cache).\n     */\n    find(fn, getOptions = {}) {\n        for (const i of this.#indexes()) {\n            const v = this.#valList[i];\n            const value = this.#isBackgroundFetch(v)\n                ? v.__staleWhileFetching\n                : v;\n            if (value === undefined)\n                continue;\n            if (fn(value, this.#keyList[i], this)) {\n                return this.get(this.#keyList[i], getOptions);\n            }\n        }\n    }\n    /**\n     * Call the supplied function on each item in the cache, in order from\n     * most recently used to least recently used.  fn is called as\n     * fn(value, key, cache).  Does not update age or recenty of use.\n     * Does not iterate over stale values.\n     */\n    forEach(fn, thisp = this) {\n        for (const i of this.#indexes()) {\n            const v = this.#valList[i];\n            const value = this.#isBackgroundFetch(v)\n                ? v.__staleWhileFetching\n                : v;\n            if (value === undefined)\n                continue;\n            fn.call(thisp, value, this.#keyList[i], this);\n        }\n    }\n    /**\n     * The same as {@link LRUCache.forEach} but items are iterated over in\n     * reverse order.  (ie, less recently used items are iterated over first.)\n     */\n    rforEach(fn, thisp = this) {\n        for (const i of this.#rindexes()) {\n            const v = this.#valList[i];\n            const value = this.#isBackgroundFetch(v)\n                ? v.__staleWhileFetching\n                : v;\n            if (value === undefined)\n                continue;\n            fn.call(thisp, value, this.#keyList[i], this);\n        }\n    }\n    /**\n     * Delete any stale entries. Returns true if anything was removed,\n     * false otherwise.\n     */\n    purgeStale() {\n        let deleted = false;\n        for (const i of this.#rindexes({ allowStale: true })) {\n            if (this.#isStale(i)) {\n                this.delete(this.#keyList[i]);\n                deleted = true;\n            }\n        }\n        return deleted;\n    }\n    /**\n     * Return an array of [key, {@link LRUCache.Entry}] tuples which can be\n     * passed to cache.load()\n     */\n    dump() {\n        const arr = [];\n        for (const i of this.#indexes({ allowStale: true })) {\n            const key = this.#keyList[i];\n            const v = this.#valList[i];\n            const value = this.#isBackgroundFetch(v)\n                ? v.__staleWhileFetching\n                : v;\n            if (value === undefined || key === undefined)\n                continue;\n            const entry = { value };\n            if (this.#ttls && this.#starts) {\n                entry.ttl = this.#ttls[i];\n                // always dump the start relative to a portable timestamp\n                // it's ok for this to be a bit slow, it's a rare operation.\n                const age = perf.now() - this.#starts[i];\n                entry.start = Math.floor(Date.now() - age);\n            }\n            if (this.#sizes) {\n                entry.size = this.#sizes[i];\n            }\n            arr.unshift([key, entry]);\n        }\n        return arr;\n    }\n    /**\n     * Reset the cache and load in the items in entries in the order listed.\n     * Note that the shape of the resulting cache may be different if the\n     * same options are not used in both caches.\n     */\n    load(arr) {\n        this.clear();\n        for (const [key, entry] of arr) {\n            if (entry.start) {\n                // entry.start is a portable timestamp, but we may be using\n                // node's performance.now(), so calculate the offset, so that\n                // we get the intended remaining TTL, no matter how long it's\n                // been on ice.\n                //\n                // it's ok for this to be a bit slow, it's a rare operation.\n                const age = Date.now() - entry.start;\n                entry.start = perf.now() - age;\n            }\n            this.set(key, entry.value, entry);\n        }\n    }\n    /**\n     * Add a value to the cache.\n     *\n     * Note: if `undefined` is specified as a value, this is an alias for\n     * {@link LRUCache#delete}\n     */\n    set(k, v, setOptions = {}) {\n        if (v === undefined) {\n            this.delete(k);\n            return this;\n        }\n        const { ttl = this.ttl, start, noDisposeOnSet = this.noDisposeOnSet, sizeCalculation = this.sizeCalculation, status, } = setOptions;\n        let { noUpdateTTL = this.noUpdateTTL } = setOptions;\n        const size = this.#requireSize(k, v, setOptions.size || 0, sizeCalculation);\n        // if the item doesn't fit, don't do anything\n        // NB: maxEntrySize set to maxSize by default\n        if (this.maxEntrySize && size > this.maxEntrySize) {\n            if (status) {\n                status.set = 'miss';\n                status.maxEntrySizeExceeded = true;\n            }\n            // have to delete, in case something is there already.\n            this.delete(k);\n            return this;\n        }\n        let index = this.#size === 0 ? undefined : this.#keyMap.get(k);\n        if (index === undefined) {\n            // addition\n            index = (this.#size === 0\n                ? this.#tail\n                : this.#free.length !== 0\n                    ? this.#free.pop()\n                    : this.#size === this.#max\n                        ? this.#evict(false)\n                        : this.#size);\n            this.#keyList[index] = k;\n            this.#valList[index] = v;\n            this.#keyMap.set(k, index);\n            this.#next[this.#tail] = index;\n            this.#prev[index] = this.#tail;\n            this.#tail = index;\n            this.#size++;\n            this.#addItemSize(index, size, status);\n            if (status)\n                status.set = 'add';\n            noUpdateTTL = false;\n        }\n        else {\n            // update\n            this.#moveToTail(index);\n            const oldVal = this.#valList[index];\n            if (v !== oldVal) {\n                if (this.#hasFetchMethod && this.#isBackgroundFetch(oldVal)) {\n                    oldVal.__abortController.abort(new Error('replaced'));\n                }\n                else if (!noDisposeOnSet) {\n                    if (this.#hasDispose) {\n                        this.#dispose?.(oldVal, k, 'set');\n                    }\n                    if (this.#hasDisposeAfter) {\n                        this.#disposed?.push([oldVal, k, 'set']);\n                    }\n                }\n                this.#removeItemSize(index);\n                this.#addItemSize(index, size, status);\n                this.#valList[index] = v;\n                if (status) {\n                    status.set = 'replace';\n                    const oldValue = oldVal && this.#isBackgroundFetch(oldVal)\n                        ? oldVal.__staleWhileFetching\n                        : oldVal;\n                    if (oldValue !== undefined)\n                        status.oldValue = oldValue;\n                }\n            }\n            else if (status) {\n                status.set = 'update';\n            }\n        }\n        if (ttl !== 0 && !this.#ttls) {\n            this.#initializeTTLTracking();\n        }\n        if (this.#ttls) {\n            if (!noUpdateTTL) {\n                this.#setItemTTL(index, ttl, start);\n            }\n            if (status)\n                this.#statusTTL(status, index);\n        }\n        if (!noDisposeOnSet && this.#hasDisposeAfter && this.#disposed) {\n            const dt = this.#disposed;\n            let task;\n            while ((task = dt?.shift())) {\n                this.#disposeAfter?.(...task);\n            }\n        }\n        return this;\n    }\n    /**\n     * Evict the least recently used item, returning its value or\n     * `undefined` if cache is empty.\n     */\n    pop() {\n        try {\n            while (this.#size) {\n                const val = this.#valList[this.#head];\n                this.#evict(true);\n                if (this.#isBackgroundFetch(val)) {\n                    if (val.__staleWhileFetching) {\n                        return val.__staleWhileFetching;\n                    }\n                }\n                else if (val !== undefined) {\n                    return val;\n                }\n            }\n        }\n        finally {\n            if (this.#hasDisposeAfter && this.#disposed) {\n                const dt = this.#disposed;\n                let task;\n                while ((task = dt?.shift())) {\n                    this.#disposeAfter?.(...task);\n                }\n            }\n        }\n    }\n    #evict(free) {\n        const head = this.#head;\n        const k = this.#keyList[head];\n        const v = this.#valList[head];\n        if (this.#hasFetchMethod && this.#isBackgroundFetch(v)) {\n            v.__abortController.abort(new Error('evicted'));\n        }\n        else if (this.#hasDispose || this.#hasDisposeAfter) {\n            if (this.#hasDispose) {\n                this.#dispose?.(v, k, 'evict');\n            }\n            if (this.#hasDisposeAfter) {\n                this.#disposed?.push([v, k, 'evict']);\n            }\n        }\n        this.#removeItemSize(head);\n        // if we aren't about to use the index, then null these out\n        if (free) {\n            this.#keyList[head] = undefined;\n            this.#valList[head] = undefined;\n            this.#free.push(head);\n        }\n        if (this.#size === 1) {\n            this.#head = this.#tail = 0;\n            this.#free.length = 0;\n        }\n        else {\n            this.#head = this.#next[head];\n        }\n        this.#keyMap.delete(k);\n        this.#size--;\n        return head;\n    }\n    /**\n     * Check if a key is in the cache, without updating the recency of use.\n     * Will return false if the item is stale, even though it is technically\n     * in the cache.\n     *\n     * Will not update item age unless\n     * {@link LRUCache.OptionsBase.updateAgeOnHas} is set.\n     */\n    has(k, hasOptions = {}) {\n        const { updateAgeOnHas = this.updateAgeOnHas, status } = hasOptions;\n        const index = this.#keyMap.get(k);\n        if (index !== undefined) {\n            const v = this.#valList[index];\n            if (this.#isBackgroundFetch(v) &&\n                v.__staleWhileFetching === undefined) {\n                return false;\n            }\n            if (!this.#isStale(index)) {\n                if (updateAgeOnHas) {\n                    this.#updateItemAge(index);\n                }\n                if (status) {\n                    status.has = 'hit';\n                    this.#statusTTL(status, index);\n                }\n                return true;\n            }\n            else if (status) {\n                status.has = 'stale';\n                this.#statusTTL(status, index);\n            }\n        }\n        else if (status) {\n            status.has = 'miss';\n        }\n        return false;\n    }\n    /**\n     * Like {@link LRUCache#get} but doesn't update recency or delete stale\n     * items.\n     *\n     * Returns `undefined` if the item is stale, unless\n     * {@link LRUCache.OptionsBase.allowStale} is set.\n     */\n    peek(k, peekOptions = {}) {\n        const { allowStale = this.allowStale } = peekOptions;\n        const index = this.#keyMap.get(k);\n        if (index !== undefined &&\n            (allowStale || !this.#isStale(index))) {\n            const v = this.#valList[index];\n            // either stale and allowed, or forcing a refresh of non-stale value\n            return this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;\n        }\n    }\n    #backgroundFetch(k, index, options, context) {\n        const v = index === undefined ? undefined : this.#valList[index];\n        if (this.#isBackgroundFetch(v)) {\n            return v;\n        }\n        const ac = new AC();\n        const { signal } = options;\n        // when/if our AC signals, then stop listening to theirs.\n        signal?.addEventListener('abort', () => ac.abort(signal.reason), {\n            signal: ac.signal,\n        });\n        const fetchOpts = {\n            signal: ac.signal,\n            options,\n            context,\n        };\n        const cb = (v, updateCache = false) => {\n            const { aborted } = ac.signal;\n            const ignoreAbort = options.ignoreFetchAbort && v !== undefined;\n            if (options.status) {\n                if (aborted && !updateCache) {\n                    options.status.fetchAborted = true;\n                    options.status.fetchError = ac.signal.reason;\n                    if (ignoreAbort)\n                        options.status.fetchAbortIgnored = true;\n                }\n                else {\n                    options.status.fetchResolved = true;\n                }\n            }\n            if (aborted && !ignoreAbort && !updateCache) {\n                return fetchFail(ac.signal.reason);\n            }\n            // either we didn't abort, and are still here, or we did, and ignored\n            const bf = p;\n            if (this.#valList[index] === p) {\n                if (v === undefined) {\n                    if (bf.__staleWhileFetching) {\n                        this.#valList[index] = bf.__staleWhileFetching;\n                    }\n                    else {\n                        this.delete(k);\n                    }\n                }\n                else {\n                    if (options.status)\n                        options.status.fetchUpdated = true;\n                    this.set(k, v, fetchOpts.options);\n                }\n            }\n            return v;\n        };\n        const eb = (er) => {\n            if (options.status) {\n                options.status.fetchRejected = true;\n                options.status.fetchError = er;\n            }\n            return fetchFail(er);\n        };\n        const fetchFail = (er) => {\n            const { aborted } = ac.signal;\n            const allowStaleAborted = aborted && options.allowStaleOnFetchAbort;\n            const allowStale = allowStaleAborted || options.allowStaleOnFetchRejection;\n            const noDelete = allowStale || options.noDeleteOnFetchRejection;\n            const bf = p;\n            if (this.#valList[index] === p) {\n                // if we allow stale on fetch rejections, then we need to ensure that\n                // the stale value is not removed from the cache when the fetch fails.\n                const del = !noDelete || bf.__staleWhileFetching === undefined;\n                if (del) {\n                    this.delete(k);\n                }\n                else if (!allowStaleAborted) {\n                    // still replace the *promise* with the stale value,\n                    // since we are done with the promise at this point.\n                    // leave it untouched if we're still waiting for an\n                    // aborted background fetch that hasn't yet returned.\n                    this.#valList[index] = bf.__staleWhileFetching;\n                }\n            }\n            if (allowStale) {\n                if (options.status && bf.__staleWhileFetching !== undefined) {\n                    options.status.returnedStale = true;\n                }\n                return bf.__staleWhileFetching;\n            }\n            else if (bf.__returned === bf) {\n                throw er;\n            }\n        };\n        const pcall = (res, rej) => {\n            const fmp = this.#fetchMethod?.(k, v, fetchOpts);\n            if (fmp && fmp instanceof Promise) {\n                fmp.then(v => res(v === undefined ? undefined : v), rej);\n            }\n            // ignored, we go until we finish, regardless.\n            // defer check until we are actually aborting,\n            // so fetchMethod can override.\n            ac.signal.addEventListener('abort', () => {\n                if (!options.ignoreFetchAbort ||\n                    options.allowStaleOnFetchAbort) {\n                    res(undefined);\n                    // when it eventually resolves, update the cache.\n                    if (options.allowStaleOnFetchAbort) {\n                        res = v => cb(v, true);\n                    }\n                }\n            });\n        };\n        if (options.status)\n            options.status.fetchDispatched = true;\n        const p = new Promise(pcall).then(cb, eb);\n        const bf = Object.assign(p, {\n            __abortController: ac,\n            __staleWhileFetching: v,\n            __returned: undefined,\n        });\n        if (index === undefined) {\n            // internal, don't expose status.\n            this.set(k, bf, { ...fetchOpts.options, status: undefined });\n            index = this.#keyMap.get(k);\n        }\n        else {\n            this.#valList[index] = bf;\n        }\n        return bf;\n    }\n    #isBackgroundFetch(p) {\n        if (!this.#hasFetchMethod)\n            return false;\n        const b = p;\n        return (!!b &&\n            b instanceof Promise &&\n            b.hasOwnProperty('__staleWhileFetching') &&\n            b.__abortController instanceof AC);\n    }\n    async fetch(k, fetchOptions = {}) {\n        const { \n        // get options\n        allowStale = this.allowStale, updateAgeOnGet = this.updateAgeOnGet, noDeleteOnStaleGet = this.noDeleteOnStaleGet, \n        // set options\n        ttl = this.ttl, noDisposeOnSet = this.noDisposeOnSet, size = 0, sizeCalculation = this.sizeCalculation, noUpdateTTL = this.noUpdateTTL, \n        // fetch exclusive options\n        noDeleteOnFetchRejection = this.noDeleteOnFetchRejection, allowStaleOnFetchRejection = this.allowStaleOnFetchRejection, ignoreFetchAbort = this.ignoreFetchAbort, allowStaleOnFetchAbort = this.allowStaleOnFetchAbort, context, forceRefresh = false, status, signal, } = fetchOptions;\n        if (!this.#hasFetchMethod) {\n            if (status)\n                status.fetch = 'get';\n            return this.get(k, {\n                allowStale,\n                updateAgeOnGet,\n                noDeleteOnStaleGet,\n                status,\n            });\n        }\n        const options = {\n            allowStale,\n            updateAgeOnGet,\n            noDeleteOnStaleGet,\n            ttl,\n            noDisposeOnSet,\n            size,\n            sizeCalculation,\n            noUpdateTTL,\n            noDeleteOnFetchRejection,\n            allowStaleOnFetchRejection,\n            allowStaleOnFetchAbort,\n            ignoreFetchAbort,\n            status,\n            signal,\n        };\n        let index = this.#keyMap.get(k);\n        if (index === undefined) {\n            if (status)\n                status.fetch = 'miss';\n            const p = this.#backgroundFetch(k, index, options, context);\n            return (p.__returned = p);\n        }\n        else {\n            // in cache, maybe already fetching\n            const v = this.#valList[index];\n            if (this.#isBackgroundFetch(v)) {\n                const stale = allowStale && v.__staleWhileFetching !== undefined;\n                if (status) {\n                    status.fetch = 'inflight';\n                    if (stale)\n                        status.returnedStale = true;\n                }\n                return stale ? v.__staleWhileFetching : (v.__returned = v);\n            }\n            // if we force a refresh, that means do NOT serve the cached value,\n            // unless we are already in the process of refreshing the cache.\n            const isStale = this.#isStale(index);\n            if (!forceRefresh && !isStale) {\n                if (status)\n                    status.fetch = 'hit';\n                this.#moveToTail(index);\n                if (updateAgeOnGet) {\n                    this.#updateItemAge(index);\n                }\n                if (status)\n                    this.#statusTTL(status, index);\n                return v;\n            }\n            // ok, it is stale or a forced refresh, and not already fetching.\n            // refresh the cache.\n            const p = this.#backgroundFetch(k, index, options, context);\n            const hasStale = p.__staleWhileFetching !== undefined;\n            const staleVal = hasStale && allowStale;\n            if (status) {\n                status.fetch = isStale ? 'stale' : 'refresh';\n                if (staleVal && isStale)\n                    status.returnedStale = true;\n            }\n            return staleVal ? p.__staleWhileFetching : (p.__returned = p);\n        }\n    }\n    /**\n     * Return a value from the cache. Will update the recency of the cache\n     * entry found.\n     *\n     * If the key is not found, get() will return `undefined`.\n     */\n    get(k, getOptions = {}) {\n        const { allowStale = this.allowStale, updateAgeOnGet = this.updateAgeOnGet, noDeleteOnStaleGet = this.noDeleteOnStaleGet, status, } = getOptions;\n        const index = this.#keyMap.get(k);\n        if (index !== undefined) {\n            const value = this.#valList[index];\n            const fetching = this.#isBackgroundFetch(value);\n            if (status)\n                this.#statusTTL(status, index);\n            if (this.#isStale(index)) {\n                if (status)\n                    status.get = 'stale';\n                // delete only if not an in-flight background fetch\n                if (!fetching) {\n                    if (!noDeleteOnStaleGet) {\n                        this.delete(k);\n                    }\n                    if (status && allowStale)\n                        status.returnedStale = true;\n                    return allowStale ? value : undefined;\n                }\n                else {\n                    if (status &&\n                        allowStale &&\n                        value.__staleWhileFetching !== undefined) {\n                        status.returnedStale = true;\n                    }\n                    return allowStale ? value.__staleWhileFetching : undefined;\n                }\n            }\n            else {\n                if (status)\n                    status.get = 'hit';\n                // if we're currently fetching it, we don't actually have it yet\n                // it's not stale, which means this isn't a staleWhileRefetching.\n                // If it's not stale, and fetching, AND has a __staleWhileFetching\n                // value, then that means the user fetched with {forceRefresh:true},\n                // so it's safe to return that value.\n                if (fetching) {\n                    return value.__staleWhileFetching;\n                }\n                this.#moveToTail(index);\n                if (updateAgeOnGet) {\n                    this.#updateItemAge(index);\n                }\n                return value;\n            }\n        }\n        else if (status) {\n            status.get = 'miss';\n        }\n    }\n    #connect(p, n) {\n        this.#prev[n] = p;\n        this.#next[p] = n;\n    }\n    #moveToTail(index) {\n        // if tail already, nothing to do\n        // if head, move head to next[index]\n        // else\n        //   move next[prev[index]] to next[index] (head has no prev)\n        //   move prev[next[index]] to prev[index]\n        // prev[index] = tail\n        // next[tail] = index\n        // tail = index\n        if (index !== this.#tail) {\n            if (index === this.#head) {\n                this.#head = this.#next[index];\n            }\n            else {\n                this.#connect(this.#prev[index], this.#next[index]);\n            }\n            this.#connect(this.#tail, index);\n            this.#tail = index;\n        }\n    }\n    /**\n     * Deletes a key out of the cache.\n     * Returns true if the key was deleted, false otherwise.\n     */\n    delete(k) {\n        let deleted = false;\n        if (this.#size !== 0) {\n            const index = this.#keyMap.get(k);\n            if (index !== undefined) {\n                deleted = true;\n                if (this.#size === 1) {\n                    this.clear();\n                }\n                else {\n                    this.#removeItemSize(index);\n                    const v = this.#valList[index];\n                    if (this.#isBackgroundFetch(v)) {\n                        v.__abortController.abort(new Error('deleted'));\n                    }\n                    else if (this.#hasDispose || this.#hasDisposeAfter) {\n                        if (this.#hasDispose) {\n                            this.#dispose?.(v, k, 'delete');\n                        }\n                        if (this.#hasDisposeAfter) {\n                            this.#disposed?.push([v, k, 'delete']);\n                        }\n                    }\n                    this.#keyMap.delete(k);\n                    this.#keyList[index] = undefined;\n                    this.#valList[index] = undefined;\n                    if (index === this.#tail) {\n                        this.#tail = this.#prev[index];\n                    }\n                    else if (index === this.#head) {\n                        this.#head = this.#next[index];\n                    }\n                    else {\n                        this.#next[this.#prev[index]] = this.#next[index];\n                        this.#prev[this.#next[index]] = this.#prev[index];\n                    }\n                    this.#size--;\n                    this.#free.push(index);\n                }\n            }\n        }\n        if (this.#hasDisposeAfter && this.#disposed?.length) {\n            const dt = this.#disposed;\n            let task;\n            while ((task = dt?.shift())) {\n                this.#disposeAfter?.(...task);\n            }\n        }\n        return deleted;\n    }\n    /**\n     * Clear the cache entirely, throwing away all values.\n     */\n    clear() {\n        for (const index of this.#rindexes({ allowStale: true })) {\n            const v = this.#valList[index];\n            if (this.#isBackgroundFetch(v)) {\n                v.__abortController.abort(new Error('deleted'));\n            }\n            else {\n                const k = this.#keyList[index];\n                if (this.#hasDispose) {\n                    this.#dispose?.(v, k, 'delete');\n                }\n                if (this.#hasDisposeAfter) {\n                    this.#disposed?.push([v, k, 'delete']);\n                }\n            }\n        }\n        this.#keyMap.clear();\n        this.#valList.fill(undefined);\n        this.#keyList.fill(undefined);\n        if (this.#ttls && this.#starts) {\n            this.#ttls.fill(0);\n            this.#starts.fill(0);\n        }\n        if (this.#sizes) {\n            this.#sizes.fill(0);\n        }\n        this.#head = 0;\n        this.#tail = 0;\n        this.#free.length = 0;\n        this.#calculatedSize = 0;\n        this.#size = 0;\n        if (this.#hasDisposeAfter && this.#disposed) {\n            const dt = this.#disposed;\n            let task;\n            while ((task = dt?.shift())) {\n                this.#disposeAfter?.(...task);\n            }\n        }\n    }\n}\n//# sourceMappingURL=index.js.map","import { chain, difference } from 'lodash';\nimport { LRUCache } from 'lru-cache';\nimport Prism, { Grammar } from 'prismjs';\n\nimport { dateTime, AbsoluteTimeRange, LanguageProvider, HistoryItem, AbstractQuery } from '@grafana/data';\nimport { CompletionItem, TypeaheadInput, TypeaheadOutput, CompletionItemGroup } from '@grafana/ui';\nimport {\n  extractLabelMatchers,\n  parseSelector,\n  processLabels,\n  toPromLikeExpr,\n} from 'app/plugins/datasource/prometheus/language_utils';\n\nimport { LokiDatasource } from './datasource';\nimport {\n  extractLabelKeysFromDataFrame,\n  extractLogParserFromDataFrame,\n  extractUnwrapLabelKeysFromDataFrame,\n} from './responseUtils';\nimport syntax, { FUNCTIONS, PIPE_PARSERS, PIPE_OPERATORS } from './syntax';\nimport { ParserAndLabelKeysResult, LokiQuery, LokiQueryType } from './types';\n\nconst DEFAULT_KEYS = ['job', 'namespace'];\nconst EMPTY_SELECTOR = '{}';\nconst HISTORY_ITEM_COUNT = 10;\nconst HISTORY_COUNT_CUTOFF = 1000 * 60 * 60 * 24; // 24h\nconst NS_IN_MS = 1000000;\n\n// When changing RATE_RANGES, check if Prometheus/PromQL ranges should be changed too\n// @see public/app/plugins/datasource/prometheus/promql.ts\nconst RATE_RANGES: CompletionItem[] = [\n  { label: '$__auto', sortValue: '$__auto' },\n  { label: '1m', sortValue: '00:01:00' },\n  { label: '5m', sortValue: '00:05:00' },\n  { label: '10m', sortValue: '00:10:00' },\n  { label: '30m', sortValue: '00:30:00' },\n  { label: '1h', sortValue: '01:00:00' },\n  { label: '1d', sortValue: '24:00:00' },\n];\n\nexport const LABEL_REFRESH_INTERVAL = 1000 * 30; // 30sec\n\nconst wrapLabel = (label: string) => ({ label, filterText: `\\\"${label}\\\"` });\n\nexport type LokiHistoryItem = HistoryItem<LokiQuery>;\n\ntype TypeaheadContext = {\n  history?: LokiHistoryItem[];\n  absoluteRange?: AbsoluteTimeRange;\n};\n\nexport function addHistoryMetadata(item: CompletionItem, history: LokiHistoryItem[]): CompletionItem {\n  const cutoffTs = Date.now() - HISTORY_COUNT_CUTOFF;\n  const historyForItem = history.filter((h) => h.ts > cutoffTs && h.query.expr === item.label);\n  let hint = `Queried ${historyForItem.length} times in the last 24h.`;\n  const recent = historyForItem[0];\n\n  if (recent) {\n    const lastQueried = dateTime(recent.ts).fromNow();\n    hint = `${hint} Last queried ${lastQueried}.`;\n  }\n\n  return {\n    ...item,\n    documentation: hint,\n  };\n}\n\nexport default class LokiLanguageProvider extends LanguageProvider {\n  labelKeys: string[];\n  labelFetchTs: number;\n  started = false;\n  datasource: LokiDatasource;\n  lookupsDisabled = false; // Dynamically set to true for big/slow instances\n\n  /**\n   *  Cache for labels of series. This is bit simplistic in the sense that it just counts responses each as a 1 and does\n   *  not account for different size of a response. If that is needed a `length` function can be added in the options.\n   *  10 as a max size is totally arbitrary right now.\n   */\n  private seriesCache = new LRUCache<string, Record<string, string[]>>({ max: 10 });\n  private labelsCache = new LRUCache<string, string[]>({ max: 10 });\n\n  constructor(datasource: LokiDatasource, initialValues?: any) {\n    super();\n\n    this.datasource = datasource;\n    this.labelKeys = [];\n    this.labelFetchTs = 0;\n\n    Object.assign(this, initialValues);\n  }\n\n  // Strip syntax chars\n  cleanText = (s: string) => s.replace(/[{}[\\]=\"(),!~+\\-*/^%\\|]/g, '').trim();\n\n  getSyntax(): Grammar {\n    return syntax;\n  }\n\n  request = async (url: string, params?: any): Promise<any> => {\n    try {\n      return await this.datasource.metadataRequest(url, params);\n    } catch (error) {\n      console.error(error);\n    }\n\n    return undefined;\n  };\n\n  /**\n   * Initialise the language provider by fetching set of labels. Without this initialisation the provider would return\n   * just a set of hardcoded default labels on provideCompletionItems or a recent queries from history.\n   */\n  start = () => {\n    if (!this.startTask) {\n      this.startTask = this.fetchLabels().then(() => {\n        this.started = true;\n        return [];\n      });\n    }\n\n    return this.startTask;\n  };\n\n  getLabelKeys(): string[] {\n    return this.labelKeys;\n  }\n\n  /**\n   * Return suggestions based on input that can be then plugged into a typeahead dropdown.\n   * Keep this DOM-free for testing\n   * @param input\n   * @param context Is optional in types but is required in case we are doing getLabelCompletionItems\n   * @param context.absoluteRange Required in case we are doing getLabelCompletionItems\n   * @param context.history Optional used only in getEmptyCompletionItems\n   */\n  async provideCompletionItems(input: TypeaheadInput, context?: TypeaheadContext): Promise<TypeaheadOutput> {\n    const { wrapperClasses, value, prefix, text } = input;\n    const emptyResult: TypeaheadOutput = { suggestions: [] };\n\n    if (!value) {\n      return emptyResult;\n    }\n\n    // Local text properties\n    const empty = value?.document.text.length === 0;\n    const selectedLines = value.document.getTextsAtRange(value.selection);\n    const currentLine = selectedLines.size === 1 ? selectedLines.first().getText() : null;\n\n    const nextCharacter = currentLine ? currentLine[value.selection.anchor.offset] : null;\n\n    // Syntax spans have 3 classes by default. More indicate a recognized token\n    const tokenRecognized = wrapperClasses.length > 3;\n\n    // Non-empty prefix, but not inside known token\n    const prefixUnrecognized = prefix && !tokenRecognized;\n\n    // Prevent suggestions in `function(|suffix)`\n    const noSuffix = !nextCharacter || nextCharacter === ')';\n\n    // Prefix is safe if it does not immediately follow a complete expression and has no text after it\n    const safePrefix = prefix && !text.match(/^['\"~=\\]})\\s]+$/) && noSuffix;\n\n    // About to type next operand if preceded by binary operator\n    const operatorsPattern = /[+\\-*/^%]/;\n    const isNextOperand = text.match(operatorsPattern);\n\n    // Determine candidates by CSS context\n    if (wrapperClasses.includes('context-range')) {\n      // Suggestions for metric[|]\n      return this.getRangeCompletionItems();\n    } else if (wrapperClasses.includes('context-labels')) {\n      // Suggestions for {|} and {foo=|}\n      return await this.getLabelCompletionItems(input);\n    } else if (wrapperClasses.includes('context-pipe')) {\n      return this.getPipeCompletionItem();\n    } else if (empty) {\n      // Suggestions for empty query field\n      return this.getEmptyCompletionItems(context);\n    } else if (prefixUnrecognized && noSuffix && !isNextOperand) {\n      // Show term suggestions in a couple of scenarios\n      return this.getBeginningCompletionItems(context);\n    } else if (prefixUnrecognized && safePrefix) {\n      // Show term suggestions in a couple of scenarios\n      return this.getTermCompletionItems();\n    }\n\n    return emptyResult;\n  }\n\n  getBeginningCompletionItems = (context?: TypeaheadContext): TypeaheadOutput => {\n    return {\n      suggestions: [...this.getEmptyCompletionItems(context).suggestions, ...this.getTermCompletionItems().suggestions],\n    };\n  };\n\n  getEmptyCompletionItems(context?: TypeaheadContext): TypeaheadOutput {\n    const history = context?.history;\n    const suggestions = [];\n\n    if (history?.length) {\n      const historyItems = chain(history)\n        .map((h) => h.query.expr)\n        .filter()\n        .uniq()\n        .take(HISTORY_ITEM_COUNT)\n        .map(wrapLabel)\n        .map((item) => addHistoryMetadata(item, history))\n        .value();\n\n      suggestions.push({\n        prefixMatch: true,\n        skipSort: true,\n        label: 'History',\n        items: historyItems,\n      });\n    }\n\n    return { suggestions };\n  }\n\n  getTermCompletionItems = (): TypeaheadOutput => {\n    const suggestions = [];\n\n    suggestions.push({\n      prefixMatch: true,\n      label: 'Functions',\n      items: FUNCTIONS.map((suggestion) => ({ ...suggestion, kind: 'function' })),\n    });\n\n    return { suggestions };\n  };\n\n  getPipeCompletionItem = (): TypeaheadOutput => {\n    const suggestions = [];\n\n    suggestions.push({\n      label: 'Operators',\n      items: PIPE_OPERATORS.map((suggestion) => ({ ...suggestion, kind: 'operators' })),\n    });\n\n    suggestions.push({\n      label: 'Parsers',\n      items: PIPE_PARSERS.map((suggestion) => ({ ...suggestion, kind: 'parsers' })),\n    });\n\n    return { suggestions };\n  };\n\n  getRangeCompletionItems(): TypeaheadOutput {\n    return {\n      context: 'context-range',\n      suggestions: [\n        {\n          label: 'Range vector',\n          items: [...RATE_RANGES],\n        },\n      ],\n    };\n  }\n\n  async getLabelCompletionItems({ text, wrapperClasses, labelKey, value }: TypeaheadInput): Promise<TypeaheadOutput> {\n    let context = 'context-labels';\n    const suggestions: CompletionItemGroup[] = [];\n    if (!value) {\n      return { context, suggestions: [] };\n    }\n    const line = value.anchorBlock.getText();\n    const cursorOffset = value.selection.anchor.offset;\n    const isValueStart = text.match(/^(=|=~|!=|!~)/);\n\n    // Get normalized selector\n    let selector;\n    let parsedSelector;\n    try {\n      parsedSelector = parseSelector(line, cursorOffset);\n      selector = parsedSelector.selector;\n    } catch {\n      selector = EMPTY_SELECTOR;\n    }\n\n    if (!labelKey && selector === EMPTY_SELECTOR) {\n      // start task gets all labels\n      await this.start();\n      const allLabels = this.getLabelKeys();\n      return { context, suggestions: [{ label: `Labels`, items: allLabels.map(wrapLabel) }] };\n    }\n\n    const existingKeys = parsedSelector ? parsedSelector.labelKeys : [];\n\n    let labelValues;\n    // Query labels for selector\n    if (selector) {\n      if (selector === EMPTY_SELECTOR && labelKey) {\n        const labelValuesForKey = await this.getLabelValues(labelKey);\n        labelValues = { [labelKey]: labelValuesForKey };\n      } else {\n        labelValues = await this.getSeriesLabels(selector);\n      }\n    }\n\n    if (!labelValues) {\n      console.warn(`Server did not return any values for selector = ${selector}`);\n      return { context, suggestions };\n    }\n\n    if ((text && isValueStart) || wrapperClasses.includes('attr-value')) {\n      // Label values\n      if (labelKey && labelValues[labelKey]) {\n        context = 'context-label-values';\n        suggestions.push({\n          label: `Label values for \"${labelKey}\"`,\n          // Filter to prevent previously selected values from being repeatedly suggested\n          items: labelValues[labelKey].map(wrapLabel).filter(({ filterText }) => filterText !== text),\n        });\n      }\n    } else {\n      // Label keys\n      const labelKeys = labelValues ? Object.keys(labelValues) : DEFAULT_KEYS;\n      if (labelKeys) {\n        const possibleKeys = difference(labelKeys, existingKeys);\n        if (possibleKeys.length) {\n          const newItems = possibleKeys.map((key) => ({ label: key }));\n          const newSuggestion: CompletionItemGroup = { label: `Labels`, items: newItems };\n          suggestions.push(newSuggestion);\n        }\n      }\n    }\n\n    return { context, suggestions };\n  }\n\n  importFromAbstractQuery(labelBasedQuery: AbstractQuery): LokiQuery {\n    return {\n      refId: labelBasedQuery.refId,\n      expr: toPromLikeExpr(labelBasedQuery),\n      queryType: LokiQueryType.Range,\n    };\n  }\n\n  exportToAbstractQuery(query: LokiQuery): AbstractQuery {\n    const lokiQuery = query.expr;\n    if (!lokiQuery || lokiQuery.length === 0) {\n      return { refId: query.refId, labelMatchers: [] };\n    }\n    const tokens = Prism.tokenize(lokiQuery, syntax);\n    return {\n      refId: query.refId,\n      labelMatchers: extractLabelMatchers(tokens),\n    };\n  }\n\n  async getSeriesLabels(selector: string) {\n    if (this.lookupsDisabled) {\n      return undefined;\n    }\n    try {\n      return await this.fetchSeriesLabels(selector);\n    } catch (error) {\n      // TODO: better error handling\n      console.error(error);\n      return undefined;\n    }\n  }\n\n  /**\n   * Fetch all label keys\n   * This asynchronous function returns all available label keys from the data source.\n   * It returns a promise that resolves to an array of strings containing the label keys.\n   *\n   * @returns A promise containing an array of label keys.\n   * @throws An error if the fetch operation fails.\n   */\n  async fetchLabels(): Promise<string[]> {\n    const url = 'labels';\n    const timeRange = this.datasource.getTimeRangeParams();\n    this.labelFetchTs = Date.now().valueOf();\n\n    const res = await this.request(url, timeRange);\n    if (Array.isArray(res)) {\n      const labels = res\n        .slice()\n        .sort()\n        .filter((label) => label !== '__name__');\n      this.labelKeys = labels;\n      return this.labelKeys;\n    }\n\n    return [];\n  }\n\n  /**\n   * Fetch series labels for a selector\n   *\n   * This method fetches labels for a given stream selector, such as `{job=\"grafana\"}`.\n   * It returns a promise that resolves to a record mapping label names to their corresponding values.\n   *\n   * @param streamSelector - The stream selector for which you want to retrieve labels.\n   * @returns A promise containing a record of label names and their values.\n   * @throws An error if the fetch operation fails.\n   */\n  fetchSeriesLabels = async (streamSelector: string): Promise<Record<string, string[]>> => {\n    const interpolatedMatch = this.datasource.interpolateString(streamSelector);\n    const url = 'series';\n    const { start, end } = this.datasource.getTimeRangeParams();\n\n    const cacheKey = this.generateCacheKey(url, start, end, interpolatedMatch);\n    let value = this.seriesCache.get(cacheKey);\n    if (!value) {\n      const params = { 'match[]': interpolatedMatch, start, end };\n      const data = await this.request(url, params);\n      const { values } = processLabels(data);\n      value = values;\n      this.seriesCache.set(cacheKey, value);\n    }\n    return value;\n  };\n\n  /**\n   * Fetch series for a selector. Use this for raw results. Use fetchSeriesLabels() to get labels.\n   * @param match\n   */\n  fetchSeries = async (match: string): Promise<Array<Record<string, string>>> => {\n    const url = 'series';\n    const { start, end } = this.datasource.getTimeRangeParams();\n    const params = { 'match[]': match, start, end };\n    return await this.request(url, params);\n  };\n\n  // Cache key is a bit different here. We round up to a minute the intervals.\n  // The rounding may seem strange but makes relative intervals like now-1h less prone to need separate request every\n  // millisecond while still actually getting all the keys for the correct interval. This still can create problems\n  // when user does not the newest values for a minute if already cached.\n  generateCacheKey(url: string, start: number, end: number, param: string): string {\n    return [url, this.roundTime(start), this.roundTime(end), param].join();\n  }\n\n  // Round nanos epoch to nearest 5 minute interval\n  roundTime(nanos: number): number {\n    return nanos ? Math.floor(nanos / NS_IN_MS / 1000 / 60 / 5) : 0;\n  }\n\n  async getLabelValues(key: string): Promise<string[]> {\n    return await this.fetchLabelValues(key);\n  }\n\n  /**\n   * Fetch label values\n   *\n   * This asynchronous function fetches values associated with a specified label name.\n   * It returns a promise that resolves to an array of strings containing the label values.\n   *\n   * @param labelName - The name of the label for which you want to retrieve values.\n   * @returns A promise containing an array of label values.\n   * @throws An error if the fetch operation fails.\n   */\n  async fetchLabelValues(labelName: string): Promise<string[]> {\n    const interpolatedKey = encodeURIComponent(this.datasource.interpolateString(labelName));\n\n    const url = `label/${interpolatedKey}/values`;\n    const rangeParams = this.datasource.getTimeRangeParams();\n    const { start, end } = rangeParams;\n\n    const cacheKey = this.generateCacheKey(url, start, end, interpolatedKey);\n    const params = { start, end };\n\n    let labelValues = this.labelsCache.get(cacheKey);\n    if (!labelValues) {\n      // Clear value when requesting new one. Empty object being truthy also makes sure we don't request twice.\n      this.labelsCache.set(cacheKey, []);\n      const res = await this.request(url, params);\n      if (Array.isArray(res)) {\n        labelValues = res.slice().sort();\n        this.labelsCache.set(cacheKey, labelValues);\n      }\n    }\n\n    return labelValues ?? [];\n  }\n\n  /**\n   * Get parser and label keys for a selector\n   *\n   * This asynchronous function is used to fetch parsers and label keys for a selected log stream based on sampled lines.\n   * It returns a promise that resolves to an object with the following properties:\n   *\n   * - `extractedLabelKeys`: An array of available label keys associated with the log stream.\n   * - `hasJSON`: A boolean indicating whether JSON parsing is available for the stream.\n   * - `hasLogfmt`: A boolean indicating whether Logfmt parsing is available for the stream.\n   * - `hasPack`: A boolean indicating whether Pack parsing is available for the stream.\n   * - `unwrapLabelKeys`: An array of label keys that can be used for unwrapping log data.\n   *\n   * @param streamSelector - The selector for the log stream you want to analyze.\n   * @returns A promise containing an object with parser and label key information.\n   * @throws An error if the fetch operation fails.\n   */\n  async getParserAndLabelKeys(streamSelector: string): Promise<ParserAndLabelKeysResult> {\n    const series = await this.datasource.getDataSamples({ expr: streamSelector, refId: 'data-samples' });\n\n    if (!series.length) {\n      return { extractedLabelKeys: [], unwrapLabelKeys: [], hasJSON: false, hasLogfmt: false, hasPack: false };\n    }\n\n    const { hasLogfmt, hasJSON, hasPack } = extractLogParserFromDataFrame(series[0]);\n\n    return {\n      extractedLabelKeys: extractLabelKeysFromDataFrame(series[0]),\n      unwrapLabelKeys: extractUnwrapLabelKeysFromDataFrame(series[0]),\n      hasJSON,\n      hasPack,\n      hasLogfmt,\n    };\n  }\n}\n","import { __assign, __extends } from \"tslib\";\nimport { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { ReplaySubject } from '../../ReplaySubject';\nvar DEFAULT_WEBSOCKET_CONFIG = {\n    url: '',\n    deserializer: function (e) { return JSON.parse(e.data); },\n    serializer: function (value) { return JSON.stringify(value); },\n};\nvar WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT = 'WebSocketSubject.error must be called with an object with an error code, and an optional reason: { code: number, reason: string }';\nvar WebSocketSubject = (function (_super) {\n    __extends(WebSocketSubject, _super);\n    function WebSocketSubject(urlConfigOrSource, destination) {\n        var _this = _super.call(this) || this;\n        _this._socket = null;\n        if (urlConfigOrSource instanceof Observable) {\n            _this.destination = destination;\n            _this.source = urlConfigOrSource;\n        }\n        else {\n            var config = (_this._config = __assign({}, DEFAULT_WEBSOCKET_CONFIG));\n            _this._output = new Subject();\n            if (typeof urlConfigOrSource === 'string') {\n                config.url = urlConfigOrSource;\n            }\n            else {\n                for (var key in urlConfigOrSource) {\n                    if (urlConfigOrSource.hasOwnProperty(key)) {\n                        config[key] = urlConfigOrSource[key];\n                    }\n                }\n            }\n            if (!config.WebSocketCtor && WebSocket) {\n                config.WebSocketCtor = WebSocket;\n            }\n            else if (!config.WebSocketCtor) {\n                throw new Error('no WebSocket constructor can be found');\n            }\n            _this.destination = new ReplaySubject();\n        }\n        return _this;\n    }\n    WebSocketSubject.prototype.lift = function (operator) {\n        var sock = new WebSocketSubject(this._config, this.destination);\n        sock.operator = operator;\n        sock.source = this;\n        return sock;\n    };\n    WebSocketSubject.prototype._resetState = function () {\n        this._socket = null;\n        if (!this.source) {\n            this.destination = new ReplaySubject();\n        }\n        this._output = new Subject();\n    };\n    WebSocketSubject.prototype.multiplex = function (subMsg, unsubMsg, messageFilter) {\n        var self = this;\n        return new Observable(function (observer) {\n            try {\n                self.next(subMsg());\n            }\n            catch (err) {\n                observer.error(err);\n            }\n            var subscription = self.subscribe({\n                next: function (x) {\n                    try {\n                        if (messageFilter(x)) {\n                            observer.next(x);\n                        }\n                    }\n                    catch (err) {\n                        observer.error(err);\n                    }\n                },\n                error: function (err) { return observer.error(err); },\n                complete: function () { return observer.complete(); },\n            });\n            return function () {\n                try {\n                    self.next(unsubMsg());\n                }\n                catch (err) {\n                    observer.error(err);\n                }\n                subscription.unsubscribe();\n            };\n        });\n    };\n    WebSocketSubject.prototype._connectSocket = function () {\n        var _this = this;\n        var _a = this._config, WebSocketCtor = _a.WebSocketCtor, protocol = _a.protocol, url = _a.url, binaryType = _a.binaryType;\n        var observer = this._output;\n        var socket = null;\n        try {\n            socket = protocol ? new WebSocketCtor(url, protocol) : new WebSocketCtor(url);\n            this._socket = socket;\n            if (binaryType) {\n                this._socket.binaryType = binaryType;\n            }\n        }\n        catch (e) {\n            observer.error(e);\n            return;\n        }\n        var subscription = new Subscription(function () {\n            _this._socket = null;\n            if (socket && socket.readyState === 1) {\n                socket.close();\n            }\n        });\n        socket.onopen = function (evt) {\n            var _socket = _this._socket;\n            if (!_socket) {\n                socket.close();\n                _this._resetState();\n                return;\n            }\n            var openObserver = _this._config.openObserver;\n            if (openObserver) {\n                openObserver.next(evt);\n            }\n            var queue = _this.destination;\n            _this.destination = Subscriber.create(function (x) {\n                if (socket.readyState === 1) {\n                    try {\n                        var serializer = _this._config.serializer;\n                        socket.send(serializer(x));\n                    }\n                    catch (e) {\n                        _this.destination.error(e);\n                    }\n                }\n            }, function (err) {\n                var closingObserver = _this._config.closingObserver;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                if (err && err.code) {\n                    socket.close(err.code, err.reason);\n                }\n                else {\n                    observer.error(new TypeError(WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT));\n                }\n                _this._resetState();\n            }, function () {\n                var closingObserver = _this._config.closingObserver;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                socket.close();\n                _this._resetState();\n            });\n            if (queue && queue instanceof ReplaySubject) {\n                subscription.add(queue.subscribe(_this.destination));\n            }\n        };\n        socket.onerror = function (e) {\n            _this._resetState();\n            observer.error(e);\n        };\n        socket.onclose = function (e) {\n            if (socket === _this._socket) {\n                _this._resetState();\n            }\n            var closeObserver = _this._config.closeObserver;\n            if (closeObserver) {\n                closeObserver.next(e);\n            }\n            if (e.wasClean) {\n                observer.complete();\n            }\n            else {\n                observer.error(e);\n            }\n        };\n        socket.onmessage = function (e) {\n            try {\n                var deserializer = _this._config.deserializer;\n                observer.next(deserializer(e));\n            }\n            catch (err) {\n                observer.error(err);\n            }\n        };\n    };\n    WebSocketSubject.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var source = this.source;\n        if (source) {\n            return source.subscribe(subscriber);\n        }\n        if (!this._socket) {\n            this._connectSocket();\n        }\n        this._output.subscribe(subscriber);\n        subscriber.add(function () {\n            var _socket = _this._socket;\n            if (_this._output.observers.length === 0) {\n                if (_socket && (_socket.readyState === 1 || _socket.readyState === 0)) {\n                    _socket.close();\n                }\n                _this._resetState();\n            }\n        });\n        return subscriber;\n    };\n    WebSocketSubject.prototype.unsubscribe = function () {\n        var _socket = this._socket;\n        if (_socket && (_socket.readyState === 1 || _socket.readyState === 0)) {\n            _socket.close();\n        }\n        this._resetState();\n        _super.prototype.unsubscribe.call(this);\n    };\n    return WebSocketSubject;\n}(AnonymousSubject));\nexport { WebSocketSubject };\n//# sourceMappingURL=WebSocketSubject.js.map","import { WebSocketSubject } from './WebSocketSubject';\nexport function webSocket(urlConfigOrSource) {\n    return new WebSocketSubject(urlConfigOrSource);\n}\n//# sourceMappingURL=webSocket.js.map","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import validate from './validate.js';\n\nfunction parse(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  let v;\n  const arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\nexport default parse;","import { unsafeStringify } from './stringify.js';\nimport parse from './parse.js';\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nexport const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function v35(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    var _namespace;\n\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = parse(namespace);\n    }\n\n    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    let bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (let i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return unsafeStringify(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  } else if (!Array.isArray(bytes)) {\n    // Convert Array-like to Array\n    bytes = Array.prototype.slice.call(bytes);\n  }\n\n  bytes.push(0x80);\n  const l = bytes.length / 4 + 2;\n  const N = Math.ceil(l / 16);\n  const M = new Array(N);\n\n  for (let i = 0; i < N; ++i) {\n    const arr = new Uint32Array(16);\n\n    for (let j = 0; j < 16; ++j) {\n      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];\n    }\n\n    M[i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (let i = 0; i < N; ++i) {\n    const W = new Uint32Array(80);\n\n    for (let t = 0; t < 16; ++t) {\n      W[t] = M[i][t];\n    }\n\n    for (let t = 16; t < 80; ++t) {\n      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n    }\n\n    let a = H[0];\n    let b = H[1];\n    let c = H[2];\n    let d = H[3];\n    let e = H[4];\n\n    for (let t = 0; t < 80; ++t) {\n      const s = Math.floor(t / 20);\n      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nexport default sha1;","import v35 from './v35.js';\nimport sha1 from './sha1.js';\nconst v5 = v35('v5', 0x50, sha1);\nexport default v5;","import { v5 as uuidv5 } from 'uuid';\n\nimport { MutableDataFrame } from '@grafana/data';\n\nimport { LokiStreamResult, LokiTailResponse } from './types';\n\nconst UUID_NAMESPACE = '6ec946da-0f49-47a8-983a-1d76d17e7c92';\n\n/**\n * Transform LokiResponse data and appends it to MutableDataFrame. Used for streaming where the dataFrame can be\n * a CircularDataFrame creating a fixed size rolling buffer.\n * TODO: Probably could be unified with the logStreamToDataFrame function.\n * @param response\n * @param data Needs to have ts, line, labels, id as fields\n */\nexport function appendResponseToBufferedData(response: LokiTailResponse, data: MutableDataFrame) {\n  // Should we do anything with: response.dropped_entries?\n\n  const streams: LokiStreamResult[] = response.streams;\n  if (!streams || !streams.length) {\n    return;\n  }\n\n  const tsField = data.fields[0];\n  const lineField = data.fields[1];\n  const idField = data.fields[2];\n\n  // We are comparing used ids only within the received stream. This could be a problem if the same line + labels + nanosecond timestamp came in 2 separate batches.\n  // As this is very unlikely, and the result would only affect live-tailing css animation we have decided to not compare all received uids from data param as this would slow down processing.\n  const usedUids: Record<string, number> = {};\n\n  for (const stream of streams) {\n    // Find unique labels\n    const allLabelsString = Object.entries(stream.stream)\n      .map(([key, val]) => `${key}=\"${val}\"`)\n      .sort()\n      .join('');\n\n    // Add each line\n    for (const [ts, line] of stream.values) {\n      tsField.values.push(new Date(parseInt(ts.slice(0, -6), 10)).toISOString());\n      lineField.values.push(line);\n      idField.values.push(createUid(ts, allLabelsString, line, usedUids, data.refId));\n    }\n  }\n}\n\nfunction createUid(\n  ts: string,\n  labelsString: string,\n  line: string,\n  usedUids: Record<string, number>,\n  refId?: string\n): string {\n  // Generate id as hashed nanosecond timestamp, labels and line (this does not have to be unique)\n  let id = uuidv5(`${ts}_${labelsString}_${line}`, UUID_NAMESPACE);\n\n  // Check if generated id is unique\n  // If not and we've already used it, append its count after it\n  if (id in usedUids) {\n    // Increase the count\n    const newCount = usedUids[id] + 1;\n    usedUids[id] = newCount;\n    // Append count to generated id to make it unique\n    id = `${id}_${newCount}`;\n  } else {\n    // If id is unique and wasn't used, add it to usedUids and start count at 0\n    usedUids[id] = 0;\n  }\n  // Return unique id\n  if (refId) {\n    return `${refId}_${id}`;\n  }\n  return id;\n}\n","import { Observable, throwError, timer } from 'rxjs';\nimport { finalize, map, retryWhen, mergeMap } from 'rxjs/operators';\nimport { webSocket } from 'rxjs/webSocket';\n\nimport { DataFrame, FieldType, KeyValue, CircularDataFrame } from '@grafana/data';\n\nimport { appendResponseToBufferedData } from './liveStreamsResultTransformer';\nimport { LokiTailResponse } from './types';\n\n/**\n * Maps directly to a query in the UI (refId is key)\n */\nexport interface LokiLiveTarget {\n  query: string;\n  url: string;\n  refId: string;\n  size: number;\n}\n\n/**\n * Cache of websocket streams that can be returned as observable. In case there already is a stream for particular\n * target it is returned and on subscription returns the latest dataFrame.\n */\nexport class LiveStreams {\n  private streams: KeyValue<Observable<DataFrame[]>> = {};\n\n  getStream(target: LokiLiveTarget, retryInterval = 5000): Observable<DataFrame[]> {\n    let stream = this.streams[target.url];\n\n    if (stream) {\n      return stream;\n    }\n\n    const data = new CircularDataFrame({ capacity: target.size });\n    data.addField({ name: 'Time', type: FieldType.time, config: {} });\n    data.addField({ name: 'Line', type: FieldType.string });\n    data.addField({ name: 'id', type: FieldType.string });\n    data.meta = { ...data.meta, preferredVisualisationType: 'logs' };\n    data.refId = target.refId;\n\n    stream = webSocket<LokiTailResponse>(target.url).pipe(\n      map((response: LokiTailResponse) => {\n        appendResponseToBufferedData(response, data);\n        return [data];\n      }),\n      retryWhen((attempts: Observable<any>) =>\n        attempts.pipe(\n          mergeMap((error, i) => {\n            const retryAttempt = i + 1;\n            // Code 1006 is used to indicate that a connection was closed abnormally.\n            // Added hard limit of 30 on number of retries.\n            // If connection was closed abnormally, and we wish to retry, otherwise throw error.\n            if (error.code === 1006 && retryAttempt < 30) {\n              if (retryAttempt > 10) {\n                // If more than 10 times retried, consol.warn, but keep reconnecting\n                console.warn(\n                  `Websocket connection is being disrupted. We keep reconnecting but consider starting new live tailing again. Error: ${error.reason}`\n                );\n              }\n              // Retry every 5s\n              return timer(retryInterval);\n            }\n            return throwError(error);\n          })\n        )\n      ),\n      finalize(() => {\n        delete this.streams[target.url];\n      })\n    );\n    this.streams[target.url] = stream;\n\n    return stream;\n  }\n}\n","import { css } from '@emotion/css';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { GrafanaTheme2, LogRowModel, renderMarkdown, SelectableValue } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport {\n  Button,\n  Collapse,\n  Icon,\n  InlineField,\n  InlineFieldRow,\n  InlineSwitch,\n  Label,\n  MultiSelect,\n  RenderUserContentAsHTML,\n  Spinner,\n  Tooltip,\n  useStyles2,\n} from '@grafana/ui';\nimport store from 'app/core/store';\n\nimport { RawQuery } from '../../prometheus/querybuilder/shared/RawQuery';\nimport {\n  LogContextProvider,\n  LOKI_LOG_CONTEXT_PRESERVED_LABELS,\n  PreservedLabels,\n  SHOULD_INCLUDE_PIPELINE_OPERATIONS,\n} from '../LogContextProvider';\nimport { escapeLabelValueInSelector } from '../languageUtils';\nimport { isQueryWithParser } from '../queryUtils';\nimport { lokiGrammar } from '../syntax';\nimport { ContextFilter, LokiQuery } from '../types';\n\nexport interface LokiContextUiProps {\n  logContextProvider: LogContextProvider;\n  row: LogRowModel;\n  updateFilter: (value: ContextFilter[]) => void;\n  onClose: () => void;\n  origQuery?: LokiQuery;\n  runContextQuery?: () => void;\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    labels: css`\n      display: flex;\n      gap: ${theme.spacing(0.5)};\n    `,\n    wrapper: css`\n      display: flex;\n      flex-direction: column;\n      flex: 1;\n      gap: ${theme.spacing(0.5)};\n      position: relative;\n    `,\n    textWrapper: css`\n      display: flex;\n      align-items: center;\n    `,\n    hidden: css`\n      visibility: hidden;\n    `,\n    label: css`\n      max-width: 100%;\n      &:first-of-type {\n        margin-bottom: ${theme.spacing(2)};\n      }\n      &:not(:first-of-type) {\n        margin: ${theme.spacing(2)} 0;\n      }\n    `,\n    rawQueryContainer: css`\n      text-align: start;\n      line-break: anywhere;\n      margin-top: -${theme.spacing(0.25)};\n      margin-right: ${theme.spacing(6)};\n      min-height: ${theme.spacing(4)};\n    `,\n    ui: css`\n      background-color: ${theme.colors.background.secondary};\n      padding: ${theme.spacing(2)};\n    `,\n    rawQuery: css`\n      display: inline;\n    `,\n    queryDescription: css`\n      margin-left: ${theme.spacing(0.5)};\n    `,\n    iconButton: css`\n      position: absolute;\n      top: ${theme.spacing(1)};\n      right: ${theme.spacing(1)};\n      z-index: ${theme.zIndex.navbarFixed};\n    `,\n    operationsToggle: css`\n      margin: ${theme.spacing(1)} 0 ${theme.spacing(-1)} 0;\n      & > div {\n        margin: 0;\n        & > label {\n          padding: 0;\n        }\n      }\n    `,\n  };\n}\n\nexport const IS_LOKI_LOG_CONTEXT_UI_OPEN = 'isLogContextQueryUiOpen';\n\nexport function LokiContextUi(props: LokiContextUiProps) {\n  const { row, logContextProvider, updateFilter, onClose, origQuery, runContextQuery } = props;\n  const styles = useStyles2(getStyles);\n\n  const [contextFilters, setContextFilters] = useState<ContextFilter[]>([]);\n\n  const [initialized, setInitialized] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [isOpen, setIsOpen] = useState(store.getBool(IS_LOKI_LOG_CONTEXT_UI_OPEN, false));\n  const [includePipelineOperations, setIncludePipelineOperations] = useState(\n    store.getBool(SHOULD_INCLUDE_PIPELINE_OPERATIONS, false)\n  );\n\n  const timerHandle = React.useRef<number>();\n  const previousInitialized = React.useRef<boolean>(false);\n  const previousContextFilters = React.useRef<ContextFilter[]>([]);\n\n  const isInitialState = useMemo(() => {\n    // Initial query has all regular labels enabled and all parsed labels disabled\n    if (initialized && contextFilters.some((filter) => filter.fromParser === filter.enabled)) {\n      return false;\n    }\n\n    // if we include pipeline operations, we also want to enable the revert button\n    if (includePipelineOperations && logContextProvider.queryContainsValidPipelineStages(origQuery)) {\n      return false;\n    }\n\n    return true;\n  }, [contextFilters, includePipelineOperations, initialized, logContextProvider, origQuery]);\n\n  useEffect(() => {\n    if (!initialized) {\n      return;\n    }\n\n    // don't trigger if we initialized, this will be the same query anyways.\n    if (!previousInitialized.current) {\n      previousInitialized.current = initialized;\n      return;\n    }\n\n    if (contextFilters.filter(({ enabled, fromParser }) => enabled && !fromParser).length === 0) {\n      setContextFilters(previousContextFilters.current);\n      return;\n    }\n\n    previousContextFilters.current = structuredClone(contextFilters);\n\n    if (timerHandle.current) {\n      clearTimeout(timerHandle.current);\n    }\n    setLoading(true);\n    timerHandle.current = window.setTimeout(() => {\n      updateFilter(contextFilters.filter(({ enabled }) => enabled));\n      // We are storing the removed labels and selected extracted labels in local storage so we can\n      // preselect the labels in the UI in the next log context view.\n      const preservedLabels: PreservedLabels = {\n        removedLabels: [],\n        selectedExtractedLabels: [],\n      };\n\n      contextFilters.forEach(({ enabled, fromParser, label }) => {\n        // We only want to store real labels that were removed from the initial query\n        if (!enabled && !fromParser) {\n          preservedLabels.removedLabels.push(label);\n        }\n        // Or extracted labels that were added to the initial query\n        if (enabled && fromParser) {\n          preservedLabels.selectedExtractedLabels.push(label);\n        }\n      });\n\n      store.set(LOKI_LOG_CONTEXT_PRESERVED_LABELS, JSON.stringify(preservedLabels));\n      setLoading(false);\n    }, 1500);\n\n    return () => {\n      clearTimeout(timerHandle.current);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [contextFilters, initialized]);\n\n  useEffect(() => {\n    return () => {\n      clearTimeout(timerHandle.current);\n      onClose();\n    };\n  }, [onClose]);\n\n  useAsync(async () => {\n    setLoading(true);\n    const initContextFilters = await logContextProvider.getInitContextFilters(row.labels, origQuery);\n    setContextFilters(initContextFilters);\n\n    setInitialized(true);\n    setLoading(false);\n  });\n\n  useEffect(() => {\n    reportInteraction('grafana_explore_logs_loki_log_context_loaded', {\n      logRowUid: row.uid,\n      type: 'load',\n    });\n\n    return () => {\n      reportInteraction('grafana_explore_logs_loki_log_context_loaded', {\n        logRowUid: row.uid,\n        type: 'unload',\n      });\n    };\n  }, [row.uid]);\n\n  const realLabels = contextFilters.filter(({ fromParser }) => !fromParser);\n  const realLabelsEnabled = realLabels.filter(({ enabled }) => enabled);\n\n  const parsedLabels = contextFilters.filter(({ fromParser }) => fromParser);\n  const parsedLabelsEnabled = parsedLabels.filter(({ enabled }) => enabled);\n\n  const contextFilterToSelectFilter = useCallback((contextFilter: ContextFilter): SelectableValue<string> => {\n    return {\n      label: `${contextFilter.label}=\"${escapeLabelValueInSelector(contextFilter.value)}\"`,\n      value: contextFilter.label,\n    };\n  }, []);\n\n  // Currently we support adding of parser and showing parsed labels only if there is 1 parser\n  const showParsedLabels = origQuery && isQueryWithParser(origQuery.expr).parserCount === 1 && parsedLabels.length > 0;\n\n  let queryExpr = logContextProvider.prepareExpression(\n    contextFilters.filter(({ enabled }) => enabled),\n    origQuery\n  );\n  return (\n    <div className={styles.wrapper}>\n      <Tooltip content={'Revert to initial log context query.'}>\n        <div className={styles.iconButton}>\n          <Button\n            data-testid=\"revert-button\"\n            icon=\"history-alt\"\n            variant=\"secondary\"\n            disabled={isInitialState}\n            onClick={(e) => {\n              reportInteraction('grafana_explore_logs_loki_log_context_reverted', {\n                logRowUid: row.uid,\n              });\n              setContextFilters((contextFilters) => {\n                return contextFilters.map((contextFilter) => ({\n                  ...contextFilter,\n                  // For revert to initial query we need to enable all labels and disable all parsed labels\n                  enabled: !contextFilter.fromParser,\n                }));\n              });\n              // We are removing the preserved labels from local storage so we can preselect the labels in the UI\n              store.delete(LOKI_LOG_CONTEXT_PRESERVED_LABELS);\n              store.delete(SHOULD_INCLUDE_PIPELINE_OPERATIONS);\n              setIncludePipelineOperations(false);\n            }}\n          />\n        </div>\n      </Tooltip>\n\n      <Collapse\n        collapsible={true}\n        isOpen={isOpen}\n        onToggle={() => {\n          store.set(IS_LOKI_LOG_CONTEXT_UI_OPEN, !isOpen);\n          setIsOpen((isOpen) => !isOpen);\n          reportInteraction('grafana_explore_logs_loki_log_context_toggled', {\n            logRowUid: row.uid,\n            action: !isOpen ? 'open' : 'close',\n          });\n        }}\n        label={\n          <div className={styles.rawQueryContainer}>\n            {initialized ? (\n              <>\n                <RawQuery lang={{ grammar: lokiGrammar, name: 'loki' }} query={queryExpr} className={styles.rawQuery} />\n                <Tooltip content=\"The initial log context query is created from all labels defining the stream for the selected log line. Use the editor below to customize the log context query.\">\n                  <Icon name=\"info-circle\" size=\"sm\" className={styles.queryDescription} />\n                </Tooltip>\n              </>\n            ) : (\n              <Spinner />\n            )}\n          </div>\n        }\n      >\n        <div className={styles.ui}>\n          <Label\n            className={styles.label}\n            description=\"The initial log context query is created from all labels defining the stream for the selected log line. You can broaden your search by removing one or more of the label filters.\"\n          >\n            Widen the search\n          </Label>\n          <MultiSelect\n            isLoading={loading}\n            options={realLabels.map(contextFilterToSelectFilter)}\n            value={realLabelsEnabled.map(contextFilterToSelectFilter)}\n            closeMenuOnSelect={true}\n            maxMenuHeight={200}\n            noOptionsMessage=\"No further labels available\"\n            onChange={(keys, actionMeta) => {\n              if (actionMeta.action === 'select-option') {\n                reportInteraction('grafana_explore_logs_loki_log_context_filtered', {\n                  logRowUid: row.uid,\n                  type: 'label',\n                  action: 'select',\n                });\n              }\n              if (actionMeta.action === 'remove-value') {\n                reportInteraction('grafana_explore_logs_loki_log_context_filtered', {\n                  logRowUid: row.uid,\n                  type: 'label',\n                  action: 'remove',\n                });\n              }\n              return setContextFilters(\n                contextFilters.map((filter) => {\n                  if (filter.fromParser) {\n                    return filter;\n                  }\n                  filter.enabled = keys.some((key) => key.value === filter.label);\n                  return filter;\n                })\n              );\n            }}\n          />\n          {showParsedLabels && (\n            <>\n              <Label\n                className={styles.label}\n                description={`By using a parser in your original query, you can use filters for extracted labels. Refine your search by applying extracted labels created from the selected log line.`}\n              >\n                Refine the search\n              </Label>\n              <MultiSelect\n                isLoading={loading}\n                options={parsedLabels.map(contextFilterToSelectFilter)}\n                value={parsedLabelsEnabled.map(contextFilterToSelectFilter)}\n                closeMenuOnSelect={true}\n                maxMenuHeight={200}\n                noOptionsMessage=\"No further labels available\"\n                isClearable={true}\n                onChange={(keys, actionMeta) => {\n                  if (actionMeta.action === 'select-option') {\n                    reportInteraction('grafana_explore_logs_loki_log_context_filtered', {\n                      logRowUid: row.uid,\n                      type: 'parsed_label',\n                      action: 'select',\n                    });\n                  }\n                  if (actionMeta.action === 'remove-value') {\n                    reportInteraction('grafana_explore_logs_loki_log_context_filtered', {\n                      logRowUid: row.uid,\n                      type: 'parsed_label',\n                      action: 'remove',\n                    });\n                  }\n                  setContextFilters(\n                    contextFilters.map((filter) => {\n                      if (!filter.fromParser) {\n                        return filter;\n                      }\n                      filter.enabled = keys.some((key) => key.value === filter.label);\n                      return filter;\n                    })\n                  );\n                }}\n              />\n            </>\n          )}\n          {logContextProvider.queryContainsValidPipelineStages(origQuery) && (\n            <InlineFieldRow className={styles.operationsToggle}>\n              <InlineField\n                label=\"Include LogQL pipeline operations\"\n                tooltip={\n                  <RenderUserContentAsHTML\n                    content={renderMarkdown(\n                      \"This will include LogQL operations such as `line_format` or `label_format`. It won't include line or label filter operations.\"\n                    )}\n                  />\n                }\n              >\n                <InlineSwitch\n                  value={includePipelineOperations}\n                  showLabel={true}\n                  transparent={true}\n                  onChange={(e) => {\n                    reportInteraction('grafana_explore_logs_loki_log_context_pipeline_toggled', {\n                      logRowUid: row.uid,\n                      action: e.currentTarget.checked ? 'enable' : 'disable',\n                    });\n                    store.set(SHOULD_INCLUDE_PIPELINE_OPERATIONS, e.currentTarget.checked);\n                    setIncludePipelineOperations(e.currentTarget.checked);\n                    if (runContextQuery) {\n                      runContextQuery();\n                    }\n                  }}\n                />\n              </InlineField>\n            </InlineFieldRow>\n          )}\n        </div>\n      </Collapse>\n    </div>\n  );\n}\n","import { DataFrame, Field, FieldType, SortedVector } from '@grafana/data';\n\nexport enum SortDirection {\n  Ascending,\n  Descending,\n}\n\n// creates the `index` for the sorting.\n// this is needed by the `SortedVector`.\n// the index is an array of numbers, and it defines an order.\n// at every slot in the index the values is the position of\n// the sorted item.\n// for example, an index of [3,1,2] means that\n// in the dataframe, that has 3 rows, after sorting:\n// - the third row will become the first\n// - the first row will become the second\n// - the second row will become the third\nfunction makeIndex(field: Field<number>, dir: SortDirection): number[] {\n  const fieldValues: number[] = field.values;\n  const { nanos } = field;\n\n  // we first build an array which is [0,1,2,3....]\n  const index = Array(fieldValues.length);\n  for (let i = 0; i < index.length; i++) {\n    index[i] = i;\n  }\n\n  const isAsc = dir === SortDirection.Ascending;\n\n  index.sort((a: number, b: number): number => {\n    // we need to answer this question:\n    // in the field-used-for-sorting, how would we compare value-at-index-a to value-at-index-b?\n    const valA = fieldValues[a];\n    const valB = fieldValues[b];\n    if (valA < valB) {\n      return isAsc ? -1 : 1;\n    }\n\n    if (valA > valB) {\n      return isAsc ? 1 : -1;\n    }\n\n    // the millisecond timestamps are equal,\n    // compare the nanosecond part, if available\n\n    if (nanos === undefined) {\n      return 0;\n    }\n\n    const nanoA = nanos[a];\n    const nanoB = nanos[b];\n\n    if (nanoA < nanoB) {\n      return isAsc ? -1 : 1;\n    }\n\n    if (nanoA > nanoB) {\n      return isAsc ? 1 : -1;\n    }\n\n    return 0;\n  });\n\n  return index;\n}\n\n// sort a dataframe that is in the Loki dataframe format ascending or desceding based on time,\n// with nanosecond precision.\nexport function sortDataFrameByTime(frame: DataFrame, dir: SortDirection): DataFrame {\n  const { fields, ...rest } = frame;\n\n  // we use the approach used in @grafana/data/sortDataframe.\n  // we cannot use it directly, because it does not take `.nanos` into account\n  // (see https://github.com/grafana/grafana/issues/72351).\n  // we can switch to to @grafana/data/sortDataframe when the issue is fixed.\n\n  const timeField = fields.find((field) => field.type === FieldType.time);\n  if (timeField === undefined) {\n    throw new Error('missing timestamp field. should never happen');\n  }\n\n  const index = makeIndex(timeField, dir);\n\n  return {\n    ...rest,\n    fields: fields.map((field) => ({\n      ...field,\n      values: new SortedVector(field.values, index).toArray(),\n      nanos: field.nanos === undefined ? undefined : new SortedVector(field.nanos, index).toArray(),\n    })),\n  };\n\n  return frame;\n}\n","import { isEmpty } from 'lodash';\nimport { catchError, lastValueFrom, of, switchMap } from 'rxjs';\n\nimport {\n  CoreApp,\n  DataFrame,\n  DataQueryError,\n  DataQueryResponse,\n  FieldCache,\n  FieldType,\n  LogRowModel,\n  TimeRange,\n  toUtc,\n  LogRowContextQueryDirection,\n  LogRowContextOptions,\n} from '@grafana/data';\nimport { LabelParser, LabelFilter, LineFilters, PipelineStage, Logfmt, Json } from '@grafana/lezer-logql';\nimport { Labels } from '@grafana/schema';\nimport { notifyApp } from 'app/core/actions';\nimport { createSuccessNotification } from 'app/core/copy/appNotification';\nimport store from 'app/core/store';\nimport { dispatch } from 'app/store/store';\n\nimport { LokiContextUi } from './components/LokiContextUi';\nimport { LokiDatasource, makeRequest, REF_ID_STARTER_LOG_ROW_CONTEXT } from './datasource';\nimport { escapeLabelValueInExactSelector } from './languageUtils';\nimport { addLabelToQuery, addParserToQuery } from './modifyQuery';\nimport {\n  getNodePositionsFromQuery,\n  getParserFromQuery,\n  getStreamSelectorsFromQuery,\n  isQueryWithParser,\n} from './queryUtils';\nimport { sortDataFrameByTime, SortDirection } from './sortDataFrame';\nimport { ContextFilter, LokiQuery, LokiQueryDirection, LokiQueryType } from './types';\n\nexport const LOKI_LOG_CONTEXT_PRESERVED_LABELS = 'lokiLogContextPreservedLabels';\nexport const SHOULD_INCLUDE_PIPELINE_OPERATIONS = 'lokiLogContextShouldIncludePipelineOperations';\n\nexport type PreservedLabels = {\n  removedLabels: string[];\n  selectedExtractedLabels: string[];\n};\n\nexport class LogContextProvider {\n  datasource: LokiDatasource;\n  appliedContextFilters: ContextFilter[];\n  onContextClose: (() => void) | undefined;\n\n  constructor(datasource: LokiDatasource) {\n    this.datasource = datasource;\n    this.appliedContextFilters = [];\n  }\n\n  private async getQueryAndRange(row: LogRowModel, options?: LogRowContextOptions, origQuery?: LokiQuery) {\n    const direction = (options && options.direction) || LogRowContextQueryDirection.Backward;\n    const limit = (options && options.limit) || this.datasource.maxLines;\n    // This happens only on initial load, when user haven't applied any filters yet\n    // We need to get the initial filters from the row labels\n    if (this.appliedContextFilters.length === 0) {\n      const filters = (await this.getInitContextFilters(row.labels, origQuery)).filter((filter) => filter.enabled);\n      this.appliedContextFilters = filters;\n    }\n\n    return await this.prepareLogRowContextQueryTarget(row, limit, direction, origQuery);\n  }\n\n  getLogRowContextQuery = async (\n    row: LogRowModel,\n    options?: LogRowContextOptions,\n    origQuery?: LokiQuery\n  ): Promise<LokiQuery> => {\n    const { query } = await this.getQueryAndRange(row, options, origQuery);\n\n    return query;\n  };\n\n  getLogRowContext = async (\n    row: LogRowModel,\n    options?: LogRowContextOptions,\n    origQuery?: LokiQuery\n  ): Promise<{ data: DataFrame[] }> => {\n    const direction = (options && options.direction) || LogRowContextQueryDirection.Backward;\n    const { query, range } = await this.getQueryAndRange(row, options, origQuery);\n\n    const processResults = (result: DataQueryResponse): DataQueryResponse => {\n      const frames: DataFrame[] = result.data;\n      const processedFrames = frames.map((frame) => sortDataFrameByTime(frame, SortDirection.Descending));\n\n      return {\n        ...result,\n        data: processedFrames,\n      };\n    };\n\n    // this can only be called from explore currently\n    const app = CoreApp.Explore;\n\n    return lastValueFrom(\n      this.datasource.query(makeRequest(query, range, app, `${REF_ID_STARTER_LOG_ROW_CONTEXT}${direction}`)).pipe(\n        catchError((err) => {\n          const error: DataQueryError = {\n            message: 'Error during context query. Please check JS console logs.',\n            status: err.status,\n            statusText: err.statusText,\n          };\n          throw error;\n        }),\n        switchMap((res) => of(processResults(res)))\n      )\n    );\n  };\n\n  async prepareLogRowContextQueryTarget(\n    row: LogRowModel,\n    limit: number,\n    direction: LogRowContextQueryDirection,\n    origQuery?: LokiQuery\n  ): Promise<{ query: LokiQuery; range: TimeRange }> {\n    const expr = this.prepareExpression(this.appliedContextFilters, origQuery);\n\n    const contextTimeBuffer = 2 * 60 * 60 * 1000; // 2h buffer\n\n    const queryDirection =\n      direction === LogRowContextQueryDirection.Forward ? LokiQueryDirection.Forward : LokiQueryDirection.Backward;\n\n    const query: LokiQuery = {\n      expr,\n      queryType: LokiQueryType.Range,\n      // refId has to be:\n      // - always different (temporarily, will be fixed later)\n      // - not increase in size\n      // because it may be called many times from logs-context\n      refId: `${REF_ID_STARTER_LOG_ROW_CONTEXT}_${Math.random().toString()}`,\n      maxLines: limit,\n      direction: queryDirection,\n      datasource: { uid: this.datasource.uid, type: this.datasource.type },\n    };\n\n    const fieldCache = new FieldCache(row.dataFrame);\n    const tsField = fieldCache.getFirstFieldOfType(FieldType.time);\n    if (tsField === undefined) {\n      throw new Error('loki: data frame missing time-field, should never happen');\n    }\n    const tsValue = tsField.values[row.rowIndex];\n    const timestamp = toUtc(tsValue);\n\n    const range =\n      queryDirection === LokiQueryDirection.Forward\n        ? {\n            // start param in Loki API is inclusive so we'll have to filter out the row that this request is based from\n            // and any other that were logged in the same ns but before the row. Right now these rows will be lost\n            // because the are before but came it he response that should return only rows after.\n            from: timestamp,\n            // convert to ns, we lose some precision here but it is not that important at the far points of the context\n            to: toUtc(row.timeEpochMs + contextTimeBuffer),\n          }\n        : {\n            // convert to ns, we lose some precision here but it is not that important at the far points of the context\n            from: toUtc(row.timeEpochMs - contextTimeBuffer),\n            to: timestamp,\n          };\n\n    return {\n      query,\n      range: {\n        from: range.from,\n        to: range.to,\n        raw: range,\n      },\n    };\n  }\n\n  getLogRowContextUi(row: LogRowModel, runContextQuery?: () => void, origQuery?: LokiQuery): React.ReactNode {\n    const updateFilter = (contextFilters: ContextFilter[]) => {\n      this.appliedContextFilters = contextFilters;\n\n      if (runContextQuery) {\n        runContextQuery();\n      }\n    };\n\n    // we need to cache this function so that it doesn't get recreated on every render\n    this.onContextClose =\n      this.onContextClose ??\n      (() => {\n        this.appliedContextFilters = [];\n      });\n\n    return LokiContextUi({\n      row,\n      origQuery,\n      updateFilter,\n      onClose: this.onContextClose,\n      logContextProvider: this,\n      runContextQuery,\n    });\n  }\n\n  prepareExpression(contextFilters: ContextFilter[], query: LokiQuery | undefined): string {\n    let preparedExpression = this.processContextFiltersToExpr(contextFilters, query);\n    if (store.getBool(SHOULD_INCLUDE_PIPELINE_OPERATIONS, false)) {\n      preparedExpression = this.processPipelineStagesToExpr(preparedExpression, query);\n    }\n    return preparedExpression;\n  }\n\n  processContextFiltersToExpr = (contextFilters: ContextFilter[], query: LokiQuery | undefined): string => {\n    const labelFilters = contextFilters\n      .map((filter) => {\n        if (!filter.fromParser && filter.enabled) {\n          // escape backslashes in label as users can't escape them by themselves\n          return `${filter.label}=\"${escapeLabelValueInExactSelector(filter.value)}\"`;\n        }\n        return '';\n      })\n      // Filter empty strings\n      .filter((label) => !!label)\n      .join(',');\n\n    let expr = `{${labelFilters}}`;\n\n    // We need to have original query to get parser and include parsed labels\n    // We only add parser and parsed labels if there is only one parser in query\n    if (query && isQueryWithParser(query.expr).parserCount === 1) {\n      const parser = getParserFromQuery(query.expr);\n      if (parser) {\n        expr = addParserToQuery(expr, parser);\n        const parsedLabels = contextFilters.filter((filter) => filter.fromParser && filter.enabled);\n        for (const parsedLabel of parsedLabels) {\n          if (parsedLabel.enabled) {\n            expr = addLabelToQuery(expr, parsedLabel.label, '=', parsedLabel.value);\n          }\n        }\n      }\n    }\n\n    return expr;\n  };\n\n  processPipelineStagesToExpr = (currentExpr: string, query: LokiQuery | undefined): string => {\n    let newExpr = currentExpr;\n    const origExpr = query?.expr ?? '';\n\n    if (isQueryWithParser(origExpr).parserCount > 1) {\n      return newExpr;\n    }\n\n    const allNodePositions = getNodePositionsFromQuery(origExpr, [\n      PipelineStage,\n      LabelParser,\n      Logfmt,\n      Json,\n      LineFilters,\n      LabelFilter,\n    ]);\n    const pipelineStagePositions = allNodePositions.filter((position) => position.type?.id === PipelineStage);\n    const otherNodePositions = allNodePositions.filter((position) => position.type?.id !== PipelineStage);\n\n    for (const pipelineStagePosition of pipelineStagePositions) {\n      // we don't process pipeline stages that contain label parsers, line filters or label filters\n      if (otherNodePositions.some((position) => pipelineStagePosition.contains(position))) {\n        continue;\n      }\n\n      newExpr += ` ${pipelineStagePosition.getExpression(origExpr)}`;\n    }\n\n    return newExpr;\n  };\n\n  queryContainsValidPipelineStages = (query: LokiQuery | undefined): boolean => {\n    const origExpr = query?.expr ?? '';\n    const allNodePositions = getNodePositionsFromQuery(origExpr, [\n      PipelineStage,\n      LabelParser,\n      LineFilters,\n      LabelFilter,\n    ]);\n    const pipelineStagePositions = allNodePositions.filter((position) => position.type?.id === PipelineStage);\n    const otherNodePositions = allNodePositions.filter((position) => position.type?.id !== PipelineStage);\n\n    return pipelineStagePositions.some((pipelineStagePosition) =>\n      otherNodePositions.every((position) => pipelineStagePosition.contains(position) === false)\n    );\n  };\n\n  getInitContextFilters = async (labels: Labels, query?: LokiQuery) => {\n    if (!query || isEmpty(labels)) {\n      return [];\n    }\n\n    // 1. First we need to get all labels from the log row's label\n    // and correctly set parsed and not parsed labels\n    let allLabels: string[] = [];\n    if (!isQueryWithParser(query.expr).queryWithParser) {\n      // If there is no parser, we use getLabelKeys because it has better caching\n      // and all labels should already be fetched\n      await this.datasource.languageProvider.start();\n      allLabels = this.datasource.languageProvider.getLabelKeys();\n    } else {\n      // If we have parser, we use fetchSeriesLabels to fetch actual labels for selected stream\n      const stream = getStreamSelectorsFromQuery(query.expr);\n      // We are using stream[0] as log query can always have just 1 stream selector\n      const series = await this.datasource.languageProvider.fetchSeriesLabels(stream[0]);\n      allLabels = Object.keys(series);\n    }\n\n    const contextFilters: ContextFilter[] = [];\n    Object.entries(labels).forEach(([label, value]) => {\n      const filter: ContextFilter = {\n        label,\n        value: value,\n        enabled: allLabels.includes(label),\n        fromParser: !allLabels.includes(label),\n      };\n\n      contextFilters.push(filter);\n    });\n\n    // Secondly we check for preserved labels and update enabled state of filters based on that\n    let preservedLabels: undefined | PreservedLabels = undefined;\n    try {\n      preservedLabels = JSON.parse(store.get(LOKI_LOG_CONTEXT_PRESERVED_LABELS));\n      // Do nothing when error occurs\n    } catch (e) {}\n\n    if (!preservedLabels) {\n      // If we don't have preservedLabels, we return contextFilters as they are\n      return contextFilters;\n    } else {\n      // Otherwise, we need to update filters based on preserved labels\n      let arePreservedLabelsUsed = false;\n      const newContextFilters = contextFilters.map((contextFilter) => {\n        // We checked for undefined above\n        if (preservedLabels!.removedLabels.includes(contextFilter.label)) {\n          arePreservedLabelsUsed = true;\n          return { ...contextFilter, enabled: false };\n        }\n        // We checked for undefined above\n        if (preservedLabels!.selectedExtractedLabels.includes(contextFilter.label)) {\n          arePreservedLabelsUsed = true;\n          return { ...contextFilter, enabled: true };\n        }\n        return { ...contextFilter };\n      });\n\n      const isAtLeastOneRealLabelEnabled = newContextFilters.some(({ enabled, fromParser }) => enabled && !fromParser);\n      if (!isAtLeastOneRealLabelEnabled) {\n        // If we end up with no real labels enabled, we need to reset the init filters\n        return contextFilters;\n      } else {\n        // Otherwise use new filters\n        if (arePreservedLabelsUsed) {\n          dispatch(notifyApp(createSuccessNotification('Previously used log context filters have been applied.')));\n        }\n        return newContextFilters;\n      }\n    }\n  };\n}\n","import { groupBy } from 'lodash';\n\nimport { FieldType, DataFrame, DataLink, Field } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\n\nimport { DerivedFieldConfig } from './types';\n\nexport function getDerivedFields(dataFrame: DataFrame, derivedFieldConfigs: DerivedFieldConfig[]): Field[] {\n  if (!derivedFieldConfigs.length) {\n    return [];\n  }\n  const derivedFieldsGrouped = groupBy(derivedFieldConfigs, 'name');\n\n  const newFields = Object.values(derivedFieldsGrouped).map(fieldFromDerivedFieldConfig);\n\n  // line-field is the first string-field\n  // NOTE: we should create some common log-frame-extra-string-field code somewhere\n  const lineField = dataFrame.fields.find((f) => f.type === FieldType.string);\n\n  if (lineField === undefined) {\n    // if this is happening, something went wrong, let's raise an error\n    throw new Error('invalid logs-dataframe, string-field missing');\n  }\n\n  lineField.values.forEach((line) => {\n    for (const field of newFields) {\n      const logMatch = line.match(derivedFieldsGrouped[field.name][0].matcherRegex);\n      field.values.push(logMatch && logMatch[1]);\n    }\n  });\n\n  return newFields;\n}\n\n/**\n * Transform derivedField config into dataframe field with config that contains link.\n */\nfunction fieldFromDerivedFieldConfig(derivedFieldConfigs: DerivedFieldConfig[]): Field {\n  const dataSourceSrv = getDataSourceSrv();\n\n  const dataLinks = derivedFieldConfigs.reduce<DataLink[]>((acc, derivedFieldConfig) => {\n    // Having field.datasourceUid means it is an internal link.\n    if (derivedFieldConfig.datasourceUid) {\n      const dsSettings = dataSourceSrv.getInstanceSettings(derivedFieldConfig.datasourceUid);\n      const queryType = (type: string | undefined): string | undefined => {\n        switch (type) {\n          case 'tempo':\n            return 'traceql';\n          case 'grafana-x-ray-datasource':\n            return 'getTrace';\n          default:\n            return undefined;\n        }\n      };\n\n      acc.push({\n        // Will be filled out later\n        title: derivedFieldConfig.urlDisplayLabel || '',\n        url: '',\n        // This is hardcoded for Jaeger or Zipkin not way right now to specify datasource specific query object\n        internal: {\n          query: { query: derivedFieldConfig.url, queryType: queryType(dsSettings?.type) },\n          datasourceUid: derivedFieldConfig.datasourceUid,\n          datasourceName: dsSettings?.name ?? 'Data source not found',\n        },\n      });\n    } else if (derivedFieldConfig.url) {\n      acc.push({\n        // We do not know what title to give here so we count on presentation layer to create a title from metadata.\n        title: derivedFieldConfig.urlDisplayLabel || '',\n        // This is hardcoded for Jaeger or Zipkin not way right now to specify datasource specific query object\n        url: derivedFieldConfig.url,\n      });\n    }\n    return acc;\n  }, []);\n\n  return {\n    name: derivedFieldConfigs[0].name,\n    type: FieldType.string,\n    config: {\n      links: dataLinks,\n    },\n    // We are adding values later on\n    values: [],\n  };\n}\n","import { groupBy } from 'lodash';\n\nimport { DataFrame, Field, FieldType } from '@grafana/data';\n\nexport function makeTableFrames(instantMetricFrames: DataFrame[]): DataFrame[] {\n  // first we remove frames that have no refId\n  // (we will group them by refId, so we need it to be set)\n  const framesWithRefId = instantMetricFrames.filter((f) => f.refId !== undefined);\n\n  const framesByRefId = groupBy(framesWithRefId, (frame) => frame.refId);\n\n  return Object.entries(framesByRefId).map(([refId, frames]) => makeTableFrame(frames, refId));\n}\n\ntype NumberField = Field<number, number[]>;\ntype StringField = Field<string, string[]>;\n\nfunction makeTableFrame(instantMetricFrames: DataFrame[], refId: string): DataFrame {\n  const tableTimeField: NumberField = { name: 'Time', config: {}, values: [], type: FieldType.time };\n  const tableValueField: NumberField = {\n    name: `Value #${refId}`,\n    config: {},\n    values: [],\n    type: FieldType.number,\n  };\n\n  // Sort metric labels, create columns for them and record their index\n  const allLabelNames = new Set(\n    instantMetricFrames.map((frame) => frame.fields.map((field) => Object.keys(field.labels ?? {})).flat()).flat()\n  );\n\n  const sortedLabelNames = Array.from(allLabelNames).sort();\n\n  const labelFields: StringField[] = sortedLabelNames.map((labelName) => ({\n    name: labelName,\n    config: { filterable: true },\n    values: [],\n    type: FieldType.string,\n  }));\n\n  instantMetricFrames.forEach((frame) => {\n    const timeField = frame.fields.find((field) => field.type === FieldType.time);\n    const valueField = frame.fields.find((field) => field.type === FieldType.number);\n    if (timeField == null || valueField == null) {\n      return;\n    }\n\n    const timeArray = timeField.values;\n    const valueArray = valueField.values;\n\n    for (let x of timeArray) {\n      tableTimeField.values.push(x);\n    }\n\n    for (let x of valueArray) {\n      tableValueField.values.push(x);\n    }\n\n    const labels = valueField.labels ?? {};\n\n    for (let f of labelFields) {\n      const text = labels[f.name] ?? '';\n      // we insert the labels as many times as we have values\n      for (let i = 0; i < valueArray.length; i++) {\n        f.values.push(text);\n      }\n    }\n  });\n\n  return {\n    fields: [tableTimeField, ...labelFields, tableValueField],\n    refId,\n    meta: { preferredVisualisationType: 'table' },\n    length: tableTimeField.values.length,\n  };\n}\n","import { DataQueryResponse, DataFrame, isDataFrame, FieldType, QueryResultMeta, DataQueryError } from '@grafana/data';\n\nimport { getDerivedFields } from './getDerivedFields';\nimport { makeTableFrames } from './makeTableFrames';\nimport { formatQuery, getHighlighterExpressionsFromQuery } from './queryUtils';\nimport { dataFrameHasLokiError } from './responseUtils';\nimport { DerivedFieldConfig, LokiQuery, LokiQueryType } from './types';\n\nfunction isMetricFrame(frame: DataFrame): boolean {\n  return frame.fields.every((field) => field.type === FieldType.time || field.type === FieldType.number);\n}\n\n// returns a new frame, with meta shallow merged with its original meta\nfunction setFrameMeta(frame: DataFrame, meta: QueryResultMeta): DataFrame {\n  const { meta: oldMeta, ...rest } = frame;\n  // meta maybe be undefined, we need to handle that\n  const newMeta = { ...oldMeta, ...meta };\n  return {\n    ...rest,\n    meta: newMeta,\n  };\n}\n\nfunction processStreamFrame(\n  frame: DataFrame,\n  query: LokiQuery | undefined,\n  derivedFieldConfigs: DerivedFieldConfig[]\n): DataFrame {\n  const custom: Record<string, string> = {\n    ...frame.meta?.custom, // keep the original meta.custom\n    // used by logsModel\n    lokiQueryStatKey: 'Summary: total bytes processed',\n  };\n\n  if (dataFrameHasLokiError(frame)) {\n    custom.error = 'Error when parsing some of the logs';\n  }\n\n  const meta: QueryResultMeta = {\n    preferredVisualisationType: 'logs',\n    limit: query?.maxLines,\n    searchWords: query !== undefined ? getHighlighterExpressionsFromQuery(formatQuery(query.expr)) : undefined,\n    custom,\n  };\n\n  const newFrame = setFrameMeta(frame, meta);\n  const derivedFields = getDerivedFields(newFrame, derivedFieldConfigs);\n  return {\n    ...newFrame,\n    fields: [...newFrame.fields, ...derivedFields],\n  };\n}\n\nfunction processStreamsFrames(\n  frames: DataFrame[],\n  queryMap: Map<string, LokiQuery>,\n  derivedFieldConfigs: DerivedFieldConfig[]\n): DataFrame[] {\n  return frames.map((frame) => {\n    const query = frame.refId !== undefined ? queryMap.get(frame.refId) : undefined;\n    return processStreamFrame(frame, query, derivedFieldConfigs);\n  });\n}\n\nfunction processMetricInstantFrames(frames: DataFrame[]): DataFrame[] {\n  return frames.length > 0 ? makeTableFrames(frames) : [];\n}\n\nfunction processMetricRangeFrames(frames: DataFrame[]): DataFrame[] {\n  const meta: QueryResultMeta = { preferredVisualisationType: 'graph' };\n  return frames.map((frame) => setFrameMeta(frame, meta));\n}\n\n// we split the frames into 3 groups, because we will handle\n// each group slightly differently\nfunction groupFrames(\n  frames: DataFrame[],\n  queryMap: Map<string, LokiQuery>\n): {\n  streamsFrames: DataFrame[];\n  metricInstantFrames: DataFrame[];\n  metricRangeFrames: DataFrame[];\n} {\n  const streamsFrames: DataFrame[] = [];\n  const metricInstantFrames: DataFrame[] = [];\n  const metricRangeFrames: DataFrame[] = [];\n\n  frames.forEach((frame) => {\n    if (!isMetricFrame(frame)) {\n      streamsFrames.push(frame);\n    } else {\n      const isInstantFrame = frame.refId != null && queryMap.get(frame.refId)?.queryType === LokiQueryType.Instant;\n      if (isInstantFrame) {\n        metricInstantFrames.push(frame);\n      } else {\n        metricRangeFrames.push(frame);\n      }\n    }\n  });\n\n  return { streamsFrames, metricInstantFrames, metricRangeFrames };\n}\n\nfunction improveError(error: DataQueryError | undefined, queryMap: Map<string, LokiQuery>): DataQueryError | undefined {\n  // many things are optional in an error-object, we need an error-message to exist,\n  // and we need to find the loki-query, based on the refId in the error-object.\n  if (error === undefined) {\n    return error;\n  }\n\n  const { refId, message } = error;\n  if (refId === undefined || message === undefined) {\n    return error;\n  }\n\n  const query = queryMap.get(refId);\n  if (query === undefined) {\n    return error;\n  }\n\n  if (message.includes('escape') && query.expr.includes('\\\\')) {\n    return {\n      ...error,\n      message: `${message}. Make sure that all special characters are escaped with \\\\. For more information on escaping of special characters visit LogQL documentation at https://grafana.com/docs/loki/latest/logql/.`,\n    };\n  }\n\n  return error;\n}\n\nexport function transformBackendResult(\n  response: DataQueryResponse,\n  queries: LokiQuery[],\n  derivedFieldConfigs: DerivedFieldConfig[]\n): DataQueryResponse {\n  const { data, error, ...rest } = response;\n\n  // in the typescript type, data is an array of basically anything.\n  // we do know that they have to be dataframes, so we make a quick check,\n  // this way we can be sure, and also typescript is happy.\n  const dataFrames = data.map((d) => {\n    if (!isDataFrame(d)) {\n      throw new Error('transformation only supports dataframe responses');\n    }\n    return d;\n  });\n\n  const queryMap = new Map(queries.map((query) => [query.refId, query]));\n\n  const { streamsFrames, metricInstantFrames, metricRangeFrames } = groupFrames(dataFrames, queryMap);\n\n  return {\n    ...rest,\n    error: improveError(error, queryMap),\n    data: [\n      ...processMetricRangeFrames(metricRangeFrames),\n      ...processMetricInstantFrames(metricInstantFrames),\n      ...processStreamsFrames(streamsFrames, queryMap, derivedFieldConfigs),\n    ],\n  };\n}\n","// Libraries\nimport React, { memo } from 'react';\n\nimport { AnnotationQuery } from '@grafana/data';\nimport { EditorField, EditorRow } from '@grafana/experimental';\nimport { Input } from '@grafana/ui';\n\n// Types\nimport { getNormalizedLokiQuery } from '../queryUtils';\nimport { LokiQuery, LokiQueryType } from '../types';\n\nimport { LokiOptionFields } from './LokiOptionFields';\nimport { LokiQueryField } from './LokiQueryField';\nimport { LokiQueryEditorProps } from './types';\n\ntype Props = LokiQueryEditorProps & {\n  annotation?: AnnotationQuery<LokiQuery>;\n  onAnnotationChange?: (annotation: AnnotationQuery<LokiQuery>) => void;\n};\n\nexport const LokiAnnotationsQueryEditor = memo(function LokiAnnotationQueryEditor(props: Props) {\n  const { annotation, onAnnotationChange, history } = props;\n\n  // this should never happen, but we want to keep typescript happy\n  if (annotation === undefined || onAnnotationChange === undefined) {\n    return null;\n  }\n\n  const onChangeQuery = (query: LokiQuery) => {\n    // the current version of annotations only stores an optional boolean\n    // field `instant` to handle the instant/range switch.\n    // we need to maintain compatibility for now, so we do the same.\n    // we explicitly call `getNormalizedLokiQuery` to make sure `queryType`\n    // is set up correctly.\n    const instant = getNormalizedLokiQuery(query).queryType === LokiQueryType.Instant;\n    onAnnotationChange({\n      ...annotation,\n      expr: query.expr,\n      maxLines: query.maxLines,\n      instant,\n    });\n  };\n\n  const queryWithRefId: LokiQuery = {\n    refId: '',\n    expr: annotation.expr,\n    maxLines: annotation.maxLines,\n    instant: annotation.instant,\n    queryType: annotation.queryType,\n  };\n  return (\n    <>\n      <div className=\"gf-form-group\">\n        <LokiQueryField\n          datasource={props.datasource}\n          query={queryWithRefId}\n          onChange={onChangeQuery}\n          onRunQuery={() => {}}\n          history={history}\n          ExtraFieldElement={\n            <LokiOptionFields\n              lineLimitValue={queryWithRefId?.maxLines?.toString() || ''}\n              resolution={queryWithRefId.resolution || 1}\n              query={queryWithRefId}\n              onRunQuery={() => {}}\n              onChange={onChangeQuery}\n            />\n          }\n        />\n      </div>\n\n      <EditorRow>\n        <EditorField\n          label=\"Title\"\n          tooltip={\n            'Use either the name or a pattern. For example, {{instance}} is replaced with label value for the label instance.'\n          }\n        >\n          <Input\n            type=\"text\"\n            placeholder=\"alertname\"\n            value={annotation.titleFormat}\n            onChange={(event) => {\n              onAnnotationChange({\n                ...annotation,\n                titleFormat: event.currentTarget.value,\n              });\n            }}\n          />\n        </EditorField>\n        <EditorField label=\"Tags\">\n          <Input\n            type=\"text\"\n            placeholder=\"label1,label2\"\n            value={annotation.tagKeys}\n            onChange={(event) => {\n              onAnnotationChange({\n                ...annotation,\n                tagKeys: event.currentTarget.value,\n              });\n            }}\n          />\n        </EditorField>\n        <EditorField\n          label=\"Text\"\n          tooltip={\n            'Use either the name or a pattern. For example, {{instance}} is replaced with label value for the label instance.'\n          }\n        >\n          <Input\n            type=\"text\"\n            placeholder=\"instance\"\n            value={annotation.textFormat}\n            onChange={(event) => {\n              onAnnotationChange({\n                ...annotation,\n                textFormat: event.currentTarget.value,\n              });\n            }}\n          />\n        </EditorField>\n      </EditorRow>\n    </>\n  );\n});\n","import { LokiVariableQuery, LokiVariableQueryType } from '../types';\n\nexport const labelNamesRegex = /^label_names\\(\\)\\s*$/;\nexport const labelValuesRegex = /^label_values\\((?:(.+),\\s*)?([a-zA-Z_$][a-zA-Z0-9_]*)\\)\\s*$/;\n\nexport function migrateVariableQuery(rawQuery: string | LokiVariableQuery): LokiVariableQuery {\n  // If not string, we assume LokiVariableQuery\n  if (typeof rawQuery !== 'string') {\n    return rawQuery;\n  }\n\n  const queryBase = {\n    refId: 'LokiVariableQueryEditor-VariableQuery',\n    type: LokiVariableQueryType.LabelNames,\n  };\n\n  const labelNames = rawQuery.match(labelNamesRegex);\n  if (labelNames) {\n    return {\n      ...queryBase,\n      type: LokiVariableQueryType.LabelNames,\n    };\n  }\n\n  const labelValues = rawQuery.match(labelValuesRegex);\n  if (labelValues) {\n    return {\n      ...queryBase,\n      type: LokiVariableQueryType.LabelValues,\n      label: labelValues[2] ? labelValues[2] : labelValues[1],\n      stream: labelValues[2] ? labelValues[1] : undefined,\n    };\n  }\n\n  return queryBase;\n}\n","import { DataFrame, QueryHint } from '@grafana/data';\n\nimport {\n  isQueryWithLabelFilter,\n  isQueryPipelineErrorFiltering,\n  isQueryWithLabelFormat,\n  isQueryWithParser,\n  isQueryWithLineFilter,\n} from './queryUtils';\nimport {\n  dataFrameHasLevelLabel,\n  extractHasErrorLabelFromDataFrame,\n  extractLevelLikeLabelFromDataFrame,\n  extractLogParserFromDataFrame,\n} from './responseUtils';\n\nexport function getQueryHints(query: string, series: DataFrame[]): QueryHint[] {\n  if (series.length === 0) {\n    return [];\n  }\n\n  const hints: QueryHint[] = [];\n  const { queryWithParser, parserCount } = isQueryWithParser(query);\n\n  if (!queryWithParser) {\n    const { hasLogfmt, hasJSON, hasPack } = extractLogParserFromDataFrame(series[0]);\n    if (hasJSON) {\n      if (hasPack) {\n        hints.push({\n          type: 'ADD_UNPACK_PARSER',\n          label: 'Selected log stream selector has packed logs.',\n          fix: {\n            title: 'add unpack parser',\n            label: 'Consider using unpack parser.',\n            action: {\n              type: 'ADD_UNPACK_PARSER',\n              query,\n            },\n          },\n        });\n      } else {\n        hints.push({\n          type: 'ADD_JSON_PARSER',\n          label: 'Selected log stream selector has JSON formatted logs.',\n          fix: {\n            title: 'add json parser',\n            label: 'Consider using JSON parser.',\n            action: {\n              type: 'ADD_JSON_PARSER',\n              query,\n            },\n          },\n        });\n      }\n    }\n\n    if (hasLogfmt) {\n      hints.push({\n        type: 'ADD_LOGFMT_PARSER',\n        label: 'Selected log stream selector has logfmt formatted logs.',\n        fix: {\n          title: 'add logfmt parser',\n          label: 'Consider using logfmt parser to turn key-value pairs in your log lines to labels.',\n          action: {\n            type: 'ADD_LOGFMT_PARSER',\n            query,\n          },\n        },\n      });\n    }\n  }\n\n  if (queryWithParser) {\n    // To keep this simple, we consider pipeline error filtering hint only is query has up to 1 parser\n    if (parserCount === 1) {\n      const hasPipelineErrorFiltering = isQueryPipelineErrorFiltering(query);\n      const hasError = extractHasErrorLabelFromDataFrame(series[0]);\n      if (hasError && !hasPipelineErrorFiltering) {\n        hints.push({\n          type: 'ADD_NO_PIPELINE_ERROR',\n          label: 'Some logs in your selected log streams have parsing error.',\n          fix: {\n            title: 'remove pipeline errors',\n            label: 'Consider filtering out logs with parsing errors.',\n            action: {\n              type: 'ADD_NO_PIPELINE_ERROR',\n              query,\n            },\n          },\n        });\n      }\n    }\n\n    const hasLabelFilter = isQueryWithLabelFilter(query);\n\n    if (!hasLabelFilter) {\n      hints.push({\n        type: 'ADD_LABEL_FILTER',\n        label: 'Consider filtering logs by their label and value.',\n        fix: {\n          title: 'add label filter',\n          label: '',\n          action: {\n            type: 'ADD_LABEL_FILTER',\n            query,\n          },\n        },\n      });\n    }\n  }\n\n  const queryWithLabelFormat = isQueryWithLabelFormat(query);\n  if (!queryWithLabelFormat) {\n    const hasLevel = dataFrameHasLevelLabel(series[0]);\n    const levelLikeLabel = extractLevelLikeLabelFromDataFrame(series[0]);\n\n    // Add hint only if we don't have \"level\" label and have level-like label\n    if (!hasLevel && levelLikeLabel) {\n      hints.push({\n        type: 'ADD_LEVEL_LABEL_FORMAT',\n        label: `Some logs in your selected log stream have \"${levelLikeLabel}\" label.`,\n        fix: {\n          title: 'add label level format',\n          label: `If ${levelLikeLabel} label has level values, consider using label_format to rename it to \"level\". Level label can be then visualized in log volumes.`,\n          action: {\n            type: 'ADD_LEVEL_LABEL_FORMAT',\n            query,\n            options: {\n              renameTo: 'level',\n              originalLabel: levelLikeLabel,\n            },\n          },\n        },\n      });\n    }\n  }\n\n  const hasLineFilter = isQueryWithLineFilter(query);\n\n  if (!hasLineFilter) {\n    hints.push({\n      type: 'ADD_LINE_FILTER',\n      label: 'Consider filtering logs for specific string.',\n      fix: {\n        title: 'add line filter',\n        label: '',\n        action: {\n          type: 'ADD_LINE_FILTER',\n          query,\n        },\n      },\n    });\n  }\n\n  return hints;\n}\n","// every timestamp in this file is a number which contains an unix-timestamp-in-millisecond format,\n// like returned by `new Date().getTime()`. this is needed because the \"math\"\n// has to be done on integer numbers.\n\n// the way loki handles logs-range-queries is that if you specify start & end,\n// one of those will be included, but the other will not. this allows us to\n// make it easy to split ranges.\n// for example, if the time-range is 100<>150,\n// we can split it into:\n// - 100<>120\n// - 120<>140\n// - 140<>150\n// and no log-line will be skipped or duplicated\n// (NOTE: we do these calculations in milliseconds. at the end, Loki receives\n// nanoseconds, but it will be OK, because it's simply a matter to adding `000000`,\n// to the end, so if we do it right in milliseconds, it should be OK in\n// nanoseconds too\n\nexport function splitTimeRange(\n  startTime: number,\n  endTime: number,\n  idealRangeDuration: number\n): Array<[number, number]> {\n  if (endTime - startTime <= idealRangeDuration) {\n    return [[startTime, endTime]];\n  }\n\n  const result: Array<[number, number]> = [];\n\n  // we walk backward, because we need want the potentially smaller \"last\" chunk\n  // to be at the oldest timestamp.\n  for (let chunkEndTime = endTime; chunkEndTime > startTime; chunkEndTime -= idealRangeDuration) {\n    // when we get close to the start of the time range, we need to be sure not\n    // to cross over the startTime\n    const chunkStartTime = Math.max(chunkEndTime - idealRangeDuration, startTime);\n    result.push([chunkStartTime, chunkEndTime]);\n  }\n\n  // because we walked backwards, we need to reverse the array\n  result.reverse();\n\n  return result;\n}\n","// every timestamp in this file is a number which contains an unix-timestamp-in-millisecond format,\n// like returned by `new Date().getTime()`. this is needed because the \"math\"\n// has to be done on integer numbers.\n\n// we are trying to be compatible with\n// https://github.com/grafana/loki/blob/089ec1b05f5ec15a8851d0e8230153e0eeb4dcec/pkg/querier/queryrange/split_by_interval.go#L327-L336\n\nfunction expandTimeRange(startTime: number, endTime: number, step: number): [number, number] {\n  // startTime is decreased to the closes multiple-of-step, if necessary\n  const newStartTime = startTime - (startTime % step);\n\n  // endTime is increased to the closed multiple-of-step, if necessary\n  let newEndTime = endTime;\n  const endStepMod = endTime % step;\n  if (endStepMod !== 0) {\n    newEndTime += step - endStepMod;\n  }\n\n  return [newStartTime, newEndTime];\n}\n\nexport function splitTimeRange(\n  startTime: number,\n  endTime: number,\n  step: number,\n  idealRangeDuration: number\n): Array<[number, number]> {\n  if (idealRangeDuration < step) {\n    // we cannot create chunks smaller than `step`\n    return [[startTime, endTime]];\n  }\n\n  // we make the duration a multiple of `step`, lowering it if necessary\n  const alignedDuration = Math.trunc(idealRangeDuration / step) * step;\n\n  const [alignedStartTime, alignedEndTime] = expandTimeRange(startTime, endTime, step);\n\n  const result: Array<[number, number]> = [];\n\n  // we iterate it from the end, because we want to have the potentially smaller chunk at the end, not at the beginning\n  for (let chunkEndTime = alignedEndTime; chunkEndTime > alignedStartTime; chunkEndTime -= alignedDuration + step) {\n    // when we get close to the start of the time range, we need to be sure not\n    // to cross over the startTime\n    const chunkStartTime = Math.max(chunkEndTime - alignedDuration, alignedStartTime);\n    result.push([chunkStartTime, chunkEndTime]);\n  }\n\n  // because we walked backwards, we need to reverse the array\n  result.reverse();\n\n  return result;\n}\n","import { groupBy, partition } from 'lodash';\nimport { Observable, Subscriber, Subscription, tap } from 'rxjs';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport {\n  arrayToDataFrame,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataTopic,\n  dateTime,\n  durationToMilliseconds,\n  parseDuration,\n  rangeUtil,\n  TimeRange,\n  LoadingState,\n} from '@grafana/data';\n\nimport { LokiDatasource } from './datasource';\nimport { splitTimeRange as splitLogsTimeRange } from './logsTimeSplitting';\nimport { splitTimeRange as splitMetricTimeRange } from './metricTimeSplitting';\nimport { isLogsQuery, isQueryWithRangeVariable } from './queryUtils';\nimport { combineResponses } from './responseUtils';\nimport { trackGroupedQueries } from './tracking';\nimport { LokiGroupedRequest, LokiQuery, LokiQueryType } from './types';\n\nexport function partitionTimeRange(\n  isLogsQuery: boolean,\n  originalTimeRange: TimeRange,\n  stepMs: number,\n  duration: number\n): TimeRange[] {\n  const start = originalTimeRange.from.toDate().getTime();\n  const end = originalTimeRange.to.toDate().getTime();\n\n  const ranges = isLogsQuery\n    ? splitLogsTimeRange(start, end, duration)\n    : splitMetricTimeRange(start, end, stepMs, duration);\n\n  return ranges.map(([start, end]) => {\n    const from = dateTime(start);\n    const to = dateTime(end);\n    return {\n      from,\n      to,\n      raw: { from, to },\n    };\n  });\n}\n\n/**\n * Based in the state of the current response, if any, adjust target parameters such as `maxLines`.\n * For `maxLines`, we will update it as `maxLines - current amount of lines`.\n * At the end, we will filter the targets that don't need to be executed in the next request batch,\n * becasue, for example, the `maxLines` have been reached.\n */\nfunction adjustTargetsFromResponseState(targets: LokiQuery[], response: DataQueryResponse | null): LokiQuery[] {\n  if (!response) {\n    return targets;\n  }\n\n  return targets\n    .map((target) => {\n      if (!target.maxLines || !isLogsQuery(target.expr)) {\n        return target;\n      }\n      const targetFrame = response.data.find((frame) => frame.refId === target.refId);\n      if (!targetFrame) {\n        return target;\n      }\n      const updatedMaxLines = target.maxLines - targetFrame.length;\n      return {\n        ...target,\n        maxLines: updatedMaxLines < 0 ? 0 : updatedMaxLines,\n      };\n    })\n    .filter((target) => target.maxLines === undefined || target.maxLines > 0);\n}\nexport function runSplitGroupedQueries(datasource: LokiDatasource, requests: LokiGroupedRequest[]) {\n  let mergedResponse: DataQueryResponse = { data: [], state: LoadingState.Streaming };\n  const totalRequests = Math.max(...requests.map(({ partition }) => partition.length));\n  const longestPartition = requests.filter(({ partition }) => partition.length === totalRequests)[0].partition;\n\n  let shouldStop = false;\n  let subquerySubsciption: Subscription | null = null;\n  const runNextRequest = (subscriber: Subscriber<DataQueryResponse>, requestN: number, requestGroup: number) => {\n    if (shouldStop) {\n      subscriber.complete();\n      return;\n    }\n\n    const done = () => {\n      mergedResponse.state = LoadingState.Done;\n      subscriber.next(mergedResponse);\n      subscriber.complete();\n    };\n\n    const nextRequest = () => {\n      const { nextRequestN, nextRequestGroup } = getNextRequestPointers(requests, requestGroup, requestN);\n      if (nextRequestN > 0 && nextRequestGroup >= 0) {\n        runNextRequest(subscriber, nextRequestN, nextRequestGroup);\n        return;\n      }\n      done();\n    };\n\n    const group = requests[requestGroup];\n    const range = group.partition[requestN - 1];\n    const targets = adjustTargetsFromResponseState(group.request.targets, mergedResponse);\n\n    if (!targets.length) {\n      nextRequest();\n      return;\n    }\n\n    const subRequest = { ...requests[requestGroup].request, range, targets };\n    // request may not have a request id\n    if (group.request.requestId) {\n      subRequest.requestId = `${group.request.requestId}_${requestN}`;\n    }\n\n    subquerySubsciption = datasource.runQuery(subRequest).subscribe({\n      next: (partialResponse) => {\n        mergedResponse = combineResponses(mergedResponse, partialResponse);\n        mergedResponse = updateLoadingFrame(mergedResponse, subRequest, longestPartition, requestN);\n        if ((mergedResponse.errors ?? []).length > 0 || mergedResponse.error != null) {\n          shouldStop = true;\n        }\n      },\n      complete: () => {\n        subscriber.next(mergedResponse);\n        nextRequest();\n      },\n      error: (error) => {\n        subscriber.error(error);\n      },\n    });\n  };\n\n  const response = new Observable<DataQueryResponse>((subscriber) => {\n    runNextRequest(subscriber, totalRequests, 0);\n    return () => {\n      shouldStop = true;\n      if (subquerySubsciption != null) {\n        subquerySubsciption.unsubscribe();\n      }\n    };\n  });\n\n  return response;\n}\n\nfunction updateLoadingFrame(\n  response: DataQueryResponse,\n  request: DataQueryRequest<LokiQuery>,\n  partition: TimeRange[],\n  requestN: number\n): DataQueryResponse {\n  if (isLogsQuery(request.targets[0].expr) || isLogsVolumeRequest(request)) {\n    return response;\n  }\n  const loadingFrameName = 'loki-splitting-progress';\n  response.data = response.data.filter((frame) => frame.name !== loadingFrameName);\n\n  if (requestN <= 1) {\n    return response;\n  }\n\n  const loadingFrame = arrayToDataFrame([\n    {\n      time: partition[0].from.valueOf(),\n      timeEnd: partition[requestN - 2].to.valueOf(),\n      isRegion: true,\n      color: 'rgba(120, 120, 120, 0.1)',\n    },\n  ]);\n  loadingFrame.name = loadingFrameName;\n  loadingFrame.meta = {\n    dataTopic: DataTopic.Annotations,\n  };\n\n  response.data.push(loadingFrame);\n\n  return response;\n}\n\nfunction isLogsVolumeRequest(request: DataQueryRequest<LokiQuery>): boolean {\n  return request.targets.some((target) => target.refId.startsWith('log-volume'));\n}\n\nfunction getNextRequestPointers(requests: LokiGroupedRequest[], requestGroup: number, requestN: number) {\n  // There's a pending request from the next group:\n  for (let i = requestGroup + 1; i < requests.length; i++) {\n    const group = requests[i];\n    if (group.partition[requestN - 1]) {\n      return {\n        nextRequestGroup: i,\n        nextRequestN: requestN,\n      };\n    }\n  }\n  return {\n    // Find the first group where `[requestN - 1]` is defined\n    nextRequestGroup: requests.findIndex((group) => group?.partition[requestN - 1] !== undefined),\n    nextRequestN: requestN - 1,\n  };\n}\n\nfunction querySupportsSplitting(query: LokiQuery) {\n  return (\n    query.queryType !== LokiQueryType.Instant &&\n    // Queries with $__range variable should not be split because then the interpolated $__range variable is incorrect\n    // because it is interpolated on the backend with the split timeRange\n    !isQueryWithRangeVariable(query.expr)\n  );\n}\n\nexport function runSplitQuery(datasource: LokiDatasource, request: DataQueryRequest<LokiQuery>) {\n  const queries = request.targets.filter((query) => !query.hide).filter((query) => query.expr);\n  const [nonSplittingQueries, normalQueries] = partition(queries, (query) => !querySupportsSplitting(query));\n  const [logQueries, metricQueries] = partition(normalQueries, (query) => isLogsQuery(query.expr));\n\n  request.queryGroupId = uuidv4();\n  const oneDayMs = 24 * 60 * 60 * 1000;\n  const rangePartitionedLogQueries = groupBy(logQueries, (query) =>\n    query.splitDuration ? durationToMilliseconds(parseDuration(query.splitDuration)) : oneDayMs\n  );\n  const rangePartitionedMetricQueries = groupBy(metricQueries, (query) =>\n    query.splitDuration ? durationToMilliseconds(parseDuration(query.splitDuration)) : oneDayMs\n  );\n\n  const requests: LokiGroupedRequest[] = [];\n  for (const [chunkRangeMs, queries] of Object.entries(rangePartitionedLogQueries)) {\n    const resolutionPartition = groupBy(queries, (query) => query.resolution || 1);\n    for (const resolution in resolutionPartition) {\n      requests.push({\n        request: { ...request, targets: resolutionPartition[resolution] },\n        partition: partitionTimeRange(true, request.range, request.intervalMs, Number(chunkRangeMs)),\n      });\n    }\n  }\n\n  for (const [chunkRangeMs, queries] of Object.entries(rangePartitionedMetricQueries)) {\n    const stepMsPartition = groupBy(queries, (query) =>\n      calculateStep(request.intervalMs, request.range, query.resolution || 1, query.step)\n    );\n\n    for (const stepMs in stepMsPartition) {\n      requests.push({\n        request: { ...request, targets: stepMsPartition[stepMs] },\n        partition: partitionTimeRange(false, request.range, Number(stepMs), Number(chunkRangeMs)),\n      });\n    }\n  }\n\n  if (nonSplittingQueries.length) {\n    requests.push({\n      request: { ...request, targets: nonSplittingQueries },\n      partition: [request.range],\n    });\n  }\n\n  const startTime = new Date();\n  return runSplitGroupedQueries(datasource, requests).pipe(\n    tap((response) => {\n      if (response.state === LoadingState.Done) {\n        trackGroupedQueries(response, requests, request, startTime, {\n          predefinedOperations: datasource.predefinedOperations,\n        });\n      }\n    })\n  );\n}\n\n// Replicate from backend for split queries for now, until we can move query splitting to the backend\n// https://github.com/grafana/grafana/blob/main/pkg/tsdb/loki/step.go#L23\nfunction calculateStep(intervalMs: number, range: TimeRange, resolution: number, step: string | undefined) {\n  // If we can parse step,the we use it\n  // Otherwise we will calculate step based on interval\n  const interval_regex = /(-?\\d+(?:\\.\\d+)?)(ms|[Mwdhmsy])/;\n  if (step?.match(interval_regex)) {\n    return rangeUtil.intervalToMs(step) * resolution;\n  }\n\n  const newStep = intervalMs * resolution;\n  const safeStep = Math.round((range.to.valueOf() - range.from.valueOf()) / 11000);\n  return Math.max(newStep, safeStep);\n}\n","import { map, Observable, defer, mergeMap } from 'rxjs';\n\nimport {\n  DataFrameJSON,\n  DataQueryRequest,\n  DataQueryResponse,\n  LiveChannelScope,\n  LoadingState,\n  StreamingDataFrame,\n} from '@grafana/data';\nimport { getGrafanaLiveSrv } from '@grafana/runtime';\n\nimport { LokiDatasource } from './datasource';\nimport { LokiQuery } from './types';\n\n/**\n * Calculate a unique key for the query.  The key is used to pick a channel and should\n * be unique for each distinct query execution plan.  This key is not secure and is only picked to avoid\n * possible collisions\n */\nexport async function getLiveStreamKey(query: LokiQuery): Promise<string> {\n  const str = JSON.stringify({ expr: query.expr });\n\n  const msgUint8 = new TextEncoder().encode(str); // encode as (utf-8) Uint8Array\n  const hashBuffer = await crypto.subtle.digest('SHA-1', msgUint8); // hash the message\n  const hashArray = Array.from(new Uint8Array(hashBuffer.slice(0, 8))); // first 8 bytes\n  return hashArray.map((b) => b.toString(16).padStart(2, '0')).join('');\n}\n\n// This will get both v1 and v2 result formats\nexport function doLokiChannelStream(\n  query: LokiQuery,\n  ds: LokiDatasource,\n  options: DataQueryRequest<LokiQuery>\n): Observable<DataQueryResponse> {\n  // maximum time to keep values\n  const range = options.range;\n  const maxDelta = range.to.valueOf() - range.from.valueOf() + 1000;\n  let maxLength = options.maxDataPoints ?? 1000;\n  if (maxLength > 100) {\n    // for small buffers, keep them small\n    maxLength *= 2;\n  }\n\n  let frame: StreamingDataFrame | undefined = undefined;\n  const updateFrame = (msg: any) => {\n    if (msg?.message) {\n      const p = msg.message as DataFrameJSON;\n      if (!frame) {\n        frame = StreamingDataFrame.fromDataFrameJSON(p, {\n          maxLength,\n          maxDelta,\n          displayNameFormat: query.legendFormat,\n        });\n      } else {\n        frame.push(p);\n      }\n    }\n    return frame;\n  };\n\n  return defer(() => getLiveStreamKey(query)).pipe(\n    mergeMap((key) => {\n      return getGrafanaLiveSrv()\n        .getStream<any>({\n          scope: LiveChannelScope.DataSource,\n          namespace: ds.uid,\n          path: `tail/${key}`,\n          data: {\n            ...query,\n            timeRange: {\n              from: range.from.valueOf().toString(),\n              to: range.to.valueOf().toString(),\n            },\n          },\n        })\n        .pipe(\n          map((evt) => {\n            const frame = updateFrame(evt);\n            return {\n              data: frame ? [frame] : [],\n              state: LoadingState.Streaming,\n            };\n          })\n        );\n    })\n  );\n}\n","import React, { FormEvent, useState, useEffect } from 'react';\n\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { InlineField, InlineFieldRow, Input, Select } from '@grafana/ui';\n\nimport { LokiDatasource } from '../datasource';\nimport { migrateVariableQuery } from '../migrations/variableQueryMigrations';\nimport { LokiOptions, LokiQuery, LokiVariableQuery, LokiVariableQueryType as QueryType } from '../types';\n\nconst variableOptions = [\n  { label: 'Label names', value: QueryType.LabelNames },\n  { label: 'Label values', value: QueryType.LabelValues },\n];\n\nexport type Props = QueryEditorProps<LokiDatasource, LokiQuery, LokiOptions, LokiVariableQuery>;\n\nconst refId = 'LokiVariableQueryEditor-VariableQuery';\n\nexport const LokiVariableQueryEditor = ({ onChange, query, datasource }: Props) => {\n  const [type, setType] = useState<number | undefined>(undefined);\n  const [label, setLabel] = useState('');\n  const [labelOptions, setLabelOptions] = useState<Array<SelectableValue<string>>>([]);\n  const [stream, setStream] = useState('');\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n\n    const variableQuery = typeof query === 'string' ? migrateVariableQuery(query) : query;\n    setType(variableQuery.type);\n    setLabel(variableQuery.label || '');\n    setStream(variableQuery.stream || '');\n  }, [query]);\n\n  useEffect(() => {\n    if (type !== QueryType.LabelValues) {\n      return;\n    }\n\n    datasource.labelNamesQuery().then((labelNames: Array<{ text: string }>) => {\n      setLabelOptions(labelNames.map(({ text }) => ({ label: text, value: text })));\n    });\n  }, [datasource, type]);\n\n  const onQueryTypeChange = (newType: SelectableValue<QueryType>) => {\n    setType(newType.value);\n    if (newType.value !== undefined) {\n      onChange({\n        type: newType.value,\n        label,\n        stream,\n        refId,\n      });\n    }\n  };\n\n  const onLabelChange = (newLabel: SelectableValue<string>) => {\n    setLabel(newLabel.value || '');\n  };\n\n  const onStreamChange = (e: FormEvent<HTMLInputElement>) => {\n    setStream(e.currentTarget.value);\n  };\n\n  const handleBlur = () => {\n    if (type !== undefined) {\n      onChange({ type, label, stream, refId: 'LokiVariableQueryEditor-VariableQuery' });\n    }\n  };\n\n  return (\n    <>\n      <InlineFieldRow>\n        <InlineField label=\"Query type\" labelWidth={20}>\n          <Select\n            aria-label=\"Query type\"\n            onChange={onQueryTypeChange}\n            onBlur={handleBlur}\n            value={type}\n            options={variableOptions}\n            width={16}\n          />\n        </InlineField>\n        {type === QueryType.LabelValues && (\n          <>\n            <InlineField label=\"Label\" labelWidth={20}>\n              <Select\n                aria-label=\"Label\"\n                onChange={onLabelChange}\n                onBlur={handleBlur}\n                value={{ label: label, value: label }}\n                options={labelOptions}\n                width={16}\n                allowCustomValue\n              />\n            </InlineField>\n          </>\n        )}\n      </InlineFieldRow>\n      {type === QueryType.LabelValues && (\n        <InlineFieldRow>\n          <InlineField\n            label=\"Stream selector\"\n            labelWidth={20}\n            grow={true}\n            tooltip={\n              <div>\n                {\n                  'Optional. If defined, a list of values for the specified log stream selector is returned. For example: {label=\"value\"} or {label=\"$variable\"}'\n                }\n              </div>\n            }\n          >\n            <Input\n              type=\"text\"\n              aria-label=\"Stream selector\"\n              placeholder=\"Optional stream selector\"\n              value={stream}\n              onChange={onStreamChange}\n              onBlur={handleBlur}\n            />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n    </>\n  );\n};\n","import { from, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CustomVariableSupport, DataQueryRequest, MetricFindValue, ScopedVars } from '@grafana/data';\n\nimport { LokiVariableQueryEditor } from './components/VariableQueryEditor';\nimport { LokiDatasource } from './datasource';\nimport { LokiVariableQuery } from './types';\n\nexport class LokiVariableSupport extends CustomVariableSupport<LokiDatasource, LokiVariableQuery> {\n  editor = LokiVariableQueryEditor;\n\n  constructor(private datasource: LokiDatasource) {\n    super();\n  }\n\n  async execute(query: LokiVariableQuery, scopedVars: ScopedVars) {\n    return this.datasource.metricFindQuery(query, { scopedVars });\n  }\n\n  query(request: DataQueryRequest<LokiVariableQuery>): Observable<{ data: MetricFindValue[] }> {\n    const result = this.execute(request.targets[0], request.scopedVars);\n\n    return from(result).pipe(map((data) => ({ data })));\n  }\n}\n","import { cloneDeep, map as lodashMap } from 'lodash';\nimport { lastValueFrom, merge, Observable, of, throwError } from 'rxjs';\nimport { catchError, map, switchMap, tap } from 'rxjs/operators';\n\nimport {\n  AbstractQuery,\n  AnnotationEvent,\n  AnnotationQueryRequest,\n  CoreApp,\n  DataFrame,\n  DataFrameView,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  DataSourceWithLogsContextSupport,\n  DataSourceWithSupplementaryQueriesSupport,\n  SupplementaryQueryType,\n  DataSourceWithQueryExportSupport,\n  DataSourceWithQueryImportSupport,\n  FieldCache,\n  FieldType,\n  Labels,\n  LoadingState,\n  LogLevel,\n  LogRowModel,\n  QueryFixAction,\n  QueryHint,\n  rangeUtil,\n  ScopedVars,\n  SupplementaryQueryOptions,\n  TimeRange,\n  LogRowContextOptions,\n  DataSourceWithToggleableQueryFiltersSupport,\n  ToggleFilterAction,\n  QueryFilterOptions,\n  renderLegendFormat,\n  LegacyMetricFindQueryOptions,\n} from '@grafana/data';\nimport { intervalToMs } from '@grafana/data/src/datetime/rangeutil';\nimport { Duration } from '@grafana/lezer-logql';\nimport { BackendSrvRequest, config, DataSourceWithBackend } from '@grafana/runtime';\nimport { DataQuery } from '@grafana/schema';\nimport { convertToWebSocketUrl } from 'app/core/utils/explore';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\n\nimport { serializeParams } from '../../../core/utils/fetch';\nimport { queryLogsSample, queryLogsVolume } from '../../../features/logs/logsModel';\nimport { getLogLevelFromKey } from '../../../features/logs/utils';\nimport { replaceVariables, returnVariables } from '../prometheus/querybuilder/shared/parsingUtils';\n\nimport LanguageProvider from './LanguageProvider';\nimport { LiveStreams, LokiLiveTarget } from './LiveStreams';\nimport { LogContextProvider } from './LogContextProvider';\nimport { transformBackendResult } from './backendResultTransformer';\nimport { LokiAnnotationsQueryEditor } from './components/AnnotationsQueryEditor';\nimport { placeHolderScopedVars } from './components/monaco-query-field/monaco-completion-provider/validation';\nimport { escapeLabelValueInSelector, isRegexSelector } from './languageUtils';\nimport { labelNamesRegex, labelValuesRegex } from './migrations/variableQueryMigrations';\nimport {\n  addLabelFormatToQuery,\n  addLabelToQuery,\n  addNoPipelineErrorToQuery,\n  addParserToQuery,\n  removeCommentsFromQuery,\n  addFilterAsLabelFilter,\n  getParserPositions,\n  toLabelFilter,\n  addLineFilter,\n  findLastPosition,\n  getLabelFilterPositions,\n  queryHasFilter,\n  removeLabelFromQuery,\n} from './modifyQuery';\nimport { getQueryHints } from './queryHints';\nimport { runSplitQuery } from './querySplitting';\nimport {\n  getLogQueryFromMetricsQuery,\n  getLokiQueryFromDataQuery,\n  getNodesFromQuery,\n  getNormalizedLokiQuery,\n  getStreamSelectorsFromQuery,\n  isLogsQuery,\n  isQueryWithError,\n  requestSupportsSplitting,\n} from './queryUtils';\nimport { doLokiChannelStream } from './streaming';\nimport { trackQuery } from './tracking';\nimport {\n  LokiOptions,\n  LokiQuery,\n  LokiQueryType,\n  LokiVariableQuery,\n  LokiVariableQueryType,\n  QueryStats,\n  SupportingQueryType,\n} from './types';\nimport { LokiVariableSupport } from './variables';\n\nexport type RangeQueryOptions = DataQueryRequest<LokiQuery> | AnnotationQueryRequest<LokiQuery>;\nexport const DEFAULT_MAX_LINES = 1000;\nexport const LOKI_ENDPOINT = '/loki/api/v1';\nexport const REF_ID_DATA_SAMPLES = 'loki-data-samples';\nexport const REF_ID_STARTER_ANNOTATION = 'annotation-';\nexport const REF_ID_STARTER_LOG_ROW_CONTEXT = 'log-row-context-query-';\nexport const REF_ID_STARTER_LOG_VOLUME = 'log-volume-';\nexport const REF_ID_STARTER_LOG_SAMPLE = 'log-sample-';\nconst NS_IN_MS = 1000000;\n\nexport function makeRequest(\n  query: LokiQuery,\n  range: TimeRange,\n  app: CoreApp,\n  requestId: string,\n  hideFromInspector?: boolean\n): DataQueryRequest<LokiQuery> {\n  const intervalInfo = rangeUtil.calculateInterval(range, 1);\n  return {\n    targets: [query],\n    requestId,\n    interval: intervalInfo.interval,\n    intervalMs: intervalInfo.intervalMs,\n    range: range,\n    scopedVars: {},\n    timezone: 'UTC',\n    app,\n    startTime: Date.now(),\n    hideFromInspector,\n  };\n}\n\nexport class LokiDatasource\n  extends DataSourceWithBackend<LokiQuery, LokiOptions>\n  implements\n    DataSourceWithLogsContextSupport,\n    DataSourceWithSupplementaryQueriesSupport<LokiQuery>,\n    DataSourceWithQueryImportSupport<LokiQuery>,\n    DataSourceWithQueryExportSupport<LokiQuery>,\n    DataSourceWithToggleableQueryFiltersSupport<LokiQuery>\n{\n  private streams = new LiveStreams();\n  private logContextProvider: LogContextProvider;\n  languageProvider: LanguageProvider;\n  maxLines: number;\n  predefinedOperations: string;\n\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings<LokiOptions>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv(),\n    private readonly timeSrv: TimeSrv = getTimeSrv()\n  ) {\n    super(instanceSettings);\n\n    this.languageProvider = new LanguageProvider(this);\n    const settingsData = instanceSettings.jsonData || {};\n    this.maxLines = parseInt(settingsData.maxLines ?? '0', 10) || DEFAULT_MAX_LINES;\n    this.predefinedOperations = settingsData.predefinedOperations ?? '';\n    this.annotations = {\n      QueryEditor: LokiAnnotationsQueryEditor,\n    };\n    this.variables = new LokiVariableSupport(this);\n    this.logContextProvider = new LogContextProvider(this);\n  }\n\n  getDataProvider(\n    type: SupplementaryQueryType,\n    request: DataQueryRequest<LokiQuery>\n  ): Observable<DataQueryResponse> | undefined {\n    if (!this.getSupportedSupplementaryQueryTypes().includes(type)) {\n      return undefined;\n    }\n    switch (type) {\n      case SupplementaryQueryType.LogsVolume:\n        return this.getLogsVolumeDataProvider(request);\n      case SupplementaryQueryType.LogsSample:\n        return this.getLogsSampleDataProvider(request);\n      default:\n        return undefined;\n    }\n  }\n\n  getSupportedSupplementaryQueryTypes(): SupplementaryQueryType[] {\n    return [SupplementaryQueryType.LogsVolume, SupplementaryQueryType.LogsSample];\n  }\n\n  getSupplementaryQuery(options: SupplementaryQueryOptions, query: LokiQuery): LokiQuery | undefined {\n    if (!this.getSupportedSupplementaryQueryTypes().includes(options.type)) {\n      return undefined;\n    }\n\n    const normalizedQuery = getNormalizedLokiQuery(query);\n    const expr = removeCommentsFromQuery(normalizedQuery.expr);\n    let isQuerySuitable = false;\n\n    switch (options.type) {\n      case SupplementaryQueryType.LogsVolume:\n        // it has to be a logs-producing range-query\n        isQuerySuitable = !!(expr && isLogsQuery(expr) && normalizedQuery.queryType === LokiQueryType.Range);\n        if (!isQuerySuitable) {\n          return undefined;\n        }\n\n        return {\n          ...normalizedQuery,\n          refId: `${REF_ID_STARTER_LOG_VOLUME}${normalizedQuery.refId}`,\n          queryType: LokiQueryType.Range,\n          supportingQueryType: SupportingQueryType.LogsVolume,\n          expr: `sum by (level) (count_over_time(${expr}[$__auto]))`,\n        };\n\n      case SupplementaryQueryType.LogsSample:\n        // it has to be a metric query\n        isQuerySuitable = !!(expr && !isLogsQuery(expr));\n        if (!isQuerySuitable) {\n          return undefined;\n        }\n        return {\n          ...normalizedQuery,\n          queryType: LokiQueryType.Range,\n          refId: `${REF_ID_STARTER_LOG_SAMPLE}${normalizedQuery.refId}`,\n          expr: getLogQueryFromMetricsQuery(expr),\n          maxLines: Number.isNaN(Number(options.limit)) ? this.maxLines : Number(options.limit),\n        };\n\n      default:\n        return undefined;\n    }\n  }\n\n  private getLogsVolumeDataProvider(request: DataQueryRequest<LokiQuery>): Observable<DataQueryResponse> | undefined {\n    const logsVolumeRequest = cloneDeep(request);\n    const targets = logsVolumeRequest.targets\n      .map((query) => this.getSupplementaryQuery({ type: SupplementaryQueryType.LogsVolume }, query))\n      .filter((query): query is LokiQuery => !!query);\n\n    if (!targets.length) {\n      return undefined;\n    }\n\n    return queryLogsVolume(\n      this,\n      { ...logsVolumeRequest, targets },\n      {\n        extractLevel,\n        range: request.range,\n        targets: request.targets,\n      }\n    );\n  }\n\n  private getLogsSampleDataProvider(request: DataQueryRequest<LokiQuery>): Observable<DataQueryResponse> | undefined {\n    const logsSampleRequest = cloneDeep(request);\n    const targets = logsSampleRequest.targets\n      .map((query) => this.getSupplementaryQuery({ type: SupplementaryQueryType.LogsSample, limit: 100 }, query))\n      .filter((query): query is LokiQuery => !!query);\n\n    if (!targets.length) {\n      return undefined;\n    }\n    return queryLogsSample(this, { ...logsSampleRequest, targets });\n  }\n\n  query(request: DataQueryRequest<LokiQuery>): Observable<DataQueryResponse> {\n    const queries = request.targets\n      .map(getNormalizedLokiQuery) // \"fix\" the `.queryType` prop\n      .map((q) => ({ ...q, maxLines: q.maxLines ?? this.maxLines }));\n\n    const fixedRequest: DataQueryRequest<LokiQuery> = {\n      ...request,\n      targets: queries,\n    };\n\n    const streamQueries = fixedRequest.targets.filter((q) => q.queryType === LokiQueryType.Stream);\n    if (\n      config.featureToggles.lokiExperimentalStreaming &&\n      streamQueries.length > 0 &&\n      fixedRequest.rangeRaw?.to === 'now'\n    ) {\n      // this is still an in-development feature,\n      // we do not support mixing stream-queries with normal-queries for now.\n      const streamRequest = {\n        ...fixedRequest,\n        targets: streamQueries,\n      };\n      return merge(\n        ...streamQueries.map((q) =>\n          doLokiChannelStream(\n            this.applyTemplateVariables(q, request.scopedVars),\n            this, // the datasource\n            streamRequest\n          )\n        )\n      );\n    }\n\n    if (fixedRequest.liveStreaming) {\n      return this.runLiveQueryThroughBackend(fixedRequest);\n    }\n\n    if (config.featureToggles.lokiQuerySplitting && requestSupportsSplitting(fixedRequest.targets)) {\n      return runSplitQuery(this, fixedRequest);\n    }\n\n    const startTime = new Date();\n    return this.runQuery(fixedRequest).pipe(\n      tap((response) =>\n        trackQuery(response, fixedRequest, startTime, { predefinedOperations: this.predefinedOperations })\n      )\n    );\n  }\n\n  runQuery(fixedRequest: DataQueryRequest<LokiQuery>) {\n    return super\n      .query(fixedRequest)\n      .pipe(\n        map((response) =>\n          transformBackendResult(response, fixedRequest.targets, this.instanceSettings.jsonData.derivedFields ?? [])\n        )\n      );\n  }\n\n  private runLiveQueryThroughBackend(request: DataQueryRequest<LokiQuery>): Observable<DataQueryResponse> {\n    // this only works in explore-mode, so variables don't need to be handled,\n    //  and only for logs-queries, not metric queries\n    const logsQueries = request.targets.filter((query) => query.expr !== '' && isLogsQuery(query.expr));\n\n    if (logsQueries.length === 0) {\n      return of({\n        data: [],\n        state: LoadingState.Done,\n      });\n    }\n\n    const subQueries = logsQueries.map((query) => {\n      const maxDataPoints = query.maxLines || this.maxLines;\n      // FIXME: currently we are running it through the frontend still.\n      return this.runLiveQuery(query, maxDataPoints);\n    });\n\n    return merge(...subQueries);\n  }\n\n  private createLiveTarget(target: LokiQuery, maxDataPoints: number): LokiLiveTarget {\n    const query = target.expr;\n    const baseUrl = this.instanceSettings.url;\n    const params = serializeParams({ query });\n\n    return {\n      query,\n      url: convertToWebSocketUrl(`${baseUrl}/loki/api/v1/tail?${params}`),\n      refId: target.refId,\n      size: maxDataPoints,\n    };\n  }\n\n  /**\n   * Runs live queries which in this case means creating a websocket and listening on it for new logs.\n   * This returns a bit different dataFrame than runQueries as it returns single dataframe even if there are multiple\n   * Loki streams, sets only common labels on dataframe.labels and has additional dataframe.fields.labels for unique\n   * labels per row.\n   */\n  private runLiveQuery = (target: LokiQuery, maxDataPoints: number): Observable<DataQueryResponse> => {\n    const liveTarget = this.createLiveTarget(target, maxDataPoints);\n\n    return this.streams.getStream(liveTarget).pipe(\n      map((data) => ({\n        data: data || [],\n        key: `loki-${liveTarget.refId}`,\n        state: LoadingState.Streaming,\n      })),\n      catchError((err: any) => {\n        return throwError(() => `Live tailing was stopped due to following error: ${err.reason}`);\n      })\n    );\n  };\n\n  interpolateVariablesInQueries(queries: LokiQuery[], scopedVars: ScopedVars): LokiQuery[] {\n    let expandedQueries = queries;\n    if (queries && queries.length) {\n      expandedQueries = queries.map((query) => ({\n        ...query,\n        datasource: this.getRef(),\n        expr: this.addAdHocFilters(this.templateSrv.replace(query.expr, scopedVars, this.interpolateQueryExpr)),\n      }));\n    }\n\n    return expandedQueries;\n  }\n\n  getQueryDisplayText(query: LokiQuery) {\n    return query.expr;\n  }\n\n  getTimeRange() {\n    return this.timeSrv.timeRange();\n  }\n\n  getTimeRangeParams() {\n    const timeRange = this.getTimeRange();\n    return { start: timeRange.from.valueOf() * NS_IN_MS, end: timeRange.to.valueOf() * NS_IN_MS };\n  }\n\n  async importFromAbstractQueries(abstractQueries: AbstractQuery[]): Promise<LokiQuery[]> {\n    await this.languageProvider.start();\n    const existingKeys = this.languageProvider.labelKeys;\n\n    if (existingKeys && existingKeys.length) {\n      abstractQueries = abstractQueries.map((abstractQuery) => {\n        abstractQuery.labelMatchers = abstractQuery.labelMatchers.filter((labelMatcher) => {\n          return existingKeys.includes(labelMatcher.name);\n        });\n        return abstractQuery;\n      });\n    }\n\n    return abstractQueries.map((abstractQuery) => this.languageProvider.importFromAbstractQuery(abstractQuery));\n  }\n\n  async exportToAbstractQueries(queries: LokiQuery[]): Promise<AbstractQuery[]> {\n    return queries.map((query) => this.languageProvider.exportToAbstractQuery(query));\n  }\n\n  async metadataRequest(url: string, params?: Record<string, string | number>, options?: Partial<BackendSrvRequest>) {\n    // url must not start with a `/`, otherwise the AJAX-request\n    // going from the browser will contain `//`, which can cause problems.\n    if (url.startsWith('/')) {\n      throw new Error(`invalid metadata request url: ${url}`);\n    }\n\n    const res = await this.getResource(url, params, options);\n    return res.data || [];\n  }\n\n  // We need a specific metadata method for stats endpoint as it does not return res.data,\n  // but it returns stats directly in res object.\n  async statsMetadataRequest(\n    url: string,\n    params?: Record<string, string | number>,\n    options?: Partial<BackendSrvRequest>\n  ): Promise<QueryStats> {\n    if (url.startsWith('/')) {\n      throw new Error(`invalid metadata request url: ${url}`);\n    }\n\n    return await this.getResource(url, params, options);\n  }\n\n  async getQueryStats(query: LokiQuery): Promise<QueryStats | undefined> {\n    // if query is invalid, clear stats, and don't request\n    if (isQueryWithError(this.interpolateString(query.expr, placeHolderScopedVars))) {\n      return undefined;\n    }\n\n    const labelMatchers = getStreamSelectorsFromQuery(query.expr);\n    let statsForAll: QueryStats = { streams: 0, chunks: 0, bytes: 0, entries: 0 };\n\n    for (const idx in labelMatchers) {\n      const { start, end } = this.getStatsTimeRange(query, Number(idx));\n\n      if (start === undefined || end === undefined) {\n        return { streams: 0, chunks: 0, bytes: 0, entries: 0, message: 'Query size estimate not available.' };\n      }\n\n      try {\n        const data = await this.statsMetadataRequest(\n          'index/stats',\n          {\n            query: labelMatchers[idx],\n            start: start,\n            end: end,\n          },\n          { showErrorAlert: false }\n        );\n\n        statsForAll = {\n          streams: statsForAll.streams + data.streams,\n          chunks: statsForAll.chunks + data.chunks,\n          bytes: statsForAll.bytes + data.bytes,\n          entries: statsForAll.entries + data.entries,\n        };\n      } catch (e) {\n        break;\n      }\n    }\n\n    return statsForAll;\n  }\n\n  getStatsTimeRange(query: LokiQuery, idx: number): { start: number | undefined; end: number | undefined } {\n    let start: number, end: number;\n    const NS_IN_MS = 1000000;\n    const durationNodes = getNodesFromQuery(query.expr, [Duration]);\n    const durations = durationNodes.map((d) => query.expr.substring(d.from, d.to));\n\n    if (isLogsQuery(query.expr)) {\n      // logs query with instant type can not be estimated\n      if (query.queryType === LokiQueryType.Instant) {\n        return { start: undefined, end: undefined };\n      }\n      // logs query with range type\n      return this.getTimeRangeParams();\n    }\n\n    if (query.queryType === LokiQueryType.Instant) {\n      // metric query with instant type\n\n      if (!!durations[idx]) {\n        // if query has a duration e.g. [1m]\n        end = this.getTimeRangeParams().end;\n        start = end - intervalToMs(durations[idx]) * NS_IN_MS;\n        return { start, end };\n      } else {\n        // if query has no duration e.g. [$__interval]\n\n        if (/(\\$__auto|\\$__range)/.test(query.expr)) {\n          // if $__auto or $__range is used, we can estimate the time range using the selected range\n          return this.getTimeRangeParams();\n        }\n\n        // otherwise we cant estimate the time range\n        return { start: undefined, end: undefined };\n      }\n    }\n\n    // metric query with range type\n    return this.getTimeRangeParams();\n  }\n\n  async getStats(query: LokiQuery): Promise<QueryStats | null> {\n    if (!query) {\n      return null;\n    }\n\n    const response = await this.getQueryStats(query);\n\n    if (!response) {\n      return null;\n    }\n\n    return Object.values(response).every((v) => v === 0) ? null : response;\n  }\n\n  async metricFindQuery(query: LokiVariableQuery | string, options?: LegacyMetricFindQueryOptions) {\n    if (!query) {\n      return Promise.resolve([]);\n    }\n\n    if (typeof query === 'string') {\n      const interpolated = this.interpolateString(query, options?.scopedVars);\n      return await this.legacyProcessMetricFindQuery(interpolated);\n    }\n\n    const interpolatedQuery = {\n      ...query,\n      label: this.interpolateString(query.label || '', options?.scopedVars),\n      stream: this.interpolateString(query.stream || '', options?.scopedVars),\n    };\n\n    return await this.processMetricFindQuery(interpolatedQuery);\n  }\n\n  private async processMetricFindQuery(query: LokiVariableQuery) {\n    if (query.type === LokiVariableQueryType.LabelNames) {\n      return this.labelNamesQuery();\n    }\n\n    if (!query.label) {\n      return [];\n    }\n\n    // If we have stream selector, use /series endpoint\n    if (query.stream) {\n      return this.labelValuesSeriesQuery(query.stream, query.label);\n    }\n\n    return this.labelValuesQuery(query.label);\n  }\n\n  async legacyProcessMetricFindQuery(query: string) {\n    const labelNames = query.match(labelNamesRegex);\n    if (labelNames) {\n      return await this.labelNamesQuery();\n    }\n\n    const labelValues = query.match(labelValuesRegex);\n    if (labelValues) {\n      // If we have stream selector, use /series endpoint\n      if (labelValues[1]) {\n        return await this.labelValuesSeriesQuery(labelValues[1], labelValues[2]);\n      }\n      return await this.labelValuesQuery(labelValues[2]);\n    }\n\n    return Promise.resolve([]);\n  }\n\n  async labelNamesQuery() {\n    const url = 'labels';\n    const params = this.getTimeRangeParams();\n    const result = await this.metadataRequest(url, params);\n    return result.map((value: string) => ({ text: value }));\n  }\n\n  private async labelValuesQuery(label: string) {\n    const params = this.getTimeRangeParams();\n    const url = `label/${label}/values`;\n    const result = await this.metadataRequest(url, params);\n    return result.map((value: string) => ({ text: value }));\n  }\n\n  private async labelValuesSeriesQuery(expr: string, label: string) {\n    const timeParams = this.getTimeRangeParams();\n    const params = {\n      ...timeParams,\n      'match[]': expr,\n    };\n    const url = 'series';\n    const streams = new Set();\n    const result = await this.metadataRequest(url, params);\n    result.forEach((stream: { [key: string]: string }) => {\n      if (stream[label]) {\n        streams.add({ text: stream[label] });\n      }\n    });\n\n    return Array.from(streams);\n  }\n\n  async getDataSamples(query: LokiQuery): Promise<DataFrame[]> {\n    // Currently works only for logs sample\n    if (!isLogsQuery(query.expr) || isQueryWithError(this.interpolateString(query.expr, placeHolderScopedVars))) {\n      return [];\n    }\n\n    const lokiLogsQuery: LokiQuery = {\n      expr: query.expr,\n      queryType: LokiQueryType.Range,\n      refId: REF_ID_DATA_SAMPLES,\n      // For samples we limit the request to 10 lines, so queries are small and fast\n      maxLines: 10,\n    };\n\n    const timeRange = this.getTimeRange();\n    const request = makeRequest(lokiLogsQuery, timeRange, CoreApp.Unknown, REF_ID_DATA_SAMPLES, true);\n    return await lastValueFrom(this.query(request).pipe(switchMap((res) => of(res.data))));\n  }\n\n  // By implementing getTagKeys and getTagValues we add ad-hoc filters functionality\n  async getTagKeys() {\n    return await this.labelNamesQuery();\n  }\n\n  async getTagValues(options: any = {}) {\n    return await this.labelValuesQuery(options.key);\n  }\n\n  interpolateQueryExpr(value: any, variable: any) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return lokiRegularEscape(value);\n    }\n\n    if (typeof value === 'string') {\n      return lokiSpecialRegexEscape(value);\n    }\n\n    const escapedValues = lodashMap(value, lokiSpecialRegexEscape);\n    return escapedValues.join('|');\n  }\n\n  toggleQueryFilter(query: LokiQuery, filter: ToggleFilterAction): LokiQuery {\n    let expression = query.expr ?? '';\n    switch (filter.type) {\n      case 'FILTER_FOR': {\n        if (filter.options?.key && filter.options?.value) {\n          const value = escapeLabelValueInSelector(filter.options.value);\n\n          // This gives the user the ability to toggle a filter on and off.\n          expression = queryHasFilter(expression, filter.options.key, '=', value)\n            ? removeLabelFromQuery(expression, filter.options.key, '=', value)\n            : addLabelToQuery(expression, filter.options.key, '=', value);\n        }\n        break;\n      }\n      case 'FILTER_OUT': {\n        if (filter.options?.key && filter.options?.value) {\n          const value = escapeLabelValueInSelector(filter.options.value);\n\n          /**\n           * If there is a filter with the same key and value, remove it.\n           * This prevents the user from seeing no changes in the query when they apply\n           * this filter.\n           */\n          if (queryHasFilter(expression, filter.options.key, '=', value)) {\n            expression = removeLabelFromQuery(expression, filter.options.key, '=', value);\n          }\n\n          expression = addLabelToQuery(expression, filter.options.key, '!=', value);\n        }\n        break;\n      }\n      default:\n        break;\n    }\n    return { ...query, expr: expression };\n  }\n\n  queryHasFilter(query: LokiQuery, filter: QueryFilterOptions): boolean {\n    let expression = query.expr ?? '';\n    return queryHasFilter(expression, filter.key, '=', filter.value);\n  }\n\n  modifyQuery(query: LokiQuery, action: QueryFixAction): LokiQuery {\n    let expression = query.expr ?? '';\n    // NB: Usually the labelKeys should be fetched and cached in the datasource,\n    // but there might be some edge cases where this wouldn't be the case.\n    // However the changed would make this method `async`.\n    const allLabels = this.languageProvider.getLabelKeys();\n    switch (action.type) {\n      case 'ADD_FILTER': {\n        if (action.options?.key && action.options?.value) {\n          const value = escapeLabelValueInSelector(action.options.value);\n          expression = addLabelToQuery(\n            expression,\n            action.options.key,\n            '=',\n            value,\n            allLabels.includes(action.options.key) === false\n          );\n        }\n        break;\n      }\n      case 'ADD_FILTER_OUT': {\n        if (action.options?.key && action.options?.value) {\n          const value = escapeLabelValueInSelector(action.options.value);\n          expression = addLabelToQuery(\n            expression,\n            action.options.key,\n            '!=',\n            value,\n            allLabels.includes(action.options.key) === false\n          );\n        }\n        break;\n      }\n      case 'ADD_LOGFMT_PARSER': {\n        expression = addParserToQuery(expression, 'logfmt');\n        break;\n      }\n      case 'ADD_JSON_PARSER': {\n        expression = addParserToQuery(expression, 'json');\n        break;\n      }\n      case 'ADD_UNPACK_PARSER': {\n        expression = addParserToQuery(expression, 'unpack');\n        break;\n      }\n      case 'ADD_NO_PIPELINE_ERROR': {\n        expression = addNoPipelineErrorToQuery(expression);\n        break;\n      }\n      case 'ADD_LEVEL_LABEL_FORMAT': {\n        if (action.options?.originalLabel && action.options?.renameTo) {\n          expression = addLabelFormatToQuery(expression, {\n            renameTo: action.options.renameTo,\n            originalLabel: action.options.originalLabel,\n          });\n        }\n        break;\n      }\n      case 'ADD_LABEL_FILTER': {\n        const parserPositions = getParserPositions(query.expr);\n        const labelFilterPositions = getLabelFilterPositions(query.expr);\n        const lastPosition = findLastPosition([...parserPositions, ...labelFilterPositions]);\n        const filter = toLabelFilter('', '', '=');\n        expression = addFilterAsLabelFilter(expression, [lastPosition], filter);\n        break;\n      }\n      case 'ADD_LINE_FILTER': {\n        expression = addLineFilter(expression);\n        break;\n      }\n      default:\n        break;\n    }\n    return { ...query, expr: expression };\n  }\n\n  getLogRowContext = async (\n    row: LogRowModel,\n    options?: LogRowContextOptions,\n    origQuery?: DataQuery\n  ): Promise<{ data: DataFrame[] }> => {\n    return await this.logContextProvider.getLogRowContext(row, options, getLokiQueryFromDataQuery(origQuery));\n  };\n\n  getLogRowContextQuery = async (\n    row: LogRowModel,\n    options?: LogRowContextOptions,\n    origQuery?: DataQuery\n  ): Promise<DataQuery> => {\n    return await this.logContextProvider.getLogRowContextQuery(row, options, getLokiQueryFromDataQuery(origQuery));\n  };\n\n  getLogRowContextUi(row: LogRowModel, runContextQuery: () => void, origQuery: DataQuery): React.ReactNode {\n    return this.logContextProvider.getLogRowContextUi(row, runContextQuery, getLokiQueryFromDataQuery(origQuery));\n  }\n\n  async annotationQuery(options: any): Promise<AnnotationEvent[]> {\n    const { expr, maxLines, instant, tagKeys = '', titleFormat = '', textFormat = '' } = options.annotation;\n\n    if (!expr) {\n      return [];\n    }\n\n    const id = `${REF_ID_STARTER_ANNOTATION}${options.annotation.name}`;\n\n    const query: LokiQuery = {\n      refId: id,\n      expr,\n      maxLines,\n      instant,\n      queryType: instant ? LokiQueryType.Instant : LokiQueryType.Range,\n    };\n\n    const request = makeRequest(query, options.range, CoreApp.Dashboard, id);\n\n    const { data } = await lastValueFrom(this.query(request));\n\n    const annotations: AnnotationEvent[] = [];\n    const splitKeys: string[] = tagKeys.split(',').filter((v: string) => v !== '');\n\n    for (const frame of data) {\n      const view = new DataFrameView<{ Time: string; Line: string; labels: Labels }>(frame);\n\n      view.forEach((row) => {\n        const { labels } = row;\n\n        const maybeDuplicatedTags = Object.entries(labels)\n          .map(([key, val]) => [key, val.trim()]) // trim all label-values\n          .filter(([key, val]) => {\n            if (val === '') {\n              // remove empty\n              return false;\n            }\n\n            // if tags are specified, remove label if does not match tags\n            if (splitKeys.length && !splitKeys.includes(key)) {\n              return false;\n            }\n\n            return true;\n          })\n          .map(([key, val]) => val); // keep only the label-value\n\n        // remove duplicates\n        const tags = Array.from(new Set(maybeDuplicatedTags));\n\n        annotations.push({\n          time: new Date(row.Time).valueOf(),\n          title: renderLegendFormat(titleFormat, labels),\n          text: renderLegendFormat(textFormat, labels) || row.Line,\n          tags,\n        });\n      });\n    }\n\n    return annotations;\n  }\n\n  showContextToggle(row?: LogRowModel): boolean {\n    return true;\n  }\n\n  addAdHocFilters(queryExpr: string) {\n    const adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    let expr = replaceVariables(queryExpr);\n\n    expr = adhocFilters.reduce((acc: string, filter: { key: string; operator: string; value: string }) => {\n      const { key, operator } = filter;\n      let { value } = filter;\n      if (isRegexSelector(operator)) {\n        // Adhoc filters don't support multiselect, therefore if user selects regex operator\n        // we are going to consider value to be regex filter and use lokiRegularEscape\n        // that does not escape regex special characters (e.g. .*test.* => .*test.*)\n        value = lokiRegularEscape(value);\n      } else {\n        // Otherwise, we want to escape special characters in value\n        value = escapeLabelValueInSelector(value, operator);\n      }\n      return addLabelToQuery(acc, key, operator, value);\n    }, expr);\n\n    return returnVariables(expr);\n  }\n\n  // Used when running queries through backend\n  filterQuery(query: LokiQuery): boolean {\n    if (query.hide || query.expr === '') {\n      return false;\n    }\n    return true;\n  }\n\n  // Used when running queries through backend\n  applyTemplateVariables(target: LokiQuery, scopedVars: ScopedVars): LokiQuery {\n    // We want to interpolate these variables on backend because we support using them in\n    // alerting/ML queries and we want to have consistent interpolation for all queries\n    const { __auto, __interval, __interval_ms, __range, __range_s, __range_ms, ...rest } = scopedVars || {};\n\n    const exprWithAdHoc = this.addAdHocFilters(target.expr);\n\n    return {\n      ...target,\n      legendFormat: this.templateSrv.replace(target.legendFormat, rest),\n      expr: this.templateSrv.replace(exprWithAdHoc, rest, this.interpolateQueryExpr),\n    };\n  }\n\n  interpolateString(string: string, scopedVars?: ScopedVars) {\n    return this.templateSrv.replace(string, scopedVars, this.interpolateQueryExpr);\n  }\n\n  getVariables(): string[] {\n    return this.templateSrv.getVariables().map((v) => `$${v.name}`);\n  }\n\n  getQueryHints(query: LokiQuery, result: DataFrame[]): QueryHint[] {\n    return getQueryHints(query.expr, result);\n  }\n\n  getDefaultQuery(app: CoreApp): LokiQuery {\n    const defaults = { refId: 'A', expr: '' };\n\n    if (app === CoreApp.UnifiedAlerting) {\n      return {\n        ...defaults,\n        queryType: LokiQueryType.Instant,\n      };\n    }\n\n    return {\n      ...defaults,\n      queryType: LokiQueryType.Range,\n    };\n  }\n}\n\n// NOTE: these two functions are very similar to the escapeLabelValueIn* functions\n// in language_utils.ts, but they are not exactly the same algorithm, and we found\n// no way to reuse one in the another or vice versa.\nexport function lokiRegularEscape(value: any) {\n  if (typeof value === 'string') {\n    return value.replace(/'/g, \"\\\\\\\\'\");\n  }\n  return value;\n}\n\nexport function lokiSpecialRegexEscape(value: any) {\n  if (typeof value === 'string') {\n    return lokiRegularEscape(value.replace(/\\\\/g, '\\\\\\\\\\\\\\\\').replace(/[$^*{}\\[\\]+?.()|]/g, '\\\\\\\\$&'));\n  }\n  return value;\n}\n\nfunction extractLevel(dataFrame: DataFrame): LogLevel {\n  let valueField;\n  try {\n    valueField = new FieldCache(dataFrame).getFirstFieldOfType(FieldType.number);\n  } catch {}\n  return valueField?.labels ? getLogLevelFromLabels(valueField.labels) : LogLevel.unknown;\n}\n\nfunction getLogLevelFromLabels(labels: Labels): LogLevel {\n  const labelNames = ['level', 'lvl', 'loglevel'];\n  let levelLabel;\n  for (let labelName of labelNames) {\n    if (labelName in labels) {\n      levelLabel = labelName;\n      break;\n    }\n  }\n  return levelLabel ? getLogLevelFromKey(labels[levelLabel]) : LogLevel.unknown;\n}\n","import { NodeType, SyntaxNode } from '@lezer/common';\nimport { sortBy } from 'lodash';\n\nimport {\n  Identifier,\n  LabelFilter,\n  LabelParser,\n  LineComment,\n  LineFilters,\n  LogExpr,\n  LogRangeExpr,\n  Matcher,\n  parser,\n  PipelineExpr,\n  Selector,\n  UnwrapExpr,\n  String,\n  PipelineStage,\n  LogfmtParser,\n  JsonExpressionParser,\n  LogfmtExpressionParser,\n  Expr,\n} from '@grafana/lezer-logql';\n\nimport { QueryBuilderLabelFilter } from '../prometheus/querybuilder/shared/types';\n\nimport { unescapeLabelValue } from './languageUtils';\nimport { getNodePositionsFromQuery } from './queryUtils';\nimport { lokiQueryModeller as modeller } from './querybuilder/LokiQueryModeller';\nimport { buildVisualQueryFromString, handleQuotes } from './querybuilder/parsing';\n\nexport class NodePosition {\n  from: number;\n  to: number;\n  type?: NodeType;\n\n  constructor(from: number, to: number, type?: NodeType) {\n    this.from = from;\n    this.to = to;\n    this.type = type;\n  }\n\n  static fromNode(node: SyntaxNode): NodePosition {\n    return new NodePosition(node.from, node.to, node.type);\n  }\n\n  contains(position: NodePosition): boolean {\n    return this.from <= position.from && this.to >= position.to;\n  }\n\n  getExpression(query: string): string {\n    return query.substring(this.from, this.to);\n  }\n}\n\n/**\n * Checks for the presence of a given label=value filter in any Matcher expression in the query.\n */\nexport function queryHasFilter(query: string, key: string, operator: string, value: string): boolean {\n  const matchers = getMatchersWithFilter(query, key, operator, value);\n  return matchers.length > 0;\n}\n\n/**\n * Removes a label=value Matcher expression from the query.\n */\nexport function removeLabelFromQuery(query: string, key: string, operator: string, value: string): string {\n  const matchers = getMatchersWithFilter(query, key, operator, value);\n  for (const matcher of matchers) {\n    query =\n      matcher.parent?.type.id === LabelFilter ? removeLabelFilter(query, matcher) : removeSelector(query, matcher);\n  }\n  return query;\n}\n\nfunction removeLabelFilter(query: string, matcher: SyntaxNode): string {\n  const pipelineStage = matcher.parent?.parent;\n  if (!pipelineStage || pipelineStage.type.id !== PipelineStage) {\n    return query;\n  }\n  return (query.substring(0, pipelineStage.from) + query.substring(pipelineStage.to)).trim();\n}\n\nfunction removeSelector(query: string, matcher: SyntaxNode): string {\n  let selector: SyntaxNode | null = matcher;\n  do {\n    selector = selector.parent;\n  } while (selector && selector.type.id !== Selector);\n  const label = matcher.getChild(Identifier);\n  if (!selector || !label) {\n    return query;\n  }\n  const labelName = query.substring(label.from, label.to);\n\n  const prefix = query.substring(0, selector.from);\n  const suffix = query.substring(selector.to);\n\n  const matchVisQuery = buildVisualQueryFromString(query.substring(selector.from, selector.to));\n  matchVisQuery.query.labels = matchVisQuery.query.labels.filter((label) => label.label !== labelName);\n\n  return prefix + modeller.renderQuery(matchVisQuery.query) + suffix;\n}\n\nfunction getMatchersWithFilter(query: string, label: string, operator: string, value: string): SyntaxNode[] {\n  const tree = parser.parse(query);\n  const matchers: SyntaxNode[] = [];\n  tree.iterate({\n    enter: ({ type, node }): void => {\n      if (type.id === Matcher) {\n        matchers.push(node);\n      }\n    },\n  });\n  return matchers.filter((matcher) => {\n    const labelNode = matcher.getChild(Identifier);\n    const opNode = labelNode?.nextSibling;\n    const valueNode = matcher.getChild(String);\n    if (!labelNode || !opNode || !valueNode) {\n      return false;\n    }\n    const labelName = query.substring(labelNode.from, labelNode.to);\n    if (labelName !== label) {\n      return false;\n    }\n    const labelValue = query.substring(valueNode.from, valueNode.to);\n    if (handleQuotes(labelValue) !== unescapeLabelValue(value)) {\n      return false;\n    }\n    const labelOperator = query.substring(opNode.from, opNode.to);\n    if (labelOperator !== operator) {\n      return false;\n    }\n    return true;\n  });\n}\n\n/**\n * Adds label filter to existing query. Useful for query modification for example for ad hoc filters.\n *\n * It uses LogQL parser to find instances of labels, alters them and then splices them back into the query.\n * In a case when we have parser, instead of adding new instance of label it adds label filter after the parser.\n *\n * This operates on substrings of the query with labels and operates just on those. This makes this\n * more robust and can alter even invalid queries, and preserves in general the query structure and whitespace.\n *\n * @param {string} query\n * @param {string} key\n * @param {string} operator\n * @param {string} value\n * @param {boolean} [forceAsLabelFilter=false]  - if true, it will add a LabelFilter expression even if there is no parser in the query\n */\nexport function addLabelToQuery(\n  query: string,\n  key: string,\n  operator: string,\n  value: string,\n  forceAsLabelFilter = false\n): string {\n  if (!key || !value) {\n    throw new Error('Need label to add to query.');\n  }\n\n  const streamSelectorPositions = getStreamSelectorPositions(query);\n  if (!streamSelectorPositions.length) {\n    return query;\n  }\n\n  const hasStreamSelectorMatchers = getMatcherInStreamPositions(query);\n  const everyStreamSelectorHasMatcher = streamSelectorPositions.every((streamSelectorPosition) =>\n    hasStreamSelectorMatchers.some(\n      (matcherPosition) =>\n        matcherPosition.from >= streamSelectorPosition.from && matcherPosition.to <= streamSelectorPosition.to\n    )\n  );\n  const parserPositions = getParserPositions(query);\n  const labelFilterPositions = getLabelFilterPositions(query);\n\n  const filter = toLabelFilter(key, value, operator);\n  // If we have non-empty stream selector and parser/label filter, we want to add a new label filter after the last one.\n  // If some of the stream selectors don't have matchers, we want to add new matcher to the all stream selectors.\n  if (forceAsLabelFilter) {\n    // `forceAsLabelFilter` is mostly used for structured metadata labels. Those are not\n    // very well distinguishable from real labels, but need to be added as label\n    // filters after the last stream selector, parser or label filter. This is\n    // just a quickfix for now and still has edge-cases where it can fail.\n    // TODO: improve this once we have a better API in Loki to distinguish\n    // between the origins of labels.\n    const positionToAdd = findLastPosition([...streamSelectorPositions, ...labelFilterPositions, ...parserPositions]);\n    return addFilterAsLabelFilter(query, [positionToAdd], filter);\n  } else if (everyStreamSelectorHasMatcher && (labelFilterPositions.length || parserPositions.length)) {\n    // in case we are not adding the label to stream selectors we need to find the last position to add in each expression\n    const subExpressions = findLeaves(getNodePositionsFromQuery(query, [Expr]));\n    const parserFilterPositions = [...parserPositions, ...labelFilterPositions];\n\n    // find last position for each subexpression\n    const lastPositionsPerExpression = subExpressions.map((subExpression) => {\n      return findLastPosition(\n        parserFilterPositions.filter((p) => {\n          return subExpression.contains(p);\n        })\n      );\n    });\n\n    return addFilterAsLabelFilter(query, lastPositionsPerExpression, filter);\n  } else {\n    return addFilterToStreamSelector(query, streamSelectorPositions, filter);\n  }\n}\n\n/**\n * Adds parser to existing query. Useful for query modification for hints.\n * It uses LogQL parser to find instances of stream selectors or line filters and adds parser after them.\n *\n * @param query\n * @param parser\n */\nexport function addParserToQuery(query: string, parser: string): string {\n  const lineFilterPositions = getLineFiltersPositions(query);\n\n  if (lineFilterPositions.length) {\n    return addParser(query, lineFilterPositions, parser);\n  } else {\n    const streamSelectorPositions = getStreamSelectorPositions(query);\n    if (!streamSelectorPositions.length) {\n      return query;\n    }\n    return addParser(query, streamSelectorPositions, parser);\n  }\n}\n\n/**\n * Adds filtering for pipeline errors to existing query. Useful for query modification for hints.\n * It uses LogQL parser to find parsers and adds pipeline errors filtering after them.\n *\n * @param query\n */\nexport function addNoPipelineErrorToQuery(query: string): string {\n  const parserPositions = getParserPositions(query);\n  if (!parserPositions.length) {\n    return query;\n  }\n\n  const filter = toLabelFilter('__error__', '', '=');\n  return addFilterAsLabelFilter(query, parserPositions, filter);\n}\n\n/**\n * Adds label format to existing query. Useful for query modification for hints.\n * It uses LogQL parser to find log query and add label format at the end.\n *\n * @param query\n * @param labelFormat\n */\nexport function addLabelFormatToQuery(query: string, labelFormat: { originalLabel: string; renameTo: string }): string {\n  const logQueryPositions = getLogQueryPositions(query);\n  return addLabelFormat(query, logQueryPositions, labelFormat);\n}\n\n/**\n * Removes all comments from query.\n * It uses  LogQL parser to find all LineComments and removes them.\n */\nexport function removeCommentsFromQuery(query: string): string {\n  const lineCommentPositions = getLineCommentPositions(query);\n\n  if (!lineCommentPositions.length) {\n    return query;\n  }\n\n  let newQuery = '';\n  let prev = 0;\n\n  for (let lineCommentPosition of lineCommentPositions) {\n    newQuery = newQuery + query.substring(prev, lineCommentPosition.from);\n    prev = lineCommentPosition.to;\n  }\n  newQuery = newQuery + query.substring(prev);\n  return newQuery;\n}\n\n/**\n * Parse the string and get all Selector positions in the query together with parsed representation of the\n * selector.\n * @param query\n */\nexport function getStreamSelectorPositions(query: string): NodePosition[] {\n  const tree = parser.parse(query);\n  const positions: NodePosition[] = [];\n  tree.iterate({\n    enter: ({ type, node }): false | void => {\n      if (type.id === Selector) {\n        positions.push(NodePosition.fromNode(node));\n        return false;\n      }\n    },\n  });\n  return positions;\n}\n\nfunction getMatcherInStreamPositions(query: string): NodePosition[] {\n  const tree = parser.parse(query);\n  const positions: NodePosition[] = [];\n  tree.iterate({\n    enter: ({ node }): false | void => {\n      if (node.type.id === Selector) {\n        positions.push(...getAllPositionsInNodeByType(node, Matcher));\n      }\n    },\n  });\n  return positions;\n}\n\n/**\n * Parse the string and get all LabelParser positions in the query.\n * @param query\n */\nexport function getParserPositions(query: string): NodePosition[] {\n  const tree = parser.parse(query);\n  const positions: NodePosition[] = [];\n  const parserNodeTypes = [LabelParser, JsonExpressionParser, LogfmtParser, LogfmtExpressionParser];\n  tree.iterate({\n    enter: ({ type, node }): false | void => {\n      if (parserNodeTypes.includes(type.id)) {\n        positions.push(NodePosition.fromNode(node));\n        return false;\n      }\n    },\n  });\n  return positions;\n}\n\n/**\n * Parse the string and get all LabelFilter positions in the query.\n * @param query\n */\nexport function getLabelFilterPositions(query: string): NodePosition[] {\n  const tree = parser.parse(query);\n  const positions: NodePosition[] = [];\n  tree.iterate({\n    enter: ({ type, node }): false | void => {\n      if (type.id === LabelFilter) {\n        positions.push(NodePosition.fromNode(node));\n        return false;\n      }\n    },\n  });\n  return positions;\n}\n\n/**\n * Parse the string and get all Line filter positions in the query.\n * @param query\n */\nfunction getLineFiltersPositions(query: string): NodePosition[] {\n  const tree = parser.parse(query);\n  const positions: NodePosition[] = [];\n  tree.iterate({\n    enter: ({ type, node }): false | void => {\n      if (type.id === LineFilters) {\n        positions.push(NodePosition.fromNode(node));\n        return false;\n      }\n    },\n  });\n  return positions;\n}\n\n/**\n * Parse the string and get all Log query positions in the query.\n * @param query\n */\nfunction getLogQueryPositions(query: string): NodePosition[] {\n  const tree = parser.parse(query);\n  const positions: NodePosition[] = [];\n  tree.iterate({\n    enter: ({ type, node }): false | void => {\n      if (type.id === LogExpr) {\n        positions.push(NodePosition.fromNode(node));\n        return false;\n      }\n\n      // This is a case in metrics query\n      if (type.id === LogRangeExpr) {\n        // Unfortunately, LogRangeExpr includes both log and non-log (e.g. Duration/Range/...) parts of query.\n        // We get position of all log-parts within LogRangeExpr: Selector, PipelineExpr and UnwrapExpr.\n        const logPartsPositions: NodePosition[] = [];\n        const selector = node.getChild(Selector);\n        if (selector) {\n          logPartsPositions.push(NodePosition.fromNode(selector));\n        }\n\n        const pipeline = node.getChild(PipelineExpr);\n        if (pipeline) {\n          logPartsPositions.push(NodePosition.fromNode(pipeline));\n        }\n\n        const unwrap = node.getChild(UnwrapExpr);\n        if (unwrap) {\n          logPartsPositions.push(NodePosition.fromNode(unwrap));\n        }\n\n        // We sort them and then pick \"from\" from first position and \"to\" from last position.\n        const sorted = sortBy(logPartsPositions, (position) => position.to);\n        positions.push(new NodePosition(sorted[0].from, sorted[sorted.length - 1].to));\n        return false;\n      }\n    },\n  });\n  return positions;\n}\n\nexport function toLabelFilter(key: string, value: string, operator: string): QueryBuilderLabelFilter {\n  // We need to make sure that we convert the value back to string because it may be a number\n  return { label: key, op: operator, value };\n}\n\n/**\n * Add filter as to stream selectors\n * @param query\n * @param vectorSelectorPositions\n * @param filter\n */\nfunction addFilterToStreamSelector(\n  query: string,\n  vectorSelectorPositions: NodePosition[],\n  filter: QueryBuilderLabelFilter\n): string {\n  let newQuery = '';\n  let prev = 0;\n\n  for (let i = 0; i < vectorSelectorPositions.length; i++) {\n    // This is basically just doing splice on a string for each matched vector selector.\n    const match = vectorSelectorPositions[i];\n    const isLast = i === vectorSelectorPositions.length - 1;\n\n    const start = query.substring(prev, match.from);\n    const end = isLast ? query.substring(match.to) : '';\n    const matchVisQuery = buildVisualQueryFromString(query.substring(match.from, match.to));\n\n    if (!labelExists(matchVisQuery.query.labels, filter)) {\n      // We don't want to add duplicate labels.\n      matchVisQuery.query.labels.push(filter);\n    }\n    const newLabels = modeller.renderQuery(matchVisQuery.query);\n    newQuery += start + newLabels + end;\n    prev = match.to;\n  }\n  return newQuery;\n}\n\n/**\n * Add filter as label filter after the parsers\n * @param query\n * @param positionsToAddAfter\n * @param filter\n */\nexport function addFilterAsLabelFilter(\n  query: string,\n  positionsToAddAfter: NodePosition[],\n  filter: QueryBuilderLabelFilter\n): string {\n  let newQuery = '';\n  let prev = 0;\n\n  for (let i = 0; i < positionsToAddAfter.length; i++) {\n    // This is basically just doing splice on a string for each matched vector selector.\n    const match = positionsToAddAfter[i];\n    const isLast = i === positionsToAddAfter.length - 1;\n\n    const start = query.substring(prev, match.to);\n    const end = isLast ? query.substring(match.to) : '';\n\n    let labelFilter = '';\n    // For < and >, if the value is number, we don't add quotes around it and use it as number\n    if (!Number.isNaN(Number(filter.value)) && (filter.op === '<' || filter.op === '>')) {\n      labelFilter = ` | ${filter.label}${filter.op}${Number(filter.value)}`;\n    } else {\n      // we now unescape all escaped values again, because we are using backticks which can handle those cases.\n      // we also don't care about the operator here, because we need to unescape for both, regex and equal.\n      labelFilter = ` | ${filter.label}${filter.op}\\`${unescapeLabelValue(filter.value)}\\``;\n    }\n\n    newQuery += start + labelFilter + end;\n    prev = match.to;\n  }\n  return newQuery;\n}\n\n/**\n * Add parser after line filter or stream selector\n * @param query\n * @param queryPartPositions\n * @param parser\n */\nfunction addParser(query: string, queryPartPositions: NodePosition[], parser: string): string {\n  let newQuery = '';\n  let prev = 0;\n\n  for (let i = 0; i < queryPartPositions.length; i++) {\n    // Splice on a string for each matched vector selector\n    const match = queryPartPositions[i];\n    const isLast = i === queryPartPositions.length - 1;\n\n    const start = query.substring(prev, match.to);\n    const end = isLast ? query.substring(match.to) : '';\n\n    // Add parser\n    newQuery += start + ` | ${parser}` + end;\n    prev = match.to;\n  }\n  return newQuery;\n}\n\n/**\n * Add filter as label filter after the parsers\n * @param query\n * @param logQueryPositions\n * @param labelFormat\n */\nfunction addLabelFormat(\n  query: string,\n  logQueryPositions: NodePosition[],\n  labelFormat: { originalLabel: string; renameTo: string }\n): string {\n  let newQuery = '';\n  let prev = 0;\n\n  for (let i = 0; i < logQueryPositions.length; i++) {\n    // This is basically just doing splice on a string for each matched vector selector.\n    const match = logQueryPositions[i];\n    const isLast = i === logQueryPositions.length - 1;\n\n    const start = query.substring(prev, match.to);\n    const end = isLast ? query.substring(match.to) : '';\n\n    const labelFilter = ` | label_format ${labelFormat.renameTo}=${labelFormat.originalLabel}`;\n    newQuery += start + labelFilter + end;\n    prev = match.to;\n  }\n  return newQuery;\n}\n\nexport function addLineFilter(query: string): string {\n  const streamSelectorPositions = getStreamSelectorPositions(query);\n  if (!streamSelectorPositions.length) {\n    return query;\n  }\n  const streamSelectorEnd = streamSelectorPositions[0].to;\n\n  const newQueryExpr = query.slice(0, streamSelectorEnd) + ' |= ``' + query.slice(streamSelectorEnd);\n  return newQueryExpr;\n}\n\nfunction getLineCommentPositions(query: string): NodePosition[] {\n  const tree = parser.parse(query);\n  const positions: NodePosition[] = [];\n  tree.iterate({\n    enter: ({ type, from, to }): false | void => {\n      if (type.id === LineComment) {\n        positions.push(new NodePosition(from, to, type));\n        return false;\n      }\n    },\n  });\n  return positions;\n}\n\n/**\n * Check if label exists in the list of labels but ignore the operator.\n * @param labels\n * @param filter\n */\nfunction labelExists(labels: QueryBuilderLabelFilter[], filter: QueryBuilderLabelFilter) {\n  return labels.find((label) => label.label === filter.label && label.value === filter.value);\n}\n\n/**\n * Return the last position based on \"to\" property\n * @param positions\n */\nexport function findLastPosition(positions: NodePosition[]): NodePosition {\n  return positions.reduce((prev, current) => (prev.to > current.to ? prev : current));\n}\n\nfunction getAllPositionsInNodeByType(node: SyntaxNode, type: number): NodePosition[] {\n  if (node.type.id === type) {\n    return [NodePosition.fromNode(node)];\n  }\n\n  const positions: NodePosition[] = [];\n  let pos = 0;\n  let child = node.childAfter(pos);\n  while (child) {\n    positions.push(...getAllPositionsInNodeByType(child, type));\n    pos = child.to;\n    child = node.childAfter(pos);\n  }\n  return positions;\n}\n\n/**\n * Gets all leaves of the nodes given. Leaves are nodes that don't contain any other nodes.\n *\n * @param {NodePosition[]} nodes\n * @return\n */\nfunction findLeaves(nodes: NodePosition[]): NodePosition[] {\n  return nodes.filter((node) => nodes.every((n) => node.contains(n) === false || node === n));\n}\n","import { SyntaxNode } from '@lezer/common';\nimport { escapeRegExp } from 'lodash';\n\nimport {\n  parser,\n  LineFilter,\n  PipeExact,\n  PipeMatch,\n  Filter,\n  String,\n  LabelFormatExpr,\n  Selector,\n  PipelineExpr,\n  LabelParser,\n  JsonExpressionParser,\n  LabelFilter,\n  MetricExpr,\n  Matcher,\n  Identifier,\n  Range,\n  formatLokiQuery,\n  Logfmt,\n  Json,\n} from '@grafana/lezer-logql';\nimport { reportInteraction } from '@grafana/runtime';\nimport { DataQuery } from '@grafana/schema';\n\nimport { ErrorId, replaceVariables, returnVariables } from '../prometheus/querybuilder/shared/parsingUtils';\n\nimport { placeHolderScopedVars } from './components/monaco-query-field/monaco-completion-provider/validation';\nimport { LokiDatasource } from './datasource';\nimport { getStreamSelectorPositions, NodePosition } from './modifyQuery';\nimport { LokiQuery, LokiQueryType } from './types';\n\nexport function formatQuery(selector: string | undefined): string {\n  return `${selector || ''}`.trim();\n}\n\n/**\n * Returns search terms from a LogQL query.\n * E.g., `{} |= foo |=bar != baz` returns `['foo', 'bar']`.\n */\nexport function getHighlighterExpressionsFromQuery(input: string): string[] {\n  const results = [];\n\n  const filters = getNodesFromQuery(input, [LineFilter]);\n\n  for (let filter of filters) {\n    const pipeExact = filter.getChild(Filter)?.getChild(PipeExact);\n    const pipeMatch = filter.getChild(Filter)?.getChild(PipeMatch);\n    const string = filter.getChild(String);\n\n    if ((!pipeExact && !pipeMatch) || !string) {\n      continue;\n    }\n\n    const filterTerm = input.substring(string.from, string.to).trim();\n    const backtickedTerm = filterTerm[0] === '`';\n    const unwrappedFilterTerm = filterTerm.substring(1, filterTerm.length - 1);\n\n    if (!unwrappedFilterTerm) {\n      continue;\n    }\n\n    let resultTerm = '';\n\n    // Only filter expressions with |~ operator are treated as regular expressions\n    if (pipeMatch) {\n      // When using backticks, Loki doesn't require to escape special characters and we can just push regular expression to highlights array\n      // When using quotes, we have extra backslash escaping and we need to replace \\\\ with \\\n      resultTerm = backtickedTerm ? unwrappedFilterTerm : unwrappedFilterTerm.replace(/\\\\\\\\/g, '\\\\');\n    } else {\n      // We need to escape this string so it is not matched as regular expression\n      resultTerm = escapeRegExp(unwrappedFilterTerm);\n    }\n\n    if (resultTerm) {\n      results.push(resultTerm);\n    }\n  }\n  return results;\n}\n\nexport function getNormalizedLokiQuery(query: LokiQuery): LokiQuery {\n  const queryType = getLokiQueryType(query);\n  // instant and range are deprecated, we want to remove them\n  const { instant, range, ...rest } = query;\n  return { ...rest, queryType };\n}\n\nexport function getLokiQueryType(query: LokiQuery): LokiQueryType {\n  // we are migrating from `.instant` and `.range` to `.queryType`\n  // this function returns the correct query type\n  const { queryType } = query;\n  const hasValidQueryType =\n    queryType === LokiQueryType.Range || queryType === LokiQueryType.Instant || queryType === LokiQueryType.Stream;\n\n  // if queryType exists, it is respected\n  if (hasValidQueryType) {\n    return queryType;\n  }\n\n  // if no queryType, and instant===true, it's instant\n  if (query.instant === true) {\n    return LokiQueryType.Instant;\n  }\n\n  // otherwise it is range\n  return LokiQueryType.Range;\n}\n\nconst tagsToObscure = ['String', 'Identifier', 'LineComment', 'Number'];\nconst partsToKeep = ['__error__', '__interval', '__interval_ms', '__auto'];\nexport function obfuscate(query: string): string {\n  let obfuscatedQuery: string = query;\n  const tree = parser.parse(query);\n  tree.iterate({\n    enter: ({ name, from, to }): false | void => {\n      const queryPart = query.substring(from, to);\n      if (tagsToObscure.includes(name) && !partsToKeep.includes(queryPart)) {\n        obfuscatedQuery = obfuscatedQuery.replace(queryPart, name);\n      }\n    },\n  });\n  return obfuscatedQuery;\n}\n\nexport function parseToNodeNamesArray(query: string): string[] {\n  const queryParts: string[] = [];\n  const tree = parser.parse(query);\n  tree.iterate({\n    enter: ({ name }): false | void => {\n      queryParts.push(name);\n    },\n  });\n  return queryParts;\n}\n\nexport function isQueryWithNode(query: string, nodeType: number): boolean {\n  let isQueryWithNode = false;\n  const tree = parser.parse(query);\n  tree.iterate({\n    enter: ({ type }): false | void => {\n      if (type.id === nodeType) {\n        isQueryWithNode = true;\n        return false;\n      }\n    },\n  });\n  return isQueryWithNode;\n}\n\nexport function getNodesFromQuery(query: string, nodeTypes?: number[]): SyntaxNode[] {\n  const nodes: SyntaxNode[] = [];\n  const tree = parser.parse(query);\n  tree.iterate({\n    enter: (node): false | void => {\n      if (nodeTypes === undefined || nodeTypes.includes(node.type.id)) {\n        nodes.push(node.node);\n      }\n    },\n  });\n  return nodes;\n}\n\nexport function getNodePositionsFromQuery(query: string, nodeTypes?: number[]): NodePosition[] {\n  const positions: NodePosition[] = [];\n  const tree = parser.parse(query);\n  tree.iterate({\n    enter: (node): false | void => {\n      if (nodeTypes === undefined || nodeTypes.includes(node.type.id)) {\n        positions.push(NodePosition.fromNode(node.node));\n      }\n    },\n  });\n  return positions;\n}\n\nexport function getNodeFromQuery(query: string, nodeType: number): SyntaxNode | undefined {\n  const nodes = getNodesFromQuery(query, [nodeType]);\n  return nodes.length > 0 ? nodes[0] : undefined;\n}\n\n/**\n * Parses the query and looks for error nodes. If there is at least one, it returns false.\n * Grafana variables are considered errors, so if you need to validate a query\n * with variables you should interpolate it first.\n */\nexport function isQueryWithError(query: string): boolean {\n  return isQueryWithNode(query, ErrorId);\n}\n\nexport function isLogsQuery(query: string): boolean {\n  return !isQueryWithNode(query, MetricExpr);\n}\n\nexport function isQueryWithParser(query: string): { queryWithParser: boolean; parserCount: number } {\n  const nodes = getNodesFromQuery(query, [LabelParser, JsonExpressionParser, Logfmt]);\n  const parserCount = nodes.length;\n  return { queryWithParser: parserCount > 0, parserCount };\n}\n\nexport function getParserFromQuery(query: string): string | undefined {\n  const parsers = getNodesFromQuery(query, [LabelParser, Json, Logfmt]);\n  return parsers.length > 0 ? query.substring(parsers[0].from, parsers[0].to).trim() : undefined;\n}\n\nexport function isQueryPipelineErrorFiltering(query: string): boolean {\n  const labels = getNodesFromQuery(query, [LabelFilter]);\n  for (const node of labels) {\n    const label = node.getChild(Matcher)?.getChild(Identifier);\n    if (label) {\n      const labelName = query.substring(label.from, label.to);\n      if (labelName === '__error__') {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nexport function isQueryWithLabelFormat(query: string): boolean {\n  return isQueryWithNode(query, LabelFormatExpr);\n}\n\nexport function getLogQueryFromMetricsQuery(query: string): string {\n  if (isLogsQuery(query)) {\n    return query;\n  }\n\n  // Log query in metrics query composes of Selector & PipelineExpr\n  const selectorNode = getNodeFromQuery(query, Selector);\n  if (!selectorNode) {\n    return '';\n  }\n  const selector = query.substring(selectorNode.from, selectorNode.to);\n\n  const pipelineExprNode = getNodeFromQuery(query, PipelineExpr);\n  const pipelineExpr = pipelineExprNode ? query.substring(pipelineExprNode.from, pipelineExprNode.to) : '';\n\n  return `${selector} ${pipelineExpr}`.trim();\n}\n\nexport function getLogQueryFromMetricsQueryAtPosition(query: string, position: number): string {\n  if (isLogsQuery(query)) {\n    return query;\n  }\n\n  const metricQuery = getNodesFromQuery(query, [MetricExpr])\n    .reverse() // So we don't get the root metric node\n    .find((node) => node.from <= position && node.to >= position);\n  if (!metricQuery) {\n    return '';\n  }\n  return getLogQueryFromMetricsQuery(query.substring(metricQuery.from, metricQuery.to));\n}\n\nexport function isQueryWithLabelFilter(query: string): boolean {\n  return isQueryWithNode(query, LabelFilter);\n}\n\nexport function isQueryWithLineFilter(query: string): boolean {\n  return isQueryWithNode(query, LineFilter);\n}\n\nexport function isQueryWithRangeVariable(query: string): boolean {\n  const rangeNodes = getNodesFromQuery(query, [Range]);\n  for (const node of rangeNodes) {\n    if (query.substring(node.from, node.to).match(/\\[\\$__range(_s|_ms)?/)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function getStreamSelectorsFromQuery(query: string): string[] {\n  const labelMatcherPositions = getStreamSelectorPositions(query);\n\n  const labelMatchers = labelMatcherPositions.map((labelMatcher) => {\n    return query.slice(labelMatcher.from, labelMatcher.to);\n  });\n\n  return labelMatchers;\n}\n\nexport function requestSupportsSplitting(allQueries: LokiQuery[]) {\n  const queries = allQueries\n    .filter((query) => !query.hide)\n    .filter((query) => !query.refId.includes('do-not-chunk'))\n    .filter((query) => query.expr);\n\n  return queries.length > 0;\n}\n\nexport const isLokiQuery = (query: DataQuery): query is LokiQuery => {\n  if (!query) {\n    return false;\n  }\n\n  const lokiQuery = query as LokiQuery;\n  return lokiQuery.expr !== undefined;\n};\n\nexport const getLokiQueryFromDataQuery = (query?: DataQuery): LokiQuery | undefined => {\n  if (!query || !isLokiQuery(query)) {\n    return undefined;\n  }\n\n  return query;\n};\n\nexport function formatLogqlQuery(query: string, datasource: LokiDatasource) {\n  const isInvalid = isQueryWithError(datasource.interpolateString(query, placeHolderScopedVars));\n\n  reportInteraction('grafana_loki_format_query_clicked', {\n    is_invalid: isInvalid,\n    query_type: isLogsQuery(query) ? 'logs' : 'metric',\n  });\n\n  if (isInvalid) {\n    return query;\n  }\n\n  let transformedQuery = replaceVariables(query);\n  const transformationMatches = [];\n  const tree = parser.parse(transformedQuery);\n\n  // Variables are considered errors inside of the parser, so we need to remove them before formatting\n  // We replace all variables with [0s] and keep track of the replaced variables\n  // After formatting we replace [0s] with the original variable\n  if (tree.topNode.firstChild?.firstChild?.type.id === MetricExpr) {\n    const pattern = /\\[__V_[0-2]__\\w+__V__\\]/g;\n    transformationMatches.push(...transformedQuery.matchAll(pattern));\n    transformedQuery = transformedQuery.replace(pattern, '[0s]');\n  }\n\n  let formatted = formatLokiQuery(transformedQuery);\n\n  if (tree.topNode.firstChild?.firstChild?.type.id === MetricExpr) {\n    transformationMatches.forEach((match) => {\n      formatted = formatted.replace('[0s]', match[0]);\n    });\n  }\n\n  return returnVariables(formatted);\n}\n","import { LokiAndPromQueryModellerBase } from '../../prometheus/querybuilder/shared/LokiAndPromQueryModellerBase';\nimport { QueryBuilderLabelFilter } from '../../prometheus/querybuilder/shared/types';\n\nimport { getOperationDefinitions } from './operations';\nimport { LokiOperationId, LokiQueryPattern, LokiQueryPatternType, LokiVisualQueryOperationCategory } from './types';\n\nexport class LokiQueryModeller extends LokiAndPromQueryModellerBase {\n  constructor() {\n    super(getOperationDefinitions);\n\n    this.setOperationCategories([\n      LokiVisualQueryOperationCategory.Aggregations,\n      LokiVisualQueryOperationCategory.RangeFunctions,\n      LokiVisualQueryOperationCategory.Formats,\n      LokiVisualQueryOperationCategory.BinaryOps,\n      LokiVisualQueryOperationCategory.LabelFilters,\n      LokiVisualQueryOperationCategory.LineFilters,\n    ]);\n  }\n\n  renderLabels(labels: QueryBuilderLabelFilter[]) {\n    if (labels.length === 0) {\n      return '{}';\n    }\n\n    return super.renderLabels(labels);\n  }\n\n  getQueryPatterns(): LokiQueryPattern[] {\n    return [\n      {\n        name: 'Parse log lines with logfmt parser',\n        type: LokiQueryPatternType.Log,\n        // {} | logfmt | __error__=``\n        operations: [\n          { id: LokiOperationId.Logfmt, params: [] },\n          { id: LokiOperationId.LabelFilterNoErrors, params: [] },\n        ],\n      },\n      {\n        name: 'Parse log lines with JSON parser',\n        type: LokiQueryPatternType.Log,\n        // {} | json | __error__=``\n        operations: [\n          { id: LokiOperationId.Json, params: [] },\n          { id: LokiOperationId.LabelFilterNoErrors, params: [] },\n        ],\n      },\n      {\n        name: 'Filter log line and parse with logfmt parser',\n        type: LokiQueryPatternType.Log,\n        // {} |= `` | logfmt | __error__=``\n        operations: [\n          { id: LokiOperationId.LineContains, params: [''] },\n          { id: LokiOperationId.Logfmt, params: [] },\n          { id: LokiOperationId.LabelFilterNoErrors, params: [] },\n        ],\n      },\n      {\n        name: 'Filter log lines and parse with json parser',\n        type: LokiQueryPatternType.Log,\n        // {} |= `` | json | __error__=``\n        operations: [\n          { id: LokiOperationId.LineContains, params: [''] },\n          { id: LokiOperationId.Json, params: [] },\n          { id: LokiOperationId.LabelFilterNoErrors, params: [] },\n        ],\n      },\n      {\n        name: 'Parse log line with logfmt parser and use label filter',\n        type: LokiQueryPatternType.Log,\n        // {} |= `` | logfmt | __error__=`` | label=`value`\n        operations: [\n          { id: LokiOperationId.LineContains, params: [''] },\n          { id: LokiOperationId.Logfmt, params: [] },\n          { id: LokiOperationId.LabelFilterNoErrors, params: [] },\n          { id: LokiOperationId.LabelFilter, params: ['label', '=', 'value'] },\n        ],\n      },\n      {\n        name: 'Parse log lines with nested json',\n        type: LokiQueryPatternType.Log,\n        // {} |= `` | json | line_format `{{ .message}}` | json\n        operations: [\n          { id: LokiOperationId.LineContains, params: [''] },\n          { id: LokiOperationId.Json, params: [] },\n          { id: LokiOperationId.LabelFilterNoErrors, params: [] },\n          { id: LokiOperationId.LineFormat, params: ['{{.message}}'] },\n          { id: LokiOperationId.Json, params: [] },\n          { id: LokiOperationId.LabelFilterNoErrors, params: [] },\n        ],\n      },\n      {\n        name: 'Reformat log lines',\n        type: LokiQueryPatternType.Log,\n        // {} |= `` | logfmt | line_format `{{.message}}`\n        operations: [\n          { id: LokiOperationId.LineContains, params: [''] },\n          { id: LokiOperationId.Logfmt, params: [] },\n          { id: LokiOperationId.LabelFilterNoErrors, params: [] },\n          { id: LokiOperationId.LineFormat, params: ['{{.message}}'] },\n        ],\n      },\n      {\n        name: 'Rename lvl label to level',\n        type: LokiQueryPatternType.Log,\n        // {} |= `` | logfmt | label_format level=lvl\n        operations: [\n          { id: LokiOperationId.LineContains, params: [''] },\n          { id: LokiOperationId.Logfmt, params: [] },\n          { id: LokiOperationId.LabelFilterNoErrors, params: [] },\n          { id: LokiOperationId.LabelFormat, params: ['lvl', 'level'] },\n        ],\n      },\n      {\n        name: 'Query on value inside a log line',\n        type: LokiQueryPatternType.Metric,\n        // sum(sum_over_time({ | logfmt | __error__=`` | unwrap | __error__=`` [$__auto]))\n        operations: [\n          { id: LokiOperationId.LineContains, params: [''] },\n          { id: LokiOperationId.Logfmt, params: [] },\n          { id: LokiOperationId.LabelFilterNoErrors, params: [] },\n          { id: LokiOperationId.Unwrap, params: [''] },\n          { id: LokiOperationId.LabelFilterNoErrors, params: [] },\n          { id: LokiOperationId.SumOverTime, params: ['$__auto'] },\n          { id: LokiOperationId.Sum, params: [] },\n        ],\n      },\n      {\n        name: 'Total requests per label of streams',\n        type: LokiQueryPatternType.Metric,\n        // sum by() (count_over_time({}[$__auto)\n        operations: [\n          { id: LokiOperationId.LineContains, params: [''] },\n          { id: LokiOperationId.CountOverTime, params: ['$__auto'] },\n          { id: LokiOperationId.Sum, params: [] },\n        ],\n      },\n      {\n        name: 'Total requests per parsed label or label of streams',\n        type: LokiQueryPatternType.Metric,\n        // sum by() (count_over_time({}| logfmt | __error__=`` [$__auto))\n        operations: [\n          { id: LokiOperationId.LineContains, params: [''] },\n          { id: LokiOperationId.Logfmt, params: [] },\n          { id: LokiOperationId.LabelFilterNoErrors, params: [] },\n          { id: LokiOperationId.CountOverTime, params: ['$__auto'] },\n          { id: LokiOperationId.Sum, params: [] },\n        ],\n      },\n      {\n        name: 'Bytes used by a log stream',\n        type: LokiQueryPatternType.Metric,\n        // bytes_over_time({}[$__auto])\n        operations: [\n          { id: LokiOperationId.LineContains, params: [''] },\n          { id: LokiOperationId.BytesOverTime, params: ['$__auto'] },\n        ],\n      },\n      {\n        name: 'Count of log lines per stream',\n        type: LokiQueryPatternType.Metric,\n        // count_over_time({}[$__auto])\n        operations: [\n          { id: LokiOperationId.LineContains, params: [''] },\n          { id: LokiOperationId.CountOverTime, params: ['$__auto'] },\n        ],\n      },\n      {\n        name: 'Top N results by label or parsed label',\n        type: LokiQueryPatternType.Metric,\n        // topk(10, sum by () (count_over_time({} | logfmt | __error__=`` [$__auto])))\n        operations: [\n          { id: LokiOperationId.Logfmt, params: [] },\n          { id: LokiOperationId.LabelFilterNoErrors, params: [] },\n          { id: LokiOperationId.CountOverTime, params: ['$__auto'] },\n          { id: LokiOperationId.Sum, params: [] },\n          { id: LokiOperationId.TopK, params: [10] },\n        ],\n      },\n      {\n        name: 'Extracted quantile',\n        type: LokiQueryPatternType.Metric,\n        // quantile_over_time(0.5,{} | logfmt | unwrap latency[$__auto]) by ()\n        operations: [\n          { id: LokiOperationId.Logfmt, params: [] },\n          { id: LokiOperationId.LabelFilterNoErrors, params: [] },\n          { id: LokiOperationId.Unwrap, params: ['latency'] },\n          { id: LokiOperationId.LabelFilterNoErrors, params: [] },\n          { id: LokiOperationId.QuantileOverTime, params: ['$__auto', 0.5] },\n          { id: LokiOperationId.Sum, params: [] },\n        ],\n      },\n    ];\n  }\n}\n\nexport const lokiQueryModeller = new LokiQueryModeller();\n","import { defaultAddOperationHandler } from '../../prometheus/querybuilder/shared/operationUtils';\nimport {\n  QueryBuilderOperation,\n  QueryBuilderOperationDef,\n  QueryBuilderOperationParamDef,\n} from '../../prometheus/querybuilder/shared/types';\n\nimport { LokiOperationId, LokiVisualQueryOperationCategory } from './types';\n\nexport const binaryScalarDefs = [\n  {\n    id: LokiOperationId.Addition,\n    name: 'Add scalar',\n    sign: '+',\n  },\n  {\n    id: LokiOperationId.Subtraction,\n    name: 'Subtract scalar',\n    sign: '-',\n  },\n  {\n    id: LokiOperationId.MultiplyBy,\n    name: 'Multiply by scalar',\n    sign: '*',\n  },\n  {\n    id: LokiOperationId.DivideBy,\n    name: 'Divide by scalar',\n    sign: '/',\n  },\n  {\n    id: LokiOperationId.Modulo,\n    name: 'Modulo by scalar',\n    sign: '%',\n  },\n  {\n    id: LokiOperationId.Exponent,\n    name: 'Exponent',\n    sign: '^',\n  },\n  {\n    id: LokiOperationId.EqualTo,\n    name: 'Equal to',\n    sign: '==',\n    comparison: true,\n  },\n  {\n    id: LokiOperationId.NotEqualTo,\n    name: 'Not equal to',\n    sign: '!=',\n    comparison: true,\n  },\n  {\n    id: LokiOperationId.GreaterThan,\n    name: 'Greater than',\n    sign: '>',\n    comparison: true,\n  },\n  {\n    id: LokiOperationId.LessThan,\n    name: 'Less than',\n    sign: '<',\n    comparison: true,\n  },\n  {\n    id: LokiOperationId.GreaterOrEqual,\n    name: 'Greater or equal to',\n    sign: '>=',\n    comparison: true,\n  },\n  {\n    id: LokiOperationId.LessOrEqual,\n    name: 'Less or equal to',\n    sign: '<=',\n    comparison: true,\n  },\n];\n\n// Not sure about this one. It could also be a more generic 'Simple math operation' where user specifies\n// both the operator and the operand in a single input\nexport const binaryScalarOperations: QueryBuilderOperationDef[] = binaryScalarDefs.map((opDef) => {\n  const params: QueryBuilderOperationParamDef[] = [{ name: 'Value', type: 'number' }];\n  const defaultParams: any[] = [2];\n  if (opDef.comparison) {\n    params.push({\n      name: 'Bool',\n      type: 'boolean',\n      description: 'If checked comparison will return 0 or 1 for the value rather than filtering.',\n    });\n    defaultParams.push(false);\n  }\n\n  return {\n    id: opDef.id,\n    name: opDef.name,\n    params,\n    defaultParams,\n    alternativesKey: 'binary scalar operations',\n    category: LokiVisualQueryOperationCategory.BinaryOps,\n    renderer: getSimpleBinaryRenderer(opDef.sign),\n    addOperationHandler: defaultAddOperationHandler,\n  };\n});\n\nfunction getSimpleBinaryRenderer(operator: string) {\n  return function binaryRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n    let param = model.params[0];\n    let bool = '';\n    if (model.params.length === 2) {\n      bool = model.params[1] ? ' bool' : '';\n    }\n\n    return `${innerExpr} ${operator}${bool} ${param}`;\n  };\n}\n","import { LabelParamEditor } from '../../prometheus/querybuilder/components/LabelParamEditor';\nimport {\n  getAggregationExplainer,\n  getLastLabelRemovedHandler,\n  getOnLabelAddedHandler,\n  getPromAndLokiOperationDisplayName,\n} from '../../prometheus/querybuilder/shared/operationUtils';\nimport {\n  QueryBuilderOperation,\n  QueryBuilderOperationDef,\n  QueryBuilderOperationParamDef,\n  VisualQueryModeller,\n} from '../../prometheus/querybuilder/shared/types';\nimport { FUNCTIONS } from '../syntax';\n\nimport { LokiOperationId, LokiOperationOrder, LokiVisualQuery, LokiVisualQueryOperationCategory } from './types';\n\nexport function createRangeOperation(name: string, isRangeOperationWithGrouping?: boolean): QueryBuilderOperationDef {\n  const params = [getRangeVectorParamDef()];\n  const defaultParams = ['$__auto'];\n  let paramChangedHandler = undefined;\n\n  if (name === LokiOperationId.QuantileOverTime) {\n    defaultParams.push('0.95');\n    params.push({\n      name: 'Quantile',\n      type: 'number',\n    });\n  }\n\n  if (isRangeOperationWithGrouping) {\n    params.push({\n      name: 'By label',\n      type: 'string',\n      restParam: true,\n      optional: true,\n    });\n\n    paramChangedHandler = getOnLabelAddedHandler(`__${name}_by`);\n  }\n\n  return {\n    id: name,\n    name: getPromAndLokiOperationDisplayName(name),\n    params: params,\n    defaultParams,\n    alternativesKey: 'range function',\n    category: LokiVisualQueryOperationCategory.RangeFunctions,\n    orderRank: LokiOperationOrder.RangeVectorFunction,\n    renderer: operationWithRangeVectorRenderer,\n    addOperationHandler: addLokiOperation,\n    paramChangedHandler,\n    explainHandler: (op, def) => {\n      let opDocs = FUNCTIONS.find((x) => x.insertText === op.id)?.documentation ?? '';\n\n      if (op.params[0] === '$__auto') {\n        return `${opDocs} \\`$__auto\\` is a variable that will be replaced with the [value of step](https://grafana.com/docs/grafana/next/datasources/loki/query-editor/#options) for range queries and with the value of the selected time range (calculated to - from) for instant queries.`;\n      } else {\n        return `${opDocs} The [range vector](https://grafana.com/docs/loki/latest/logql/metric_queries/#range-vector-aggregation) is set to \\`${op.params[0]}\\`.`;\n      }\n    },\n  };\n}\n\nexport function createRangeOperationWithGrouping(name: string): QueryBuilderOperationDef[] {\n  const rangeOperation = createRangeOperation(name, true);\n  // Copy range operation params without the last param\n  const params = rangeOperation.params.slice(0, -1);\n  const operations: QueryBuilderOperationDef[] = [\n    rangeOperation,\n    {\n      id: `__${name}_by`,\n      name: `${getPromAndLokiOperationDisplayName(name)} by`,\n      params: [\n        ...params,\n        {\n          name: 'Label',\n          type: 'string',\n          restParam: true,\n          optional: true,\n          editor: LabelParamEditor,\n        },\n      ],\n      defaultParams: [...rangeOperation.defaultParams, ''],\n      alternativesKey: 'range function with grouping',\n      category: LokiVisualQueryOperationCategory.RangeFunctions,\n      renderer: getRangeAggregationWithGroupingRenderer(name, 'by'),\n      paramChangedHandler: getLastLabelRemovedHandler(name),\n      explainHandler: getAggregationExplainer(name, 'by'),\n      addOperationHandler: addLokiOperation,\n      hideFromList: true,\n    },\n    {\n      id: `__${name}_without`,\n      name: `${getPromAndLokiOperationDisplayName(name)} without`,\n      params: [\n        ...params,\n        {\n          name: 'Label',\n          type: 'string',\n          restParam: true,\n          optional: true,\n          editor: LabelParamEditor,\n        },\n      ],\n      defaultParams: [...rangeOperation.defaultParams, ''],\n      alternativesKey: 'range function with grouping',\n      category: LokiVisualQueryOperationCategory.RangeFunctions,\n      renderer: getRangeAggregationWithGroupingRenderer(name, 'without'),\n      paramChangedHandler: getLastLabelRemovedHandler(name),\n      explainHandler: getAggregationExplainer(name, 'without'),\n      addOperationHandler: addLokiOperation,\n      hideFromList: true,\n    },\n  ];\n\n  return operations;\n}\n\nexport function getRangeAggregationWithGroupingRenderer(aggregation: string, grouping: 'by' | 'without') {\n  return function aggregationRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n    const restParamIndex = def.params.findIndex((param) => param.restParam);\n    const params = model.params.slice(0, restParamIndex);\n    const restParams = model.params.slice(restParamIndex);\n\n    if (params.length === 2 && aggregation === LokiOperationId.QuantileOverTime) {\n      return `${aggregation}(${params[1]}, ${innerExpr} [${params[0]}]) ${grouping} (${restParams.join(', ')})`;\n    }\n\n    return `${aggregation}(${innerExpr} [${params[0]}]) ${grouping} (${restParams.join(', ')})`;\n  };\n}\n\nfunction operationWithRangeVectorRenderer(\n  model: QueryBuilderOperation,\n  def: QueryBuilderOperationDef,\n  innerExpr: string\n) {\n  const params = model.params ?? [];\n  const rangeVector = params[0] ?? '$__auto';\n  // QuantileOverTime is only range vector with more than one param\n  if (params.length === 2 && model.id === LokiOperationId.QuantileOverTime) {\n    const quantile = params[1];\n    return `${model.id}(${quantile}, ${innerExpr} [${rangeVector}])`;\n  }\n\n  return `${model.id}(${innerExpr} [${params[0] ?? '$__auto'}])`;\n}\n\nexport function labelFilterRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n  const integerOperators = ['<', '<=', '>', '>='];\n\n  if (integerOperators.includes(String(model.params[1]))) {\n    return `${innerExpr} | ${model.params[0]} ${model.params[1]} ${model.params[2]}`;\n  }\n\n  return `${innerExpr} | ${model.params[0]} ${model.params[1]} \\`${model.params[2]}\\``;\n}\n\nexport function isConflictingFilter(\n  operation: QueryBuilderOperation,\n  queryOperations: QueryBuilderOperation[]\n): boolean {\n  const operationIsNegative = operation.params[1].toString().startsWith('!');\n\n  const candidates = queryOperations.filter(\n    (queryOperation) =>\n      queryOperation.id === LokiOperationId.LabelFilter &&\n      queryOperation.params[0] === operation.params[0] &&\n      queryOperation.params[2] === operation.params[2]\n  );\n\n  const conflict = candidates.some((candidate) => {\n    if (operationIsNegative && candidate.params[1].toString().startsWith('!') === false) {\n      return true;\n    }\n    if (operationIsNegative === false && candidate.params[1].toString().startsWith('!')) {\n      return true;\n    }\n    return false;\n  });\n\n  return conflict;\n}\n\nexport function pipelineRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n  switch (model.id) {\n    case LokiOperationId.Logfmt:\n      const [strict = false, keepEmpty = false, ...labels] = model.params;\n      return `${innerExpr} | logfmt${strict ? ' --strict' : ''}${keepEmpty ? ' --keep-empty' : ''} ${labels.join(\n        ', '\n      )}`.trim();\n    default:\n      return `${innerExpr} | ${model.id}`;\n  }\n}\n\nfunction isRangeVectorFunction(def: QueryBuilderOperationDef) {\n  return def.category === LokiVisualQueryOperationCategory.RangeFunctions;\n}\n\nfunction getIndexOfOrLast(\n  operations: QueryBuilderOperation[],\n  queryModeller: VisualQueryModeller,\n  condition: (def: QueryBuilderOperationDef) => boolean\n) {\n  const index = operations.findIndex((x) => {\n    const opDef = queryModeller.getOperationDef(x.id);\n    if (!opDef) {\n      return false;\n    }\n    return condition(opDef);\n  });\n\n  return index === -1 ? operations.length : index;\n}\n\nexport function addLokiOperation(\n  def: QueryBuilderOperationDef,\n  query: LokiVisualQuery,\n  modeller: VisualQueryModeller\n): LokiVisualQuery {\n  const newOperation: QueryBuilderOperation = {\n    id: def.id,\n    params: def.defaultParams,\n  };\n\n  const operations = [...query.operations];\n\n  const existingRangeVectorFunction = operations.find((x) => {\n    const opDef = modeller.getOperationDef(x.id);\n    if (!opDef) {\n      return false;\n    }\n    return isRangeVectorFunction(opDef);\n  });\n\n  switch (def.category) {\n    case LokiVisualQueryOperationCategory.Aggregations:\n    case LokiVisualQueryOperationCategory.Functions:\n      // If we are adding a function but we have not range vector function yet add one\n      if (!existingRangeVectorFunction) {\n        const placeToInsert = getIndexOfOrLast(\n          operations,\n          modeller,\n          (def) => def.category === LokiVisualQueryOperationCategory.Functions\n        );\n        operations.splice(placeToInsert, 0, { id: LokiOperationId.Rate, params: ['$__auto'] });\n      }\n      operations.push(newOperation);\n      break;\n    case LokiVisualQueryOperationCategory.RangeFunctions:\n      // If adding a range function and range function is already added replace it\n      if (existingRangeVectorFunction) {\n        const index = operations.indexOf(existingRangeVectorFunction);\n        operations[index] = newOperation;\n        break;\n      }\n\n    // Add range functions after any formats, line filters and label filters\n    default:\n      const placeToInsert = getIndexOfOrLast(\n        operations,\n        modeller,\n        (x) => (def.orderRank ?? 100) < (x.orderRank ?? 100)\n      );\n      operations.splice(placeToInsert, 0, newOperation);\n      break;\n  }\n\n  return {\n    ...query,\n    operations,\n  };\n}\n\nexport function addNestedQueryHandler(def: QueryBuilderOperationDef, query: LokiVisualQuery): LokiVisualQuery {\n  return {\n    ...query,\n    binaryQueries: [\n      ...(query.binaryQueries ?? []),\n      {\n        operator: '/',\n        query,\n      },\n    ],\n  };\n}\n\nexport function getLineFilterRenderer(operation: string, caseInsensitive?: boolean) {\n  return function lineFilterRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n    if (caseInsensitive) {\n      return `${innerExpr} ${operation} \\`(?i)${model.params[0]}\\``;\n    }\n    return `${innerExpr} ${operation} \\`${model.params[0]}\\``;\n  };\n}\n\nfunction getRangeVectorParamDef(): QueryBuilderOperationParamDef {\n  return {\n    name: 'Range',\n    type: 'string',\n    options: ['$__auto', '1m', '5m', '10m', '1h', '24h'],\n  };\n}\n","import React, { useState } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { getOperationParamId } from '../../../prometheus/querybuilder/shared/operationUtils';\nimport { QueryBuilderOperationParamEditorProps } from '../../../prometheus/querybuilder/shared/types';\nimport { placeHolderScopedVars } from '../../components/monaco-query-field/monaco-completion-provider/validation';\nimport { LokiDatasource } from '../../datasource';\nimport { getLogQueryFromMetricsQuery, isQueryWithError } from '../../queryUtils';\nimport { extractUnwrapLabelKeysFromDataFrame } from '../../responseUtils';\nimport { lokiQueryModeller } from '../LokiQueryModeller';\nimport { LokiVisualQuery } from '../types';\n\nexport function UnwrapParamEditor({\n  onChange,\n  index,\n  operationId,\n  value,\n  query,\n  datasource,\n}: QueryBuilderOperationParamEditorProps) {\n  const [state, setState] = useState<{\n    options?: Array<SelectableValue<string>>;\n    isLoading?: boolean;\n  }>({});\n\n  return (\n    <Select\n      inputId={getOperationParamId(operationId, index)}\n      onOpenMenu={async () => {\n        // This check is always true, we do it to make typescript happy\n        if (datasource instanceof LokiDatasource) {\n          setState({ isLoading: true });\n          const options = await loadUnwrapOptions(query, datasource);\n          setState({ options, isLoading: undefined });\n        }\n      }}\n      isLoading={state.isLoading}\n      allowCustomValue\n      noOptionsMessage=\"No labels found\"\n      loadingMessage=\"Loading labels\"\n      options={state.options}\n      value={value ? toOption(value.toString()) : null}\n      onChange={(value) => {\n        if (value.value) {\n          onChange(index, value.value);\n        }\n      }}\n    />\n  );\n}\n\nasync function loadUnwrapOptions(\n  query: LokiVisualQuery,\n  datasource: LokiDatasource\n): Promise<Array<SelectableValue<string>>> {\n  const queryExpr = lokiQueryModeller.renderQuery(query);\n  const logExpr = getLogQueryFromMetricsQuery(queryExpr);\n  if (isQueryWithError(datasource.interpolateString(logExpr, placeHolderScopedVars))) {\n    return [];\n  }\n\n  const samples = await datasource.getDataSamples({ expr: logExpr, refId: 'unwrap_samples' });\n  const unwrapLabels = extractUnwrapLabelKeysFromDataFrame(samples[0]);\n\n  const labelOptions = unwrapLabels.map((label) => ({\n    label,\n    value: label,\n  }));\n\n  return labelOptions;\n}\n","import {\n  createAggregationOperation,\n  createAggregationOperationWithParam,\n} from '../../prometheus/querybuilder/shared/operationUtils';\nimport { QueryBuilderOperationDef, QueryBuilderOperationParamValue } from '../../prometheus/querybuilder/shared/types';\n\nimport { binaryScalarOperations } from './binaryScalarOperations';\nimport { UnwrapParamEditor } from './components/UnwrapParamEditor';\nimport {\n  addLokiOperation,\n  addNestedQueryHandler,\n  createRangeOperation,\n  createRangeOperationWithGrouping,\n  getLineFilterRenderer,\n  labelFilterRenderer,\n  pipelineRenderer,\n} from './operationUtils';\nimport { LokiOperationId, LokiOperationOrder, lokiOperators, LokiVisualQueryOperationCategory } from './types';\n\nexport function getOperationDefinitions(): QueryBuilderOperationDef[] {\n  const aggregations = [\n    LokiOperationId.Sum,\n    LokiOperationId.Min,\n    LokiOperationId.Max,\n    LokiOperationId.Avg,\n    LokiOperationId.Stddev,\n    LokiOperationId.Stdvar,\n    LokiOperationId.Count,\n  ].flatMap((opId) =>\n    createAggregationOperation(opId, {\n      addOperationHandler: addLokiOperation,\n      orderRank: LokiOperationOrder.Last,\n    })\n  );\n\n  const aggregationsWithParam = [LokiOperationId.TopK, LokiOperationId.BottomK].flatMap((opId) => {\n    return createAggregationOperationWithParam(\n      opId,\n      {\n        params: [{ name: 'K-value', type: 'number' }],\n        defaultParams: [5],\n      },\n      {\n        addOperationHandler: addLokiOperation,\n        orderRank: LokiOperationOrder.Last,\n      }\n    );\n  });\n\n  const rangeOperations = [\n    createRangeOperation(LokiOperationId.Rate),\n    createRangeOperation(LokiOperationId.RateCounter),\n    createRangeOperation(LokiOperationId.CountOverTime),\n    createRangeOperation(LokiOperationId.SumOverTime),\n    createRangeOperation(LokiOperationId.BytesRate),\n    createRangeOperation(LokiOperationId.BytesOverTime),\n    createRangeOperation(LokiOperationId.AbsentOverTime),\n  ];\n\n  const rangeOperationsWithGrouping = [\n    ...createRangeOperationWithGrouping(LokiOperationId.AvgOverTime),\n    ...createRangeOperationWithGrouping(LokiOperationId.MaxOverTime),\n    ...createRangeOperationWithGrouping(LokiOperationId.MinOverTime),\n    ...createRangeOperationWithGrouping(LokiOperationId.FirstOverTime),\n    ...createRangeOperationWithGrouping(LokiOperationId.LastOverTime),\n    ...createRangeOperationWithGrouping(LokiOperationId.StdvarOverTime),\n    ...createRangeOperationWithGrouping(LokiOperationId.StddevOverTime),\n    ...createRangeOperationWithGrouping(LokiOperationId.QuantileOverTime),\n  ];\n\n  const list: QueryBuilderOperationDef[] = [\n    ...aggregations,\n    ...aggregationsWithParam,\n    ...rangeOperations,\n    ...rangeOperationsWithGrouping,\n    {\n      id: LokiOperationId.Json,\n      name: 'Json',\n      params: [\n        {\n          name: 'Expression',\n          type: 'string',\n          restParam: true,\n          optional: true,\n          minWidth: 18,\n          placeholder: 'server=\"servers[0]\"',\n          description:\n            'Using expressions with your json parser will extract only the specified json fields to labels. You can specify one or more expressions in this way. All expressions must be quoted.',\n        },\n      ],\n      defaultParams: [],\n      alternativesKey: 'format',\n      category: LokiVisualQueryOperationCategory.Formats,\n      orderRank: LokiOperationOrder.Parsers,\n      renderer: (model, def, innerExpr) => `${innerExpr} | json ${model.params.join(', ')}`.trim(),\n      addOperationHandler: addLokiOperation,\n      explainHandler: () =>\n        `This will extract keys and values from a [json](https://grafana.com/docs/loki/latest/logql/log_queries/#json) formatted log line as labels. The extracted labels can be used in label filter expressions and used as values for a range aggregation via the unwrap operation.`,\n    },\n    {\n      id: LokiOperationId.Logfmt,\n      name: 'Logfmt',\n      params: [\n        {\n          name: 'Strict',\n          type: 'boolean',\n          optional: true,\n          description:\n            'With strict parsing enabled, the logfmt parser immediately stops scanning the log line and returns early with an error when it encounters any poorly formatted key/value pair.',\n        },\n        {\n          name: 'Keep empty',\n          type: 'boolean',\n          optional: true,\n          description:\n            'The logfmt parser retains standalone keys (keys without a value) as labels with its value set to empty string. ',\n        },\n        {\n          name: 'Expression',\n          type: 'string',\n          optional: true,\n          restParam: true,\n          minWidth: 18,\n          placeholder: 'field_name',\n          description:\n            'Using expressions with your logfmt parser will extract and rename (if provided) only the specified fields to labels. You can specify one or more expressions in this way.',\n        },\n      ],\n      defaultParams: [false, false],\n      alternativesKey: 'format',\n      category: LokiVisualQueryOperationCategory.Formats,\n      orderRank: LokiOperationOrder.Parsers,\n      renderer: pipelineRenderer,\n      addOperationHandler: addLokiOperation,\n      explainHandler: () =>\n        `This will extract all keys and values from a [logfmt](https://grafana.com/docs/loki/latest/logql/log_queries/#logfmt) formatted log line as labels. The extracted labels can be used in label filter expressions and used as values for a range aggregation via the unwrap operation.`,\n    },\n    {\n      id: LokiOperationId.Regexp,\n      name: 'Regexp',\n      params: [\n        {\n          name: 'String',\n          type: 'string',\n          hideName: true,\n          placeholder: '<re>',\n          description: 'The regexp expression that matches the structure of a log line.',\n          minWidth: 20,\n        },\n      ],\n      defaultParams: [''],\n      alternativesKey: 'format',\n      category: LokiVisualQueryOperationCategory.Formats,\n      orderRank: LokiOperationOrder.Parsers,\n      renderer: (model, def, innerExpr) => `${innerExpr} | regexp \\`${model.params[0]}\\``,\n      addOperationHandler: addLokiOperation,\n      explainHandler: () =>\n        `The [regexp parser](https://grafana.com/docs/loki/latest/logql/log_queries/#regular-expression) takes a single parameter | regexp \"<re>\" which is the regular expression using the Golang RE2 syntax. The regular expression must contain a least one named sub-match (e.g (?P<name>re)), each sub-match will extract a different label. The expression matches the structure of a log line. The extracted labels can be used in label filter expressions and used as values for a range aggregation via the unwrap operation.`,\n    },\n    {\n      id: LokiOperationId.Pattern,\n      name: 'Pattern',\n      params: [\n        {\n          name: 'String',\n          type: 'string',\n          hideName: true,\n          placeholder: '<pattern-expression>',\n          description: 'The expression that matches the structure of a log line.',\n          minWidth: 20,\n        },\n      ],\n      defaultParams: [''],\n      alternativesKey: 'format',\n      category: LokiVisualQueryOperationCategory.Formats,\n      orderRank: LokiOperationOrder.Parsers,\n      renderer: (model, def, innerExpr) => `${innerExpr} | pattern \\`${model.params[0]}\\``,\n      addOperationHandler: addLokiOperation,\n      explainHandler: () =>\n        `The [pattern parser](https://grafana.com/docs/loki/latest/logql/log_queries/#pattern) allows the explicit extraction of fields from log lines by defining a pattern expression (| pattern \\`<pattern-expression>\\`). The expression matches the structure of a log line. The extracted labels can be used in label filter expressions and used as values for a range aggregation via the unwrap operation.`,\n    },\n    {\n      id: LokiOperationId.Unpack,\n      name: 'Unpack',\n      params: [],\n      defaultParams: [],\n      alternativesKey: 'format',\n      category: LokiVisualQueryOperationCategory.Formats,\n      orderRank: LokiOperationOrder.Parsers,\n      renderer: pipelineRenderer,\n      addOperationHandler: addLokiOperation,\n      explainHandler: () =>\n        `This will extract all keys and values from a JSON log line, [unpacking](https://grafana.com/docs/loki/latest/logql/log_queries/#unpack) all embedded labels in the pack stage. The extracted labels can be used in label filter expressions and used as values for a range aggregation via the unwrap operation.`,\n    },\n    {\n      id: LokiOperationId.LineFormat,\n      name: 'Line format',\n      params: [\n        {\n          name: 'String',\n          type: 'string',\n          hideName: true,\n          placeholder: '{{.status_code}}',\n          description: 'A line template that can refer to stream labels and extracted labels.',\n          minWidth: 20,\n        },\n      ],\n      defaultParams: [''],\n      alternativesKey: 'format',\n      category: LokiVisualQueryOperationCategory.Formats,\n      orderRank: LokiOperationOrder.PipeOperations,\n      renderer: (model, def, innerExpr) => `${innerExpr} | line_format \\`${model.params[0]}\\``,\n      addOperationHandler: addLokiOperation,\n      explainHandler: () =>\n        `This will replace log line using a specified template. The template can refer to stream labels and extracted labels.\n\nExample: \\`{{.status_code}} - {{.message}}\\`\n\n[Read the docs](https://grafana.com/docs/loki/latest/logql/log_queries/#line-format-expression) for more.\n        `,\n    },\n    {\n      id: LokiOperationId.LabelFormat,\n      name: 'Label format',\n      params: [\n        { name: 'Label', type: 'string' },\n        { name: 'Rename to', type: 'string' },\n      ],\n      defaultParams: ['', ''],\n      alternativesKey: 'format',\n      category: LokiVisualQueryOperationCategory.Formats,\n      orderRank: LokiOperationOrder.PipeOperations,\n      renderer: (model, def, innerExpr) => `${innerExpr} | label_format ${model.params[1]}=${model.params[0]}`,\n      addOperationHandler: addLokiOperation,\n      explainHandler: () =>\n        `This will change name of label to desired new label. In the example below, label \"error_level\" will be renamed to \"level\".\n\nExample: \\`\\`error_level=\\`level\\` \\`\\`\n\n[Read the docs](https://grafana.com/docs/loki/latest/logql/log_queries/#labels-format-expression) for more.\n        `,\n    },\n\n    {\n      id: LokiOperationId.LineContains,\n      name: 'Line contains',\n      params: [\n        {\n          name: 'String',\n          type: 'string',\n          hideName: true,\n          placeholder: 'Text to find',\n          description: 'Find log lines that contains this text',\n          minWidth: 20,\n          runQueryOnEnter: true,\n        },\n      ],\n      defaultParams: [''],\n      alternativesKey: 'line filter',\n      category: LokiVisualQueryOperationCategory.LineFilters,\n      orderRank: LokiOperationOrder.LineFilters,\n      renderer: getLineFilterRenderer('|='),\n      addOperationHandler: addLokiOperation,\n      explainHandler: (op) => `Return log lines that contain string \\`${op.params[0]}\\`.`,\n    },\n    {\n      id: LokiOperationId.LineContainsNot,\n      name: 'Line does not contain',\n      params: [\n        {\n          name: 'String',\n          type: 'string',\n          hideName: true,\n          placeholder: 'Text to exclude',\n          description: 'Find log lines that does not contain this text',\n          minWidth: 26,\n          runQueryOnEnter: true,\n        },\n      ],\n      defaultParams: [''],\n      alternativesKey: 'line filter',\n      category: LokiVisualQueryOperationCategory.LineFilters,\n      orderRank: LokiOperationOrder.LineFilters,\n      renderer: getLineFilterRenderer('!='),\n      addOperationHandler: addLokiOperation,\n      explainHandler: (op) => `Return log lines that does not contain string \\`${op.params[0]}\\`.`,\n    },\n    {\n      id: LokiOperationId.LineContainsCaseInsensitive,\n      name: 'Line contains case insensitive',\n      params: [\n        {\n          name: 'String',\n          type: 'string',\n          hideName: true,\n          placeholder: 'Text to find',\n          description: 'Find log lines that contains this text',\n          minWidth: 33,\n          runQueryOnEnter: true,\n        },\n      ],\n      defaultParams: [''],\n      alternativesKey: 'line filter',\n      category: LokiVisualQueryOperationCategory.LineFilters,\n      orderRank: LokiOperationOrder.LineFilters,\n      renderer: getLineFilterRenderer('|~', true),\n      addOperationHandler: addLokiOperation,\n      explainHandler: (op) => `Return log lines that match regex \\`(?i)${op.params[0]}\\`.`,\n    },\n    {\n      id: LokiOperationId.LineContainsNotCaseInsensitive,\n      name: 'Line does not contain case insensitive',\n      params: [\n        {\n          name: 'String',\n          type: 'string',\n          hideName: true,\n          placeholder: 'Text to exclude',\n          description: 'Find log lines that does not contain this text',\n          minWidth: 40,\n          runQueryOnEnter: true,\n        },\n      ],\n      defaultParams: [''],\n      alternativesKey: 'line filter',\n      category: LokiVisualQueryOperationCategory.LineFilters,\n      orderRank: LokiOperationOrder.LineFilters,\n      renderer: getLineFilterRenderer('!~', true),\n      addOperationHandler: addLokiOperation,\n      explainHandler: (op) => `Return log lines that does not match regex \\`(?i)${op.params[0]}\\`.`,\n    },\n    {\n      id: LokiOperationId.LineMatchesRegex,\n      name: 'Line contains regex match',\n      params: [\n        {\n          name: 'Regex',\n          type: 'string',\n          hideName: true,\n          placeholder: 'Pattern to match',\n          description: 'Find log lines that match this regex pattern',\n          minWidth: 30,\n          runQueryOnEnter: true,\n        },\n      ],\n      defaultParams: [''],\n      alternativesKey: 'line filter',\n      category: LokiVisualQueryOperationCategory.LineFilters,\n      orderRank: LokiOperationOrder.LineFilters,\n      renderer: getLineFilterRenderer('|~'),\n      addOperationHandler: addLokiOperation,\n      explainHandler: (op) => `Return log lines that match a \\`RE2\\` regex pattern. \\`${op.params[0]}\\`.`,\n    },\n    {\n      id: LokiOperationId.LineMatchesRegexNot,\n      name: 'Line does not match regex',\n      params: [\n        {\n          name: 'Regex',\n          type: 'string',\n          hideName: true,\n          placeholder: 'Pattern to exclude',\n          description: 'Find log lines that does not match this regex pattern',\n          minWidth: 30,\n          runQueryOnEnter: true,\n        },\n      ],\n      defaultParams: [''],\n      alternativesKey: 'line filter',\n      category: LokiVisualQueryOperationCategory.LineFilters,\n      orderRank: LokiOperationOrder.LineFilters,\n      renderer: getLineFilterRenderer('!~'),\n      addOperationHandler: addLokiOperation,\n      explainHandler: (op) => `Return log lines that doesn't match a \\`RE2\\` regex pattern. \\`${op.params[0]}\\`.`,\n    },\n    {\n      id: LokiOperationId.LineFilterIpMatches,\n      name: 'IP line filter expression',\n      params: [\n        {\n          name: 'Operator',\n          type: 'string',\n          minWidth: 16,\n          options: [lokiOperators.contains, lokiOperators.doesNotContain],\n        },\n        {\n          name: 'Pattern',\n          type: 'string',\n          placeholder: '<pattern>',\n          minWidth: 16,\n          runQueryOnEnter: true,\n        },\n      ],\n      defaultParams: ['|=', ''],\n      alternativesKey: 'line filter',\n      category: LokiVisualQueryOperationCategory.LineFilters,\n      orderRank: LokiOperationOrder.LineFilters,\n      renderer: (op, def, innerExpr) => `${innerExpr} ${op.params[0]} ip(\\`${op.params[1]}\\`)`,\n      addOperationHandler: addLokiOperation,\n      explainHandler: (op) => `Return log lines using IP matching of \\`${op.params[1]}\\``,\n    },\n    {\n      id: LokiOperationId.LabelFilter,\n      name: 'Label filter expression',\n      params: [\n        { name: 'Label', type: 'string', minWidth: 14 },\n        {\n          name: 'Operator',\n          type: 'string',\n          minWidth: 14,\n          options: [\n            lokiOperators.equals,\n            lokiOperators.doesNotEqual,\n            lokiOperators.matchesRegex,\n            lokiOperators.doesNotMatchRegex,\n            lokiOperators.greaterThan,\n            lokiOperators.lessThan,\n            lokiOperators.greaterThanOrEqual,\n            lokiOperators.lessThanOrEqual,\n          ],\n        },\n        { name: 'Value', type: 'string', minWidth: 14 },\n      ],\n      defaultParams: ['', '=', ''],\n      alternativesKey: 'label filter',\n      category: LokiVisualQueryOperationCategory.LabelFilters,\n      orderRank: LokiOperationOrder.PipeOperations,\n      renderer: labelFilterRenderer,\n      addOperationHandler: addLokiOperation,\n      explainHandler: () => `Label expression filter allows filtering using original and extracted labels.`,\n    },\n    {\n      id: LokiOperationId.LabelFilterIpMatches,\n      name: 'IP label filter expression',\n      params: [\n        { name: 'Label', type: 'string', minWidth: 14 },\n        {\n          name: 'Operator',\n          type: 'string',\n          minWidth: 14,\n          options: [lokiOperators.equals, lokiOperators.doesNotEqual],\n        },\n        { name: 'Value', type: 'string', minWidth: 14 },\n      ],\n      defaultParams: ['', '=', ''],\n      alternativesKey: 'label filter',\n      category: LokiVisualQueryOperationCategory.LabelFilters,\n      orderRank: LokiOperationOrder.PipeOperations,\n      renderer: (model, def, innerExpr) =>\n        `${innerExpr} | ${model.params[0]} ${model.params[1]} ip(\\`${model.params[2]}\\`)`,\n      addOperationHandler: addLokiOperation,\n      explainHandler: (op) => `Return log lines using IP matching of \\`${op.params[2]}\\` for \\`${op.params[0]}\\` label`,\n    },\n    {\n      id: LokiOperationId.LabelFilterNoErrors,\n      name: 'No pipeline errors',\n      params: [],\n      defaultParams: [],\n      alternativesKey: 'label filter',\n      category: LokiVisualQueryOperationCategory.LabelFilters,\n      orderRank: LokiOperationOrder.NoErrors,\n      renderer: (model, def, innerExpr) => `${innerExpr} | __error__=\\`\\``,\n      addOperationHandler: addLokiOperation,\n      explainHandler: () => `Filter out all formatting and parsing errors.`,\n    },\n    {\n      id: LokiOperationId.Unwrap,\n      name: 'Unwrap',\n      params: [\n        {\n          name: 'Identifier',\n          type: 'string',\n          hideName: true,\n          minWidth: 16,\n          placeholder: 'Label key',\n          editor: UnwrapParamEditor,\n        },\n        {\n          name: 'Conversion function',\n          hideName: true,\n          type: 'string',\n          options: ['duration', 'duration_seconds', 'bytes'],\n          optional: true,\n        },\n      ],\n      defaultParams: ['', ''],\n      alternativesKey: 'format',\n      category: LokiVisualQueryOperationCategory.Formats,\n      orderRank: LokiOperationOrder.Unwrap,\n      renderer: (op, def, innerExpr) =>\n        `${innerExpr} | unwrap ${op.params[1] ? `${op.params[1]}(${op.params[0]})` : op.params[0]}`,\n      addOperationHandler: addLokiOperation,\n      explainHandler: (op) => {\n        let label = String(op.params[0]).length > 0 ? op.params[0] : '<label>';\n        return `Use the extracted label \\`${label}\\` as sample values instead of log lines for the subsequent range aggregation.${\n          op.params[1]\n            ? ` Conversion function \\`${op.params[1]}\\` wrapping \\`${label}\\` will attempt to convert this label from a specific format (e.g. 3k, 500ms).`\n            : ''\n        }`;\n      },\n    },\n    {\n      id: LokiOperationId.Decolorize,\n      name: 'Decolorize',\n      params: [],\n      defaultParams: [],\n      alternativesKey: 'format',\n      category: LokiVisualQueryOperationCategory.Formats,\n      orderRank: LokiOperationOrder.PipeOperations,\n      renderer: (op, def, innerExpr) => `${innerExpr} | decolorize`,\n      addOperationHandler: addLokiOperation,\n      explainHandler: () => `This will remove ANSI color codes from log lines.`,\n    },\n    {\n      id: LokiOperationId.Drop,\n      name: 'Drop',\n      params: [\n        // As drop can support both labels (e.g. job) and expressions (e.g. job=\"grafana\"), we\n        // use input and not LabelParamEditor.\n        {\n          name: 'Label',\n          type: 'string',\n          restParam: true,\n          optional: true,\n          minWidth: 18,\n          placeholder: 'job=\"grafana\"',\n          description: 'Specify labels or expressions to drop.',\n        },\n      ],\n      defaultParams: [''],\n      alternativesKey: 'format',\n      category: LokiVisualQueryOperationCategory.Formats,\n      orderRank: LokiOperationOrder.PipeOperations,\n      renderer: (op, def, innerExpr) => `${innerExpr} | drop ${op.params.join(',')}`,\n      addOperationHandler: addLokiOperation,\n      explainHandler: () => 'The drop expression will drop the given labels in the pipeline.',\n    },\n    {\n      id: LokiOperationId.Keep,\n      name: 'Keep',\n      params: [\n        // As keep can support both labels (e.g. job) and expressions (e.g. job=\"grafana\"), we\n        // use input and not LabelParamEditor.\n        {\n          name: 'Label',\n          type: 'string',\n          restParam: true,\n          optional: true,\n          minWidth: 18,\n          placeholder: 'job=\"grafana\"',\n          description: 'Specify labels or expressions to keep.',\n        },\n      ],\n      defaultParams: [''],\n      alternativesKey: 'format',\n      category: LokiVisualQueryOperationCategory.Formats,\n      orderRank: LokiOperationOrder.PipeOperations,\n      renderer: (op, def, innerExpr) => `${innerExpr} | keep ${op.params.join(',')}`,\n      addOperationHandler: addLokiOperation,\n      explainHandler: () =>\n        'The keep expression will keep only the specified labels in the pipeline and drop all the other labels.',\n    },\n    ...binaryScalarOperations,\n    {\n      id: LokiOperationId.NestedQuery,\n      name: 'Binary operation with query',\n      params: [],\n      defaultParams: [],\n      category: LokiVisualQueryOperationCategory.BinaryOps,\n      renderer: (model, def, innerExpr) => innerExpr,\n      addOperationHandler: addNestedQueryHandler,\n    },\n  ];\n\n  return list;\n}\n\n// Keeping a local copy as an optimization measure.\nconst definitions = getOperationDefinitions();\n\n/**\n * Given an operator, return the corresponding explain.\n * For usage within the Query Editor.\n */\nexport function explainOperator(id: LokiOperationId | string): string {\n  const definition = definitions.find((operation) => operation.id === id);\n\n  const explain = definition?.explainHandler?.({ id: '', params: ['<value>'] }) || '';\n\n  // Strip markdown links\n  return explain.replace(/\\[(.*)\\]\\(.*\\)/g, '$1');\n}\n\nexport function getDefinitionById(id: string): QueryBuilderOperationDef | undefined {\n  return definitions.find((x) => x.id === id);\n}\n\nexport function checkParamsAreValid(def: QueryBuilderOperationDef, params: QueryBuilderOperationParamValue[]): boolean {\n  // For now we only check if the operation has all the required params.\n  if (params.length < def.params.filter((param) => !param.optional).length) {\n    return false;\n  }\n\n  return true;\n}\n","import { SyntaxNode } from '@lezer/common';\n\nimport {\n  And,\n  BinOpExpr,\n  Bool,\n  By,\n  ConvOp,\n  Decolorize,\n  DropLabel,\n  DropLabels,\n  DropLabelsExpr,\n  Filter,\n  FilterOp,\n  Grouping,\n  GroupingLabelList,\n  GroupingLabels,\n  Identifier,\n  Ip,\n  IpLabelFilter,\n  Json,\n  JsonExpressionParser,\n  KeepLabel,\n  KeepLabels,\n  KeepLabelsExpr,\n  LabelExtractionExpression,\n  LabelFilter,\n  LabelFormatMatcher,\n  LabelParser,\n  LineFilter,\n  LineFormatExpr,\n  LogfmtExpressionParser,\n  LogfmtParser,\n  LogRangeExpr,\n  Matcher,\n  MetricExpr,\n  Number as NumberLezer,\n  On,\n  Or,\n  parser,\n  ParserFlag,\n  Range,\n  RangeAggregationExpr,\n  RangeOp,\n  String,\n  UnitFilter,\n  Unwrap,\n  UnwrapExpr,\n  VectorAggregationExpr,\n  VectorOp,\n  Without,\n  BinOpModifier,\n  OnOrIgnoringModifier,\n} from '@grafana/lezer-logql';\n\nimport {\n  ErrorId,\n  getAllByType,\n  getLeftMostChild,\n  getString,\n  makeBinOp,\n  makeError,\n  replaceVariables,\n} from '../../prometheus/querybuilder/shared/parsingUtils';\nimport {\n  QueryBuilderLabelFilter,\n  QueryBuilderOperation,\n  QueryBuilderOperationParamValue,\n} from '../../prometheus/querybuilder/shared/types';\n\nimport { binaryScalarDefs } from './binaryScalarOperations';\nimport { checkParamsAreValid, getDefinitionById } from './operations';\nimport { LokiOperationId, LokiVisualQuery, LokiVisualQueryBinary } from './types';\n\ninterface Context {\n  query: LokiVisualQuery;\n  errors: ParsingError[];\n}\n\ninterface ParsingError {\n  text: string;\n  from?: number;\n  to?: number;\n  parentType?: string;\n}\n\ninterface GetOperationResult {\n  operation?: QueryBuilderOperation;\n  error?: string;\n}\n\nexport function buildVisualQueryFromString(expr: string): Context {\n  const replacedExpr = replaceVariables(expr);\n  const tree = parser.parse(replacedExpr);\n  const node = tree.topNode;\n\n  // This will be modified in the handleExpression\n  const visQuery: LokiVisualQuery = {\n    labels: [],\n    operations: [],\n  };\n\n  const context: Context = {\n    query: visQuery,\n    errors: [],\n  };\n\n  try {\n    handleExpression(replacedExpr, node, context);\n  } catch (err) {\n    // Not ideal to log it here, but otherwise we would lose the stack trace.\n    console.error(err);\n    if (err instanceof Error) {\n      context.errors.push({\n        text: err.message,\n      });\n    }\n  }\n\n  // If we have empty query, we want to reset errors\n  if (isEmptyQuery(context.query)) {\n    context.errors = [];\n  }\n  return context;\n}\n\nexport function handleExpression(expr: string, node: SyntaxNode, context: Context) {\n  const visQuery = context.query;\n  switch (node.type.id) {\n    case Matcher: {\n      visQuery.labels.push(getLabel(expr, node));\n      const err = node.getChild(ErrorId);\n      if (err) {\n        context.errors.push(makeError(expr, err));\n      }\n      break;\n    }\n\n    case LineFilter: {\n      const { operation, error } = getLineFilter(expr, node);\n      if (operation) {\n        visQuery.operations.push(operation);\n      }\n      // Show error for query patterns not supported in visual query builder\n      if (error) {\n        context.errors.push(createNotSupportedError(expr, node, error));\n      }\n      break;\n    }\n\n    case LabelParser: {\n      visQuery.operations.push(getLabelParser(expr, node));\n      break;\n    }\n\n    case LabelFilter: {\n      const { operation, error } = getLabelFilter(expr, node);\n      if (operation) {\n        visQuery.operations.push(operation);\n      }\n      // Show error for query patterns not supported in visual query builder\n      if (error) {\n        context.errors.push(createNotSupportedError(expr, node, error));\n      }\n      break;\n    }\n    case JsonExpressionParser: {\n      visQuery.operations.push(getJsonExpressionParser(expr, node));\n      break;\n    }\n\n    case LogfmtParser:\n    case LogfmtExpressionParser: {\n      const { operation, error } = getLogfmtParser(expr, node);\n      if (operation) {\n        visQuery.operations.push(operation);\n      }\n      if (error) {\n        context.errors.push(createNotSupportedError(expr, node, error));\n      }\n      break;\n    }\n\n    case LineFormatExpr: {\n      visQuery.operations.push(getLineFormat(expr, node));\n      break;\n    }\n\n    case LabelFormatMatcher: {\n      visQuery.operations.push(getLabelFormat(expr, node));\n      break;\n    }\n\n    case UnwrapExpr: {\n      const { operation, error } = handleUnwrapExpr(expr, node, context);\n      if (operation) {\n        visQuery.operations.push(operation);\n      }\n      // Show error for query patterns not supported in visual query builder\n      if (error) {\n        context.errors.push(createNotSupportedError(expr, node, error));\n      }\n\n      break;\n    }\n\n    case Decolorize: {\n      visQuery.operations.push(getDecolorize());\n      break;\n    }\n\n    case RangeAggregationExpr: {\n      visQuery.operations.push(handleRangeAggregation(expr, node, context));\n      break;\n    }\n\n    case VectorAggregationExpr: {\n      visQuery.operations.push(handleVectorAggregation(expr, node, context));\n      break;\n    }\n\n    case BinOpExpr: {\n      handleBinary(expr, node, context);\n      break;\n    }\n\n    case ErrorId: {\n      if (isIntervalVariableError(node)) {\n        break;\n      }\n      context.errors.push(makeError(expr, node));\n      break;\n    }\n\n    case DropLabelsExpr: {\n      visQuery.operations.push(handleDropFilter(expr, node, context));\n      break;\n    }\n\n    case KeepLabelsExpr: {\n      visQuery.operations.push(handleKeepFilter(expr, node, context));\n      break;\n    }\n\n    default: {\n      // Any other nodes we just ignore and go to its children. This should be fine as there are lots of wrapper\n      // nodes that can be skipped.\n      // TODO: there are probably cases where we will just skip nodes we don't support and we should be able to\n      //  detect those and report back.\n      let child = node.firstChild;\n      while (child) {\n        handleExpression(expr, child, context);\n        child = child.nextSibling;\n      }\n    }\n  }\n}\n\nfunction getLabel(expr: string, node: SyntaxNode): QueryBuilderLabelFilter {\n  const labelNode = node.getChild(Identifier);\n  const label = getString(expr, labelNode);\n  const op = getString(expr, labelNode?.nextSibling);\n  let value = getString(expr, node.getChild(String));\n  // `value` is wrapped in double quotes, so we need to remove them. As a value can contain double quotes, we can't use RegEx here.\n  value = value.substring(1, value.length - 1);\n\n  return {\n    label,\n    op,\n    value,\n  };\n}\n\nfunction getLineFilter(expr: string, node: SyntaxNode): GetOperationResult {\n  const filter = getString(expr, node.getChild(Filter));\n  const filterExpr = handleQuotes(getString(expr, node.getChild(String)));\n  const ipLineFilter = node.getChild(FilterOp)?.getChild(Ip);\n\n  if (ipLineFilter) {\n    return {\n      operation: {\n        id: LokiOperationId.LineFilterIpMatches,\n        params: [filter, filterExpr],\n      },\n    };\n  }\n  const mapFilter: Record<string, LokiOperationId> = {\n    '|=': LokiOperationId.LineContains,\n    '!=': LokiOperationId.LineContainsNot,\n    '|~': LokiOperationId.LineMatchesRegex,\n    '!~': LokiOperationId.LineMatchesRegexNot,\n  };\n\n  return {\n    operation: {\n      id: mapFilter[filter],\n      params: [filterExpr],\n    },\n  };\n}\n\nfunction getLabelParser(expr: string, node: SyntaxNode): QueryBuilderOperation {\n  const parserNode = node.firstChild;\n  const parser = getString(expr, parserNode);\n\n  const string = handleQuotes(getString(expr, node.getChild(String)));\n  let params: QueryBuilderOperationParamValue[] = !!string ? [string] : [];\n  const opDef = getDefinitionById(parser);\n  if (opDef && !checkParamsAreValid(opDef, params)) {\n    params = opDef?.defaultParams || [];\n  }\n\n  return {\n    id: parser,\n    params,\n  };\n}\n\nfunction getJsonExpressionParser(expr: string, node: SyntaxNode): QueryBuilderOperation {\n  const parserNode = node.getChild(Json);\n  const parser = getString(expr, parserNode);\n\n  const params = [...getAllByType(expr, node, LabelExtractionExpression)];\n  return {\n    id: parser,\n    params,\n  };\n}\n\nfunction getLogfmtParser(expr: string, node: SyntaxNode): GetOperationResult {\n  const flags: string[] = [];\n  const labels: string[] = [];\n  let error: string | undefined = undefined;\n\n  const offset = node.from;\n  node.toTree().iterate({\n    enter: (subNode) => {\n      if (subNode.type.id === ParserFlag) {\n        flags.push(expr.substring(subNode.from + offset, subNode.to + offset));\n      } else if (subNode.type.id === LabelExtractionExpression) {\n        labels.push(expr.substring(subNode.from + offset, subNode.to + offset));\n      } else if (subNode.type.id === ErrorId) {\n        error = `Unexpected string \"${expr.substring(subNode.from + offset, subNode.to + offset)}\"`;\n      }\n    },\n  });\n\n  const operation = {\n    id: LokiOperationId.Logfmt,\n    params: [flags.includes('--strict'), flags.includes('--keep-empty'), ...labels],\n  };\n\n  return {\n    operation,\n    error,\n  };\n}\n\nfunction getLabelFilter(expr: string, node: SyntaxNode): GetOperationResult {\n  // Check for nodes not supported in visual builder and return error\n  if (node.getChild(Or) || node.getChild(And) || node.getChild('Comma')) {\n    return {\n      error: 'Label filter with comma, \"and\", \"or\" not supported in query builder',\n    };\n  }\n  if (node.firstChild!.type.id === IpLabelFilter) {\n    const ipLabelFilter = node.firstChild;\n    const label = ipLabelFilter?.getChild(Identifier);\n    const op = label?.nextSibling;\n    const value = ipLabelFilter?.getChild(String);\n    const valueString = handleQuotes(getString(expr, value));\n\n    return {\n      operation: {\n        id: LokiOperationId.LabelFilterIpMatches,\n        params: [getString(expr, label), getString(expr, op), valueString],\n      },\n    };\n  }\n\n  const id = LokiOperationId.LabelFilter;\n  if (node.firstChild!.type.id === UnitFilter) {\n    const filter = node.firstChild!.firstChild;\n    const label = filter!.firstChild;\n    const op = label!.nextSibling;\n    const value = op!.nextSibling;\n    const valueString = handleQuotes(getString(expr, value));\n\n    return {\n      operation: {\n        id,\n        params: [getString(expr, label), getString(expr, op), valueString],\n      },\n    };\n  }\n  // In this case it is Matcher or NumberFilter\n  const filter = node.firstChild;\n  const label = filter!.firstChild;\n  const op = label!.nextSibling;\n  const value = op!.nextSibling;\n  const params = [getString(expr, label), getString(expr, op), handleQuotes(getString(expr, value))];\n\n  // Special case of pipe filtering - no errors\n  if (params.join('') === `__error__=`) {\n    return {\n      operation: {\n        id: LokiOperationId.LabelFilterNoErrors,\n        params: [],\n      },\n    };\n  }\n\n  return {\n    operation: {\n      id,\n      params,\n    },\n  };\n}\n\nfunction getLineFormat(expr: string, node: SyntaxNode): QueryBuilderOperation {\n  const id = LokiOperationId.LineFormat;\n  const string = handleQuotes(getString(expr, node.getChild(String)));\n\n  return {\n    id,\n    params: [string],\n  };\n}\n\nfunction getLabelFormat(expr: string, node: SyntaxNode): QueryBuilderOperation {\n  const id = LokiOperationId.LabelFormat;\n  const renameTo = node.getChild(Identifier);\n  const op = renameTo!.nextSibling;\n  const originalLabel = op!.nextSibling;\n\n  return {\n    id,\n    params: [getString(expr, originalLabel), handleQuotes(getString(expr, renameTo))],\n  };\n}\n\nfunction getDecolorize(): QueryBuilderOperation {\n  const id = LokiOperationId.Decolorize;\n\n  return {\n    id,\n    params: [],\n  };\n}\n\nfunction handleUnwrapExpr(expr: string, node: SyntaxNode, context: Context): GetOperationResult {\n  const unwrapExprChild = node.getChild(UnwrapExpr);\n  const labelFilterChild = node.getChild(LabelFilter);\n  const unwrapChild = node.getChild(Unwrap);\n\n  if (unwrapExprChild) {\n    handleExpression(expr, unwrapExprChild, context);\n  }\n\n  if (labelFilterChild) {\n    handleExpression(expr, labelFilterChild, context);\n  }\n\n  if (unwrapChild) {\n    if (unwrapChild.nextSibling?.type.id === ConvOp) {\n      const convOp = unwrapChild.nextSibling;\n      const identifier = convOp.nextSibling;\n      return {\n        operation: {\n          id: LokiOperationId.Unwrap,\n          params: [getString(expr, identifier), getString(expr, convOp)],\n        },\n      };\n    }\n\n    return {\n      operation: {\n        id: LokiOperationId.Unwrap,\n        params: [getString(expr, unwrapChild?.nextSibling), ''],\n      },\n    };\n  }\n\n  return {};\n}\n\nfunction handleRangeAggregation(expr: string, node: SyntaxNode, context: Context) {\n  const nameNode = node.getChild(RangeOp);\n  const funcName = getString(expr, nameNode);\n  const number = node.getChild(NumberLezer);\n  const logExpr = node.getChild(LogRangeExpr);\n  const params = number !== null && number !== undefined ? [getString(expr, number)] : [];\n  const range = logExpr?.getChild(Range);\n  const rangeValue = range ? getString(expr, range) : null;\n\n  if (rangeValue) {\n    params.unshift(rangeValue.substring(1, rangeValue.length - 1));\n  }\n\n  const op = {\n    id: funcName,\n    params,\n  };\n\n  if (logExpr) {\n    handleExpression(expr, logExpr, context);\n  }\n\n  return op;\n}\n\nfunction handleVectorAggregation(expr: string, node: SyntaxNode, context: Context) {\n  const nameNode = node.getChild(VectorOp);\n  let funcName = getString(expr, nameNode);\n\n  const grouping = node.getChild(Grouping);\n  const params = [];\n\n  const numberNode = node.getChild(NumberLezer);\n\n  if (numberNode) {\n    params.push(Number(getString(expr, numberNode)));\n  }\n\n  if (grouping) {\n    const byModifier = grouping.getChild(By);\n    if (byModifier && funcName) {\n      funcName = `__${funcName}_by`;\n    }\n\n    const withoutModifier = grouping.getChild(Without);\n    if (withoutModifier) {\n      funcName = `__${funcName}_without`;\n    }\n\n    params.push(...getAllByType(expr, grouping, Identifier));\n  }\n\n  const metricExpr = node.getChild(MetricExpr);\n  const op: QueryBuilderOperation = { id: funcName, params };\n\n  if (metricExpr) {\n    // A vector aggregation expression with a child of metric expression with a child of binary expression is ambiguous after being parsed into a visual query\n    if (metricExpr.firstChild?.type.id === BinOpExpr) {\n      context.errors.push({\n        text: 'Query parsing is ambiguous.',\n        from: metricExpr.firstChild.from,\n        to: metricExpr.firstChild?.to,\n      });\n    }\n\n    handleExpression(expr, metricExpr, context);\n  }\n\n  return op;\n}\n\nconst operatorToOpName = binaryScalarDefs.reduce<Record<string, { id: string; comparison?: boolean }>>((acc, def) => {\n  acc[def.sign] = {\n    id: def.id,\n    comparison: def.comparison,\n  };\n  return acc;\n}, {});\n\n/**\n * Right now binary expressions can be represented in 2 way in visual query. As additional operation in case it is\n * just operation with scalar or it creates a binaryQuery when it's 2 queries.\n * @param expr\n * @param node\n * @param context\n */\nfunction handleBinary(expr: string, node: SyntaxNode, context: Context) {\n  const visQuery = context.query;\n  const left = node.firstChild!;\n  const op = getString(expr, left.nextSibling);\n  const binModifier = getBinaryModifier(expr, node.getChild(BinOpModifier));\n\n  const right = node.lastChild!;\n\n  const opDef = operatorToOpName[op];\n\n  const leftNumber = getLastChildWithSelector(left, 'MetricExpr.LiteralExpr.Number');\n  const rightNumber = getLastChildWithSelector(right, 'MetricExpr.LiteralExpr.Number');\n\n  const rightBinary = right.getChild(BinOpExpr);\n\n  if (leftNumber) {\n    // TODO: this should be already handled in case parent is binary expression as it has to be added to parent\n    //  if query starts with a number that isn't handled now.\n  } else {\n    // If this is binary we don't really know if there is a query or just chained scalars. So\n    // we have to traverse a bit deeper to know\n    handleExpression(expr, left, context);\n  }\n\n  if (rightNumber) {\n    visQuery.operations.push(makeBinOp(opDef, expr, right, !!binModifier?.isBool));\n  } else if (rightBinary) {\n    // Due to the way binary ops are parsed we can get a binary operation on the right that starts with a number which\n    // is a factor for a current binary operation. So we have to add it as an operation now.\n    const leftMostChild = getLeftMostChild(right);\n    if (leftMostChild?.type.id === NumberLezer) {\n      visQuery.operations.push(makeBinOp(opDef, expr, leftMostChild, !!binModifier?.isBool));\n    }\n\n    // If we added the first number literal as operation here we still can continue and handle the rest as the first\n    // number will be just skipped.\n    handleExpression(expr, right, context);\n  } else {\n    visQuery.binaryQueries = visQuery.binaryQueries || [];\n    const binQuery: LokiVisualQueryBinary = {\n      operator: op,\n      query: {\n        labels: [],\n        operations: [],\n      },\n    };\n    if (binModifier?.isMatcher) {\n      binQuery.vectorMatchesType = binModifier.matchType;\n      binQuery.vectorMatches = binModifier.matches;\n    }\n    visQuery.binaryQueries.push(binQuery);\n    handleExpression(expr, right, {\n      query: binQuery.query,\n      errors: context.errors,\n    });\n  }\n}\n\nfunction getBinaryModifier(\n  expr: string,\n  node: SyntaxNode | null\n):\n  | { isBool: true; isMatcher: false }\n  | { isBool: boolean; isMatcher: true; matches: string; matchType: 'ignoring' | 'on' }\n  | undefined {\n  if (!node) {\n    return undefined;\n  }\n  const matcher = node.getChild(OnOrIgnoringModifier);\n  const boolMatcher = node.getChild(Bool);\n\n  if (!matcher && boolMatcher) {\n    return { isBool: true, isMatcher: false };\n  } else {\n    if (!matcher) {\n      // Not sure what this could be, maybe should be an error.\n      return undefined;\n    }\n    const labels = getString(expr, matcher.getChild(GroupingLabels)?.getChild(GroupingLabelList));\n    return {\n      isMatcher: true,\n      isBool: !!boolMatcher,\n      matches: labels,\n      matchType: matcher.getChild(On) ? 'on' : 'ignoring',\n    };\n  }\n}\n\nfunction isIntervalVariableError(node: SyntaxNode) {\n  return node?.parent?.type.id === Range;\n}\n\nexport function handleQuotes(string: string) {\n  if (string[0] === `\"` && string[string.length - 1] === `\"`) {\n    return string\n      .substring(1, string.length - 1)\n      .replace(/\\\\\"/g, '\"')\n      .replace(/\\\\\\\\/g, '\\\\');\n  }\n  return string.replace(/`/g, '');\n}\n\n/**\n * Simple helper to traverse the syntax tree. Instead of node.getChild('foo')?.getChild('bar')?.getChild('baz') you\n * can write getChildWithSelector(node, 'foo.bar.baz')\n * @param node\n * @param selector\n */\nfunction getLastChildWithSelector(node: SyntaxNode, selector: string) {\n  let child: SyntaxNode | null = node;\n  const children = selector.split('.');\n  for (const s of children) {\n    child = child.getChild(s);\n    if (!child) {\n      return null;\n    }\n  }\n  return child;\n}\n\n/**\n * Helper function to enrich error text with information that visual query builder doesn't support that logQL\n * @param expr\n * @param node\n * @param error\n */\nfunction createNotSupportedError(expr: string, node: SyntaxNode, error: string) {\n  const err = makeError(expr, node);\n  err.text = `${error}: ${err.text}`;\n  return err;\n}\n\nfunction isEmptyQuery(query: LokiVisualQuery) {\n  if (query.labels.length === 0 && query.operations.length === 0) {\n    return true;\n  }\n  return false;\n}\n\nfunction handleDropFilter(expr: string, node: SyntaxNode, context: Context): QueryBuilderOperation {\n  const labels: string[] = [];\n  let exploringNode = node.getChild(DropLabels);\n  while (exploringNode) {\n    const label = getString(expr, exploringNode.getChild(DropLabel));\n    if (label) {\n      labels.push(label);\n    }\n    exploringNode = exploringNode?.getChild(DropLabels);\n  }\n  labels.reverse();\n  return {\n    id: LokiOperationId.Drop,\n    params: labels,\n  };\n}\n\nfunction handleKeepFilter(expr: string, node: SyntaxNode, context: Context): QueryBuilderOperation {\n  const labels: string[] = [];\n  let exploringNode = node.getChild(KeepLabels);\n  while (exploringNode) {\n    const label = getString(expr, exploringNode.getChild(KeepLabel));\n    if (label) {\n      labels.push(label);\n    }\n    exploringNode = exploringNode?.getChild(KeepLabels);\n  }\n  labels.reverse();\n  return {\n    id: LokiOperationId.Keep,\n    params: labels,\n  };\n}\n","import { VisualQueryBinary } from '../../prometheus/querybuilder/shared/LokiAndPromQueryModellerBase';\nimport { QueryBuilderLabelFilter, QueryBuilderOperation } from '../../prometheus/querybuilder/shared/types';\n\n/**\n * Visual query model\n */\nexport interface LokiVisualQuery {\n  labels: QueryBuilderLabelFilter[];\n  operations: QueryBuilderOperation[];\n  binaryQueries?: LokiVisualQueryBinary[];\n}\n\nexport type LokiVisualQueryBinary = VisualQueryBinary<LokiVisualQuery>;\nexport enum LokiQueryPatternType {\n  Log = 'log',\n  Metric = 'metric',\n}\n\nexport interface LokiQueryPattern {\n  name: string;\n  operations: QueryBuilderOperation[];\n  type: LokiQueryPatternType;\n}\n\nexport enum LokiVisualQueryOperationCategory {\n  Aggregations = 'Aggregations',\n  RangeFunctions = 'Range functions',\n  Functions = 'Functions',\n  Formats = 'Formats',\n  LineFilters = 'Line filters',\n  LabelFilters = 'Label filters',\n  BinaryOps = 'Binary operations',\n}\n\nexport enum LokiOperationId {\n  Json = 'json',\n  Logfmt = 'logfmt',\n  Regexp = 'regexp',\n  Pattern = 'pattern',\n  Unpack = 'unpack',\n  LineFormat = 'line_format',\n  LabelFormat = 'label_format',\n  Decolorize = 'decolorize',\n  Drop = 'drop',\n  Keep = 'keep',\n  Rate = 'rate',\n  RateCounter = 'rate_counter',\n  CountOverTime = 'count_over_time',\n  SumOverTime = 'sum_over_time',\n  AvgOverTime = 'avg_over_time',\n  MaxOverTime = 'max_over_time',\n  MinOverTime = 'min_over_time',\n  FirstOverTime = 'first_over_time',\n  LastOverTime = 'last_over_time',\n  StdvarOverTime = 'stdvar_over_time',\n  StddevOverTime = 'stddev_over_time',\n  QuantileOverTime = 'quantile_over_time',\n  BytesRate = 'bytes_rate',\n  BytesOverTime = 'bytes_over_time',\n  AbsentOverTime = 'absent_over_time',\n  Sum = 'sum',\n  Avg = 'avg',\n  Min = 'min',\n  Max = 'max',\n  Stddev = 'stddev',\n  Stdvar = 'stdvar',\n  Count = 'count',\n  TopK = 'topk',\n  BottomK = 'bottomk',\n  LineContains = '__line_contains',\n  LineContainsNot = '__line_contains_not',\n  LineContainsCaseInsensitive = '__line_contains_case_insensitive',\n  LineContainsNotCaseInsensitive = '__line_contains_not_case_insensitive',\n  LineMatchesRegex = '__line_matches_regex',\n  LineMatchesRegexNot = '__line_matches_regex_not',\n  LineFilterIpMatches = '__line_filter_ip_matches',\n  LabelFilter = '__label_filter',\n  LabelFilterNoErrors = '__label_filter_no_errors',\n  LabelFilterIpMatches = '__label_filter_ip_marches',\n  Unwrap = 'unwrap',\n  SumBy = '__sum_by',\n  SumWithout = '__sum_without',\n  // Binary ops\n  Addition = '__addition',\n  Subtraction = '__subtraction',\n  MultiplyBy = '__multiply_by',\n  DivideBy = '__divide_by',\n  Modulo = '__modulo',\n  Exponent = '__exponent',\n  NestedQuery = '__nested_query',\n  EqualTo = '__equal_to',\n  NotEqualTo = '__not_equal_to',\n  GreaterThan = '__greater_than',\n  LessThan = '__less_than',\n  GreaterOrEqual = '__greater_or_equal',\n  LessOrEqual = '__less_or_equal',\n}\n\nexport enum LokiOperationOrder {\n  LineFilters = 1,\n  Parsers = 2,\n  PipeOperations = 3,\n  // Unwrap is a special case, as it is usually the last operation, so the order is after pipeOperations\n  Unwrap = 4,\n  NoErrors = 5,\n  RangeVectorFunction = 5,\n  Last = 6,\n}\n\nexport const lokiOperators = {\n  equals: { label: '=', value: '=', description: 'Equals', isMultiValue: false },\n  doesNotEqual: { label: '!=', value: '!=', description: 'Does not equal', isMultiValue: false },\n  matchesRegex: { label: '=~', value: '=~', description: 'Matches regex', isMultiValue: true },\n  doesNotMatchRegex: { label: '!~', value: '!~', description: 'Does not match regex', isMultiValue: true },\n  greaterThan: { label: '>', value: '>', description: 'Greater than', isMultiValue: false },\n  greaterThanOrEqual: { label: '>=', value: '>=', description: 'Greater than or equal to', isMultiValue: false },\n  lessThan: { label: '<', value: '<', description: 'Less than', isMultiValue: false },\n  lessThanOrEqual: { label: '<=', value: '<=', description: 'Less than or equal to', isMultiValue: false },\n  contains: { label: '|=', value: '|=', description: 'Contains', isMultiValue: false },\n  doesNotContain: { label: '!=', value: '!=', description: 'Does not contain', isMultiValue: false },\n};\n","export function isLogLineJSON(line: string): boolean {\n  let parsed;\n  try {\n    parsed = JSON.parse(line);\n  } catch (error) {}\n  // The JSON parser should only be used for log lines that are valid serialized JSON objects.\n  return typeof parsed === 'object';\n}\n\n// This matches:\n// first a label from start of the string or first white space, then any word chars until \"=\"\n// second either an empty quotes, or anything that starts with quote and ends with unescaped quote,\n// or any non whitespace chars that do not start with quote\nconst LOGFMT_REGEXP = /(?:^|\\s)([\\w\\(\\)\\[\\]\\{\\}]+)=(\"\"|(?:\".*?[^\\\\]\"|[^\"\\s]\\S*))/;\n\nexport function isLogLineLogfmt(line: string): boolean {\n  return LOGFMT_REGEXP.test(line);\n}\n\nexport function isLogLinePacked(line: string): boolean {\n  let parsed;\n  try {\n    parsed = JSON.parse(line);\n    return parsed.hasOwnProperty('_entry');\n  } catch (error) {\n    return false;\n  }\n}\n","import {\n  DataFrame,\n  DataFrameType,\n  DataQueryResponse,\n  DataQueryResponseData,\n  Field,\n  FieldType,\n  isValidGoDuration,\n  Labels,\n  QueryResultMetaStat,\n  shallowCompare,\n} from '@grafana/data';\n\nimport { isBytesString } from './languageUtils';\nimport { isLogLineJSON, isLogLineLogfmt, isLogLinePacked } from './lineParser';\n\nexport function dataFrameHasLokiError(frame: DataFrame): boolean {\n  const labelSets: Labels[] = frame.fields.find((f) => f.name === 'labels')?.values ?? [];\n  return labelSets.some((labels) => labels.__error__ !== undefined);\n}\n\nexport function dataFrameHasLevelLabel(frame: DataFrame): boolean {\n  const labelSets: Labels[] = frame.fields.find((f) => f.name === 'labels')?.values ?? [];\n  return labelSets.some((labels) => labels.level !== undefined);\n}\n\nexport function extractLogParserFromDataFrame(frame: DataFrame): {\n  hasLogfmt: boolean;\n  hasJSON: boolean;\n  hasPack: boolean;\n} {\n  const lineField = frame.fields.find((field) => field.type === FieldType.string);\n  if (lineField == null) {\n    return { hasJSON: false, hasLogfmt: false, hasPack: false };\n  }\n\n  const logLines: string[] = lineField.values;\n\n  let hasJSON = false;\n  let hasLogfmt = false;\n  let hasPack = false;\n\n  logLines.forEach((line) => {\n    if (isLogLineJSON(line)) {\n      hasJSON = true;\n\n      hasPack = isLogLinePacked(line);\n    }\n    if (isLogLineLogfmt(line)) {\n      hasLogfmt = true;\n    }\n  });\n\n  return { hasLogfmt, hasJSON, hasPack };\n}\n\nexport function extractLabelKeysFromDataFrame(frame: DataFrame): string[] {\n  const labelsArray: Array<{ [key: string]: string }> | undefined =\n    frame?.fields?.find((field) => field.name === 'labels')?.values ?? [];\n\n  if (!labelsArray?.length) {\n    return [];\n  }\n\n  return Object.keys(labelsArray[0]);\n}\n\nexport function extractUnwrapLabelKeysFromDataFrame(frame: DataFrame): string[] {\n  const labelsArray: Array<{ [key: string]: string }> | undefined =\n    frame?.fields?.find((field) => field.name === 'labels')?.values ?? [];\n\n  if (!labelsArray?.length) {\n    return [];\n  }\n\n  // We do this only for first label object, because we want to consider only labels that are present in all log lines\n  // possibleUnwrapLabels are labels with 1. number value OR 2. value that is valid go duration OR 3. bytes string value\n  const possibleUnwrapLabels = Object.keys(labelsArray[0]).filter((key) => {\n    const value = labelsArray[0][key];\n    if (!value) {\n      return false;\n    }\n    return !isNaN(Number(value)) || isValidGoDuration(value) || isBytesString(value);\n  });\n\n  // Add only labels that are present in every line to unwrapLabels\n  return possibleUnwrapLabels.filter((label) => labelsArray.every((obj) => obj[label]));\n}\n\nexport function extractHasErrorLabelFromDataFrame(frame: DataFrame): boolean {\n  const labelField = frame.fields.find((field) => field.name === 'labels' && field.type === FieldType.other);\n  if (labelField == null) {\n    return false;\n  }\n\n  const labels: Array<{ [key: string]: string }> = labelField.values;\n  return labels.some((label) => label['__error__']);\n}\n\nexport function extractLevelLikeLabelFromDataFrame(frame: DataFrame): string | null {\n  const labelField = frame.fields.find((field) => field.name === 'labels' && field.type === FieldType.other);\n  if (labelField == null) {\n    return null;\n  }\n\n  // Depending on number of labels, this can be pretty heavy operation.\n  // Let's just look at first 2 lines If needed, we can introduce more later.\n  const labelsArray: Array<{ [key: string]: string }> = labelField.values.slice(0, 2);\n  let levelLikeLabel: string | null = null;\n\n  // Find first level-like label\n  for (let labels of labelsArray) {\n    const label = Object.keys(labels).find((label) => label === 'lvl' || label.includes('level'));\n    if (label) {\n      levelLikeLabel = label;\n      break;\n    }\n  }\n  return levelLikeLabel;\n}\n\nfunction shouldCombine(frame1: DataFrame, frame2: DataFrame): boolean {\n  if (frame1.refId !== frame2.refId) {\n    return false;\n  }\n\n  const frameType1 = frame1.meta?.type;\n  const frameType2 = frame2.meta?.type;\n\n  if (frameType1 !== frameType2) {\n    // we do not join things that have a different type\n    return false;\n  }\n\n  // metric range query data\n  if (frameType1 === DataFrameType.TimeSeriesMulti) {\n    const field1 = frame1.fields.find((f) => f.type === FieldType.number);\n    const field2 = frame2.fields.find((f) => f.type === FieldType.number);\n    if (field1 === undefined || field2 === undefined) {\n      // should never happen\n      return false;\n    }\n\n    return shallowCompare(field1.labels ?? {}, field2.labels ?? {});\n  }\n\n  // logs query data\n  // logs use a special attribute in the dataframe's \"custom\" section\n  // because we do not have a good \"frametype\" value for them yet.\n  const customType1 = frame1.meta?.custom?.frameType;\n  const customType2 = frame2.meta?.custom?.frameType;\n\n  if (customType1 === 'LabeledTimeValues' && customType2 === 'LabeledTimeValues') {\n    return true;\n  }\n\n  // should never reach here\n  return false;\n}\n\nexport function combineResponses(currentResult: DataQueryResponse | null, newResult: DataQueryResponse) {\n  if (!currentResult) {\n    return cloneQueryResponse(newResult);\n  }\n\n  newResult.data.forEach((newFrame) => {\n    const currentFrame = currentResult.data.find((frame) => shouldCombine(frame, newFrame));\n    if (!currentFrame) {\n      currentResult.data.push(cloneDataFrame(newFrame));\n      return;\n    }\n    combineFrames(currentFrame, newFrame);\n  });\n\n  const mergedErrors = [...(currentResult.errors ?? []), ...(newResult.errors ?? [])];\n\n  // we make sure to have `.errors` as undefined, instead of empty-array\n  // when no errors.\n\n  if (mergedErrors.length > 0) {\n    currentResult.errors = mergedErrors;\n  }\n\n  // the `.error` attribute is obsolete now,\n  // but we have to maintain it, otherwise\n  // some grafana parts do not behave well.\n  // we just choose the old error, if it exists,\n  // otherwise the new error, if it exists.\n  const mergedError = currentResult.error ?? newResult.error;\n  if (mergedError != null) {\n    currentResult.error = mergedError;\n  }\n\n  const mergedTraceIds = [...(currentResult.traceIds ?? []), ...(newResult.traceIds ?? [])];\n  if (mergedTraceIds.length > 0) {\n    currentResult.traceIds = mergedTraceIds;\n  }\n\n  return currentResult;\n}\n\nfunction combineFrames(dest: DataFrame, source: DataFrame) {\n  const totalFields = dest.fields.length;\n  for (let i = 0; i < totalFields; i++) {\n    dest.fields[i].values = [].concat.apply(source.fields[i].values, dest.fields[i].values);\n    if (source.fields[i].nanos) {\n      const nanos: number[] = dest.fields[i].nanos?.slice() || [];\n      dest.fields[i].nanos = source.fields[i].nanos?.concat(nanos);\n    }\n  }\n  dest.length += source.length;\n  dest.meta = {\n    ...dest.meta,\n    stats: getCombinedMetadataStats(dest.meta?.stats ?? [], source.meta?.stats ?? []),\n  };\n}\n\nconst TOTAL_BYTES_STAT = 'Summary: total bytes processed';\n\nfunction getCombinedMetadataStats(\n  destStats: QueryResultMetaStat[],\n  sourceStats: QueryResultMetaStat[]\n): QueryResultMetaStat[] {\n  // in the current approach, we only handle a single stat\n  const destStat = destStats.find((s) => s.displayName === TOTAL_BYTES_STAT);\n  const sourceStat = sourceStats.find((s) => s.displayName === TOTAL_BYTES_STAT);\n\n  if (sourceStat != null && destStat != null) {\n    return [{ value: sourceStat.value + destStat.value, displayName: TOTAL_BYTES_STAT, unit: destStat.unit }];\n  }\n\n  // maybe one of them exist\n  const eitherStat = sourceStat ?? destStat;\n  if (eitherStat != null) {\n    return [eitherStat];\n  }\n\n  return [];\n}\n\n/**\n * Deep clones a DataQueryResponse\n */\nexport function cloneQueryResponse(response: DataQueryResponse): DataQueryResponse {\n  const newResponse = {\n    ...response,\n    data: response.data.map(cloneDataFrame),\n  };\n  return newResponse;\n}\n\nfunction cloneDataFrame(frame: DataQueryResponseData): DataQueryResponseData {\n  return {\n    ...frame,\n    fields: frame.fields.map((field: Field) => ({\n      ...field,\n      values: field.values,\n    })),\n  };\n}\n","import { CoreApp, DashboardLoadedEvent, DataQueryRequest, DataQueryResponse } from '@grafana/data';\nimport { reportInteraction, config } from '@grafana/runtime';\nimport { variableRegex } from 'app/features/variables/utils';\n\nimport { QueryEditorMode } from '../prometheus/querybuilder/shared/types';\n\nimport {\n  REF_ID_STARTER_ANNOTATION,\n  REF_ID_DATA_SAMPLES,\n  REF_ID_STARTER_LOG_ROW_CONTEXT,\n  REF_ID_STARTER_LOG_VOLUME,\n} from './datasource';\nimport pluginJson from './plugin.json';\nimport { getNormalizedLokiQuery, isLogsQuery, obfuscate, parseToNodeNamesArray } from './queryUtils';\nimport { LokiGroupedRequest, LokiQuery, LokiQueryType } from './types';\n\ntype LokiOnDashboardLoadedTrackingEvent = {\n  grafana_version?: string;\n  dashboard_id?: string;\n  org_id?: number;\n\n  /* The number of Loki queries present in the dashboard*/\n  queries_count: number;\n\n  /* The number of Loki logs queries present in the dashboard*/\n  logs_queries_count: number;\n\n  /* The number of Loki metric queries present in the dashboard*/\n  metric_queries_count: number;\n\n  /* The number of Loki instant queries present in the dashboard*/\n  instant_queries_count: number;\n\n  /* The number of Loki range queries present in the dashboard*/\n  range_queries_count: number;\n\n  /* The number of Loki queries created in builder mode present in the dashboard*/\n  builder_mode_queries_count: number;\n\n  /* The number of Loki queries created in code mode present in the dashboard*/\n  code_mode_queries_count: number;\n\n  /* The number of Loki queries with used template variables present in the dashboard*/\n  queries_with_template_variables_count: number;\n\n  /* The number of Loki queries with changed resolution present in the dashboard*/\n  queries_with_changed_resolution_count: number;\n\n  /* The number of Loki queries with changed line limit present in the dashboard*/\n  queries_with_changed_line_limit_count: number;\n\n  /* The number of Loki queries with changed legend present in the dashboard*/\n  queries_with_changed_legend_count: number;\n};\n\nexport type LokiTrackingSettings = {\n  predefinedOperations?: string;\n};\n\nexport const onDashboardLoadedHandler = ({\n  payload: { dashboardId, orgId, grafanaVersion, queries },\n}: DashboardLoadedEvent<LokiQuery>) => {\n  try {\n    // We only want to track visible Loki queries\n    const lokiQueries = queries[pluginJson.id]\n      .filter((query) => !query.hide)\n      .map((query) => getNormalizedLokiQuery(query));\n\n    if (!lokiQueries?.length) {\n      return;\n    }\n\n    const logsQueries = lokiQueries.filter((query) => isLogsQuery(query.expr));\n    const metricQueries = lokiQueries.filter((query) => !isLogsQuery(query.expr));\n    const instantQueries = lokiQueries.filter((query) => query.queryType === LokiQueryType.Instant);\n    const rangeQueries = lokiQueries.filter((query) => query.queryType === LokiQueryType.Range);\n    const builderModeQueries = lokiQueries.filter((query) => query.editorMode === QueryEditorMode.Builder);\n    const codeModeQueries = lokiQueries.filter((query) => query.editorMode === QueryEditorMode.Code);\n    const queriesWithTemplateVariables = lokiQueries.filter(isQueryWithTemplateVariables);\n    const queriesWithChangedResolution = lokiQueries.filter(isQueryWithChangedResolution);\n    const queriesWithChangedLineLimit = lokiQueries.filter(isQueryWithChangedLineLimit);\n    const queriesWithChangedLegend = lokiQueries.filter(isQueryWithChangedLegend);\n\n    const event: LokiOnDashboardLoadedTrackingEvent = {\n      grafana_version: grafanaVersion,\n      dashboard_id: dashboardId,\n      org_id: orgId,\n      queries_count: lokiQueries.length,\n      logs_queries_count: logsQueries.length,\n      metric_queries_count: metricQueries.length,\n      instant_queries_count: instantQueries.length,\n      range_queries_count: rangeQueries.length,\n      builder_mode_queries_count: builderModeQueries.length,\n      code_mode_queries_count: codeModeQueries.length,\n      queries_with_template_variables_count: queriesWithTemplateVariables.length,\n      queries_with_changed_resolution_count: queriesWithChangedResolution.length,\n      queries_with_changed_line_limit_count: queriesWithChangedLineLimit.length,\n      queries_with_changed_legend_count: queriesWithChangedLegend.length,\n    };\n\n    reportInteraction('grafana_loki_dashboard_loaded', event);\n  } catch (error) {\n    console.error('error in loki tracking handler', error);\n  }\n};\n\nconst isQueryWithTemplateVariables = (query: LokiQuery): boolean => {\n  return variableRegex.test(query.expr);\n};\n\nconst isQueryWithChangedResolution = (query: LokiQuery): boolean => {\n  if (!query.resolution) {\n    return false;\n  }\n  // 1 is the default resolution\n  return query.resolution !== 1;\n};\n\nconst isQueryWithChangedLineLimit = (query: LokiQuery): boolean => {\n  return query.maxLines !== null && query.maxLines !== undefined;\n};\n\nconst isQueryWithChangedLegend = (query: LokiQuery): boolean => {\n  if (!query.legendFormat) {\n    return false;\n  }\n  return query.legendFormat !== '';\n};\n\nconst shouldNotReportBasedOnRefId = (refId: string): boolean => {\n  const starters = [REF_ID_STARTER_ANNOTATION, REF_ID_STARTER_LOG_ROW_CONTEXT, REF_ID_STARTER_LOG_VOLUME];\n\n  if (refId === REF_ID_DATA_SAMPLES || starters.some((starter) => refId.startsWith(starter))) {\n    return true;\n  }\n  return false;\n};\n\nconst calculateTotalBytes = (response: DataQueryResponse): number => {\n  let totalBytes = 0;\n  for (const frame of response.data) {\n    const byteKey = frame.meta?.custom?.lokiQueryStatKey;\n    if (byteKey) {\n      totalBytes +=\n        frame.meta?.stats?.find((stat: { displayName: string }) => stat.displayName === byteKey)?.value ?? 0;\n    }\n  }\n  return totalBytes;\n};\n\nexport function trackQuery(\n  response: DataQueryResponse,\n  request: DataQueryRequest<LokiQuery>,\n  startTime: Date,\n  trackingSettings: LokiTrackingSettings = {},\n  extraPayload: Record<string, unknown> = {}\n): void {\n  // We only want to track usage for these specific apps\n  const { app, targets: queries } = request;\n\n  if (app === CoreApp.Dashboard || app === CoreApp.PanelViewer) {\n    return;\n  }\n\n  let totalBytes = calculateTotalBytes(response);\n\n  for (const query of queries) {\n    if (shouldNotReportBasedOnRefId(query.refId)) {\n      return;\n    }\n\n    reportInteraction('grafana_loki_query_executed', {\n      app,\n      grafana_version: config.buildInfo.version,\n      editor_mode: query.editorMode,\n      has_data: response.data.some((frame) => frame.length > 0),\n      has_error: response.error !== undefined,\n      legend: query.legendFormat,\n      line_limit: query.maxLines,\n      parsed_query: parseToNodeNamesArray(query.expr).join(','),\n      obfuscated_query: obfuscate(query.expr),\n      query_type: isLogsQuery(query.expr) ? 'logs' : 'metric',\n      query_vector_type: query.queryType,\n      resolution: query.resolution,\n      simultaneously_executed_query_count: queries.filter((query) => !query.hide).length,\n      simultaneously_hidden_query_count: queries.filter((query) => query.hide).length,\n      time_range_from: request?.range?.from?.toISOString(),\n      time_range_to: request?.range?.to?.toISOString(),\n      time_taken: Date.now() - startTime.getTime(),\n      bytes_processed: totalBytes,\n      is_split: false,\n      predefined_operations_applied: trackingSettings.predefinedOperations\n        ? query.expr.includes(trackingSettings.predefinedOperations)\n        : 'n/a',\n      ...extraPayload,\n    });\n  }\n}\n\nexport function trackGroupedQueries(\n  response: DataQueryResponse,\n  groupedRequests: LokiGroupedRequest[],\n  originalRequest: DataQueryRequest<LokiQuery>,\n  startTime: Date,\n  trackingSettings: LokiTrackingSettings = {}\n): void {\n  const splittingPayload = {\n    split_query_group_count: groupedRequests.length,\n    split_query_largest_partition_size: Math.max(...groupedRequests.map(({ partition }) => partition.length)),\n    split_query_total_request_count: groupedRequests.reduce((total, { partition }) => total + partition.length, 0),\n    is_split: true,\n    simultaneously_executed_query_count: originalRequest.targets.filter((query) => !query.hide).length,\n    simultaneously_hidden_query_count: originalRequest.targets.filter((query) => query.hide).length,\n  };\n\n  for (const group of groupedRequests) {\n    const split_query_partition_size = group.partition.length;\n    trackQuery(response, group.request, startTime, trackingSettings, {\n      ...splittingPayload,\n      split_query_partition_size,\n    });\n  }\n}\n","// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     public/app/plugins/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     PluginTSTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nimport * as common from '@grafana/schema';\n\nexport enum QueryEditorMode {\n  Builder = 'builder',\n  Code = 'code',\n}\n\nexport enum LokiQueryType {\n  Instant = 'instant',\n  Range = 'range',\n  Stream = 'stream',\n}\n\nexport enum SupportingQueryType {\n  DataSample = 'dataSample',\n  LogsSample = 'logsSample',\n  LogsVolume = 'logsVolume',\n}\n\nexport enum LokiQueryDirection {\n  Backward = 'backward',\n  Forward = 'forward',\n}\n\nexport interface Loki extends common.DataQuery {\n  editorMode?: QueryEditorMode;\n  /**\n   * The LogQL query.\n   */\n  expr: string;\n  /**\n   * @deprecated, now use queryType.\n   */\n  instant?: boolean;\n  /**\n   * Used to override the name of the series.\n   */\n  legendFormat?: string;\n  /**\n   * Used to limit the number of log rows returned.\n   */\n  maxLines?: number;\n  /**\n   * @deprecated, now use queryType.\n   */\n  range?: boolean;\n  /**\n   * @deprecated, now use step.\n   */\n  resolution?: number;\n  /**\n   * Used to set step value for range queries.\n   */\n  step?: string;\n}\n","import { DataQuery, DataQueryRequest, DataSourceJsonData, TimeRange } from '@grafana/data';\n\nimport { Loki as LokiQueryFromSchema, LokiQueryType, SupportingQueryType, LokiQueryDirection } from './dataquery.gen';\n\nexport { LokiQueryDirection, LokiQueryType, SupportingQueryType };\n\nexport enum LokiResultType {\n  Stream = 'streams',\n  Vector = 'vector',\n  Matrix = 'matrix',\n}\n\nexport interface LokiQuery extends LokiQueryFromSchema {\n  direction?: LokiQueryDirection;\n  /** Used only to identify supporting queries, e.g. logs volume, logs sample and data sample */\n  supportingQueryType?: SupportingQueryType;\n  // CUE autogenerates `queryType` as `?string`, as that's how it is defined\n  // in the parent-interface (in DataQuery).\n  // the temporary fix (until this gets improved in the codegen), is to\n  // override it here\n  queryType?: LokiQueryType;\n\n  /**\n   * This is a property for the experimental query splitting feature.\n   * @experimental\n   */\n  splitDuration?: string;\n}\n\nexport interface LokiOptions extends DataSourceJsonData {\n  maxLines?: string;\n  derivedFields?: DerivedFieldConfig[];\n  alertmanager?: string;\n  keepCookies?: string[];\n  predefinedOperations?: string;\n}\n\nexport interface LokiStreamResult {\n  stream: Record<string, string>;\n  values: Array<[string, string]>;\n}\n\nexport interface LokiTailResponse {\n  streams: LokiStreamResult[];\n  dropped_entries?: Array<{\n    labels: Record<string, string>;\n    timestamp: string;\n  }> | null;\n}\n\nexport type DerivedFieldConfig = {\n  matcherRegex: string;\n  name: string;\n  url?: string;\n  urlDisplayLabel?: string;\n  datasourceUid?: string;\n};\n\nexport enum LokiVariableQueryType {\n  LabelNames,\n  LabelValues,\n}\n\nexport interface LokiVariableQuery extends DataQuery {\n  type: LokiVariableQueryType;\n  label?: string;\n  stream?: string;\n}\n\nexport interface QueryStats {\n  streams: number;\n  chunks: number;\n  bytes: number;\n  entries: number;\n  // The error message displayed in the UI when we cant estimate the size of the query.\n  message?: string;\n}\n\nexport interface ContextFilter {\n  enabled: boolean;\n  label: string;\n  value: string;\n  fromParser: boolean;\n  description?: string;\n}\n\nexport interface ParserAndLabelKeysResult {\n  extractedLabelKeys: string[];\n  hasJSON: boolean;\n  hasLogfmt: boolean;\n  hasPack: boolean;\n  unwrapLabelKeys: string[];\n}\n\nexport type LokiGroupedRequest = { request: DataQueryRequest<LokiQuery>; partition: TimeRange[] };\n","import { LRParser } from '@lezer/lr';\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst Json$1 = 1,\n  Logfmt$1 = 2,\n  Unpack$1 = 3,\n  Pattern$1 = 4,\n  Regexp$1 = 5,\n  Unwrap$1 = 6,\n  Ip$1 = 7,\n  LabelFormat$1 = 8,\n  LineFormat$1 = 9,\n  LabelReplace$1 = 10,\n  Vector$1 = 11,\n  Offset$1 = 12,\n  Bool$1 = 13,\n  On$1 = 14,\n  Ignoring$1 = 15,\n  GroupLeft$1 = 16,\n  GroupRight$1 = 17,\n  Decolorize$1 = 18,\n  Drop$1 = 19,\n  Keep$1 = 20,\n  By$1 = 21,\n  Without$1 = 22,\n  And$1 = 23,\n  Or$1 = 24,\n  Unless$1 = 25,\n  Sum$1 = 26,\n  Avg$1 = 27,\n  Count$1 = 28,\n  Max$1 = 29,\n  Min$1 = 30,\n  Stddev$1 = 31,\n  Stdvar$1 = 32,\n  Bottomk$1 = 33,\n  Topk$1 = 34,\n  MetricExpr$1 = 90;\n\nconst keywordTokens = {\n  json: Json$1,\n  logfmt: Logfmt$1,\n  unpack: Unpack$1,\n  pattern: Pattern$1,\n  regexp: Regexp$1,\n  ip: Ip$1,\n  label_format: LabelFormat$1,\n  line_format: LineFormat$1,\n  label_replace: LabelReplace$1,\n  vector: Vector$1,\n  offset: Offset$1,\n  bool: Bool$1,\n  on: On$1,\n  ignoring: Ignoring$1,\n  group_left: GroupLeft$1,\n  group_right: GroupRight$1,\n  unwrap: Unwrap$1,\n  decolorize: Decolorize$1,\n  drop: Drop$1,\n  keep: Keep$1,\n};\n\nconst specializeIdentifier = (value) => {\n  return keywordTokens[value.toLowerCase()] || -1;\n};\n\nconst contextualKeywordTokens = {\n  by: By$1,\n  without: Without$1,\n  and: And$1,\n  or: Or$1,\n  unless: Unless$1,\n  sum: Sum$1,\n  avg: Avg$1,\n  count: Count$1,\n  max: Max$1,\n  min: Min$1,\n  stddev: Stddev$1,\n  stdvar: Stdvar$1,\n  bottomk: Bottomk$1,\n  topk: Topk$1,\n};\n\nconst extendIdentifier = (value) => {\n  return contextualKeywordTokens[value.toLowerCase()] || -1;\n};\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst spec_Identifier = {__proto__:null,count_over_time:289, rate:291, rate_counter:293, bytes_over_time:295, bytes_rate:297, avg_over_time:299, sum_over_time:301, min_over_time:303, max_over_time:305, stddev_over_time:307, stdvar_over_time:309, quantile_over_time:311, first_over_time:313, last_over_time:315, absent_over_time:317, bytes:323, duration:325, duration_seconds:327};\nconst parser = LRParser.deserialize({\n  version: 14,\n  states: \"DYOYQPOOO#]QPO'#DTO$lQPO'#DSOYQPO'#DSOOQO'#E['#E[O$yQPO'#EZOOQO'#Ew'#EwO%OQPO'#EvQ%ZQPOOOOQO'#FV'#FVO&[QPO'#FVO&aQPO'#FWO&fQPO'#FXOOQO'#EY'#EYOOQO'#DR'#DROOQO'#E]'#E]OOQO'#E^'#E^OOQO'#E_'#E_OOQO'#E`'#E`OOQO'#Ea'#EaOOQO'#Eb'#EbOOQO'#Ec'#EcOOQO'#Ed'#EdOOQO'#Ee'#EeOOQO'#Ef'#EfOOQO'#Eg'#EgOOQO'#Eh'#EhOOQO'#Ei'#EiOOQO'#Ej'#EjOOQO'#Ek'#EkO&kQPO'#DVOOQO'#DU'#DUO&yQPO,59oOOQO'#Db'#DbO'RQPO'#DaOOQO'#D`'#D`O'ZQPO'#D_O(tQPO'#D_OOQO'#D^'#D^O*vQPO,59nO,UQPO,59nO,]QPO,5:tO,dQPO,5:uO,oQPO'#EtO.tQPO,5;bO.{QPO,5;bO/QQPO,5;dO/QQPO,5;dO/QQPO,5;dO/QQPO,5;dO/QQPO,5;dO/QQPO,5;dOOQO,5;q,5;qOYQPO,5;rO1^QPO,5;sO1cQPO,59qO#]QPO,59pOOQO1G/Z1G/ZOOQO'#De'#DeOOQO,59{,59{O1hQPO,59{OOQO,59z,59zO1mQPO'#DVO2[QPO'#DgO3{QPO'#DjO5iQPO'#DjOOQO'#Dj'#DjOOQO'#Dq'#DqOOQO'#Do'#DoO)dQPO'#DoO5nQPO,59yO7XQPO'#D}O7^QPO'#EOOOQO'#ER'#ERO7cQPO'#ESO7hQPO'#EVOOQO,59y,59yOOQO,59x,59xOOQO1G/Y1G/YOOQO1G0`1G0`O7mQPO'#ElO,gQPO'#ElO8RQPO1G0aO8WQPO1G0aO8]QPO,5;`O8eQPO1G0|O9pQPO1G0|O9wQPO1G0|O:OQPO'#EzO<WQPO'#EyO<bQPO'#EyOYQPO1G1OOYQPO1G1OOYQPO1G1OOYQPO1G1OOYQPO1G1OOYQPO1G1OO<lQPO1G1^O<sQPO1G1_OOQO1G/]1G/]OOQO1G/[1G/[O<xQPO1G/gO<}QPO,59qO=TQPO,5:^OOQO'#Dh'#DhO=`QPO,5:RO?PQPO'#DmOOQO'#Dl'#DlO@mQPO,5:YOBWQPO,5:VOOQO,5:U,5:UOCqQPO,5:ZO)dQPO,5:ZO)dQPO,5:ZOOQO,5:i,5:iODPQPO'#EQOOQO'#EP'#EPODUQPO,5:jOEoQPO'#EUOOQO'#EU'#EUOOQO'#ET'#ETOG`QPO,5:nOHyQPO'#EXOOQO'#EX'#EXOOQO'#EW'#EWOJjQPO,5:qOLTQPO'#D_O7mQPO,5;WOL[QPO'#EmOLaQPO,5;WOLzQPO,5;WOMUQPO,5;WOM]QPO,5;WOMbQPO7+%{O,gQPO7+%{OOQO'#Eu'#EuONrQPO1G0zOOQO1G0z1G0zONzQPO7+&hOYQPO7+&hO!![QPO7+&hO!!cQPO7+&hO!!jQQO'#E{OOQO,5;f,5;fO!$rQPO,5;eO!$yQPO,5;eO!&[QPO7+&jO!&cQPO7+&jOOQO7+&j7+&jO!&pQPO7+&jO!&wQPO7+&jO!'|QPO7+&jO!(^QPO7+&xOOQO7+&y7+&yO!(cQPO7+%RO!(hQPO1G/vOOQO1G/x1G/xOOQO1G0P1G0POOQO1G0R1G0ROOQO,5:S,5:SO!(mQPO1G/tO!*WQPO,5:XO!*]QPO,5:WOOQO1G/u1G/uO!*bQPO1G/uO!+{QPO,5:lO7^QPO,5:kO7cQPO,5:oO7hQPO,5:rO!,TQPO,5;ZOLaQPO1G0rO!,cQPO1G0rO!,kQPO,5;XO)dQPO,5;ZO!,pQPO1G0rO!,wQPO'#EnO!,|QPO1G0rO!,pQPO1G0rO!-UQPO1G0rO!-]QPO1G0rO7|QPO1G0rOOQO1G0r1G0rOOQO<<Ig<<IgO!-hQPO<<IgO!-mQPO,5;aOOQO7+&f7+&fOOQO<<JS<<JSO!-rQPO<<JSOYQPO<<JSOOQO'#E}'#E}O!-yQPO,5;gOOQO'#E|'#E|OOQO,5;g,5;gOOQO1G1P1G1PO!.RQPO1G1PO!0UQPO<<JdOOQO<<Hm<<HmO!0ZQPO7+%bOOQO1G/s1G/sOOQO1G/r1G/rOOQO1G0W1G0WOOQO1G0V1G0VOOQO1G0Z1G0ZOOQO1G0^1G0^OOQO'#Ep'#EpOOQO1G0u1G0uO!0`QPO1G0uOOQO'#Eq'#EqOOQO'#Er'#ErOOQO'#Es'#EsOOQO7+&^7+&^OOQO1G0s1G0sO!0eQPO1G0uO!0yQPO7+&^OOQO,5;Y,5;YO!1RQPO7+&^O7|QPO7+&^O!1YQPO7+&^O!1eQPOAN?ROOQO1G0{1G0{O!2uQPOAN?nO!4VQPOAN?nO!4^QQO1G1ROOQO1G1R1G1ROOQO7+&k7+&kO!4fQPOAN@OO!4kQPO<<H|O!4pQPO7+&aO!4uQPO<<IxO!4}QPO<<IxO!5VQPO'#EoO!5[QPO<<IxOOQOG24mG24mOOQOG25YG25YOOQO1G1S1G1SOOQO7+&m7+&mO!5dQPOG25jOOQOAN>hAN>hO!5iQPO<<I{OOQOAN?dAN?dO!5nQPOAN?dO!5vQPOLD+UOOQOAN?gAN?gOOQO,5:j,5:jO!5{QPO!$'NpO!6QQPO!)9D[O!6VQPO!.K9vOOQO!4//b!4//bO7^QPO'#EOO!6[QPO'#D_O!7SQPO,59nO!7^QPO'#DSOYQPO1G1OOYQPO1G1OOYQPO1G1OOYQPO1G1OOYQPO1G1OOYQPO1G1OO/QQPO,5;dO/QQPO,5;dO/QQPO,5;dO/QQPO,5;dO/QQPO,5;dO/QQPO,5;dO!8iQPO7+&jO!8pQPO7+&jO!8}QPO7+&jO!:VQPO7+&jO!:^QPO7+&jO!9UQPO'#Ex\",\n  stateData: \"!:k~O$OOSsOS~OYZOZ[OjUOkUOlUOmUOnUOoUOpUOqUOrUO!pXO#sYO#tYO$PPO$SRO$U_O$V`O$WaO$XbO$YcO$ZdO$[eO$]fO$^gO$_hO$`iO$ajO$bkO$clO$dmO~OznO~O}qO!PqO!VqO!WqOgvXhvXivX!gvX!ivX!jvX!kvX!lvX#svX#tvX#uvX#vvX#wvX#xvX~O!YuO#|vX$TvX~P#bO$SzO~Oe{Of{O$S|O~Og!POh!OOi!PO}!TO!g!TO!i!TO!j!TO!k!TO!l!TO#s!QO#t!QO#u!RO#v!RO#w!RO#x!SO~O!p!UO~O$S!VO~O$S!WO~O{!XO}!XO!O!XO!P!XO~O$Q!YO$R!ZO~OV![O|!]O~O}qO!PqO!VqO!WqOg!RXh!RXi!RX!Y!RX!g!RX!i!RX!j!RX!k!RX!l!RX#s!RX#t!RX#u!RX#v!RX#w!RX#x!RX#|!RX$T!RX$e!RX$Q!RX~OP!bOQ!aOR!dOS!cOT!cOW!jOX!iOb!kOc!lOd!mOz!`O$S!gO~O}qO!PqO!VqO!WqOgvahvaiva!gva!iva!jva!kva!lva#sva#tva#uva#vva#wva#xva~O!YuO#|va$Tva~P)lOguXhuXiuX}uX!guX!iuX!juX!kuX!luX#suX#tuX#uuX#vuX#wuX#xuX~O$T!pO~P+TO$T!qO~P+TO!p!uO$PPO$S!sO~O$S!vO~OYZOZ[OjUOkUOlUOmUOnUOoUOpUOqUOrUO#sYO#tYO$PPO$SRO$U_O$V`O$WaO$XbO$YcO$ZdO$[eO$]fO$^gO$_hO$`iO$ajO$bkO$clO$dmO~O!p!xO~P,tO$S!yO~O]!|O^!zO_!zOY#mPZ#mPj#mPk#mPl#mPm#mPn#mPo#mPp#mPq#mPr#mP!p#mP#s#mP#t#mP$P#mP$S#mP$U#mP$V#mP$W#mP$X#mP$Y#mP$Z#mP$[#mP$]#mP$^#mP$_#mP$`#mP$a#mP$b#mP$c#mP$d#mP~O!p#UO~O|#VO~O$S#XO~O{#YO}#YO!O!XO!P!XO!g#ZO!i#ZO!j#ZO!k#ZO!l#ZO~Oz#^O!]#[Og!ZXh!ZXi!ZX}!ZX!P!ZX!V!ZX!W!ZX!Y!ZX!g!ZX!i!ZX!j!ZX!k!ZX!l!ZX#s!ZX#t!ZX#u!ZX#v!ZX#w!ZX#x!ZX#|!ZX$T!ZX$e!ZX$Q!ZX~Oz#^Og!^Xh!^Xi!^X}!^X!P!^X!V!^X!W!^X!Y!^X!g!^X!i!^X!j!^X!k!^X!l!^X#s!^X#t!^X#u!^X#v!^X#w!^X#x!^X#|!^X$T!^X$e!^X$Q!^X~O|#bO~Og#dOh#eO$Q#dOi!Ra}!Ra!P!Ra!V!Ra!W!Ra!Y!Ra!g!Ra!i!Ra!j!Ra!k!Ra!l!Ra#s!Ra#t!Ra#u!Ra#v!Ra#w!Ra#x!Ra#|!Ra$T!Ra$e!Ra~O|#fO~Oz#gO~Oz#jO~Oz#nO~O}qO!PqO!VqO!WqO!Y#rO$e#tO~O$T#yO~O$Q#zO~Oz#{O$T#}O~O$T$OO~P+TOg#yXh#yXi#yX}#yX!g#yX!i#yX!j#yX!k#yX!l#yX#s#yX#t#yX#u#yX#v#yX#w#yX#x#yX$T#yX~O$Q$PO~P8lO!p$RO~P,tO$S$SO~OY#mXZ#mXj#mXk#mXl#mXm#mXn#mXo#mXp#mXq#mXr#mX!p#mX#s#mX#t#mX$P#mX$S#mX$U#mX$V#mX$W#mX$X#mX$Y#mX$Z#mX$[#mX$]#mX$^#mX$_#mX$`#mX$a#mX$b#mX$c#mX$d#mX~O`$UOa$UO~P:TO^!zO_!zO~P:TO$Q$^O~P+TO$T$_O~O|$`O~OV$aO|#VO!h$bO!n$cO!p$dO~Oz#^O!]$eOg!Zah!Zai!Za}!Za!P!Za!V!Za!W!Za!Y!Za!g!Za!i!Za!j!Za!k!Za!l!Za#s!Za#t!Za#u!Za#v!Za#w!Za#x!Za#|!Za$T!Za$e!Za$Q!Za~O{$gOg!aXh!aXi!aX}!aX!P!aX!V!aX!W!aX!Y!aX!g!aX!i!aX!j!aX!k!aX!l!aX#s!aX#t!aX#u!aX#v!aX#w!aX#x!aX#|!aX$Q!aX$T!aX$e!aX~O$Q$hOg!bah!bai!ba}!ba!P!ba!V!ba!W!ba!Y!ba!g!ba!i!ba!j!ba!k!ba!l!ba#s!ba#t!ba#u!ba#v!ba#w!ba#x!ba#|!ba$T!ba$e!ba~O$Q$hOg!_ah!_ai!_a}!_a!P!_a!V!_a!W!_a!Y!_a!g!_a!i!_a!j!_a!k!_a!l!_a#s!_a#t!_a#u!_a#v!_a#w!_a#x!_a#|!_a$T!_a$e!_a~Og#dOh#eO$Q#dO$T$iO~O{$kO~O$Q$lOg!rah!rai!ra}!ra!P!ra!V!ra!W!ra!Y!ra!g!ra!i!ra!j!ra!k!ra!l!ra#s!ra#t!ra#u!ra#v!ra#w!ra#x!ra#|!ra$T!ra$e!ra~O{!XO}!XO!O!XO!P!XOg!xXh!xXi!xX!V!xX!W!xX!Y!xX!g!xX!i!xX!j!xX!k!xX!l!xX#s!xX#t!xX#u!xX#v!xX#w!xX#x!xX#|!xX$Q!xX$T!xX$e!xX~O$Q$mOg!vah!vai!va}!va!P!va!V!va!W!va!Y!va!g!va!i!va!j!va!k!va!l!va#s!va#t!va#u!va#v!va#w!va#x!va#|!va$T!va$e!va~O{!XO}!XO!O!XO!P!XOg!{Xh!{Xi!{X!V!{X!W!{X!Y!{X!g!{X!i!{X!j!{X!k!{X!l!{X#s!{X#t!{X#u!{X#v!{X#w!{X#x!{X#|!{X$Q!{X$T!{X$e!{X~O$Q$nOg!yah!yai!ya}!ya!P!ya!V!ya!W!ya!Y!ya!g!ya!i!ya!j!ya!k!ya!l!ya#s!ya#t!ya#u!ya#v!ya#w!ya#x!ya#|!ya$T!ya$e!ya~OU$oO~P(tO!h$rO~O!Y$sO$e#tO~O}qO!PqO!VqO!WqO!Y#rO~O[$uO$T#`a~PLiO$T$zO~P7mO$T${O~Oe{Of{Og!}qh!}qi!}q}!}q!g!}q!i!}q!j!}q!k!}q!l!}q#s!}q#t!}q#u!}q#v!}q#w!}q#x!}q#|!}q$T!}q$Q!}q~O$Q%OO$T%PO~Oe{Of{Og#jqh#jqi#jq}#jq!g#jq!i#jq!j#jq!k#jq!l#jq#s#jq#t#jq#u#jq#v#jq#w#jq#x#jq#|#jq$T#jq$Q#jq~O$T%QO~P+TO$Q%SO~P8lO#r%TO$T%WO~OY#maZ#maj#mak#mal#mam#man#mao#map#maq#mar#ma!p#ma#s#ma#t#ma$P#ma$U#ma$V#ma$W#ma$X#ma$Y#ma$Z#ma$[#ma$]#ma$^#ma$_#ma$`#ma$a#ma$b#ma$c#ma$d#ma~O$S$SO~P!!rO`%YOa%YO$S#ma~P!!rOg!POi!PO}!TO!g!TO!i!TO!j!TO!k!TO!l!TO#s!QO#t!QO#u#lq#v#lq#w#lq#x#lq#|#lq$T#lq~Oh#lq~P!%WOg#lqh#lqi#lq~P!%^Oh!OO~P!%WO#|#lq$T#lq~P%ZOg#lqh#lqi#lq}#lq!g#lq!i#lq!j#lq!k#lq!l#lq#u#lq#v#lq#w#lq#x#lq~O#s!QO#t!QO#|#lq$T#lq~P!'RO|%ZO~O$T%[O~O$S%]O~O$Q$hOg!bih!bii!bi}!bi!P!bi!V!bi!W!bi!Y!bi!g!bi!i!bi!j!bi!k!bi!l!bi#s!bi#t!bi#u!bi#v!bi#w!bi#x!bi#|!bi$T!bi$e!bi~O|%^O~Oz#^O~Og#dO$Q#dOh!cii!ci}!ci!P!ci!V!ci!W!ci!Y!ci!g!ci!i!ci!j!ci!k!ci!l!ci#s!ci#t!ci#u!ci#v!ci#w!ci#x!ci#|!ci$T!ci$e!ci~Oz%`O|%`O~Oz%eO$g%gO$h%hO$i%iO~O[$uO$T#`i~O$f%kO~O$T#`i~PLiO!h%nO~O!Y$sO$T#`i~O$T%pO~P7mO!Y$sO$T%pO$e#tO~O$T%rO~Oz%sO~O$T%tO~P+TO$Q%vO$T%wO~O$S$SOY#miZ#mij#mik#mil#mim#min#mio#mip#miq#mir#mi!p#mi#s#mi#t#mi$P#mi$U#mi$V#mi$W#mi$X#mi$Y#mi$Z#mi$[#mi$]#mi$^#mi$_#mi$`#mi$a#mi$b#mi$c#mi$d#mi~O$Q%yO~O|%zO~O$S%{O~Og#dOh#eO$Q#dO!Y#ci$e#ci$T#ci~O!Y$sO$T#`q~O$T#`q~PLiO[$uO!Y&OO$T#`q~Oe{Of{Og!}!Rh!}!Ri!}!R}!}!R!g!}!R!i!}!R!j!}!R!k!}!R!l!}!R#s!}!R#t!}!R#u!}!R#v!}!R#w!}!R#x!}!R#|!}!R$T!}!R$Q!}!R~Oe{Of{Og#j!Rh#j!Ri#j!R}#j!R!g#j!R!i#j!R!j#j!R!k#j!R!l#j!R#s#j!R#t#j!R#u#j!R#v#j!R#w#j!R#x#j!R#|#j!R$T#j!R$Q#j!R~O$T&RO~P+TO#r%TO$T&TO~O|&UO~O$T&VO~Oz&WO~O!Y$sO$T#`y~O[$uO$T#`y~OU$oO~O!Y&OO$T#`y~O$Q&ZO~O$T&[O~O!Y$sO$T#`!R~O|&^O~O$Q&_O~O|&`O~O$T&aO~OP!bOQ!aOR!dOS!cOT!cOW&bOX!iOb!kOc!lOd!mOz!`O$S!gO~O!Y&cO$Qva~P)lO!Y&cO$QvX~P#bOg&mOi&mO}&qO!g&qO!i&qO!j&qO!k&qO!l&qO#s&nO#t&nO#u#lq#v#lq#w#lq#x#lq$Q#lq~Oh#lq~P!7hOg#lqh#lqi#lq~P!7nOh&lO~P!7hOg&mOh&lOi&mO}&qO!g&qO!i&qO!j&qO!k&qO!l&qO#s&nO#t&nO#u&oO#v&oO#w&oO#x&pO~O$Q#lq~P!9UO#s&nO#t&nO$Q#lq~P!'RO\",\n  goto: \"0e#|PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP#}$|%e&T&WPPPPPP&o'R'c'q(SPP(cP(f(kP(f(f(n(w(f)P)b)b)kPPPPPP)kP)bP(f(f)t)z(f(f*R*U(f*[*_*e+W+m,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,i,r-V-c-{.O.O.O.R.b+W.e+W.z/p0R0[0_PPPPPPP+W+W+W[WOR|!y$P%SQ$W!}Q$X#OS$Y#P&hQ$Z#QQ$[#RQ$]#SQ&r&fQ&s&gQ&t&iQ&u&jQ&v&kR&w!Vt^O|!V!y!}#O#P#Q#R#S$P%S&f&g&h&i&j&kRxRjQOR|!V!y!}#O#P#Q#R#S$P%SS!rz#zQ#w!s]&e&f&g&h&i&j&kRpPQoP^!fu!g#d#e#r$s&cQ#W!YS#k!l$mT#o!m$nQwQQ#s!rQ$t#vQ$x#wQ%o$wR&d&e[vQ!r#v#w$w&e]!ow#s$t$x%o&ditQw!r#s#v#w$t$w$x%o&d&ehsQw!r#s#v#w$t$w$x%o&d&eR!_tkrQtw!r#s#v#w$t$w$x%o&d&eR!^rV!nu#r&cR#]!aQ#`!aQ#a!bR$f#]U#_!a!b#]R%_$hU!hu#r&cQ#c!gQ$i#dQ$j#eR%l$s_!fu!g#d#e#r$s&c_!eu!g#d#e#r$s&cQ#i!jR&]&bS#h!j&bR%a$lR#m!lQ#l!lR%b$mR#q!mQ#p!mR%c$nj^O!}#O#P#Q#R#S&f&g&h&i&j&kQyRQ!w|Q#T!VQ$Q!yQ%R$PR%u%Sw]OR|!V!y!}#O#P#Q#R#S$P%S&f&g&h&i&j&kwTOR|!V!y!}#O#P#Q#R#S$P%S&f&g&h&i&j&kwSOR|!V!y!}#O#P#Q#R#S$P%S&f&g&h&i&j&kQ!tzQ#x!sR$}#zS#v!r#wW$q#s#u$x$yQ%j$pQ%q$zR%}%pQ$w#vQ%j$qQ&P%qR&X%}Q#u!rS$p#s$xQ$v#vQ$y#wS%m$t$wS%|%o%qR&Y&PR%f$oR%d$oQ}VQ$|#yQ%Q$OQ&Q%rR&R%tR#|!vwVOR|!V!y!}#O#P#Q#R#S$P%S&f&g&h&i&j&kQ!}!OQ#O!PQ#P!QQ#Q!RQ#R!SQ#S!TQ&f&lQ&g&mQ&h&nQ&i&oQ&j&pR&k&qh!{!O!P!Q!R!S!T&l&m&n&o&p&qR$V!|Q$T!zQ%X$UR%x%YR%U$SQ%V$SR&S%v\",\n  nodeNames: \"⚠ Json Logfmt Unpack Pattern Regexp Unwrap Ip LabelFormat LineFormat LabelReplace Vector Offset Bool On Ignoring GroupLeft GroupRight Decolorize Drop Keep By Without And Or Unless Sum Avg Count Max Min Stddev Stdvar Bottomk Topk LineComment LogQL Expr LogExpr Selector Matchers Matcher Identifier Eq String Neq Re Nre PipelineExpr PipelineStage LineFilters LineFilter Filter PipeExact PipeMatch FilterOp Pipe LogfmtParser LogfmtParserFlags ParserFlag LabelParser JsonExpressionParser LabelExtractionExpressionList LabelExtractionExpression LogfmtExpressionParser LabelFilter IpLabelFilter UnitFilter DurationFilter Gtr Duration Gte Lss Lte Eql BytesFilter Bytes NumberFilter Number LineFormatExpr LabelFormatExpr LabelsFormat LabelFormatMatcher DecolorizeExpr DropLabelsExpr DropLabels DropLabel KeepLabelsExpr KeepLabels KeepLabel MetricExpr RangeAggregationExpr RangeOp CountOverTime Rate RateCounter BytesOverTime BytesRate AvgOverTime SumOverTime MinOverTime MaxOverTime StddevOverTime StdvarOverTime QuantileOverTime FirstOverTime LastOverTime AbsentOverTime LogRangeExpr Range OffsetExpr UnwrapExpr ConvOp BytesConv DurationConv DurationSecondsConv Grouping Labels VectorAggregationExpr VectorOp BinOpExpr BinOpModifier OnOrIgnoringModifier GroupingLabels GroupingLabelList GroupingLabel LabelName Add Sub Mul Div Mod Pow LiteralExpr LabelReplaceExpr VectorExpr\",\n  maxTerm: 163,\n  skippedNodes: [0,35],\n  repeatNodeCount: 0,\n  tokenData: \"5b~RvX^#ipq#iqr$^rs$qst%cuv%nxy%syz%xz{%}{|&S|}&X}!O&^!O!P(l!P!Q)l!Q!R)q!R![+X![!]2X!^!_2m!_!`2z!`!a3a!c!}3n!}#O4U#P#Q4Z#Q#R4`#R#S3n#S#T4e#T#o3n#o#p4q#p#q4v#q#r5]#y#z#i$f$g#i#BY#BZ#i$IS$I_#i$I|$JO#i$JT$JU#i$KV$KW#i&FU&FV#i~#nY$O~X^#ipq#i#y#z#i$f$g#i#BY#BZ#i$IS$I_#i$I|$JO#i$JT$JU#i$KV$KW#i&FU&FV#i~$aQ!_!`$g#r#s$l~$lO}~~$qO!P~~$tUOY$qZr$qrs%Ws#O$q#O#P%]#P~$q~%]O|~~%`PO~$q~%hQs~OY%cZ~%c~%sO#w~~%xO$S~~%}O$T~~&SO#u~~&XO#s~~&^O$Q~~&cP#t~}!O&f~&iQ#_#`&o#g#h'|~&rP#X#Y&u~&xP#X#Y&{~'OP#d#e'R~'UP}!O'X~'[P#X#Y'_~'bP#a#b'e~'hP#d#e'k~'nP#h#i'q~'tP#m#n'w~'|O!]~~(PP#h#i(S~(VP#f#g(Y~(]P#]#^(`~(cP#V#W(f~(iP#h#i'w~(oP!Q![(r~(wR!p~!Q![(r!g!h)Q#X#Y)Q~)TR{|)^}!O)^!Q![)d~)aP!Q![)d~)iP!p~!Q![)d~)qO#v~~)ve!p~!O!P(r!Q![+X!g!h,l!i!j-Z!m!n-Z!o!p-Z!r!s-Z!v!w-Z#U#V-O#W#X-d#X#Y/f#Z#[/x#[#]-{#_#`/x#a#b0R#d#e/x#g#h/T#h#i/x#k#l0d#l#m1m#m#n1O~+^d!p~!O!P(r!Q![+X!g!h,l!i!j-Z!m!n-Z!o!p-Z!r!s-Z!v!w-Z#U#V-O#W#X-d#X#Y/f#Z#[/x#[#]-{#_#`/x#a#b0R#d#e/x#g#h/T#h#i/x#k#l0d#m#n1O~,oT{|)^}!O)^!Q![)d!d!e-O#]#^-T~-TO!n~~-WP#U#V-O~-^Q!d!e-O#]#^-T~-iP!h~!Q![-l~-oS!Q![-l#[#]-{#a#b.a#g#h/T~.QP!h~!Q![.T~.WR!Q![.T#a#b.a#g#h/T~.fQ!h~!Q![.l#g#h/O~.oR!Q![.l#a#b.x#g#h/T~.{P#g#h/O~/TO!h~~/YP!h~!Q![/]~/`Q!Q![/]#a#b.x~/iT{|)^}!O)^!Q![)d#U#V-O#]#^-T~/{Q#U#V-O#]#^-T~0WS!h~!Q![.l#U#V-O#]#^-T#g#h/O~0iP!h~!Q![0l~0oT!Q![0l#W#X-d#[#]-{#a#b.a#g#h/T~1TP!h~!Q![1W~1ZU!Q![1W#W#X-d#[#]-{#a#b.a#g#h/T#k#l0d~1pR!Q![1y!c!i1y#T#Z1y~2OR!p~!Q![1y!c!i1y#T#Z1yP2^TzP!Q![2X![!]2X!c!}2X#R#S2X#T#o2X~2rP!j~!_!`2u~2zO!k~~3PQ{~!_!`3V#r#s3[~3[O!l~~3aO!O~~3fP!g~!_!`3i~3nO!i~R3uTzP#rQ!Q![3n![!]2X!c!}3n#R#S3n#T#o3n~4ZO$e~~4`O$f~~4eO#x~~4hRO#S4e#S#T%W#T~4e~4vO$P~~4{Q!Y~!_!`5R#r#s5W~5WO!V~~5]O!W~~5bO$R~\",\n  tokenizers: [0, 1],\n  topRules: {\"LogQL\":[0,36]},\n  specialized: [{term: 42, get: (value, stack) => (specializeIdentifier(value) << 1)},{term: 42, get: (value, stack) => (extendIdentifier(value) << 1) | 1},{term: 42, get: value => spec_Identifier[value] || -1}],\n  tokenPrec: 0\n});\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst Json = 1,\n  Logfmt = 2,\n  Unpack = 3,\n  Pattern = 4,\n  Regexp = 5,\n  Unwrap = 6,\n  Ip = 7,\n  LabelFormat = 8,\n  LineFormat = 9,\n  LabelReplace = 10,\n  Vector = 11,\n  Offset = 12,\n  Bool = 13,\n  On = 14,\n  Ignoring = 15,\n  GroupLeft = 16,\n  GroupRight = 17,\n  Decolorize = 18,\n  Drop = 19,\n  Keep = 20,\n  By = 21,\n  Without = 22,\n  And = 23,\n  Or = 24,\n  Unless = 25,\n  Sum = 26,\n  Avg = 27,\n  Count = 28,\n  Max = 29,\n  Min = 30,\n  Stddev = 31,\n  Stdvar = 32,\n  Bottomk = 33,\n  Topk = 34,\n  LineComment = 35,\n  LogQL = 36,\n  Expr = 37,\n  LogExpr = 38,\n  Selector = 39,\n  Matchers = 40,\n  Matcher = 41,\n  Identifier = 42,\n  Eq = 43,\n  String = 44,\n  Neq = 45,\n  Re = 46,\n  Nre = 47,\n  PipelineExpr = 48,\n  PipelineStage = 49,\n  LineFilters = 50,\n  LineFilter = 51,\n  Filter = 52,\n  PipeExact = 53,\n  PipeMatch = 54,\n  FilterOp = 55,\n  Pipe = 56,\n  LogfmtParser = 57,\n  LogfmtParserFlags = 58,\n  ParserFlag = 59,\n  LabelParser = 60,\n  JsonExpressionParser = 61,\n  LabelExtractionExpressionList = 62,\n  LabelExtractionExpression = 63,\n  LogfmtExpressionParser = 64,\n  LabelFilter = 65,\n  IpLabelFilter = 66,\n  UnitFilter = 67,\n  DurationFilter = 68,\n  Gtr = 69,\n  Duration = 70,\n  Gte = 71,\n  Lss = 72,\n  Lte = 73,\n  Eql = 74,\n  BytesFilter = 75,\n  Bytes = 76,\n  NumberFilter = 77,\n  Number = 78,\n  LineFormatExpr = 79,\n  LabelFormatExpr = 80,\n  LabelsFormat = 81,\n  LabelFormatMatcher = 82,\n  DecolorizeExpr = 83,\n  DropLabelsExpr = 84,\n  DropLabels = 85,\n  DropLabel = 86,\n  KeepLabelsExpr = 87,\n  KeepLabels = 88,\n  KeepLabel = 89,\n  MetricExpr = 90,\n  RangeAggregationExpr = 91,\n  RangeOp = 92,\n  CountOverTime = 93,\n  Rate = 94,\n  RateCounter = 95,\n  BytesOverTime = 96,\n  BytesRate = 97,\n  AvgOverTime = 98,\n  SumOverTime = 99,\n  MinOverTime = 100,\n  MaxOverTime = 101,\n  StddevOverTime = 102,\n  StdvarOverTime = 103,\n  QuantileOverTime = 104,\n  FirstOverTime = 105,\n  LastOverTime = 106,\n  AbsentOverTime = 107,\n  LogRangeExpr = 108,\n  Range = 109,\n  OffsetExpr = 110,\n  UnwrapExpr = 111,\n  ConvOp = 112,\n  BytesConv = 113,\n  DurationConv = 114,\n  DurationSecondsConv = 115,\n  Grouping = 116,\n  Labels = 117,\n  VectorAggregationExpr = 118,\n  VectorOp = 119,\n  BinOpExpr = 120,\n  BinOpModifier = 121,\n  OnOrIgnoringModifier = 122,\n  GroupingLabels = 123,\n  GroupingLabelList = 124,\n  GroupingLabel = 125,\n  LabelName = 126,\n  Add = 127,\n  Sub = 128,\n  Mul = 129,\n  Div = 130,\n  Mod = 131,\n  Pow = 132,\n  LiteralExpr = 133,\n  LabelReplaceExpr = 134,\n  VectorExpr = 135;\n\nfunction getNodeFromQuery(query, nodeType) {\n  const nodes = [];\n  const tree = parser.parse(query);\n  tree.iterate({\n    enter: (node) => {\n      if (nodeType === undefined || nodeType === node.type.id) {\n        nodes.push(node.node);\n      }\n    },\n  });\n  return nodes[0];\n}\n\nfunction isLogsQuery(query) {\n  if (getNodeFromQuery(query, MetricExpr$1)) {\n    return false;\n  }\n  return true;\n}\n\nfunction indent(level) {\n  return '  '.repeat(level);\n}\n\nfunction indentMultiline(block, level) {\n  const lines = block.split('\\n');\n  return lines.map((line) => indent(level) + line).join('\\n');\n}\n\nfunction trimMultiline(block) {\n  const lines = block.split('\\n');\n  return lines.map((line) => line.trimEnd()).join('\\n');\n}\n\nfunction needsBrackets(node, queryType) {\n  const childNodeIsSame = node.firstChild?.type.id === queryType;\n  let addBrackets = false;\n\n  if (node.firstChild && childNodeIsSame) {\n    addBrackets = true;\n    node = node.firstChild;\n  }\n\n  return { addBrackets, newNode: node };\n}\n\nfunction iterateNode(node, lookingFor) {\n  const nodes = [];\n  let child = node.firstChild;\n\n  while (child) {\n    if (lookingFor.includes(child.type.id)) {\n      nodes.push(child);\n    }\n\n    nodes.push(...iterateNode(child, lookingFor));\n    child = child.nextSibling;\n  }\n\n  return nodes;\n}\n\nfunction buildResponse(pipelineType, lastPipelineType, formattedNode) {\n  if (lastPipelineType === pipelineType) {\n    return ` ${formattedNode}`;\n  }\n\n  return `\\n${indent(1)}${formattedNode}`;\n}\n\nfunction trimEnd(input, charactersToTrim) {\n  let endIndex = input.length - 1;\n  while (endIndex >= 0 && charactersToTrim.includes(input[endIndex])) {\n    endIndex--;\n  }\n  return input.substring(0, endIndex + 1);\n}\n\nconst formatLogExpr = (node, query) => {\n  const { addBrackets, newNode } = needsBrackets(node, LogExpr);\n  node = newNode;\n\n  const tree = parser.parse(query.substring(node.from, node.to));\n  let formatted = '';\n\n  tree.iterate({\n    enter: (ref) => {\n      const node = ref.node;\n\n      switch (node.type.id) {\n        case Selector:\n          formatted += formatSelector(node, query);\n          break;\n\n        case PipelineExpr:\n          node.parent?.type.id !== PipelineExpr && (formatted += formatPipelineExpr(node, query));\n          break;\n      }\n    },\n  });\n\n  return addBrackets ? '(' + formatted + ')' : formatted;\n};\n\nfunction formatSelector(node, query) {\n  const selector = query.substring(node.from, node.to);\n  const subtree = parser.parse(selector);\n  const labelNodes = [];\n  let response = '';\n\n  subtree.iterate({\n    enter: (ref) => {\n      const node = ref.node;\n      if (node.type.id === Matcher) {\n        labelNodes.push(node);\n      }\n    },\n  });\n\n  labelNodes.sort((a, b) => {\n    const labelNodeA = a.getChild(Identifier);\n    const labelNodeB = b.getChild(Identifier);\n\n    const labelValueA = labelNodeA && query.substring(labelNodeA.from, labelNodeA.to);\n    const labelValueB = labelNodeB && query.substring(labelNodeB.from, labelNodeB.to);\n\n    if (!labelValueA || !labelValueB) {\n      return 0;\n    }\n\n    if (labelValueA < labelValueB) {\n      return -1;\n    }\n\n    if (labelValueA > labelValueB) {\n      return 1;\n    }\n\n    return 0;\n  });\n\n  labelNodes.forEach((node) => {\n    const labelNode = node.getChild(Identifier);\n    const operatorNode = labelNode ? labelNode.nextSibling : null;\n    const valueNode = node.getChild(String);\n\n    const label = labelNode ? query.substring(labelNode.from, labelNode.to) : null;\n    const operator = operatorNode ? query.substring(operatorNode.from, operatorNode.to) : null;\n    const value = valueNode ? query.substring(valueNode.from, valueNode.to) : null;\n\n    response += `${label}${operator}${value}, `;\n  });\n\n  return '{' + trimEnd(response, ', ') + '}';\n}\n\nfunction formatPipelineExpr(node, query) {\n  const pipelineExprNodes = [\n    LineFilter,\n    LabelParser,\n    LogfmtParser,\n    LabelFilter,\n    JsonExpressionParser,\n    LineFormatExpr,\n    LabelFormatExpr,\n    DecolorizeExpr,\n  ];\n  let lastPipelineType;\n  let response = '';\n\n  iterateNode(node, pipelineExprNodes).forEach((node) => {\n    switch (node.type.id) {\n      case LineFilter:\n        response += buildResponse(LineFilter, lastPipelineType, formatLineFilter(node, query));\n        lastPipelineType = LineFilter;\n        break;\n\n      case LabelParser:\n        response += buildResponse(LabelParser, lastPipelineType, formatLabelParser(node, query));\n        lastPipelineType = LabelParser;\n        break;\n\n      case LogfmtParser:\n        response += buildResponse(LogfmtParser, lastPipelineType, formatLabelParser(node, query));\n        lastPipelineType = LogfmtParser;\n        break;\n\n      case JsonExpressionParser:\n        response += buildResponse(JsonExpressionParser, lastPipelineType, formatJsonExpressionParser(node, query));\n        lastPipelineType = JsonExpressionParser;\n        break;\n\n      case LabelFilter:\n        response += buildResponse(LabelFilter, lastPipelineType, formatLabelFilter(node, query));\n        lastPipelineType = LabelFilter;\n        break;\n\n      case LineFormatExpr:\n        response += buildResponse(LineFormatExpr, lastPipelineType, formatLineFormatExpr(node, query));\n        lastPipelineType = LineFormatExpr;\n        break;\n\n      case LabelFormatExpr:\n        response += buildResponse(LabelFormatExpr, lastPipelineType, formatLabelFormatExpr(node, query));\n        lastPipelineType = LabelFormatExpr;\n        break;\n\n      case DecolorizeExpr:\n        response += buildResponse(DecolorizeExpr, lastPipelineType, formatDecolorizeExpr());\n        lastPipelineType = DecolorizeExpr;\n        break;\n    }\n  });\n\n  return response;\n}\n\nfunction formatLineFilter(node, query) {\n  const filterNode = node.getChild(Filter);\n  const filterOperationNode = node.getChild(FilterOp);\n  const stringNode = node.getChild(String);\n\n  const filter = filterNode && query.substring(filterNode.from, filterNode.to);\n  const string = stringNode && query.substring(stringNode.from, stringNode.to);\n\n  if (filterOperationNode) {\n    return `${filter} ip(${string})`;\n  }\n  return `${filter} ${string}`;\n}\n\nfunction formatLabelParser(node, query) {\n  const hasString = node.getChild(String);\n\n  if (hasString) {\n    const parserNode = node.getChild(Regexp) || node.getChild(Pattern);\n    const stringNode = node.getChild(String);\n\n    const parser = parserNode && query.substring(parserNode.from, parserNode.to);\n    const string = stringNode && query.substring(stringNode.from, stringNode.to);\n\n    return `| ${parser}${string}`;\n  }\n\n  const labelParser = query.substring(node.from, node.to);\n  return `| ${labelParser}`;\n}\n\nfunction formatJsonExpressionParser(node, query) {\n  const jsonExpressionNodes = iterateNode(node, [LabelExtractionExpression]);\n  let response = '';\n\n  jsonExpressionNodes.forEach((node) => {\n    const identifierNode = node.getChild(Identifier);\n    const valueNode = node.getChild(String);\n\n    const identifier = identifierNode && query.substring(identifierNode.from, identifierNode.to);\n    const value = valueNode && query.substring(valueNode.from, valueNode.to);\n\n    response += `${identifier}=${value}, `;\n  });\n\n  return `| json ${trimEnd(response, ', ')}`;\n}\n\nfunction formatLabelFilter(node, query) {\n  const selectedFilter =\n    node.getChild(Matcher) ||\n    node.getChild(IpLabelFilter) ||\n    node.getChild(NumberFilter) ||\n    node.getChild(UnitFilter)?.getChild(DurationFilter) ||\n    node.getChild(UnitFilter)?.getChild(BytesFilter);\n\n  if (!selectedFilter) {\n    return '';\n  }\n\n  const selectedFilterType = selectedFilter.type.id;\n\n  const identifierNode = selectedFilter.getChild(Identifier);\n  const operatorNode = identifierNode && identifierNode.nextSibling;\n  let valueNode;\n\n  if (selectedFilterType === DurationFilter) {\n    valueNode = selectedFilter.getChild(Duration);\n  } else if (selectedFilterType === BytesFilter) {\n    valueNode = selectedFilter.getChild(Bytes);\n  } else if (selectedFilterType === NumberFilter) {\n    valueNode = selectedFilter.getChild(Number);\n  } else {\n    valueNode = selectedFilter.getChild(String);\n  }\n\n  const identifier = identifierNode && query.substring(identifierNode.from, identifierNode.to);\n  const operator = operatorNode && query.substring(operatorNode.from, operatorNode.to);\n  const value = valueNode && query.substring(valueNode.from, valueNode.to);\n\n  if (selectedFilterType === IpLabelFilter) {\n    return `| ${identifier}${operator}ip(${value})`;\n  }\n\n  return `| ${identifier}${operator}${value}`;\n}\n\nfunction formatLineFormatExpr(node, query) {\n  const stringNode = node.getChild(String);\n  const string = stringNode && query.substring(stringNode.from, stringNode.to);\n  return `| line_format ${string}`;\n}\n\nfunction formatLabelFormatExpr(node, query) {\n  const labelFormatMatcherNodes = iterateNode(node, [LabelFormatMatcher]);\n  let response = '| label_format ';\n\n  labelFormatMatcherNodes.forEach((labelFormatMatcherNode) => {\n    let identifierNode;\n    let valueNode;\n\n    if (labelFormatMatcherNode.getChildren(Identifier).length === 2) {\n      [identifierNode, valueNode] = labelFormatMatcherNode.getChildren(Identifier);\n    } else {\n      identifierNode = labelFormatMatcherNode.getChild(Identifier);\n      valueNode = labelFormatMatcherNode.getChild(String);\n    }\n\n    const identifier = identifierNode && query.substring(identifierNode.from, identifierNode.to);\n    const value = valueNode && query.substring(valueNode.from, valueNode.to);\n\n    response += `${identifier}=${value}, `;\n  });\n\n  return trimEnd(response, ', ');\n}\n\nfunction formatDecolorizeExpr() {\n  return `| decolorize`;\n}\n\nconst formatMetricExpr = (node, query) => {\n  const { addBrackets, newNode } = needsBrackets(node, MetricExpr);\n  node = newNode;\n  let formatted = '';\n\n  const childNode = node.firstChild;\n  switch (childNode && childNode.type.id) {\n    case RangeAggregationExpr:\n      formatted = formatRangeAggregationExpr(node, query);\n      break;\n\n    case VectorAggregationExpr:\n      formatted = formatVectorAggregationExpr(node, query);\n      break;\n\n    case BinOpExpr:\n      formatted = formatBinOpExpr(node, query);\n      break;\n\n    case LiteralExpr:\n      formatted = formatLiteralExpr(node, query);\n      break;\n\n    case LabelReplaceExpr:\n      formatted = formatLabelReplaceExpr(node, query);\n      break;\n\n    case VectorExpr:\n      formatted = formatVectorExpr(node, query);\n      break;\n  }\n\n  return addBrackets ? '(' + formatted + ')' : formatted;\n};\n\nfunction formatRangeAggregationExpr(node, query) {\n  let response = '';\n\n  iterateNode(node, [RangeOp, Number, LogRangeExpr, Grouping]).forEach((node) => {\n    if (node.parent?.type.id !== RangeAggregationExpr) {\n      return;\n    }\n\n    switch (node.type.id) {\n      case RangeOp:\n        response += `${query.substring(node.from, node.to)}(\\n`;\n        break;\n\n      case Number:\n        response += `${indent(1) + query.substring(node.from, node.to)},\\n`;\n        break;\n\n      case LogRangeExpr:\n        response += formatLogRangeExpr(node, query);\n        break;\n\n      case Grouping:\n        response += formatGrouping(node, query);\n        break;\n    }\n  });\n\n  return response;\n}\n\nfunction formatLogRangeExpr(node, query) {\n  const nodes = [];\n  let selector = '';\n  let pipeline = '';\n  let range = '';\n  let offset = '';\n  let unwrap = '';\n\n  iterateNode(node, [Selector, Range, OffsetExpr, UnwrapExpr, PipelineExpr]).forEach((node) => {\n    if (node.parent?.type.id !== LogRangeExpr) {\n      return;\n    }\n\n    nodes.push(node);\n\n    switch (node.type.id) {\n      case Selector: {\n        let logExpr = query.substring(node.from, node.to);\n        selector += formatSelector({ ...node, from: 0, to: logExpr.length }, logExpr);\n        break;\n      }\n\n      case PipelineExpr:\n        pipeline += formatPipelineExpr(node, query);\n        break;\n\n      case Range:\n        range += query.substring(node.from, node.to);\n        break;\n\n      case OffsetExpr: {\n        const durationNode = node.getChild(Duration);\n        offset += ` offset ${durationNode ? query.substring(durationNode.from, durationNode.to) : ''}`;\n        break;\n      }\n\n      case UnwrapExpr:\n        iterateNode(node, [Identifier, ConvOp, LabelFilter]).forEach((node, _, arr) => {\n          switch (node.type.id) {\n            case Identifier: {\n              if (node.parent?.type.id !== UnwrapExpr) {\n                return;\n              }\n\n              const hasConvOp = arr.find((node) => node.type.id === ConvOp);\n\n              if (hasConvOp) {\n                return;\n              }\n\n              unwrap += `| unwrap ${query.substring(node.from, node.to)} `;\n              return;\n            }\n\n            case ConvOp: {\n              const identifierNode = arr.find((node) => node.type.id === Identifier);\n              const identifier = identifierNode ? query.substring(identifierNode.from, identifierNode.to) : '';\n              unwrap += `| unwrap ${query.substring(node.from, node.to)}(${identifier}) `;\n              return;\n            }\n\n            case LabelFilter:\n              unwrap += formatLabelFilter(node, query);\n              return;\n          }\n        });\n        break;\n    }\n  });\n\n  let response = '';\n  nodes.forEach((node, index, array) => {\n    const previousNode = array[index - 1];\n\n    if (node.type.id === Selector) {\n      response += indent(1) + selector;\n    }\n\n    if (node.type.id === PipelineExpr) {\n      response += indentMultiline(pipeline, 1);\n    }\n\n    if (node.type.id === Range) {\n      response += '\\n' + indent(1) + range;\n    }\n\n    if (node.type.id === OffsetExpr) {\n      response += offset;\n    }\n\n    if (node.type.id === UnwrapExpr) {\n      if (previousNode?.type.id !== OffsetExpr && previousNode?.type.id !== Range) {\n        response += '\\n' + indent(1) + unwrap;\n      } else {\n        response += ' ' + unwrap;\n      }\n    }\n  });\n\n  return (response += '\\n)');\n}\n\nfunction formatGrouping(node, query) {\n  let response = '';\n\n  const labels = iterateNode(node, [Identifier]).map((node) => {\n    return query.substring(node.from, node.to);\n  });\n\n  iterateNode(node, [By, Without]).forEach((node) => {\n    if (node.parent?.type.id !== Grouping) {\n      return;\n    }\n\n    switch (node.type.id) {\n      case By:\n        response = ` by (${labels.join(', ')}) `;\n        break;\n\n      case Without:\n        response = ` without (${labels.join(', ')}) `;\n        break;\n    }\n  });\n\n  return response;\n}\n\nfunction formatVectorAggregationExpr(node, query) {\n  let response = '';\n\n  iterateNode(node, [VectorOp, Number, MetricExpr, Grouping]).forEach((node, _, arr) => {\n    if (node.parent?.type.id !== VectorAggregationExpr) {\n      return;\n    }\n\n    switch (node.type.id) {\n      case VectorOp:\n        response += `${query.substring(node.from, node.to)}`;\n        break;\n\n      case Number:\n        response += `(\\n`;\n        response += `${indent(1) + query.substring(node.from, node.to)},\\n`;\n        break;\n\n      case MetricExpr: {\n        const hasNumber = arr.find((node) => node.type.id === Number && node.parent?.type.id === VectorAggregationExpr);\n        response += hasNumber ? '' : '(\\n';\n\n        const metricExpr = query.substring(node.from, node.to);\n        const metricNode = getNodeFromQuery(metricExpr, MetricExpr);\n        response += indentMultiline(formatMetricExpr(metricNode, metricExpr), 1);\n        response += '\\n)';\n        break;\n      }\n\n      case Grouping:\n        response += formatGrouping(node, query);\n        break;\n    }\n  });\n\n  return response;\n}\n\nfunction formatBinOpExpr(node, query) {\n  let operator;\n\n  const [leftExpr, rightExpr] = iterateNode(node, [Expr]).map((node, idx) => {\n    if (idx === 0) {\n      operator = query.substring(node.nextSibling?.from ?? 0, node.nextSibling?.to);\n    }\n\n    const expr = query.substring(node.from, node.to);\n    let expressionNode;\n\n    if (isLogsQuery(expr)) {\n      expressionNode = getNodeFromQuery(expr, LogExpr);\n      return formatLogExpr(expressionNode, expr);\n    } else {\n      expressionNode = getNodeFromQuery(expr, MetricExpr);\n      return formatMetricExpr(expressionNode, expr);\n    }\n  });\n\n  return leftExpr + '\\n' + operator + '\\n' + rightExpr;\n}\n\nfunction formatLiteralExpr(node, query) {\n  node = node.getChild(LiteralExpr) ?? node;\n  const addNode = node.getChild(Add);\n  const subNode = node.getChild(Sub);\n  const numberNode = node.getChild(Number);\n\n  if (!numberNode) {\n    return '';\n  }\n\n  if (addNode) {\n    return `+${query.substring(numberNode.from, numberNode.to)}`;\n  }\n\n  if (subNode) {\n    return `-${query.substring(numberNode.from, numberNode.to)}`;\n  }\n\n  return query.substring(numberNode.from, numberNode.to);\n}\n\nfunction formatLabelReplaceExpr(node, query) {\n  let response = 'label_replace(\\n';\n\n  iterateNode(node, [MetricExpr, String]).forEach((node) => {\n    if (node.parent?.type.id !== LabelReplaceExpr) {\n      return;\n    }\n\n    if (node.type.id === MetricExpr) {\n      const metricExpr = query.substring(node.from, node.to);\n      const metricNode = getNodeFromQuery(metricExpr, MetricExpr);\n      response += indentMultiline(formatMetricExpr(metricNode, metricExpr), 1) + ',\\n';\n    } else {\n      response += indent(1) + query.substring(node.from, node.to) + ',\\n';\n    }\n  });\n\n  return trimEnd(response, ',\\n') + '\\n)';\n}\n\nfunction formatVectorExpr(node, query) {\n  node = node.getChild(VectorExpr) ?? node;\n  const numberNode = node.getChild(Number);\n\n  if (!numberNode) {\n    return '';\n  }\n\n  return `vector(${query.substring(numberNode.from, numberNode.to)})`;\n}\n\n/**\n * @experimental This feature is subject to change or removal in future versions.\n */\nconst formatLokiQuery = (query) => {\n  const tree = parser.parse(query);\n  let formatted = '';\n\n  tree.iterate({\n    enter: (ref) => {\n      const node = ref.node;\n\n      if (node.parent?.type.id !== Expr || node.parent?.parent?.type.id === BinOpExpr) {\n        return;\n      }\n\n      switch (node.type.id) {\n        case MetricExpr:\n          formatted = formatMetricExpr(node, query);\n          return false;\n\n        case LogExpr:\n          formatted = formatLogExpr(node, query);\n          return false;\n      }\n    },\n  });\n\n  return trimMultiline(formatted);\n};\n\nexport { AbsentOverTime, Add, And, Avg, AvgOverTime, BinOpExpr, BinOpModifier, Bool, Bottomk, By, Bytes, BytesConv, BytesFilter, BytesOverTime, BytesRate, ConvOp, Count, CountOverTime, Decolorize, DecolorizeExpr, Div, Drop, DropLabel, DropLabels, DropLabelsExpr, Duration, DurationConv, DurationFilter, DurationSecondsConv, Eq, Eql, Expr, Filter, FilterOp, FirstOverTime, GroupLeft, GroupRight, Grouping, GroupingLabel, GroupingLabelList, GroupingLabels, Gte, Gtr, Identifier, Ignoring, Ip, IpLabelFilter, Json, JsonExpressionParser, Keep, KeepLabel, KeepLabels, KeepLabelsExpr, LabelExtractionExpression, LabelExtractionExpressionList, LabelFilter, LabelFormat, LabelFormatExpr, LabelFormatMatcher, LabelName, LabelParser, LabelReplace, LabelReplaceExpr, Labels, LabelsFormat, LastOverTime, LineComment, LineFilter, LineFilters, LineFormat, LineFormatExpr, LiteralExpr, LogExpr, LogQL, LogRangeExpr, Logfmt, LogfmtExpressionParser, LogfmtParser, LogfmtParserFlags, Lss, Lte, Matcher, Matchers, Max, MaxOverTime, MetricExpr, Min, MinOverTime, Mod, Mul, Neq, Nre, Number, NumberFilter, Offset, OffsetExpr, On, OnOrIgnoringModifier, Or, ParserFlag, Pattern, Pipe, PipeExact, PipeMatch, PipelineExpr, PipelineStage, Pow, QuantileOverTime, Range, RangeAggregationExpr, RangeOp, Rate, RateCounter, Re, Regexp, Selector, Stddev, StddevOverTime, Stdvar, StdvarOverTime, String, Sub, Sum, SumOverTime, Topk, UnitFilter, Unless, Unpack, Unwrap, UnwrapExpr, Vector, VectorAggregationExpr, VectorExpr, VectorOp, Without, formatLokiQuery, parser };\n"],"names":["queryTypeOptions","RESOLUTION_OPTIONS","value","LokiOptionFields","props","lineLimitValue","resolution","onRunQuery","runOnBlur","onChange","query","queryType","onChangeQueryLimit","nextQuery","preprocessMaxLines","onQueryTypeChange","instant","range","rest","onMaxLinesChange","e","onReturnKeyDown","onResolutionChange","option","type","maxLines","validateQuery","interpolatedQuery","queryLines","interpolatedErrors","parseQuery","parseErrors","queryErrors","interpolatedError","queryError","parseError","findErrorBoundary","isErrorBoundary","nodeRef","node","isEmptyString","errorNode","error","startPos","endPos","line","boundary","placeHolderScopedVars","perf","warned","PROCESS","emitWarning","msg","code","fn","AC","AS","_","warnACPolyfill","reason","printACPolyfillWarning","shouldWarn","TYPE","isPosInt","n","getUintArray","max","ZeroArray","size","Stack","#constructing","HeapCls","s","LRUCache","#max","#maxSize","#dispose","#disposeAfter","#fetchMethod","#size","#calculatedSize","#keyMap","#keyList","#valList","#next","#prev","#head","#tail","#free","#disposed","#sizes","#starts","#ttls","#hasDispose","#hasFetchMethod","#hasDisposeAfter","c","p","#isBackgroundFetch","k","index","options","context","#backgroundFetch","#moveToTail","#indexes","#rindexes","#isStale","ttl","ttlResolution","ttlAutopurge","updateAgeOnGet","updateAgeOnHas","allowStale","dispose","disposeAfter","noDisposeOnSet","noUpdateTTL","maxSize","maxEntrySize","sizeCalculation","fetchMethod","noDeleteOnFetchRejection","noDeleteOnStaleGet","allowStaleOnFetchRejection","allowStaleOnFetchAbort","ignoreFetchAbort","UintArray","#initializeSizeTracking","#initializeTTLTracking","key","ttls","starts","#setItemTTL","start","t","#updateItemAge","#statusTTL","status","cachedNow","getNow","age","sizes","#removeItemSize","#requireSize","v","#addItemSize","#evict","_i","_s","_st","_k","_v","i","#isValidIndex","getOptions","thisp","deleted","arr","entry","setOptions","oldVal","oldValue","dt","task","val","free","head","hasOptions","peekOptions","ac","signal","fetchOpts","cb","updateCache","aborted","ignoreAbort","fetchFail","bf","eb","er","allowStaleAborted","noDelete","pcall","res","rej","fmp","b","fetchOptions","forceRefresh","stale","isStale","staleVal","fetching","#connect","DEFAULT_KEYS","EMPTY_SELECTOR","HISTORY_ITEM_COUNT","HISTORY_COUNT_CUTOFF","NS_IN_MS","RATE_RANGES","LABEL_REFRESH_INTERVAL","wrapLabel","label","addHistoryMetadata","item","history","cutoffTs","historyForItem","h","hint","recent","lastQueried","LokiLanguageProvider","datasource","initialValues","url","params","suggestions","suggestion","streamSelector","interpolatedMatch","end","cacheKey","data","values","match","syntax","input","wrapperClasses","prefix","text","emptyResult","empty","selectedLines","currentLine","nextCharacter","tokenRecognized","prefixUnrecognized","noSuffix","safePrefix","operatorsPattern","isNextOperand","historyItems","labelKey","cursorOffset","isValueStart","selector","parsedSelector","allLabels","existingKeys","labelValues","labelValuesForKey","filterText","labelKeys","possibleKeys","newSuggestion","labelBasedQuery","lokiQuery","tokens","timeRange","labels","param","nanos","labelName","interpolatedKey","rangeParams","series","hasLogfmt","hasJSON","hasPack","DEFAULT_WEBSOCKET_CONFIG","WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT","WebSocketSubject","_super","urlConfigOrSource","destination","_this","Observable","config","Subject","ReplaySubject","operator","sock","subMsg","unsubMsg","messageFilter","self","observer","err","subscription","x","_a","WebSocketCtor","protocol","binaryType","socket","Subscription","evt","_socket","openObserver","queue","Subscriber","serializer","closingObserver","closeObserver","deserializer","subscriber","source","webSocket","validate","uuid","parse","stringToBytes","str","bytes","DNS","URL","v35","name","version","hashfunc","generateUUID","namespace","buf","offset","_namespace","f","y","z","ROTL","sha1","K","H","l","N","M","j","W","a","d","T","UUID_NAMESPACE","appendResponseToBufferedData","response","streams","tsField","lineField","idField","usedUids","stream","allLabelsString","ts","createUid","labelsString","refId","id","newCount","LiveStreams","target","retryInterval","CircularDataFrame","map","retryWhen","attempts","mergeMap","retryAttempt","timer","throwError","finalize","getStyles","theme","IS_LOKI_LOG_CONTEXT_UI_OPEN","LokiContextUi","row","logContextProvider","updateFilter","onClose","origQuery","runContextQuery","styles","contextFilters","setContextFilters","initialized","setInitialized","loading","setLoading","isOpen","setIsOpen","store","includePipelineOperations","setIncludePipelineOperations","SHOULD_INCLUDE_PIPELINE_OPERATIONS","timerHandle","previousInitialized","previousContextFilters","isInitialState","filter","enabled","fromParser","preservedLabels","LOKI_LOG_CONTEXT_PRESERVED_LABELS","useAsync","initContextFilters","realLabels","realLabelsEnabled","parsedLabels","parsedLabelsEnabled","contextFilterToSelectFilter","contextFilter","showParsedLabels","queryExpr","Tooltip","Button","Collapse","RawQuery","Icon","Spinner","Label","keys","actionMeta","InlineFieldRow","InlineField","RenderUserContentAsHTML","SortDirection","makeIndex","field","dir","fieldValues","isAsc","valA","valB","nanoA","nanoB","sortDataFrameByTime","frame","fields","timeField","SortedVector","LogContextProvider","direction","processResults","result","processedFrames","app","lastValueFrom","makeRequest","REF_ID_STARTER_LOG_ROW_CONTEXT","catchError","switchMap","of","expr","parser","parsedLabel","currentExpr","newExpr","origExpr","allNodePositions","pipelineStagePositions","position","otherNodePositions","pipelineStagePosition","arePreservedLabelsUsed","newContextFilters","limit","filters","contextTimeBuffer","queryDirection","FieldCache","tsValue","timestamp","preparedExpression","getDerivedFields","dataFrame","derivedFieldConfigs","derivedFieldsGrouped","newFields","fieldFromDerivedFieldConfig","logMatch","dataSourceSrv","dataLinks","acc","derivedFieldConfig","dsSettings","makeTableFrames","instantMetricFrames","framesWithRefId","framesByRefId","frames","makeTableFrame","tableTimeField","tableValueField","allLabelNames","labelFields","valueField","timeArray","valueArray","isMetricFrame","setFrameMeta","meta","oldMeta","newMeta","processStreamFrame","custom","newFrame","derivedFields","processStreamsFrames","queryMap","processMetricInstantFrames","processMetricRangeFrames","groupFrames","streamsFrames","metricInstantFrames","metricRangeFrames","improveError","message","transformBackendResult","queries","dataFrames","LokiAnnotationsQueryEditor","annotation","onAnnotationChange","onChangeQuery","queryWithRefId","LokiQueryField","EditorRow","EditorField","Input","event","labelNamesRegex","labelValuesRegex","migrateVariableQuery","rawQuery","queryBase","getQueryHints","hints","queryWithParser","parserCount","hasPipelineErrorFiltering","hasLevel","levelLikeLabel","splitTimeRange","startTime","endTime","idealRangeDuration","chunkEndTime","chunkStartTime","expandTimeRange","step","newStartTime","newEndTime","endStepMod","alignedDuration","alignedStartTime","alignedEndTime","partitionTimeRange","isLogsQuery","originalTimeRange","stepMs","duration","from","to","adjustTargetsFromResponseState","targets","targetFrame","updatedMaxLines","runSplitGroupedQueries","requests","mergedResponse","totalRequests","partition","longestPartition","shouldStop","subquerySubsciption","runNextRequest","requestN","requestGroup","done","nextRequest","nextRequestN","nextRequestGroup","getNextRequestPointers","group","subRequest","partialResponse","updateLoadingFrame","request","isLogsVolumeRequest","loadingFrameName","loadingFrame","querySupportsSplitting","runSplitQuery","nonSplittingQueries","normalQueries","logQueries","metricQueries","oneDayMs","rangePartitionedLogQueries","rangePartitionedMetricQueries","chunkRangeMs","resolutionPartition","stepMsPartition","calculateStep","tap","intervalMs","interval_regex","newStep","safeStep","getLiveStreamKey","msgUint8","hashBuffer","doLokiChannelStream","ds","maxDelta","maxLength","updateFrame","StreamingDataFrame","defer","variableOptions","LokiVariableQueryEditor","setType","setLabel","labelOptions","setLabelOptions","setStream","variableQuery","labelNames","newType","onLabelChange","newLabel","onStreamChange","handleBlur","Select","LokiVariableSupport","scopedVars","DEFAULT_MAX_LINES","LOKI_ENDPOINT","REF_ID_DATA_SAMPLES","REF_ID_STARTER_ANNOTATION","REF_ID_STARTER_LOG_VOLUME","REF_ID_STARTER_LOG_SAMPLE","requestId","hideFromInspector","intervalInfo","LokiDatasource","DataSourceWithBackend","instanceSettings","templateSrv","timeSrv","maxDataPoints","liveTarget","settingsData","normalizedQuery","isQuerySuitable","logsVolumeRequest","extractLevel","logsSampleRequest","q","fixedRequest","streamQueries","streamRequest","merge","logsQueries","subQueries","baseUrl","expandedQueries","abstractQueries","abstractQuery","labelMatcher","labelMatchers","statsForAll","idx","durations","interpolated","lokiLogsQuery","variable","lokiRegularEscape","lokiSpecialRegexEscape","lodash","expression","action","parserPositions","labelFilterPositions","lastPosition","tagKeys","titleFormat","textFormat","annotations","splitKeys","DataFrameView","maybeDuplicatedTags","tags","adhocFilters","__auto","__interval","__interval_ms","__range","__range_s","__range_ms","exprWithAdHoc","string","defaults","getLogLevelFromLabels","levelLabel","NodePosition","queryHasFilter","getMatchersWithFilter","removeLabelFromQuery","matchers","matcher","removeLabelFilter","removeSelector","pipelineStage","suffix","matchVisQuery","tree","labelNode","opNode","valueNode","labelValue","addLabelToQuery","forceAsLabelFilter","streamSelectorPositions","getStreamSelectorPositions","hasStreamSelectorMatchers","getMatcherInStreamPositions","everyStreamSelectorHasMatcher","streamSelectorPosition","matcherPosition","getParserPositions","getLabelFilterPositions","toLabelFilter","positionToAdd","findLastPosition","addFilterAsLabelFilter","subExpressions","findLeaves","parserFilterPositions","lastPositionsPerExpression","subExpression","addFilterToStreamSelector","addParserToQuery","lineFilterPositions","getLineFiltersPositions","addParser","addNoPipelineErrorToQuery","addLabelFormatToQuery","labelFormat","logQueryPositions","getLogQueryPositions","addLabelFormat","removeCommentsFromQuery","lineCommentPositions","getLineCommentPositions","newQuery","prev","lineCommentPosition","positions","getAllPositionsInNodeByType","parserNodeTypes","logPartsPositions","pipeline","unwrap","sorted","vectorSelectorPositions","isLast","labelExists","newLabels","positionsToAddAfter","labelFilter","queryPartPositions","addLineFilter","streamSelectorEnd","current","pos","child","nodes","formatQuery","getHighlighterExpressionsFromQuery","results","getNodesFromQuery","pipeExact","pipeMatch","filterTerm","backtickedTerm","unwrappedFilterTerm","resultTerm","getNormalizedLokiQuery","getLokiQueryType","tagsToObscure","partsToKeep","obfuscate","obfuscatedQuery","queryPart","parseToNodeNamesArray","queryParts","isQueryWithNode","nodeType","nodeTypes","getNodePositionsFromQuery","getNodeFromQuery","isQueryWithError","isQueryWithParser","getParserFromQuery","parsers","isQueryPipelineErrorFiltering","isQueryWithLabelFormat","getLogQueryFromMetricsQuery","selectorNode","pipelineExprNode","pipelineExpr","getLogQueryFromMetricsQueryAtPosition","metricQuery","isQueryWithLabelFilter","isQueryWithLineFilter","isQueryWithRangeVariable","rangeNodes","getStreamSelectorsFromQuery","requestSupportsSplitting","allQueries","isLokiQuery","getLokiQueryFromDataQuery","formatLogqlQuery","isInvalid","transformedQuery","transformationMatches","pattern","formatted","LokiQueryModeller","lokiQueryModeller","binaryScalarDefs","binaryScalarOperations","opDef","defaultParams","getSimpleBinaryRenderer","model","def","innerExpr","bool","createRangeOperation","isRangeOperationWithGrouping","getRangeVectorParamDef","paramChangedHandler","operationWithRangeVectorRenderer","addLokiOperation","op","opDocs","createRangeOperationWithGrouping","rangeOperation","getRangeAggregationWithGroupingRenderer","aggregation","grouping","restParamIndex","restParams","rangeVector","quantile","labelFilterRenderer","isConflictingFilter","operation","queryOperations","operationIsNegative","queryOperation","candidate","pipelineRenderer","strict","keepEmpty","isRangeVectorFunction","getIndexOfOrLast","operations","queryModeller","condition","modeller","newOperation","existingRangeVectorFunction","placeToInsert","addNestedQueryHandler","getLineFilterRenderer","caseInsensitive","UnwrapParamEditor","operationId","state","setState","loadUnwrapOptions","logExpr","samples","getOperationDefinitions","aggregations","opId","aggregationsWithParam","rangeOperations","rangeOperationsWithGrouping","definitions","explainOperator","getDefinitionById","checkParamsAreValid","buildVisualQueryFromString","replacedExpr","handleExpression","isEmptyQuery","visQuery","getLabel","getLineFilter","createNotSupportedError","getLabelParser","getLabelFilter","getJsonExpressionParser","getLogfmtParser","getLineFormat","getLabelFormat","handleUnwrapExpr","getDecolorize","handleRangeAggregation","handleVectorAggregation","handleBinary","isIntervalVariableError","handleDropFilter","handleKeepFilter","filterExpr","handleQuotes","parserNode","flags","subNode","ipLabelFilter","valueString","renameTo","originalLabel","unwrapExprChild","labelFilterChild","unwrapChild","convOp","identifier","nameNode","funcName","number","rangeValue","numberNode","metricExpr","operatorToOpName","left","binModifier","getBinaryModifier","right","leftNumber","getLastChildWithSelector","rightNumber","rightBinary","leftMostChild","binQuery","boolMatcher","children","exploringNode","LokiQueryPatternType","LokiVisualQueryOperationCategory","LokiOperationId","LokiOperationOrder","lokiOperators","isLogLineJSON","parsed","LOGFMT_REGEXP","isLogLineLogfmt","isLogLinePacked","dataFrameHasLokiError","dataFrameHasLevelLabel","extractLogParserFromDataFrame","logLines","extractLabelKeysFromDataFrame","labelsArray","extractUnwrapLabelKeysFromDataFrame","obj","extractHasErrorLabelFromDataFrame","labelField","extractLevelLikeLabelFromDataFrame","shouldCombine","frame1","frame2","frameType1","frameType2","field1","field2","customType1","customType2","combineResponses","currentResult","newResult","cloneQueryResponse","currentFrame","cloneDataFrame","combineFrames","mergedErrors","mergedError","mergedTraceIds","dest","totalFields","getCombinedMetadataStats","TOTAL_BYTES_STAT","destStats","sourceStats","destStat","sourceStat","eitherStat","onDashboardLoadedHandler","dashboardId","orgId","grafanaVersion","lokiQueries","instantQueries","rangeQueries","builderModeQueries","codeModeQueries","queriesWithTemplateVariables","isQueryWithTemplateVariables","queriesWithChangedResolution","isQueryWithChangedResolution","queriesWithChangedLineLimit","isQueryWithChangedLineLimit","queriesWithChangedLegend","isQueryWithChangedLegend","shouldNotReportBasedOnRefId","starters","starter","calculateTotalBytes","totalBytes","byteKey","stat","trackQuery","trackingSettings","extraPayload","trackGroupedQueries","groupedRequests","originalRequest","splittingPayload","total","split_query_partition_size","QueryEditorMode","LokiQueryType","SupportingQueryType","LokiQueryDirection","LokiResultType","LokiVariableQueryType","Json$1","Logfmt$1","Unpack$1","Pattern$1","Regexp$1","Unwrap$1","Ip$1","LabelFormat$1","LineFormat$1","LabelReplace$1","Vector$1","Offset$1","Bool$1","On$1","Ignoring$1","GroupLeft$1","GroupRight$1","Decolorize$1","Drop$1","Keep$1","By$1","Without$1","And$1","Or$1","Unless$1","Sum$1","Avg$1","Count$1","Max$1","Min$1","Stddev$1","Stdvar$1","Bottomk$1","Topk$1","MetricExpr$1","keywordTokens","specializeIdentifier","contextualKeywordTokens","extendIdentifier","spec_Identifier","stack","Json","Logfmt","Unpack","Pattern","Regexp","Unwrap","Ip","LabelFormat","LineFormat","LabelReplace","Vector","Offset","Bool","On","Ignoring","GroupLeft","GroupRight","Decolorize","Drop","Keep","By","Without","And","Or","Unless","Sum","Avg","Count","Max","Min","Stddev","Stdvar","Bottomk","Topk","LineComment","LogQL","Expr","LogExpr","Selector","Matchers","Matcher","Identifier","Eq","String","Neq","Re","Nre","PipelineExpr","PipelineStage","LineFilters","LineFilter","Filter","PipeExact","PipeMatch","FilterOp","Pipe","LogfmtParser","LogfmtParserFlags","ParserFlag","LabelParser","JsonExpressionParser","LabelExtractionExpressionList","LabelExtractionExpression","LogfmtExpressionParser","LabelFilter","IpLabelFilter","UnitFilter","DurationFilter","Gtr","Duration","Gte","Lss","Lte","Eql","BytesFilter","Bytes","NumberFilter","Number","LineFormatExpr","LabelFormatExpr","LabelsFormat","LabelFormatMatcher","DecolorizeExpr","DropLabelsExpr","DropLabels","DropLabel","KeepLabelsExpr","KeepLabels","KeepLabel","MetricExpr","RangeAggregationExpr","RangeOp","CountOverTime","Rate","RateCounter","BytesOverTime","BytesRate","AvgOverTime","SumOverTime","MinOverTime","MaxOverTime","StddevOverTime","StdvarOverTime","QuantileOverTime","FirstOverTime","LastOverTime","AbsentOverTime","LogRangeExpr","Range","OffsetExpr","UnwrapExpr","ConvOp","BytesConv","DurationConv","DurationSecondsConv","Grouping","Labels","VectorAggregationExpr","VectorOp","BinOpExpr","BinOpModifier","OnOrIgnoringModifier","GroupingLabels","GroupingLabelList","GroupingLabel","LabelName","Add","Sub","Mul","Div","Mod","Pow","LiteralExpr","LabelReplaceExpr","VectorExpr","indent","level","indentMultiline","block","trimMultiline","needsBrackets","childNodeIsSame","addBrackets","iterateNode","lookingFor","buildResponse","pipelineType","lastPipelineType","formattedNode","trimEnd","charactersToTrim","endIndex","formatLogExpr","newNode","ref","formatSelector","formatPipelineExpr","subtree","labelNodes","labelNodeA","labelNodeB","labelValueA","labelValueB","operatorNode","pipelineExprNodes","formatLineFilter","formatLabelParser","formatJsonExpressionParser","formatLabelFilter","formatLineFormatExpr","formatLabelFormatExpr","formatDecolorizeExpr","filterNode","filterOperationNode","stringNode","jsonExpressionNodes","identifierNode","selectedFilter","selectedFilterType","labelFormatMatcherNodes","labelFormatMatcherNode","formatMetricExpr","childNode","formatRangeAggregationExpr","formatVectorAggregationExpr","formatBinOpExpr","formatLiteralExpr","formatLabelReplaceExpr","formatVectorExpr","formatLogRangeExpr","formatGrouping","durationNode","array","previousNode","hasNumber","metricNode","leftExpr","rightExpr","expressionNode","addNode","formatLokiQuery"],"sourceRoot":""}