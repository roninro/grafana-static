{"version":3,"file":"860.464f9be6ae1e7a67837b.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/export/FileExportPreview.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaExportDrawer.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/providers.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/RuleFolderPicker.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/FolderAndGroup.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/GrafanaAlertStatePicker.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/GrafanaEvaluationBehavior.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/RuleInspector.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/dag.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/util.ts","webpack://grafana/./public/app/features/alerting/unified/components/InvalidIntervalWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/EditRuleGroupModal.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useURLSearchParams.ts","webpack://grafana/./public/app/features/alerting/unified/utils/accessControlHooks.ts","webpack://grafana/./public/app/features/expressions/guards.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport saveAs from 'file-saver';\nimport React, { useCallback, useMemo } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, ClipboardButton, CodeEditor, useStyles2 } from '@grafana/ui';\n\nimport { allGrafanaExportProviders, ExportFormats } from './providers';\n\ninterface FileExportPreviewProps {\n  format: ExportFormats;\n  textDefinition: string;\n\n  /*** Filename without extension ***/\n  downloadFileName: string;\n  onClose: () => void;\n}\n\nexport function FileExportPreview({ format, textDefinition, downloadFileName, onClose }: FileExportPreviewProps) {\n  const styles = useStyles2(fileExportPreviewStyles);\n\n  const onDownload = useCallback(() => {\n    const blob = new Blob([textDefinition], {\n      type: `application/${format};charset=utf-8`,\n    });\n    saveAs(blob, `${downloadFileName}.${format}`);\n\n    onClose();\n  }, [textDefinition, downloadFileName, format, onClose]);\n\n  const formattedTextDefinition = useMemo(() => {\n    const provider = allGrafanaExportProviders[format];\n    return provider.formatter ? provider.formatter(textDefinition) : textDefinition;\n  }, [format, textDefinition]);\n\n  return (\n    // TODO Handle empty content\n    <div className={styles.container}>\n      <div className={styles.content}>\n        <AutoSizer disableWidth>\n          {({ height }) => (\n            <CodeEditor\n              width=\"100%\"\n              height={height}\n              language={format}\n              value={formattedTextDefinition}\n              monacoOptions={{\n                minimap: {\n                  enabled: false,\n                },\n                lineNumbers: 'on',\n                readOnly: true,\n              }}\n            />\n          )}\n        </AutoSizer>\n      </div>\n      <div className={styles.actions}>\n        <Button variant=\"secondary\" onClick={onClose}>\n          Cancel\n        </Button>\n        <ClipboardButton icon=\"copy\" getText={() => textDefinition}>\n          Copy code\n        </ClipboardButton>\n        <Button icon=\"download-alt\" onClick={onDownload}>\n          Download\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nconst fileExportPreviewStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    gap: ${theme.spacing(2)};\n  `,\n  content: css`\n    flex: 1 1 100%;\n  `,\n  actions: css`\n    flex: 0;\n    justify-content: flex-end;\n    display: flex;\n    gap: ${theme.spacing(1)};\n  `,\n});\n","import React from 'react';\n\nimport { Drawer } from '@grafana/ui';\n\nimport { RuleInspectorTabs } from '../rule-editor/RuleInspector';\n\nimport { ExportFormats, ExportProvider } from './providers';\n\ninterface GrafanaExportDrawerProps {\n  activeTab: ExportFormats;\n  onTabChange: (tab: ExportFormats) => void;\n  children: React.ReactNode;\n  onClose: () => void;\n  formatProviders: Array<ExportProvider<ExportFormats>>;\n  title?: string;\n}\n\nexport function GrafanaExportDrawer({\n  activeTab,\n  onTabChange,\n  children,\n  onClose,\n  formatProviders,\n  title = 'Export',\n}: GrafanaExportDrawerProps) {\n  const grafanaRulesTabs = Object.values(formatProviders).map((provider) => ({\n    label: provider.name,\n    value: provider.exportFormat,\n  }));\n  return (\n    <Drawer\n      title={title}\n      subtitle=\"Select the format and download the file or copy the contents to clipboard\"\n      tabs={\n        <RuleInspectorTabs<ExportFormats> tabs={grafanaRulesTabs} setActiveTab={onTabChange} activeTab={activeTab} />\n      }\n      onClose={onClose}\n      size=\"md\"\n    >\n      {children}\n    </Drawer>\n  );\n}\n","export interface ExportProvider<TFormat> {\n  name: string;\n  exportFormat: TFormat;\n  formatter?: (raw: string) => string;\n}\n\nexport const JsonExportProvider: ExportProvider<'json'> = {\n  name: 'JSON',\n  exportFormat: 'json',\n  formatter: (raw: string) => {\n    try {\n      return JSON.stringify(JSON.parse(raw), null, 4);\n    } catch (e) {\n      return raw;\n    }\n  },\n};\n\nexport const YamlExportProvider: ExportProvider<'yaml'> = {\n  name: 'YAML',\n  exportFormat: 'yaml',\n};\n\nexport const HclExportProvider: ExportProvider<'hcl'> = {\n  name: 'Terraform (HCL)',\n  exportFormat: 'hcl',\n};\n\nexport const allGrafanaExportProviders = {\n  [JsonExportProvider.exportFormat]: JsonExportProvider,\n  [YamlExportProvider.exportFormat]: YamlExportProvider,\n  [HclExportProvider.exportFormat]: HclExportProvider,\n} as const;\n\nexport const jsonAndYamlGrafanaExportProviders = [JsonExportProvider, YamlExportProvider];\n\nexport type ExportFormats = keyof typeof allGrafanaExportProviders;\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Icon, Tooltip, useStyles2 } from '@grafana/ui';\nimport { OldFolderPicker, Props as FolderPickerProps } from 'app/core/components/Select/OldFolderPicker';\nimport { PermissionLevelString, SearchQueryType } from 'app/types';\n\nimport { FolderWarning, CustomAdd } from '../../../../../core/components/Select/OldFolderPicker';\n\nexport interface Folder {\n  title: string;\n  uid: string;\n}\n\nexport interface RuleFolderPickerProps extends Omit<FolderPickerProps, 'initialTitle' | 'initialFolderId'> {\n  value?: Folder;\n}\n\nconst SlashesWarning = () => {\n  const styles = useStyles2(getStyles);\n  const onClick = () => window.open('https://github.com/grafana/grafana/issues/42947', '_blank');\n  return (\n    <Stack gap={0.5}>\n      <div className={styles.slashNotAllowed}>Folders with &apos;/&apos; character are not allowed.</div>\n      <Tooltip placement=\"top\" content={'Link to the Github issue'} theme=\"info\">\n        <Icon name=\"info-circle\" size=\"xs\" className={styles.infoIcon} onClick={onClick} />\n      </Tooltip>\n    </Stack>\n  );\n};\n\nexport const containsSlashes = (str: string): boolean => str.indexOf('/') !== -1;\n\nexport function RuleFolderPicker(props: RuleFolderPickerProps) {\n  const { value } = props;\n  const warningCondition = (folderName: string) => containsSlashes(folderName);\n\n  const folderWarning: FolderWarning = {\n    warningCondition: warningCondition,\n    warningComponent: SlashesWarning,\n  };\n\n  const customAdd: CustomAdd = {\n    disallowValues: true,\n    isAllowedValue: (value) => !containsSlashes(value),\n  };\n\n  return (\n    <OldFolderPicker\n      showRoot={false}\n      rootName=\"\"\n      allowEmpty={true}\n      initialTitle={value?.title}\n      initialFolderUid={value?.uid}\n      searchQueryType={SearchQueryType.AlertFolder}\n      {...props}\n      permissionLevel={PermissionLevelString.Edit}\n      customAdd={customAdd}\n      folderWarning={folderWarning}\n    />\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  slashNotAllowed: css`\n    color: ${theme.colors.warning.main};\n    font-size: 12px;\n    margin-bottom: 2px;\n  `,\n  infoIcon: css`\n    color: ${theme.colors.warning.main};\n    font-size: 12px;\n    margin-bottom: 2px;\n    cursor: pointer;\n  `,\n});\n","import { css } from '@emotion/css';\nimport { debounce, take, uniqueId } from 'lodash';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { FormProvider, useForm, useFormContext } from 'react-hook-form';\n\nimport { AppEvents, GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { AsyncSelect, Button, Field, Input, InputControl, Label, Modal, Text, useStyles2 } from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { createFolder } from 'app/features/manage-dashboards/state/actions';\nimport { AccessControlAction, useDispatch } from 'app/types';\nimport { CombinedRuleGroup } from 'app/types/unified-alerting';\nimport { RulerRulesConfigDTO } from 'app/types/unified-alerting-dto';\n\nimport { useCombinedRuleNamespaces } from '../../hooks/useCombinedRuleNamespaces';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { fetchRulerRulesAction } from '../../state/actions';\nimport { RuleFormValues } from '../../types/rule-form';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { MINUTE } from '../../utils/rule-form';\nimport { isGrafanaRulerRule } from '../../utils/rules';\nimport { ProvisioningBadge } from '../Provisioning';\nimport { evaluateEveryValidationOptions } from '../rules/EditRuleGroupModal';\n\nimport { containsSlashes, Folder, RuleFolderPicker } from './RuleFolderPicker';\nimport { checkForPathSeparator } from './util';\n\nexport const MAX_GROUP_RESULTS = 1000;\n\nexport const useFolderGroupOptions = (folderTitle: string, enableProvisionedGroups: boolean) => {\n  const dispatch = useDispatch();\n\n  // fetch the ruler rules from the database so we can figure out what other \"groups\" are already defined\n  // for our folders\n  useEffect(() => {\n    dispatch(fetchRulerRulesAction({ rulesSourceName: GRAFANA_RULES_SOURCE_NAME }));\n  }, [dispatch]);\n\n  const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n  const groupfoldersForGrafana = rulerRuleRequests[GRAFANA_RULES_SOURCE_NAME];\n\n  const grafanaFolders = useCombinedRuleNamespaces(GRAFANA_RULES_SOURCE_NAME);\n  const folderGroups = grafanaFolders.find((f) => f.name === folderTitle)?.groups ?? [];\n\n  const groupOptions = folderGroups\n    .map<SelectableValue<string>>((group) => {\n      const isProvisioned = isProvisionedGroup(group);\n      return {\n        label: group.name,\n        value: group.name,\n        description: group.interval ?? MINUTE,\n        // we include provisioned folders, but disable the option to select them\n        isDisabled: !enableProvisionedGroups ? isProvisioned : false,\n        isProvisioned: isProvisioned,\n      };\n    })\n\n    .sort(sortByLabel);\n\n  return { groupOptions, loading: groupfoldersForGrafana?.loading };\n};\n\nconst isProvisionedGroup = (group: CombinedRuleGroup) => {\n  return group.rules.some(\n    (rule) => isGrafanaRulerRule(rule.rulerRule) && Boolean(rule.rulerRule.grafana_alert.provenance) === true\n  );\n};\n\nconst sortByLabel = (a: SelectableValue<string>, b: SelectableValue<string>) => {\n  return a.label?.localeCompare(b.label ?? '') || 0;\n};\n\nconst findGroupMatchingLabel = (group: SelectableValue<string>, query: string) => {\n  return group.label?.toLowerCase().includes(query.toLowerCase());\n};\n\nexport function FolderAndGroup({\n  groupfoldersForGrafana,\n  enableProvisionedGroups,\n}: {\n  groupfoldersForGrafana?: RulerRulesConfigDTO | null;\n  enableProvisionedGroups: boolean;\n}) {\n  const {\n    formState: { errors },\n    watch,\n    setValue,\n    control,\n  } = useFormContext<RuleFormValues>();\n\n  const styles = useStyles2(getStyles);\n\n  const folder = watch('folder');\n  const group = watch('group');\n\n  const { groupOptions, loading } = useFolderGroupOptions(folder?.title ?? '', enableProvisionedGroups);\n\n  const [isCreatingFolder, setIsCreatingFolder] = useState(false);\n  const [isCreatingEvaluationGroup, setIsCreatingEvaluationGroup] = useState(false);\n\n  const onOpenFolderCreationModal = () => setIsCreatingFolder(true);\n  const onOpenEvaluationGroupCreationModal = () => setIsCreatingEvaluationGroup(true);\n\n  const handleFolderCreation = (folder: Folder) => {\n    resetGroup();\n    setValue('folder', folder);\n    setIsCreatingFolder(false);\n  };\n\n  const handleEvalGroupCreation = (groupName: string, evaluationInterval: string) => {\n    setValue('group', groupName);\n    setValue('evaluateEvery', evaluationInterval);\n    setIsCreatingEvaluationGroup(false);\n  };\n\n  const resetGroup = useCallback(() => {\n    setValue('group', '');\n  }, [setValue]);\n\n  const getOptions = useCallback(\n    async (query: string) => {\n      const results = query ? groupOptions.filter((group) => findGroupMatchingLabel(group, query)) : groupOptions;\n      return take(results, MAX_GROUP_RESULTS);\n    },\n    [groupOptions]\n  );\n\n  const debouncedSearch = useMemo(() => {\n    return debounce(getOptions, 300, { leading: true });\n  }, [getOptions]);\n\n  const defaultGroupValue = group ? { value: group, label: group } : undefined;\n\n  return (\n    <div className={styles.container}>\n      <div>\n        {\n          <Field\n            label={\n              <Label htmlFor=\"folder\" description={'Select a folder to store your rule.'}>\n                Folder\n              </Label>\n            }\n            className={styles.formInput}\n            error={errors.folder?.message}\n            invalid={!!errors.folder?.message}\n            data-testid=\"folder-picker\"\n          >\n            <Stack direction=\"row\" alignItems=\"center\">\n              {(!isCreatingFolder && (\n                <>\n                  <InputControl\n                    render={({ field: { ref, ...field } }) => (\n                      <div style={{ width: 420 }}>\n                        <RuleFolderPicker\n                          inputId=\"folder\"\n                          {...field}\n                          enableReset={true}\n                          onChange={({ title, uid }) => {\n                            field.onChange({ title, uid });\n                            resetGroup();\n                          }}\n                        />\n                      </div>\n                    )}\n                    name=\"folder\"\n                    rules={{\n                      required: { value: true, message: 'Select a folder' },\n                      validate: {\n                        pathSeparator: (folder: Folder) => checkForPathSeparator(folder.title),\n                      },\n                    }}\n                  />\n                  <Text color=\"secondary\">or</Text>\n                  <Button\n                    onClick={onOpenFolderCreationModal}\n                    type=\"button\"\n                    icon=\"plus\"\n                    fill=\"outline\"\n                    variant=\"secondary\"\n                    disabled={!contextSrv.hasPermission(AccessControlAction.FoldersCreate)}\n                  >\n                    New folder\n                  </Button>\n                </>\n              )) || <div>Creating new folder...</div>}\n            </Stack>\n          </Field>\n        }\n        {isCreatingFolder && (\n          <FolderCreationModal onCreate={handleFolderCreation} onClose={() => setIsCreatingFolder(false)} />\n        )}\n      </div>\n\n      <div>\n        <Field\n          label=\"Evaluation group\"\n          data-testid=\"group-picker\"\n          description=\"Rules within the same group are evaluated sequentially over the same time interval.\"\n          className={styles.formInput}\n          error={errors.group?.message}\n          invalid={!!errors.group?.message}\n        >\n          <Stack direction=\"row\" alignItems=\"center\">\n            <InputControl\n              render={({ field: { ref, ...field }, fieldState }) => (\n                <div style={{ width: 420 }}>\n                  <AsyncSelect\n                    disabled={!folder || loading}\n                    inputId=\"group\"\n                    key={uniqueId()}\n                    {...field}\n                    onChange={(group) => {\n                      field.onChange(group.label ?? '');\n                    }}\n                    isLoading={loading}\n                    invalid={Boolean(folder) && !group && Boolean(fieldState.error)}\n                    loadOptions={debouncedSearch}\n                    cacheOptions\n                    loadingMessage={'Loading groups...'}\n                    defaultValue={defaultGroupValue}\n                    defaultOptions={groupOptions}\n                    getOptionLabel={(option: SelectableValue<string>) => (\n                      <div>\n                        <span>{option.label}</span>\n                        {option['isProvisioned'] && (\n                          <>\n                            {' '}\n                            <ProvisioningBadge />\n                          </>\n                        )}\n                      </div>\n                    )}\n                    placeholder={'Select an evaluation group...'}\n                  />\n                </div>\n              )}\n              name=\"group\"\n              control={control}\n              rules={{\n                required: { value: true, message: 'Must enter a group name' },\n                validate: {\n                  pathSeparator: (group_: string) => checkForPathSeparator(group_),\n                },\n              }}\n            />\n            <Text color=\"secondary\">or</Text>\n            <Button\n              onClick={onOpenEvaluationGroupCreationModal}\n              type=\"button\"\n              icon=\"plus\"\n              fill=\"outline\"\n              variant=\"secondary\"\n              disabled={!folder}\n            >\n              New evaluation group\n            </Button>\n          </Stack>\n        </Field>\n        {isCreatingEvaluationGroup && (\n          <EvaluationGroupCreationModal\n            onCreate={handleEvalGroupCreation}\n            onClose={() => setIsCreatingEvaluationGroup(false)}\n            groupfoldersForGrafana={groupfoldersForGrafana}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction FolderCreationModal({\n  onClose,\n  onCreate,\n}: {\n  onClose: () => void;\n  onCreate: (folder: Folder) => void;\n}): React.ReactElement {\n  const styles = useStyles2(getStyles);\n\n  const [title, setTitle] = useState('');\n  const onSubmit = async () => {\n    const newFolder = await createFolder({ title: title });\n    if (!newFolder.uid) {\n      appEvents.emit(AppEvents.alertError, ['Folder could not be created']);\n      return;\n    }\n\n    const folder: Folder = { title: newFolder.title, uid: newFolder.uid };\n    onCreate(folder);\n    appEvents.emit(AppEvents.alertSuccess, ['Folder Created', 'OK']);\n  };\n\n  const error = containsSlashes(title);\n\n  return (\n    <Modal className={styles.modal} isOpen={true} title={'New folder'} onDismiss={onClose} onClickBackdrop={onClose}>\n      <div className={styles.modalTitle}>Create a new folder to store your rule</div>\n\n      <form onSubmit={onSubmit}>\n        <Field\n          label={<Label htmlFor=\"folder\">Folder name</Label>}\n          error={\"The folder name can't contain slashes\"}\n          invalid={error}\n        >\n          <Input\n            autoFocus={true}\n            id=\"folderName\"\n            placeholder=\"Enter a name\"\n            value={title}\n            onChange={(e) => setTitle(e.currentTarget.value)}\n            className={styles.formInput}\n          />\n        </Field>\n\n        <Modal.ButtonRow>\n          <Button variant=\"secondary\" type=\"button\" onClick={onClose}>\n            Cancel\n          </Button>\n          <Button type=\"submit\" disabled={!title || error}>\n            Create\n          </Button>\n        </Modal.ButtonRow>\n      </form>\n    </Modal>\n  );\n}\n\nfunction EvaluationGroupCreationModal({\n  onClose,\n  onCreate,\n  groupfoldersForGrafana,\n}: {\n  onClose: () => void;\n  onCreate: (group: string, evaluationInterval: string) => void;\n  groupfoldersForGrafana?: RulerRulesConfigDTO | null;\n}): React.ReactElement {\n  const styles = useStyles2(getStyles);\n  const onSubmit = () => {\n    onCreate(getValues('group'), getValues('evaluateEvery'));\n  };\n\n  const { watch } = useFormContext<RuleFormValues>();\n\n  const evaluateEveryId = 'eval-every-input';\n  const [groupName, folderName] = watch(['group', 'folder.title']);\n\n  const groupRules =\n    (groupfoldersForGrafana && groupfoldersForGrafana[folderName]?.find((g) => g.name === groupName)?.rules) ?? [];\n\n  const onCancel = () => {\n    onClose();\n  };\n\n  const formAPI = useForm({\n    defaultValues: { group: '', evaluateEvery: '' },\n    mode: 'onChange',\n    shouldFocusError: true,\n  });\n\n  const { register, handleSubmit, formState, getValues } = formAPI;\n\n  return (\n    <Modal\n      className={styles.modal}\n      isOpen={true}\n      title={'New evaluation group'}\n      onDismiss={onCancel}\n      onClickBackdrop={onCancel}\n    >\n      <div className={styles.modalTitle}>Create a new evaluation group to use for this alert rule.</div>\n\n      <FormProvider {...formAPI}>\n        <form onSubmit={handleSubmit(() => onSubmit())}>\n          <Field\n            label={<Label htmlFor={'group'}>Evaluation group name</Label>}\n            error={formState.errors.group?.message}\n            invalid={!!formState.errors.group}\n          >\n            <Input\n              className={styles.formInput}\n              autoFocus={true}\n              id={'group'}\n              placeholder=\"Enter a name\"\n              {...register('group', { required: { value: true, message: 'Required.' } })}\n            />\n          </Field>\n\n          <Field\n            error={formState.errors.evaluateEvery?.message}\n            invalid={!!formState.errors.evaluateEvery}\n            label={\n              <Label\n                htmlFor={evaluateEveryId}\n                description=\"How often is the rule evaluated. Applies to every rule within the group.\"\n              >\n                Evaluation interval\n              </Label>\n            }\n          >\n            <Input\n              className={styles.formInput}\n              id={evaluateEveryId}\n              placeholder=\"e.g. 5m\"\n              {...register('evaluateEvery', evaluateEveryValidationOptions(groupRules))}\n            />\n          </Field>\n          <Modal.ButtonRow>\n            <Button variant=\"secondary\" type=\"button\" onClick={onCancel}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={!formState.isValid}>\n              Create\n            </Button>\n          </Modal.ButtonRow>\n        </form>\n      </FormProvider>\n    </Modal>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: flex;\n    flex-direction: column;\n    align-items: baseline;\n    max-width: ${theme.breakpoints.values.lg}px;\n    justify-content: space-between;\n  `,\n  formInput: css`\n    flex-grow: 1;\n  `,\n  modal: css`\n    width: ${theme.breakpoints.values.sm}px;\n  `,\n  modalTitle: css`\n    color: ${theme.colors.text.secondary};\n    margin-bottom: ${theme.spacing(2)};\n  `,\n});\n","import React, { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\nimport { SelectBaseProps } from '@grafana/ui/src/components/Select/types';\nimport { GrafanaAlertStateDecision } from 'app/types/unified-alerting-dto';\n\ntype Props = Omit<SelectBaseProps<GrafanaAlertStateDecision>, 'options'> & {\n  includeNoData: boolean;\n  includeError: boolean;\n};\n\nconst options: SelectableValue[] = [\n  { value: GrafanaAlertStateDecision.Alerting, label: 'Alerting' },\n  { value: GrafanaAlertStateDecision.NoData, label: 'No Data' },\n  { value: GrafanaAlertStateDecision.OK, label: 'OK' },\n  { value: GrafanaAlertStateDecision.Error, label: 'Error' },\n];\n\nexport const GrafanaAlertStatePicker = ({ includeNoData, includeError, ...props }: Props) => {\n  const opts = useMemo(() => {\n    if (!includeNoData) {\n      return options.filter((opt) => opt.value !== GrafanaAlertStateDecision.NoData);\n    }\n    if (!includeError) {\n      return options.filter((opt) => opt.value !== GrafanaAlertStateDecision.Error);\n    }\n    return options;\n  }, [includeNoData, includeError]);\n  return <Select options={opts} {...props} />;\n};\n","import { css } from '@emotion/css';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { RegisterOptions, useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Field, Icon, IconButton, Input, InputControl, Label, Switch, Text, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { CombinedRuleGroup, CombinedRuleNamespace } from '../../../../../types/unified-alerting';\nimport { logInfo, LogMessages } from '../../Analytics';\nimport { useCombinedRuleNamespaces } from '../../hooks/useCombinedRuleNamespaces';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { RuleFormValues } from '../../types/rule-form';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { parsePrometheusDuration } from '../../utils/time';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { EditCloudGroupModal } from '../rules/EditRuleGroupModal';\n\nimport { FolderAndGroup, useFolderGroupOptions } from './FolderAndGroup';\nimport { GrafanaAlertStatePicker } from './GrafanaAlertStatePicker';\nimport { NeedHelpInfo } from './NeedHelpInfo';\nimport { RuleEditorSection } from './RuleEditorSection';\n\nexport const MIN_TIME_RANGE_STEP_S = 10; // 10 seconds\n\nconst forValidationOptions = (evaluateEvery: string): RegisterOptions => ({\n  required: {\n    value: true,\n    message: 'Required.',\n  },\n  validate: (value: string) => {\n    // parsePrometheusDuration does not allow 0 but does allow 0s\n    if (value === '0') {\n      return true;\n    }\n\n    try {\n      const millisFor = parsePrometheusDuration(value);\n\n      // 0 is a special value meaning for equals evaluation interval\n      if (millisFor === 0) {\n        return true;\n      }\n\n      try {\n        const millisEvery = parsePrometheusDuration(evaluateEvery);\n        return millisFor >= millisEvery\n          ? true\n          : 'For duration must be greater than or equal to the evaluation interval.';\n      } catch (err) {\n        // if we fail to parse \"every\", assume validation is successful, or the error messages\n        // will overlap in the UI\n        return true;\n      }\n    } catch (error) {\n      return error instanceof Error ? error.message : 'Failed to parse duration';\n    }\n  },\n});\n\nconst useIsNewGroup = (folder: string, group: string) => {\n  const { groupOptions } = useFolderGroupOptions(folder, false);\n\n  const groupIsInGroupOptions = useCallback(\n    (group_: string) => groupOptions.some((groupInList: SelectableValue<string>) => groupInList.label === group_),\n    [groupOptions]\n  );\n  return !groupIsInGroupOptions(group);\n};\n\nfunction FolderGroupAndEvaluationInterval({\n  evaluateEvery,\n  setEvaluateEvery,\n  enableProvisionedGroups,\n}: {\n  evaluateEvery: string;\n  setEvaluateEvery: (value: string) => void;\n  enableProvisionedGroups: boolean;\n}) {\n  const styles = useStyles2(getStyles);\n  const { watch, setValue, getValues } = useFormContext<RuleFormValues>();\n  const [isEditingGroup, setIsEditingGroup] = useState(false);\n\n  const [groupName, folderName] = watch(['group', 'folder.title']);\n\n  const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n  const groupfoldersForGrafana = rulerRuleRequests[GRAFANA_RULES_SOURCE_NAME];\n\n  const grafanaNamespaces = useCombinedRuleNamespaces(GRAFANA_RULES_SOURCE_NAME);\n  const existingNamespace = grafanaNamespaces.find((ns) => ns.name === folderName);\n  const existingGroup = existingNamespace?.groups.find((g) => g.name === groupName);\n\n  const isNewGroup = useIsNewGroup(folderName ?? '', groupName);\n\n  useEffect(() => {\n    if (!isNewGroup && existingGroup?.interval) {\n      setEvaluateEvery(existingGroup.interval);\n    }\n  }, [setEvaluateEvery, isNewGroup, setValue, existingGroup]);\n\n  const closeEditGroupModal = (saved = false) => {\n    if (!saved) {\n      logInfo(LogMessages.leavingRuleGroupEdit);\n    }\n    setIsEditingGroup(false);\n  };\n\n  const onOpenEditGroupModal = () => setIsEditingGroup(true);\n\n  const editGroupDisabled = groupfoldersForGrafana?.loading || isNewGroup || !folderName || !groupName;\n\n  const emptyNamespace: CombinedRuleNamespace = {\n    name: folderName,\n    rulesSource: GRAFANA_RULES_SOURCE_NAME,\n    groups: [],\n  };\n  const emptyGroup: CombinedRuleGroup = { name: groupName, interval: evaluateEvery, rules: [], totals: {} };\n\n  return (\n    <div>\n      <FolderAndGroup\n        groupfoldersForGrafana={groupfoldersForGrafana?.result}\n        enableProvisionedGroups={enableProvisionedGroups}\n      />\n      {folderName && isEditingGroup && (\n        <EditCloudGroupModal\n          namespace={existingNamespace ?? emptyNamespace}\n          group={existingGroup ?? emptyGroup}\n          onClose={() => closeEditGroupModal()}\n          intervalEditOnly\n          hideFolder={true}\n        />\n      )}\n      {folderName && groupName && (\n        <div className={styles.evaluationContainer}>\n          <Stack direction=\"column\" gap={0}>\n            <div className={styles.marginTop}>\n              <Stack direction=\"column\" gap={1}>\n                {getValues('group') && getValues('evaluateEvery') && (\n                  <span>\n                    All rules in the selected group are evaluated every {evaluateEvery}.{' '}\n                    {!isNewGroup && (\n                      <IconButton\n                        name=\"pen\"\n                        aria-label=\"Edit\"\n                        disabled={editGroupDisabled}\n                        onClick={onOpenEditGroupModal}\n                      />\n                    )}\n                  </span>\n                )}\n              </Stack>\n            </div>\n          </Stack>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction ForInput({ evaluateEvery }: { evaluateEvery: string }) {\n  const styles = useStyles2(getStyles);\n  const {\n    register,\n    formState: { errors },\n  } = useFormContext<RuleFormValues>();\n\n  const evaluateForId = 'eval-for-input';\n\n  return (\n    <Stack direction=\"row\" justify-content=\"flex-start\" align-items=\"flex-start\">\n      <Field\n        label={\n          <Label\n            htmlFor=\"evaluateFor\"\n            description=\"Period in which an alert rule can be in breach of the condition until the alert rule fires.\"\n          >\n            Pending period\n          </Label>\n        }\n        className={styles.inlineField}\n        error={errors.evaluateFor?.message}\n        invalid={!!errors.evaluateFor?.message}\n        validationMessageHorizontalOverflow={true}\n      >\n        <Input id={evaluateForId} width={8} {...register('evaluateFor', forValidationOptions(evaluateEvery))} />\n      </Field>\n    </Stack>\n  );\n}\n\nfunction getDescription() {\n  const docsLink = 'https://grafana.com/docs/grafana/latest/alerting/fundamentals/alert-rules/rule-evaluation/';\n\n  return (\n    <Stack direction=\"row\" gap={0.5} alignItems=\"baseline\">\n      <Text variant=\"bodySmall\" color=\"secondary\">\n        Define how the alert rule is evaluated.\n      </Text>\n      <NeedHelpInfo\n        contentText=\"Evaluation groups are containers for evaluating alert and recording rules. An evaluation group defines an evaluation interval - how often a rule is checked. Alert rules within the same evaluation group are evaluated sequentially\"\n        externalLink={docsLink}\n        linkText={`Read about evaluation`}\n        title=\"Evaluation\"\n      />\n    </Stack>\n  );\n}\n\nexport function GrafanaEvaluationBehavior({\n  evaluateEvery,\n  setEvaluateEvery,\n  existing,\n  enableProvisionedGroups,\n}: {\n  evaluateEvery: string;\n  setEvaluateEvery: (value: string) => void;\n  existing: boolean;\n  enableProvisionedGroups: boolean;\n}) {\n  const styles = useStyles2(getStyles);\n  const [showErrorHandling, setShowErrorHandling] = useState(false);\n\n  const { watch, setValue } = useFormContext<RuleFormValues>();\n\n  const isPaused = watch('isPaused');\n\n  return (\n    // TODO remove \"and alert condition\" for recording rules\n    <RuleEditorSection stepNo={3} title=\"Set evaluation behavior\" description={getDescription()}>\n      <Stack direction=\"column\" justify-content=\"flex-start\" align-items=\"flex-start\">\n        <FolderGroupAndEvaluationInterval\n          setEvaluateEvery={setEvaluateEvery}\n          evaluateEvery={evaluateEvery}\n          enableProvisionedGroups={enableProvisionedGroups}\n        />\n        <ForInput evaluateEvery={evaluateEvery} />\n\n        {existing && (\n          <Field htmlFor=\"pause-alert-switch\">\n            <InputControl\n              render={() => (\n                <Stack gap={1} direction=\"row\" alignItems=\"center\">\n                  <Switch\n                    id=\"pause-alert\"\n                    onChange={(value) => {\n                      setValue('isPaused', value.currentTarget.checked);\n                    }}\n                    value={Boolean(isPaused)}\n                  />\n                  <label htmlFor=\"pause-alert\" className={styles.switchLabel}>\n                    Pause evaluation\n                    <Tooltip placement=\"top\" content=\"Turn on to pause evaluation for this alert rule.\" theme={'info'}>\n                      <Icon tabIndex={0} name=\"info-circle\" size=\"sm\" className={styles.infoIcon} />\n                    </Tooltip>\n                  </label>\n                </Stack>\n              )}\n              name=\"isPaused\"\n            />\n          </Field>\n        )}\n      </Stack>\n      <CollapseToggle\n        isCollapsed={!showErrorHandling}\n        onToggle={(collapsed) => setShowErrorHandling(!collapsed)}\n        text=\"Configure no data and error handling\"\n      />\n      {showErrorHandling && (\n        <>\n          <Field htmlFor=\"no-data-state-input\" label=\"Alert state if no data or all values are null\">\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <GrafanaAlertStatePicker\n                  {...field}\n                  inputId=\"no-data-state-input\"\n                  width={42}\n                  includeNoData={true}\n                  includeError={false}\n                  onChange={(value) => onChange(value?.value)}\n                />\n              )}\n              name=\"noDataState\"\n            />\n          </Field>\n          <Field htmlFor=\"exec-err-state-input\" label=\"Alert state if execution error or timeout\">\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <GrafanaAlertStatePicker\n                  {...field}\n                  inputId=\"exec-err-state-input\"\n                  width={42}\n                  includeNoData={false}\n                  includeError={true}\n                  onChange={(value) => onChange(value?.value)}\n                />\n              )}\n              name=\"execErrState\"\n            />\n          </Field>\n        </>\n      )}\n    </RuleEditorSection>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  inlineField: css`\n    margin-bottom: 0;\n  `,\n  evaluateLabel: css`\n    margin-right: ${theme.spacing(1)};\n  `,\n  evaluationContainer: css`\n    color: ${theme.colors.text.secondary};\n    max-width: ${theme.breakpoints.values.sm}px;\n    font-size: ${theme.typography.size.sm};\n  `,\n  intervalChangedLabel: css`\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  warningIcon: css`\n    justify-self: center;\n    margin-right: ${theme.spacing(1)};\n    color: ${theme.colors.warning.text};\n  `,\n  infoIcon: css`\n    margin-left: 10px;\n  `,\n  warningMessage: css`\n    color: ${theme.colors.warning.text};\n  `,\n  bold: css`\n    font-weight: bold;\n  `,\n  alignInterval: css`\n    margin-top: ${theme.spacing(1)};\n    margin-left: -${theme.spacing(1)};\n  `,\n  marginTop: css`\n    margin-top: ${theme.spacing(1)};\n  `,\n  switchLabel: css(`\n    color: ${theme.colors.text.primary},\n    cursor: 'pointer',\n    fontSize: ${theme.typography.bodySmall.fontSize},\n  `),\n});\n","import { css } from '@emotion/css';\nimport { dump, load } from 'js-yaml';\nimport React, { useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, CodeEditor, Drawer, Icon, Tab, TabsBar, useStyles2, Tooltip } from '@grafana/ui';\n\nimport { RulerRuleDTO } from '../../../../../types/unified-alerting-dto';\nimport { RuleFormValues } from '../../types/rule-form';\nimport {\n  alertingRulerRuleToRuleForm,\n  formValuesToRulerRuleDTO,\n  recordingRulerRuleToRuleForm,\n} from '../../utils/rule-form';\nimport { isAlertingRulerRule, isRecordingRulerRule } from '../../utils/rules';\n\ninterface Props {\n  onClose: () => void;\n}\n\nconst cloudRulesTabs = [{ label: 'Yaml', value: 'yaml' }];\n\nexport const RuleInspector = ({ onClose }: Props) => {\n  const [activeTab, setActiveTab] = useState('yaml');\n  const { setValue } = useFormContext<RuleFormValues>();\n  const styles = useStyles2(drawerStyles);\n\n  const onApply = (formValues: RuleFormValues) => {\n    // Need to loop through all values and set them individually\n    // TODO this is not type-safe :(\n    for (const key in formValues) {\n      // @ts-ignore\n      setValue(key, formValues[key]);\n    }\n    onClose();\n  };\n\n  return (\n    <Drawer\n      title=\"Inspect Alert rule\"\n      subtitle={\n        <div className={styles.subtitle}>\n          <RuleInspectorTabs tabs={cloudRulesTabs} setActiveTab={setActiveTab} activeTab={activeTab} />\n        </div>\n      }\n      onClose={onClose}\n    >\n      {activeTab === 'yaml' && <InspectorYamlTab onSubmit={onApply} />}\n    </Drawer>\n  );\n};\n\ninterface RuleInspectorTabsProps<T = string> {\n  tabs: Array<{ label: string; value: T }>;\n  activeTab: T;\n  setActiveTab: (tab: T) => void;\n}\n\nexport function RuleInspectorTabs<T extends string>({ tabs, activeTab, setActiveTab }: RuleInspectorTabsProps<T>) {\n  return (\n    <TabsBar>\n      {tabs.map((tab, index) => {\n        return (\n          <Tab\n            key={`${tab.value}-${index}`}\n            label={tab.label}\n            value={tab.value}\n            onChangeTab={() => setActiveTab(tab.value)}\n            active={activeTab === tab.value}\n          />\n        );\n      })}\n    </TabsBar>\n  );\n}\n\ninterface YamlTabProps {\n  onSubmit: (newModel: RuleFormValues) => void;\n}\n\nconst InspectorYamlTab = ({ onSubmit }: YamlTabProps) => {\n  const styles = useStyles2(yamlTabStyle);\n  const { getValues } = useFormContext<RuleFormValues>();\n\n  const yamlValues = formValuesToRulerRuleDTO(getValues());\n  const [alertRuleAsYaml, setAlertRuleAsYaml] = useState(dump(yamlValues));\n\n  const onApply = () => {\n    const rulerRule = load(alertRuleAsYaml) as RulerRuleDTO;\n    const currentFormValues = getValues();\n\n    const yamlFormValues = rulerRuleToRuleFormValues(rulerRule);\n    onSubmit({ ...currentFormValues, ...yamlFormValues });\n  };\n\n  return (\n    <>\n      <div className={styles.applyButton}>\n        <Button type=\"button\" onClick={onApply}>\n          Apply\n        </Button>\n        <Tooltip content={<YamlContentInfo />} theme=\"info\" placement=\"left-start\" interactive={true}>\n          <Icon name=\"exclamation-triangle\" size=\"xl\" />\n        </Tooltip>\n      </div>\n\n      <div className={styles.content}>\n        <AutoSizer disableWidth>\n          {({ height }) => (\n            <CodeEditor\n              width=\"100%\"\n              height={height}\n              language=\"yaml\"\n              value={alertRuleAsYaml}\n              onBlur={setAlertRuleAsYaml}\n              monacoOptions={{\n                minimap: {\n                  enabled: false,\n                },\n              }}\n            />\n          )}\n        </AutoSizer>\n      </div>\n    </>\n  );\n};\n\nfunction YamlContentInfo() {\n  return (\n    <div>\n      The YAML content in the editor only contains alert rule configuration <br />\n      To configure Prometheus, you need to provide the rest of the{' '}\n      <a\n        href=\"https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        configuration file content.\n      </a>\n    </div>\n  );\n}\n\nfunction rulerRuleToRuleFormValues(rulerRule: RulerRuleDTO): Partial<RuleFormValues> {\n  if (isAlertingRulerRule(rulerRule)) {\n    return alertingRulerRuleToRuleForm(rulerRule);\n  } else if (isRecordingRulerRule(rulerRule)) {\n    return recordingRulerRuleToRuleForm(rulerRule);\n  }\n\n  return {};\n}\n\nexport const yamlTabStyle = (theme: GrafanaTheme2) => ({\n  content: css`\n    flex-grow: 1;\n    height: 100%;\n    padding-bottom: 16px;\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  applyButton: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    flex-grow: 0;\n    margin-bottom: ${theme.spacing(2)};\n  `,\n});\n\nexport const drawerStyles = () => ({\n  subtitle: css`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n  `,\n});\n","import { compact, memoize, uniq } from 'lodash';\nimport memoizeOne from 'memoize-one';\n\nimport { Edge, Graph, Node } from 'app/core/utils/dag';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\n// memoized version of _createDagFromQueries to prevent recreating the DAG if no sources or targets are modified\nexport const createDagFromQueries = memoizeOne(\n  _createDagFromQueries,\n  (previous: Parameters<typeof _createDagFromQueries>, next: Parameters<typeof _createDagFromQueries>) => {\n    return fingerPrintQueries(previous[0]) === fingerPrintQueries(next[0]);\n  }\n);\n\n/**\n * Turn the array of alert queries (this means data queries and expressions)\n * in to a DAG, a directed acyclical graph\n */\nexport function _createDagFromQueries(queries: AlertQuery[]): Graph {\n  const graph = new Graph();\n\n  const nodes = queries.map((query) => query.refId);\n  graph.createNodes(nodes);\n\n  queries.forEach((query) => {\n    const source = query.refId;\n    const isMathExpression = isExpressionQuery(query.model) && query.model.type === 'math';\n\n    // some expressions have multiple targets (like the math expression)\n    const targets = isMathExpression\n      ? parseRefsFromMathExpression(query.model.expression ?? '')\n      : [query.model.expression];\n\n    targets.forEach((target) => {\n      const isSelf = source === target;\n\n      if (source && target && !isSelf) {\n        graph.link(target, source);\n      }\n    });\n  });\n\n  return graph;\n}\n\n/**\n * parse an expression like \"$A > $B\" or \"${FOO BAR} > 0\" to an array of refIds\n */\nexport function parseRefsFromMathExpression(input: string): string[] {\n  // we'll use two regular expressions, one for \"${var}\" and one for \"$var\"\n  const r1 = new RegExp(/\\$\\{(?<var>[a-zA-Z0-9_ ]+?)\\}/gm);\n  const r2 = new RegExp(/\\$(?<var>[a-zA-Z0-9_]+)/gm);\n\n  const m1 = Array.from(input.matchAll(r1)).map((m) => m.groups?.var);\n  const m2 = Array.from(input.matchAll(r2)).map((m) => m.groups?.var);\n\n  return compact(uniq([...m1, ...m2]));\n}\n\nexport const getOriginOfRefId = memoize(_getOriginsOfRefId, (refId, graph) => refId + fingerprintGraph(graph));\n\nexport function _getOriginsOfRefId(refId: string, graph: Graph): string[] {\n  const node = graph.getNode(refId);\n\n  let origins: Node[] = [];\n\n  // recurse through \"node > inputEdges > inputNode\"\n  function findChildNode(node: Node) {\n    const inputEdges = node.inputEdges;\n\n    if (inputEdges.length > 0) {\n      inputEdges.forEach((edge) => {\n        if (edge.inputNode) {\n          findChildNode(edge.inputNode);\n        }\n      });\n    } else {\n      origins?.push(node);\n    }\n  }\n\n  findChildNode(node);\n\n  return origins.map((origin) => origin.name);\n}\n\n// create a unique fingerprint of the DAG\nexport function fingerprintGraph(graph: Graph) {\n  return Object.keys(graph.nodes)\n    .map((name) => {\n      const n = graph.nodes[name];\n      let outputEdges = n.outputEdges.map((e: Edge) => e.outputNode?.name).join(', ');\n      let inputEdges = n.inputEdges.map((e: Edge) => e.inputNode?.name).join(', ');\n      return `${n.name}:${outputEdges}:${inputEdges}`;\n    })\n    .join(' ');\n}\n\n// create a unique fingerprint of the array of queries\nexport function fingerPrintQueries(queries: AlertQuery[]) {\n  return queries\n    .map((query) => {\n      const type = isExpressionQuery(query.model) ? query.model.type : query.queryType;\n      return query.refId + (query.model.expression ?? '') + type;\n    })\n    .join();\n}\n","import { xor } from 'lodash';\nimport { ValidateResult } from 'react-hook-form';\n\nimport {\n  DataFrame,\n  isTimeSeriesFrames,\n  LoadingState,\n  PanelData,\n  ThresholdsConfig,\n  ThresholdsMode,\n} from '@grafana/data';\nimport { GraphTresholdsStyleMode } from '@grafana/schema';\nimport { config } from 'app/core/config';\nimport { EvalFunction } from 'app/features/alerting/state/alertDef';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { ClassicCondition, ExpressionQueryType } from 'app/features/expressions/types';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { RuleFormType } from '../../types/rule-form';\n\nimport { createDagFromQueries, getOriginOfRefId } from './dag';\n\nexport function queriesWithUpdatedReferences(\n  queries: AlertQuery[],\n  previousRefId: string,\n  newRefId: string\n): AlertQuery[] {\n  return queries.map((query) => {\n    if (previousRefId === newRefId) {\n      return query;\n    }\n\n    if (!isExpressionQuery(query.model)) {\n      return query;\n    }\n\n    const isMathExpression = query.model.type === 'math';\n    const isReduceExpression = query.model.type === 'reduce';\n    const isResampleExpression = query.model.type === 'resample';\n    const isClassicExpression = query.model.type === 'classic_conditions';\n    const isThresholdExpression = query.model.type === 'threshold';\n\n    if (isMathExpression) {\n      return {\n        ...query,\n        model: {\n          ...query.model,\n          expression: updateMathExpressionRefs(query.model.expression ?? '', previousRefId, newRefId),\n        },\n      };\n    }\n\n    if (isResampleExpression || isReduceExpression || isThresholdExpression) {\n      const isReferencing = query.model.expression === previousRefId;\n\n      return {\n        ...query,\n        model: {\n          ...query.model,\n          expression: isReferencing ? newRefId : query.model.expression,\n        },\n      };\n    }\n\n    if (isClassicExpression) {\n      const conditions = query.model.conditions?.map((condition) => ({\n        ...condition,\n        query: {\n          ...condition.query,\n          params: condition.query.params.map((param: string) => (param === previousRefId ? newRefId : param)),\n        },\n      }));\n\n      return { ...query, model: { ...query.model, conditions } };\n    }\n\n    return query;\n  });\n}\n\nexport function updateMathExpressionRefs(expression: string, previousRefId: string, newRefId: string): string {\n  const oldExpression = new RegExp('(\\\\$' + previousRefId + '\\\\b)|(\\\\${' + previousRefId + '})', 'gm');\n  const newExpression = '${' + newRefId + '}';\n\n  return expression.replace(oldExpression, newExpression);\n}\n\nexport function refIdExists(queries: AlertQuery[], refId: string | null): boolean {\n  return queries.find((query) => query.refId === refId) !== undefined;\n}\n\n// some gateways (like Istio) will decode \"/\" and \"\\\" characters – this will cause 404 errors for any API call\n// that includes these values in the URL (ie. /my/path%2fto/resource -> /my/path/to/resource)\n//\n// see https://istio.io/latest/docs/ops/best-practices/security/#customize-your-system-on-path-normalization\nexport function checkForPathSeparator(value: string): ValidateResult {\n  const containsPathSeparator = value.includes('/') || value.includes('\\\\');\n  if (containsPathSeparator) {\n    return 'Cannot contain \"/\" or \"\\\\\" characters';\n  }\n\n  return true;\n}\n\n// this function assumes we've already checked if the data passed in to the function is of the alert condition\nexport function errorFromCurrentCondition(data: PanelData): Error | undefined {\n  if (data.series.length === 0) {\n    return;\n  }\n\n  const isTimeSeriesResults = isTimeSeriesFrames(data.series);\n\n  let error;\n  if (isTimeSeriesResults) {\n    error = new Error('You cannot use time series data as an alert condition, consider adding a reduce expression.');\n  }\n\n  return error;\n}\n\nexport function errorFromPreviewData(data: PanelData): Error | undefined {\n  // give preference to QueryErrors\n  if (data.errors?.length) {\n    return new Error(data.errors[0].message);\n  }\n\n  return;\n}\n\nexport function warningFromSeries(series: DataFrame[]): Error | undefined {\n  const notices = series[0]?.meta?.notices ?? [];\n  const warning = notices.find((notice) => notice.severity === 'warning')?.text;\n\n  return warning ? new Error(warning) : undefined;\n}\n\nexport type ThresholdDefinition = {\n  config: ThresholdsConfig;\n  mode: GraphTresholdsStyleMode;\n};\n\nexport type ThresholdDefinitions = Record<string, ThresholdDefinition>;\n\n/**\n * This function will retrieve threshold definitions for the given array of data and expression queries.\n */\nexport function getThresholdsForQueries(queries: AlertQuery[]) {\n  const thresholds: ThresholdDefinitions = {};\n  const SUPPORTED_EXPRESSION_TYPES = [ExpressionQueryType.threshold, ExpressionQueryType.classic];\n\n  for (const query of queries) {\n    if (!isExpressionQuery(query.model)) {\n      continue;\n    }\n\n    // currently only supporting \"threshold\" & \"classic_condition\" expressions\n    if (!SUPPORTED_EXPRESSION_TYPES.includes(query.model.type)) {\n      continue;\n    }\n\n    if (!Array.isArray(query.model.conditions)) {\n      continue;\n    }\n\n    // if any of the conditions are a \"range\" we switch to an \"area\" threshold view and ignore single threshold values\n    // the time series panel does not support both.\n    const hasRangeThreshold = query.model.conditions.some(isRangeCondition);\n\n    query.model.conditions.forEach((condition) => {\n      const threshold = condition.evaluator.params;\n\n      // \"classic_conditions\" use `condition.query.params[]` and \"threshold\" uses `query.model.expression`\n      const refId = condition.query?.params[0] ?? query.model.expression;\n\n      // if an expression hasn't been linked to a data query yet, it won't have a refId\n      if (!refId) {\n        return;\n      }\n\n      const isRangeThreshold = isRangeCondition(condition);\n\n      try {\n        // create a DAG so we can find the origin of the current expression\n        const graph = createDagFromQueries(queries);\n\n        const originRefIDs = getOriginOfRefId(refId, graph);\n        const originQueries = queries.filter((query) => originRefIDs.includes(query.refId));\n\n        originQueries.forEach((originQuery) => {\n          const originRefID = originQuery.refId;\n\n          // check if the origin is a data query\n          const originIsDataQuery = !isExpressionQuery(originQuery?.model);\n\n          // if yes, add threshold config to the refId of the data Query\n          const hasValidOrigin = Boolean(originIsDataQuery && originRefID);\n\n          // create the initial data structure for this origin refId\n          if (originRefID && !thresholds[originRefID]) {\n            thresholds[originRefID] = {\n              config: {\n                mode: ThresholdsMode.Absolute,\n                steps: [],\n              },\n              mode: GraphTresholdsStyleMode.Line,\n            };\n          }\n\n          if (originRefID && hasValidOrigin && !isRangeThreshold && !hasRangeThreshold) {\n            appendSingleThreshold(originRefID, threshold[0]);\n          } else if (originRefID && hasValidOrigin && isRangeThreshold) {\n            appendRangeThreshold(originRefID, threshold, condition.evaluator.type);\n            thresholds[originRefID].mode = GraphTresholdsStyleMode.LineAndArea;\n          }\n        });\n      } catch (err) {\n        console.error('Failed to parse thresholds', err);\n        return;\n      }\n    });\n  }\n\n  function appendSingleThreshold(refId: string, value: number): void {\n    thresholds[refId].config.steps.push(\n      ...[\n        {\n          value: -Infinity,\n          color: 'transparent',\n        },\n        {\n          value: value,\n          color: config.theme2.colors.error.main,\n        },\n      ]\n    );\n  }\n\n  function appendRangeThreshold(refId: string, values: number[], type: EvalFunction): void {\n    if (type === EvalFunction.IsWithinRange) {\n      thresholds[refId].config.steps.push(\n        ...[\n          {\n            value: -Infinity,\n            color: 'transparent',\n          },\n          {\n            value: values[0],\n            color: config.theme2.colors.error.main,\n          },\n          {\n            value: values[1],\n            color: config.theme2.colors.error.main,\n          },\n          {\n            value: values[1],\n            color: 'transparent',\n          },\n        ]\n      );\n    }\n\n    if (type === EvalFunction.IsOutsideRange) {\n      thresholds[refId].config.steps.push(\n        ...[\n          {\n            value: -Infinity,\n            color: config.theme2.colors.error.main,\n          },\n          // we have to duplicate this value, or the graph will not display the handle in the right color\n          {\n            value: values[0],\n            color: config.theme2.colors.error.main,\n          },\n          {\n            value: values[0],\n            color: 'transparent',\n          },\n          {\n            value: values[1],\n            color: config.theme2.colors.error.main,\n          },\n        ]\n      );\n    }\n\n    // now also sort the threshold values, if we don't then they will look weird in the time series panel\n    // TODO this doesn't work for negative values for now, those need to be sorted inverse\n    thresholds[refId].config.steps.sort((a, b) => a.value - b.value);\n\n    // also make sure we remove any \"undefined\" values from our steps in case the threshold config is incomplete\n    thresholds[refId].config.steps = thresholds[refId].config.steps.filter((step) => step.value !== undefined);\n  }\n\n  return thresholds;\n}\n\nfunction isRangeCondition(condition: ClassicCondition) {\n  return (\n    condition.evaluator.type === EvalFunction.IsWithinRange || condition.evaluator.type === EvalFunction.IsOutsideRange\n  );\n}\n\nexport function getStatusMessage(data: PanelData): string | undefined {\n  const genericErrorMessage = 'Failed to fetch data';\n  if (data.state !== LoadingState.Error) {\n    return;\n  }\n\n  const errors = data.errors;\n  if (errors?.length) {\n    return errors.map((error) => error.message ?? genericErrorMessage).join(', ');\n  }\n\n  return data.error?.message ?? genericErrorMessage;\n}\n\nexport function translateRouteParamToRuleType(param = ''): RuleFormType {\n  if (param === 'recording') {\n    return RuleFormType.cloudRecording;\n  }\n\n  return RuleFormType.grafana;\n}\n\n/**\n * This function finds what refIds have been updated given the previous Array of queries and an Array of updated data queries.\n * All expression queries are discarded from the arrays, since we have separate handlers for those (see \"onUpdateRefId\") of the ExpressionEditor\n *\n * This code assumes not more than 1 query refId has changed per \"onChangeQueries\",\n */\nexport function findRenamedDataQueryReferences(\n  previousQueries: AlertQuery[],\n  updatedQueries: AlertQuery[]\n): [string, string] {\n  const updatedDataQueries = updatedQueries\n    .filter((query) => !isExpressionQuery(query.model))\n    .map((query) => query.refId);\n  const previousDataQueries = previousQueries\n    .filter((query) => !isExpressionQuery(query.model))\n    .map((query) => query.refId);\n\n  // given the following two arrays\n  // ['A', 'B', 'C'] and ['FOO', 'B' 'C']\n  // the \"xor\" function will return ['A', 'FOO'] because those are not in both arrays\n  const [oldRefId, newRefId] = xor(previousDataQueries, updatedDataQueries);\n\n  return [oldRefId, newRefId];\n}\n","import React from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { Alert } from '@grafana/ui';\n\nconst EvaluationIntervalLimitExceeded = () => (\n  <Alert severity=\"warning\" title=\"Global evalutation interval limit exceeded\">\n    A minimum evaluation interval of <strong>{config.unifiedAlerting.minInterval}</strong> has been configured in\n    Grafana.\n    <br />\n    Please contact the administrator to configure a lower interval.\n  </Alert>\n);\n\nexport { EvaluationIntervalLimitExceeded };\n","import { css } from '@emotion/css';\nimport { compact } from 'lodash';\nimport React, { useEffect, useMemo } from 'react';\nimport { FormProvider, RegisterOptions, useForm, useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Badge, Button, Field, Input, Label, LinkButton, Modal, useStyles2 } from '@grafana/ui';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { useDispatch } from 'app/types';\nimport { CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport { RulerRuleDTO } from 'app/types/unified-alerting-dto';\n\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { rulesInSameGroupHaveInvalidFor, updateLotexNamespaceAndGroupAction } from '../../state/actions';\nimport { checkEvaluationIntervalGlobalLimit } from '../../utils/config';\nimport { getRulesSourceName, GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { initialAsyncRequestState } from '../../utils/redux';\nimport { AlertInfo, getAlertInfo, isRecordingRulerRule } from '../../utils/rules';\nimport { parsePrometheusDuration, safeParseDurationstr } from '../../utils/time';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { EvaluationIntervalLimitExceeded } from '../InvalidIntervalWarning';\nimport { MIN_TIME_RANGE_STEP_S } from '../rule-editor/GrafanaEvaluationBehavior';\n\nconst ITEMS_PER_PAGE = 10;\n\nfunction ForBadge({ message, error }: { message: string; error?: boolean }) {\n  if (error) {\n    return <Badge color=\"red\" icon=\"exclamation-circle\" text={'Error'} tooltip={message} />;\n  } else {\n    return <Badge color=\"orange\" icon=\"exclamation-triangle\" text={'Unknown'} tooltip={message} />;\n  }\n}\n\nconst isValidEvaluation = (evaluation: string) => {\n  try {\n    const duration = parsePrometheusDuration(evaluation);\n\n    if (duration < MIN_TIME_RANGE_STEP_S * 1000) {\n      return false;\n    }\n\n    if (duration % (MIN_TIME_RANGE_STEP_S * 1000) !== 0) {\n      return false;\n    }\n\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\ntype AlertsWithForTableColumnProps = DynamicTableColumnProps<AlertInfo>;\ntype AlertsWithForTableProps = DynamicTableItemProps<AlertInfo>;\n\nexport const RulesForGroupTable = ({ rulesWithoutRecordingRules }: { rulesWithoutRecordingRules: RulerRuleDTO[] }) => {\n  const styles = useStyles2(getStyles);\n\n  const { watch } = useFormContext<FormValues>();\n  const currentInterval = watch('groupInterval');\n  const unknownCurrentInterval = !Boolean(currentInterval);\n\n  const rows: AlertsWithForTableProps[] = rulesWithoutRecordingRules\n    .slice()\n    .map((rule: RulerRuleDTO, index) => ({\n      id: index,\n      data: getAlertInfo(rule, currentInterval),\n    }))\n    .sort(\n      (alert1, alert2) => safeParseDurationstr(alert1.data.forDuration) - safeParseDurationstr(alert2.data.forDuration)\n    );\n\n  const columns: AlertsWithForTableColumnProps[] = useMemo(() => {\n    return [\n      {\n        id: 'alertName',\n        label: 'Alert',\n        renderCell: ({ data: { alertName } }) => {\n          return <>{alertName}</>;\n        },\n        size: '330px',\n      },\n      {\n        id: 'for',\n        label: 'For',\n        renderCell: ({ data: { forDuration } }) => {\n          return <>{forDuration}</>;\n        },\n        size: 0.5,\n      },\n      {\n        id: 'numberEvaluations',\n        label: '#Eval',\n        renderCell: ({ data: { evaluationsToFire: numberEvaluations } }) => {\n          if (unknownCurrentInterval) {\n            return <ForBadge message=\"#Evaluations not available.\" />;\n          } else {\n            if (!isValidEvaluation(currentInterval)) {\n              return <ForBadge message={'Invalid evaluation interval format'} error />;\n            }\n            if (numberEvaluations === 0) {\n              return (\n                <ForBadge message=\"Invalid 'For' value: it should be greater or equal to evaluation interval.\" error />\n              );\n            } else {\n              return <>{numberEvaluations}</>;\n            }\n          }\n        },\n        size: 0.4,\n      },\n    ];\n  }, [currentInterval, unknownCurrentInterval]);\n\n  return (\n    <div className={styles.tableWrapper}>\n      <DynamicTable items={rows} cols={columns} pagination={{ itemsPerPage: ITEMS_PER_PAGE }} />\n    </div>\n  );\n};\n\ninterface FormValues {\n  namespaceName: string;\n  groupName: string;\n  groupInterval: string;\n}\n\nexport const evaluateEveryValidationOptions = (rules: RulerRuleDTO[]): RegisterOptions => ({\n  required: {\n    value: true,\n    message: 'Required.',\n  },\n  validate: (evaluateEvery: string) => {\n    try {\n      const duration = parsePrometheusDuration(evaluateEvery);\n\n      if (duration < MIN_TIME_RANGE_STEP_S * 1000) {\n        return `Cannot be less than ${MIN_TIME_RANGE_STEP_S} seconds.`;\n      }\n\n      if (duration % (MIN_TIME_RANGE_STEP_S * 1000) !== 0) {\n        return `Must be a multiple of ${MIN_TIME_RANGE_STEP_S} seconds.`;\n      }\n      if (rulesInSameGroupHaveInvalidFor(rules, evaluateEvery).length === 0) {\n        return true;\n      } else {\n        return `Invalid evaluation interval. Evaluation interval should be smaller or equal to 'For' values for existing rules in this group.`;\n      }\n    } catch (error) {\n      return error instanceof Error ? error.message : 'Failed to parse duration';\n    }\n  },\n});\n\nexport interface ModalProps {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n  onClose: (saved?: boolean) => void;\n  intervalEditOnly?: boolean;\n  folderUrl?: string;\n  hideFolder?: boolean;\n}\n\nexport function EditCloudGroupModal(props: ModalProps): React.ReactElement {\n  const { namespace, group, onClose, intervalEditOnly } = props;\n\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n  const { loading, error, dispatched } =\n    useUnifiedAlertingSelector((state) => state.updateLotexNamespaceAndGroup) ?? initialAsyncRequestState;\n  const notifyApp = useAppNotification();\n\n  const defaultValues = useMemo(\n    (): FormValues => ({\n      namespaceName: namespace.name,\n      groupName: group.name,\n      groupInterval: group.interval ?? '',\n    }),\n    [namespace, group]\n  );\n\n  const rulesSourceName = getRulesSourceName(namespace.rulesSource);\n  const isGrafanaManagedGroup = rulesSourceName === GRAFANA_RULES_SOURCE_NAME;\n\n  const nameSpaceLabel = isGrafanaManagedGroup ? 'Folder' : 'Namespace';\n\n  // close modal if successfully saved\n  useEffect(() => {\n    if (dispatched && !loading && !error) {\n      onClose(true);\n    }\n  }, [dispatched, loading, onClose, error]);\n\n  useCleanup((state) => (state.unifiedAlerting.updateLotexNamespaceAndGroup = initialAsyncRequestState));\n  const onSubmit = (values: FormValues) => {\n    dispatch(\n      updateLotexNamespaceAndGroupAction({\n        rulesSourceName: rulesSourceName,\n        groupName: group.name,\n        newGroupName: values.groupName,\n        namespaceName: namespace.name,\n        newNamespaceName: values.namespaceName,\n        groupInterval: values.groupInterval || undefined,\n      })\n    );\n  };\n\n  const formAPI = useForm<FormValues>({\n    mode: 'onBlur',\n    defaultValues,\n    shouldFocusError: true,\n  });\n  const {\n    handleSubmit,\n    register,\n    watch,\n    formState: { isDirty, errors },\n  } = formAPI;\n\n  const onInvalid = () => {\n    notifyApp.error('There are errors in the form. Correct the errors and retry.');\n  };\n\n  const rulesWithoutRecordingRules = compact(\n    group.rules.map((r) => r.rulerRule).filter((rule) => !isRecordingRulerRule(rule))\n  );\n  const hasSomeNoRecordingRules = rulesWithoutRecordingRules.length > 0;\n  const modalTitle =\n    intervalEditOnly || isGrafanaManagedGroup ? 'Edit evaluation group' : 'Edit namespace or evaluation group';\n\n  return (\n    <Modal className={styles.modal} isOpen={true} title={modalTitle} onDismiss={onClose} onClickBackdrop={onClose}>\n      <FormProvider {...formAPI}>\n        <form onSubmit={(e) => e.preventDefault()} key={JSON.stringify(defaultValues)}>\n          <>\n            {!props.hideFolder && (\n              <Field\n                label={\n                  <Label\n                    htmlFor=\"namespaceName\"\n                    description={\n                      !isGrafanaManagedGroup &&\n                      'Change the current namespace name. Moving groups between namespaces is not supported'\n                    }\n                  >\n                    {nameSpaceLabel}\n                  </Label>\n                }\n                invalid={!!errors.namespaceName}\n                error={errors.namespaceName?.message}\n              >\n                <Stack gap={1} direction=\"row\">\n                  <Input\n                    id=\"namespaceName\"\n                    readOnly={intervalEditOnly || isGrafanaManagedGroup}\n                    {...register('namespaceName', {\n                      required: 'Namespace name is required.',\n                    })}\n                    className={styles.formInput}\n                  />\n                  {isGrafanaManagedGroup && props.folderUrl && (\n                    <LinkButton\n                      href={props.folderUrl}\n                      title=\"Go to folder\"\n                      variant=\"secondary\"\n                      icon=\"folder-open\"\n                      target=\"_blank\"\n                    />\n                  )}\n                </Stack>\n              </Field>\n            )}\n            <Field\n              label={<Label htmlFor=\"groupName\">Evaluation group name</Label>}\n              invalid={!!errors.groupName}\n              error={errors.groupName?.message}\n            >\n              <Input\n                autoFocus={true}\n                id=\"groupName\"\n                readOnly={intervalEditOnly}\n                {...register('groupName', {\n                  required: 'Evaluation group name is required.',\n                })}\n              />\n            </Field>\n            <Field\n              label={\n                <Label\n                  htmlFor=\"groupInterval\"\n                  description=\"How often is the rule evaluated. Applies to every rule within the group.\"\n                >\n                  <Stack gap={0.5}>Evaluation interval</Stack>\n                </Label>\n              }\n              invalid={!!errors.groupInterval}\n              error={errors.groupInterval?.message}\n            >\n              <Input\n                id=\"groupInterval\"\n                placeholder=\"1m\"\n                {...register('groupInterval', evaluateEveryValidationOptions(rulesWithoutRecordingRules))}\n              />\n            </Field>\n\n            {checkEvaluationIntervalGlobalLimit(watch('groupInterval')).exceedsLimit && (\n              <EvaluationIntervalLimitExceeded />\n            )}\n\n            {!hasSomeNoRecordingRules && <div>This group does not contain alert rules.</div>}\n            {hasSomeNoRecordingRules && (\n              <>\n                <div>List of rules that belong to this group</div>\n                <div className={styles.evalRequiredLabel}>\n                  #Eval column represents the number of evaluations needed before alert starts firing.\n                </div>\n                <RulesForGroupTable rulesWithoutRecordingRules={rulesWithoutRecordingRules} />\n              </>\n            )}\n\n            <div className={styles.modalButtons}>\n              <Modal.ButtonRow>\n                <Button\n                  variant=\"secondary\"\n                  type=\"button\"\n                  disabled={loading}\n                  onClick={() => onClose(false)}\n                  fill=\"outline\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"button\"\n                  disabled={!isDirty || loading}\n                  onClick={handleSubmit((values) => onSubmit(values), onInvalid)}\n                >\n                  {loading ? 'Saving...' : 'Save'}\n                </Button>\n              </Modal.ButtonRow>\n            </div>\n          </>\n        </form>\n      </FormProvider>\n    </Modal>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  modal: css`\n    max-width: 560px;\n  `,\n  modalButtons: css`\n    top: -24px;\n    position: relative;\n  `,\n  formInput: css`\n    flex: 1;\n  `,\n  tableWrapper: css`\n    margin-top: ${theme.spacing(2)};\n    margin-bottom: ${theme.spacing(2)};\n    height: 100%;\n  `,\n  evalRequiredLabel: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n  `,\n});\n","import { useCallback, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { locationService } from '@grafana/runtime';\n\nexport function useURLSearchParams(): [\n  URLSearchParams,\n  (searchValues: Record<string, string | string[] | undefined>, replace?: boolean) => void,\n] {\n  const { search } = useLocation();\n  const queryParams = useMemo(() => new URLSearchParams(search), [search]);\n\n  const update = useCallback((searchValues: Record<string, string | string[] | undefined>, replace?: boolean) => {\n    locationService.partial(searchValues, replace);\n  }, []);\n\n  return [queryParams, update];\n}\n","import { useMemo } from 'react';\n\nimport { getRulesAccess } from './access-control';\n\nexport function useRulesAccess() {\n  return useMemo(() => getRulesAccess(), []);\n}\n","import { isExpressionReference } from '@grafana/runtime/src/utils/DataSourceWithBackend';\nimport { DataQuery } from '@grafana/schema';\n\nimport { ExpressionQuery, ExpressionQueryType } from './types';\n\nexport const isExpressionQuery = (dataQuery?: DataQuery): dataQuery is ExpressionQuery => {\n  if (!dataQuery) {\n    return false;\n  }\n\n  if (isExpressionReference(dataQuery.datasource)) {\n    return true;\n  }\n\n  const expression = dataQuery as ExpressionQuery;\n\n  if (typeof expression.type !== 'string') {\n    return false;\n  }\n  return Object.values(ExpressionQueryType).includes(expression.type);\n};\n"],"names":["FileExportPreview","format","textDefinition","downloadFileName","onClose","styles","fileExportPreviewStyles","onDownload","blob","formattedTextDefinition","provider","height","theme","GrafanaExportDrawer","activeTab","onTabChange","children","formatProviders","title","grafanaRulesTabs","JsonExportProvider","raw","YamlExportProvider","HclExportProvider","allGrafanaExportProviders","jsonAndYamlGrafanaExportProviders","SlashesWarning","getStyles","onClick","Stack","Tooltip","Icon","containsSlashes","str","RuleFolderPicker","props","value","folderWarning","folderName","customAdd","OldFolderPicker","MAX_GROUP_RESULTS","useFolderGroupOptions","folderTitle","enableProvisionedGroups","dispatch","groupfoldersForGrafana","useUnifiedAlertingSelector","state","useCombinedRuleNamespaces","f","group","isProvisioned","isProvisionedGroup","sortByLabel","rule","a","b","findGroupMatchingLabel","query","FolderAndGroup","errors","watch","setValue","control","folder","groupOptions","loading","isCreatingFolder","setIsCreatingFolder","isCreatingEvaluationGroup","setIsCreatingEvaluationGroup","onOpenFolderCreationModal","onOpenEvaluationGroupCreationModal","handleFolderCreation","resetGroup","handleEvalGroupCreation","groupName","evaluationInterval","getOptions","results","debouncedSearch","defaultGroupValue","Field","Label","InputControl","ref","field","uid","Text","Button","FolderCreationModal","fieldState","option","Provisioning","group_","EvaluationGroupCreationModal","onCreate","setTitle","onSubmit","newFolder","error","Modal","Input","e","getValues","evaluateEveryId","groupRules","g","onCancel","formAPI","register","handleSubmit","formState","options","GrafanaAlertStatePicker","includeNoData","includeError","opts","opt","Select","MIN_TIME_RANGE_STEP_S","forValidationOptions","evaluateEvery","millisFor","millisEvery","useIsNewGroup","groupInList","FolderGroupAndEvaluationInterval","setEvaluateEvery","isEditingGroup","setIsEditingGroup","existingNamespace","ns","existingGroup","isNewGroup","closeEditGroupModal","saved","onOpenEditGroupModal","editGroupDisabled","emptyNamespace","emptyGroup","IconButton","ForInput","evaluateForId","getDescription","docsLink","NeedHelpInfo","GrafanaEvaluationBehavior","existing","showErrorHandling","setShowErrorHandling","isPaused","RuleEditorSection","Switch","CollapseToggle","collapsed","onChange","cloudRulesTabs","RuleInspector","setActiveTab","drawerStyles","onApply","formValues","key","RuleInspectorTabs","InspectorYamlTab","tabs","tab","index","yamlTabStyle","yamlValues","alertRuleAsYaml","setAlertRuleAsYaml","rulerRule","currentFormValues","yamlFormValues","rulerRuleToRuleFormValues","YamlContentInfo","createDagFromQueries","_createDagFromQueries","previous","next","fingerPrintQueries","queries","graph","nodes","source","parseRefsFromMathExpression","target","input","r1","r2","m1","m","m2","getOriginOfRefId","_getOriginsOfRefId","refId","fingerprintGraph","node","origins","findChildNode","inputEdges","edge","origin","name","n","outputEdges","type","queriesWithUpdatedReferences","previousRefId","newRefId","isMathExpression","isReduceExpression","isResampleExpression","isClassicExpression","isThresholdExpression","updateMathExpressionRefs","isReferencing","conditions","condition","param","expression","oldExpression","newExpression","refIdExists","checkForPathSeparator","errorFromCurrentCondition","data","isTimeSeriesResults","errorFromPreviewData","warningFromSeries","series","warning","notice","getThresholdsForQueries","thresholds","SUPPORTED_EXPRESSION_TYPES","hasRangeThreshold","isRangeCondition","threshold","isRangeThreshold","originRefIDs","originQuery","originRefID","hasValidOrigin","appendSingleThreshold","appendRangeThreshold","err","config","values","step","getStatusMessage","genericErrorMessage","translateRouteParamToRuleType","findRenamedDataQueryReferences","previousQueries","updatedQueries","updatedDataQueries","previousDataQueries","oldRefId","EvaluationIntervalLimitExceeded","Alert","ITEMS_PER_PAGE","ForBadge","message","Badge","isValidEvaluation","evaluation","duration","RulesForGroupTable","rulesWithoutRecordingRules","currentInterval","unknownCurrentInterval","rows","alert1","alert2","columns","alertName","forDuration","numberEvaluations","DynamicTable","evaluateEveryValidationOptions","rules","EditCloudGroupModal","namespace","intervalEditOnly","dispatched","notifyApp","defaultValues","rulesSourceName","isGrafanaManagedGroup","nameSpaceLabel","useCleanup","isDirty","onInvalid","r","hasSomeNoRecordingRules","modalTitle","useURLSearchParams","search","queryParams","update","searchValues","replace","useRulesAccess","isExpressionQuery","dataQuery"],"sourceRoot":""}