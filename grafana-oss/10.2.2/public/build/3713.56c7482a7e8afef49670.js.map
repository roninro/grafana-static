{"version":3,"file":"3713.56c7482a7e8afef49670.js","mappings":"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","sources":["webpack://grafana/./public/app/core/hooks/useCleanup.ts","webpack://grafana/./public/app/features/alerting/unified/components/Provisioning.tsx","webpack://grafana/./public/app/features/alerting/unified/api/dashboardApi.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/CustomAnnotationHeaderField.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/AnnotationHeaderField.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/DashboardAnnotationField.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/DashboardPicker.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/AnnotationsStep.tsx","webpack://grafana/./public/app/features/alerting/unified/components/AlertLabelDropdown.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/LabelsField.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/NeedHelpInfo.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/RuleEditorSection.tsx"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\nimport { useDispatch } from 'app/types';\n\nimport { cleanUpAction, CleanUpAction } from '../actions/cleanUp';\n\nexport function useCleanup(cleanupAction: CleanUpAction) {\n  const dispatch = useDispatch();\n  //bit of a hack to unburden user from having to wrap stateSelcetor in a useCallback. Otherwise cleanup would happen on every render\n  const selectorRef = useRef(cleanupAction);\n  selectorRef.current = cleanupAction;\n  useEffect(() => {\n    return () => {\n      dispatch(cleanUpAction({ cleanupAction: selectorRef.current }));\n    };\n  }, [dispatch]);\n}\n","import React from 'react';\n\nimport { Alert, Badge } from '@grafana/ui';\n\nexport enum ProvisionedResource {\n  ContactPoint = 'contact point',\n  Template = 'template',\n  MuteTiming = 'mute timing',\n  AlertRule = 'alert rule',\n  RootNotificationPolicy = 'root notification policy',\n}\n\ninterface ProvisioningAlertProps {\n  resource: ProvisionedResource;\n}\n\nexport const ProvisioningAlert = ({ resource }: ProvisioningAlertProps) => {\n  return (\n    <Alert title={`This ${resource} cannot be edited through the UI`} severity=\"info\">\n      This {resource} has been provisioned, that means it was created by config. Please contact your server admin to\n      update this {resource}.\n    </Alert>\n  );\n};\n\nexport const ProvisioningBadge = () => {\n  return <Badge text={'Provisioned'} color={'purple'} />;\n};\n","import { DashboardDTO } from '../../../../types';\nimport { DashboardSearchItem } from '../../../search/types';\n\nimport { alertingApi } from './alertingApi';\n\nexport const dashboardApi = alertingApi.injectEndpoints({\n  endpoints: (build) => ({\n    search: build.query<DashboardSearchItem[], { query?: string }>({\n      query: ({ query }) => {\n        const params = new URLSearchParams({ type: 'dash-db', limit: '1000', page: '1', sort: 'name_sort' });\n        if (query) {\n          params.set('query', query);\n        }\n\n        return { url: `/api/search?${params.toString()}` };\n      },\n    }),\n    dashboard: build.query<DashboardDTO, { uid: string }>({\n      query: ({ uid }) => ({ url: `/api/dashboards/uid/${uid}` }),\n    }),\n  }),\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Input, useStyles2 } from '@grafana/ui';\n\ninterface CustomAnnotationHeaderFieldProps {\n  field: { onChange: () => void; onBlur: () => void; value: string; name: string };\n}\n\nconst CustomAnnotationHeaderField = ({ field }: CustomAnnotationHeaderFieldProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div>\n      <span className={styles.annotationTitle}>Custom annotation name and content</span>\n      <Input\n        placeholder=\"Enter custom annotation name...\"\n        width={18}\n        {...field}\n        className={styles.customAnnotationInput}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  annotationTitle: css`\n    color: ${theme.colors.text.primary};\n    margin-bottom: 3px;\n  `,\n\n  customAnnotationInput: css`\n    margin-top: 5px;\n    width: 100%;\n  `,\n});\n\nexport default CustomAnnotationHeaderField;\n","import React from 'react';\nimport { FieldArrayWithId, useFormContext } from 'react-hook-form';\n\nimport { Stack } from '@grafana/experimental';\nimport { InputControl, Text } from '@grafana/ui';\n\nimport { RuleFormValues } from '../../types/rule-form';\nimport { Annotation, annotationDescriptions, annotationLabels } from '../../utils/constants';\n\nimport CustomAnnotationHeaderField from './CustomAnnotationHeaderField';\n\nconst AnnotationHeaderField = ({\n  annotationField,\n  annotations,\n  annotation,\n  index,\n}: {\n  annotationField: FieldArrayWithId<RuleFormValues, 'annotations', 'id'>;\n  annotations: Array<{ key: string; value: string }>;\n  annotation: Annotation;\n  index: number;\n}) => {\n  const { control } = useFormContext<RuleFormValues>();\n\n  return (\n    <Stack direction=\"column\" gap={0}>\n      <label>\n        {\n          <InputControl\n            name={`annotations.${index}.key`}\n            defaultValue={annotationField.key}\n            render={({ field: { ref, ...field } }) => {\n              if (!annotationLabels[annotation]) {\n                return <CustomAnnotationHeaderField field={field} />;\n              }\n\n              let label;\n\n              switch (annotationField.key) {\n                case Annotation.dashboardUID:\n                  label = 'Dashboard and panel';\n                case Annotation.panelID:\n                  label = '';\n                default:\n                  label = annotationLabels[annotation] && annotationLabels[annotation] + ' (optional)';\n              }\n\n              return (\n                <span data-testid={`annotation-key-${index}`}>\n                  <Text color=\"primary\" variant=\"bodySmall\">\n                    {label}\n                  </Text>\n                </span>\n              );\n            }}\n            control={control}\n            rules={{ required: { value: !!annotations[index]?.value, message: 'Required.' } }}\n          />\n        }\n      </label>\n      <Text variant=\"bodySmall\" color=\"secondary\">\n        {annotationDescriptions[annotation]}\n      </Text>\n    </Stack>\n  );\n};\n\nexport default AnnotationHeaderField;\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, useStyles2 } from '@grafana/ui';\nimport { DashboardDataDTO } from 'app/types';\n\nimport { makeDashboardLink, makePanelLink } from '../../utils/misc';\n\nimport { PanelDTO } from './DashboardPicker';\n\nconst DashboardAnnotationField = ({\n  dashboard,\n  panel,\n  dashboardUid,\n  panelId,\n  onEditClick,\n  onDeleteClick,\n}: {\n  dashboard?: DashboardDataDTO;\n  panel?: PanelDTO;\n  dashboardUid: string; //fallback\n  panelId: string; //fallback\n  onEditClick: () => void;\n  onDeleteClick: () => void;\n}) => {\n  const styles = useStyles2(getStyles);\n\n  const dashboardLink = makeDashboardLink(dashboard?.uid || dashboardUid);\n  const panelLink = makePanelLink(dashboard?.uid || dashboardUid, panel?.id?.toString() || panelId);\n  return (\n    <div className={styles.container}>\n      {dashboard && (\n        <a\n          href={dashboardLink}\n          className={styles.link}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          data-testid=\"dashboard-annotation\"\n        >\n          {dashboard.title} <Icon name={'external-link-alt'} />\n        </a>\n      )}\n\n      {!dashboard && <span className={styles.noLink}>Dashboard {dashboardUid} </span>}\n\n      {panel && (\n        <a href={panelLink} className={styles.link} target=\"_blank\" rel=\"noreferrer\" data-testid=\"panel-annotation\">\n          {panel.title || '<No title>'} <Icon name={'external-link-alt'} />\n        </a>\n      )}\n\n      {!panel && <span className={styles.noLink}> - Panel {panelId}</span>}\n\n      {(dashboard || panel) && (\n        <>\n          <Icon name={'pen'} onClick={onEditClick} className={styles.icon} />\n          <Icon name={'trash-alt'} onClick={onDeleteClick} className={styles.icon} />\n        </>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    margin-top: 5px;\n  `,\n\n  noLink: css`\n    color: ${theme.colors.text.secondary};\n  `,\n  link: css`\n    color: ${theme.colors.text.link};\n    margin-right: ${theme.spacing(1.5)};\n  `,\n\n  icon: css`\n    margin-right: ${theme.spacing(1)};\n    cursor: pointer;\n  `,\n});\n\nexport default DashboardAnnotationField;\n","import { css, cx } from '@emotion/css';\nimport { noop } from 'lodash';\nimport React, { CSSProperties, useCallback, useMemo, useState } from 'react';\nimport { useDebounce } from 'react-use';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { FixedSizeList } from 'react-window';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport {\n  Alert,\n  Button,\n  clearButtonStyles,\n  FilterInput,\n  Icon,\n  LoadingPlaceholder,\n  Modal,\n  Tooltip,\n  useStyles2,\n} from '@grafana/ui';\nimport { DashboardDTO } from 'app/types';\n\nimport { dashboardApi } from '../../api/dashboardApi';\n\nexport interface PanelDTO {\n  id?: number;\n  title?: string;\n  type: string;\n}\n\nfunction panelSort(a: PanelDTO, b: PanelDTO) {\n  if (a.title && b.title) {\n    return a.title.localeCompare(b.title);\n  }\n  if (a.title && !b.title) {\n    return 1;\n  } else if (!a.title && b.title) {\n    return -1;\n  }\n\n  return 0;\n}\n\ninterface DashboardPickerProps {\n  isOpen: boolean;\n  dashboardUid?: string | undefined;\n  panelId?: string | undefined;\n  onChange: (dashboardUid: string, panelId: string) => void;\n  onDismiss: () => void;\n}\n\nexport function mergePanels(dashboardResult: DashboardDTO | undefined) {\n  const panels = dashboardResult?.dashboard?.panels?.filter((panel) => panel.type !== 'row') || [];\n  const nestedPanels =\n    dashboardResult?.dashboard?.panels\n      ?.filter((row: { collapsed: boolean }) => row.collapsed)\n      .map((collapsedRow: { panels: PanelDTO[] }) => collapsedRow.panels) || [];\n\n  const allDashboardPanels = [...panels, ...nestedPanels.flat()];\n\n  return allDashboardPanels;\n}\n\nexport const DashboardPicker = ({ dashboardUid, panelId, isOpen, onChange, onDismiss }: DashboardPickerProps) => {\n  const styles = useStyles2(getPickerStyles);\n\n  const [selectedDashboardUid, setSelectedDashboardUid] = useState(dashboardUid);\n  const [selectedPanelId, setSelectedPanelId] = useState(panelId);\n\n  const [dashboardFilter, setDashboardFilter] = useState('');\n  const [debouncedDashboardFilter, setDebouncedDashboardFilter] = useState('');\n\n  const [panelFilter, setPanelFilter] = useState('');\n  const { useSearchQuery, useDashboardQuery } = dashboardApi;\n\n  const { currentData: filteredDashboards = [], isFetching: isDashSearchFetching } = useSearchQuery({\n    query: debouncedDashboardFilter,\n  });\n  const { currentData: dashboardResult, isFetching: isDashboardFetching } = useDashboardQuery(\n    { uid: selectedDashboardUid ?? '' },\n    { skip: !selectedDashboardUid }\n  );\n\n  const handleDashboardChange = useCallback((dashboardUid: string) => {\n    setSelectedDashboardUid(dashboardUid);\n    setSelectedPanelId(undefined);\n  }, []);\n\n  const allDashboardPanels = mergePanels(dashboardResult);\n\n  const filteredPanels =\n    allDashboardPanels\n      ?.filter((panel) => panel.title?.toLowerCase().includes(panelFilter.toLowerCase()))\n      .sort(panelSort) ?? [];\n\n  const currentPanel: PanelDTO | undefined = allDashboardPanels.find(\n    (panel: PanelDTO) => isValidPanelIdentifier(panel) && panel.id?.toString() === selectedPanelId\n  );\n\n  const selectedDashboardIndex = useMemo(() => {\n    return filteredDashboards.map((dashboard) => dashboard.uid).indexOf(selectedDashboardUid ?? '');\n  }, [filteredDashboards, selectedDashboardUid]);\n\n  const isDefaultSelection = dashboardUid && dashboardUid === selectedDashboardUid;\n  const selectedDashboardIsInPageResult = selectedDashboardIndex >= 0;\n\n  const scrollToItem = useCallback(\n    (node: FixedSizeList) => {\n      const canScroll = selectedDashboardIndex >= 0;\n\n      if (isDefaultSelection && canScroll) {\n        node?.scrollToItem(selectedDashboardIndex, 'smart');\n      }\n    },\n    [isDefaultSelection, selectedDashboardIndex]\n  );\n\n  useDebounce(\n    () => {\n      setDebouncedDashboardFilter(dashboardFilter);\n    },\n    500,\n    [dashboardFilter]\n  );\n\n  const DashboardRow = ({ index, style }: { index: number; style?: CSSProperties }) => {\n    const dashboard = filteredDashboards[index];\n    const isSelected = selectedDashboardUid === dashboard.uid;\n\n    return (\n      <button\n        type=\"button\"\n        title={dashboard.title}\n        style={style}\n        className={cx(styles.rowButton, { [styles.rowOdd]: index % 2 === 1, [styles.rowSelected]: isSelected })}\n        onClick={() => handleDashboardChange(dashboard.uid)}\n      >\n        <div className={cx(styles.dashboardTitle, styles.rowButtonTitle)}>{dashboard.title}</div>\n        <div className={styles.dashboardFolder}>\n          <Icon name=\"folder\" /> {dashboard.folderTitle ?? 'General'}\n        </div>\n      </button>\n    );\n  };\n\n  const PanelRow = ({ index, style }: { index: number; style: CSSProperties }) => {\n    const panel = filteredPanels[index];\n    const panelTitle = panel.title || '<No title>';\n    const isSelected = panel.id && selectedPanelId === panel.id?.toString();\n    const isAlertingCompatible = panel.type === 'graph' || panel.type === 'timeseries';\n    const disabled = !isValidPanelIdentifier(panel);\n\n    return (\n      <button\n        type=\"button\"\n        style={style}\n        disabled={disabled}\n        className={cx(styles.rowButton, styles.panelButton, {\n          [styles.rowOdd]: index % 2 === 1,\n          [styles.rowSelected]: isSelected,\n        })}\n        onClick={() => (disabled ? noop : setSelectedPanelId(panel.id?.toString()))}\n      >\n        <div className={styles.rowButtonTitle} title={panelTitle}>\n          {panelTitle}\n        </div>\n        {!isAlertingCompatible && !disabled && (\n          <Tooltip content=\"Alert tab will be disabled for this panel. It is only supported on graph and timeseries panels\">\n            <Icon name=\"exclamation-triangle\" className={styles.warnIcon} data-testid=\"warning-icon\" />\n          </Tooltip>\n        )}\n        {disabled && (\n          <Tooltip content=\"This panel does not have a valid identifier.\">\n            <Icon name=\"info-circle\" data-testid=\"info-icon\" />\n          </Tooltip>\n        )}\n      </button>\n    );\n  };\n\n  return (\n    <Modal\n      title=\"Select dashboard and panel\"\n      closeOnEscape\n      isOpen={isOpen}\n      onDismiss={onDismiss}\n      className={styles.modal}\n      contentClassName={styles.modalContent}\n    >\n      {/* This alert shows if the selected dashboard is not found in the first page of dashboards */}\n      {!selectedDashboardIsInPageResult && dashboardUid && (\n        <Alert title=\"Current selection\" severity=\"info\" topSpacing={0} bottomSpacing={1} className={styles.modalAlert}>\n          <div>\n            Dashboard: {dashboardResult?.dashboard.title} ({dashboardResult?.dashboard.uid}) in folder{' '}\n            {dashboardResult?.meta.folderTitle ?? 'General'}\n          </div>\n          {currentPanel && (\n            <div>\n              Panel: {currentPanel.title} ({currentPanel.id})\n            </div>\n          )}\n        </Alert>\n      )}\n      <div className={styles.container}>\n        <FilterInput\n          value={dashboardFilter}\n          onChange={setDashboardFilter}\n          title=\"Search dashboard\"\n          placeholder=\"Search dashboard\"\n          autoFocus\n        />\n        <FilterInput value={panelFilter} onChange={setPanelFilter} title=\"Search panel\" placeholder=\"Search panel\" />\n\n        <div className={styles.column}>\n          {isDashSearchFetching && (\n            <LoadingPlaceholder text=\"Loading dashboards...\" className={styles.loadingPlaceholder} />\n          )}\n\n          {!isDashSearchFetching && (\n            <AutoSizer>\n              {({ height, width }) => (\n                <FixedSizeList\n                  ref={scrollToItem}\n                  itemSize={50}\n                  height={height}\n                  width={width}\n                  itemCount={filteredDashboards.length}\n                >\n                  {DashboardRow}\n                </FixedSizeList>\n              )}\n            </AutoSizer>\n          )}\n        </div>\n\n        <div className={styles.column}>\n          {!selectedDashboardUid && !isDashboardFetching && (\n            <div className={styles.selectDashboardPlaceholder}>\n              <div>Select a dashboard to get a list of available panels</div>\n            </div>\n          )}\n          {isDashboardFetching && (\n            <LoadingPlaceholder text=\"Loading dashboard...\" className={styles.loadingPlaceholder} />\n          )}\n\n          {selectedDashboardUid && !isDashboardFetching && (\n            <AutoSizer>\n              {({ width, height }) => (\n                <FixedSizeList itemSize={32} height={height} width={width} itemCount={filteredPanels.length}>\n                  {PanelRow}\n                </FixedSizeList>\n              )}\n            </AutoSizer>\n          )}\n        </div>\n      </div>\n      <Modal.ButtonRow>\n        <Button type=\"button\" variant=\"secondary\" onClick={onDismiss} fill=\"text\">\n          Cancel\n        </Button>\n        <Button\n          type=\"button\"\n          variant=\"primary\"\n          disabled={!(selectedDashboardUid && selectedPanelId)}\n          onClick={() => {\n            if (selectedDashboardUid && selectedPanelId) {\n              onChange(selectedDashboardUid, selectedPanelId);\n            }\n          }}\n        >\n          Confirm\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n\nconst isValidPanelIdentifier = (panel: PanelDTO): boolean => {\n  return typeof panel.id === 'number' && typeof panel.type === 'string';\n};\n\nconst getPickerStyles = (theme: GrafanaTheme2) => {\n  const clearButton = clearButtonStyles(theme);\n\n  return {\n    container: css`\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      grid-template-rows: min-content auto;\n      gap: ${theme.spacing(2)};\n      flex: 1;\n    `,\n    column: css`\n      flex: 1 1 auto;\n    `,\n    dashboardTitle: css`\n      height: 22px;\n      font-weight: ${theme.typography.fontWeightBold};\n    `,\n    dashboardFolder: css`\n      height: 20px;\n      font-size: ${theme.typography.bodySmall.fontSize};\n      color: ${theme.colors.text.secondary};\n      display: flex;\n      flex-direction: row;\n      justify-content: flex-start;\n      column-gap: ${theme.spacing(1)};\n      align-items: center;\n    `,\n    rowButton: css`\n      ${clearButton};\n      padding: ${theme.spacing(0.5)};\n      overflow: hidden;\n      text-overflow: ellipsis;\n      text-align: left;\n      white-space: nowrap;\n      cursor: pointer;\n      border: 2px solid transparent;\n\n      &:disabled {\n        cursor: not-allowed;\n        color: ${theme.colors.text.disabled};\n      }\n    `,\n    rowButtonTitle: css`\n      text-overflow: ellipsis;\n      overflow: hidden;\n    `,\n    rowSelected: css`\n      border-color: ${theme.colors.primary.border};\n    `,\n    rowOdd: css`\n      background-color: ${theme.colors.background.secondary};\n    `,\n    panelButton: css`\n      display: flex;\n      gap: ${theme.spacing(1)};\n      justify-content: space-between;\n      align-items: center;\n    `,\n    loadingPlaceholder: css`\n      height: 100%;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n    `,\n    selectDashboardPlaceholder: css`\n      width: 100%;\n      height: 100%;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      text-align: center;\n      font-weight: ${theme.typography.fontWeightBold};\n    `,\n    modal: css`\n      height: 100%;\n    `,\n    modalContent: css`\n      flex: 1;\n      display: flex;\n      flex-direction: column;\n    `,\n    modalAlert: css`\n      flex-grow: 0;\n    `,\n    warnIcon: css`\n      fill: ${theme.colors.warning.main};\n    `,\n  };\n};\n","import { css, cx } from '@emotion/css';\nimport { produce } from 'immer';\nimport React, { useEffect, useState } from 'react';\nimport { useFieldArray, useFormContext } from 'react-hook-form';\nimport { useToggle } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Button, Field, Input, Text, TextArea, useStyles2 } from '@grafana/ui';\nimport { DashboardDataDTO } from 'app/types';\n\nimport { dashboardApi } from '../../api/dashboardApi';\nimport { RuleFormValues } from '../../types/rule-form';\nimport { Annotation, annotationLabels } from '../../utils/constants';\n\nimport AnnotationHeaderField from './AnnotationHeaderField';\nimport DashboardAnnotationField from './DashboardAnnotationField';\nimport { DashboardPicker, mergePanels, PanelDTO } from './DashboardPicker';\nimport { NeedHelpInfo } from './NeedHelpInfo';\nimport { RuleEditorSection } from './RuleEditorSection';\n\nconst AnnotationsStep = () => {\n  const styles = useStyles2(getStyles);\n  const [showPanelSelector, setShowPanelSelector] = useToggle(false);\n\n  const {\n    control,\n    register,\n    watch,\n    formState: { errors },\n    setValue,\n  } = useFormContext<RuleFormValues>();\n  const annotations = watch('annotations');\n\n  const { fields, append, remove } = useFieldArray({ control, name: 'annotations' });\n\n  const selectedDashboardUid = annotations.find((annotation) => annotation.key === Annotation.dashboardUID)?.value;\n  const selectedPanelId = annotations.find((annotation) => annotation.key === Annotation.panelID)?.value;\n\n  const [selectedDashboard, setSelectedDashboard] = useState<DashboardDataDTO | undefined>(undefined);\n  const [selectedPanel, setSelectedPanel] = useState<PanelDTO | undefined>(undefined);\n\n  const { useDashboardQuery } = dashboardApi;\n\n  const { currentData: dashboardResult, isFetching: isDashboardFetching } = useDashboardQuery(\n    { uid: selectedDashboardUid ?? '' },\n    { skip: !selectedDashboardUid }\n  );\n\n  useEffect(() => {\n    if (isDashboardFetching) {\n      return;\n    }\n\n    setSelectedDashboard(dashboardResult?.dashboard);\n\n    const allPanels = mergePanels(dashboardResult);\n    const currentPanel = allPanels.find((panel) => panel.id.toString() === selectedPanelId);\n    setSelectedPanel(currentPanel);\n  }, [selectedPanelId, dashboardResult, isDashboardFetching]);\n\n  const setSelectedDashboardAndPanelId = (dashboardUid: string, panelId: string) => {\n    const updatedAnnotations = produce(annotations, (draft) => {\n      const dashboardAnnotation = draft.find((a) => a.key === Annotation.dashboardUID);\n      const panelAnnotation = draft.find((a) => a.key === Annotation.panelID);\n\n      if (dashboardAnnotation) {\n        dashboardAnnotation.value = dashboardUid;\n      } else {\n        draft.push({ key: Annotation.dashboardUID, value: dashboardUid });\n      }\n\n      if (panelAnnotation) {\n        panelAnnotation.value = panelId;\n      } else {\n        draft.push({ key: Annotation.panelID, value: panelId });\n      }\n    });\n\n    setValue('annotations', updatedAnnotations);\n    setShowPanelSelector(false);\n  };\n\n  const handleDeleteDashboardAnnotation = () => {\n    const updatedAnnotations = annotations.filter(\n      (a) => a.key !== Annotation.dashboardUID && a.key !== Annotation.panelID\n    );\n    setValue('annotations', updatedAnnotations);\n    setSelectedDashboard(undefined);\n    setSelectedPanel(undefined);\n  };\n\n  const handleEditDashboardAnnotation = () => {\n    setShowPanelSelector(true);\n  };\n\n  function getAnnotationsSectionDescription() {\n    const docsLink =\n      'https://grafana.com/docs/grafana/latest/alerting/fundamentals/annotation-label/variables-label-annotation';\n\n    return (\n      <Stack direction=\"row\" gap={0.5} alignItems=\"baseline\">\n        <Text variant=\"bodySmall\" color=\"secondary\">\n          Add annotations to provide more context in your alert notifications.\n        </Text>\n        <NeedHelpInfo\n          contentText={`Annotations add metadata to provide more information on the alert in your alert notifications.\n          For example, add a Summary annotation to tell you which value caused the alert to fire or which server it happened on.\n          Annotations can contain a combination of text and template code.`}\n          externalLink={docsLink}\n          linkText={`Read about annotations`}\n          title=\"Annotations\"\n        />\n      </Stack>\n    );\n  }\n\n  return (\n    <RuleEditorSection stepNo={4} title=\"Add annotations\" description={getAnnotationsSectionDescription()} fullWidth>\n      <Stack direction=\"column\" gap={1}>\n        {fields.map((annotationField, index: number) => {\n          const isUrl = annotations[index]?.key?.toLocaleLowerCase().endsWith('url');\n          const ValueInputComponent = isUrl ? Input : TextArea;\n          // eslint-disable-next-line\n          const annotation = annotationField.key as Annotation;\n          return (\n            <div key={annotationField.id} className={styles.flexRow}>\n              <div>\n                <AnnotationHeaderField\n                  annotationField={annotationField}\n                  annotations={annotations}\n                  annotation={annotation}\n                  index={index}\n                />\n                {selectedDashboardUid && selectedPanelId && annotationField.key === Annotation.dashboardUID && (\n                  <DashboardAnnotationField\n                    dashboard={selectedDashboard}\n                    panel={selectedPanel}\n                    dashboardUid={selectedDashboardUid.toString()}\n                    panelId={selectedPanelId.toString()}\n                    onEditClick={handleEditDashboardAnnotation}\n                    onDeleteClick={handleDeleteDashboardAnnotation}\n                  />\n                )}\n\n                {\n                  <div className={styles.annotationValueContainer}>\n                    <Field\n                      hidden={\n                        annotationField.key === Annotation.dashboardUID || annotationField.key === Annotation.panelID\n                      }\n                      className={cx(styles.flexRowItemMargin, styles.field)}\n                      invalid={!!errors.annotations?.[index]?.value?.message}\n                      error={errors.annotations?.[index]?.value?.message}\n                    >\n                      <ValueInputComponent\n                        data-testid={`annotation-value-${index}`}\n                        className={cx(styles.annotationValueInput, { [styles.textarea]: !isUrl })}\n                        {...register(`annotations.${index}.value`)}\n                        placeholder={\n                          isUrl\n                            ? 'https://'\n                            : (annotationField.key && `Enter a ${annotationField.key}...`) ||\n                              'Enter custom annotation content...'\n                        }\n                        defaultValue={annotationField.value}\n                      />\n                    </Field>\n                    {!annotationLabels[annotation] && (\n                      <Button\n                        type=\"button\"\n                        className={styles.deleteAnnotationButton}\n                        aria-label=\"delete annotation\"\n                        icon=\"trash-alt\"\n                        variant=\"secondary\"\n                        onClick={() => remove(index)}\n                      />\n                    )}\n                  </div>\n                }\n              </div>\n            </div>\n          );\n        })}\n        <Stack direction=\"row\" gap={1}>\n          <div className={styles.addAnnotationsButtonContainer}>\n            <Button\n              icon=\"plus\"\n              type=\"button\"\n              variant=\"secondary\"\n              onClick={() => {\n                append({ key: '', value: '' });\n              }}\n            >\n              Add custom annotation\n            </Button>\n            {!selectedDashboard && (\n              <Button type=\"button\" variant=\"secondary\" icon=\"dashboard\" onClick={() => setShowPanelSelector(true)}>\n                Link dashboard and panel\n              </Button>\n            )}\n          </div>\n        </Stack>\n        {showPanelSelector && (\n          <DashboardPicker\n            isOpen={true}\n            dashboardUid={selectedDashboardUid}\n            panelId={selectedPanelId}\n            onChange={setSelectedDashboardAndPanelId}\n            onDismiss={() => setShowPanelSelector(false)}\n          />\n        )}\n      </Stack>\n    </RuleEditorSection>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  annotationValueInput: css`\n    width: 394px;\n  `,\n  textarea: css`\n    height: 76px;\n  `,\n  addAnnotationsButtonContainer: css`\n    margin-top: ${theme.spacing(1)};\n    gap: ${theme.spacing(1)};\n    display: flex;\n  `,\n  field: css`\n    margin-bottom: ${theme.spacing(0.5)};\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n  `,\n  flexRowItemMargin: css`\n    margin-top: ${theme.spacing(1)};\n  `,\n  deleteAnnotationButton: css`\n    display: inline-block;\n    margin-top: 10px;\n    margin-left: 10px;\n  `,\n\n  annotationTitle: css`\n    color: ${theme.colors.text.primary};\n    margin-bottom: 3px;\n  `,\n\n  annotationContainer: css`\n    margin-top: 5px;\n  `,\n\n  annotationDescription: css`\n    color: ${theme.colors.text.secondary};\n  `,\n\n  annotationValueContainer: css`\n    display: flex;\n  `,\n});\n\nexport default AnnotationsStep;\n","import React, { FC } from 'react';\nimport { createFilter, GroupBase, OptionsOrGroups } from 'react-select';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Field, Select } from '@grafana/ui';\n\nexport interface AlertLabelDropdownProps {\n  onChange: (newValue: SelectableValue<string>) => void;\n  onOpenMenu?: () => void;\n  options: SelectableValue[];\n  defaultValue?: SelectableValue;\n  type: 'key' | 'value';\n}\nconst _customFilter = createFilter({ ignoreCase: false });\nfunction customFilter(opt: SelectableValue, searchQuery: string) {\n  return _customFilter(\n    {\n      label: opt.label ?? '',\n      value: opt.value ?? '',\n      data: {},\n    },\n    searchQuery\n  );\n}\n\nconst handleIsValidNewOption = (\n  inputValue: string,\n  value: SelectableValue<string> | null,\n  options: OptionsOrGroups<SelectableValue<string>, GroupBase<SelectableValue<string>>>\n) => {\n  const exactValueExists = options.some((el) => el.label === inputValue);\n  const valueIsNotEmpty = inputValue.trim().length;\n  return !Boolean(exactValueExists) && Boolean(valueIsNotEmpty);\n};\n\nconst AlertLabelDropdown: FC<AlertLabelDropdownProps> = React.forwardRef<HTMLDivElement, AlertLabelDropdownProps>(\n  function labelPicker({ onChange, options, defaultValue, type, onOpenMenu = () => {} }, ref) {\n    return (\n      <div ref={ref}>\n        <Field disabled={false} data-testid={`alertlabel-${type}-picker`}>\n          <Select<string>\n            placeholder={`Choose ${type}`}\n            width={29}\n            className=\"ds-picker select-container\"\n            backspaceRemovesValue={false}\n            onChange={onChange}\n            onOpenMenu={onOpenMenu}\n            filterOption={customFilter}\n            isValidNewOption={handleIsValidNewOption}\n            options={options}\n            maxMenuHeight={500}\n            noOptionsMessage=\"No labels found\"\n            defaultValue={defaultValue}\n            allowCustomValue\n          />\n        </Field>\n      </div>\n    );\n  }\n);\n\nexport default AlertLabelDropdown;\n","import { css, cx } from '@emotion/css';\nimport React, { FC, useCallback, useEffect, useMemo, useState } from 'react';\nimport { FieldArrayMethodProps, useFieldArray, useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport {\n  Button,\n  Field,\n  InlineLabel,\n  Label,\n  useStyles2,\n  Text,\n  Tooltip,\n  Icon,\n  Input,\n  LoadingPlaceholder,\n} from '@grafana/ui';\nimport { useDispatch } from 'app/types';\n\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { fetchRulerRulesIfNotFetchedYet } from '../../state/actions';\nimport { RuleFormValues } from '../../types/rule-form';\nimport AlertLabelDropdown from '../AlertLabelDropdown';\n\ninterface Props {\n  className?: string;\n  dataSourceName?: string | null;\n}\n\nconst useGetCustomLabels = (dataSourceName: string): { loading: boolean; labelsByKey: Record<string, Set<string>> } => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchRulerRulesIfNotFetchedYet(dataSourceName));\n  }, [dispatch, dataSourceName]);\n\n  const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n  const rulerRequest = rulerRuleRequests[dataSourceName];\n\n  const labelsByKeyResult = useMemo<Record<string, Set<string>>>(() => {\n    const labelsByKey: Record<string, Set<string>> = {};\n\n    const rulerRulesConfig = rulerRequest?.result;\n    if (!rulerRulesConfig) {\n      return labelsByKey;\n    }\n\n    const allRules = Object.values(rulerRulesConfig)\n      .flatMap((groups) => groups)\n      .flatMap((group) => group.rules);\n\n    allRules.forEach((rule) => {\n      if (rule.labels) {\n        Object.entries(rule.labels).forEach(([key, value]) => {\n          if (!value) {\n            return;\n          }\n\n          const labelEntry = labelsByKey[key];\n          if (labelEntry) {\n            labelEntry.add(value);\n          } else {\n            labelsByKey[key] = new Set([value]);\n          }\n        });\n      }\n    });\n\n    return labelsByKey;\n  }, [rulerRequest]);\n\n  return { loading: rulerRequest?.loading, labelsByKey: labelsByKeyResult };\n};\n\nfunction mapLabelsToOptions(items: Iterable<string> = []): Array<SelectableValue<string>> {\n  return Array.from(items, (item) => ({ label: item, value: item }));\n}\n\nconst RemoveButton: FC<{\n  remove: (index?: number | number[] | undefined) => void;\n  className: string;\n  index: number;\n}> = ({ remove, className, index }) => (\n  <Button\n    className={className}\n    aria-label=\"delete label\"\n    icon=\"trash-alt\"\n    data-testid={`delete-label-${index}`}\n    variant=\"secondary\"\n    onClick={() => {\n      remove(index);\n    }}\n  />\n);\n\nconst AddButton: FC<{\n  append: (\n    value: Partial<{ key: string; value: string }> | Array<Partial<{ key: string; value: string }>>,\n    options?: FieldArrayMethodProps | undefined\n  ) => void;\n  className: string;\n}> = ({ append, className }) => (\n  <Button\n    className={className}\n    icon=\"plus-circle\"\n    type=\"button\"\n    variant=\"secondary\"\n    onClick={() => {\n      append({ key: '', value: '' });\n    }}\n  >\n    Add label\n  </Button>\n);\n\nconst LabelsWithSuggestions: FC<{ dataSourceName: string }> = ({ dataSourceName }) => {\n  const styles = useStyles2(getStyles);\n  const {\n    register,\n    control,\n    watch,\n    formState: { errors },\n    setValue,\n  } = useFormContext<RuleFormValues>();\n\n  const labels = watch('labels');\n  const { fields, remove, append } = useFieldArray({ control, name: 'labels' });\n\n  const { loading, labelsByKey } = useGetCustomLabels(dataSourceName);\n\n  const [selectedKey, setSelectedKey] = useState('');\n\n  const keys = useMemo(() => {\n    return mapLabelsToOptions(Object.keys(labelsByKey));\n  }, [labelsByKey]);\n\n  const getValuesForLabel = useCallback(\n    (key: string) => {\n      return mapLabelsToOptions(labelsByKey[key]);\n    },\n    [labelsByKey]\n  );\n\n  const values = useMemo(() => {\n    return getValuesForLabel(selectedKey);\n  }, [selectedKey, getValuesForLabel]);\n\n  return (\n    <>\n      {loading && <LoadingPlaceholder text=\"Loading\" />}\n      {!loading && (\n        <Stack direction=\"column\" gap={0.5}>\n          {fields.map((field, index) => {\n            return (\n              <div key={field.id}>\n                <div className={cx(styles.flexRow, styles.centerAlignRow)}>\n                  <Field\n                    className={styles.labelInput}\n                    invalid={Boolean(errors.labels?.[index]?.key?.message)}\n                    error={errors.labels?.[index]?.key?.message}\n                    data-testid={`label-key-${index}`}\n                  >\n                    <AlertLabelDropdown\n                      {...register(`labels.${index}.key`, {\n                        required: { value: Boolean(labels[index]?.value), message: 'Required.' },\n                      })}\n                      defaultValue={field.key ? { label: field.key, value: field.key } : undefined}\n                      options={keys}\n                      onChange={(newValue: SelectableValue) => {\n                        setValue(`labels.${index}.key`, newValue.value);\n                        setSelectedKey(newValue.value);\n                      }}\n                      type=\"key\"\n                    />\n                  </Field>\n                  <InlineLabel className={styles.equalSign}>=</InlineLabel>\n                  <Field\n                    className={styles.labelInput}\n                    invalid={Boolean(errors.labels?.[index]?.value?.message)}\n                    error={errors.labels?.[index]?.value?.message}\n                    data-testid={`label-value-${index}`}\n                  >\n                    <AlertLabelDropdown\n                      {...register(`labels.${index}.value`, {\n                        required: { value: Boolean(labels[index]?.key), message: 'Required.' },\n                      })}\n                      defaultValue={field.value ? { label: field.value, value: field.value } : undefined}\n                      options={values}\n                      onChange={(newValue: SelectableValue) => {\n                        setValue(`labels.${index}.value`, newValue.value);\n                      }}\n                      onOpenMenu={() => {\n                        setSelectedKey(labels[index].key);\n                      }}\n                      type=\"value\"\n                    />\n                  </Field>\n\n                  <RemoveButton className={styles.deleteLabelButton} index={index} remove={remove} />\n                </div>\n              </div>\n            );\n          })}\n          <AddButton className={styles.addLabelButton} append={append} />\n        </Stack>\n      )}\n    </>\n  );\n};\n\nconst LabelsWithoutSuggestions: FC = () => {\n  const styles = useStyles2(getStyles);\n  const {\n    register,\n    control,\n    watch,\n    formState: { errors },\n  } = useFormContext<RuleFormValues>();\n\n  const labels = watch('labels');\n  const { fields, remove, append } = useFieldArray({ control, name: 'labels' });\n\n  return (\n    <>\n      {fields.map((field, index) => {\n        return (\n          <div key={field.id}>\n            <div className={cx(styles.flexRow, styles.centerAlignRow)} data-testid=\"alertlabel-input-wrapper\">\n              <Field\n                className={styles.labelInput}\n                invalid={!!errors.labels?.[index]?.key?.message}\n                error={errors.labels?.[index]?.key?.message}\n              >\n                <Input\n                  {...register(`labels.${index}.key`, {\n                    required: { value: !!labels[index]?.value, message: 'Required.' },\n                  })}\n                  placeholder=\"key\"\n                  data-testid={`label-key-${index}`}\n                  defaultValue={field.key}\n                />\n              </Field>\n              <InlineLabel className={styles.equalSign}>=</InlineLabel>\n              <Field\n                className={styles.labelInput}\n                invalid={!!errors.labels?.[index]?.value?.message}\n                error={errors.labels?.[index]?.value?.message}\n              >\n                <Input\n                  {...register(`labels.${index}.value`, {\n                    required: { value: !!labels[index]?.key, message: 'Required.' },\n                  })}\n                  placeholder=\"value\"\n                  data-testid={`label-value-${index}`}\n                  defaultValue={field.value}\n                />\n              </Field>\n              <RemoveButton className={styles.deleteLabelButton} index={index} remove={remove} />\n            </div>\n          </div>\n        );\n      })}\n      <AddButton className={styles.addLabelButton} append={append} />\n    </>\n  );\n};\n\nconst LabelsField: FC<Props> = ({ dataSourceName }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div>\n      <Label description=\"A set of default labels is automatically added. Add additional labels as required.\">\n        <Stack gap={0.5} alignItems=\"center\">\n          <Text variant=\"bodySmall\" color=\"primary\">\n            Labels\n          </Text>\n          <Tooltip\n            content={\n              <div>\n                The dropdown only displays labels that you have previously used for alerts. Select a label from the\n                dropdown or type in a new one.\n              </div>\n            }\n          >\n            <Icon className={styles.icon} name=\"info-circle\" size=\"sm\" />\n          </Tooltip>\n        </Stack>\n      </Label>\n      {dataSourceName ? <LabelsWithSuggestions dataSourceName={dataSourceName} /> : <LabelsWithoutSuggestions />}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    icon: css`\n      margin-right: ${theme.spacing(0.5)};\n    `,\n    flexColumn: css`\n      display: flex;\n      flex-direction: column;\n    `,\n    flexRow: css`\n      display: flex;\n      flex-direction: row;\n      justify-content: flex-start;\n\n      & + button {\n        margin-left: ${theme.spacing(0.5)};\n      }\n    `,\n    deleteLabelButton: css`\n      margin-left: ${theme.spacing(0.5)};\n      align-self: flex-start;\n    `,\n    addLabelButton: css`\n      flex-grow: 0;\n      align-self: flex-start;\n    `,\n    centerAlignRow: css`\n      align-items: baseline;\n    `,\n    equalSign: css`\n      align-self: flex-start;\n      width: 28px;\n      justify-content: center;\n      margin-left: ${theme.spacing(0.5)};\n    `,\n    labelInput: css`\n      width: 175px;\n      margin-bottom: -${theme.spacing(1)};\n\n      & + & {\n        margin-left: ${theme.spacing(1)};\n      }\n    `,\n  };\n};\n\nexport default LabelsField;\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Icon, Text, Toggletip, useStyles2 } from '@grafana/ui';\n\ninterface NeedHelpInfoProps {\n  contentText: string | JSX.Element;\n  externalLink?: string;\n  linkText?: string;\n  title: string;\n}\nexport function NeedHelpInfo({ contentText, externalLink, linkText, title }: NeedHelpInfoProps) {\n  const styles = useStyles2(getStyles);\n  return (\n    <Toggletip\n      content={<div className={styles.mutedText}>{contentText}</div>}\n      title={\n        <Stack gap={1} direction=\"row\">\n          <Icon name=\"question-circle\" />\n          {title}\n        </Stack>\n      }\n      footer={\n        externalLink ? (\n          <a href={externalLink} target=\"_blank\" rel=\"noreferrer\">\n            <Stack direction=\"row\" gap={0.5} alignItems=\"center\">\n              <Text color=\"link\">\n                {linkText} <Icon size=\"sm\" name=\"external-link-alt\" />\n              </Text>\n            </Stack>\n          </a>\n        ) : undefined\n      }\n      closeButton={true}\n      placement=\"bottom-start\"\n    >\n      <div className={styles.helpInfo}>\n        <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n          <Icon name=\"question-circle\" size=\"sm\" />\n          <Text variant=\"bodySmall\" color=\"primary\">\n            Need help?\n          </Text>\n        </Stack>\n      </div>\n    </Toggletip>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  mutedText: css`\n    color: ${theme.colors.text.secondary};\n    font-size: ${theme.typography.size.sm};\n  `,\n  helpInfo: css`\n    cursor: pointer;\n    text-decoration: underline;\n  `,\n});\n","import { css, cx } from '@emotion/css';\nimport React, { ReactElement } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { FieldSet, Text, useStyles2 } from '@grafana/ui';\n\nexport interface RuleEditorSectionProps {\n  title: string;\n  stepNo: number;\n  description?: string | ReactElement;\n  fullWidth?: boolean;\n}\n\nexport const RuleEditorSection = ({\n  title,\n  stepNo,\n  children,\n  fullWidth = false,\n  description,\n}: React.PropsWithChildren<RuleEditorSectionProps>) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.parent}>\n      <FieldSet\n        className={cx(fullWidth && styles.fullWidth)}\n        label={\n          <Text variant=\"h3\">\n            {stepNo}. {title}\n          </Text>\n        }\n      >\n        <Stack direction=\"column\">\n          {description && <div className={styles.description}>{description}</div>}\n          {children}\n        </Stack>\n      </FieldSet>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  parent: css`\n    display: flex;\n    flex-direction: row;\n    max-width: ${theme.breakpoints.values.xl}px;\n    border: solid 1px ${theme.colors.border.weak};\n    border-radius: ${theme.shape.radius.default};\n    padding: ${theme.spacing(2)} ${theme.spacing(3)};\n  `,\n  description: css`\n    margin-top: -${theme.spacing(2)};\n  `,\n  fullWidth: css`\n    width: 100%;\n  `,\n});\n"],"names":["useCleanup","cleanupAction","dispatch","selectorRef","ProvisionedResource","ProvisioningAlert","resource","ProvisioningBadge","dashboardApi","alertingApi","build","query","params","uid","CustomAnnotationHeaderField","field","styles","getStyles","Input","theme","annotationField","annotations","annotation","index","control","Stack","InputControl","ref","label","Text","DashboardAnnotationField","dashboard","panel","dashboardUid","panelId","onEditClick","onDeleteClick","dashboardLink","panelLink","Icon","panelSort","b","mergePanels","dashboardResult","panels","nestedPanels","row","collapsedRow","DashboardPicker","isOpen","onChange","onDismiss","getPickerStyles","selectedDashboardUid","setSelectedDashboardUid","selectedPanelId","setSelectedPanelId","dashboardFilter","setDashboardFilter","debouncedDashboardFilter","setDebouncedDashboardFilter","panelFilter","setPanelFilter","useSearchQuery","useDashboardQuery","filteredDashboards","isDashSearchFetching","isDashboardFetching","handleDashboardChange","allDashboardPanels","filteredPanels","currentPanel","isValidPanelIdentifier","selectedDashboardIndex","isDefaultSelection","selectedDashboardIsInPageResult","scrollToItem","node","canScroll","useDebounce","DashboardRow","style","isSelected","PanelRow","panelTitle","isAlertingCompatible","disabled","Tooltip","Modal","Alert","FilterInput","LoadingPlaceholder","height","width","Button","clearButton","AnnotationsStep","showPanelSelector","setShowPanelSelector","useToggle","register","watch","errors","setValue","fields","append","remove","selectedDashboard","setSelectedDashboard","selectedPanel","setSelectedPanel","setSelectedDashboardAndPanelId","updatedAnnotations","draft","dashboardAnnotation","a","panelAnnotation","handleDeleteDashboardAnnotation","handleEditDashboardAnnotation","getAnnotationsSectionDescription","docsLink","NeedHelpInfo","RuleEditorSection","isUrl","ValueInputComponent","TextArea","Field","_customFilter","customFilter","opt","searchQuery","handleIsValidNewOption","inputValue","value","options","exactValueExists","el","valueIsNotEmpty","defaultValue","type","onOpenMenu","Select","useGetCustomLabels","dataSourceName","rulerRequest","useUnifiedAlertingSelector","state","labelsByKeyResult","labelsByKey","rulerRulesConfig","groups","group","rule","key","labelEntry","mapLabelsToOptions","items","item","RemoveButton","className","AddButton","LabelsWithSuggestions","labels","loading","selectedKey","setSelectedKey","keys","getValuesForLabel","values","newValue","InlineLabel","LabelsWithoutSuggestions","LabelsField","Label","contentText","externalLink","linkText","title","stepNo","children","fullWidth","description"],"sourceRoot":""}