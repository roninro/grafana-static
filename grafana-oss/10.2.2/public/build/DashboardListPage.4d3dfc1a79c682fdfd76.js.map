{"version":3,"file":"DashboardListPage.4d3dfc1a79c682fdfd76.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/Select/SortPicker.tsx","webpack://grafana/./public/app/core/services/StateManagerBase.ts","webpack://grafana/./public/app/features/browse-dashboards/components/BrowseActions/DeleteModal.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/BrowseActions/MoveModal.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/FolderActionsButton.tsx","webpack://grafana/./public/app/features/browse-dashboards/permissions.ts","webpack://grafana/./public/app/features/search/state/SearchStateManager.ts","webpack://grafana/./public/app/features/search/tempI18nPhrases.ts","webpack://grafana/./public/app/features/browse-dashboards/components/BrowseActions/BrowseActions.tsx","webpack://grafana/./public/app/features/search/page/components/ActionRow.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/BrowseFilters.tsx","webpack://grafana/./public/app/features/browse-dashboards/types.ts","webpack://grafana/./public/app/features/browse-dashboards/components/CheckboxCell.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/CheckboxHeaderCell.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/utils.ts","webpack://grafana/./public/app/features/browse-dashboards/components/NameCell.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/TagsCell.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/DashboardsTree.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/BrowseView.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/NewFolderForm.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/CreateNewButton.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/SearchView.tsx","webpack://grafana/./public/app/features/browse-dashboards/BrowseDashboardsPage.tsx","webpack://grafana/./public/app/features/search/loaders.ts","webpack://grafana/./public/app/features/search/page/selection.ts","webpack://grafana/./public/app/features/search/components/SearchCheckbox.tsx","webpack://grafana/./public/app/features/search/components/SearchItem.tsx","webpack://grafana/./public/app/features/search/service/folders.ts","webpack://grafana/./public/app/features/search/page/components/FolderSection.tsx","webpack://grafana/./public/app/features/search/page/components/ConfirmDeleteModal.tsx","webpack://grafana/./public/app/features/search/page/components/MoveToFolderModal.tsx","webpack://grafana/./public/app/features/search/page/components/ManageActions.tsx","webpack://grafana/./public/app/features/search/page/components/RootFolderView.tsx","webpack://grafana/./public/app/features/search/page/components/SearchResultsCards.tsx","webpack://grafana/./public/app/features/search/page/components/SearchView.tsx","webpack://grafana/./public/app/features/search/components/DashboardActions.tsx","webpack://grafana/./public/app/features/search/components/ManageDashboardsNew.tsx","webpack://grafana/./public/app/features/search/components/DashboardListPage.tsx","webpack://grafana/./public/app/features/search/page/reporting.ts"],"sourcesContent":["import React from 'react';\nimport { useAsync } from 'react-use';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Icon, Select } from '@grafana/ui';\nimport { DEFAULT_SORT } from 'app/features/search/constants';\nimport { getGrafanaSearcher } from 'app/features/search/service';\n\nexport interface Props {\n  onChange: (sortValue: SelectableValue) => void;\n  value?: string;\n  placeholder?: string;\n  getSortOptions?: () => Promise<SelectableValue[]>;\n  filter?: string[];\n  isClearable?: boolean;\n}\n\nconst defaultSortOptionsGetter = (): Promise<SelectableValue[]> => {\n  return getGrafanaSearcher().getSortOptions();\n};\n\nexport function SortPicker({ onChange, value, placeholder, filter, getSortOptions, isClearable }: Props) {\n  // Using sync Select and manual options fetching here since we need to find the selected option by value\n  const options = useAsync<() => Promise<SelectableValue[]>>(async () => {\n    const vals = await (getSortOptions ?? defaultSortOptionsGetter)();\n    if (filter) {\n      return vals.filter((v) => filter.includes(v.value));\n    }\n    return vals;\n  }, [getSortOptions, filter]);\n\n  if (options.loading) {\n    return null;\n  }\n\n  const isDesc = Boolean(value?.includes('desc') || value?.startsWith('-')); // bluge syntax starts with \"-\"\n  return (\n    <Select\n      key={value}\n      width={28}\n      onChange={onChange}\n      value={options.value?.find((opt) => opt.value === value) ?? null}\n      options={options.value}\n      aria-label=\"Sort\"\n      placeholder={placeholder ?? `Sort (Default ${DEFAULT_SORT.label})`}\n      prefix={<Icon name={isDesc ? 'sort-amount-down' : 'sort-amount-up'} />}\n      isClearable={isClearable}\n    />\n  );\n}\n","import { useEffect } from 'react';\nimport { Observer, Subject, Subscription } from 'rxjs';\n\nimport { useForceUpdate } from '@grafana/ui';\n\nexport class StateManagerBase<TState> {\n  private _subject = new Subject<TState>();\n  private _state: TState;\n\n  constructor(state: TState) {\n    this._state = state;\n  }\n\n  useState() {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useLatestState(this);\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  setState(update: Partial<TState>) {\n    this._state = {\n      ...this._state,\n      ...update,\n    };\n    this._subject.next(this._state);\n  }\n\n  /**\n   * Subscribe to the scene state subject\n   **/\n  subscribeToState(observerOrNext?: Partial<Observer<TState>>): Subscription {\n    return this._subject.subscribe(observerOrNext);\n  }\n}\n/**\n * This hook is always returning model.state instead of a useState that remembers the last state emitted on the subject\n * The reason for this is so that if the model instance change this function will always return the latest state.\n */\nfunction useLatestState<TState>(model: StateManagerBase<TState>): TState {\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    const s = model.subscribeToState({ next: forceUpdate });\n    return () => s.unsubscribe();\n  }, [model, forceUpdate]);\n\n  return model.state;\n}\n","import React, { useState } from 'react';\n\nimport { Space } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { Alert, ConfirmModal, Text } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { useGetAffectedItemsQuery } from '../../api/browseDashboardsAPI';\nimport { DashboardTreeSelection } from '../../types';\n\nimport { DescendantCount } from './DescendantCount';\n\nexport interface Props {\n  isOpen: boolean;\n  onConfirm: () => Promise<void>;\n  onDismiss: () => void;\n  selectedItems: DashboardTreeSelection;\n}\n\nexport const DeleteModal = ({ onConfirm, onDismiss, selectedItems, ...props }: Props) => {\n  const { data } = useGetAffectedItemsQuery(selectedItems);\n  const deleteIsInvalid = !config.featureToggles.nestedFolders && data && (data.alertRule || data.libraryPanel);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const onDelete = async () => {\n    setIsDeleting(true);\n    try {\n      await onConfirm();\n      setIsDeleting(false);\n      onDismiss();\n    } catch {\n      setIsDeleting(false);\n    }\n  };\n\n  return (\n    <ConfirmModal\n      body={\n        <>\n          <Text element=\"p\">\n            <Trans i18nKey=\"browse-dashboards.action.delete-modal-text\">\n              This action will delete the following content:\n            </Trans>\n          </Text>\n          <DescendantCount selectedItems={selectedItems} />\n          <Space v={2} />\n        </>\n      }\n      description={\n        <>\n          {deleteIsInvalid ? (\n            <Alert\n              severity=\"warning\"\n              title={t('browse-dashboards.action.delete-modal-invalid-title', 'Cannot delete folder')}\n            >\n              <Trans i18nKey=\"browse-dashboards.action.delete-modal-invalid-text\">\n                One or more folders contain library panels or alert rules. Delete these first in order to proceed.\n              </Trans>\n            </Alert>\n          ) : null}\n        </>\n      }\n      confirmationText=\"Delete\"\n      confirmText={\n        isDeleting\n          ? t('browse-dashboards.action.deleting', 'Deleting...')\n          : t('browse-dashboards.action.delete-button', 'Delete')\n      }\n      onDismiss={onDismiss}\n      onConfirm={onDelete}\n      title={t('browse-dashboards.action.delete-modal-title', 'Delete')}\n      {...props}\n    />\n  );\n};\n","import React, { useState } from 'react';\n\nimport { Space } from '@grafana/experimental';\nimport { Alert, Button, Field, Modal, Text } from '@grafana/ui';\nimport { FolderPicker } from 'app/core/components/Select/FolderPicker';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { DashboardTreeSelection } from '../../types';\n\nimport { DescendantCount } from './DescendantCount';\n\nexport interface Props {\n  isOpen: boolean;\n  onConfirm: (targetFolderUid: string) => Promise<void>;\n  onDismiss: () => void;\n  selectedItems: DashboardTreeSelection;\n}\n\nexport const MoveModal = ({ onConfirm, onDismiss, selectedItems, ...props }: Props) => {\n  const [moveTarget, setMoveTarget] = useState<string>();\n  const [isMoving, setIsMoving] = useState(false);\n  const selectedFolders = Object.keys(selectedItems.folder).filter((uid) => selectedItems.folder[uid]);\n\n  const onMove = async () => {\n    if (moveTarget !== undefined) {\n      setIsMoving(true);\n      try {\n        await onConfirm(moveTarget);\n        setIsMoving(false);\n        onDismiss();\n      } catch {\n        setIsMoving(false);\n      }\n    }\n  };\n\n  return (\n    <Modal title={t('browse-dashboards.action.move-modal-title', 'Move')} onDismiss={onDismiss} {...props}>\n      {selectedFolders.length > 0 && (\n        <Alert\n          severity=\"info\"\n          title={t('browse-dashboards.action.move-modal-alert', 'Moving this item may change its permissions.')}\n        />\n      )}\n\n      <Text element=\"p\">\n        <Trans i18nKey=\"browse-dashboards.action.move-modal-text\">This action will move the following content:</Trans>\n      </Text>\n\n      <DescendantCount selectedItems={selectedItems} />\n\n      <Space v={3} />\n\n      <Field label={t('browse-dashboards.action.move-modal-field-label', 'Folder name')}>\n        <FolderPicker value={moveTarget} excludeUIDs={selectedFolders} onChange={setMoveTarget} />\n      </Field>\n\n      <Modal.ButtonRow>\n        <Button onClick={onDismiss} variant=\"secondary\" fill=\"outline\">\n          <Trans i18nKey=\"browse-dashboards.action.cancel-button\">Cancel</Trans>\n        </Button>\n        <Button disabled={moveTarget === undefined || isMoving} onClick={onMove} variant=\"primary\">\n          {isMoving\n            ? t('browse-dashboards.action.moving', 'Moving...')\n            : t('browse-dashboards.action.move-button', 'Move')}\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { config, locationService, reportInteraction } from '@grafana/runtime';\nimport { Button, Drawer, Dropdown, Icon, Menu, MenuItem } from '@grafana/ui';\nimport { Permissions } from 'app/core/components/AccessControl';\nimport { appEvents } from 'app/core/core';\nimport { t, Trans } from 'app/core/internationalization';\nimport { FolderDTO } from 'app/types';\nimport { ShowModalReactEvent } from 'app/types/events';\n\nimport { useDeleteFolderMutation, useMoveFolderMutation } from '../api/browseDashboardsAPI';\nimport { getFolderPermissions } from '../permissions';\n\nimport { DeleteModal } from './BrowseActions/DeleteModal';\nimport { MoveModal } from './BrowseActions/MoveModal';\n\ninterface Props {\n  folder: FolderDTO;\n}\n\nexport function FolderActionsButton({ folder }: Props) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [showPermissionsDrawer, setShowPermissionsDrawer] = useState(false);\n  const [moveFolder] = useMoveFolderMutation();\n  const [deleteFolder] = useDeleteFolderMutation();\n  const { canEditFolders, canDeleteFolders, canViewPermissions, canSetPermissions } = getFolderPermissions(folder);\n  // Can only move folders when nestedFolders is enabled\n  const canMoveFolder = config.featureToggles.nestedFolders && canEditFolders;\n\n  const onMove = async (destinationUID: string) => {\n    await moveFolder({ folder, destinationUID });\n    reportInteraction('grafana_manage_dashboards_item_moved', {\n      item_counts: {\n        folder: 1,\n        dashboard: 0,\n      },\n      source: 'folder_actions',\n    });\n  };\n\n  const onDelete = async () => {\n    await deleteFolder(folder);\n    reportInteraction('grafana_manage_dashboards_item_deleted', {\n      item_counts: {\n        folder: 1,\n        dashboard: 0,\n      },\n      source: 'folder_actions',\n    });\n    const { parents } = folder;\n    const parentUrl = parents && parents.length ? parents[parents.length - 1].url : '/dashboards';\n    locationService.push(parentUrl);\n  };\n\n  const showMoveModal = () => {\n    appEvents.publish(\n      new ShowModalReactEvent({\n        component: MoveModal,\n        props: {\n          selectedItems: {\n            folder: { [folder.uid]: true },\n            dashboard: {},\n            panel: {},\n            $all: false,\n          },\n          onConfirm: onMove,\n        },\n      })\n    );\n  };\n\n  const showDeleteModal = () => {\n    appEvents.publish(\n      new ShowModalReactEvent({\n        component: DeleteModal,\n        props: {\n          selectedItems: {\n            folder: { [folder.uid]: true },\n            dashboard: {},\n            panel: {},\n            $all: false,\n          },\n          onConfirm: onDelete,\n        },\n      })\n    );\n  };\n\n  const managePermissionsLabel = t('browse-dashboards.folder-actions-button.manage-permissions', 'Manage permissions');\n  const moveLabel = t('browse-dashboards.folder-actions-button.move', 'Move');\n  const deleteLabel = t('browse-dashboards.folder-actions-button.delete', 'Delete');\n\n  const menu = (\n    <Menu>\n      {canViewPermissions && <MenuItem onClick={() => setShowPermissionsDrawer(true)} label={managePermissionsLabel} />}\n      {canMoveFolder && <MenuItem onClick={showMoveModal} label={moveLabel} />}\n      {canDeleteFolders && <MenuItem destructive onClick={showDeleteModal} label={deleteLabel} />}\n    </Menu>\n  );\n\n  if (!canViewPermissions && !canMoveFolder && !canDeleteFolders) {\n    return null;\n  }\n\n  return (\n    <>\n      <Dropdown overlay={menu} onVisibleChange={setIsOpen}>\n        <Button variant=\"secondary\">\n          <Trans i18nKey=\"browse-dashboards.folder-actions-button.folder-actions\">Folder actions</Trans>\n          <Icon name={isOpen ? 'angle-up' : 'angle-down'} />\n        </Button>\n      </Dropdown>\n      {showPermissionsDrawer && (\n        <Drawer\n          title={t('browse-dashboards.action.manage-permissions-button', 'Manage permissions')}\n          subtitle={folder.title}\n          onClose={() => setShowPermissionsDrawer(false)}\n          size=\"md\"\n        >\n          <Permissions resource=\"folders\" resourceId={folder.uid} canSetPermissions={canSetPermissions} />\n        </Drawer>\n      )}\n    </>\n  );\n}\n","import { config } from '@grafana/runtime';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, FolderDTO } from 'app/types';\n\nfunction checkFolderPermission(action: AccessControlAction, folderDTO?: FolderDTO) {\n  return folderDTO ? contextSrv.hasPermissionInMetadata(action, folderDTO) : contextSrv.hasPermission(action);\n}\n\nexport function getFolderPermissions(folderDTO?: FolderDTO) {\n  // Can only create a folder if we have permissions and either we're at root or nestedFolders is enabled\n  const canCreateDashboards = checkFolderPermission(AccessControlAction.DashboardsCreate, folderDTO);\n  const canCreateFolders = Boolean(\n    (!folderDTO || config.featureToggles.nestedFolders) && checkFolderPermission(AccessControlAction.FoldersCreate)\n  );\n  const canDeleteFolders = checkFolderPermission(AccessControlAction.FoldersDelete, folderDTO);\n  const canEditDashboards = checkFolderPermission(AccessControlAction.DashboardsWrite, folderDTO);\n  const canEditFolders = checkFolderPermission(AccessControlAction.FoldersWrite, folderDTO);\n  const canSetPermissions = checkFolderPermission(AccessControlAction.FoldersPermissionsWrite, folderDTO);\n  const canViewPermissions = checkFolderPermission(AccessControlAction.FoldersPermissionsRead, folderDTO);\n\n  return {\n    canCreateDashboards,\n    canCreateFolders,\n    canDeleteFolders,\n    canEditDashboards,\n    canEditFolders,\n    canSetPermissions,\n    canViewPermissions,\n  };\n}\n","import { debounce } from 'lodash';\nimport { FormEvent } from 'react';\n\nimport { locationService } from '@grafana/runtime';\nimport { TermCount } from 'app/core/components/TagFilter/TagFilter';\nimport { StateManagerBase } from 'app/core/services/StateManagerBase';\nimport store from 'app/core/store';\n\nimport { SEARCH_PANELS_LOCAL_STORAGE_KEY, SEARCH_SELECTED_LAYOUT, SEARCH_SELECTED_SORT } from '../constants';\nimport {\n  reportDashboardListViewed,\n  reportSearchFailedQueryInteraction,\n  reportSearchQueryInteraction,\n  reportSearchResultInteraction,\n} from '../page/reporting';\nimport { getGrafanaSearcher, SearchQuery } from '../service';\nimport { SearchLayout, SearchQueryParams, SearchState } from '../types';\nimport { parseRouteParams } from '../utils';\n\nexport const initialState: SearchState = {\n  query: '',\n  tag: [],\n  starred: false,\n  layout: SearchLayout.Folders,\n  sort: undefined,\n  prevSort: undefined,\n  eventTrackingNamespace: 'dashboard_search',\n};\n\nexport const defaultQueryParams: SearchQueryParams = {\n  sort: null,\n  starred: null,\n  query: null,\n  tag: null,\n  layout: null,\n};\n\nexport class SearchStateManager extends StateManagerBase<SearchState> {\n  updateLocation = debounce((query) => locationService.partial(query, true), 300);\n  doSearchWithDebounce = debounce(() => this.doSearch(), 300);\n  lastQuery?: SearchQuery;\n\n  lastSearchTimestamp = 0;\n\n  initStateFromUrl(folderUid?: string, doInitialSearch = true) {\n    const stateFromUrl = parseRouteParams(locationService.getSearchObject());\n\n    // Force list view when conditions are specified from the URL\n    if (stateFromUrl.query || stateFromUrl.datasource || stateFromUrl.panel_type) {\n      stateFromUrl.layout = SearchLayout.List;\n    }\n\n    stateManager.setState({\n      ...initialState,\n      ...stateFromUrl,\n      folderUid: folderUid,\n      eventTrackingNamespace: folderUid ? 'manage_dashboards' : 'dashboard_search',\n    });\n\n    if (doInitialSearch) {\n      this.doSearch();\n    }\n  }\n\n  /**\n   * Updates internal and url state, then triggers a new search\n   */\n  setStateAndDoSearch(state: Partial<SearchState>) {\n    const sort = state.sort || this.state.sort || localStorage.getItem(SEARCH_SELECTED_SORT) || undefined;\n\n    // Set internal state\n    this.setState({ sort, ...state });\n\n    // Update url state\n    this.updateLocation({\n      query: this.state.query.length === 0 ? null : this.state.query,\n      tag: this.state.tag,\n      datasource: this.state.datasource,\n      panel_type: this.state.panel_type,\n      starred: this.state.starred ? this.state.starred : null,\n      sort: this.state.sort,\n    });\n\n    // issue new search query\n    this.doSearchWithDebounce();\n  }\n\n  onCloseSearch = () => {\n    this.updateLocation({\n      search: null,\n      folder: null,\n      ...defaultQueryParams,\n    });\n  };\n\n  onClearSearchAndFilters = () => {\n    this.setStateAndDoSearch({\n      query: '',\n      datasource: undefined,\n      tag: [],\n      panel_type: undefined,\n      starred: undefined,\n      sort: undefined,\n    });\n  };\n\n  onQueryChange = (query: string) => {\n    this.setStateAndDoSearch({ query });\n  };\n\n  onRemoveTag = (tagToRemove: string) => {\n    this.setStateAndDoSearch({ tag: this.state.tag.filter((tag) => tag !== tagToRemove) });\n  };\n\n  onTagFilterChange = (tags: string[]) => {\n    this.setStateAndDoSearch({ tag: tags });\n  };\n\n  onAddTag = (newTag: string) => {\n    if (this.state.tag && this.state.tag.includes(newTag)) {\n      return;\n    }\n\n    this.setStateAndDoSearch({ tag: [...this.state.tag, newTag] });\n  };\n\n  onDatasourceChange = (datasource: string | undefined) => {\n    this.setStateAndDoSearch({ datasource });\n  };\n\n  onPanelTypeChange = (panel_type?: string) => {\n    this.setStateAndDoSearch({ panel_type });\n  };\n\n  onStarredFilterChange = (e: FormEvent<HTMLInputElement>) => {\n    const starred = e.currentTarget.checked;\n    this.setStateAndDoSearch({ starred });\n  };\n\n  onClearStarred = () => {\n    this.setStateAndDoSearch({ starred: false });\n  };\n\n  onSortChange = (sort: string | undefined) => {\n    if (sort) {\n      localStorage.setItem(SEARCH_SELECTED_SORT, sort);\n    } else {\n      localStorage.removeItem(SEARCH_SELECTED_SORT);\n    }\n\n    if (this.state.layout === SearchLayout.Folders) {\n      this.setStateAndDoSearch({ sort, layout: SearchLayout.List });\n    } else {\n      this.setStateAndDoSearch({ sort });\n    }\n  };\n\n  onLayoutChange = (layout: SearchLayout) => {\n    localStorage.setItem(SEARCH_SELECTED_LAYOUT, layout);\n\n    if (this.state.sort && layout === SearchLayout.Folders) {\n      this.setStateAndDoSearch({ layout, prevSort: this.state.sort, sort: undefined });\n    } else {\n      this.setStateAndDoSearch({ layout, sort: this.state.prevSort });\n    }\n  };\n\n  onSetIncludePanels = (includePanels: boolean) => {\n    this.setStateAndDoSearch({ includePanels });\n    store.set(SEARCH_PANELS_LOCAL_STORAGE_KEY, includePanels);\n  };\n\n  hasSearchFilters() {\n    return this.state.query || this.state.tag.length || this.state.starred || this.state.panel_type || this.state.sort;\n  }\n\n  getSearchQuery() {\n    const q: SearchQuery = {\n      query: this.state.query,\n      tags: this.state.tag,\n      ds_uid: this.state.datasource,\n      panel_type: this.state.panel_type,\n      location: this.state.folderUid, // This will scope all results to the prefix\n      sort: this.state.sort,\n      explain: this.state.explain,\n      withAllowedActions: this.state.explain, // allowedActions are currently not used for anything on the UI and added only in `explain` mode\n      starred: this.state.starred,\n    };\n\n    // Only dashboards have additional properties\n    if (q.sort?.length && !q.sort.includes('name')) {\n      q.kind = ['dashboard', 'folder']; // skip panels\n    }\n\n    if (!q.query?.length) {\n      q.query = '*';\n      if (!q.location) {\n        q.kind = ['dashboard', 'folder']; // skip panels\n      }\n    }\n\n    if (!this.state.includePanels && !q.kind) {\n      q.kind = ['dashboard', 'folder']; // skip panels\n    }\n\n    if (q.panel_type?.length) {\n      q.kind = ['panel'];\n    }\n\n    return q;\n  }\n\n  private doSearch() {\n    const trackingInfo = {\n      layout: this.state.layout,\n      starred: this.state.starred,\n      sortValue: this.state.sort,\n      query: this.state.query,\n      tagCount: this.state.tag?.length,\n      includePanels: this.state.includePanels,\n    };\n\n    reportSearchQueryInteraction(this.state.eventTrackingNamespace, trackingInfo);\n\n    this.lastQuery = this.getSearchQuery();\n\n    this.setState({ loading: true });\n\n    const searcher = getGrafanaSearcher();\n\n    const searchTimestamp = Date.now();\n    const searchPromise = this.state.starred ? searcher.starred(this.lastQuery) : searcher.search(this.lastQuery);\n\n    searchPromise\n      .then((result) => {\n        // Only keep the results if it's was issued after the most recently resolved search.\n        // This prevents results showing out of order if first request is slower than later ones\n        if (searchTimestamp > this.lastSearchTimestamp) {\n          this.setState({ result, loading: false });\n          this.lastSearchTimestamp = searchTimestamp;\n        }\n      })\n      .catch((error) => {\n        reportSearchFailedQueryInteraction(this.state.eventTrackingNamespace, {\n          ...trackingInfo,\n          error: error?.message,\n        });\n        this.setState({ loading: false });\n      });\n  }\n\n  // This gets the possible tags from within the query results\n  getTagOptions = (): Promise<TermCount[]> => {\n    const query = this.lastQuery ?? {\n      kind: ['dashboard', 'folder'],\n      query: '*',\n    };\n    return getGrafanaSearcher().tags(query);\n  };\n\n  /**\n   * When item is selected clear some filters and report interaction\n   */\n  onSearchItemClicked = (e: React.MouseEvent<HTMLElement>) => {\n    reportSearchResultInteraction(this.state.eventTrackingNamespace, {\n      layout: this.state.layout,\n      starred: this.state.starred,\n      sortValue: this.state.sort,\n      query: this.state.query,\n      tagCount: this.state.tag?.length,\n      includePanels: this.state.includePanels,\n    });\n  };\n\n  /**\n   * Caller should handle debounce\n   */\n  onReportSearchUsage = () => {\n    reportDashboardListViewed(this.state.eventTrackingNamespace, {\n      layout: this.state.layout,\n      starred: this.state.starred,\n      sortValue: this.state.sort,\n      query: this.state.query,\n      tagCount: this.state.tag?.length,\n      includePanels: this.state.includePanels,\n    });\n  };\n}\n\nlet stateManager: SearchStateManager;\n\nexport function getSearchStateManager() {\n  if (!stateManager) {\n    const selectedLayout = localStorage.getItem(SEARCH_SELECTED_LAYOUT) as SearchLayout;\n    const layout = selectedLayout ?? initialState.layout;\n\n    let includePanels = store.getBool(SEARCH_PANELS_LOCAL_STORAGE_KEY, true);\n    if (includePanels) {\n      includePanels = false;\n    }\n\n    stateManager = new SearchStateManager({ ...initialState, layout, includePanels });\n  }\n\n  return stateManager;\n}\n\nexport function useSearchStateManager() {\n  const stateManager = getSearchStateManager();\n  const state = stateManager.useState();\n\n  return [state, stateManager] as const;\n}\n","// Temporary place to collect phrases we reuse between new and old browse/search\n// TODO: remove this when new Browse Dashboards UI is no longer feature flagged\n\nimport { t } from 'app/core/internationalization';\n\nexport function getSearchPlaceholder(includePanels = false) {\n  return includePanels\n    ? t('search.search-input.include-panels-placeholder', 'Search for dashboards, folders, and panels')\n    : t('search.search-input.placeholder', 'Search for dashboards and folders');\n}\n\nexport function getNewDashboardPhrase() {\n  return t('search.dashboard-actions.new-dashboard', 'New dashboard');\n}\n\nexport function getNewFolderPhrase() {\n  return t('search.dashboard-actions.new-folder', 'New folder');\n}\n\nexport function getImportPhrase() {\n  return t('search.dashboard-actions.import', 'Import');\n}\n\nexport function getNewPhrase() {\n  return t('search.dashboard-actions.new', 'New');\n}\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { Button, Tooltip, useStyles2 } from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\nimport { t, Trans } from 'app/core/internationalization';\nimport { useSearchStateManager } from 'app/features/search/state/SearchStateManager';\nimport { useDispatch } from 'app/types';\nimport { ShowModalReactEvent } from 'app/types/events';\n\nimport { useDeleteItemsMutation, useMoveItemsMutation } from '../../api/browseDashboardsAPI';\nimport { setAllSelection, useActionSelectionState } from '../../state';\nimport { DashboardTreeSelection } from '../../types';\n\nimport { DeleteModal } from './DeleteModal';\nimport { MoveModal } from './MoveModal';\n\nexport interface Props {}\n\nexport function BrowseActions() {\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n  const selectedItems = useActionSelectionState();\n  const [deleteItems] = useDeleteItemsMutation();\n  const [moveItems] = useMoveItemsMutation();\n  const [, stateManager] = useSearchStateManager();\n\n  // Folders can only be moved if nested folders is enabled\n  const moveIsInvalid = useMemo(\n    () => !config.featureToggles.nestedFolders && Object.values(selectedItems.folder).some((v) => v),\n    [selectedItems]\n  );\n\n  const isSearching = stateManager.hasSearchFilters();\n\n  const onActionComplete = () => {\n    dispatch(setAllSelection({ isSelected: false, folderUID: undefined }));\n\n    if (isSearching) {\n      // Redo search query\n      stateManager.doSearchWithDebounce();\n    }\n  };\n\n  const onDelete = async () => {\n    await deleteItems({ selectedItems });\n    trackAction('delete', selectedItems);\n    onActionComplete();\n  };\n\n  const onMove = async (destinationUID: string) => {\n    await moveItems({ selectedItems, destinationUID });\n    trackAction('move', selectedItems);\n    onActionComplete();\n  };\n\n  const showMoveModal = () => {\n    appEvents.publish(\n      new ShowModalReactEvent({\n        component: MoveModal,\n        props: {\n          selectedItems,\n          onConfirm: onMove,\n        },\n      })\n    );\n  };\n\n  const showDeleteModal = () => {\n    appEvents.publish(\n      new ShowModalReactEvent({\n        component: DeleteModal,\n        props: {\n          selectedItems,\n          onConfirm: onDelete,\n        },\n      })\n    );\n  };\n\n  const moveButton = (\n    <Button onClick={showMoveModal} variant=\"secondary\" disabled={moveIsInvalid}>\n      <Trans i18nKey=\"browse-dashboards.action.move-button\">Move</Trans>\n    </Button>\n  );\n\n  return (\n    <div className={styles.row} data-testid=\"manage-actions\">\n      {moveIsInvalid ? (\n        <Tooltip content={t('browse-dashboards.action.cannot-move-folders', 'Folders cannot be moved')}>\n          {moveButton}\n        </Tooltip>\n      ) : (\n        moveButton\n      )}\n\n      <Button onClick={showDeleteModal} variant=\"destructive\">\n        <Trans i18nKey=\"browse-dashboards.action.delete-button\">Delete</Trans>\n      </Button>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  row: css({\n    display: 'flex',\n    flexDirection: 'row',\n    gap: theme.spacing(1),\n    marginBottom: theme.spacing(2),\n  }),\n});\n\nconst actionMap = {\n  move: 'grafana_manage_dashboards_item_moved',\n  delete: 'grafana_manage_dashboards_item_deleted',\n} as const;\n\nfunction trackAction(action: keyof typeof actionMap, selectedItems: Omit<DashboardTreeSelection, 'panel' | '$all'>) {\n  const selectedDashboards = Object.keys(selectedItems.dashboard).filter((uid) => selectedItems.dashboard[uid]);\n  const selectedFolders = Object.keys(selectedItems.folder).filter((uid) => selectedItems.folder[uid]);\n\n  reportInteraction(actionMap[action], {\n    item_counts: {\n      folder: selectedFolders.length,\n      dashboard: selectedDashboards.length,\n    },\n    source: 'tree_actions',\n  });\n}\n","import { css } from '@emotion/css';\nimport React, { FormEvent } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Button, Checkbox, HorizontalGroup, RadioButtonGroup, useStyles2 } from '@grafana/ui';\nimport { SortPicker } from 'app/core/components/Select/SortPicker';\nimport { TagFilter, TermCount } from 'app/core/components/TagFilter/TagFilter';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { SearchLayout, SearchState } from '../../types';\n\nfunction getLayoutOptions() {\n  return [\n    {\n      value: SearchLayout.Folders,\n      icon: 'folder',\n      description: t('search.actions.view-as-folders', 'View by folders'),\n    },\n    { value: SearchLayout.List, icon: 'list-ul', description: t('search.actions.view-as-list', 'View as list') },\n  ];\n}\n\ninterface Props {\n  onLayoutChange: (layout: SearchLayout) => void;\n  onSortChange: (value?: string) => void;\n  onStarredFilterChange?: (event: FormEvent<HTMLInputElement>) => void;\n  onTagFilterChange: (tags: string[]) => void;\n  getTagOptions: () => Promise<TermCount[]>;\n  getSortOptions: () => Promise<SelectableValue[]>;\n  sortPlaceholder?: string;\n  onDatasourceChange: (ds?: string) => void;\n  onPanelTypeChange: (pt?: string) => void;\n  includePanels: boolean;\n  onSetIncludePanels: (v: boolean) => void;\n  state: SearchState;\n  showStarredFilter?: boolean;\n  hideLayout?: boolean;\n}\n\nexport function getValidQueryLayout(q: SearchState): SearchLayout {\n  const layout = q.layout ?? SearchLayout.Folders;\n\n  // Folders is not valid when a query exists\n  if (layout === SearchLayout.Folders) {\n    if (q.query || q.sort || q.starred || q.tag.length > 0) {\n      return SearchLayout.List;\n    }\n  }\n\n  return layout;\n}\n\nexport const ActionRow = ({\n  onLayoutChange,\n  onSortChange,\n  onStarredFilterChange = () => {},\n  onTagFilterChange,\n  getTagOptions,\n  getSortOptions,\n  sortPlaceholder,\n  onDatasourceChange,\n  onPanelTypeChange,\n  onSetIncludePanels,\n  state,\n  showStarredFilter,\n  hideLayout,\n}: Props) => {\n  const styles = useStyles2(getStyles);\n  const layout = getValidQueryLayout(state);\n\n  // Disabled folder layout option when query is present\n  const disabledOptions = state.query || state.datasource || state.panel_type ? [SearchLayout.Folders] : [];\n\n  return (\n    <div className={styles.actionRow}>\n      <HorizontalGroup spacing=\"md\" width=\"auto\">\n        <TagFilter isClearable={false} tags={state.tag} tagOptions={getTagOptions} onChange={onTagFilterChange} />\n        {config.featureToggles.panelTitleSearch && (\n          <Checkbox\n            data-testid=\"include-panels\"\n            disabled={layout === SearchLayout.Folders}\n            value={state.includePanels}\n            onChange={() => onSetIncludePanels(!state.includePanels)}\n            label={t('search.actions.include-panels', 'Include panels')}\n          />\n        )}\n\n        {showStarredFilter && (\n          <div className={styles.checkboxWrapper}>\n            <Checkbox\n              label={t('search.actions.starred', 'Starred')}\n              onChange={onStarredFilterChange}\n              value={state.starred}\n            />\n          </div>\n        )}\n        {state.datasource && (\n          <Button icon=\"times\" variant=\"secondary\" onClick={() => onDatasourceChange(undefined)}>\n            <Trans i18nKey=\"search.actions.remove-datasource-filter\">\n              Datasource: {{ datasource: state.datasource }}\n            </Trans>\n          </Button>\n        )}\n        {state.panel_type && (\n          <Button icon=\"times\" variant=\"secondary\" onClick={() => onPanelTypeChange(undefined)}>\n            Panel: {state.panel_type}\n          </Button>\n        )}\n      </HorizontalGroup>\n\n      <HorizontalGroup spacing=\"md\" width=\"auto\">\n        {!hideLayout && (\n          <RadioButtonGroup\n            options={getLayoutOptions()}\n            disabledOptions={disabledOptions}\n            onChange={onLayoutChange}\n            value={layout}\n          />\n        )}\n        <SortPicker\n          onChange={(change) => onSortChange(change?.value)}\n          value={state.sort}\n          getSortOptions={getSortOptions}\n          placeholder={sortPlaceholder || t('search.actions.sort-placeholder', 'Sort')}\n          isClearable\n        />\n      </HorizontalGroup>\n    </div>\n  );\n};\n\nActionRow.displayName = 'ActionRow';\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    actionRow: css`\n      display: none;\n\n      ${theme.breakpoints.up('md')} {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding-bottom: ${theme.spacing(2)};\n        width: 100%;\n      }\n    `,\n    checkboxWrapper: css`\n      label {\n        line-height: 1.2;\n      }\n    `,\n  };\n};\n","import React from 'react';\n\nimport { ActionRow } from 'app/features/search/page/components/ActionRow';\nimport { getGrafanaSearcher } from 'app/features/search/service';\nimport { useSearchStateManager } from 'app/features/search/state/SearchStateManager';\n\nexport function BrowseFilters() {\n  const [searchState, stateManager] = useSearchStateManager();\n\n  return (\n    <div>\n      <ActionRow\n        hideLayout\n        showStarredFilter\n        state={searchState}\n        getTagOptions={stateManager.getTagOptions}\n        getSortOptions={getGrafanaSearcher().getSortOptions}\n        sortPlaceholder={getGrafanaSearcher().sortPlaceholder}\n        includePanels={searchState.includePanels ?? false}\n        onLayoutChange={stateManager.onLayoutChange}\n        onStarredFilterChange={stateManager.onStarredFilterChange}\n        onSortChange={stateManager.onSortChange}\n        onTagFilterChange={stateManager.onTagFilterChange}\n        onDatasourceChange={stateManager.onDatasourceChange}\n        onPanelTypeChange={stateManager.onPanelTypeChange}\n        onSetIncludePanels={stateManager.onSetIncludePanels}\n      />\n    </div>\n  );\n}\n","import { CellProps, Column, HeaderProps } from 'react-table';\n\nimport { DashboardViewItem, DashboardViewItemKind } from 'app/features/search/types';\n\nexport type DashboardTreeSelection = Record<DashboardViewItemKind, Record<string, boolean | undefined>> & {\n  $all: boolean;\n};\n\n/**\n * Stores children at a particular location in the tree, and information\n * required for pagination.\n */\nexport type DashboardViewItemCollection = {\n  items: DashboardViewItem[];\n  lastFetchedKind: 'folder' | 'dashboard';\n  lastFetchedPage: number;\n  lastKindHasMoreItems: boolean;\n  isFullyLoaded: boolean;\n};\n\nexport interface BrowseDashboardsState {\n  rootItems: DashboardViewItemCollection | undefined;\n  childrenByParentUID: Record<string, DashboardViewItemCollection | undefined>;\n  selectedItems: DashboardTreeSelection;\n\n  // Only folders can ever be open or closed, so no need to seperate this by kind\n  openFolders: Record<string, boolean>;\n}\n\nexport interface UIDashboardViewItem {\n  kind: 'ui';\n  uiKind: 'empty-folder' | 'pagination-placeholder';\n  uid: string;\n}\n\nexport type DashboardViewItemWithUIItems = DashboardViewItem | UIDashboardViewItem;\n\nexport interface DashboardsTreeItem<T extends DashboardViewItemWithUIItems = DashboardViewItemWithUIItems> {\n  item: T;\n  level: number;\n  isOpen: boolean;\n  parentUID?: string;\n}\n\ninterface RendererUserProps {\n  // Note: userProps for cell renderers (e.g. second argument in `cell.render('Cell', foo)` )\n  // aren't typed, so we must be careful when accessing this\n  isSelected?: (kind: DashboardViewItem | '$all') => SelectionState;\n  onAllSelectionChange?: (newState: boolean) => void;\n  onItemSelectionChange?: (item: DashboardViewItem, newState: boolean) => void;\n  treeID?: string;\n}\n\nexport type DashboardsTreeColumn = Column<DashboardsTreeItem>;\nexport type DashboardsTreeCellProps = CellProps<DashboardsTreeItem, unknown> & RendererUserProps;\nexport type DashboardTreeHeaderProps = HeaderProps<DashboardsTreeItem> & RendererUserProps;\n\nexport enum SelectionState {\n  Unselected,\n  Selected,\n  Mixed,\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Checkbox, useStyles2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { DashboardsTreeCellProps, SelectionState } from '../types';\n\nexport default function CheckboxCell({\n  row: { original: row },\n  isSelected,\n  onItemSelectionChange,\n}: DashboardsTreeCellProps) {\n  const styles = useStyles2(getStyles);\n  const item = row.item;\n\n  if (!isSelected) {\n    return <span className={styles.checkboxSpacer} />;\n  }\n\n  if (item.kind === 'ui') {\n    if (item.uiKind === 'pagination-placeholder') {\n      return <Checkbox disabled value={false} />;\n    } else {\n      return <span className={styles.checkboxSpacer} />;\n    }\n  }\n\n  const state = isSelected(item);\n\n  return (\n    <Checkbox\n      data-testid={selectors.pages.BrowseDashboards.table.checkbox(item.uid)}\n      aria-label={t('browse-dashboards.dashboards-tree.select-checkbox', 'Select')}\n      value={state === SelectionState.Selected}\n      indeterminate={state === SelectionState.Mixed}\n      onChange={(ev) => onItemSelectionChange?.(item, ev.currentTarget.checked)}\n    />\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  // Should be the same size as the <IconButton /> so Dashboard name is aligned to Folder name siblings\n  checkboxSpacer: css({\n    paddingLeft: theme.spacing(2),\n  }),\n});\n","import React from 'react';\n\nimport { Checkbox } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { DashboardTreeHeaderProps, SelectionState } from '../types';\n\nexport default function CheckboxHeaderCell({ isSelected, onAllSelectionChange }: DashboardTreeHeaderProps) {\n  const state = isSelected?.('$all') ?? SelectionState.Unselected;\n\n  return (\n    <Checkbox\n      value={state === SelectionState.Selected}\n      indeterminate={state === SelectionState.Mixed}\n      aria-label={t('browse-dashboards.dashboards-tree.select-all-header-checkbox', 'Select all')}\n      onChange={(ev) => {\n        if (state === SelectionState.Mixed) {\n          // Ensure clicking an indeterminate checkbox always clears the selection\n          onAllSelectionChange?.(false);\n        } else {\n          onAllSelectionChange?.(ev.currentTarget.checked);\n        }\n      }}\n    />\n  );\n}\n","import { DashboardViewItemWithUIItems } from '../types';\n\nexport function makeRowID(baseId: string, item: DashboardViewItemWithUIItems) {\n  return baseId + item.uid;\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport Skeleton from 'react-loading-skeleton';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Icon, IconButton, Link, Spinner, useStyles2, Text } from '@grafana/ui';\nimport { getSvgSize } from '@grafana/ui/src/components/Icon/utils';\nimport { t } from 'app/core/internationalization';\nimport { getIconForKind } from 'app/features/search/service/utils';\n\nimport { Indent } from '../../../core/components/Indent/Indent';\nimport { useChildrenByParentUIDState } from '../state';\nimport { DashboardsTreeCellProps } from '../types';\n\nimport { makeRowID } from './utils';\n\nconst CHEVRON_SIZE = 'md';\nconst ICON_SIZE = 'sm';\n\ntype NameCellProps = DashboardsTreeCellProps & {\n  onFolderClick: (uid: string, newOpenState: boolean) => void;\n};\n\nexport function NameCell({ row: { original: data }, onFolderClick, treeID }: NameCellProps) {\n  const styles = useStyles2(getStyles);\n  const { item, level, isOpen } = data;\n  const childrenByParentUID = useChildrenByParentUIDState();\n  const isLoading = isOpen && !childrenByParentUID[item.uid];\n  const iconName = getIconForKind(data.item.kind, isOpen);\n\n  if (item.kind === 'ui') {\n    return (\n      <>\n        <Indent\n          level={level}\n          spacing={{\n            xs: 1,\n            md: 3,\n          }}\n        />\n        <span className={styles.folderButtonSpacer} />\n        {item.uiKind === 'empty-folder' ? (\n          <em className={styles.emptyText}>\n            <Text variant=\"body\" color=\"secondary\" truncate>\n              No items\n            </Text>\n          </em>\n        ) : (\n          <Skeleton width={200} />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Indent\n        level={level}\n        spacing={{\n          xs: 1,\n          md: 3,\n        }}\n      />\n\n      {item.kind === 'folder' ? (\n        <IconButton\n          size={CHEVRON_SIZE}\n          className={styles.chevron}\n          onClick={() => {\n            onFolderClick(item.uid, !isOpen);\n          }}\n          name={isOpen ? 'angle-down' : 'angle-right'}\n          aria-label={\n            isOpen\n              ? t('browse-dashboards.dashboards-tree.collapse-folder-button', 'Collapse folder {{title}}', {\n                  title: item.title,\n                })\n              : t('browse-dashboards.dashboards-tree.expand-folder-button', 'Expand folder {{title}}', {\n                  title: item.title,\n                })\n          }\n        />\n      ) : (\n        <span className={styles.folderButtonSpacer} />\n      )}\n\n      <div className={styles.iconNameContainer}>\n        {isLoading ? <Spinner size={ICON_SIZE} /> : <Icon size={ICON_SIZE} name={iconName} />}\n\n        <Text variant=\"body\" truncate id={treeID && makeRowID(treeID, item)}>\n          {item.url ? (\n            <Link\n              onClick={() => {\n                reportInteraction('manage_dashboards_result_clicked');\n              }}\n              href={item.url}\n              className={styles.link}\n            >\n              {item.title}\n            </Link>\n          ) : (\n            item.title\n          )}\n        </Text>\n      </div>\n    </>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    chevron: css({\n      marginRight: theme.spacing(1),\n      width: getSvgSize(CHEVRON_SIZE),\n    }),\n    emptyText: css({\n      // needed for text to truncate correctly\n      overflow: 'hidden',\n    }),\n    // Should be the same size as the <IconButton /> so Dashboard name is aligned to Folder name siblings\n    folderButtonSpacer: css({\n      paddingLeft: `calc(${getSvgSize(CHEVRON_SIZE)}px + ${theme.spacing(1)})`,\n    }),\n    iconNameContainer: css({\n      alignItems: 'center',\n      display: 'flex',\n      gap: theme.spacing(1),\n      overflow: 'hidden',\n    }),\n    link: css({\n      '&:hover': {\n        textDecoration: 'underline',\n      },\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport { CellProps } from 'react-table';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { TagList, useStyles2 } from '@grafana/ui';\n\nimport { DashboardsTreeItem } from '../types';\n\nexport function TagsCell({ row: { original: data } }: CellProps<DashboardsTreeItem, unknown>) {\n  const styles = useStyles2(getStyles);\n  const item = data.item;\n\n  if (item.kind === 'ui') {\n    if (item.uiKind === 'pagination-placeholder') {\n      return <TagList.Skeleton />;\n    } else {\n      return null;\n    }\n  }\n\n  if (!item.tags) {\n    return null;\n  }\n\n  return <TagList className={styles.tagList} tags={item.tags} />;\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    // TagList is annoying and has weird default alignment\n    tagList: css({\n      justifyContent: 'flex-start',\n      flexWrap: 'nowrap',\n    }),\n  };\n}\n","import { css, cx } from '@emotion/css';\nimport React, { useCallback, useEffect, useId, useMemo, useRef } from 'react';\nimport { TableInstance, useTable } from 'react-table';\nimport { FixedSizeList as List } from 'react-window';\nimport InfiniteLoader from 'react-window-infinite-loader';\n\nimport { GrafanaTheme2, isTruthy } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { useStyles2 } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\nimport { DashboardViewItem } from 'app/features/search/types';\n\nimport { DashboardsTreeCellProps, DashboardsTreeColumn, DashboardsTreeItem, SelectionState } from '../types';\n\nimport CheckboxCell from './CheckboxCell';\nimport CheckboxHeaderCell from './CheckboxHeaderCell';\nimport { NameCell } from './NameCell';\nimport { TagsCell } from './TagsCell';\nimport { useCustomFlexLayout } from './customFlexTableLayout';\nimport { makeRowID } from './utils';\n\ninterface DashboardsTreeProps {\n  items: DashboardsTreeItem[];\n  width: number;\n  height: number;\n  canSelect: boolean;\n  isSelected: (kind: DashboardViewItem | '$all') => SelectionState;\n  onFolderClick: (uid: string, newOpenState: boolean) => void;\n  onAllSelectionChange: (newState: boolean) => void;\n  onItemSelectionChange: (item: DashboardViewItem, newState: boolean) => void;\n\n  isItemLoaded: (itemIndex: number) => boolean;\n  requestLoadMore: (folderUid: string | undefined) => void;\n}\n\nconst HEADER_HEIGHT = 36;\nconst ROW_HEIGHT = 36;\n\nexport function DashboardsTree({\n  items,\n  width,\n  height,\n  isSelected,\n  onFolderClick,\n  onAllSelectionChange,\n  onItemSelectionChange,\n  isItemLoaded,\n  requestLoadMore,\n  canSelect = false,\n}: DashboardsTreeProps) {\n  const treeID = useId();\n\n  const infiniteLoaderRef = useRef<InfiniteLoader>(null);\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    // If the tree changed identity, then some indexes that were previously loaded may now be unloaded,\n    // especially after a refetch after a move/delete.\n    // Clear that cache, and check if we need to trigger another load\n    if (infiniteLoaderRef.current) {\n      infiniteLoaderRef.current.resetloadMoreItemsCache(true);\n    }\n  }, [items]);\n\n  const tableColumns = useMemo(() => {\n    const checkboxColumn: DashboardsTreeColumn = {\n      id: 'checkbox',\n      width: 0,\n      Header: CheckboxHeaderCell,\n      Cell: CheckboxCell,\n    };\n\n    const nameColumn: DashboardsTreeColumn = {\n      id: 'name',\n      width: 3,\n      Header: (\n        <span style={{ paddingLeft: 24 }}>\n          <Trans i18nKey=\"browse-dashboards.dashboards-tree.name-column\">Name</Trans>\n        </span>\n      ),\n      Cell: (props: DashboardsTreeCellProps) => <NameCell {...props} onFolderClick={onFolderClick} />,\n    };\n\n    const tagsColumns: DashboardsTreeColumn = {\n      id: 'tags',\n      width: 2,\n      Header: t('browse-dashboards.dashboards-tree.tags-column', 'Tags'),\n      Cell: TagsCell,\n    };\n    const columns = [canSelect && checkboxColumn, nameColumn, tagsColumns].filter(isTruthy);\n\n    return columns;\n  }, [onFolderClick, canSelect]);\n\n  const table = useTable({ columns: tableColumns, data: items }, useCustomFlexLayout);\n  const { getTableProps, getTableBodyProps, headerGroups } = table;\n\n  const virtualData = useMemo(\n    () => ({\n      table,\n      isSelected,\n      onAllSelectionChange,\n      onItemSelectionChange,\n      treeID,\n    }),\n    // we need this to rerender if items changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [table, isSelected, onAllSelectionChange, onItemSelectionChange, items, treeID]\n  );\n\n  const handleIsItemLoaded = useCallback(\n    (itemIndex: number) => {\n      return isItemLoaded(itemIndex);\n    },\n    [isItemLoaded]\n  );\n\n  const handleLoadMore = useCallback(\n    (startIndex: number, endIndex: number) => {\n      const { parentUID } = items[startIndex];\n      requestLoadMore(parentUID);\n    },\n    [requestLoadMore, items]\n  );\n\n  return (\n    <div {...getTableProps()} role=\"table\">\n      {headerGroups.map((headerGroup) => {\n        const { key, ...headerGroupProps } = headerGroup.getHeaderGroupProps({\n          style: { width },\n        });\n\n        return (\n          <div key={key} {...headerGroupProps} className={cx(styles.row, styles.headerRow)}>\n            {headerGroup.headers.map((column) => {\n              const { key, ...headerProps } = column.getHeaderProps();\n\n              return (\n                <div key={key} {...headerProps} role=\"columnheader\" className={styles.cell}>\n                  {column.render('Header', { isSelected, onAllSelectionChange })}\n                </div>\n              );\n            })}\n          </div>\n        );\n      })}\n\n      <div {...getTableBodyProps()} data-testid={selectors.pages.BrowseDashboards.table.body}>\n        <InfiniteLoader\n          ref={infiniteLoaderRef}\n          itemCount={items.length}\n          isItemLoaded={handleIsItemLoaded}\n          loadMoreItems={handleLoadMore}\n        >\n          {({ onItemsRendered, ref }) => (\n            <List\n              ref={ref}\n              height={height - HEADER_HEIGHT}\n              width={width}\n              itemCount={items.length}\n              itemData={virtualData}\n              itemSize={ROW_HEIGHT}\n              onItemsRendered={onItemsRendered}\n            >\n              {VirtualListRow}\n            </List>\n          )}\n        </InfiniteLoader>\n      </div>\n    </div>\n  );\n}\n\ninterface VirtualListRowProps {\n  index: number;\n  style: React.CSSProperties;\n  data: {\n    table: TableInstance<DashboardsTreeItem>;\n    isSelected: DashboardsTreeCellProps['isSelected'];\n    onAllSelectionChange: DashboardsTreeCellProps['onAllSelectionChange'];\n    onItemSelectionChange: DashboardsTreeCellProps['onItemSelectionChange'];\n    treeID: string;\n  };\n}\n\nfunction VirtualListRow({ index, style, data }: VirtualListRowProps) {\n  const styles = useStyles2(getStyles);\n  const { table, isSelected, onItemSelectionChange, treeID } = data;\n  const { rows, prepareRow } = table;\n\n  const row = rows[index];\n  prepareRow(row);\n\n  return (\n    <div\n      {...row.getRowProps({ style })}\n      className={cx(styles.row, styles.bodyRow)}\n      aria-labelledby={makeRowID(treeID, row.original.item)}\n      data-testid={selectors.pages.BrowseDashboards.table.row(\n        'title' in row.original.item ? row.original.item.title : row.original.item.uid\n      )}\n    >\n      {row.cells.map((cell) => {\n        const { key, ...cellProps } = cell.getCellProps();\n\n        return (\n          <div key={key} {...cellProps} className={styles.cell}>\n            {cell.render('Cell', { isSelected, onItemSelectionChange, treeID })}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    // Column flex properties (cell sizing) are set by customFlexTableLayout.ts\n\n    row: css({\n      gap: theme.spacing(1),\n    }),\n\n    headerRow: css({\n      backgroundColor: theme.colors.background.secondary,\n      height: HEADER_HEIGHT,\n    }),\n\n    bodyRow: css({\n      height: ROW_HEIGHT,\n\n      '&:hover': {\n        backgroundColor: theme.colors.emphasize(theme.colors.background.primary, 0.03),\n      },\n    }),\n\n    cell: css({\n      padding: theme.spacing(1),\n      overflow: 'hidden', // Required so flex children can do text-overflow: ellipsis\n      display: 'flex',\n      alignItems: 'center',\n    }),\n\n    link: css({\n      '&:hover': {\n        textDecoration: 'underline',\n      },\n    }),\n  };\n};\n","import React, { useCallback } from 'react';\n\nimport { CallToActionCard } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { DashboardViewItem } from 'app/features/search/types';\nimport { useDispatch } from 'app/types';\n\nimport { PAGE_SIZE } from '../api/services';\nimport {\n  useFlatTreeState,\n  useCheckboxSelectionState,\n  setFolderOpenState,\n  setItemSelectionState,\n  useChildrenByParentUIDState,\n  setAllSelection,\n  useBrowseLoadingStatus,\n  useLoadNextChildrenPage,\n  fetchNextChildrenPage,\n} from '../state';\nimport { BrowseDashboardsState, DashboardTreeSelection, SelectionState } from '../types';\n\nimport { DashboardsTree } from './DashboardsTree';\n\ninterface BrowseViewProps {\n  height: number;\n  width: number;\n  folderUID: string | undefined;\n  canSelect: boolean;\n}\n\nexport function BrowseView({ folderUID, width, height, canSelect }: BrowseViewProps) {\n  const status = useBrowseLoadingStatus(folderUID);\n  const dispatch = useDispatch();\n  const flatTree = useFlatTreeState(folderUID);\n  const selectedItems = useCheckboxSelectionState();\n  const childrenByParentUID = useChildrenByParentUIDState();\n\n  const handleFolderClick = useCallback(\n    (clickedFolderUID: string, isOpen: boolean) => {\n      dispatch(setFolderOpenState({ folderUID: clickedFolderUID, isOpen }));\n\n      if (isOpen) {\n        dispatch(fetchNextChildrenPage({ parentUID: clickedFolderUID, pageSize: PAGE_SIZE }));\n      }\n    },\n    [dispatch]\n  );\n\n  const handleItemSelectionChange = useCallback(\n    (item: DashboardViewItem, isSelected: boolean) => {\n      dispatch(setItemSelectionState({ item, isSelected }));\n    },\n    [dispatch]\n  );\n\n  const isSelected = useCallback(\n    (item: DashboardViewItem | '$all'): SelectionState => {\n      if (item === '$all') {\n        // We keep the boolean $all state up to date in redux, so we can short-circut\n        // the logic if we know this has been selected\n        if (selectedItems.$all) {\n          return SelectionState.Selected;\n        }\n\n        // Otherwise, if we have any selected items, then it should be in 'mixed' state\n        for (const selection of Object.values(selectedItems)) {\n          if (typeof selection === 'boolean') {\n            continue;\n          }\n\n          for (const uid in selection) {\n            const isSelected = selection[uid];\n            if (isSelected) {\n              return SelectionState.Mixed;\n            }\n          }\n        }\n\n        // Otherwise otherwise, nothing is selected and header should be unselected\n        return SelectionState.Unselected;\n      }\n\n      const isSelected = selectedItems[item.kind][item.uid];\n      if (isSelected) {\n        return SelectionState.Selected;\n      }\n\n      // Because if _all_ children, then the parent is selected (and bailed in the previous check),\n      // this .some check will only return true if the children are partially selected\n      const isMixed = hasSelectedDescendants(item, childrenByParentUID, selectedItems);\n      if (isMixed) {\n        return SelectionState.Mixed;\n      }\n\n      return SelectionState.Unselected;\n    },\n    [selectedItems, childrenByParentUID]\n  );\n\n  const isItemLoaded = useCallback(\n    (itemIndex: number) => {\n      const treeItem = flatTree[itemIndex];\n      if (!treeItem) {\n        return false;\n      }\n      const item = treeItem.item;\n      const result = !(item.kind === 'ui' && item.uiKind === 'pagination-placeholder');\n\n      return result;\n    },\n    [flatTree]\n  );\n\n  const handleLoadMore = useLoadNextChildrenPage();\n\n  if (status === 'fulfilled' && flatTree.length === 0) {\n    return (\n      <div style={{ width }}>\n        {canSelect ? (\n          <EmptyListCTA\n            title={folderUID ? \"This folder doesn't have any dashboards yet\" : 'No dashboards yet. Create your first!'}\n            buttonIcon=\"plus\"\n            buttonTitle=\"Create Dashboard\"\n            buttonLink={folderUID ? `dashboard/new?folderUid=${folderUID}` : 'dashboard/new'}\n            proTip={folderUID && 'Add/move dashboards to your folder at ->'}\n            proTipLink={folderUID && 'dashboards'}\n            proTipLinkTitle={folderUID && 'Browse dashboards'}\n            proTipTarget=\"\"\n          />\n        ) : (\n          <CallToActionCard callToActionElement={<span>This folder is empty</span>} />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <DashboardsTree\n      canSelect={canSelect}\n      items={flatTree}\n      width={width}\n      height={height}\n      isSelected={isSelected}\n      onFolderClick={handleFolderClick}\n      onAllSelectionChange={(newState) => dispatch(setAllSelection({ isSelected: newState, folderUID }))}\n      onItemSelectionChange={handleItemSelectionChange}\n      isItemLoaded={isItemLoaded}\n      requestLoadMore={handleLoadMore}\n    />\n  );\n}\n\nfunction hasSelectedDescendants(\n  item: DashboardViewItem,\n  childrenByParentUID: BrowseDashboardsState['childrenByParentUID'],\n  selectedItems: DashboardTreeSelection\n): boolean {\n  const collection = childrenByParentUID[item.uid];\n  if (!collection) {\n    return false;\n  }\n\n  return collection.items.some((v) => {\n    const thisIsSelected = selectedItems[v.kind][v.uid];\n    if (thisIsSelected) {\n      return thisIsSelected;\n    }\n\n    return hasSelectedDescendants(v, childrenByParentUID, selectedItems);\n  });\n}\n","import React from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, Input, Form, Field, HorizontalGroup } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { validationSrv } from '../../manage-dashboards/services/ValidationSrv';\n\ninterface Props {\n  onConfirm: (folderName: string) => void;\n  onCancel: () => void;\n}\n\ninterface FormModel {\n  folderName: string;\n}\n\nconst initialFormModel: FormModel = { folderName: '' };\n\nexport function NewFolderForm({ onCancel, onConfirm }: Props) {\n  const translatedFolderNameRequiredPhrase = t(\n    'browse-dashboards.action.new-folder-name-required-phrase',\n    'Folder name is required.'\n  );\n  const validateFolderName = async (folderName: string) => {\n    try {\n      await validationSrv.validateNewFolderName(folderName);\n      return true;\n    } catch (e) {\n      if (e instanceof Error) {\n        return e.message;\n      } else {\n        throw e;\n      }\n    }\n  };\n\n  const fieldNameLabel = t('browse-dashboards.new-folder-form.name-label', 'Folder name');\n\n  return (\n    <Form\n      defaultValues={initialFormModel}\n      onSubmit={(form: FormModel) => onConfirm(form.folderName)}\n      data-testid={selectors.pages.BrowseDashboards.NewFolderForm.form}\n    >\n      {({ register, errors }) => (\n        <>\n          <Field\n            label={fieldNameLabel}\n            invalid={!!errors.folderName}\n            error={errors.folderName && errors.folderName.message}\n          >\n            <Input\n              data-testid={selectors.pages.BrowseDashboards.NewFolderForm.nameInput}\n              id=\"folder-name-input\"\n              {...register('folderName', {\n                required: translatedFolderNameRequiredPhrase,\n                validate: async (v) => await validateFolderName(v),\n              })}\n            />\n          </Field>\n          <HorizontalGroup>\n            <Button variant=\"secondary\" fill=\"outline\" onClick={onCancel}>\n              <Trans i18nKey=\"browse-dashboards.new-folder-form.cancel-label\">Cancel</Trans>\n            </Button>\n            <Button type=\"submit\">\n              <Trans i18nKey=\"browse-dashboards.new-folder-form.create-label\">Create</Trans>\n            </Button>\n          </HorizontalGroup>\n        </>\n      )}\n    </Form>\n  );\n}\n","import React, { useState } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, Drawer, Dropdown, Icon, Menu, MenuItem } from '@grafana/ui';\nimport {\n  getNewDashboardPhrase,\n  getNewFolderPhrase,\n  getImportPhrase,\n  getNewPhrase,\n} from 'app/features/search/tempI18nPhrases';\nimport { FolderDTO } from 'app/types';\n\nimport { useNewFolderMutation } from '../api/browseDashboardsAPI';\n\nimport { NewFolderForm } from './NewFolderForm';\n\ninterface Props {\n  parentFolder?: FolderDTO;\n  canCreateFolder: boolean;\n  canCreateDashboard: boolean;\n}\n\nexport default function CreateNewButton({ parentFolder, canCreateDashboard, canCreateFolder }: Props) {\n  const [isOpen, setIsOpen] = useState(false);\n  const location = useLocation();\n  const [newFolder] = useNewFolderMutation();\n  const [showNewFolderDrawer, setShowNewFolderDrawer] = useState(false);\n\n  const onCreateFolder = async (folderName: string) => {\n    try {\n      await newFolder({\n        title: folderName,\n        parentUid: parentFolder?.uid,\n      });\n      const depth = parentFolder?.parents ? parentFolder.parents.length + 1 : 0;\n      reportInteraction('grafana_manage_dashboards_folder_created', {\n        is_subfolder: Boolean(parentFolder?.uid),\n        folder_depth: depth,\n      });\n    } finally {\n      setShowNewFolderDrawer(false);\n    }\n  };\n\n  const newMenu = (\n    <Menu>\n      {canCreateDashboard && (\n        <MenuItem\n          label={getNewDashboardPhrase()}\n          onClick={() =>\n            reportInteraction('grafana_menu_item_clicked', {\n              url: addFolderUidToUrl('/dashboard/new', parentFolder?.uid),\n              from: location.pathname,\n            })\n          }\n          url={addFolderUidToUrl('/dashboard/new', parentFolder?.uid)}\n        />\n      )}\n      {canCreateFolder && <MenuItem onClick={() => setShowNewFolderDrawer(true)} label={getNewFolderPhrase()} />}\n      {canCreateDashboard && (\n        <MenuItem\n          label={getImportPhrase()}\n          onClick={() =>\n            reportInteraction('grafana_menu_item_clicked', {\n              url: addFolderUidToUrl('/dashboard/import', parentFolder?.uid),\n              from: location.pathname,\n            })\n          }\n          url={addFolderUidToUrl('/dashboard/import', parentFolder?.uid)}\n        />\n      )}\n    </Menu>\n  );\n\n  return (\n    <>\n      <Dropdown overlay={newMenu} onVisibleChange={setIsOpen}>\n        <Button>\n          {getNewPhrase()}\n          <Icon name={isOpen ? 'angle-up' : 'angle-down'} />\n        </Button>\n      </Dropdown>\n      {showNewFolderDrawer && (\n        <Drawer\n          title={getNewFolderPhrase()}\n          subtitle={parentFolder?.title ? `Location: ${parentFolder.title}` : undefined}\n          onClose={() => setShowNewFolderDrawer(false)}\n          size=\"sm\"\n        >\n          <NewFolderForm onConfirm={onCreateFolder} onCancel={() => setShowNewFolderDrawer(false)} />\n        </Drawer>\n      )}\n    </>\n  );\n}\n\n/**\n *\n * @param url without any parameters\n * @param folderUid  folder id\n * @returns url with paramter if folder is present\n */\nfunction addFolderUidToUrl(url: string, folderUid: string | undefined) {\n  return folderUid ? url + '?folderUid=' + folderUid : url;\n}\n","import React, { useCallback } from 'react';\n\nimport { DataFrameView, toDataFrame } from '@grafana/data';\nimport { Button, Card } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\nimport { useKeyNavigationListener } from 'app/features/search/hooks/useSearchKeyboardSelection';\nimport { SearchResultsProps, SearchResultsTable } from 'app/features/search/page/components/SearchResultsTable';\nimport { useSearchStateManager } from 'app/features/search/state/SearchStateManager';\nimport { DashboardViewItemKind } from 'app/features/search/types';\nimport { useDispatch, useSelector } from 'app/types';\n\nimport { setAllSelection, setItemSelectionState, useHasSelection } from '../state';\n\ninterface SearchViewProps {\n  height: number;\n  width: number;\n  canSelect: boolean;\n}\n\nconst NUM_PLACEHOLDER_ROWS = 50;\nconst initialLoadingView = {\n  view: new DataFrameView(\n    toDataFrame({\n      fields: [\n        { name: 'uid', display: true, values: Array(NUM_PLACEHOLDER_ROWS).fill(null) },\n        { name: 'kind', display: true, values: Array(NUM_PLACEHOLDER_ROWS).fill('dashboard') },\n        { name: 'name', display: true, values: Array(NUM_PLACEHOLDER_ROWS).fill('') },\n        { name: 'location', display: true, values: Array(NUM_PLACEHOLDER_ROWS).fill('') },\n        { name: 'tags', display: true, values: Array(NUM_PLACEHOLDER_ROWS).fill([]) },\n      ],\n      meta: {\n        custom: {\n          locationInfo: [],\n        },\n      },\n    })\n  ),\n  loadMoreItems: () => Promise.resolve(),\n  // this is key and controls whether to show the skeleton in generateColumns\n  isItemLoaded: () => false,\n  totalRows: NUM_PLACEHOLDER_ROWS,\n};\n\nexport function SearchView({ width, height, canSelect }: SearchViewProps) {\n  const dispatch = useDispatch();\n  const selectedItems = useSelector((wholeState) => wholeState.browseDashboards.selectedItems);\n  const hasSelection = useHasSelection();\n\n  const { keyboardEvents } = useKeyNavigationListener();\n  const [searchState, stateManager] = useSearchStateManager();\n\n  const value = searchState.result ?? initialLoadingView;\n\n  const selectionChecker = useCallback(\n    (kind: string | undefined, uid: string): boolean => {\n      if (!kind) {\n        return false;\n      }\n\n      // Currently, this indicates _some_ items are selected, not nessicarily all are\n      // selected.\n      if (kind === '*' && uid === '*') {\n        return hasSelection;\n      } else if (kind === '*') {\n        // Unsure how this case can happen\n        return false;\n      }\n\n      return selectedItems[assertDashboardViewItemKind(kind)][uid] ?? false;\n    },\n    [selectedItems, hasSelection]\n  );\n\n  const clearSelection = useCallback(() => {\n    dispatch(setAllSelection({ isSelected: false, folderUID: undefined }));\n  }, [dispatch]);\n\n  const handleItemSelectionChange = useCallback(\n    (kind: string, uid: string) => {\n      const newIsSelected = !selectionChecker(kind, uid);\n\n      dispatch(\n        setItemSelectionState({ item: { kind: assertDashboardViewItemKind(kind), uid }, isSelected: newIsSelected })\n      );\n    },\n    [selectionChecker, dispatch]\n  );\n\n  if (value.totalRows === 0) {\n    return (\n      <div style={{ width }}>\n        <Card>\n          <Card.Heading>\n            <Trans i18nKey=\"browse-dashboards.no-results.text\">No results found for your query.</Trans>\n          </Card.Heading>\n          <Card.Actions>\n            <Button variant=\"secondary\" onClick={stateManager.onClearSearchAndFilters}>\n              <Trans i18nKey=\"browse-dashboards.no-results.clear\">Clear search and filters</Trans>\n            </Button>\n          </Card.Actions>\n        </Card>\n      </div>\n    );\n  }\n\n  const props: SearchResultsProps = {\n    response: value,\n    selection: canSelect ? selectionChecker : undefined,\n    selectionToggle: canSelect ? handleItemSelectionChange : undefined,\n    clearSelection,\n    width: width,\n    height: height,\n    onTagSelected: stateManager.onAddTag,\n    keyboardEvents,\n    onDatasourceChange: searchState.datasource ? stateManager.onDatasourceChange : undefined,\n    onClickItem: stateManager.onSearchItemClicked,\n  };\n\n  return <SearchResultsTable {...props} />;\n}\n\nfunction assertDashboardViewItemKind(kind: string): DashboardViewItemKind {\n  switch (kind) {\n    case 'folder':\n      return 'folder';\n    case 'dashboard':\n      return 'dashboard';\n    case 'panel':\n      return 'panel';\n  }\n\n  throw new Error('Unsupported kind' + kind);\n}\n","import { css } from '@emotion/css';\nimport React, { memo, useEffect, useMemo } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { FilterInput, useStyles2 } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { useDispatch } from 'app/types';\n\nimport { buildNavModel, getDashboardsTabID } from '../folders/state/navModel';\nimport { useSearchStateManager } from '../search/state/SearchStateManager';\nimport { getSearchPlaceholder } from '../search/tempI18nPhrases';\n\nimport { skipToken, useGetFolderQuery, useSaveFolderMutation } from './api/browseDashboardsAPI';\nimport { BrowseActions } from './components/BrowseActions/BrowseActions';\nimport { BrowseFilters } from './components/BrowseFilters';\nimport { BrowseView } from './components/BrowseView';\nimport CreateNewButton from './components/CreateNewButton';\nimport { FolderActionsButton } from './components/FolderActionsButton';\nimport { SearchView } from './components/SearchView';\nimport { getFolderPermissions } from './permissions';\nimport { setAllSelection, useHasSelection } from './state';\n\nexport interface BrowseDashboardsPageRouteParams {\n  uid?: string;\n  slug?: string;\n}\n\nexport interface Props extends GrafanaRouteComponentProps<BrowseDashboardsPageRouteParams> {}\n\n// New Browse/Manage/Search Dashboards views for nested folders\n\nconst BrowseDashboardsPage = memo(({ match }: Props) => {\n  const { uid: folderUID } = match.params;\n  const dispatch = useDispatch();\n\n  const styles = useStyles2(getStyles);\n  const [searchState, stateManager] = useSearchStateManager();\n  const isSearching = stateManager.hasSearchFilters();\n\n  useEffect(() => {\n    stateManager.initStateFromUrl(folderUID);\n\n    // Clear selected state when folderUID changes\n    dispatch(\n      setAllSelection({\n        isSelected: false,\n        folderUID: undefined,\n      })\n    );\n  }, [dispatch, folderUID, stateManager]);\n\n  useEffect(() => {\n    // Clear the search results when we leave SearchView to prevent old results flashing\n    // when starting a new search\n    if (!isSearching && searchState.result) {\n      stateManager.setState({ result: undefined, includePanels: undefined });\n    }\n  }, [isSearching, searchState.result, stateManager]);\n\n  const { data: folderDTO } = useGetFolderQuery(folderUID ?? skipToken);\n  const [saveFolder] = useSaveFolderMutation();\n  const navModel = useMemo(() => {\n    if (!folderDTO) {\n      return undefined;\n    }\n    const model = buildNavModel(folderDTO);\n\n    // Set the \"Dashboards\" tab to active\n    const dashboardsTabID = getDashboardsTabID(folderDTO.uid);\n    const dashboardsTab = model.children?.find((child) => child.id === dashboardsTabID);\n    if (dashboardsTab) {\n      dashboardsTab.active = true;\n    }\n    return model;\n  }, [folderDTO]);\n\n  const hasSelection = useHasSelection();\n\n  const { canEditFolders, canEditDashboards, canCreateDashboards, canCreateFolders } = getFolderPermissions(folderDTO);\n\n  const showEditTitle = canEditFolders && folderUID;\n  const canSelect = canEditFolders || canEditDashboards;\n  const onEditTitle = async (newValue: string) => {\n    if (folderDTO) {\n      const result = await saveFolder({\n        ...folderDTO,\n        title: newValue,\n      });\n      if ('error' in result) {\n        reportInteraction('grafana_browse_dashboards_page_edit_folder_name', {\n          status: 'failed_with_error',\n          error: result.error,\n        });\n        throw result.error;\n      } else {\n        reportInteraction('grafana_browse_dashboards_page_edit_folder_name', { status: 'success' });\n      }\n    } else {\n      reportInteraction('grafana_browse_dashboards_page_edit_folder_name', { status: 'failed_no_folderDTO' });\n    }\n  };\n\n  return (\n    <Page\n      navId=\"dashboards/browse\"\n      pageNav={navModel}\n      onEditTitle={showEditTitle ? onEditTitle : undefined}\n      actions={\n        <>\n          {folderDTO && <FolderActionsButton folder={folderDTO} />}\n          {(canCreateDashboards || canCreateFolders) && (\n            <CreateNewButton\n              parentFolder={folderDTO}\n              canCreateDashboard={canCreateDashboards}\n              canCreateFolder={canCreateFolders}\n            />\n          )}\n        </>\n      }\n    >\n      <Page.Contents className={styles.pageContents}>\n        <FilterInput\n          placeholder={getSearchPlaceholder(searchState.includePanels)}\n          value={searchState.query}\n          escapeRegex={false}\n          onChange={(e) => stateManager.onQueryChange(e)}\n        />\n\n        {hasSelection ? <BrowseActions /> : <BrowseFilters />}\n\n        <div className={styles.subView}>\n          <AutoSizer>\n            {({ width, height }) =>\n              isSearching ? (\n                <SearchView canSelect={canSelect} width={width} height={height} />\n              ) : (\n                <BrowseView canSelect={canSelect} width={width} height={height} folderUID={folderUID} />\n              )\n            }\n          </AutoSizer>\n        </div>\n      </Page.Contents>\n    </Page>\n  );\n});\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  pageContents: css({\n    display: 'grid',\n    gridTemplateRows: 'auto auto 1fr',\n    height: '100%',\n    rowGap: theme.spacing(1),\n  }),\n\n  // AutoSizer needs an element to measure the full height available\n  subView: css({\n    height: '100%',\n  }),\n});\n\nBrowseDashboardsPage.displayName = 'BrowseDashboardsPage';\nexport default BrowseDashboardsPage;\n","import { backendSrv } from 'app/core/services/backend_srv';\n\nimport { buildNavModel } from '../folders/state/navModel';\n\nexport const loadFolderPage = (uid: string) => {\n  return backendSrv.getFolderByUid(uid, { withAccessControl: true }).then((folder) => {\n    const navModel = buildNavModel(folder);\n    navModel.children![0].active = true;\n\n    return { folder, folderNav: navModel };\n  });\n};\n","// Using '*' for uid will return true if anything is selected\nexport type SelectionChecker = (kind: string, uid: string) => boolean;\nexport type SelectionToggle = (kind: string, uid: string) => void;\n\nexport interface SearchSelection {\n  // Check if an item is selected\n  isSelected: SelectionChecker;\n\n  // Selected items by kind\n  items: Map<string, Set<string>>;\n}\n\nexport function newSearchSelection(): SearchSelection {\n  // the check is called often, on potentially large (all) results so using Map/Set is better than simple array\n  const items = new Map<string, Set<string>>();\n\n  const isSelected = (kind: string, uid: string) => {\n    return Boolean(items.get(kind)?.has(uid));\n  };\n\n  return {\n    items,\n    isSelected,\n  };\n}\n\nexport function updateSearchSelection(\n  old: SearchSelection,\n  selected: boolean,\n  kind: string,\n  uids: string[]\n): SearchSelection {\n  const items = old.items; // mutate! :/\n\n  if (uids.length) {\n    const k = items.get(kind);\n    if (k) {\n      for (const uid of uids) {\n        if (selected) {\n          k.add(uid);\n        } else {\n          k.delete(uid);\n        }\n      }\n      if (k.size < 1) {\n        items.delete(kind);\n      }\n    } else if (selected) {\n      items.set(kind, new Set<string>(uids));\n    }\n  }\n\n  return {\n    items,\n    isSelected: (kind: string, uid: string) => {\n      if (uid === '*') {\n        if (kind === '*') {\n          for (const k of items.keys()) {\n            if (items.get(k)?.size) {\n              return true;\n            }\n          }\n          return false;\n        }\n        return Boolean(items.get(kind)?.size);\n      }\n      return Boolean(items.get(kind)?.has(uid));\n    },\n  };\n}\n","import React, { memo } from 'react';\n\nimport { Checkbox } from '@grafana/ui';\n\ninterface Props {\n  checked?: boolean;\n  onClick?: React.MouseEventHandler<HTMLInputElement>;\n  className?: string;\n  editable?: boolean;\n  'aria-label'?: string;\n}\n\nexport const SearchCheckbox = memo(\n  ({ onClick, className, checked = false, editable = false, 'aria-label': ariaLabel }: Props) => {\n    return editable ? (\n      <Checkbox onClick={onClick} className={className} value={checked} aria-label={ariaLabel} />\n    ) : null;\n  }\n);\n\nSearchCheckbox.displayName = 'SearchCheckbox';\n","import { css } from '@emotion/css';\nimport React, { useCallback } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors';\nimport { config } from '@grafana/runtime';\nimport { Card, Icon, IconName, TagList, useStyles2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { SEARCH_ITEM_HEIGHT } from '../constants';\nimport { getIconForKind } from '../service/utils';\nimport { DashboardViewItem, OnToggleChecked } from '../types';\n\nimport { SearchCheckbox } from './SearchCheckbox';\n\nexport interface Props {\n  item: DashboardViewItem;\n  isSelected?: boolean;\n  editable?: boolean;\n  onTagSelected: (name: string) => any;\n  onToggleChecked?: OnToggleChecked;\n  onClickItem?: (event: React.MouseEvent<HTMLElement>) => void;\n}\n\nconst selectors = e2eSelectors.components.Search;\n\nconst getIconFromMeta = (meta = ''): IconName => {\n  const metaIconMap = new Map<string, IconName>([\n    ['errors', 'info-circle'],\n    ['views', 'eye'],\n  ]);\n\n  return metaIconMap.has(meta) ? metaIconMap.get(meta)! : 'sort-amount-down';\n};\n\n/** @deprecated */\nexport const SearchItem = ({ item, isSelected, editable, onToggleChecked, onTagSelected, onClickItem }: Props) => {\n  const styles = useStyles2(getStyles);\n  const tagSelected = useCallback(\n    (tag: string, event: React.MouseEvent<HTMLElement>) => {\n      event.stopPropagation();\n      event.preventDefault();\n      onTagSelected(tag);\n    },\n    [onTagSelected]\n  );\n\n  const handleCheckboxClick = useCallback(\n    (ev: React.MouseEvent) => {\n      ev.stopPropagation();\n\n      if (onToggleChecked) {\n        onToggleChecked(item);\n      }\n    },\n    [item, onToggleChecked]\n  );\n\n  const description = config.featureToggles.nestedFolders ? (\n    <>\n      <Icon name={getIconForKind(item.kind)} aria-hidden /> {kindName(item.kind)}\n    </>\n  ) : (\n    <>\n      <Icon name={getIconForKind(item.parentKind ?? 'folder')} aria-hidden /> {item.parentTitle || 'General'}\n    </>\n  );\n\n  return (\n    <div className={styles.cardContainer}>\n      <SearchCheckbox\n        className={styles.checkbox}\n        aria-label=\"Select dashboard\"\n        editable={editable}\n        checked={isSelected}\n        onClick={handleCheckboxClick}\n      />\n\n      <Card\n        className={styles.card}\n        data-testid={selectors.dashboardItem(item.title)}\n        href={item.url}\n        style={{ minHeight: SEARCH_ITEM_HEIGHT }}\n        onClick={onClickItem}\n      >\n        <Card.Heading>{item.title}</Card.Heading>\n\n        <Card.Meta separator={''}>\n          <span className={styles.metaContainer}>{description}</span>\n\n          {item.sortMetaName && (\n            <span className={styles.metaContainer}>\n              <Icon name={getIconFromMeta(item.sortMetaName)} />\n              {item.sortMeta} {item.sortMetaName}\n            </span>\n          )}\n        </Card.Meta>\n        <Card.Tags>\n          <TagList tags={item.tags ?? []} onClick={tagSelected} getAriaLabel={(tag) => `Filter by tag \"${tag}\"`} />\n        </Card.Tags>\n      </Card>\n    </div>\n  );\n};\n\nfunction kindName(kind: DashboardViewItem['kind']) {\n  switch (kind) {\n    case 'folder':\n      return t('search.result-kind.folder', 'Folder');\n    case 'dashboard':\n      return t('search.result-kind.dashboard', 'Dashboard');\n    case 'panel':\n      return t('search.result-kind.panel', 'Panel');\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    cardContainer: css`\n      display: flex;\n      align-items: center;\n      margin-bottom: ${theme.spacing(0.75)};\n    `,\n    card: css`\n      padding: ${theme.spacing(1)} ${theme.spacing(2)};\n      margin-bottom: 0;\n    `,\n    checkbox: css({\n      marginRight: theme.spacing(1),\n    }),\n    metaContainer: css`\n      display: flex;\n      align-items: center;\n      margin-right: ${theme.spacing(1)};\n\n      svg {\n        margin-right: ${theme.spacing(0.5)};\n      }\n    `,\n  };\n};\n","import config from 'app/core/config';\nimport { listFolders } from 'app/features/browse-dashboards/api/services';\n\nimport { DashboardViewItem } from '../types';\n\nimport { getGrafanaSearcher } from './searcher';\nimport { queryResultToViewItem } from './utils';\n\nexport async function getFolderChildren(\n  parentUid?: string,\n  parentTitle?: string,\n  dashboardsAtRoot = false\n): Promise<DashboardViewItem[]> {\n  if (!config.featureToggles.nestedFolders) {\n    console.error('getFolderChildren requires nestedFolders feature toggle');\n    return [];\n  }\n\n  if (!dashboardsAtRoot && !parentUid) {\n    // We don't show dashboards at root in folder view yet - they're shown under a dummy 'general'\n    // folder that FolderView adds in\n    const folders = await listFolders();\n    return folders;\n  }\n\n  const searcher = getGrafanaSearcher();\n  const dashboardsResults = await searcher.search({\n    kind: ['dashboard'],\n    query: '*',\n    location: parentUid || 'general',\n    limit: 1000,\n  });\n\n  const dashboardItems = dashboardsResults.view.map((item) => {\n    return queryResultToViewItem(item, dashboardsResults.view);\n  });\n\n  const folders = await listFolders(parentUid, parentTitle);\n\n  return [...folders, ...dashboardItems];\n}\n","import { css } from '@emotion/css';\nimport React, { useId, useState } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { GrafanaTheme2, toIconName } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Card, Checkbox, CollapsableSection, Icon, Spinner, useStyles2 } from '@grafana/ui';\nimport { config } from 'app/core/config';\nimport { t } from 'app/core/internationalization';\n\nimport { SearchItem } from '../..';\nimport { GENERAL_FOLDER_UID, SEARCH_EXPANDED_FOLDER_STORAGE_KEY } from '../../constants';\nimport { getGrafanaSearcher } from '../../service';\nimport { getFolderChildren } from '../../service/folders';\nimport { queryResultToViewItem } from '../../service/utils';\nimport { DashboardViewItem } from '../../types';\nimport { SelectionChecker, SelectionToggle } from '../selection';\n\ninterface SectionHeaderProps {\n  selection?: SelectionChecker;\n  selectionToggle?: SelectionToggle;\n  onClickItem?: (e: React.MouseEvent<HTMLElement>) => void;\n  onTagSelected: (tag: string) => void;\n  section: DashboardViewItem;\n  renderStandaloneBody?: boolean; // render the body on its own\n  tags?: string[];\n}\n\nasync function getChildren(section: DashboardViewItem, tags: string[] | undefined): Promise<DashboardViewItem[]> {\n  if (config.featureToggles.nestedFolders) {\n    return getFolderChildren(section.uid, section.title);\n  }\n\n  const query = section.itemsUIDs\n    ? {\n        uid: section.itemsUIDs,\n      }\n    : {\n        query: '*',\n        kind: ['dashboard'],\n        location: section.uid,\n        sort: 'name_sort',\n        limit: 1000, // this component does not have infinite scroll, so we need to load everything upfront\n      };\n\n  const raw = await getGrafanaSearcher().search({ ...query, tags });\n  return raw.view.map((v) => queryResultToViewItem(v, raw.view));\n}\n\nexport const FolderSection = ({\n  section,\n  selectionToggle,\n  onClickItem,\n  onTagSelected,\n  selection,\n  renderStandaloneBody,\n  tags,\n}: SectionHeaderProps) => {\n  const uid = section.uid;\n  const editable = selectionToggle != null;\n\n  const styles = useStyles2(getSectionHeaderStyles, editable);\n  const [sectionExpanded, setSectionExpanded] = useState(() => {\n    const lastExpandedFolder = window.localStorage.getItem(SEARCH_EXPANDED_FOLDER_STORAGE_KEY);\n    return lastExpandedFolder === uid;\n  });\n\n  const results = useAsync(async () => {\n    if (!sectionExpanded && !renderStandaloneBody) {\n      return Promise.resolve([]);\n    }\n\n    const childItems = getChildren(section, tags);\n\n    return childItems;\n  }, [sectionExpanded, tags]);\n\n  const onSectionExpand = () => {\n    const newExpandedValue = !sectionExpanded;\n\n    if (newExpandedValue) {\n      // If we've just expanded the section, remember it to local storage\n      window.localStorage.setItem(SEARCH_EXPANDED_FOLDER_STORAGE_KEY, uid);\n    } else {\n      // Else, when closing a section, remove it from local storage only if this folder was the most recently opened\n      const lastExpandedFolder = window.localStorage.getItem(SEARCH_EXPANDED_FOLDER_STORAGE_KEY);\n      if (lastExpandedFolder === uid) {\n        window.localStorage.removeItem(SEARCH_EXPANDED_FOLDER_STORAGE_KEY);\n      }\n    }\n\n    setSectionExpanded(newExpandedValue);\n  };\n\n  const onToggleFolder = (evt: React.FormEvent) => {\n    evt.preventDefault();\n    evt.stopPropagation();\n    if (selectionToggle && selection) {\n      const checked = !selection(section.kind, section.uid);\n      selectionToggle(section.kind, section.uid);\n      const sub = results.value ?? [];\n      for (const item of sub) {\n        if (selection(item.kind, item.uid!) !== checked) {\n          selectionToggle(item.kind, item.uid!);\n        }\n      }\n    }\n  };\n\n  const id = useId();\n  const labelId = `section-header-label-${id}`;\n\n  let icon = toIconName(section.icon ?? '');\n  if (!icon) {\n    icon = sectionExpanded ? 'folder-open' : 'folder';\n  }\n\n  const renderResults = () => {\n    if (!results.value) {\n      return null;\n    } else if (results.value.length === 0 && !results.loading) {\n      return (\n        <Card>\n          <Card.Heading>No results found</Card.Heading>\n        </Card>\n      );\n    }\n\n    return results.value.map((item) => {\n      return (\n        <SearchItem\n          key={item.uid}\n          item={item}\n          onTagSelected={onTagSelected}\n          onToggleChecked={(item) => selectionToggle?.(item.kind, item.uid)}\n          editable={Boolean(selection != null)}\n          onClickItem={onClickItem}\n          isSelected={selection?.(item.kind, item.uid)}\n        />\n      );\n    });\n  };\n\n  // Skip the folder wrapper\n  if (renderStandaloneBody) {\n    return (\n      <div className={styles.folderViewResults}>\n        {!results.value?.length && results.loading ? <Spinner className={styles.spinner} /> : renderResults()}\n      </div>\n    );\n  }\n\n  return (\n    <CollapsableSection\n      headerDataTestId={selectors.components.Search.folderHeader(section.title)}\n      contentDataTestId={selectors.components.Search.folderContent(section.title)}\n      isOpen={sectionExpanded ?? false}\n      onToggle={onSectionExpand}\n      className={styles.wrapper}\n      contentClassName={styles.content}\n      loading={results.loading}\n      labelId={labelId}\n      label={\n        <>\n          {selectionToggle && selection && (\n            // TODO: fix keyboard a11y\n            // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions\n            <div onClick={onToggleFolder}>\n              <Checkbox\n                className={styles.checkbox}\n                value={selection(section.kind, section.uid)}\n                aria-label={t('search.folder-view.select-folder', 'Select folder')}\n              />\n            </div>\n          )}\n\n          <div className={styles.icon}>\n            <Icon name={icon} />\n          </div>\n\n          <div className={styles.text}>\n            <span id={labelId}>{section.title}</span>\n            {section.url && section.uid !== GENERAL_FOLDER_UID && (\n              <a href={section.url} className={styles.link}>\n                <span className={styles.separator}>|</span> <Icon name=\"folder-upload\" />{' '}\n                {t('search.folder-view.go-to-folder', 'Go to folder')}\n              </a>\n            )}\n          </div>\n        </>\n      }\n    >\n      {results.value && <ul className={styles.sectionItems}>{renderResults()}</ul>}\n    </CollapsableSection>\n  );\n};\n\nconst getSectionHeaderStyles = (theme: GrafanaTheme2, editable: boolean) => {\n  const sm = theme.spacing(1);\n\n  return {\n    wrapper: css`\n      align-items: center;\n      font-size: ${theme.typography.size.base};\n      padding: 12px;\n      border-bottom: none;\n      color: ${theme.colors.text.secondary};\n      z-index: 1;\n\n      &:hover,\n      &.selected {\n        color: ${theme.colors.text};\n      }\n\n      &:hover,\n      &:focus-visible,\n      &:focus-within {\n        a {\n          opacity: 1;\n        }\n      }\n    `,\n    sectionItems: css`\n      margin: 0 24px 0 32px;\n    `,\n    icon: css`\n      padding: 0 ${sm} 0 ${editable ? 0 : sm};\n    `,\n    folderViewResults: css`\n      overflow: auto;\n    `,\n    text: css`\n      flex-grow: 1;\n      line-height: 24px;\n    `,\n    link: css`\n      padding: 2px 10px 0;\n      color: ${theme.colors.text.secondary};\n      opacity: 0;\n      transition: opacity 150ms ease-in-out;\n    `,\n    separator: css`\n      margin-right: 6px;\n    `,\n    content: css`\n      padding-top: 0px;\n      padding-bottom: 0px;\n    `,\n    spinner: css`\n      display: grid;\n      place-content: center;\n      padding-bottom: 1rem;\n    `,\n    checkbox: css({\n      marginRight: theme.spacing(1),\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { ConfirmModal, useStyles2 } from '@grafana/ui';\nimport { config } from 'app/core/config';\nimport { deleteFoldersAndDashboards } from 'app/features/manage-dashboards/state/actions';\n\nimport { OnMoveOrDeleleSelectedItems } from '../../types';\n\ninterface Props {\n  onDeleteItems: OnMoveOrDeleleSelectedItems;\n  results: Map<string, Set<string>>;\n  onDismiss: () => void;\n}\n\nexport const ConfirmDeleteModal = ({ results, onDeleteItems, onDismiss }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const dashboards = Array.from(results.get('dashboard') ?? []);\n  const folders = Array.from(results.get('folder') ?? []);\n\n  const folderCount = folders.length;\n  const dashCount = dashboards.length;\n\n  let text = 'Do you want to delete the ';\n  let subtitle;\n  const dashEnding = dashCount === 1 ? '' : 's';\n  const folderEnding = folderCount === 1 ? '' : 's';\n\n  if (folderCount > 0 && dashCount > 0) {\n    text += `selected folder${folderEnding} and dashboard${dashEnding}?\\n`;\n    subtitle = `All dashboards and alerts of the selected folder${folderEnding} will also be deleted`;\n  } else if (folderCount > 0) {\n    text += `selected folder${folderEnding} and all ${folderCount === 1 ? 'its' : 'their'} dashboards and alerts?`;\n  } else {\n    text += `${dashCount} selected dashboard${dashEnding}?`;\n  }\n\n  const deleteItems = () => {\n    deleteFoldersAndDashboards(folders, dashboards).then(() => {\n      onDeleteItems();\n      onDismiss();\n    });\n  };\n\n  const requireDoubleConfirm = config.featureToggles.nestedFolders && folderCount > 0;\n\n  return (\n    <ConfirmModal\n      isOpen\n      title=\"Delete\"\n      body={\n        <>\n          {text} {subtitle && <div className={styles.subtitle}>{subtitle}</div>}\n        </>\n      }\n      confirmText=\"Delete\"\n      confirmationText={requireDoubleConfirm ? 'delete' : undefined}\n      onConfirm={deleteItems}\n      onDismiss={onDismiss}\n    />\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  subtitle: css`\n    font-size: ${theme.typography.fontSize}px;\n    padding-top: ${theme.spacing(2)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useCallback, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, HorizontalGroup, Modal, useStyles2 } from '@grafana/ui';\nimport { OldFolderPicker } from 'app/core/components/Select/OldFolderPicker';\nimport config from 'app/core/config';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { moveDashboards, moveFolders } from 'app/features/manage-dashboards/state/actions';\nimport { FolderInfo } from 'app/types';\n\nimport { GENERAL_FOLDER_UID } from '../../constants';\nimport { OnMoveOrDeleleSelectedItems } from '../../types';\n\ninterface Props {\n  onMoveItems: OnMoveOrDeleleSelectedItems;\n  results: Map<string, Set<string>>;\n  onDismiss: () => void;\n}\n\nexport const MoveToFolderModal = ({ results, onMoveItems, onDismiss }: Props) => {\n  const [folder, setFolder] = useState<FolderInfo | null>(null);\n  const styles = useStyles2(getStyles);\n  const notifyApp = useAppNotification();\n  const [moving, setMoving] = useState(false);\n\n  const nestedFoldersEnabled = config.featureToggles.nestedFolders;\n\n  const selectedDashboards = Array.from(results.get('dashboard') ?? []);\n  const selectedFolders = nestedFoldersEnabled\n    ? Array.from(results.get('folder') ?? []).filter((v) => v !== GENERAL_FOLDER_UID)\n    : [];\n\n  const handleFolderChange = useCallback(\n    (newFolder: FolderInfo) => {\n      setFolder(newFolder);\n    },\n    [setFolder]\n  );\n\n  const moveTo = async () => {\n    if (!folder) {\n      return;\n    }\n\n    if (nestedFoldersEnabled) {\n      setMoving(true);\n      let totalCount = 0;\n      let successCount = 0;\n\n      if (selectedDashboards.length) {\n        const moveDashboardsResult = await moveDashboards(selectedDashboards, folder);\n\n        totalCount += moveDashboardsResult.totalCount;\n        successCount += moveDashboardsResult.successCount;\n      }\n\n      if (selectedFolders.length) {\n        const moveFoldersResult = await moveFolders(selectedFolders, folder);\n\n        totalCount += moveFoldersResult.totalCount;\n        successCount += moveFoldersResult.successCount;\n      }\n\n      const destTitle = folder.title ?? 'General';\n      notifyNestedMoveResult(notifyApp, destTitle, {\n        selectedDashboardsCount: selectedDashboards.length,\n        selectedFoldersCount: selectedFolders.length,\n        totalCount,\n        successCount,\n      });\n\n      onMoveItems();\n      setMoving(false);\n      onDismiss();\n\n      return;\n    }\n\n    if (selectedDashboards.length) {\n      const folderTitle = folder.title ?? 'General';\n      setMoving(true);\n      moveDashboards(selectedDashboards, folder).then((result) => {\n        if (result.successCount > 0) {\n          const ending = result.successCount === 1 ? '' : 's';\n          const header = `Dashboard${ending} Moved`;\n          const msg = `${result.successCount} dashboard${ending} moved to ${folderTitle}`;\n          notifyApp.success(header, msg);\n        }\n\n        if (result.totalCount === result.alreadyInFolderCount) {\n          notifyApp.error('Error', `Dashboard already belongs to folder ${folderTitle}`);\n        } else {\n          //update the list\n          onMoveItems();\n        }\n\n        setMoving(false);\n        onDismiss();\n      });\n    }\n  };\n\n  const thingsMoving = [\n    ['folder', 'folders', selectedFolders.length] as const,\n    ['dashboard', 'dashboards', selectedDashboards.length] as const,\n  ]\n    .filter(([single, plural, count]) => count > 0)\n    .map(([single, plural, count]) => `${count.toLocaleString()} ${count === 1 ? single : plural}`)\n    .join(' and ');\n\n  return (\n    <Modal\n      isOpen\n      className={styles.modal}\n      title={nestedFoldersEnabled ? 'Move' : 'Choose Dashboard Folder'}\n      icon=\"folder-plus\"\n      onDismiss={onDismiss}\n    >\n      <>\n        <div className={styles.content}>\n          {nestedFoldersEnabled && selectedFolders.length > 0 && (\n            <Alert severity=\"warning\" title=\" Moving this item may change its permissions\" />\n          )}\n\n          <p>Move {thingsMoving} to:</p>\n\n          <OldFolderPicker allowEmpty={true} enableCreateNew={false} onChange={handleFolderChange} />\n        </div>\n\n        <HorizontalGroup justify=\"flex-end\">\n          <Button variant=\"secondary\" onClick={onDismiss} fill=\"outline\">\n            Cancel\n          </Button>\n          <Button icon={moving ? 'fa fa-spinner' : undefined} variant=\"primary\" onClick={moveTo}>\n            Move\n          </Button>\n        </HorizontalGroup>\n      </>\n    </Modal>\n  );\n};\n\ninterface NotifyCounts {\n  selectedDashboardsCount: number;\n  selectedFoldersCount: number;\n  totalCount: number;\n  successCount: number;\n}\n\nfunction notifyNestedMoveResult(\n  notifyApp: ReturnType<typeof useAppNotification>,\n  destinationName: string,\n  { selectedDashboardsCount, selectedFoldersCount, totalCount, successCount }: NotifyCounts\n) {\n  let objectMoving: string | undefined;\n  const plural = successCount === 1 ? '' : 's';\n  const failedCount = totalCount - successCount;\n\n  if (selectedDashboardsCount && selectedFoldersCount) {\n    objectMoving = `Item${plural}`;\n  } else if (selectedDashboardsCount) {\n    objectMoving = `Dashboard${plural}`;\n  } else if (selectedFoldersCount) {\n    objectMoving = `Folder${plural}`;\n  }\n\n  if (objectMoving) {\n    const objectLower = objectMoving?.toLocaleLowerCase();\n\n    if (totalCount === successCount) {\n      notifyApp.success(`${objectMoving} moved`, `Moved ${successCount} ${objectLower} to ${destinationName}`);\n    } else if (successCount === 0) {\n      notifyApp.error(`Failed to move ${objectLower}`, `Could not move ${totalCount} ${objectLower} due to an error`);\n    } else {\n      notifyApp.warning(\n        `Partially moved ${objectLower}`,\n        `Failed to move ${failedCount} ${objectLower} to ${destinationName}`\n      );\n    }\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    modal: css`\n      width: 500px;\n    `,\n    content: css`\n      margin-bottom: ${theme.spacing(3)};\n    `,\n  };\n};\n","import React, { useState } from 'react';\n\nimport { Button, HorizontalGroup, IconButton, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { FolderDTO } from 'app/types';\n\nimport { GENERAL_FOLDER_UID } from '../../constants';\nimport { OnMoveOrDeleleSelectedItems } from '../../types';\n\nimport { getStyles } from './ActionRow';\nimport { ConfirmDeleteModal } from './ConfirmDeleteModal';\nimport { MoveToFolderModal } from './MoveToFolderModal';\n\ntype Props = {\n  items: Map<string, Set<string>>;\n  folder?: FolderDTO; // when we are loading in folder page\n  onChange: OnMoveOrDeleleSelectedItems;\n  clearSelection: () => void;\n};\n\nexport function ManageActions({ items, folder, onChange, clearSelection }: Props) {\n  const styles = useStyles2(getStyles);\n\n  const canSave = folder?.canSave;\n  const hasEditPermissionInFolders = folder ? canSave : contextSrv.hasEditPermissionInFolders;\n\n  const canMove = hasEditPermissionInFolders;\n\n  const selectedFolders = Array.from(items.get('folder') ?? []);\n  const includesGeneralFolder = selectedFolders.find((result) => result === GENERAL_FOLDER_UID);\n\n  const canDelete = hasEditPermissionInFolders && !includesGeneralFolder;\n  const [isMoveModalOpen, setIsMoveModalOpen] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n\n  const onMove = () => {\n    setIsMoveModalOpen(true);\n  };\n\n  const onDelete = () => {\n    setIsDeleteModalOpen(true);\n  };\n\n  return (\n    <div className={styles.actionRow} data-testid=\"manage-actions\">\n      <HorizontalGroup spacing=\"md\" width=\"auto\">\n        <IconButton name=\"check-square\" onClick={clearSelection} tooltip=\"Uncheck everything\" />\n        <Button disabled={!canMove} onClick={onMove} icon=\"exchange-alt\" variant=\"secondary\">\n          Move\n        </Button>\n        <Button disabled={!canDelete} onClick={onDelete} icon=\"trash-alt\" variant=\"destructive\">\n          Delete\n        </Button>\n      </HorizontalGroup>\n\n      {isDeleteModalOpen && (\n        <ConfirmDeleteModal onDeleteItems={onChange} results={items} onDismiss={() => setIsDeleteModalOpen(false)} />\n      )}\n\n      {isMoveModalOpen && (\n        <MoveToFolderModal onMoveItems={onChange} results={items} onDismiss={() => setIsMoveModalOpen(false)} />\n      )}\n    </div>\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport { useAsync } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Alert, Spinner, useStyles2 } from '@grafana/ui';\nimport config from 'app/core/config';\n\nimport { contextSrv } from '../../../../core/services/context_srv';\nimport impressionSrv from '../../../../core/services/impression_srv';\nimport { GENERAL_FOLDER_UID } from '../../constants';\nimport { getGrafanaSearcher } from '../../service';\nimport { getFolderChildren } from '../../service/folders';\nimport { queryResultToViewItem } from '../../service/utils';\n\nimport { FolderSection } from './FolderSection';\nimport { SearchResultsProps } from './SearchResultsTable';\n\nasync function getChildren() {\n  if (config.featureToggles.nestedFolders) {\n    return getFolderChildren();\n  }\n\n  const searcher = getGrafanaSearcher();\n  const results = await searcher.search({\n    query: '*',\n    kind: ['folder'],\n    sort: searcher.getFolderViewSort(),\n    limit: 1000,\n  });\n\n  return results.view.map((v) => queryResultToViewItem(v, results.view));\n}\n\ntype Props = Pick<SearchResultsProps, 'selection' | 'selectionToggle' | 'onTagSelected' | 'onClickItem'> & {\n  tags?: string[];\n  hidePseudoFolders?: boolean;\n};\nexport const RootFolderView = ({\n  selection,\n  selectionToggle,\n  onTagSelected,\n  tags,\n  hidePseudoFolders,\n  onClickItem,\n}: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const results = useAsync(async () => {\n    const folders = await getChildren();\n\n    folders.unshift({ title: 'General', url: '/dashboards', kind: 'folder', uid: GENERAL_FOLDER_UID });\n\n    if (!hidePseudoFolders) {\n      const itemsUIDs = await impressionSrv.getDashboardOpened();\n      if (itemsUIDs.length) {\n        folders.unshift({ title: 'Recent', icon: 'clock-nine', kind: 'folder', uid: '__recent', itemsUIDs });\n      }\n\n      if (contextSrv.isSignedIn) {\n        const stars = await getBackendSrv().get('api/user/stars');\n        if (stars.length > 0) {\n          folders.unshift({ title: 'Starred', icon: 'star', kind: 'folder', uid: '__starred', itemsUIDs: stars });\n        }\n      }\n    }\n\n    return folders;\n  }, []);\n\n  const renderResults = () => {\n    if (results.loading) {\n      return <Spinner className={styles.spinner} />;\n    } else if (!results.value) {\n      return <Alert className={styles.error} title={results.error ? results.error.message : 'Something went wrong'} />;\n    } else {\n      return results.value.map((section) => (\n        <div data-testid={selectors.components.Search.sectionV2} className={styles.section} key={section.title}>\n          {section.title && (\n            <FolderSection\n              selection={selection}\n              selectionToggle={selectionToggle}\n              onTagSelected={onTagSelected}\n              section={section}\n              tags={tags}\n              onClickItem={onClickItem}\n            />\n          )}\n        </div>\n      ));\n    }\n  };\n\n  return <div className={styles.wrapper}>{renderResults()}</div>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css`\n      display: flex;\n      flex-direction: column;\n      overflow: auto;\n\n      > ul {\n        list-style: none;\n      }\n\n      border: solid 1px ${theme.v1.colors.border2};\n    `,\n    section: css`\n      display: flex;\n      flex-direction: column;\n      background: ${theme.v1.colors.panelBg};\n\n      &:not(:last-child) {\n        border-bottom: solid 1px ${theme.v1.colors.border2};\n      }\n    `,\n    spinner: css`\n      align-items: center;\n      display: flex;\n      justify-content: center;\n      min-height: 100px;\n    `,\n    error: css`\n      margin: ${theme.spacing(4)} auto;\n    `,\n  };\n};\n","/* eslint-disable react/jsx-no-undef */\nimport { css } from '@emotion/css';\nimport React, { useEffect, useRef, useCallback, useState, CSSProperties } from 'react';\nimport { FixedSizeList } from 'react-window';\nimport InfiniteLoader from 'react-window-infinite-loader';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { SearchItem } from '../../components/SearchItem';\nimport { useSearchKeyboardNavigation } from '../../hooks/useSearchKeyboardSelection';\nimport { queryResultToViewItem } from '../../service/utils';\n\nimport { SearchResultsProps } from './SearchResultsTable';\n\nexport const SearchResultsCards = React.memo(\n  ({\n    response,\n    width,\n    height,\n    selection,\n    selectionToggle,\n    onTagSelected,\n    keyboardEvents,\n    onClickItem,\n  }: SearchResultsProps) => {\n    const styles = useStyles2(getStyles);\n    const infiniteLoaderRef = useRef<InfiniteLoader>(null);\n    const [listEl, setListEl] = useState<FixedSizeList | null>(null);\n    const highlightIndex = useSearchKeyboardNavigation(keyboardEvents, 0, response);\n\n    // Scroll to the top and clear loader cache when the query results change\n    useEffect(() => {\n      if (infiniteLoaderRef.current) {\n        infiniteLoaderRef.current.resetloadMoreItemsCache();\n      }\n      if (listEl) {\n        listEl.scrollTo(0);\n      }\n    }, [response, listEl]);\n\n    const RenderRow = useCallback(\n      ({ index: rowIndex, style }: { index: number; style: CSSProperties }) => {\n        let className = '';\n        if (rowIndex === highlightIndex.y) {\n          className += ' ' + styles.selectedRow;\n        }\n\n        const item = response.view.get(rowIndex);\n        const searchItem = queryResultToViewItem(item, response.view);\n        const isSelected = selectionToggle && selection?.(searchItem.kind, searchItem.uid);\n\n        return (\n          <div style={style} key={item.uid} className={className} role=\"row\">\n            <SearchItem\n              item={searchItem}\n              onTagSelected={onTagSelected}\n              onToggleChecked={(item) => {\n                if (selectionToggle) {\n                  selectionToggle('dashboard', item.uid!);\n                }\n              }}\n              editable={Boolean(selection != null)}\n              onClickItem={onClickItem}\n              isSelected={isSelected}\n            />\n          </div>\n        );\n      },\n      [response.view, highlightIndex, styles, onTagSelected, selection, selectionToggle, onClickItem]\n    );\n\n    if (!response.totalRows) {\n      return (\n        <div className={styles.noData} style={{ width }}>\n          No data\n        </div>\n      );\n    }\n\n    return (\n      <div aria-label=\"Search results list\" style={{ width }} role=\"list\">\n        <InfiniteLoader\n          ref={infiniteLoaderRef}\n          isItemLoaded={response.isItemLoaded}\n          itemCount={response.totalRows}\n          loadMoreItems={response.loadMoreItems}\n        >\n          {({ onItemsRendered, ref }) => (\n            <FixedSizeList\n              ref={(innerRef) => {\n                ref(innerRef);\n                setListEl(innerRef);\n              }}\n              onItemsRendered={onItemsRendered}\n              height={height}\n              itemCount={response.totalRows}\n              itemSize={72}\n              width=\"100%\"\n              style={{ overflow: 'hidden auto' }}\n            >\n              {RenderRow}\n            </FixedSizeList>\n          )}\n        </InfiniteLoader>\n      </div>\n    );\n  }\n);\nSearchResultsCards.displayName = 'SearchResultsCards';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    noData: css`\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      justify-content: center;\n      height: 100%;\n    `,\n    selectedRow: css`\n      border-left: 3px solid ${theme.colors.primary.border};\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { useCallback, useState } from 'react';\nimport { useDebounce } from 'react-use';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { Observable } from 'rxjs';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, Spinner, Button } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { Trans } from 'app/core/internationalization';\nimport { newBrowseDashboardsEnabled } from 'app/features/browse-dashboards/featureFlag';\nimport { FolderDTO } from 'app/types';\n\nimport { getGrafanaSearcher } from '../../service';\nimport { getSearchStateManager } from '../../state/SearchStateManager';\nimport { SearchLayout, DashboardViewItem } from '../../types';\nimport { newSearchSelection, updateSearchSelection } from '../selection';\n\nimport { ActionRow, getValidQueryLayout } from './ActionRow';\nimport { FolderSection } from './FolderSection';\nimport { ManageActions } from './ManageActions';\nimport { RootFolderView } from './RootFolderView';\nimport { SearchResultsCards } from './SearchResultsCards';\nimport { SearchResultsTable, SearchResultsProps } from './SearchResultsTable';\n\nexport type SearchViewProps = {\n  showManage: boolean;\n  folderDTO?: FolderDTO;\n  hidePseudoFolders?: boolean; // Recent + starred\n  keyboardEvents: Observable<React.KeyboardEvent>;\n};\n\nexport const SearchView = ({ showManage, folderDTO, hidePseudoFolders, keyboardEvents }: SearchViewProps) => {\n  const styles = useStyles2(getStyles);\n  const stateManager = getSearchStateManager(); // State is initialized from URL by parent component\n  const state = stateManager.useState();\n\n  const [searchSelection, setSearchSelection] = useState(newSearchSelection());\n  const layout = getValidQueryLayout(state);\n  const isFolders = layout === SearchLayout.Folders;\n\n  const [listKey, setListKey] = useState(Date.now());\n\n  // Search usage reporting\n  useDebounce(stateManager.onReportSearchUsage, 1000, []);\n\n  const clearSelection = useCallback(() => {\n    searchSelection.items.clear();\n    setSearchSelection({ ...searchSelection });\n  }, [searchSelection]);\n\n  const toggleSelection = useCallback(\n    (kind: string, uid: string) => {\n      const current = searchSelection.isSelected(kind, uid);\n      setSearchSelection(updateSearchSelection(searchSelection, !current, kind, [uid]));\n    },\n    [searchSelection]\n  );\n\n  // function to update items when dashboards or folders are moved or deleted\n  const onChangeItemsList = async () => {\n    // clean up search selection\n    clearSelection();\n    setListKey(Date.now());\n    // trigger again the search to the backend\n    stateManager.onQueryChange(state.query);\n  };\n\n  const renderResults = () => {\n    const value = state.result;\n\n    if ((!value || !value.totalRows) && !isFolders) {\n      if (state.loading && !value) {\n        return <Spinner />;\n      }\n\n      return (\n        <div className={styles.noResults}>\n          <div>\n            <Trans i18nKey=\"search-view.no-results.text\">No results found for your query.</Trans>\n          </div>\n          <br />\n          <Button variant=\"secondary\" onClick={stateManager.onClearSearchAndFilters}>\n            <Trans i18nKey=\"search-view.no-results.clear\">Clear search and filters</Trans>\n          </Button>\n        </div>\n      );\n    }\n\n    const selection = showManage ? searchSelection.isSelected : undefined;\n\n    if (layout === SearchLayout.Folders) {\n      if (folderDTO) {\n        return (\n          <FolderSection\n            section={sectionForFolderView(folderDTO)}\n            selection={selection}\n            selectionToggle={toggleSelection}\n            onTagSelected={stateManager.onAddTag}\n            renderStandaloneBody={true}\n            tags={state.tag}\n            key={listKey}\n            onClickItem={stateManager.onSearchItemClicked}\n          />\n        );\n      }\n      return (\n        <RootFolderView\n          key={listKey}\n          selection={selection}\n          selectionToggle={toggleSelection}\n          tags={state.tag}\n          onTagSelected={stateManager.onAddTag}\n          hidePseudoFolders={hidePseudoFolders}\n          onClickItem={stateManager.onSearchItemClicked}\n        />\n      );\n    }\n\n    return (\n      <div style={{ height: '100%', width: '100%' }}>\n        <AutoSizer>\n          {({ width, height }) => {\n            const props: SearchResultsProps = {\n              response: value!,\n              selection,\n              selectionToggle: toggleSelection,\n              clearSelection,\n              width: width,\n              height: height,\n              onTagSelected: stateManager.onAddTag,\n              keyboardEvents,\n              onDatasourceChange: state.datasource ? stateManager.onDatasourceChange : undefined,\n              onClickItem: stateManager.onSearchItemClicked,\n            };\n\n            if (width < 800) {\n              return <SearchResultsCards {...props} />;\n            }\n\n            return <SearchResultsTable {...props} />;\n          }}\n        </AutoSizer>\n      </div>\n    );\n  };\n\n  if (\n    folderDTO &&\n    // With nested folders, SearchView doesn't know if it's fetched all children\n    // of a folder so don't show empty state here.\n    !newBrowseDashboardsEnabled() &&\n    !state.loading &&\n    !state.result?.totalRows &&\n    !stateManager.hasSearchFilters()\n  ) {\n    return (\n      <EmptyListCTA\n        title=\"This folder doesn't have any dashboards yet\"\n        buttonIcon=\"plus\"\n        buttonTitle=\"Create Dashboard\"\n        buttonLink={`dashboard/new?folderUid=${folderDTO.uid}`}\n        proTip=\"Add/move dashboards to your folder at ->\"\n        proTipLink=\"dashboards\"\n        proTipLinkTitle=\"Manage dashboards\"\n        proTipTarget=\"\"\n      />\n    );\n  }\n\n  return (\n    <>\n      {Boolean(searchSelection.items.size > 0) ? (\n        <ManageActions items={searchSelection.items} onChange={onChangeItemsList} clearSelection={clearSelection} />\n      ) : (\n        <ActionRow\n          onLayoutChange={stateManager.onLayoutChange}\n          showStarredFilter={hidePseudoFolders}\n          onStarredFilterChange={!hidePseudoFolders ? undefined : stateManager.onStarredFilterChange}\n          onSortChange={stateManager.onSortChange}\n          onTagFilterChange={stateManager.onTagFilterChange}\n          getTagOptions={stateManager.getTagOptions}\n          getSortOptions={getGrafanaSearcher().getSortOptions}\n          sortPlaceholder={getGrafanaSearcher().sortPlaceholder}\n          onDatasourceChange={stateManager.onDatasourceChange}\n          onPanelTypeChange={stateManager.onPanelTypeChange}\n          state={state}\n          includePanels={state.includePanels!}\n          onSetIncludePanels={stateManager.onSetIncludePanels}\n        />\n      )}\n\n      {renderResults()}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  searchInput: css`\n    margin-bottom: 6px;\n    min-height: ${theme.spacing(4)};\n  `,\n  unsupported: css`\n    padding: 10px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n    font-size: 18px;\n  `,\n  noResults: css`\n    padding: ${theme.v1.spacing.md};\n    background: ${theme.v1.colors.bg2};\n    font-style: italic;\n    margin-top: ${theme.v1.spacing.md};\n  `,\n});\n\nfunction sectionForFolderView(folderDTO: FolderDTO): DashboardViewItem {\n  return { uid: folderDTO.uid, kind: 'folder', title: folderDTO.title };\n}\n","import React, { useMemo, useState } from 'react';\n\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { Menu, Dropdown, Button, Icon, HorizontalGroup } from '@grafana/ui';\nimport { FolderDTO } from 'app/types';\n\nimport { MoveToFolderModal } from '../page/components/MoveToFolderModal';\nimport { getImportPhrase, getNewDashboardPhrase, getNewFolderPhrase, getNewPhrase } from '../tempI18nPhrases';\n\nexport interface Props {\n  folder: FolderDTO | undefined;\n  canCreateFolders?: boolean;\n  canCreateDashboards?: boolean;\n}\n\nexport const DashboardActions = ({ folder, canCreateFolders = false, canCreateDashboards = false }: Props) => {\n  const [isMoveModalOpen, setIsMoveModalOpen] = useState(false);\n  const canMove = config.featureToggles.nestedFolders && (folder?.canSave ?? false);\n\n  const moveSelection = useMemo(\n    () => new Map<string, Set<string>>([['folder', new Set(folder?.uid ? [folder.uid] : [])]]),\n    [folder]\n  );\n\n  const actionUrl = (type: string) => {\n    let url = `dashboard/${type}`;\n    const isTypeNewFolder = type === 'new_folder';\n\n    if (isTypeNewFolder) {\n      url = `dashboards/folder/new/`;\n    }\n\n    if (folder?.uid) {\n      url += `?folderUid=${folder.uid}`;\n    }\n\n    return url;\n  };\n\n  const MenuActions = () => {\n    return (\n      <Menu>\n        {canCreateDashboards && (\n          <Menu.Item\n            url={actionUrl('new')}\n            label={getNewDashboardPhrase()}\n            onClick={() =>\n              reportInteraction('grafana_menu_item_clicked', { url: actionUrl('new'), from: '/dashboards' })\n            }\n          />\n        )}\n        {canCreateFolders && (config.featureToggles.nestedFolders || !folder?.uid) && (\n          <Menu.Item\n            url={actionUrl('new_folder')}\n            label={getNewFolderPhrase()}\n            onClick={() =>\n              reportInteraction('grafana_menu_item_clicked', { url: actionUrl('new_folder'), from: '/dashboards' })\n            }\n          />\n        )}\n        {canCreateDashboards && (\n          <Menu.Item\n            url={actionUrl('import')}\n            label={getImportPhrase()}\n            onClick={() =>\n              reportInteraction('grafana_menu_item_clicked', { url: actionUrl('import'), from: '/dashboards' })\n            }\n          />\n        )}\n      </Menu>\n    );\n  };\n\n  return (\n    <>\n      <div>\n        <HorizontalGroup>\n          {canMove && (\n            <Button onClick={() => setIsMoveModalOpen(true)} icon=\"exchange-alt\" variant=\"secondary\">\n              Move\n            </Button>\n          )}\n          <Dropdown overlay={MenuActions} placement=\"bottom-start\">\n            <Button variant=\"primary\">\n              {getNewPhrase()}\n              <Icon name=\"angle-down\" />\n            </Button>\n          </Dropdown>\n        </HorizontalGroup>\n      </div>\n\n      {canMove && isMoveModalOpen && (\n        <MoveToFolderModal onMoveItems={() => {}} results={moveSelection} onDismiss={() => setIsMoveModalOpen(false)} />\n      )}\n    </>\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport React, { useEffect } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, FilterInput } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { FolderDTO, AccessControlAction } from 'app/types';\n\nimport { useKeyNavigationListener } from '../hooks/useSearchKeyboardSelection';\nimport { SearchView } from '../page/components/SearchView';\nimport { getSearchStateManager } from '../state/SearchStateManager';\nimport { getSearchPlaceholder } from '../tempI18nPhrases';\n\nimport { DashboardActions } from './DashboardActions';\n\nexport interface Props {\n  folder?: FolderDTO;\n}\n\nexport const ManageDashboardsNew = React.memo(({ folder }: Props) => {\n  const styles = useStyles2(getStyles);\n  // since we don't use \"query\" from use search... it is not actually loaded from the URL!\n  const stateManager = getSearchStateManager();\n  const state = stateManager.useState();\n  const { onKeyDown, keyboardEvents } = useKeyNavigationListener();\n\n  // TODO: we need to refactor DashboardActions to use folder.uid instead\n\n  const folderUid = folder?.uid;\n  const canSave = folder?.canSave;\n  const { isEditor } = contextSrv;\n  const hasEditPermissionInFolders = folder ? canSave : contextSrv.hasEditPermissionInFolders;\n  const canCreateFolders = contextSrv.hasPermission(AccessControlAction.FoldersCreate);\n  const canCreateDashboards = folderUid\n    ? contextSrv.hasPermissionInMetadata(AccessControlAction.DashboardsCreate, folder)\n    : contextSrv.hasPermission(AccessControlAction.DashboardsCreate);\n  const viewActions = (folder === undefined && canCreateFolders) || canCreateDashboards;\n\n  useEffect(() => stateManager.initStateFromUrl(folder?.uid), [folder?.uid, stateManager]);\n\n  return (\n    <>\n      <div className={cx(styles.actionBar, 'page-action-bar')}>\n        <div className={cx(styles.inputWrapper, 'gf-form gf-form--grow m-r-2')}>\n          <FilterInput\n            value={state.query ?? ''}\n            onChange={(e) => stateManager.onQueryChange(e)}\n            onKeyDown={onKeyDown}\n            // eslint-disable-next-line jsx-a11y/no-autofocus\n            autoFocus\n            spellCheck={false}\n            placeholder={getSearchPlaceholder(state.includePanels)}\n            escapeRegex={false}\n            className={styles.searchInput}\n          />\n        </div>\n        {viewActions && (\n          <DashboardActions\n            folder={folder}\n            canCreateFolders={canCreateFolders}\n            canCreateDashboards={canCreateDashboards}\n          />\n        )}\n      </div>\n\n      <SearchView\n        showManage={Boolean(isEditor || hasEditPermissionInFolders || canSave)}\n        folderDTO={folder}\n        hidePseudoFolders={true}\n        keyboardEvents={keyboardEvents}\n      />\n    </>\n  );\n});\n\nManageDashboardsNew.displayName = 'ManageDashboardsNew';\n\nexport default ManageDashboardsNew;\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  actionBar: css`\n    ${theme.breakpoints.down('sm')} {\n      flex-wrap: wrap;\n    }\n  `,\n  inputWrapper: css`\n    ${theme.breakpoints.down('sm')} {\n      margin-right: 0 !important;\n    }\n  `,\n  searchInput: css`\n    margin-bottom: 6px;\n    min-height: ${theme.spacing(4)};\n  `,\n  unsupported: css`\n    padding: 10px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n    font-size: 18px;\n  `,\n  noResults: css`\n    padding: ${theme.v1.spacing.md};\n    background: ${theme.v1.colors.bg2};\n    font-style: italic;\n    margin-top: ${theme.v1.spacing.md};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { memo } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { locationUtil, NavModelItem } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { Page } from 'app/core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport NewBrowseDashboardsPage from 'app/features/browse-dashboards/BrowseDashboardsPage';\nimport { newBrowseDashboardsEnabled } from 'app/features/browse-dashboards/featureFlag';\nimport { FolderDTO } from 'app/types';\n\nimport { loadFolderPage } from '../loaders';\n\nimport ManageDashboardsNew from './ManageDashboardsNew';\n\nexport interface DashboardListPageRouteParams {\n  uid?: string;\n  slug?: string;\n}\n\ninterface Props extends GrafanaRouteComponentProps<DashboardListPageRouteParams> {}\n\nexport const DashboardListPageFeatureToggle = memo((props: Props) => {\n  if (newBrowseDashboardsEnabled()) {\n    return <NewBrowseDashboardsPage {...props} />;\n  }\n\n  return <DashboardListPage {...props} />;\n});\nDashboardListPageFeatureToggle.displayName = 'DashboardListPageFeatureToggle';\n\nconst DashboardListPage = memo(({ match, location }: Props) => {\n  const { loading, value } = useAsync<() => Promise<{ folder?: FolderDTO; pageNav?: NavModelItem }>>(() => {\n    const uid = match.params.uid;\n    const url = location.pathname;\n\n    if (!uid || !url.startsWith('/dashboards')) {\n      return Promise.resolve({});\n    }\n\n    return loadFolderPage(uid!).then(({ folder, folderNav }) => {\n      const path = locationUtil.stripBaseFromUrl(folder.url);\n\n      if (path !== location.pathname) {\n        locationService.replace(path);\n      }\n\n      return { folder, pageNav: folderNav };\n    });\n  }, [match.params.uid]);\n\n  return (\n    <Page navId=\"dashboards/browse\" pageNav={value?.pageNav}>\n      <Page.Contents\n        isLoading={loading}\n        className={css`\n          display: flex;\n          flex-direction: column;\n          height: 100%;\n        `}\n      >\n        <ManageDashboardsNew folder={value?.folder} />\n      </Page.Contents>\n    </Page>\n  );\n});\n\nDashboardListPage.displayName = 'DashboardListPage';\n\nexport default DashboardListPageFeatureToggle;\n","import { reportInteraction } from '@grafana/runtime';\nimport { InspectTab } from 'app/features/inspector/types';\n\nimport { EventTrackingNamespace, SearchLayout } from '../types';\n\ninterface QueryProps {\n  layout: SearchLayout;\n  starred: boolean;\n  sortValue?: string;\n  query: string;\n  tagCount: number;\n  includePanels?: boolean;\n}\n\nexport const reportDashboardListViewed = (eventTrackingNamespace: EventTrackingNamespace, query: QueryProps) => {\n  reportInteraction(`${eventTrackingNamespace}_viewed`, getQuerySearchContext(query));\n};\n\nexport const reportSearchResultInteraction = (eventTrackingNamespace: EventTrackingNamespace, query: QueryProps) => {\n  reportInteraction(`${eventTrackingNamespace}_result_clicked`, getQuerySearchContext(query));\n};\n\nexport const reportSearchQueryInteraction = (eventTrackingNamespace: EventTrackingNamespace, query: QueryProps) => {\n  reportInteraction(`${eventTrackingNamespace}_query_submitted`, getQuerySearchContext(query));\n};\n\nexport const reportSearchFailedQueryInteraction = (\n  eventTrackingNamespace: EventTrackingNamespace,\n  { error, ...query }: QueryProps & { error?: string }\n) => {\n  reportInteraction(`${eventTrackingNamespace}_query_failed`, { ...getQuerySearchContext(query), error });\n};\n\nexport const reportPanelInspectInteraction = (\n  PanelInspectType: InspectTab,\n  name: string,\n  properties?: Record<string, boolean | string>\n) => {\n  reportInteraction(`grafana_panel_inspect_${PanelInspectType}_${name}_clicked`, properties);\n};\n\nconst getQuerySearchContext = (query: QueryProps) => {\n  return {\n    layout: query.layout,\n    starredFilter: query.starred ?? false,\n    sort: query.sortValue ?? '',\n    tagCount: query.tagCount ?? 0,\n    queryLength: query.query?.length ?? 0,\n    includePanels: query.includePanels ?? false,\n  };\n};\n"],"names":["defaultSortOptionsGetter","SortPicker","onChange","value","placeholder","filter","getSortOptions","isClearable","options","vals","v","isDesc","opt","StateManagerBase","state","useLatestState","update","observerOrNext","model","forceUpdate","s","DeleteModal","onConfirm","onDismiss","selectedItems","props","data","deleteIsInvalid","isDeleting","setIsDeleting","onDelete","MoveModal","moveTarget","setMoveTarget","isMoving","setIsMoving","selectedFolders","uid","onMove","FolderActionsButton","folder","isOpen","setIsOpen","showPermissionsDrawer","setShowPermissionsDrawer","moveFolder","deleteFolder","canEditFolders","canDeleteFolders","canViewPermissions","canSetPermissions","canMoveFolder","destinationUID","parents","parentUrl","showMoveModal","showDeleteModal","managePermissionsLabel","moveLabel","deleteLabel","menu","checkFolderPermission","action","folderDTO","getFolderPermissions","canCreateDashboards","canCreateFolders","canEditDashboards","initialState","defaultQueryParams","SearchStateManager","query","tagToRemove","tag","tags","newTag","datasource","panel_type","e","starred","sort","layout","includePanels","store","folderUid","doInitialSearch","stateFromUrl","stateManager","q","trackingInfo","searcher","searchTimestamp","result","error","getSearchStateManager","useSearchStateManager","getSearchPlaceholder","getNewDashboardPhrase","getNewFolderPhrase","getImportPhrase","getNewPhrase","BrowseActions","styles","getStyles","dispatch","deleteItems","moveItems","moveIsInvalid","config","isSearching","onActionComplete","trackAction","moveButton","Button","Tooltip","theme","actionMap","selectedDashboards","getLayoutOptions","getValidQueryLayout","ActionRow","onLayoutChange","onSortChange","onStarredFilterChange","onTagFilterChange","getTagOptions","sortPlaceholder","onDatasourceChange","onPanelTypeChange","onSetIncludePanels","showStarredFilter","hideLayout","disabledOptions","TagFilter","Checkbox","RadioButtonGroup","change","BrowseFilters","searchState","SelectionState","CheckboxCell","row","isSelected","onItemSelectionChange","item","selectors","ev","CheckboxHeaderCell","onAllSelectionChange","makeRowID","baseId","CHEVRON_SIZE","ICON_SIZE","NameCell","onFolderClick","treeID","level","childrenByParentUID","isLoading","iconName","Indent","Text","IconButton","Spinner","Icon","Link","TagsCell","TagList","HEADER_HEIGHT","ROW_HEIGHT","DashboardsTree","items","width","height","isItemLoaded","requestLoadMore","canSelect","infiniteLoaderRef","tableColumns","checkboxColumn","nameColumn","tagsColumns","table","getTableProps","getTableBodyProps","headerGroups","virtualData","handleIsItemLoaded","itemIndex","handleLoadMore","startIndex","endIndex","parentUID","headerGroup","key","headerGroupProps","column","headerProps","onItemsRendered","ref","VirtualListRow","index","style","rows","prepareRow","cell","cellProps","BrowseView","folderUID","status","flatTree","handleFolderClick","clickedFolderUID","handleItemSelectionChange","selection","hasSelectedDescendants","treeItem","EmptyListCTA","CallToActionCard","newState","collection","thisIsSelected","initialFormModel","NewFolderForm","onCancel","translatedFolderNameRequiredPhrase","validateFolderName","folderName","fieldNameLabel","Form","form","register","errors","Field","Input","CreateNewButton","parentFolder","canCreateDashboard","canCreateFolder","location","newFolder","showNewFolderDrawer","setShowNewFolderDrawer","onCreateFolder","depth","newMenu","Menu","MenuItem","addFolderUidToUrl","Dropdown","Drawer","url","NUM_PLACEHOLDER_ROWS","initialLoadingView","DataFrameView","SearchView","wholeState","hasSelection","keyboardEvents","selectionChecker","kind","assertDashboardViewItemKind","clearSelection","newIsSelected","Card","SearchResultsTable","BrowseDashboardsPage","match","saveFolder","navModel","dashboardsTabID","dashboardsTab","child","showEditTitle","onEditTitle","newValue","Page","FilterInput","loadFolderPage","newSearchSelection","updateSearchSelection","old","selected","uids","k","SearchCheckbox","onClick","className","checked","editable","ariaLabel","getIconFromMeta","meta","metaIconMap","SearchItem","onToggleChecked","onTagSelected","onClickItem","tagSelected","event","handleCheckboxClick","description","kindName","getFolderChildren","parentUid","parentTitle","dashboardsAtRoot","dashboardsResults","dashboardItems","getChildren","section","raw","FolderSection","selectionToggle","renderStandaloneBody","getSectionHeaderStyles","sectionExpanded","setSectionExpanded","results","useAsync","onSectionExpand","newExpandedValue","onToggleFolder","evt","sub","labelId","icon","renderResults","CollapsableSection","sm","ConfirmDeleteModal","onDeleteItems","dashboards","folders","folderCount","dashCount","text","subtitle","dashEnding","folderEnding","requireDoubleConfirm","ConfirmModal","MoveToFolderModal","onMoveItems","setFolder","notifyApp","moving","setMoving","nestedFoldersEnabled","handleFolderChange","moveTo","totalCount","successCount","moveDashboardsResult","moveFoldersResult","destTitle","notifyNestedMoveResult","folderTitle","ending","header","msg","thingsMoving","single","plural","count","Modal","Alert","OldFolderPicker","destinationName","selectedDashboardsCount","selectedFoldersCount","objectMoving","failedCount","objectLower","ManageActions","canSave","hasEditPermissionInFolders","canMove","includesGeneralFolder","canDelete","isMoveModalOpen","setIsMoveModalOpen","isDeleteModalOpen","setIsDeleteModalOpen","RootFolderView","hidePseudoFolders","itemsUIDs","stars","SearchResultsCards","response","listEl","setListEl","highlightIndex","RenderRow","rowIndex","searchItem","innerRef","showManage","searchSelection","setSearchSelection","isFolders","listKey","setListKey","useDebounce","toggleSelection","current","onChangeItemsList","sectionForFolderView","DashboardActions","moveSelection","actionUrl","type","MenuActions","ManageDashboardsNew","onKeyDown","isEditor","viewActions","DashboardListPageFeatureToggle","DashboardListPage","loading","folderNav","path","reportDashboardListViewed","eventTrackingNamespace","getQuerySearchContext","reportSearchResultInteraction","reportSearchQueryInteraction","reportSearchFailedQueryInteraction","reportPanelInspectInteraction","PanelInspectType","name","properties"],"sourceRoot":""}