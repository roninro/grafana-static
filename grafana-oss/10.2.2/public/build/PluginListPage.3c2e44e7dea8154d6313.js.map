{"version":3,"file":"PluginListPage.3c2e44e7dea8154d6313.js","mappings":"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","sources":["webpack://grafana/./.yarn/__virtual__/@grafana-ui-virtual-d722efae30/1/packages/grafana-ui/src/components/Layout/Grid/Grid.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginDisabledBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Badges/sharedStyles.ts","webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginInstallBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginEnterpriseBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginUpdateAvailableBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginAngularBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginDeprecatedBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginListItemBadges.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginLogo.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginListItem.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginList.tsx","webpack://grafana/./public/app/features/plugins/admin/components/SearchField.tsx","webpack://grafana/./public/app/features/plugins/admin/hooks/useHistory.tsx","webpack://grafana/./public/app/features/plugins/admin/pages/Browse.tsx","webpack://grafana/./public/app/features/plugins/admin/state/selectors.ts","webpack://grafana/./public/app/features/plugins/admin/state/hooks.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { forwardRef, HTMLAttributes } from 'react';\n\nimport { GrafanaTheme2, ThemeSpacingTokens } from '@grafana/data';\n\nimport { useStyles2 } from '../../../themes';\n\ninterface GridProps extends Omit<HTMLAttributes<HTMLDivElement>, 'className' | 'style'> {\n  children: NonNullable<React.ReactNode>;\n\n  /** Specifies the gutters between columns and rows. It is overwritten when a column or row gap has a value */\n  gap?: ThemeSpacingTokens;\n\n  /** Number of columns */\n  columns?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;\n\n  /** For a responsive layout, fit as many columns while maintaining this minimum column width.\n   *  The real width will be calculated based on the theme spacing tokens: `theme.spacing(minColumnWidth)`\n   */\n  minColumnWidth?: 1 | 2 | 3 | 5 | 8 | 13 | 21 | 34 | 44 | 55 | 72 | 89 | 144;\n}\n\nexport const Grid = forwardRef<HTMLDivElement, GridProps>((props, ref) => {\n  const { children, gap, columns, minColumnWidth, ...rest } = props;\n  const styles = useStyles2(getGridStyles, gap, columns, minColumnWidth);\n\n  return (\n    <div ref={ref} {...rest} className={styles.grid}>\n      {children}\n    </div>\n  );\n});\n\nGrid.displayName = 'Grid';\n\nconst getGridStyles = (\n  theme: GrafanaTheme2,\n  gap: GridProps['gap'],\n  columns: GridProps['columns'],\n  minColumnWidth: GridProps['minColumnWidth']\n) => {\n  return {\n    grid: css([\n      {\n        display: 'grid',\n        gap: gap ? theme.spacing(gap) : undefined,\n      },\n      minColumnWidth && {\n        gridTemplateColumns: `repeat(auto-fill, minmax(${theme.spacing(minColumnWidth)}, 1fr))`,\n      },\n      columns && {\n        gridTemplateColumns: `repeat(${columns}, 1fr)`,\n      },\n    ]),\n  };\n};\n","import React from 'react';\n\nimport { PluginErrorCode } from '@grafana/data';\nimport { Badge } from '@grafana/ui';\n\ntype Props = { error?: PluginErrorCode };\n\nexport function PluginDisabledBadge({ error }: Props): React.ReactElement {\n  const tooltip = errorCodeToTooltip(error);\n  return <Badge icon=\"exclamation-triangle\" text=\"Disabled\" color=\"red\" tooltip={tooltip} />;\n}\n\nfunction errorCodeToTooltip(error?: PluginErrorCode): string | undefined {\n  switch (error) {\n    case PluginErrorCode.modifiedSignature:\n      return 'Plugin disabled due to modified content';\n    case PluginErrorCode.invalidSignature:\n      return 'Plugin disabled due to invalid plugin signature';\n    case PluginErrorCode.missingSignature:\n      return 'Plugin disabled due to missing plugin signature';\n    case null:\n    case undefined:\n      return 'Plugin disabled';\n    default:\n      return `Plugin disabled due to unknown error${error ? `: ${error}` : ''}`;\n  }\n}\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getBadgeColor = (theme: GrafanaTheme2) => css`\n  background: ${theme.colors.background.primary};\n  border-color: ${theme.colors.border.strong};\n  color: ${theme.colors.text.secondary};\n`;\n","import React from 'react';\n\nimport { Badge, useStyles2 } from '@grafana/ui';\n\nimport { getBadgeColor } from './sharedStyles';\n\nexport function PluginInstalledBadge(): React.ReactElement {\n  const customBadgeStyles = useStyles2(getBadgeColor);\n  return <Badge text=\"Installed\" color=\"orange\" className={customBadgeStyles} />;\n}\n","import React from 'react';\n\nimport { featureEnabled } from '@grafana/runtime';\nimport { Badge, Button, HorizontalGroup, PluginSignatureBadge, useStyles2 } from '@grafana/ui';\n\nimport { CatalogPlugin } from '../../types';\n\nimport { getBadgeColor } from './sharedStyles';\n\ntype Props = { plugin: CatalogPlugin };\n\nexport function PluginEnterpriseBadge({ plugin }: Props): React.ReactElement {\n  const customBadgeStyles = useStyles2(getBadgeColor);\n  const onClick = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    ev.preventDefault();\n    window.open(\n      `https://grafana.com/grafana/plugins/${plugin.id}?utm_source=grafana_catalog_learn_more`,\n      '_blank',\n      'noopener,noreferrer'\n    );\n  };\n\n  if (featureEnabled('enterprise.plugins')) {\n    return <Badge text=\"Enterprise\" color=\"blue\" />;\n  }\n\n  return (\n    <HorizontalGroup>\n      <PluginSignatureBadge status={plugin.signature} />\n      <Badge icon=\"lock\" aria-label=\"lock icon\" text=\"Enterprise\" color=\"blue\" className={customBadgeStyles} />\n      <Button size=\"sm\" fill=\"text\" icon=\"external-link-alt\" onClick={onClick}>\n        Learn more\n      </Button>\n    </HorizontalGroup>\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { CatalogPlugin } from '../../types';\n\ntype Props = {\n  plugin: CatalogPlugin;\n};\n\nexport function PluginUpdateAvailableBadge({ plugin }: Props): React.ReactElement | null {\n  const styles = useStyles2(getStyles);\n  return <p className={styles.hasUpdate}>Update available!</p>;\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    hasUpdate: css`\n      color: ${theme.colors.text.secondary};\n      font-size: ${theme.typography.bodySmall.fontSize};\n      margin-bottom: 0;\n    `,\n  };\n};\n","import React from 'react';\n\nimport { Badge } from '@grafana/ui';\n\nexport function PluginAngularBadge(): React.ReactElement {\n  return (\n    <Badge\n      icon=\"exclamation-triangle\"\n      text=\"Angular\"\n      color=\"orange\"\n      tooltip=\"This plugin uses deprecated functionality, support for which is being removed.\"\n    />\n  );\n}\n","import React from 'react';\n\nimport { Badge } from '@grafana/ui';\n\nexport function PluginDeprecatedBadge(): React.ReactElement {\n  return (\n    <Badge\n      icon=\"exclamation-triangle\"\n      text=\"Deprecated\"\n      color=\"orange\"\n      tooltip=\"This plugin is deprecated and no longer receives updates.\"\n    />\n  );\n}\n","import React from 'react';\n\nimport { PluginType } from '@grafana/data';\nimport { HorizontalGroup, PluginSignatureBadge } from '@grafana/ui';\n\nimport { CatalogPlugin } from '../types';\n\nimport {\n  PluginEnterpriseBadge,\n  PluginDisabledBadge,\n  PluginInstalledBadge,\n  PluginUpdateAvailableBadge,\n  PluginAngularBadge,\n  PluginDeprecatedBadge,\n} from './Badges';\n\ntype PluginBadgeType = {\n  plugin: CatalogPlugin;\n};\n\nexport function PluginListItemBadges({ plugin }: PluginBadgeType) {\n  // Currently renderer plugins are not supported by the catalog due to complications related to installation / update / uninstall.\n  const hasUpdate = plugin.hasUpdate && !plugin.isCore && plugin.type !== PluginType.renderer;\n  if (plugin.isEnterprise) {\n    return (\n      <HorizontalGroup height=\"auto\" wrap>\n        <PluginEnterpriseBadge plugin={plugin} />\n        {plugin.isDisabled && <PluginDisabledBadge error={plugin.error} />}\n        {hasUpdate && <PluginUpdateAvailableBadge plugin={plugin} />}\n        {plugin.angularDetected && <PluginAngularBadge />}\n      </HorizontalGroup>\n    );\n  }\n\n  return (\n    <HorizontalGroup height=\"auto\" wrap>\n      <PluginSignatureBadge status={plugin.signature} />\n      {plugin.isDisabled && <PluginDisabledBadge error={plugin.error} />}\n      {plugin.isDeprecated && <PluginDeprecatedBadge />}\n      {plugin.isInstalled && <PluginInstalledBadge />}\n      {hasUpdate && <PluginUpdateAvailableBadge plugin={plugin} />}\n      {plugin.angularDetected && <PluginAngularBadge />}\n    </HorizontalGroup>\n  );\n}\n","import React from 'react';\n\ntype PluginLogoProps = {\n  alt: string;\n  className?: string;\n  src: string;\n  height?: string | number;\n};\n\nexport function PluginLogo({ alt, className, src, height }: PluginLogoProps): React.ReactElement {\n  // @ts-ignore - react doesn't know about loading attr.\n  return <img src={src} className={className} alt={alt} loading=\"lazy\" height={height} />;\n}\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, useStyles2 } from '@grafana/ui';\n\nimport { CatalogPlugin, PluginIconName, PluginListDisplayMode } from '../types';\n\nimport { PluginListItemBadges } from './PluginListItemBadges';\nimport { PluginLogo } from './PluginLogo';\n\nexport const LOGO_SIZE = '48px';\n\ntype Props = {\n  plugin: CatalogPlugin;\n  pathName: string;\n  displayMode?: PluginListDisplayMode;\n};\n\nexport function PluginListItem({ plugin, pathName, displayMode = PluginListDisplayMode.Grid }: Props) {\n  const styles = useStyles2(getStyles);\n  const isList = displayMode === PluginListDisplayMode.List;\n\n  return (\n    <a href={`${pathName}/${plugin.id}`} className={cx(styles.container, { [styles.list]: isList })}>\n      <PluginLogo src={plugin.info.logos.small} className={styles.pluginLogo} height={LOGO_SIZE} alt=\"\" />\n      <h2 className={cx(styles.name, 'plugin-name')}>{plugin.name}</h2>\n      <div className={cx(styles.content, 'plugin-content')}>\n        <p>By {plugin.orgName}</p>\n        <PluginListItemBadges plugin={plugin} />\n      </div>\n      <div className={styles.pluginType}>\n        {plugin.type && <Icon name={PluginIconName[plugin.type]} title={`${plugin.type} plugin`} />}\n      </div>\n    </a>\n  );\n}\n\n// Styles shared between the different type of list items\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      display: grid;\n      grid-template-columns: ${LOGO_SIZE} 1fr ${theme.spacing(3)};\n      grid-template-rows: auto;\n      gap: ${theme.spacing(2)};\n      grid-auto-flow: row;\n      background: ${theme.colors.background.secondary};\n      border-radius: ${theme.shape.radius.default};\n      padding: ${theme.spacing(3)};\n      transition: ${theme.transitions.create(['background-color', 'box-shadow', 'border-color', 'color'], {\n        duration: theme.transitions.duration.short,\n      })};\n\n      &:hover {\n        background: ${theme.colors.emphasize(theme.colors.background.secondary, 0.03)};\n      }\n    `,\n    list: css`\n      row-gap: 0px;\n\n      > img {\n        align-self: start;\n      }\n\n      > .plugin-content {\n        min-height: 0px;\n        grid-area: 2 / 2 / 4 / 3;\n\n        > p {\n          margin: ${theme.spacing(0, 0, 0.5, 0)};\n        }\n      }\n\n      > .plugin-name {\n        align-self: center;\n        grid-area: 1 / 2 / 2 / 3;\n      }\n    `,\n    pluginType: css`\n      grid-area: 1 / 3 / 2 / 4;\n      color: ${theme.colors.text.secondary};\n    `,\n    pluginLogo: css`\n      grid-area: 1 / 1 / 3 / 2;\n      max-width: 100%;\n      align-self: center;\n      object-fit: contain;\n    `,\n    content: css`\n      grid-area: 3 / 1 / 4 / 3;\n      color: ${theme.colors.text.secondary};\n    `,\n    name: css`\n      grid-area: 1 / 2 / 3 / 3;\n      align-self: center;\n      font-size: ${theme.typography.h4.fontSize};\n      color: ${theme.colors.text.primary};\n      margin: 0;\n    `,\n  };\n};\n","import React from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { config } from '@grafana/runtime';\nimport { Grid } from '@grafana/ui/src/unstable';\n\nimport { CatalogPlugin, PluginListDisplayMode } from '../types';\n\nimport { PluginListItem } from './PluginListItem';\n\ninterface Props {\n  plugins: CatalogPlugin[];\n  displayMode: PluginListDisplayMode;\n}\n\nexport const PluginList = ({ plugins, displayMode }: Props) => {\n  const isList = displayMode === PluginListDisplayMode.List;\n  const { pathname } = useLocation();\n  const pathName = config.appSubUrl + (pathname.endsWith('/') ? pathname.slice(0, -1) : pathname);\n\n  return (\n    <Grid gap={3} columns={isList ? 1 : undefined} minColumnWidth={isList ? undefined : 34} data-testid=\"plugin-list\">\n      {plugins.map((plugin) => (\n        <PluginListItem key={plugin.id} plugin={plugin} pathName={pathName} displayMode={displayMode} />\n      ))}\n    </Grid>\n  );\n};\n","import React, { useState, useRef } from 'react';\nimport { useDebounce } from 'react-use';\n\nimport { FilterInput } from '@grafana/ui';\n\ninterface Props {\n  value?: string;\n  onSearch: (value: string) => void;\n}\n\n// useDebounce has a bug which causes it to fire on first render. This wrapper prevents that.\n// https://github.com/streamich/react-use/issues/759\nconst useDebounceWithoutFirstRender = (callBack: () => any, delay = 0, deps: React.DependencyList = []) => {\n  const isFirstRender = useRef(true);\n  const debounceDeps = [...deps, isFirstRender];\n\n  return useDebounce(\n    () => {\n      if (isFirstRender.current) {\n        isFirstRender.current = false;\n        return;\n      }\n      return callBack();\n    },\n    delay,\n    debounceDeps\n  );\n};\n\nexport const SearchField = ({ value, onSearch }: Props) => {\n  const [query, setQuery] = useState(value);\n\n  useDebounceWithoutFirstRender(() => onSearch(query ?? ''), 500, [query]);\n\n  return (\n    <FilterInput\n      value={query}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter' || e.keyCode === 13) {\n          onSearch(e.currentTarget.value);\n        }\n      }}\n      placeholder=\"Search Grafana plugins\"\n      onChange={(value) => {\n        setQuery(value);\n      }}\n      width={46}\n    />\n  );\n};\n","import { locationService } from '@grafana/runtime';\n\nexport const useHistory = () => {\n  return {\n    push: ({ query }: any) => {\n      locationService.partial(query);\n    },\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { ReactElement } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { SelectableValue, GrafanaTheme2, PluginType } from '@grafana/data';\nimport { locationSearchToObject } from '@grafana/runtime';\nimport { LoadingPlaceholder, Select, RadioButtonGroup, useStyles2, Tooltip, Field } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { ROUTES as CONNECTIONS_ROUTES } from 'app/features/connections/constants';\nimport { useSelector } from 'app/types';\n\nimport { HorizontalGroup } from '../components/HorizontalGroup';\nimport { PluginList } from '../components/PluginList';\nimport { SearchField } from '../components/SearchField';\nimport { Sorters } from '../helpers';\nimport { useHistory } from '../hooks/useHistory';\nimport { useGetAll, useIsRemotePluginsAvailable, useDisplayMode } from '../state/hooks';\nimport { PluginListDisplayMode } from '../types';\n\nexport default function Browse({ route }: GrafanaRouteComponentProps): ReactElement | null {\n  const location = useLocation();\n  const locationSearch = locationSearchToObject(location.search);\n  const navModel = useSelector((state) => getNavModel(state.navIndex, 'plugins'));\n  const { displayMode, setDisplayMode } = useDisplayMode();\n  const styles = useStyles2(getStyles);\n  const history = useHistory();\n  const remotePluginsAvailable = useIsRemotePluginsAvailable();\n  const keyword = locationSearch.q?.toString() || '';\n  const filterBy = locationSearch.filterBy?.toString() || 'installed';\n  const filterByType = (locationSearch.filterByType as PluginType | 'all') || 'all';\n  const sortBy = (locationSearch.sortBy as Sorters) || Sorters.nameAsc;\n  const { isLoading, error, plugins } = useGetAll(\n    {\n      keyword,\n      type: filterByType !== 'all' ? filterByType : undefined,\n      isInstalled: filterBy === 'installed' ? true : undefined,\n      isCore: filterBy === 'installed' ? undefined : false, // We only would like to show core plugins when the user filters to installed plugins\n    },\n    sortBy\n  );\n  const filterByOptions = [\n    { value: 'all', label: 'All' },\n    { value: 'installed', label: 'Installed' },\n  ];\n\n  const onSortByChange = (value: SelectableValue<string>) => {\n    history.push({ query: { sortBy: value.value } });\n  };\n\n  const onFilterByChange = (value: string) => {\n    history.push({ query: { filterBy: value } });\n  };\n\n  const onFilterByTypeChange = (value: SelectableValue<string>) => {\n    history.push({ query: { filterByType: value.value } });\n  };\n\n  const onSearch = (q: string) => {\n    history.push({ query: { filterBy, filterByType, q } });\n  };\n\n  // How should we handle errors?\n  if (error) {\n    console.error(error.message);\n    return null;\n  }\n\n  const subTitle = (\n    <div>\n      Extend the Grafana experience with panel plugins and apps. To find more data sources go to{' '}\n      <a className=\"external-link\" href={`${CONNECTIONS_ROUTES.AddNewConnection}?cat=data-source`}>\n        Connections\n      </a>\n      .\n    </div>\n  );\n\n  return (\n    <Page navModel={navModel} subTitle={subTitle}>\n      <Page.Contents>\n        <HorizontalGroup wrap>\n          <Field label=\"Search\">\n            <SearchField value={keyword} onSearch={onSearch} />\n          </Field>\n          <HorizontalGroup wrap className={styles.actionBar}>\n            {/* Filter by type */}\n            <Field label=\"Type\">\n              <Select\n                aria-label=\"Plugin type filter\"\n                value={filterByType}\n                onChange={onFilterByTypeChange}\n                width={18}\n                options={[\n                  { value: 'all', label: 'All' },\n                  { value: 'datasource', label: 'Data sources' },\n                  { value: 'panel', label: 'Panels' },\n                  { value: 'app', label: 'Applications' },\n                ]}\n              />\n            </Field>\n\n            {/* Filter by installed / all */}\n            {remotePluginsAvailable ? (\n              <Field label=\"State\">\n                <RadioButtonGroup value={filterBy} onChange={onFilterByChange} options={filterByOptions} />\n              </Field>\n            ) : (\n              <Tooltip\n                content=\"This filter has been disabled because the Grafana server cannot access grafana.com\"\n                placement=\"top\"\n              >\n                <div>\n                  <Field label=\"State\">\n                    <RadioButtonGroup\n                      disabled={true}\n                      value={filterBy}\n                      onChange={onFilterByChange}\n                      options={filterByOptions}\n                    />\n                  </Field>\n                </div>\n              </Tooltip>\n            )}\n\n            {/* Sorting */}\n            <Field label=\"Sort\">\n              <Select\n                aria-label=\"Sort Plugins List\"\n                width={24}\n                value={sortBy}\n                onChange={onSortByChange}\n                options={[\n                  { value: 'nameAsc', label: 'By name (A-Z)' },\n                  { value: 'nameDesc', label: 'By name (Z-A)' },\n                  { value: 'updated', label: 'By updated date' },\n                  { value: 'published', label: 'By published date' },\n                  { value: 'downloads', label: 'By downloads' },\n                ]}\n              />\n            </Field>\n\n            {/* Display mode */}\n            <Field label=\"View\">\n              <RadioButtonGroup<PluginListDisplayMode>\n                className={styles.displayAs}\n                value={displayMode}\n                onChange={setDisplayMode}\n                options={[\n                  {\n                    value: PluginListDisplayMode.Grid,\n                    icon: 'table',\n                    description: 'Display plugins in a grid layout',\n                  },\n                  { value: PluginListDisplayMode.List, icon: 'list-ul', description: 'Display plugins in list' },\n                ]}\n              />\n            </Field>\n          </HorizontalGroup>\n        </HorizontalGroup>\n        <div className={styles.listWrap}>\n          {isLoading ? (\n            <LoadingPlaceholder\n              className={css`\n                margin-bottom: 0;\n              `}\n              text=\"Loading results\"\n            />\n          ) : (\n            <PluginList plugins={plugins} displayMode={displayMode} />\n          )}\n        </div>\n      </Page.Contents>\n    </Page>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  actionBar: css`\n    ${theme.breakpoints.up('xl')} {\n      margin-left: auto;\n    }\n  `,\n  listWrap: css`\n    margin-top: ${theme.spacing(2)};\n  `,\n  displayAs: css`\n    svg {\n      margin-right: 0;\n    }\n  `,\n});\n","import { createSelector } from '@reduxjs/toolkit';\n\nimport { PluginError, PluginType, unEscapeStringFromRegex } from '@grafana/data';\n\nimport { RequestStatus, PluginCatalogStoreState } from '../types';\n\nimport { pluginsAdapter } from './reducer';\n\nexport const selectRoot = (state: PluginCatalogStoreState) => state.plugins;\n\nexport const selectItems = createSelector(selectRoot, ({ items }) => items);\n\nexport const selectDisplayMode = createSelector(selectRoot, ({ settings }) => settings.displayMode);\n\nexport const { selectAll, selectById } = pluginsAdapter.getSelectors(selectItems);\n\nexport type PluginFilters = {\n  // Searches for a string in certain fields (e.g. \"name\" or \"orgName\")\n  // (Note: this will be an escaped regex string as it comes from `FilterInput`)\n  keyword?: string;\n\n  // (Optional, only applied if set)\n  type?: PluginType;\n\n  // (Optional, only applied if set)\n  isCore?: boolean;\n\n  // (Optional, only applied if set)\n  isInstalled?: boolean;\n\n  // (Optional, only applied if set)\n  isEnterprise?: boolean;\n};\n\nexport const selectPlugins = (filters: PluginFilters) =>\n  createSelector(selectAll, (plugins) => {\n    const keyword = filters.keyword ? unEscapeStringFromRegex(filters.keyword.toLowerCase()) : '';\n\n    return plugins.filter((plugin) => {\n      const fieldsToSearchIn = [plugin.name, plugin.orgName].filter(Boolean).map((f) => f.toLowerCase());\n\n      if (keyword && !fieldsToSearchIn.some((f) => f.includes(keyword))) {\n        return false;\n      }\n\n      if (filters.type && plugin.type !== filters.type) {\n        return false;\n      }\n\n      if (filters.isInstalled !== undefined && plugin.isInstalled !== filters.isInstalled) {\n        return false;\n      }\n\n      if (filters.isCore !== undefined && plugin.isCore !== filters.isCore) {\n        return false;\n      }\n\n      if (filters.isEnterprise !== undefined && plugin.isEnterprise !== filters.isEnterprise) {\n        return false;\n      }\n\n      return true;\n    });\n  });\n\nexport const selectPluginErrors = (filterByPluginType?: PluginType) =>\n  createSelector(selectAll, (plugins) => {\n    const pluginErrors: PluginError[] = [];\n    for (const plugin of plugins) {\n      if (plugin.error && (!filterByPluginType || plugin.type === filterByPluginType)) {\n        pluginErrors.push({\n          pluginId: plugin.id,\n          errorCode: plugin.error,\n          pluginType: plugin.type,\n        });\n      }\n    }\n    return pluginErrors;\n  });\n\n// The following selectors are used to get information about the outstanding or completed plugins-related network requests.\nexport const selectRequest = (actionType: string) =>\n  createSelector(selectRoot, ({ requests = {} }) => requests[actionType]);\n\nexport const selectIsRequestPending = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) => request?.status === RequestStatus.Pending);\n\nexport const selectRequestError = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) =>\n    request?.status === RequestStatus.Rejected ? request?.error : null\n  );\n\nexport const selectIsRequestNotFetched = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) => request === undefined);\n","import { useEffect, useMemo } from 'react';\n\nimport { PluginError, PluginType } from '@grafana/data';\nimport { useDispatch, useSelector } from 'app/types';\n\nimport { sortPlugins, Sorters } from '../helpers';\nimport { CatalogPlugin, PluginListDisplayMode } from '../types';\n\nimport { fetchAll, fetchDetails, fetchRemotePlugins, install, uninstall, fetchAllLocal, unsetInstall } from './actions';\nimport { setDisplayMode } from './reducer';\nimport {\n  selectPlugins,\n  selectById,\n  selectIsRequestPending,\n  selectRequestError,\n  selectIsRequestNotFetched,\n  selectDisplayMode,\n  selectPluginErrors,\n  type PluginFilters,\n} from './selectors';\n\nexport const useGetAll = (filters: PluginFilters, sortBy: Sorters = Sorters.nameAsc) => {\n  useFetchAll();\n\n  const selector = useMemo(() => selectPlugins(filters), [filters]);\n  const plugins = useSelector(selector);\n  // As the locally installed plugins load quicker than the remote ones, we only show a loading state until these are being loaded\n  // (In case the remote ones are not loaded within a reasonable timeout, we will merge those with the locally installed plugins once they are loaded)\n  const { isLoading, error } = useLocalFetchStatus();\n  const sortedPlugins = sortPlugins(plugins, sortBy);\n\n  return {\n    isLoading,\n    error,\n    plugins: sortedPlugins,\n  };\n};\n\nexport const useGetSingle = (id: string): CatalogPlugin | undefined => {\n  useFetchAll();\n  useFetchDetails(id);\n\n  return useSelector((state) => selectById(state, id));\n};\n\nexport const useGetSingleLocalWithoutDetails = (id: string): CatalogPlugin | undefined => {\n  useFetchAllLocal();\n  return useSelector((state) => selectById(state, id));\n};\n\nexport const useGetErrors = (filterByPluginType?: PluginType): PluginError[] => {\n  useFetchAll();\n\n  return useSelector(selectPluginErrors(filterByPluginType));\n};\n\nexport const useInstall = () => {\n  const dispatch = useDispatch();\n  return (id: string, version?: string, isUpdating?: boolean) => dispatch(install({ id, version, isUpdating }));\n};\n\nexport const useUnsetInstall = () => {\n  const dispatch = useDispatch();\n\n  return () => dispatch(unsetInstall());\n};\n\nexport const useUninstall = () => {\n  const dispatch = useDispatch();\n\n  return (id: string) => dispatch(uninstall(id));\n};\n\nexport const useIsRemotePluginsAvailable = () => {\n  const error = useSelector(selectRequestError(fetchRemotePlugins.typePrefix));\n  return error === null;\n};\n\nexport const useLocalFetchStatus = () => {\n  const isLoading = useSelector(selectIsRequestPending('plugins/fetchLocal'));\n  const error = useSelector(selectRequestError('plugins/fetchLocal'));\n\n  return { isLoading, error };\n};\n\nexport const useFetchStatus = () => {\n  const isLoading = useSelector(selectIsRequestPending(fetchAll.typePrefix));\n  const error = useSelector(selectRequestError(fetchAll.typePrefix));\n\n  return { isLoading, error };\n};\n\nexport const useFetchDetailsStatus = () => {\n  const isLoading = useSelector(selectIsRequestPending(fetchDetails.typePrefix));\n  const error = useSelector(selectRequestError(fetchDetails.typePrefix));\n\n  return { isLoading, error };\n};\n\nexport const useInstallStatus = () => {\n  const isInstalling = useSelector(selectIsRequestPending(install.typePrefix));\n  const error = useSelector(selectRequestError(install.typePrefix));\n\n  return { isInstalling, error };\n};\n\nexport const useUninstallStatus = () => {\n  const isUninstalling = useSelector(selectIsRequestPending(uninstall.typePrefix));\n  const error = useSelector(selectRequestError(uninstall.typePrefix));\n\n  return { isUninstalling, error };\n};\n\n// Only fetches in case they were not fetched yet\nexport const useFetchAll = () => {\n  const dispatch = useDispatch();\n  const isNotFetched = useSelector(selectIsRequestNotFetched(fetchAll.typePrefix));\n\n  useEffect(() => {\n    isNotFetched && dispatch(fetchAll());\n  }, []); // eslint-disable-line\n};\n\n// Only fetches in case they were not fetched yet\nexport const useFetchAllLocal = () => {\n  const dispatch = useDispatch();\n  const isNotFetched = useSelector(selectIsRequestNotFetched(fetchAllLocal.typePrefix));\n\n  useEffect(() => {\n    isNotFetched && dispatch(fetchAllLocal());\n  }, []); // eslint-disable-line\n};\n\nexport const useFetchDetails = (id: string) => {\n  const dispatch = useDispatch();\n  const plugin = useSelector((state) => selectById(state, id));\n  const isNotFetching = !useSelector(selectIsRequestPending(fetchDetails.typePrefix));\n  const shouldFetch = isNotFetching && plugin && !plugin.details;\n\n  useEffect(() => {\n    shouldFetch && dispatch(fetchDetails(id));\n  }, [plugin]); // eslint-disable-line\n};\n\nexport const useFetchDetailsLazy = () => {\n  const dispatch = useDispatch();\n\n  return (id: string) => dispatch(fetchDetails(id));\n};\n\nexport const useDisplayMode = () => {\n  const dispatch = useDispatch();\n  const displayMode = useSelector(selectDisplayMode);\n\n  return {\n    displayMode,\n    setDisplayMode: (v: PluginListDisplayMode) => dispatch(setDisplayMode(v)),\n  };\n};\n"],"names":["Grid","props","ref","children","gap","columns","minColumnWidth","rest","styles","getGridStyles","theme","PluginDisabledBadge","error","tooltip","errorCodeToTooltip","Badge","getBadgeColor","PluginInstalledBadge","customBadgeStyles","PluginEnterpriseBadge","plugin","onClick","ev","PluginSignatureBadge","Button","PluginUpdateAvailableBadge","getStyles","PluginAngularBadge","PluginDeprecatedBadge","PluginListItemBadges","hasUpdate","PluginLogo","alt","className","src","height","LOGO_SIZE","PluginListItem","pathName","displayMode","isList","Icon","PluginList","plugins","pathname","config","useDebounceWithoutFirstRender","callBack","delay","deps","isFirstRender","debounceDeps","useDebounce","SearchField","value","onSearch","query","setQuery","FilterInput","e","useHistory","Browse","route","location","locationSearch","navModel","state","setDisplayMode","history","remotePluginsAvailable","keyword","filterBy","filterByType","sortBy","isLoading","filterByOptions","onSortByChange","onFilterByChange","onFilterByTypeChange","q","subTitle","Page","HorizontalGroup","Field","Select","RadioButtonGroup","Tooltip","LoadingPlaceholder","selectRoot","selectItems","items","selectDisplayMode","settings","selectAll","selectPlugins","filters","fieldsToSearchIn","f","selectPluginErrors","filterByPluginType","pluginErrors","selectRequest","actionType","requests","selectIsRequestPending","request","selectRequestError","useGetAll","useFetchAll","selector","useLocalFetchStatus","sortedPlugins","useGetSingle","id","useFetchDetails","useGetSingleLocalWithoutDetails","useFetchAllLocal","useGetErrors","useInstall","dispatch","version","isUpdating","useUnsetInstall","useUninstall","useIsRemotePluginsAvailable","useFetchStatus","useFetchDetailsStatus","useInstallStatus","isInstalling","useUninstallStatus","isUninstalling","isNotFetched","shouldFetch","useFetchDetailsLazy","useDisplayMode","v"],"sourceRoot":""}