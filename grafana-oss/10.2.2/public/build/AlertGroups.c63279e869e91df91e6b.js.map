{"version":3,"file":"AlertGroups.c63279e869e91df91e6b.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertStateFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/GroupBy.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroupFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useFilteredAmGroups.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useGroupedAlerts.ts","webpack://grafana/./public/app/features/alerting/unified/AlertGroups.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Authorize.tsx","webpack://grafana/./public/app/features/alerting/unified/components/DynamicTableWithGuidelines.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertDetails.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroupAlertsTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroup.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/AmAlertStateTag.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAbilities.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { RadioButtonGroup, Label, useStyles2 } from '@grafana/ui';\nimport { AlertState } from 'app/plugins/datasource/alertmanager/types';\n\ninterface Props {\n  stateFilter?: AlertState;\n  onStateFilterChange: (value: AlertState) => void;\n}\n\nexport const AlertStateFilter = ({ onStateFilterChange, stateFilter }: Props) => {\n  const styles = useStyles2(getStyles);\n  const alertStateOptions: SelectableValue[] = Object.entries(AlertState)\n    .sort(([labelA], [labelB]) => (labelA < labelB ? -1 : 1))\n    .map(([label, state]) => ({\n      label,\n      value: state,\n    }));\n\n  return (\n    <div className={styles.wrapper}>\n      <Label>State</Label>\n      <RadioButtonGroup options={alertStateOptions} value={stateFilter} onChange={onStateFilterChange} />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    margin-left: ${theme.spacing(1)};\n  `,\n});\n","import { uniq } from 'lodash';\nimport React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Icon, Label, MultiSelect } from '@grafana/ui';\nimport { AlertmanagerGroup } from 'app/plugins/datasource/alertmanager/types';\n\ninterface Props {\n  className?: string;\n  groups: AlertmanagerGroup[];\n  groupBy: string[];\n  onGroupingChange: (keys: string[]) => void;\n}\n\nexport const GroupBy = ({ className, groups, groupBy, onGroupingChange }: Props) => {\n  const labelKeyOptions = uniq(groups.flatMap((group) => group.alerts).flatMap(({ labels }) => Object.keys(labels)))\n    .filter((label) => !(label.startsWith('__') && label.endsWith('__'))) // Filter out private labels\n    .map<SelectableValue>((key) => ({\n      label: key,\n      value: key,\n    }));\n\n  return (\n    <div data-testid={'group-by-container'} className={className}>\n      <Label>Custom group by</Label>\n      <MultiSelect\n        aria-label={'group by label keys'}\n        value={groupBy}\n        placeholder=\"Group by\"\n        prefix={<Icon name={'tag-alt'} />}\n        onChange={(items) => {\n          onGroupingChange(items.map(({ value }) => value as string));\n        }}\n        options={labelKeyOptions}\n      />\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { AlertmanagerGroup, AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { getFiltersFromUrlParams } from '../../utils/misc';\n\nimport { AlertStateFilter } from './AlertStateFilter';\nimport { GroupBy } from './GroupBy';\nimport { MatcherFilter } from './MatcherFilter';\n\ninterface Props {\n  groups: AlertmanagerGroup[];\n}\n\nexport const AlertGroupFilter = ({ groups }: Props) => {\n  const [filterKey, setFilterKey] = useState<number>(Math.floor(Math.random() * 100));\n  const [queryParams, setQueryParams] = useQueryParams();\n  const { groupBy = [], queryString, alertState } = getFiltersFromUrlParams(queryParams);\n  const matcherFilterKey = `matcher-${filterKey}`;\n\n  const styles = useStyles2(getStyles);\n\n  const clearFilters = () => {\n    setQueryParams({\n      groupBy: null,\n      queryString: null,\n      alertState: null,\n    });\n    setTimeout(() => setFilterKey(filterKey + 1), 100);\n  };\n\n  const showClearButton = !!(groupBy.length > 0 || queryString || alertState);\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.filterSection}>\n        <MatcherFilter\n          className={styles.filterInput}\n          key={matcherFilterKey}\n          defaultQueryString={queryString}\n          onFilterChange={(value) => setQueryParams({ queryString: value ? value : null })}\n        />\n        <GroupBy\n          className={styles.filterInput}\n          groups={groups}\n          groupBy={groupBy}\n          onGroupingChange={(keys) => setQueryParams({ groupBy: keys.length ? keys.join(',') : null })}\n        />\n        <AlertStateFilter\n          stateFilter={alertState as AlertState}\n          onStateFilterChange={(value) => setQueryParams({ alertState: value ? value : null })}\n        />\n        {showClearButton && (\n          <Button className={styles.clearButton} variant={'secondary'} icon=\"times\" onClick={clearFilters}>\n            Clear filters\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    border-bottom: 1px solid ${theme.colors.border.medium};\n    margin-bottom: ${theme.spacing(3)};\n  `,\n  filterSection: css`\n    display: flex;\n    flex-direction: row;\n    margin-bottom: ${theme.spacing(3)};\n  `,\n  filterInput: css`\n    width: 340px;\n    & + & {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  clearButton: css`\n    margin-left: ${theme.spacing(1)};\n    margin-top: 19px;\n  `,\n});\n","import { useMemo } from 'react';\n\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { AlertmanagerGroup } from 'app/plugins/datasource/alertmanager/types';\n\nimport { labelsMatchMatchers, parseMatchers } from '../utils/alertmanager';\nimport { getFiltersFromUrlParams } from '../utils/misc';\n\nexport const useFilteredAmGroups = (groups: AlertmanagerGroup[]) => {\n  const [queryParams] = useQueryParams();\n  const filters = getFiltersFromUrlParams(queryParams);\n  const matchers = parseMatchers(filters.queryString || '');\n\n  return useMemo(() => {\n    return groups.reduce((filteredGroup: AlertmanagerGroup[], group) => {\n      const alerts = group.alerts.filter(({ labels, status }) => {\n        const labelsMatch = labelsMatchMatchers(labels, matchers);\n        const filtersMatch = filters.alertState ? status.state === filters.alertState : true;\n        return labelsMatch && filtersMatch;\n      });\n      if (alerts.length > 0) {\n        // The ungrouped alerts should be first in the results\n        if (Object.keys(group.labels).length === 0) {\n          filteredGroup.unshift({ ...group, alerts });\n        } else {\n          filteredGroup.push({ ...group, alerts });\n        }\n      }\n      return filteredGroup;\n    }, []);\n  }, [groups, filters, matchers]);\n};\n","import { uniqBy } from 'lodash';\nimport { useMemo } from 'react';\n\nimport { Labels } from '@grafana/data';\nimport { AlertmanagerGroup } from 'app/plugins/datasource/alertmanager/types';\n\nexport const useGroupedAlerts = (groups: AlertmanagerGroup[], groupBy: string[]): AlertmanagerGroup[] => {\n  return useMemo(() => {\n    if (groupBy.length === 0) {\n      const emptyGroupings = groups.filter((group) => Object.keys(group.labels).length === 0);\n      if (emptyGroupings.length > 1) {\n        // Merges multiple ungrouped grouping\n        return groups.reduce<AlertmanagerGroup[]>((combinedGroups, group) => {\n          if (Object.keys(group.labels).length === 0) {\n            const noGroupingGroup = combinedGroups.find(({ labels }) => Object.keys(labels));\n            if (!noGroupingGroup) {\n              combinedGroups.push({ alerts: group.alerts, labels: {}, receiver: { name: 'NONE' } });\n            } else {\n              noGroupingGroup.alerts = uniqBy([...noGroupingGroup.alerts, ...group.alerts], 'labels');\n            }\n          } else {\n            combinedGroups.push(group);\n          }\n          return combinedGroups;\n        }, []);\n      } else {\n        return groups;\n      }\n    }\n    const alerts = groups.flatMap(({ alerts }) => alerts);\n    return alerts.reduce<AlertmanagerGroup[]>((groupings, alert) => {\n      const alertContainsGroupings = groupBy.every((groupByLabel) => Object.keys(alert.labels).includes(groupByLabel));\n\n      if (alertContainsGroupings) {\n        const existingGrouping = groupings.find((group) => {\n          return groupBy.every((groupKey) => {\n            return group.labels[groupKey] === alert.labels[groupKey];\n          });\n        });\n        if (!existingGrouping) {\n          const labels = groupBy.reduce<Labels>((acc, key) => {\n            acc = { ...acc, [key]: alert.labels[key] };\n            return acc;\n          }, {});\n          groupings.push({\n            alerts: [alert],\n            labels,\n            receiver: {\n              name: 'NONE',\n            },\n          });\n        } else {\n          existingGrouping.alerts.push(alert);\n        }\n      } else {\n        const noGroupingGroup = groupings.find((group) => Object.keys(group.labels).length === 0);\n        if (!noGroupingGroup) {\n          groupings.push({ alerts: [alert], labels: {}, receiver: { name: 'NONE' } });\n        } else {\n          noGroupingGroup.alerts.push(alert);\n        }\n      }\n\n      return groupings;\n    }, []);\n  }, [groups, groupBy]);\n};\n","import { css } from '@emotion/css';\nimport React, { useEffect } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, LoadingPlaceholder, useStyles2 } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { useDispatch } from 'app/types';\n\nimport { AlertmanagerChoice } from '../../../plugins/datasource/alertmanager/types';\n\nimport { alertmanagerApi } from './api/alertmanagerApi';\nimport { AlertmanagerPageWrapper } from './components/AlertingPageWrapper';\nimport { AlertGroup } from './components/alert-groups/AlertGroup';\nimport { AlertGroupFilter } from './components/alert-groups/AlertGroupFilter';\nimport { useFilteredAmGroups } from './hooks/useFilteredAmGroups';\nimport { useGroupedAlerts } from './hooks/useGroupedAlerts';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { useAlertmanager } from './state/AlertmanagerContext';\nimport { fetchAlertGroupsAction } from './state/actions';\nimport { NOTIFICATIONS_POLL_INTERVAL_MS } from './utils/constants';\nimport { GRAFANA_RULES_SOURCE_NAME } from './utils/datasource';\nimport { getFiltersFromUrlParams } from './utils/misc';\nimport { initialAsyncRequestState } from './utils/redux';\n\nconst AlertGroups = () => {\n  const { useGetAlertmanagerChoiceStatusQuery } = alertmanagerApi;\n\n  const { selectedAlertmanager } = useAlertmanager();\n  const dispatch = useDispatch();\n  const [queryParams] = useQueryParams();\n  const { groupBy = [] } = getFiltersFromUrlParams(queryParams);\n  const styles = useStyles2(getStyles);\n\n  const { currentData: amConfigStatus } = useGetAlertmanagerChoiceStatusQuery();\n\n  const alertGroups = useUnifiedAlertingSelector((state) => state.amAlertGroups);\n  const { loading, error, result: results = [] } = alertGroups[selectedAlertmanager || ''] ?? initialAsyncRequestState;\n\n  const groupedAlerts = useGroupedAlerts(results, groupBy);\n  const filteredAlertGroups = useFilteredAmGroups(groupedAlerts);\n\n  const grafanaAmDeliveryDisabled =\n    selectedAlertmanager === GRAFANA_RULES_SOURCE_NAME &&\n    amConfigStatus?.alertmanagersChoice === AlertmanagerChoice.External;\n\n  useEffect(() => {\n    function fetchNotifications() {\n      if (selectedAlertmanager) {\n        dispatch(fetchAlertGroupsAction(selectedAlertmanager));\n      }\n    }\n    fetchNotifications();\n    const interval = setInterval(fetchNotifications, NOTIFICATIONS_POLL_INTERVAL_MS);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [dispatch, selectedAlertmanager]);\n\n  return (\n    <>\n      <AlertGroupFilter groups={results} />\n      {loading && <LoadingPlaceholder text=\"Loading notifications\" />}\n      {error && !loading && (\n        <Alert title={'Error loading notifications'} severity={'error'}>\n          {error.message || 'Unknown error'}\n        </Alert>\n      )}\n\n      {grafanaAmDeliveryDisabled && (\n        <Alert title=\"Grafana alerts are not delivered to Grafana Alertmanager\">\n          Grafana is configured to send alerts to external alertmanagers only. No alerts are expected to be available\n          here for the selected Alertmanager.\n        </Alert>\n      )}\n\n      {results &&\n        filteredAlertGroups.map((group, index) => {\n          return (\n            <React.Fragment key={`${JSON.stringify(group.labels)}-group-${index}`}>\n              {((index === 1 && Object.keys(filteredAlertGroups[0].labels).length === 0) ||\n                (index === 0 && Object.keys(group.labels).length > 0)) && (\n                <p className={styles.groupingBanner}>Grouped by: {Object.keys(group.labels).join(', ')}</p>\n              )}\n              <AlertGroup alertManagerSourceName={selectedAlertmanager || ''} group={group} />\n            </React.Fragment>\n          );\n        })}\n      {results && !filteredAlertGroups.length && <p>No results.</p>}\n    </>\n  );\n};\n\nconst AlertGroupsPage = () => (\n  <AlertmanagerPageWrapper pageId=\"groups\" accessType=\"instance\">\n    <AlertGroups />\n  </AlertmanagerPageWrapper>\n);\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  groupingBanner: css`\n    margin: ${theme.spacing(2, 0)};\n  `,\n});\n\nexport default AlertGroupsPage;\n","import { chain, filter } from 'lodash';\nimport React, { PropsWithChildren } from 'react';\n\nimport {\n  Abilities,\n  Action,\n  AlertmanagerAction,\n  AlertSourceAction,\n  useAlertSourceAbilities,\n  useAllAlertmanagerAbilities,\n} from '../hooks/useAbilities';\n\ninterface AuthorizeProps extends PropsWithChildren {\n  actions: AlertmanagerAction[] | AlertSourceAction[];\n}\n\nexport const Authorize = ({ actions, children }: AuthorizeProps) => {\n  const alertmanagerActions = filter(actions, isAlertmanagerAction) as AlertmanagerAction[];\n  const alertSourceActions = filter(actions, isAlertSourceAction) as AlertSourceAction[];\n\n  if (alertmanagerActions.length) {\n    return <AuthorizeAlertmanager actions={alertmanagerActions}>{children}</AuthorizeAlertmanager>;\n  }\n\n  if (alertSourceActions.length) {\n    return <AuthorizeAlertsource actions={alertSourceActions}>{children}</AuthorizeAlertsource>;\n  }\n\n  return null;\n};\n\ninterface ActionsProps<T extends Action> extends PropsWithChildren {\n  actions: T[];\n}\n\nconst AuthorizeAlertmanager = ({ actions, children }: ActionsProps<AlertmanagerAction>) => {\n  const alertmanagerAbilties = useAllAlertmanagerAbilities();\n  const allowed = actionsAllowed(alertmanagerAbilties, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\nconst AuthorizeAlertsource = ({ actions, children }: ActionsProps<AlertSourceAction>) => {\n  const alertSourceAbilities = useAlertSourceAbilities();\n  const allowed = actionsAllowed(alertSourceAbilities, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\n// check if some action is allowed from the abilities\nfunction actionsAllowed<T extends Action>(abilities: Abilities<T>, actions: T[]) {\n  return chain(abilities)\n    .pick(actions)\n    .values()\n    .value()\n    .some(([_supported, allowed]) => allowed === true);\n}\n\nfunction isAlertmanagerAction(action: AlertmanagerAction) {\n  return Object.values(AlertmanagerAction).includes(action);\n}\n\nfunction isAlertSourceAction(action: AlertSourceAction) {\n  return Object.values(AlertSourceAction).includes(action);\n}\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { DynamicTable, DynamicTableProps } from './DynamicTable';\n\nexport type DynamicTableWithGuidelinesProps<T> = Omit<DynamicTableProps<T>, 'renderPrefixHeader, renderPrefixCell'>;\n\n// DynamicTable, but renders visual guidelines on the left, for larger screen widths\nexport const DynamicTableWithGuidelines = <T extends object>({\n  renderExpandedContent,\n  ...props\n}: DynamicTableWithGuidelinesProps<T>) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <DynamicTable\n      renderExpandedContent={\n        renderExpandedContent\n          ? (item, index, items) => (\n              <>\n                {!(index === items.length - 1) && <div className={cx(styles.contentGuideline, styles.guideline)} />}\n                {renderExpandedContent(item, index, items)}\n              </>\n            )\n          : undefined\n      }\n      renderPrefixHeader={() => (\n        <div className={styles.relative}>\n          <div className={cx(styles.headerGuideline, styles.guideline)} />\n        </div>\n      )}\n      renderPrefixCell={(_, index, items) => (\n        <div className={styles.relative}>\n          <div className={cx(styles.topGuideline, styles.guideline)} />\n          {!(index === items.length - 1) && <div className={cx(styles.bottomGuideline, styles.guideline)} />}\n        </div>\n      )}\n      {...props}\n    />\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  relative: css`\n    position: relative;\n    height: 100%;\n  `,\n  guideline: css`\n    left: -19px;\n    border-left: 1px solid ${theme.colors.border.weak};\n    position: absolute;\n\n    ${theme.breakpoints.down('md')} {\n      display: none;\n    }\n  `,\n  topGuideline: css`\n    width: 18px;\n    border-bottom: 1px solid ${theme.colors.border.medium};\n    top: 0;\n    bottom: 50%;\n  `,\n  bottomGuideline: css`\n    top: 50%;\n    bottom: 0;\n  `,\n  contentGuideline: css`\n    top: 0;\n    bottom: 0;\n    left: -49px !important;\n  `,\n  headerGuideline: css`\n    top: -17px;\n    bottom: 0;\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { LinkButton, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AlertmanagerAlert, AlertState } from 'app/plugins/datasource/alertmanager/types';\nimport { AccessControlAction } from 'app/types';\n\nimport { AlertmanagerAction } from '../../hooks/useAbilities';\nimport { isGrafanaRulesSource } from '../../utils/datasource';\nimport { makeAMLink, makeLabelBasedSilenceLink } from '../../utils/misc';\nimport { AnnotationDetailsField } from '../AnnotationDetailsField';\nimport { Authorize } from '../Authorize';\n\ninterface AmNotificationsAlertDetailsProps {\n  alertManagerSourceName: string;\n  alert: AlertmanagerAlert;\n}\n\nexport const AlertDetails = ({ alert, alertManagerSourceName }: AmNotificationsAlertDetailsProps) => {\n  const styles = useStyles2(getStyles);\n\n  // For Grafana Managed alerts the Generator URL redirects to the alert rule edit page, so update permission is required\n  // For external alert manager the Generator URL redirects to an external service which we don't control\n  const isGrafanaSource = isGrafanaRulesSource(alertManagerSourceName);\n  const isSeeSourceButtonEnabled = isGrafanaSource\n    ? contextSrv.hasPermission(AccessControlAction.AlertingRuleRead)\n    : true;\n\n  return (\n    <>\n      <div className={styles.actionsRow}>\n        {alert.status.state === AlertState.Suppressed && (\n          <Authorize actions={[AlertmanagerAction.CreateSilence, AlertmanagerAction.UpdateSilence]}>\n            <LinkButton\n              href={`${makeAMLink(\n                '/alerting/silences',\n                alertManagerSourceName\n              )}&silenceIds=${alert.status.silencedBy.join(',')}`}\n              className={styles.button}\n              icon={'bell'}\n              size={'sm'}\n            >\n              Manage silences\n            </LinkButton>\n          </Authorize>\n        )}\n        {alert.status.state === AlertState.Active && (\n          <Authorize actions={[AlertmanagerAction.CreateSilence]}>\n            <LinkButton\n              href={makeLabelBasedSilenceLink(alertManagerSourceName, alert.labels)}\n              className={styles.button}\n              icon={'bell-slash'}\n              size={'sm'}\n            >\n              Silence\n            </LinkButton>\n          </Authorize>\n        )}\n        {isSeeSourceButtonEnabled && alert.generatorURL && (\n          <LinkButton className={styles.button} href={alert.generatorURL} icon={'chart-line'} size={'sm'}>\n            See source\n          </LinkButton>\n        )}\n      </div>\n      {Object.entries(alert.annotations).map(([annotationKey, annotationValue]) => (\n        <AnnotationDetailsField key={annotationKey} annotationKey={annotationKey} value={annotationValue} />\n      ))}\n      <div className={styles.receivers}>\n        Receivers:{' '}\n        {alert.receivers\n          .map(({ name }) => name)\n          .filter((name) => !!name)\n          .join(', ')}\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  button: css`\n    & + & {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  actionsRow: css`\n    padding: ${theme.spacing(2, 0)} !important;\n    border-bottom: 1px solid ${theme.colors.border.medium};\n  `,\n  receivers: css`\n    padding: ${theme.spacing(1, 0)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport { GrafanaTheme2, intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\n\nimport { AlertLabels } from '../AlertLabels';\nimport { DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { DynamicTableWithGuidelines } from '../DynamicTableWithGuidelines';\nimport { AmAlertStateTag } from '../silences/AmAlertStateTag';\n\nimport { AlertDetails } from './AlertDetails';\n\ninterface Props {\n  alerts: AlertmanagerAlert[];\n  alertManagerSourceName: string;\n}\n\ntype AlertGroupAlertsTableColumnProps = DynamicTableColumnProps<AlertmanagerAlert>;\ntype AlertGroupAlertsTableItemProps = DynamicTableItemProps<AlertmanagerAlert>;\n\nexport const AlertGroupAlertsTable = ({ alerts, alertManagerSourceName }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const columns = useMemo(\n    (): AlertGroupAlertsTableColumnProps[] => [\n      {\n        id: 'state',\n        label: 'State',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: alert }) => (\n          <>\n            <AmAlertStateTag state={alert.status.state} />\n            <span className={styles.duration}>\n              for{' '}\n              {intervalToAbbreviatedDurationString({\n                start: new Date(alert.startsAt),\n                end: new Date(alert.endsAt),\n              })}\n            </span>\n          </>\n        ),\n        size: '220px',\n      },\n      {\n        id: 'labels',\n        label: 'Labels',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: { labels } }) => <AlertLabels labels={labels} size=\"sm\" />,\n        size: 1,\n      },\n    ],\n    [styles]\n  );\n\n  const items = useMemo(\n    (): AlertGroupAlertsTableItemProps[] =>\n      alerts.map((alert) => ({\n        id: alert.fingerprint,\n        data: alert,\n      })),\n    [alerts]\n  );\n\n  return (\n    <div className={styles.tableWrapper} data-testid=\"alert-group-table\">\n      <DynamicTableWithGuidelines\n        cols={columns}\n        items={items}\n        isExpandable={true}\n        renderExpandedContent={({ data: alert }) => (\n          <AlertDetails alert={alert} alertManagerSourceName={alertManagerSourceName} />\n        )}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tableWrapper: css`\n    margin-top: ${theme.spacing(3)};\n    ${theme.breakpoints.up('md')} {\n      margin-left: ${theme.spacing(4.5)};\n    }\n  `,\n  duration: css`\n    margin-left: ${theme.spacing(1)};\n    font-size: ${theme.typography.bodySmall.fontSize};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { AlertmanagerGroup, AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { AlertLabels } from '../AlertLabels';\nimport { CollapseToggle } from '../CollapseToggle';\n\nimport { AlertGroupAlertsTable } from './AlertGroupAlertsTable';\nimport { AlertGroupHeader } from './AlertGroupHeader';\n\ninterface Props {\n  group: AlertmanagerGroup;\n  alertManagerSourceName: string;\n}\n\nexport const AlertGroup = ({ alertManagerSourceName, group }: Props) => {\n  const [isCollapsed, setIsCollapsed] = useState<boolean>(true);\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.header}>\n        <div className={styles.group} data-testid=\"alert-group\">\n          <CollapseToggle\n            size=\"sm\"\n            isCollapsed={isCollapsed}\n            onToggle={() => setIsCollapsed(!isCollapsed)}\n            data-testid=\"alert-group-collapse-toggle\"\n          />\n          {Object.keys(group.labels).length ? (\n            <AlertLabels labels={group.labels} size=\"sm\" />\n          ) : (\n            <span>No grouping</span>\n          )}\n        </div>\n        <AlertGroupHeader group={group} />\n      </div>\n      {!isCollapsed && <AlertGroupAlertsTable alertManagerSourceName={alertManagerSourceName} alerts={group.alerts} />}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    & + & {\n      margin-top: ${theme.spacing(2)};\n    }\n  `,\n  header: css`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: space-between;\n    padding: ${theme.spacing(1, 1, 1, 0)};\n    background-color: ${theme.colors.background.secondary};\n    width: 100%;\n  `,\n  group: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  `,\n  summary: css``,\n  spanElement: css`\n    margin-left: ${theme.spacing(0.5)};\n  `,\n  [AlertState.Active]: css`\n    color: ${theme.colors.error.main};\n  `,\n  [AlertState.Suppressed]: css`\n    color: ${theme.colors.primary.main};\n  `,\n  [AlertState.Unprocessed]: css`\n    color: ${theme.colors.secondary.main};\n  `,\n});\n","import React from 'react';\n\nimport { AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { State, StateTag } from '../StateTag';\n\nconst alertStateToState: Record<AlertState, State> = {\n  [AlertState.Active]: 'bad',\n  [AlertState.Unprocessed]: 'neutral',\n  [AlertState.Suppressed]: 'info',\n};\n\ninterface Props {\n  state: AlertState;\n}\n\nexport const AmAlertStateTag = ({ state }: Props) => <StateTag state={alertStateToState[state]}>{state}</StateTag>;\n","import { useMemo } from 'react';\n\nimport { contextSrv as ctx } from 'app/core/services/context_srv';\nimport { AccessControlAction } from 'app/types';\n\nimport { useAlertmanager } from '../state/AlertmanagerContext';\nimport { getInstancesPermissions, getNotificationsPermissions } from '../utils/access-control';\n\n/**\n * These hooks will determine if\n *  1. the action is supported in the current alertmanager or data source context\n *  2. user is allowed to perform actions based on their set of permissions / assigned role\n */\nexport enum AlertmanagerAction {\n  // configuration\n  ViewExternalConfiguration = 'view-external-configuration',\n  UpdateExternalConfiguration = 'update-external-configuration',\n\n  // contact points\n  CreateContactPoint = 'create-contact-point',\n  ViewContactPoint = 'view-contact-point',\n  UpdateContactPoint = 'edit-contact-points',\n  DeleteContactPoint = 'delete-contact-point',\n  ExportContactPoint = 'export-contact-point',\n\n  // notification templates\n  CreateNotificationTemplate = 'create-notification-template',\n  ViewNotificationTemplate = 'view-notification-template',\n  UpdateNotificationTemplate = 'edit-notification-template',\n  DeleteNotificationTemplate = 'delete-notification-template',\n  DecryptSecrets = 'decrypt-secrets',\n\n  // notification policies\n  CreateNotificationPolicy = 'create-notification-policy',\n  ViewNotificationPolicyTree = 'view-notification-policy-tree',\n  UpdateNotificationPolicyTree = 'update-notification-policy-tree',\n  DeleteNotificationPolicy = 'delete-notification-policy',\n  ExportNotificationPolicies = 'export-notification-policies',\n\n  // silences – these cannot be deleted only \"expired\" (updated)\n  CreateSilence = 'create-silence',\n  ViewSilence = 'view-silence',\n  UpdateSilence = 'update-silence',\n\n  // mute timings\n  ViewMuteTiming = 'view-mute-timing',\n  CreateMuteTiming = 'create-mute-timing',\n  UpdateMuteTiming = 'update-mute-timing',\n  DeleteMuteTiming = 'delete-mute-timing',\n}\n\nexport enum AlertSourceAction {\n  // internal (Grafana managed)\n  CreateAlertRule = 'create-alert-rule',\n  ViewAlertRule = 'view-alert-rule',\n  UpdateAlertRule = 'update-alert-rule',\n  DeleteAlertRule = 'delete-alert-rule',\n  // external (any compatible alerting data source)\n  CreateExternalAlertRule = 'create-external-alert-rule',\n  ViewExternalAlertRule = 'view-external-alert-rule',\n  UpdateExternalAlertRule = 'update-external-alert-rule',\n  DeleteExternalAlertRule = 'delete-external-alert-rule',\n}\n\nconst AlwaysSupported = true; // this just makes it easier to understand the code\nexport type Action = AlertmanagerAction | AlertSourceAction;\n\nexport type Ability = [actionSupported: boolean, actionAllowed: boolean];\nexport type Abilities<T extends Action> = Record<T, Ability>;\n\nexport function useAlertSourceAbilities(): Abilities<AlertSourceAction> {\n  // TODO add the \"supported\" booleans here, we currently only do authorization\n\n  const abilities: Abilities<AlertSourceAction> = {\n    // -- Grafana managed alert rules --\n    [AlertSourceAction.CreateAlertRule]: [AlwaysSupported, ctx.hasPermission(AccessControlAction.AlertingRuleCreate)],\n    [AlertSourceAction.ViewAlertRule]: [AlwaysSupported, ctx.hasPermission(AccessControlAction.AlertingRuleRead)],\n    [AlertSourceAction.UpdateAlertRule]: [AlwaysSupported, ctx.hasPermission(AccessControlAction.AlertingRuleUpdate)],\n    [AlertSourceAction.DeleteAlertRule]: [AlwaysSupported, ctx.hasPermission(AccessControlAction.AlertingRuleDelete)],\n    // -- External alert rules (Mimir / Loki / etc) --\n    // for these we only have \"read\" and \"write\" permissions\n    [AlertSourceAction.CreateExternalAlertRule]: [\n      AlwaysSupported,\n      ctx.hasPermission(AccessControlAction.AlertingRuleExternalWrite),\n    ],\n    [AlertSourceAction.ViewExternalAlertRule]: [\n      AlwaysSupported,\n      ctx.hasPermission(AccessControlAction.AlertingRuleExternalRead),\n    ],\n    [AlertSourceAction.UpdateExternalAlertRule]: [\n      AlwaysSupported,\n      ctx.hasPermission(AccessControlAction.AlertingRuleExternalWrite),\n    ],\n    [AlertSourceAction.DeleteExternalAlertRule]: [\n      AlwaysSupported,\n      ctx.hasPermission(AccessControlAction.AlertingRuleExternalWrite),\n    ],\n  };\n\n  return abilities;\n}\n\nexport function useAllAlertmanagerAbilities(): Abilities<AlertmanagerAction> {\n  const {\n    selectedAlertmanager,\n    hasConfigurationAPI,\n    isGrafanaAlertmanager: isGrafanaFlavoredAlertmanager,\n  } = useAlertmanager();\n\n  // These are used for interacting with Alertmanager resources where we apply alert.notifications:<name> permissions.\n  // There are different permissions based on wether the built-in alertmanager is selected (grafana) or an external one.\n  const notificationsPermissions = getNotificationsPermissions(selectedAlertmanager!);\n  const instancePermissions = getInstancesPermissions(selectedAlertmanager!);\n\n  // list out all of the abilities, and if the user has permissions to perform them\n  const abilities: Abilities<AlertmanagerAction> = {\n    // -- configuration --\n    [AlertmanagerAction.ViewExternalConfiguration]: [\n      AlwaysSupported,\n      ctx.hasPermission(AccessControlAction.AlertingNotificationsExternalRead),\n    ],\n    [AlertmanagerAction.UpdateExternalConfiguration]: [\n      hasConfigurationAPI,\n      ctx.hasPermission(AccessControlAction.AlertingNotificationsExternalWrite),\n    ],\n    // -- contact points --\n    [AlertmanagerAction.CreateContactPoint]: [hasConfigurationAPI, ctx.hasPermission(notificationsPermissions.create)],\n    [AlertmanagerAction.ViewContactPoint]: [AlwaysSupported, ctx.hasPermission(notificationsPermissions.read)],\n    [AlertmanagerAction.UpdateContactPoint]: [hasConfigurationAPI, ctx.hasPermission(notificationsPermissions.update)],\n    [AlertmanagerAction.DeleteContactPoint]: [hasConfigurationAPI, ctx.hasPermission(notificationsPermissions.delete)],\n    // only Grafana flavored alertmanager supports exporting\n    [AlertmanagerAction.ExportContactPoint]: [\n      isGrafanaFlavoredAlertmanager,\n      ctx.hasPermission(notificationsPermissions.read),\n    ],\n    // -- notification templates --\n    [AlertmanagerAction.CreateNotificationTemplate]: [\n      hasConfigurationAPI,\n      ctx.hasPermission(notificationsPermissions.create),\n    ],\n    [AlertmanagerAction.ViewNotificationTemplate]: [AlwaysSupported, ctx.hasPermission(notificationsPermissions.read)],\n    [AlertmanagerAction.UpdateNotificationTemplate]: [\n      hasConfigurationAPI,\n      ctx.hasPermission(notificationsPermissions.update),\n    ],\n    [AlertmanagerAction.DeleteNotificationTemplate]: [\n      hasConfigurationAPI,\n      ctx.hasPermission(notificationsPermissions.delete),\n    ],\n    // -- notification policies --\n    [AlertmanagerAction.CreateNotificationPolicy]: [\n      hasConfigurationAPI,\n      ctx.hasPermission(notificationsPermissions.create),\n    ],\n    [AlertmanagerAction.ViewNotificationPolicyTree]: [\n      AlwaysSupported,\n      ctx.hasPermission(notificationsPermissions.read),\n    ],\n    [AlertmanagerAction.UpdateNotificationPolicyTree]: [\n      hasConfigurationAPI,\n      ctx.hasPermission(notificationsPermissions.update),\n    ],\n    [AlertmanagerAction.DeleteNotificationPolicy]: [\n      hasConfigurationAPI,\n      ctx.hasPermission(notificationsPermissions.delete),\n    ],\n    [AlertmanagerAction.ExportNotificationPolicies]: [\n      isGrafanaFlavoredAlertmanager,\n      ctx.hasPermission(notificationsPermissions.read),\n    ],\n    [AlertmanagerAction.DecryptSecrets]: [\n      isGrafanaFlavoredAlertmanager,\n      ctx.hasPermission(notificationsPermissions.provisioning.readSecrets),\n    ],\n    // -- silences --\n    [AlertmanagerAction.CreateSilence]: [hasConfigurationAPI, ctx.hasPermission(instancePermissions.create)],\n    [AlertmanagerAction.ViewSilence]: [AlwaysSupported, ctx.hasPermission(instancePermissions.read)],\n    [AlertmanagerAction.UpdateSilence]: [hasConfigurationAPI, ctx.hasPermission(instancePermissions.update)],\n    // -- mute timtings --\n    [AlertmanagerAction.CreateMuteTiming]: [hasConfigurationAPI, ctx.hasPermission(notificationsPermissions.create)],\n    [AlertmanagerAction.ViewMuteTiming]: [AlwaysSupported, ctx.hasPermission(notificationsPermissions.read)],\n    [AlertmanagerAction.UpdateMuteTiming]: [hasConfigurationAPI, ctx.hasPermission(notificationsPermissions.update)],\n    [AlertmanagerAction.DeleteMuteTiming]: [hasConfigurationAPI, ctx.hasPermission(notificationsPermissions.delete)],\n  };\n\n  return abilities;\n}\n\nexport function useAlertmanagerAbility(action: AlertmanagerAction): Ability {\n  const abilities = useAllAlertmanagerAbilities();\n\n  return useMemo(() => {\n    return abilities[action];\n  }, [abilities, action]);\n}\n\nexport function useAlertmanagerAbilities(actions: AlertmanagerAction[]): Ability[] {\n  const abilities = useAllAlertmanagerAbilities();\n\n  return useMemo(() => {\n    return actions.map((action) => abilities[action]);\n  }, [abilities, actions]);\n}\n\nexport function useAlertSourceAbility(action: AlertSourceAction): Ability {\n  const abilities = useAlertSourceAbilities();\n  return useMemo(() => abilities[action], [abilities, action]);\n}\n"],"names":["AlertStateFilter","onStateFilterChange","stateFilter","styles","getStyles","alertStateOptions","labelA","labelB","label","state","Label","RadioButtonGroup","theme","GroupBy","className","groups","groupBy","onGroupingChange","labelKeyOptions","group","labels","key","Icon","items","value","AlertGroupFilter","filterKey","setFilterKey","queryParams","setQueryParams","useQueryParams","queryString","alertState","matcherFilterKey","clearFilters","showClearButton","MatcherFilter","keys","Button","useFilteredAmGroups","filters","matchers","filteredGroup","alerts","status","labelsMatch","filtersMatch","useGroupedAlerts","combinedGroups","noGroupingGroup","groupings","alert","groupByLabel","existingGrouping","groupKey","acc","AlertGroups","useGetAlertmanagerChoiceStatusQuery","alertmanagerApi","selectedAlertmanager","dispatch","amConfigStatus","alertGroups","useUnifiedAlertingSelector","loading","error","results","groupedAlerts","filteredAlertGroups","grafanaAmDeliveryDisabled","fetchNotifications","interval","LoadingPlaceholder","Alert","index","AlertGroup","AlertGroupsPage","Authorize","actions","children","alertmanagerActions","isAlertmanagerAction","alertSourceActions","isAlertSourceAction","AuthorizeAlertmanager","AuthorizeAlertsource","alertmanagerAbilties","actionsAllowed","alertSourceAbilities","abilities","_supported","allowed","action","DynamicTableWithGuidelines","renderExpandedContent","props","item","_","AlertDetails","alertManagerSourceName","isSeeSourceButtonEnabled","annotationKey","annotationValue","AnnotationDetailsField","name","AlertGroupAlertsTable","columns","AmAlertStateTag","AlertLabels","isCollapsed","setIsCollapsed","CollapseToggle","AlertGroupHeader","alertStateToState","AlertmanagerAction","AlertSourceAction","AlwaysSupported","useAlertSourceAbilities","useAllAlertmanagerAbilities","hasConfigurationAPI","isGrafanaFlavoredAlertmanager","notificationsPermissions","instancePermissions","useAlertmanagerAbility","useAlertmanagerAbilities","useAlertSourceAbility"],"sourceRoot":""}