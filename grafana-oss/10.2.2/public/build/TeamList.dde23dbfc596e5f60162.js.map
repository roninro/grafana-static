{"version":3,"file":"TeamList.dde23dbfc596e5f60162.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/RolePicker/TeamRolePicker.tsx","webpack://grafana/./public/app/features/teams/TeamList.tsx","webpack://grafana/./public/app/features/teams/state/actions.ts","webpack://grafana/./public/app/features/teams/state/navModel.ts"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { contextSrv } from 'app/core/core';\nimport { Role, AccessControlAction } from 'app/types';\n\nimport { RolePicker } from './RolePicker';\nimport { fetchTeamRoles, updateTeamRoles } from './api';\n\nexport interface Props {\n  teamId: number;\n  orgId?: number;\n  roleOptions: Role[];\n  disabled?: boolean;\n  roles?: Role[];\n  onApplyRoles?: (newRoles: Role[]) => void;\n  pendingRoles?: Role[];\n  /**\n   * Set whether the component should send a request with the new roles to the\n   * backend in TeamRolePicker.onRolesChange (apply=false), or call {@link onApplyRoles}\n   * with the updated list of roles (apply=true).\n   *\n   * Besides it sets the RolePickerMenu's Button title to\n   *   * `Update` in case apply equals false\n   *   * `Apply` in case apply equals true\n   *\n   * @default false\n   */\n  apply?: boolean;\n  maxWidth?: string | number;\n  width?: string | number;\n  isLoading?: boolean;\n}\n\nexport const TeamRolePicker = ({\n  teamId,\n  roleOptions,\n  disabled,\n  roles,\n  onApplyRoles,\n  pendingRoles,\n  apply = false,\n  maxWidth,\n  width,\n  isLoading,\n}: Props) => {\n  const [{ loading, value: appliedRoles = roles || [] }, getTeamRoles] = useAsyncFn(async () => {\n    try {\n      if (roles) {\n        return roles;\n      }\n      if (apply && Boolean(pendingRoles?.length)) {\n        return pendingRoles;\n      }\n\n      if (contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesList)) {\n        return await fetchTeamRoles(teamId);\n      }\n    } catch (e) {\n      console.error('Error loading options', e);\n    }\n    return [];\n  }, [teamId, pendingRoles, roles]);\n\n  useEffect(() => {\n    getTeamRoles();\n  }, [getTeamRoles]);\n\n  const onRolesChange = async (roles: Role[]) => {\n    if (!apply) {\n      await updateTeamRoles(roles, teamId);\n      await getTeamRoles();\n    } else if (onApplyRoles) {\n      onApplyRoles(roles);\n    }\n  };\n\n  const canUpdateRoles =\n    contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesAdd) &&\n    contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesRemove);\n\n  return (\n    <RolePicker\n      apply={apply}\n      onRolesChange={onRolesChange}\n      roleOptions={roleOptions}\n      appliedRoles={appliedRoles}\n      isLoading={loading || isLoading}\n      disabled={disabled}\n      basicRoleDisabled={true}\n      canUpdateRoles={canUpdateRoles}\n      maxWidth={maxWidth}\n      width={width}\n    />\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport {\n  LinkButton,\n  FilterInput,\n  InlineField,\n  CellProps,\n  DeleteButton,\n  InteractiveTable,\n  Icon,\n  Tooltip,\n  Column,\n  HorizontalGroup,\n  Pagination,\n  VerticalGroup,\n  useStyles2,\n  Avatar,\n} from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { Page } from 'app/core/components/Page/Page';\nimport { fetchRoleOptions } from 'app/core/components/RolePicker/api';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction, Role, StoreState, Team } from 'app/types';\n\nimport { TeamRolePicker } from '../../core/components/RolePicker/TeamRolePicker';\n\nimport { deleteTeam, loadTeams, changePage, changeQuery, changeSort } from './state/actions';\n\ntype Cell<T extends keyof Team = keyof Team> = CellProps<Team, Team[T]>;\nexport interface OwnProps {}\n\nexport interface State {\n  roleOptions: Role[];\n}\n\nexport const TeamList = ({\n  teams,\n  query,\n  noTeams,\n  hasFetched,\n  loadTeams,\n  deleteTeam,\n  changeQuery,\n  totalPages,\n  page,\n  rolesLoading,\n  changePage,\n  changeSort,\n}: Props) => {\n  const [roleOptions, setRoleOptions] = useState<Role[]>([]);\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    loadTeams(true);\n  }, [loadTeams]);\n\n  useEffect(() => {\n    if (contextSrv.licensedAccessControlEnabled() && contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n      fetchRoleOptions().then((roles) => setRoleOptions(roles));\n    }\n  }, []);\n\n  const canCreate = contextSrv.hasPermission(AccessControlAction.ActionTeamsCreate);\n  const displayRolePicker = shouldDisplayRolePicker();\n\n  const columns: Array<Column<Team>> = useMemo(\n    () => [\n      {\n        id: 'avatarUrl',\n        header: '',\n        cell: ({ cell: { value } }: Cell<'avatarUrl'>) => value && <Avatar src={value} alt=\"User avatar\" />,\n      },\n      {\n        id: 'name',\n        header: 'Name',\n        cell: ({ cell: { value } }: Cell<'name'>) => value,\n        sortType: 'string',\n      },\n      {\n        id: 'email',\n        header: 'Email',\n        cell: ({ cell: { value } }: Cell<'email'>) => value,\n        sortType: 'string',\n      },\n      {\n        id: 'memberCount',\n        header: 'Members',\n        cell: ({ cell: { value } }: Cell<'memberCount'>) => value,\n        sortType: 'number',\n      },\n      ...(displayRolePicker\n        ? [\n            {\n              id: 'role',\n              header: 'Role',\n              cell: ({ cell: { value }, row: { original } }: Cell<'memberCount'>) => {\n                const canSeeTeamRoles = contextSrv.hasPermissionInMetadata(\n                  AccessControlAction.ActionTeamsRolesList,\n                  original\n                );\n                return (\n                  canSeeTeamRoles && (\n                    <TeamRolePicker\n                      teamId={original.id}\n                      roles={original.roles || []}\n                      isLoading={rolesLoading}\n                      roleOptions={roleOptions}\n                      width={40}\n                    />\n                  )\n                );\n              },\n            },\n          ]\n        : []),\n      {\n        id: 'edit',\n        header: '',\n        cell: ({ row: { original } }: Cell) => {\n          const canReadTeam = contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsRead, original);\n          return canReadTeam ? (\n            <a href={`org/teams/edit/${original.id}`} aria-label={`Edit team ${original.name}`}>\n              <Tooltip content={'Edit team'}>\n                <Icon name={'pen'} />\n              </Tooltip>\n            </a>\n          ) : null;\n        },\n      },\n      {\n        id: 'delete',\n        header: '',\n        cell: ({ row: { original } }: Cell) => {\n          const canDelete = contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsDelete, original);\n\n          return (\n            <DeleteButton\n              aria-label={`Delete team ${original.name}`}\n              size=\"sm\"\n              disabled={!canDelete}\n              onConfirm={() => deleteTeam(original.id)}\n            />\n          );\n        },\n      },\n    ],\n    [displayRolePicker, rolesLoading, roleOptions, deleteTeam]\n  );\n\n  return (\n    <Page navId=\"teams\">\n      <Page.Contents isLoading={!hasFetched}>\n        {noTeams ? (\n          <EmptyListCTA\n            title=\"You haven't created any teams yet.\"\n            buttonIcon=\"users-alt\"\n            buttonLink=\"org/teams/new\"\n            buttonTitle=\" New team\"\n            buttonDisabled={!contextSrv.hasPermission(AccessControlAction.ActionTeamsCreate)}\n            proTip=\"Assign folder and dashboard permissions to teams instead of users to ease administration.\"\n            proTipLink=\"\"\n            proTipLinkTitle=\"\"\n            proTipTarget=\"_blank\"\n          />\n        ) : (\n          <>\n            <div className=\"page-action-bar\">\n              <InlineField grow>\n                <FilterInput placeholder=\"Search teams\" value={query} onChange={changeQuery} />\n              </InlineField>\n\n              <LinkButton href={canCreate ? 'org/teams/new' : '#'} disabled={!canCreate}>\n                New Team\n              </LinkButton>\n            </div>\n            <VerticalGroup spacing={'md'}>\n              <div className={styles.wrapper}>\n                <InteractiveTable\n                  columns={columns}\n                  data={teams}\n                  getRowId={(team) => String(team.id)}\n                  fetchData={changeSort}\n                />\n                <HorizontalGroup justify=\"flex-end\">\n                  <Pagination\n                    hideWhenSinglePage\n                    currentPage={page}\n                    numberOfPages={totalPages}\n                    onNavigate={changePage}\n                  />\n                </HorizontalGroup>\n              </div>\n            </VerticalGroup>\n          </>\n        )}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    // Enable RolePicker overflow\n    wrapper: css({\n      display: 'flex',\n      flexDirection: 'column',\n      overflowX: 'auto',\n      overflowY: 'hidden',\n      minHeight: '100vh',\n      width: '100%',\n      '& > div': {\n        overflowX: 'unset',\n        marginBottom: theme.spacing(2),\n      },\n    }),\n  };\n};\n\nfunction shouldDisplayRolePicker(): boolean {\n  return (\n    contextSrv.licensedAccessControlEnabled() &&\n    contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesList) &&\n    contextSrv.hasPermission(AccessControlAction.ActionRolesList)\n  );\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    teams: state.teams.teams,\n    query: state.teams.query,\n    perPage: state.teams.perPage,\n    page: state.teams.page,\n    noTeams: state.teams.noTeams,\n    totalPages: state.teams.totalPages,\n    hasFetched: state.teams.hasFetched,\n    rolesLoading: state.teams.rolesLoading,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeams,\n  deleteTeam,\n  changePage,\n  changeQuery,\n  changeSort,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\nexport default connector(TeamList);\n","import { debounce } from 'lodash';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { FetchDataArgs } from '@grafana/ui';\nimport { updateNavIndex } from 'app/core/actions';\nimport { contextSrv } from 'app/core/core';\nimport { accessControlQueryParam } from 'app/core/utils/accessControl';\nimport { AccessControlAction, Team, TeamMember, ThunkResult } from 'app/types';\n\nimport { buildNavModel } from './navModel';\nimport {\n  teamGroupsLoaded,\n  queryChanged,\n  pageChanged,\n  teamLoaded,\n  teamMembersLoaded,\n  teamsLoaded,\n  sortChanged,\n  rolesFetchBegin,\n  rolesFetchEnd,\n} from './reducers';\n\nexport function loadTeams(initial = false): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const { query, page, perPage, sort } = getState().teams;\n    // Early return if the user cannot list teams\n    if (!contextSrv.hasPermission(AccessControlAction.ActionTeamsRead)) {\n      dispatch(teamsLoaded({ teams: [], totalCount: 0, page: 1, perPage, noTeams: true }));\n      return;\n    }\n\n    const response = await getBackendSrv().get(\n      '/api/teams/search',\n      accessControlQueryParam({ query, page, perpage: perPage, sort })\n    );\n\n    // We only want to check if there is no teams on the initial request.\n    // A query that returns no teams should not render the empty list banner.\n    let noTeams = false;\n    if (initial) {\n      noTeams = response.teams.length === 0;\n    }\n\n    if (contextSrv.licensedAccessControlEnabled()) {\n      dispatch(rolesFetchBegin());\n      const teamIds = response?.teams.map((t: Team) => t.id);\n      const roles = await getBackendSrv().post(`/api/access-control/teams/roles/search`, { teamIds });\n      response.teams.forEach((t: Team) => {\n        t.roles = roles ? roles[t.id] || [] : [];\n      });\n      dispatch(rolesFetchEnd());\n    }\n\n    dispatch(teamsLoaded({ noTeams, ...response }));\n  };\n}\n\nconst loadTeamsWithDebounce = debounce((dispatch) => dispatch(loadTeams()), 500);\n\nexport function loadTeam(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    const response = await getBackendSrv().get(`/api/teams/${id}`, accessControlQueryParam());\n    dispatch(teamLoaded(response));\n    dispatch(updateNavIndex(buildNavModel(response)));\n  };\n}\n\nexport function deleteTeam(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`/api/teams/${id}`);\n    // Update users permissions in case they lost teams.read with the deletion\n    await contextSrv.fetchUserPermissions();\n    dispatch(loadTeams());\n  };\n}\n\nexport function changeQuery(query: string): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(queryChanged(query));\n    loadTeamsWithDebounce(dispatch);\n  };\n}\n\nexport function changePage(page: number): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(pageChanged(page));\n    dispatch(loadTeams());\n  };\n}\n\nexport function changeSort({ sortBy }: FetchDataArgs<Team>): ThunkResult<void> {\n  const sort = sortBy.length ? `${sortBy[0].id}-${sortBy[0].desc ? 'desc' : 'asc'}` : undefined;\n  return async (dispatch) => {\n    dispatch(sortChanged(sort));\n    dispatch(loadTeams());\n  };\n}\n\nexport function loadTeamMembers(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    const response = await getBackendSrv().get(`/api/teams/${team.id}/members`);\n    dispatch(teamMembersLoaded(response));\n  };\n}\n\nexport function addTeamMember(id: number): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().post(`/api/teams/${team.id}/members`, { userId: id });\n    dispatch(loadTeamMembers());\n  };\n}\n\nexport function removeTeamMember(id: number): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().delete(`/api/teams/${team.id}/members/${id}`);\n    dispatch(loadTeamMembers());\n  };\n}\n\nexport function updateTeam(name: string, email: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().put(`/api/teams/${team.id}`, { name, email });\n    dispatch(loadTeam(team.id));\n  };\n}\n\nexport function loadTeamGroups(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    const response = await getBackendSrv().get(`/api/teams/${team.id}/groups`);\n    dispatch(teamGroupsLoaded(response));\n  };\n}\n\nexport function addTeamGroup(groupId: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().post(`/api/teams/${team.id}/groups`, { groupId: groupId });\n    dispatch(loadTeamGroups());\n  };\n}\n\nexport function removeTeamGroup(groupId: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    // need to use query parameter due to escaped characters in the request\n    await getBackendSrv().delete(`/api/teams/${team.id}/groups?groupId=${encodeURIComponent(groupId)}`);\n    dispatch(loadTeamGroups());\n  };\n}\n\nexport function updateTeamMember(member: TeamMember): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().put(`/api/teams/${member.teamId}/members/${member.userId}`, {\n      permission: member.permission,\n    });\n    dispatch(loadTeamMembers());\n  };\n}\n","import { NavModelItem, NavModel } from '@grafana/data';\nimport { featureEnabled } from '@grafana/runtime';\nimport { ProBadge } from 'app/core/components/Upgrade/ProBadge';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { highlightTrial } from 'app/features/admin/utils';\nimport { AccessControlAction, Team, TeamPermissionLevel } from 'app/types';\n\nconst loadingTeam = {\n  avatarUrl: 'public/img/user_profile.png',\n  id: 1,\n  name: 'Loading',\n  email: 'loading',\n  memberCount: 0,\n  permission: TeamPermissionLevel.Member,\n  accessControl: { isEditor: false },\n  orgId: 0,\n  updated: '',\n};\n\nexport function buildNavModel(team: Team): NavModelItem {\n  const navModel: NavModelItem = {\n    img: team.avatarUrl,\n    id: 'team-' + team.id,\n    subTitle: 'Manage members and settings',\n    url: '',\n    text: team.name,\n    children: [\n      // With RBAC this tab will always be available (but not always editable)\n      // With Legacy it will be hidden by hideTabsFromNonTeamAdmin should the user not be allowed to see it\n      {\n        active: false,\n        icon: 'sliders-v-alt',\n        id: `team-settings-${team.id}`,\n        text: 'Settings',\n        url: `org/teams/edit/${team.id}/settings`,\n      },\n    ],\n  };\n\n  // While team is loading we leave the members tab\n  // With RBAC the Members tab is available when user has ActionTeamsPermissionsRead for this team\n  // With Legacy it will always be present\n  if (\n    team === loadingTeam ||\n    contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)\n  ) {\n    navModel.children!.unshift({\n      active: false,\n      icon: 'users-alt',\n      id: `team-members-${team.id}`,\n      text: 'Members',\n      url: `org/teams/edit/${team.id}/members`,\n    });\n  }\n\n  const teamGroupSync: NavModelItem = {\n    active: false,\n    icon: 'sync',\n    id: `team-groupsync-${team.id}`,\n    text: 'External group sync',\n    url: `org/teams/edit/${team.id}/groupsync`,\n  };\n\n  const isLoadingTeam = team === loadingTeam;\n\n  if (highlightTrial()) {\n    teamGroupSync.tabSuffix = () =>\n      ProBadge({ experimentId: isLoadingTeam ? '' : 'feature-highlights-team-sync-badge', eventVariant: 'trial' });\n  }\n\n  // With both Legacy and RBAC the tab is protected being featureEnabled\n  // While team is loading we leave the teamsync tab\n  // With RBAC the External Group Sync tab is available when user has ActionTeamsPermissionsRead for this team\n  if (featureEnabled('teamsync')) {\n    if (isLoadingTeam || contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)) {\n      navModel.children!.push(teamGroupSync);\n    }\n  } else if (config.featureToggles.featureHighlights) {\n    navModel.children!.push({\n      ...teamGroupSync,\n      tabSuffix: () => ProBadge({ experimentId: isLoadingTeam ? '' : 'feature-highlights-team-sync-badge' }),\n    });\n  }\n\n  return navModel;\n}\n\nexport function getTeamLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel(loadingTeam);\n\n  let node: NavModelItem;\n\n  // find active page\n  for (const child of main.children!) {\n    if (child.id!.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node!,\n  };\n}\n"],"names":["TeamRolePicker","teamId","roleOptions","disabled","roles","onApplyRoles","pendingRoles","apply","maxWidth","width","isLoading","loading","appliedRoles","getTeamRoles","e","onRolesChange","canUpdateRoles","TeamList","teams","query","noTeams","hasFetched","loadTeams","deleteTeam","changeQuery","totalPages","page","rolesLoading","changePage","changeSort","setRoleOptions","styles","getStyles","canCreate","displayRolePicker","shouldDisplayRolePicker","columns","value","original","canDelete","team","theme","mapStateToProps","state","mapDispatchToProps","initial","dispatch","getState","perPage","sort","response","teamIds","t","loadTeamsWithDebounce","loadTeam","id","sortBy","loadTeamMembers","getStore","addTeamMember","removeTeamMember","updateTeam","name","email","loadTeamGroups","addTeamGroup","groupId","removeTeamGroup","updateTeamMember","member","loadingTeam","buildNavModel","navModel","teamGroupSync","isLoadingTeam","getTeamLoadingNav","pageName","main","node","child"],"sourceRoot":""}