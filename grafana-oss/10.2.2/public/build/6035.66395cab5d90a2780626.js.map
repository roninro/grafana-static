{"version":3,"file":"6035.66395cab5d90a2780626.js","mappings":"kKAgBO,MAAMA,EAAY,CAAC,CAAE,QAAAC,EAAS,SAAAC,CAAS,IAAsB,CAClE,MAAMC,KAAsB,UAAOF,EAASG,CAAoB,EAC1DC,KAAqB,UAAOJ,EAASK,CAAmB,EAE9D,OAAIH,EAAoB,OACf,gBAACI,EAAA,CAAsB,QAASJ,CAAA,EAAsBD,CAAS,EAGpEG,EAAmB,OACd,gBAACG,EAAA,CAAqB,QAASH,CAAA,EAAqBH,CAAS,EAG/D,IACT,EAMMK,EAAwB,CAAC,CAAE,QAAAN,EAAS,SAAAC,CAAS,IAAwC,CACzF,MAAMO,KAAuB,MAA4B,EAGzD,OAFgBC,EAAeD,EAAsBR,CAAO,EAGnD,gCAAGC,CAAS,EAEZ,IAEX,EAEMM,EAAuB,CAAC,CAAE,QAAAP,EAAS,SAAAC,CAAS,IAAuC,CACvF,MAAMS,KAAuB,MAAwB,EAGrD,OAFgBD,EAAeC,EAAsBV,CAAO,EAGnD,gCAAGC,CAAS,EAEZ,IAEX,EAGA,SAASQ,EAAiCE,EAAyBX,EAAc,CAC/E,SAAO,SAAMW,CAAS,EACnB,KAAKX,CAAO,EACZ,OAAO,EACP,MAAM,EACN,KAAK,CAAC,CAACY,EAAYC,CAAO,IAAMA,IAAY,EAAI,CACrD,CAEA,SAASV,EAAqBW,EAA4B,CACxD,OAAO,OAAO,OAAO,IAAkB,EAAE,SAASA,CAAM,CAC1D,CAEA,SAAST,EAAoBS,EAA2B,CACtD,OAAO,OAAO,OAAO,IAAiB,EAAE,SAASA,CAAM,CACzD,C,yGC7DA,MAAMC,EAAW,CAAC,CAAE,SAAAd,EAAU,KAAAe,EAAM,MAAAC,EAAQ,YAAa,GAAGC,CAAK,IAAa,CAC5E,MAAMC,KAAS,MAAWC,CAAS,EAC7BC,EAAc,OAAOH,EAAK,SAAY,WAE5C,OACE,gBAAC,OACC,aAAW,MAAG,CACZ,CAACC,EAAO,WAAW,EAAGE,CACxB,CAAC,EAEA,GAAGH,CAAA,EAEJ,gBAAC,IAAI,CAAC,QAAQ,YAAY,MAAAD,CAAA,EACxB,gBAAC,IAAK,CAAC,UAAU,MAAM,WAAW,SAAS,IAAK,IAC7CD,GAAQ,gBAAC,IAAI,CAAC,KAAK,KAAK,KAAMA,CAAA,CAAM,EACpCf,CACH,CACF,CACF,CAEJ,EAEMmB,EAAY,KAAO,CACvB,eAAa;AAAA;AAAA,GAGf,E,6HCvBA,MAAME,EAA8B,CAAC,CAAE,SAAAC,CAAS,IAAM,CACpD,MAAMJ,KAAS,MAAWC,CAAS,EAE7BI,EAAe,EAEfC,KAAW,QAAKF,EAAUC,CAAY,EACtCN,KAAO,aAAUK,EAAUA,EAAS,OAASC,CAAY,EACzDE,EAAkBR,EAAK,OAAS,EAEtC,OACE,gBAAC,QAAK,cAAY,kBAChB,gBAAC,IAAK,CAAC,UAAU,MAAM,IAAK,EAAG,WAAW,UACvCO,EAAS,IAAKE,GACb,gBAACC,EAAA,CAAa,OAAK,YAAS,EAAG,QAAAD,CAAA,CAAkB,CAClD,EAEAD,GACC,gBAAC,KACC,MAAK,GACL,UAAU,MACV,QACE,gCACGR,EAAK,IAAKS,GACT,gBAACC,EAAA,CAAa,OAAK,YAAS,EAAG,QAAAD,CAAA,CAAkB,CAClD,CACH,GAGF,gBAAC,YACC,gBAAC,OAAI,UAAWR,EAAO,UAAW,OAAOD,EAAK,aAAc,CAC9D,CACF,CAEJ,CACF,CAEJ,EAMMU,EAAsC,CAAC,CAAE,QAAS,CAACC,EAAOC,EAAUC,CAAK,CAAE,IAAM,CACrF,MAAMZ,KAAS,MAAWC,CAAS,EAEnC,OACE,gBAAC,OAAI,UAAWD,EAAO,QAAQU,CAAK,EAAE,SACpC,gBAAC,IAAK,CAAC,UAAU,MAAM,IAAK,EAAG,WAAW,YACvCA,EAAM,IAAEC,EAAS,IAAEC,CACtB,CACF,CAEJ,EAEMX,EAAaY,IAA0B,CAC3C,QAAUH,GAAkB,CAC1B,KAAM,CAAE,MAAAZ,EAAO,YAAAgB,CAAY,KAAI,MAAqBJ,CAAK,EAEzD,MAAO,CACL,WAAS;AAAA;AAAA,sBAEOZ;AAAA,mBACHe,EAAM,QAAQ,GAAI,KAAKA,EAAM,QAAQ,GAAI;AAAA,qBACvCA,EAAM,WAAW,UAAU;AAAA;AAAA,4BAEpBC;AAAA,yBACHD,EAAM,MAAM,aAAa,CAAC;AAAA,OAE/C,CACF,EACA,YAAU;AAAA,aACCA,EAAM,OAAO,KAAK;AAAA;AAAA,iBAEdA,EAAM,WAAW,UAAU;AAAA,mBACzBA,EAAM,WAAW,UAAU;AAAA,GAE9C,E,qPCpFO,SAASE,EAAgBC,EAAsB,CACpD,OAAOA,EAAM,MAAM,SAAW,CAChC,CAGO,SAASC,EAAiBC,EAAoD,CACnF,MAAMC,EAAM,IAAI,IAEhB,SAASC,EAAeJ,EAAoBK,EAAiB,CAAC,EAAG,CAC/DF,EAAI,IAAIH,EAAM,GAAI,CAAE,GAAGA,EAAO,KAAAK,CAAW,CAAC,EAC1CL,EAAM,QAAQ,QAASM,GAAMF,EAAeE,EAAG,CAAC,GAAGD,EAAML,EAAM,EAAE,CAAC,CAAC,CACrE,CAEA,OAAAI,EAAeF,EAAW,CAAC,CAAC,EACrBC,CACT,CAEO,SAASI,EAAiBP,EAAoB,CACnD,OAAOA,EAAM,iBAAiB,SAAW,CAC3C,CCfO,SAASQ,EAA2B,CAAE,MAAAR,CAAM,EAA6B,CAC9E,MAAMhB,KAAS,MAAWC,CAAS,EACnC,OAAIc,EAAgBC,CAAK,EAChB,gBAAC,OAAI,UAAWhB,EAAO,eAAe,gBAAc,EAClDuB,EAAiBP,CAAK,EACxB,gBAAC,OAAI,UAAWhB,EAAO,WAAW,aAAW,EAE7C,gBAACG,EAAA,EAAQ,CAAC,SAAUa,EAAM,iBAAmB,CAAC,EAAG,CAE5D,CAEA,MAAMf,EAAaY,IAA0B,CAC3C,iBAAe;AAAA,eACFA,EAAM,QAAQ,EAAG;AAAA,kBACdA,EAAM,OAAO,WAAW;AAAA;AAAA,IAGxC,aAAW;AAAA,aACAA,EAAM,OAAO,KAAK;AAAA,GAE/B,G,+ECZA,SAASY,EAAW,CAAE,MAAAT,EAAO,cAAAU,CAAc,EAAwE,CACjH,MAAM1B,KAAS,MAAW,CAAS,EAC7B2B,EAAeX,EAAM,MAAM,MAAM,CAAC,GAAK,CAAC,EACxCY,EAAmB,CAAC,MAAG,WAAQD,EAAa,IAAKE,GAAOH,EAAc,IAAIG,CAAE,CAAC,CAAC,EAAGb,CAAK,EAE5F,OACE,gBAAC,OAAI,UAAWhB,EAAO,mBACrB,gBAAC,OAAI,UAAWA,EAAO,eAAe,gBAAc,EACnD4B,EAAiB,IAAI,CAACE,EAAWC,IAE9B,gBAAC,OAAI,IAAKD,EAAU,IAClB,gBAAC,OAAI,UAAW9B,EAAO,aAAa+B,EAAOA,IAAUH,EAAiB,OAAS,CAAC,GAC7EL,EAAiBO,CAAS,EACzB,gBAAC,OAAI,UAAW9B,EAAO,WAAW,aAAW,EAE7C,gBAACG,EAAA,EAAQ,CAAC,SAAU2B,EAAU,iBAAmB,CAAC,EAAG,CAEzD,CACF,CAEH,CACH,CAEJ,CAUO,SAASE,EAA8B,CAC5C,QAAAC,EACA,MAAAjB,EACA,SAAAkB,EACA,cAAAR,EACA,uBAAAS,CACF,EAAuC,CACrC,MAAMnC,KAAS,MAAW,CAAS,EAC7BoC,EAAYrB,EAAgBC,CAAK,EAEvC,OACE,gBAAC,KAAoB,CAAC,WAAW,eAAe,uBAAwB,IAAuB,EAC7F,gBAACqB,EAAA,GACC,UAAWrC,EAAO,aAClB,OAAQ,GACR,MAAM,kBACN,UAAWiC,EACX,gBAAiBA,CAAA,EAEjB,gBAACK,EAAA,EAAK,CAAC,IAAK,EAAG,UAAU,UACvB,gBAAC,OAAI,aAAW,MAAGtC,EAAO,UAAWA,EAAO,aAAa,CAAC,CAAC,GAAG,6CAE9D,EACA,gBAAC,WAAI,0BAAwB,EAC5BoC,GAAa,gBAAC,OAAI,UAAWpC,EAAO,WAAW,gBAAc,EAC9D,gBAAC,OAAI,UAAWA,EAAO,UAAU,CAAC,EAAG,EACpC,CAACoC,GACA,gCACE,gBAACX,EAAA,CAAW,MAAAT,EAAc,cAAAU,CAAA,CAA8B,CAC1D,EAEF,gBAAC,OAAI,UAAW1B,EAAO,UAAU,CAAC,EAAG,EACrC,gBAAC,OAAI,UAAWA,EAAO,cACrB,gBAACsC,EAAA,EAAK,CAAC,IAAK,EAAG,UAAU,MAAM,WAAW,UAAS,iBAEjD,gBAAC,QAAK,UAAWtC,EAAO,WAAYkC,EAAS,IAAK,CACpD,EACA,gBAACtD,EAAA,EAAS,CAAC,QAAS,CAAC,KAAmB,kBAAkB,GACxD,gBAAC0D,EAAA,EAAK,CAAC,IAAK,EAAG,UAAU,MAAM,WAAW,UACxC,gBAAC,KACC,QAAM,MACJ,qCAAqC,mBAAmBJ,EAAS,IAAI,SACrEC,CACF,EACA,UAAWnC,EAAO,KAClB,OAAO,SACP,IAAI,cACL,eACa,gBAACuC,EAAA,EAAI,CAAC,KAAK,mBAAoB,EAC7C,CACF,CACF,CACF,EACA,gBAAC,OAAI,UAAWvC,EAAO,QACrB,gBAACwC,EAAA,GAAM,CAAC,QAAQ,UAAU,KAAK,SAAS,QAASP,CAAA,EAAS,OAE1D,CACF,CACF,CACF,CACF,CAEJ,CAEA,MAAM,EAAapB,IAA0B,CAC3C,aAAW;AAAA,aACAA,EAAM,OAAO,KAAK;AAAA,IAE7B,QAAM;AAAA;AAAA,aAEKA,EAAM,OAAO,KAAK;AAAA,IAE7B,UAAQ;AAAA;AAAA;AAAA,IAIR,gBAAc;AAAA;AAAA,IAGd,iBAAe;AAAA,eACFA,EAAM,QAAQ,EAAG;AAAA,kBACdA,EAAM,OAAO,WAAW;AAAA;AAAA,IAGxC,gBAAc;AAAA;AAAA;AAAA,WAGLA,EAAM,QAAQ,CAAC;AAAA;AAAA;AAAA,qBAGLA,EAAM,QAAQ,CAAC;AAAA,IAElC,qBAAmB;AAAA;AAAA;AAAA,kBAGHA,EAAM,QAAQ,CAAC;AAAA,IAE/B,UAAY4B,MAAkB;AAAA,kBACd5B,EAAM,QAAQ4B,CAAK;AAAA,IAEnC,aAAeA,MAAkB;AAAA,qBACd5B,EAAM,QAAQA,EAAM,QAAQ4B,CAAK,CAAC;AAAA,IAErD,aAAc,CAACV,EAAQ,EAAGW,EAAW,QAAU;AAAA,mBAC9B,GAAKX,EAAQ;AAAA,eACjBlB,EAAM,QAAQ,CAAC;AAAA,kBACZA,EAAM,QAAQ,CAAC;AAAA,wBACTA,EAAM,OAAO,OAAO;AAAA,kBAC1BA,EAAM,OAAO,WAAW;AAAA;AAAA;AAAA;AAAA,MAKpC6B,MACA;AAAA,4BACsB7B,EAAM,OAAO,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAO/BA,EAAM,QAAQ,CAAC;AAAA,+BACCA,EAAM,OAAO,OAAO;AAAA,iCAClBA,EAAM,OAAO,OAAO;AAAA,oBACjCA,EAAM,QAAQ,EAAE;AAAA;AAAA;AAAA,MAIpC,GChKA,SAAS8B,EAAwB,CAC/B,MAAA3B,EACA,SAAAkB,EACA,cAAAR,EACA,eAAAkB,EACA,uBAAAT,EACA,YAAAU,EACA,mBAAAC,CACF,EAQG,CACD,MAAM9C,KAAS,MAAW,EAAS,EAC7B,CAAC+C,EAAaC,CAAc,KAAI,YAAS,EAAK,EAE9CC,EAAiB,IAAM,CAC3BD,EAAe,EAAI,CACrB,EAIA,OACE,gBAAC,OAAI,UAAWhD,EAAO,aACrB,gBAACkD,EAAA,GACC,YAAa,CAACL,EACd,SAAWM,GAAgBL,EAAmB,CAACK,CAAW,EAC1D,aAAW,sBACb,EAEA,gBAACb,EAAA,EAAK,CAAC,SAAU,EAAG,IAAK,GAGvB,gBAAC,OAAI,QAAS,IAAMQ,EAAmB,CAACD,CAAW,EAAG,UAAW7C,EAAO,YACtE,gBAACsC,EAAA,EAAK,CAAC,IAAK,EAAG,UAAU,MAAM,WAAW,UAAS,sBAEjD,gBAACd,EAA0B,CAAC,MAAAR,CAAA,CAAc,CAC5C,CACF,EACA,gBAACoC,EAAA,EAAM,IAAC,EACR,gBAACd,EAAA,EAAK,CAAC,IAAK,EAAG,UAAU,MAAM,WAAW,UACxC,gBAAC1C,EAAA,EAAQ,CAAC,KAAK,aAAa,cAAY,sBACrCgD,GAAkB,IACnB,gBAAC,YAAM,IAAU,WAAYA,CAAc,CAAE,CAC/C,EACA,gBAACN,EAAA,EAAK,CAAC,IAAK,EAAG,UAAU,MAAM,WAAW,UACxC,gBAAC,WACC,gBAAC,QAAK,UAAWtC,EAAO,WAAW,gBAAc,EAAO,IAAEkC,EAAS,IACrE,EAEA,gBAAC,OAAI,UAAWlC,EAAO,YAAa,EAEpC,gBAACwC,EAAA,GAAM,CAAC,KAAK,SAAS,QAASS,EAAgB,QAAQ,YAAY,KAAK,UAAU,KAAK,MAAK,aAE5F,CACF,CACF,CACF,EACCF,GACC,gBAACf,EAAA,CACC,QAAS,IAAMgB,EAAe,EAAK,EACnC,MAAAhC,EACA,SAAAkB,EACA,cAAAR,EACA,uBAAAS,CAAA,CACF,CAEJ,CAEJ,CAUO,SAASkB,GAAkB,CAChC,MAAArC,EACA,gBAAAsC,EACA,SAAApB,EACA,cAAAR,EACA,uBAAAS,CACF,EAA2B,CACzB,MAAMnC,KAAS,MAAW,EAAS,EAC7B,CAAC6C,EAAaU,CAAc,KAAIC,EAAA,GAAU,EAAK,EAG/CC,EAAmB,EAEzB,OACE,gBAAC,OAAI,cAAY,yBACf,gBAACd,EAAA,CACC,MAAA3B,EACA,SAAAkB,EACA,cAAAR,EACA,eAAgB4B,EAAgB,OAChC,uBAAAnB,EACA,YAAAU,EACA,mBAAoBU,CAAA,CACtB,EACCV,GACC,gBAACP,EAAA,EAAK,CAAC,IAAK,EAAG,UAAU,UACvB,gBAAC,OAAI,UAAWtC,EAAO,eAAgB,cAAY,2BAChDsD,EAAgB,IAAKI,GAAkB,CACtC,MAAMC,EAAa,MAAM,KAAKD,EAAc,WAAW,EACvD,IAAIE,EAAcD,EAAW,IAAI,CAAC,CAACjD,EAAOkD,CAAW,KAAO,CAC1D,MAAO,GAAGlD,EAAM,CAAC,KAAKA,EAAM,CAAC,IAC7B,MAAOkD,EAAY,MACnB,WAAYA,EAAY,SAAQ,MAAyBlD,EAAM,CAAC,CAAC,EAAI+C,CACvE,EAAE,EAEF,MAAMI,EAAiBD,EAAY,OAAQE,GAAOA,EAAG,KAAK,EACpDC,EAAoBH,EAAY,OAAQE,GAAO,CAACA,EAAG,KAAK,EAE9D,OACE,gBAAC,OAAI,UAAW9D,EAAO,YAAa,OAAK,YAAS,GAC/C2D,EAAW,OAAS,EACnB,gCACGE,EAAe,OAAS,EACvB,gBAACG,EAAA,GACC,KAAMH,EAAe,IAAKC,GAAOA,EAAG,KAAK,EACzC,UAAW9D,EAAO,UAClB,cAAe,CAACiE,EAAGlC,IAAU8B,EAAe9B,CAAK,EAAE,WACrD,EAEA,gBAAC,OAAI,aAAW,MAAG/B,EAAO,UAAWA,EAAO,UAAU,GAAG,oBAAkB,EAE7E,gBAAC,OAAI,UAAWA,EAAO,eAAgB,EACvC,gBAACgE,EAAA,GACC,KAAMD,EAAkB,IAAKD,GAAOA,EAAG,KAAK,EAC5C,UAAW9D,EAAO,UAClB,cAAe,CAACiE,EAAGlC,IAAUgC,EAAkBhC,CAAK,EAAE,WACxD,CACF,EAEA,gBAAC,OAAI,UAAW/B,EAAO,WAAW,WAAS,CAE/C,CAEJ,CAAC,CACH,CACF,CAEJ,CAEJ,CAEA,MAAM,GAAaa,IAA0B,CAC3C,aAAW;AAAA,aACAA,EAAM,OAAO,KAAK;AAAA,IAE7B,cAAY;AAAA;AAAA,IAGZ,cAAY;AAAA;AAAA,IAGZ,eAAa;AAAA;AAAA;AAAA,WAGJA,EAAM,QAAQ,CAAC;AAAA;AAAA,+BAEKA,EAAM,OAAO,OAAO;AAAA;AAAA,0BAEzBA,EAAM,WAAW,MAAM;AAAA;AAAA,eAElCA,EAAM,QAAQ,GAAK,GAAK,GAAK,CAAC;AAAA,IAE3C,aAAW;AAAA;AAAA;AAAA,IAIX,kBAAgB;AAAA;AAAA,wBAEMA,EAAM,OAAO,OAAO;AAAA,IAE1C,eAAa;AAAA;AAAA;AAAA,WAGJA,EAAM,QAAQ,CAAC;AAAA;AAAA;AAAA,kBAGRA,EAAM,OAAO,WAAW;AAAA,eAC3BA,EAAM,QAAQ,CAAC;AAAA;AAAA,qBAETA,EAAM,MAAM,aAAa,CAAC;AAAA,wBACvBA,EAAM,OAAO,OAAO;AAAA,IAE1C,kBAAgB;AAAA,eACHA,EAAM,QAAQ,EAAG,EAAG,EAAG,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,WAK5BA,EAAM,QAAQ,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,cAKZA,EAAM,QAAQ,CAAC;AAAA,4BACDA,EAAM,QAAQ,CAAC;AAAA,eAC5BA,EAAM,QAAQ,CAAC;AAAA,+BACCA,EAAM,OAAO,OAAO;AAAA;AAAA,IAGjD,eAAa;AAAA;AAAA;AAAA,wBAGSA,EAAM,OAAO,UAAU;AAAA,mBAC5BA,EAAM,QAAQ,CAAC;AAAA,oBACdA,EAAM,QAAQ,CAAC;AAAA,GAEnC,G,+DCnOO,MAAMqD,GAA4C,CACvD/B,EACAgC,IACG,CACH,KAAM,CAAE,YAAAC,EAAa,UAAWC,EAAe,MAAOC,CAAY,KAAIC,GAAA,GAAsBpC,CAAsB,EAC5GqC,EAASJ,GAAa,oBAEtB,CAAE,sBAAAK,CAAsB,KAAIC,GAAA,GAAsB,EAGlD,CAAE,UAAAxD,EAAW,UAAAyD,CAAU,KAAI,WAAQ,IAClCH,EAOE,CACL,UAAWA,EAAO,SAAQ,UAAe,OAA2BA,EAAO,KAAK,CAAC,EAAI,OACrF,UAAWA,EAAO,WAAa,CAAC,CAClC,EATS,CACL,UAAW,CAAC,EACZ,UAAW,MACb,EAOD,CAACA,CAAM,CAAC,EAIL9C,EAA4CR,EAC9CD,KAAiB,OAAqBC,CAAS,CAAC,EAChD,IAAI,IAGF0D,EACJD,EAAU,OAAO,CAACxD,EAAKe,IACdf,EAAI,IAAIe,EAAS,KAAMA,CAAQ,EACrC,IAAI,GAAuB,GAAK,IAAI,IAGnC,CACJ,MAAO2C,EAAc,IAAI,IACzB,QAASC,EACT,MAAOC,CACT,KAAIC,EAAA,GAAS,SAAY,CACvB,GAAK9D,EAGL,OAAO,MAAMuD,EAAsBvD,EAAWiD,CAAkB,CAClE,EAAG,CAACjD,EAAWiD,CAAkB,CAAC,EAElC,MAAO,CACL,cAAAzC,EACA,gBAAAkD,EACA,YAAAC,EACA,QAASR,GAAiBS,EAC1B,MAAOR,GAAeS,CACxB,CACF,ECtDA,SAASE,GAAkC,CACzC,mBAAAC,EACA,mBAAAf,EACA,UAAAgB,CACF,EAIG,CACD,MAAMnF,KAAS,MAAW,EAAS,EAE7B,CAAE,cAAA0B,EAAe,gBAAAkD,EAAiB,YAAAC,EAAa,QAAAO,EAAS,MAAAC,CAAM,EAAInB,GACtEgB,EAAmB,KACnBf,CACF,EAEA,OAAIkB,EAEA,gBAACC,EAAA,EAAK,CAAC,MAAM,yCAAyC,SAAS,SAC5DD,EAAM,OACT,EAIAD,EACK,gBAACG,EAAA,EAAkB,CAAC,KAAK,4BAA6B,GAGjCV,EAAY,KAAO,EAG/C,gBAAC,OAAI,UAAW7E,EAAO,iBACpB,CAACmF,GACA,gBAAC7C,EAAA,EAAK,CAAC,UAAU,MAAM,WAAW,UAChC,gBAAC,OAAI,UAAWtC,EAAO,sBAAuB,EAC9C,gBAAC,OAAI,UAAWA,EAAO,kBACpB,IAAI,iBAEL,gBAAC,OAAI,IAAKkF,EAAmB,IAAK,IAAI,GAAG,UAAWlF,EAAO,IAAK,EAC/DkF,EAAmB,IACtB,EACA,gBAAC,OAAI,UAAWlF,EAAO,uBAAwB,CACjD,EAEF,gBAACsC,EAAA,EAAK,CAAC,IAAK,EAAG,UAAU,UACtB,MAAM,KAAKuC,EAAY,QAAQ,CAAC,EAAE,IAAI,CAAC,CAACW,EAASlC,CAAe,IAAM,CACrE,MAAMtC,EAAQU,EAAc,IAAI8D,CAAO,EACjCtD,EAAWlB,GAAO,UAAY4D,EAAgB,IAAI5D,EAAM,QAAQ,EAEtE,GAAI,CAACA,EACH,OAAO,KAET,GAAI,CAACkB,EACH,MAAM,IAAI,MAAM,oBAAoB,EAEtC,OACE,gBAACmB,GAAA,CACC,gBAAAC,EACA,MAAAtC,EACA,SAAAkB,EACA,IAAKsD,EACL,cAAA9D,EACA,uBAAwBwD,EAAmB,KAC7C,CAEJ,CAAC,CACH,CACF,EACE,IACN,CAIA,YAAe,MAAkBD,EAAiC,EAE5D,GAAapE,IAA0B,CAC3C,mBAAiB;AAAA;AAAA;AAAA,WAGRA,EAAM,QAAQ,CAAC;AAAA;AAAA,IAGxB,yBAAuB;AAAA;AAAA,aAEZA,EAAM,QAAQ,CAAC;AAAA,wBACJA,EAAM,OAAO,UAAU;AAAA,IAE7C,oBAAkB;AAAA;AAAA,IAGlB,0BAAwB;AAAA;AAAA;AAAA;AAAA,wBAIFA,EAAM,OAAO,UAAU;AAAA,IAE7C,OAAK;AAAA,mBACYA,EAAM,QAAQ,CAAC;AAAA,aACrBA,EAAM,QAAQ,CAAC;AAAA,cACdA,EAAM,QAAQ,CAAC;AAAA,oBACTA,EAAM,QAAQ,CAAC;AAAA,GAEnC,E,mJCtGY4E,GAAAA,IAEVA,EAAA,0BAA4B,8BAC5BA,EAAA,4BAA8B,gCAG9BA,EAAA,mBAAqB,uBACrBA,EAAA,iBAAmB,qBACnBA,EAAA,mBAAqB,sBACrBA,EAAA,mBAAqB,uBACrBA,EAAA,mBAAqB,uBAGrBA,EAAA,2BAA6B,+BAC7BA,EAAA,yBAA2B,6BAC3BA,EAAA,2BAA6B,6BAC7BA,EAAA,2BAA6B,+BAC7BA,EAAA,eAAiB,kBAGjBA,EAAA,yBAA2B,6BAC3BA,EAAA,2BAA6B,gCAC7BA,EAAA,6BAA+B,kCAC/BA,EAAA,yBAA2B,6BAC3BA,EAAA,2BAA6B,+BAG7BA,EAAA,cAAgB,iBAChBA,EAAA,YAAc,eACdA,EAAA,cAAgB,iBAGhBA,EAAA,eAAiB,mBACjBA,EAAA,iBAAmB,qBACnBA,EAAA,iBAAmB,qBACnBA,EAAA,iBAAmB,qBAnCTA,IAAAA,GAAA,IAsCAC,GAAAA,IAEVA,EAAA,gBAAkB,oBAClBA,EAAA,cAAgB,kBAChBA,EAAA,gBAAkB,oBAClBA,EAAA,gBAAkB,oBAElBA,EAAA,wBAA0B,6BAC1BA,EAAA,sBAAwB,2BACxBA,EAAA,wBAA0B,6BAC1BA,EAAA,wBAA0B,6BAVhBA,IAAAA,GAAA,IAaZ,MAAMC,EAAkB,GAMjB,SAASC,GAAwD,CA6BtE,MA1BgD,CAE9C,CAAC,mBAAiC,EAAG,CAACD,EAAiB,aAAI,cAAc,sBAAoB,kBAAkB,CAAC,EAChH,CAAC,iBAA+B,EAAG,CAACA,EAAiB,aAAI,cAAc,sBAAoB,gBAAgB,CAAC,EAC5G,CAAC,mBAAiC,EAAG,CAACA,EAAiB,aAAI,cAAc,sBAAoB,kBAAkB,CAAC,EAChH,CAAC,mBAAiC,EAAG,CAACA,EAAiB,aAAI,cAAc,sBAAoB,kBAAkB,CAAC,EAGhH,CAAC,4BAAyC,EAAG,CAC3CA,EACA,aAAI,cAAc,sBAAoB,yBAAyB,CACjE,EACA,CAAC,0BAAuC,EAAG,CACzCA,EACA,aAAI,cAAc,sBAAoB,wBAAwB,CAChE,EACA,CAAC,4BAAyC,EAAG,CAC3CA,EACA,aAAI,cAAc,sBAAoB,yBAAyB,CACjE,EACA,CAAC,4BAAyC,EAAG,CAC3CA,EACA,aAAI,cAAc,sBAAoB,yBAAyB,CACjE,CACF,CAGF,CAEO,SAASE,GAA6D,CAC3E,KAAM,CACJ,qBAAAC,EACA,oBAAAC,EACA,sBAAuBC,CACzB,KAAI,MAAgB,EAIdC,KAA2B,MAA4BH,CAAqB,EAC5EI,KAAsB,MAAwBJ,CAAqB,EAyEzE,MAtEiD,CAE/C,CAAC,6BAA4C,EAAG,CAC9CH,EACA,aAAI,cAAc,sBAAoB,iCAAiC,CACzE,EACA,CAAC,+BAA8C,EAAG,CAChDI,EACA,aAAI,cAAc,sBAAoB,kCAAkC,CAC1E,EAEA,CAAC,sBAAqC,EAAG,CAACA,EAAqB,aAAI,cAAcE,EAAyB,MAAM,CAAC,EACjH,CAAC,oBAAmC,EAAG,CAACN,EAAiB,aAAI,cAAcM,EAAyB,IAAI,CAAC,EACzG,CAAC,qBAAqC,EAAG,CAACF,EAAqB,aAAI,cAAcE,EAAyB,MAAM,CAAC,EACjH,CAAC,sBAAqC,EAAG,CAACF,EAAqB,aAAI,cAAcE,EAAyB,MAAM,CAAC,EAEjH,CAAC,sBAAqC,EAAG,CACvCD,EACA,aAAI,cAAcC,EAAyB,IAAI,CACjD,EAEA,CAAC,8BAA6C,EAAG,CAC/CF,EACA,aAAI,cAAcE,EAAyB,MAAM,CACnD,EACA,CAAC,4BAA2C,EAAG,CAACN,EAAiB,aAAI,cAAcM,EAAyB,IAAI,CAAC,EACjH,CAAC,4BAA6C,EAAG,CAC/CF,EACA,aAAI,cAAcE,EAAyB,MAAM,CACnD,EACA,CAAC,8BAA6C,EAAG,CAC/CF,EACA,aAAI,cAAcE,EAAyB,MAAM,CACnD,EAEA,CAAC,4BAA2C,EAAG,CAC7CF,EACA,aAAI,cAAcE,EAAyB,MAAM,CACnD,EACA,CAAC,+BAA6C,EAAG,CAC/CN,EACA,aAAI,cAAcM,EAAyB,IAAI,CACjD,EACA,CAAC,iCAA+C,EAAG,CACjDF,EACA,aAAI,cAAcE,EAAyB,MAAM,CACnD,EACA,CAAC,4BAA2C,EAAG,CAC7CF,EACA,aAAI,cAAcE,EAAyB,MAAM,CACnD,EACA,CAAC,8BAA6C,EAAG,CAC/CD,EACA,aAAI,cAAcC,EAAyB,IAAI,CACjD,EACA,CAAC,iBAAiC,EAAG,CACnCD,EACA,aAAI,cAAcC,EAAyB,aAAa,WAAW,CACrE,EAEA,CAAC,gBAAgC,EAAG,CAACF,EAAqB,aAAI,cAAcG,EAAoB,MAAM,CAAC,EACvG,CAAC,cAA8B,EAAG,CAACP,EAAiB,aAAI,cAAcO,EAAoB,IAAI,CAAC,EAC/F,CAAC,gBAAgC,EAAG,CAACH,EAAqB,aAAI,cAAcG,EAAoB,MAAM,CAAC,EAEvG,CAAC,oBAAmC,EAAG,CAACH,EAAqB,aAAI,cAAcE,EAAyB,MAAM,CAAC,EAC/G,CAAC,kBAAiC,EAAG,CAACN,EAAiB,aAAI,cAAcM,EAAyB,IAAI,CAAC,EACvG,CAAC,oBAAmC,EAAG,CAACF,EAAqB,aAAI,cAAcE,EAAyB,MAAM,CAAC,EAC/G,CAAC,oBAAmC,EAAG,CAACF,EAAqB,aAAI,cAAcE,EAAyB,MAAM,CAAC,CACjH,CAGF,CAEO,SAASE,EAAuBxG,EAAqC,CAC1E,MAAMH,EAAYqG,EAA4B,EAE9C,SAAO,WAAQ,IACNrG,EAAUG,CAAM,EACtB,CAACH,EAAWG,CAAM,CAAC,CACxB,CAEO,SAASyG,EAAyBvH,EAA0C,CACjF,MAAMW,EAAYqG,EAA4B,EAE9C,SAAO,WAAQ,IACNhH,EAAQ,IAAKc,GAAWH,EAAUG,CAAM,CAAC,EAC/C,CAACH,EAAWX,CAAO,CAAC,CACzB,CAEO,SAASwH,EAAsB1G,EAAoC,CACxE,MAAMH,EAAYoG,EAAwB,EAC1C,SAAO,WAAQ,IAAMpG,EAAUG,CAAM,EAAG,CAACH,EAAWG,CAAM,CAAC,CAC7D,C,kDCpMO,SAAS4E,EAAsB+B,EAAuBC,EAAmB,CAC9E,MAAMC,EAAc,kBAAgB,UAAU,6BAA6B,SAASF,GAAgB,GAAI,CACtG,GAAGC,EACH,KAAM,CAACD,CACT,CAAC,EAED,MAAO,CACL,GAAGE,EAEH,MAAOA,EAAY,KACrB,CACF,C,uGClBO,MAAMC,EAAe,IAAM,IAAI,IAAO,IAAI,IAAI,iBAAiD,CAAC,E,eCUvG,IAAIC,EAMJ,SAASC,GAAa,CACpB,IAAIC,EAEJ,GAAIF,IAAiB,OACnB,GAAI,CACFE,EAASH,EAAa,EACtBC,EAAeG,EAAA,GAAiCD,CAAM,CACxD,OAASE,EAAP,CACIA,aAAa,UACf,KAASA,CAAC,CAEd,CAaF,MAAO,CAAE,cAVa,IAAM,CACtBF,GAAUF,IACZA,EAAaG,EAAA,EAAoB,EAAE,EACnCD,EAAO,UAAU,EAEjBF,EAAe,OACfE,EAAS,OAEb,CAEuB,CACzB,CAEA,SAASG,EACPC,EACAxG,EACuD,CACvD,GAAI,CAACwG,EACH,MAAM,IAAI,MAAM,qCAAqC,EAGvD,GAAI,CAACN,EACH,MAAM,IAAI,MAAM,wCAAwC,CAE5D,CAEO,SAAShC,GAAwB,CACtC,MAAMuC,KAAuB,MAAW,IAAgB,uCAAuC,KAE/F,aAAU,IAAM,CACd,GAAIA,EAAsB,CACxB,KAAM,CAAE,cAAAC,CAAc,EAAIP,EAAW,EACrC,OAAOO,EAGT,MAAO,IAAM,IACf,EAAG,CAACD,CAAoB,CAAC,EAEzB,MAAME,KAAoB,eACxB,MAAOjG,EAAwBkG,IAAqC,CAClEL,EAAeE,EAAsBP,CAAY,EAEjD,MAAMW,EAAY,YAAY,IAAI,EAE5BC,EAAS,MAAMZ,EAAa,kBAAkBxF,EAAWkG,CAAW,EAEpEG,EAAY,YAAY,IAAI,EAAIF,EAEtC,eAAQ,4BAA4BE,OAAgB,CAClD,aAAcA,EAAU,SAAS,EACjC,iBAAkBH,EAAY,OAAO,SAAS,EAE9C,oBAAqBlG,EAAU,QAAQ,OAAO,SAAS,GAAK,GAC9D,CAAC,EAEMoG,CACT,EACA,CAACL,CAAoB,CACvB,EAEMxC,KAAwB,eAC5B,MAAOvD,EAAwBsG,IAA+B,CAC5DT,EAAeE,EAAsBP,CAAY,EAEjD,MAAMW,EAAY,YAAY,IAAI,EAE5BC,EAAS,MAAMZ,EAAa,sBAAsBxF,EAAWsG,CAAgB,EAE7ED,EAAY,YAAY,IAAI,EAAIF,EAEtC,eAAQ,yBAAyBE,OAAgB,CAC/C,aAAcA,EAAU,SAAS,EACjC,sBAAuBC,EAAiB,OAAO,SAAS,EAExD,oBAAqBtG,EAAU,QAAQ,OAAO,SAAS,GAAK,GAC9D,CAAC,EAEMoG,CACT,EACA,CAACL,CAAoB,CACvB,EAEA,MAAO,CAAE,kBAAAE,EAAmB,sBAAA1C,CAAsB,CACpD,C,wNCvGA,MAAMgD,EAA+B,CACnCrH,EACAsH,IAEA,OAAO,QAAQtH,GAAY,CAAC,CAAC,EAAE,OAC7B,CAACuH,EAAK,CAACC,EAAMhH,CAAK,IAAM,CACtB,GAAG+G,EACH,CACE,KAAAC,EACA,MAAAhH,EACA,SAAU8G,EAAU,KAAgB,MAAQ,KAAgB,KAC9D,CACF,EACA,CAAC,CACH,EAEIG,EAA2BC,GAAqDA,EAAgB,MAEhGC,EAA6BC,IAChCA,GAAO,CAAC,GAAG,IAAIH,CAAuB,EAE5BI,EAA4C,CACvD,KAAM,GACN,MAAO,GACP,SAAU,KAAgB,KAC5B,EAGaC,EAAiB,CAAC,iBAAkB,WAAW,EAG/CC,EAAuB,CAClC,CAAE,MAAO,iBAAkB,MAAO,gBAAiB,EACnD,CAAE,MAAO,YAAa,MAAO,WAAY,EACzC,CAAE,MAAO,gBAAiB,MAAO,KAAM,CACzC,EAEaC,EAA0B,CACrC,GAAI,GACJ,iBAAkB,GAClB,QAASF,EACT,gBAAiB,CAAC,EAClB,OAAQ,CAAC,EACT,SAAU,GACV,SAAU,GACV,gBAAiB,GACjB,eAAgB,GAChB,mBAAoB,GACpB,oBAAqB,GACrB,kBAAmB,CAAC,CACtB,EAGO,SAASG,EAA2BrH,EAA2B,CACpE,MAAO,CACL,MAAI,YAAS,QAAQ,EACrB,GAAGA,EACH,QAASA,EAAM,QAAU,CAAC,GAAG,IAAIqH,CAA0B,CAC7D,CACF,CAGO,MAAMC,EAAwBtH,GAAwD,CAC3F,GAAI,CAACA,EACH,OAAOoH,EAGT,MAAMvG,EAAK,OAAQb,EAAQA,EAAM,MAAK,YAAS,QAAQ,EAEvD,GAAI,OAAO,KAAKA,CAAK,EAAE,SAAW,EAEhC,MADoB,CAAE,GAAGoH,EAAY,GAAAvG,CAAG,EAI1C,MAAM0G,EAA4B,CAAC,EACnCvH,EAAM,QAAQ,QAASwH,GAAa,CAClC,MAAMC,EAAeH,EAAqBE,CAAQ,EAClDD,EAAW,KAAKE,CAAY,CAC9B,CAAC,EAED,MAAMC,EACJ1H,EAAM,iBAAiB,IAAKR,IAAa,CAAE,KAAMA,EAAQ,CAAC,EAAG,SAAUA,EAAQ,CAAC,EAAG,MAAOA,EAAQ,CAAC,CAAE,EAAE,GAAK,CAAC,EACzGJ,EAAWY,EAAM,UAAU,IAAKR,MAAY,SAAsB,MAAaA,CAAO,CAAC,CAAC,GAAK,CAAC,EAEpG,MAAO,CACL,GAAAqB,EAEA,gBAAiB,CACf,GAAGzB,EACH,GAAGsI,EACH,GAAGjB,EAA6BzG,EAAM,MAAO,EAAK,EAClD,GAAGyG,EAA6BzG,EAAM,SAAU,EAAI,CACtD,EACA,SAAUA,EAAM,UAAY,GAC5B,SAAUA,EAAM,UAAY,GAC5B,iBAAkB,MAAM,QAAQA,EAAM,QAAQ,GAAKA,EAAM,SAAS,OAAS,EAC3E,QAASA,EAAM,UAAY,OAC3B,gBAAiB,CAACA,EAAM,WAAYA,EAAM,eAAgBA,EAAM,eAAe,EAAE,KAAK,OAAO,EAC7F,eAAgBA,EAAM,YAAc,GACpC,mBAAoBA,EAAM,gBAAkB,GAC5C,oBAAqBA,EAAM,iBAAmB,GAC9C,OAAQuH,EACR,kBAAmBvH,EAAM,qBAAuB,CAAC,CACnD,CACF,EAGa2H,EAAuB,CAClCxG,EACAyG,EACAC,IACU,CACV,MAAMC,KAAW,MAAkBF,EAAY,IAAM,GAAIC,CAAS,EAE5D,CACJ,iBAAAE,EACA,QAAAC,EACA,gBAAAC,EACA,eAAAC,EACA,mBAAAC,EACA,oBAAAC,GACA,SAAAlH,EACF,EAAI0G,EAGES,EAAsB,OAEtBC,GAAWP,EAAmBC,EAAUK,EAGxCE,GADoBN,GAAmBC,EACNA,EAAiBG,EAGlDG,GADwBP,GAAmBE,EACFA,EAAqBE,EAG9DI,GADyBR,GAAmBG,GACDA,GAAsBC,EACjEK,GAA+Cd,EAAY,iBAC7D,OAAQ5H,GAAUA,EAAM,MAAQA,EAAM,OAASA,EAAM,QAAQ,EAC9D,IAAI,CAAC,CAAE,KAAA4G,EAAM,SAAAjH,EAAU,MAAAC,CAAM,IAAM,CAACgH,EAAMjH,EAAUC,CAAK,CAAC,EAEvD+I,EAASf,EAAY,QAAQ,IAAKJ,GACtCG,EAAqBxG,EAAwBqG,EAAUK,CAAS,CAClE,EAEMe,EAAiB,CACrB,GAAId,GAAY,CAAC,EACjB,SAAUF,EAAY,SACtB,SAAAU,GACA,gBAAAI,GACA,MAAO,OACP,SAAU,OACV,WAAAH,GACA,eAAAC,GACA,gBAAAC,GACA,OAAAE,EACA,oBAAqBf,EAAY,kBACjC,SAAA1G,EACF,EAKA,OAAIC,IAA2B,MAC7ByH,EAAQ,SAAWhB,EAAY,iBAAiB,IAAI,CAAC,CAAE,KAAAhB,EAAM,SAAAjH,EAAU,MAAAC,CAAM,IAAM,GAAGgH,IAAOjH,IAAWC,GAAO,EAC/GgJ,EAAQ,gBAAkB,SAE1BA,EAAQ,mBAAkB,MAAkBA,CAAO,EACnDA,EAAQ,SAAW,QAGjBhB,EAAY,WACdgB,EAAQ,SAAWhB,EAAY,UAG1BgB,CACT,EAEaC,EAA2BC,IAA0C,CAChF,MAAOA,EACP,MAAOA,CACT,GAEaC,EAA6B/B,IACvCA,GAAO,CAAC,GAAG,IAAI6B,CAAuB,EAE5BG,EAA0BlC,GAAiE,CAEtG,GAAIA,IAAoB,KAIxB,OAAKA,EAIED,EAAwBC,CAAe,GAAK,GAH1C,EAIX,EAEamC,EACXC,GAEKA,EAIEnC,EAA0BmC,CAAgB,EAHxC,CAAC,EAML,SAASC,EAAsBC,EAAkB,CACtD,OAAIA,EAAS,SAAW,EACf,MAGF,MAA0BA,CAAQ,GAAK,sDAChD,CAGO,MAAMC,EAA0BjK,GAC9BA,EAAS,IAAKI,GAAY,CAC/B,KAAM,CAACoH,EAAMjH,EAAUC,CAAK,EAAIJ,EAChC,MAAO,GAAGoH,IAAOjH,IAAWC,GAC9B,CAAC,EAGU0J,EAA0B,CAACC,EAAwBC,IAA0B,CACxF,GAAID,EAAe,SAAW,EAC5B,MAAO,GAGT,MAAME,EAAsBN,EAAsBI,CAAc,EAC1DG,EAAqBP,EAAsBK,CAAa,EAE9D,GAAIC,IAAwB,GAC1B,OAAOA,EAGT,GAAIC,IAAuB,GACzB,OAAOA,EAGT,MAAMC,KAAiB,MAAqBJ,CAAc,EACpDK,KAAgB,MAAqBJ,CAAa,EAIxD,OAFuCI,IAAkB,GAAKD,EAAiBC,EAEvC,8DAAgE,EAC1G,C,oGCtPA,MAAMC,EAAgE,CACpE,CAAC,KAAgB,KAAK,EAAG,CAACC,EAAIC,IAAOD,IAAOC,EAC5C,CAAC,KAAgB,QAAQ,EAAG,CAACD,EAAIC,IAAOD,IAAOC,EAC/C,CAAC,KAAgB,KAAK,EAAG,CAACD,EAAIC,IAAO,EAAQD,EAAG,MAAM,IAAI,OAAOC,CAAE,CAAC,EACpE,CAAC,KAAgB,QAAQ,EAAG,CAACD,EAAIC,IAAO,CAASD,EAAG,MAAM,IAAI,OAAOC,CAAE,CAAC,CAC1E,EAEA,SAASC,EAAaxK,EAAwBE,EAAc,CAC1D,KAAM,CAACuK,EAAUC,CAAU,EAAIxK,EACzB,CAACyK,EAAYxK,EAAUyK,CAAY,EAAI5K,EAG7C,GAAIyK,IAAaE,EACf,MAAO,GAGT,MAAME,EAAgBR,EAAkBlK,CAAQ,EAChD,GAAI,CAAC0K,EACH,MAAM,IAAI,MAAM,qBAAqB1K,GAAU,EAGjD,OAAO0K,EAAcH,EAAYE,CAAY,CAC/C,CAcA,SAASE,EAAYlL,EAA2BmL,EAAiC,CAC/E,MAAMC,EAAU,IAAI,IAIdC,EAAc,IAAI,IACtBF,EAAO,IAAK7K,GAAU,CAACA,EAAO,CAAE,MAAO,GAAO,SAAU,CAAC,CAAE,CAAC,CAAC,CAC/D,EAsBA,MAAO,CAAE,QApBON,EAAS,MAAOI,GAAY,CAC1C,MAAMqD,EAAiB0H,EAAO,OAAQ7K,GAAUsK,EAAaxK,EAASE,CAAK,CAAC,EAW5E,OATAmD,EAAe,QAASnD,GAAU,CAChC,MAAMgL,EAAaD,EAAY,IAAI/K,CAAK,EAEpCgL,IACFA,EAAW,MAAQ,GACnBA,EAAW,SAAS,KAAKlL,CAAO,EAEpC,CAAC,EAEGqD,EAAe,SAAW,EACrB,IAGT2H,EAAQ,IAAIhL,EAASqD,CAAc,EAC5BA,EAAe,OAAS,EACjC,CAAC,EAEiB,QAAA2H,EAAS,YAAAC,CAAY,CACzC,CAoBA,SAASE,EAAoCC,EAASL,EAA6C,CACjG,IAAIM,EAAsC,CAAC,EAG3C,MAAMjI,EAAc0H,EAAYM,EAAK,iBAAmB,CAAC,EAAGL,CAAM,EAClE,GAAI,CAAC3H,EAAY,QACf,MAAO,CAAC,EAIV,GAAIgI,EAAK,OACP,QAAS7J,EAAQ,EAAGA,EAAQ6J,EAAK,OAAO,OAAQ7J,IAAS,CACvD,IAAI+J,EAAQF,EAAK,OAAO7J,CAAK,EACzBgK,EAAmBJ,EAAmBG,EAAOP,CAAM,EAKvD,GAFAM,EAAUA,EAAQ,OAAOE,CAAgB,EAErCA,EAAiB,QAAU,CAACD,EAAM,SACpC,MAMN,OAAID,EAAQ,SAAW,GACrBA,EAAQ,KAAK,CAAE,MAAOD,EAAM,QAAShI,EAAY,QAAS,YAAaA,EAAY,WAAY,CAAC,EAG3FiI,CACT,CAGO,SAASG,EAAe9K,EAAqC,CAClE,SAAS8K,EAAehL,EAAoB,CAC1CA,EAAM,mBAAkB,MAAkBA,CAAK,EAC/C,OAAOA,EAAM,SACb,OAAOA,EAAM,MACb,OAAOA,EAAM,SACbA,EAAM,QAAQ,QAAQgL,CAAc,CACtC,CAEA,MAAMC,EAAsB,gBAAgB/K,CAAS,EACrD8K,OAAAA,EAAeC,CAAmB,EAE3BA,CACT,CAMA,SAASC,EACPrD,EACA7H,EACAoG,EACqB,CACrB,MAAM+E,EAAsC,CAAC,EAE7C,OAAO/E,EAAY,OAAO,CAACO,EAAKyE,IAAU,CAExC,MAAMC,EAAiBD,EAAM,OAAO,OAAQE,GAAU,CACpD,MAAMf,EAAS,OAAO,QAAQe,EAAM,MAAM,EAC1C,OAAOX,EAAmB9C,EAAW0C,CAAM,EAAE,KAAMgB,GAAkBA,EAAc,QAAUvL,CAAK,CACpG,CAAC,EAGD,OAAIqL,EAAe,QACjB1E,EAAI,KAAK,CACP,GAAGyE,EACH,OAAQC,CACV,CAAC,EAGI1E,CACT,EAAGwE,CAAc,CACnB,CAQA,SAASK,EACPC,EACAC,EACAC,EACA,CACA,MAAMC,KAAuB,SAAM,CAAC,EAAGH,EAAaE,CAAyB,EAEvEE,KAAgD,QAAKD,EAAsB,CAC/E,WACA,WACA,aACA,iBACA,kBACA,qBACF,CAAC,EAgCD,SA7BkB,UAChBC,EACA,CAACC,EAAsC,CAAC,EAAGC,EAAaC,IAAa,CACnE,MAAMC,EAAiBF,IAAgB,OAGjCG,EAA6BD,GAAkBP,EAAWM,CAAQ,IAAM,OAExEG,EAA+BF,GAAkBP,EAAWM,CAAQ,IAAM,GAE1EI,EACJJ,IAAa,YACbC,MACA,WAAQP,EAAWM,CAAQ,CAAC,GAC5BN,EAAWM,CAAQ,GAAG,SAAW,EAKnC,OAFEE,GAA8BC,GAAgCC,KAI9DN,EAAoBE,CAAQ,EAAID,GAG3BD,CACT,EACA,CAAC,CACH,CAGF,CAKO,SAASO,EAAsCC,EAAc,CAClE,MAAO,CACL,GAAGA,EACH,OAAQA,EAAO,QAAQ,IAAKxB,GAAU,CACpC,MAAMgB,EAAsBN,EAAuBc,EAAQxB,CAAK,EAEhE,OAAOuB,EAAqB,CAC1B,GAAGvB,EACH,GAAGgB,CACL,CAAC,CACH,CAAC,CACH,CACF,C,kGC5OO,MAAMS,EAAmC,CAC9CpL,EACAqL,EACA3E,IACU,CAEV,GAAI,CADa4E,EAAkBD,EAAiB,IAAM,GAAI3E,CAAS,EAErE,MAAM,IAAI,MAAM,0BAA0B2E,EAAiB,KAAK,EAGlE,SAASE,EAAeC,EAAkC,CACxD,IAAIC,EAAsBD,EAE1B,GAAIA,EAAa,KAAOH,EAAiB,GAAI,CAC3C,MAAMK,KAAW,MAAqB1L,EAAwBqL,EAAkB3E,CAAS,EACzF+E,KAAe,QACb,CACE,GAAGD,EACH,GAAGE,CACL,EACA,IACF,EAGF,SAAO,QACL,CACE,GAAGD,EACH,OAAQD,EAAa,QAAQ,IAAID,CAAc,CACjD,EACA,IACF,CACF,CAEA,OAAOA,EAAe7E,CAAS,CACjC,EAIaiF,EAAyB,CAACC,EAAwBlF,IAAkC,CAC/F,GAAIkF,EAAU,KAAOlF,EAAU,GAC7B,MAAM,IAAI,MAAM,iCAAiC,EAGnD,SAASmF,EAAYL,EAAkC,CACrD,SAAO,QACL,CACE,GAAGA,EACH,OAAQA,EAAa,QAAQ,OAAO,CAAChG,EAAe,CAAC,EAAG3G,KAClDA,EAAM,KAAO+M,EAAU,IAI3BpG,EAAI,KAAKqG,EAAYhN,CAAK,CAAC,EACpB2G,GACN,CAAC,CAAC,CACP,EACA,IACF,CACF,CAEA,OAAOqG,EAAYnF,CAAS,CAC9B,EAGaoF,EAAwB,CACnC9L,EACAqL,EACAf,EACA5D,IACU,CACV,MAAMgF,KAAW,MAAqB1L,EAAwBqL,EAAkB3E,CAAS,EAEzF,SAASqF,EAAWP,EAAwC,CAC1D,OAAIA,EAAa,KAAOlB,EAAY,GAC3B,CACL,GAAGkB,EAGH,OAAQA,EAAa,QAAQ,OAAOE,CAAQ,CAC9C,EAGK,CACL,GAAGF,EACH,OAAQA,EAAa,QAAQ,IAAIO,CAAU,CAC7C,CACF,CAEA,SAASC,EAAcR,EAAkC,CACvD,SAAO,QACL,CACE,GAAGA,EACH,OAAQA,EAAa,QAAQ,IAAIQ,CAAa,CAChD,EACA,IACF,CACF,CAEA,OAAOA,EAAcD,EAAWrF,CAAS,CAAC,CAC5C,EAEO,SAAS4E,EAAkB5L,EAAYgH,EAAiD,CAC7F,OAAOA,EAAU,KAAOhH,EAAKgH,EAAYA,EAAU,QAAQ,KAAM7H,GAAUyM,EAAkB5L,EAAIb,CAAK,CAAC,CACzG,C","sources":["webpack://grafana/./public/app/features/alerting/unified/components/Authorize.tsx","webpack://grafana/./public/app/features/alerting/unified/components/MetaText.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/Matchers.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/notificaton-preview/route.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/notificaton-preview/NotificationPolicyMatchers.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/notificaton-preview/NotificationRouteDetailsModal.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/notificaton-preview/NotificationRoute.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/notificaton-preview/useAlertmanagerNotificationRoutingPreview.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/notificaton-preview/NotificationPreviewByAlertManager.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAbilities.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertmanagerConfig.ts","webpack://grafana/./public/app/features/alerting/unified/createRouteGroupsMatcherWorker.ts","webpack://grafana/./public/app/features/alerting/unified/useRouteGroupsMatcher.ts","webpack://grafana/./public/app/features/alerting/unified/utils/amroutes.ts","webpack://grafana/./public/app/features/alerting/unified/utils/notification-policies.ts","webpack://grafana/./public/app/features/alerting/unified/utils/routeTree.ts"],"sourcesContent":["import { chain, filter } from 'lodash';\nimport React, { PropsWithChildren } from 'react';\n\nimport {\n  Abilities,\n  Action,\n  AlertmanagerAction,\n  AlertSourceAction,\n  useAlertSourceAbilities,\n  useAllAlertmanagerAbilities,\n} from '../hooks/useAbilities';\n\ninterface AuthorizeProps extends PropsWithChildren {\n  actions: AlertmanagerAction[] | AlertSourceAction[];\n}\n\nexport const Authorize = ({ actions, children }: AuthorizeProps) => {\n  const alertmanagerActions = filter(actions, isAlertmanagerAction) as AlertmanagerAction[];\n  const alertSourceActions = filter(actions, isAlertSourceAction) as AlertSourceAction[];\n\n  if (alertmanagerActions.length) {\n    return <AuthorizeAlertmanager actions={alertmanagerActions}>{children}</AuthorizeAlertmanager>;\n  }\n\n  if (alertSourceActions.length) {\n    return <AuthorizeAlertsource actions={alertSourceActions}>{children}</AuthorizeAlertsource>;\n  }\n\n  return null;\n};\n\ninterface ActionsProps<T extends Action> extends PropsWithChildren {\n  actions: T[];\n}\n\nconst AuthorizeAlertmanager = ({ actions, children }: ActionsProps<AlertmanagerAction>) => {\n  const alertmanagerAbilties = useAllAlertmanagerAbilities();\n  const allowed = actionsAllowed(alertmanagerAbilties, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\nconst AuthorizeAlertsource = ({ actions, children }: ActionsProps<AlertSourceAction>) => {\n  const alertSourceAbilities = useAlertSourceAbilities();\n  const allowed = actionsAllowed(alertSourceAbilities, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\n// check if some action is allowed from the abilities\nfunction actionsAllowed<T extends Action>(abilities: Abilities<T>, actions: T[]) {\n  return chain(abilities)\n    .pick(actions)\n    .values()\n    .value()\n    .some(([_supported, allowed]) => allowed === true);\n}\n\nfunction isAlertmanagerAction(action: AlertmanagerAction) {\n  return Object.values(AlertmanagerAction).includes(action);\n}\n\nfunction isAlertSourceAction(action: AlertSourceAction) {\n  return Object.values(AlertSourceAction).includes(action);\n}\n","import { css, cx } from '@emotion/css';\nimport React, { ComponentProps, HTMLAttributes } from 'react';\n\nimport { Stack } from '@grafana/experimental';\nimport { Icon, IconName, useStyles2, Text } from '@grafana/ui';\n\ninterface Props extends HTMLAttributes<HTMLDivElement> {\n  icon?: IconName;\n  color?: ComponentProps<typeof Text>['color'];\n}\n\nconst MetaText = ({ children, icon, color = 'secondary', ...rest }: Props) => {\n  const styles = useStyles2(getStyles);\n  const interactive = typeof rest.onClick === 'function';\n\n  return (\n    <div\n      className={cx({\n        [styles.interactive]: interactive,\n      })}\n      // allow passing ARIA and data- attributes\n      {...rest}\n    >\n      <Text variant=\"bodySmall\" color={color}>\n        <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n          {icon && <Icon size=\"sm\" name={icon} />}\n          {children}\n        </Stack>\n      </Text>\n    </div>\n  );\n};\n\nconst getStyles = () => ({\n  interactive: css`\n    cursor: pointer;\n  `,\n});\n\nexport { MetaText };\n","import { css } from '@emotion/css';\nimport { take, takeRight, uniqueId } from 'lodash';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { getTagColorsFromName, useStyles2 } from '@grafana/ui';\nimport { ObjectMatcher } from 'app/plugins/datasource/alertmanager/types';\n\nimport { HoverCard } from '../HoverCard';\n\ntype MatchersProps = { matchers: ObjectMatcher[] };\n\n// renders the first N number of matchers\nconst Matchers: FC<MatchersProps> = ({ matchers }) => {\n  const styles = useStyles2(getStyles);\n\n  const NUM_MATCHERS = 5;\n\n  const firstFew = take(matchers, NUM_MATCHERS);\n  const rest = takeRight(matchers, matchers.length - NUM_MATCHERS);\n  const hasMoreMatchers = rest.length > 0;\n\n  return (\n    <span data-testid=\"label-matchers\">\n      <Stack direction=\"row\" gap={1} alignItems=\"center\">\n        {firstFew.map((matcher) => (\n          <MatcherBadge key={uniqueId()} matcher={matcher} />\n        ))}\n        {/* TODO hover state to show all matchers we're not showing */}\n        {hasMoreMatchers && (\n          <HoverCard\n            arrow\n            placement=\"top\"\n            content={\n              <>\n                {rest.map((matcher) => (\n                  <MatcherBadge key={uniqueId()} matcher={matcher} />\n                ))}\n              </>\n            }\n          >\n            <span>\n              <div className={styles.metadata}>{`and ${rest.length} more`}</div>\n            </span>\n          </HoverCard>\n        )}\n      </Stack>\n    </span>\n  );\n};\n\ninterface MatcherBadgeProps {\n  matcher: ObjectMatcher;\n}\n\nconst MatcherBadge: FC<MatcherBadgeProps> = ({ matcher: [label, operator, value] }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.matcher(label).wrapper}>\n      <Stack direction=\"row\" gap={0} alignItems=\"baseline\">\n        {label} {operator} {value}\n      </Stack>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  matcher: (label: string) => {\n    const { color, borderColor } = getTagColorsFromName(label);\n\n    return {\n      wrapper: css`\n        color: #fff;\n        background: ${color};\n        padding: ${theme.spacing(0.33)} ${theme.spacing(0.66)};\n        font-size: ${theme.typography.bodySmall.fontSize};\n\n        border: solid 1px ${borderColor};\n        border-radius: ${theme.shape.borderRadius(2)};\n      `,\n    };\n  },\n  metadata: css`\n    color: ${theme.colors.text.secondary};\n\n    font-size: ${theme.typography.bodySmall.fontSize};\n    font-weight: ${theme.typography.bodySmall.fontWeight};\n  `,\n});\n\nexport { Matchers };\n","import { RouteWithID } from '../../../../../../plugins/datasource/alertmanager/types';\n\nexport interface RouteWithPath extends RouteWithID {\n  path: string[]; // path from root route to this route\n}\n\nexport function isDefaultPolicy(route: RouteWithPath) {\n  return route.path?.length === 0;\n}\n\n// we traverse the whole tree and we create a map with <id , RouteWithPath>\nexport function getRoutesByIdMap(rootRoute: RouteWithID): Map<string, RouteWithPath> {\n  const map = new Map<string, RouteWithPath>();\n\n  function addRoutesToMap(route: RouteWithID, path: string[] = []) {\n    map.set(route.id, { ...route, path: path });\n    route.routes?.forEach((r) => addRoutesToMap(r, [...path, route.id]));\n  }\n\n  addRoutesToMap(rootRoute, []);\n  return map;\n}\n\nexport function hasEmptyMatchers(route: RouteWithID) {\n  return route.object_matchers?.length === 0;\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { Matchers } from '../../notification-policies/Matchers';\n\nimport { hasEmptyMatchers, isDefaultPolicy, RouteWithPath } from './route';\n\nexport function NotificationPolicyMatchers({ route }: { route: RouteWithPath }) {\n  const styles = useStyles2(getStyles);\n  if (isDefaultPolicy(route)) {\n    return <div className={styles.defaultPolicy}>Default policy</div>;\n  } else if (hasEmptyMatchers(route)) {\n    return <div className={styles.textMuted}>No matchers</div>;\n  } else {\n    return <Matchers matchers={route.object_matchers ?? []} />;\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  defaultPolicy: css`\n    padding: ${theme.spacing(0.5)};\n    background: ${theme.colors.background.secondary};\n    width: fit-content;\n  `,\n  textMuted: css`\n    color: ${theme.colors.text.secondary};\n  `,\n});\n","import { css, cx } from '@emotion/css';\nimport { compact } from 'lodash';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Icon, Modal, useStyles2 } from '@grafana/ui';\n\nimport { Receiver } from '../../../../../../plugins/datasource/alertmanager/types';\nimport { Stack } from '../../../../../../plugins/datasource/parca/QueryEditor/Stack';\nimport { AlertmanagerAction } from '../../../hooks/useAbilities';\nimport { AlertmanagerProvider } from '../../../state/AlertmanagerContext';\nimport { GRAFANA_DATASOURCE_NAME } from '../../../utils/datasource';\nimport { makeAMLink } from '../../../utils/misc';\nimport { Authorize } from '../../Authorize';\nimport { Matchers } from '../../notification-policies/Matchers';\n\nimport { hasEmptyMatchers, isDefaultPolicy, RouteWithPath } from './route';\n\nfunction PolicyPath({ route, routesByIdMap }: { routesByIdMap: Map<string, RouteWithPath>; route: RouteWithPath }) {\n  const styles = useStyles2(getStyles);\n  const routePathIds = route.path?.slice(1) ?? [];\n  const routePathObjects = [...compact(routePathIds.map((id) => routesByIdMap.get(id))), route];\n\n  return (\n    <div className={styles.policyPathWrapper}>\n      <div className={styles.defaultPolicy}>Default policy</div>\n      {routePathObjects.map((pathRoute, index) => {\n        return (\n          <div key={pathRoute.id}>\n            <div className={styles.policyInPath(index, index === routePathObjects.length - 1)}>\n              {hasEmptyMatchers(pathRoute) ? (\n                <div className={styles.textMuted}>No matchers</div>\n              ) : (\n                <Matchers matchers={pathRoute.object_matchers ?? []} />\n              )}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\ninterface NotificationRouteDetailsModalProps {\n  onClose: () => void;\n  route: RouteWithPath;\n  receiver: Receiver;\n  routesByIdMap: Map<string, RouteWithPath>;\n  alertManagerSourceName: string;\n}\n\nexport function NotificationRouteDetailsModal({\n  onClose,\n  route,\n  receiver,\n  routesByIdMap,\n  alertManagerSourceName,\n}: NotificationRouteDetailsModalProps) {\n  const styles = useStyles2(getStyles);\n  const isDefault = isDefaultPolicy(route);\n\n  return (\n    <AlertmanagerProvider accessType=\"notification\" alertmanagerSourceName={GRAFANA_DATASOURCE_NAME}>\n      <Modal\n        className={styles.detailsModal}\n        isOpen={true}\n        title=\"Routing details\"\n        onDismiss={onClose}\n        onClickBackdrop={onClose}\n      >\n        <Stack gap={0} direction=\"column\">\n          <div className={cx(styles.textMuted, styles.marginBottom(2))}>\n            Your alert instances are routed as follows.\n          </div>\n          <div>Notification policy path</div>\n          {isDefault && <div className={styles.textMuted}>Default policy</div>}\n          <div className={styles.separator(1)} />\n          {!isDefault && (\n            <>\n              <PolicyPath route={route} routesByIdMap={routesByIdMap} />\n            </>\n          )}\n          <div className={styles.separator(4)} />\n          <div className={styles.contactPoint}>\n            <Stack gap={1} direction=\"row\" alignItems=\"center\">\n              Contact point:\n              <span className={styles.textMuted}>{receiver.name}</span>\n            </Stack>\n            <Authorize actions={[AlertmanagerAction.UpdateContactPoint]}>\n              <Stack gap={1} direction=\"row\" alignItems=\"center\">\n                <a\n                  href={makeAMLink(\n                    `/alerting/notifications/receivers/${encodeURIComponent(receiver.name)}/edit`,\n                    alertManagerSourceName\n                  )}\n                  className={styles.link}\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  See details <Icon name=\"external-link-alt\" />\n                </a>\n              </Stack>\n            </Authorize>\n          </div>\n          <div className={styles.button}>\n            <Button variant=\"primary\" type=\"button\" onClick={onClose}>\n              Close\n            </Button>\n          </div>\n        </Stack>\n      </Modal>\n    </AlertmanagerProvider>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  textMuted: css`\n    color: ${theme.colors.text.secondary};\n  `,\n  link: css`\n    display: block;\n    color: ${theme.colors.text.link};\n  `,\n  button: css`\n    justify-content: flex-end;\n    display: flex;\n  `,\n  detailsModal: css`\n    max-width: 560px;\n  `,\n  defaultPolicy: css`\n    padding: ${theme.spacing(0.5)};\n    background: ${theme.colors.background.secondary};\n    width: fit-content;\n  `,\n  contactPoint: css`\n    display: flex;\n    flex-direction: row;\n    gap: ${theme.spacing(1)};\n    align-items: center;\n    justify-content: space-between;\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  policyPathWrapper: css`\n    display: flex;\n    flex-direction: column;\n    margin-top: ${theme.spacing(1)};\n  `,\n  separator: (units: number) => css`\n    margin-top: ${theme.spacing(units)};\n  `,\n  marginBottom: (units: number) => css`\n    margin-bottom: ${theme.spacing(theme.spacing(units))};\n  `,\n  policyInPath: (index = 0, higlight = false) => css`\n    margin-left: ${30 + index * 30}px;\n    padding: ${theme.spacing(1)};\n    margin-top: ${theme.spacing(1)};\n    border: solid 1px ${theme.colors.border.weak};\n    background: ${theme.colors.background.secondary};\n    width: fit-content;\n    position: relative;\n\n    ${\n      higlight &&\n      css`\n        border: solid 1px ${theme.colors.info.border};\n      `\n    },\n    &:before {\n      content: '';\n      position: absolute;\n      height: calc(100% - 10px);\n      width: ${theme.spacing(1)};\n      border-left: solid 1px ${theme.colors.border.weak};\n      border-bottom: solid 1px ${theme.colors.border.weak};\n      margin-top: ${theme.spacing(-2)};\n      margin-left: -17px;\n    }\n  }  `,\n});\n","import { css, cx } from '@emotion/css';\nimport { uniqueId } from 'lodash';\nimport pluralize from 'pluralize';\nimport React, { useState } from 'react';\nimport { useToggle } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, getTagColorIndexFromName, TagList, useStyles2 } from '@grafana/ui';\n\nimport { Receiver } from '../../../../../../plugins/datasource/alertmanager/types';\nimport { Stack } from '../../../../../../plugins/datasource/parca/QueryEditor/Stack';\nimport { AlertInstanceMatch } from '../../../utils/notification-policies';\nimport { CollapseToggle } from '../../CollapseToggle';\nimport { MetaText } from '../../MetaText';\nimport { Spacer } from '../../Spacer';\n\nimport { NotificationPolicyMatchers } from './NotificationPolicyMatchers';\nimport { NotificationRouteDetailsModal } from './NotificationRouteDetailsModal';\nimport { RouteWithPath } from './route';\n\nfunction NotificationRouteHeader({\n  route,\n  receiver,\n  routesByIdMap,\n  instancesCount,\n  alertManagerSourceName,\n  expandRoute,\n  onExpandRouteClick,\n}: {\n  route: RouteWithPath;\n  receiver: Receiver;\n  routesByIdMap: Map<string, RouteWithPath>;\n  instancesCount: number;\n  alertManagerSourceName: string;\n  expandRoute: boolean;\n  onExpandRouteClick: (expand: boolean) => void;\n}) {\n  const styles = useStyles2(getStyles);\n  const [showDetails, setShowDetails] = useState(false);\n\n  const onClickDetails = () => {\n    setShowDetails(true);\n  };\n\n  // @TODO: re-use component ContactPointsHoverDetails from Policy once we have it for cloud AMs.\n\n  return (\n    <div className={styles.routeHeader}>\n      <CollapseToggle\n        isCollapsed={!expandRoute}\n        onToggle={(isCollapsed) => onExpandRouteClick(!isCollapsed)}\n        aria-label=\"Expand policy route\"\n      />\n\n      <Stack flexGrow={1} gap={1}>\n        {/* TODO: fix keyboard a11y */}\n        {/* eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions */}\n        <div onClick={() => onExpandRouteClick(!expandRoute)} className={styles.expandable}>\n          <Stack gap={1} direction=\"row\" alignItems=\"center\">\n            Notification policy\n            <NotificationPolicyMatchers route={route} />\n          </Stack>\n        </div>\n        <Spacer />\n        <Stack gap={2} direction=\"row\" alignItems=\"center\">\n          <MetaText icon=\"layers-alt\" data-testid=\"matching-instances\">\n            {instancesCount ?? '-'}\n            <span>{pluralize('instance', instancesCount)}</span>\n          </MetaText>\n          <Stack gap={1} direction=\"row\" alignItems=\"center\">\n            <div>\n              <span className={styles.textMuted}>@ Delivered to</span> {receiver.name}\n            </div>\n\n            <div className={styles.verticalBar} />\n\n            <Button type=\"button\" onClick={onClickDetails} variant=\"secondary\" fill=\"outline\" size=\"sm\">\n              See details\n            </Button>\n          </Stack>\n        </Stack>\n      </Stack>\n      {showDetails && (\n        <NotificationRouteDetailsModal\n          onClose={() => setShowDetails(false)}\n          route={route}\n          receiver={receiver}\n          routesByIdMap={routesByIdMap}\n          alertManagerSourceName={alertManagerSourceName}\n        />\n      )}\n    </div>\n  );\n}\n\ninterface NotificationRouteProps {\n  route: RouteWithPath;\n  receiver: Receiver;\n  instanceMatches: AlertInstanceMatch[];\n  routesByIdMap: Map<string, RouteWithPath>;\n  alertManagerSourceName: string;\n}\n\nexport function NotificationRoute({\n  route,\n  instanceMatches,\n  receiver,\n  routesByIdMap,\n  alertManagerSourceName,\n}: NotificationRouteProps) {\n  const styles = useStyles2(getStyles);\n  const [expandRoute, setExpandRoute] = useToggle(false);\n  // @TODO: The color index might be updated at some point in the future.Maybe we should roll our own tag component,\n  // one that supports a custom function to define the color and allow manual color overrides\n  const GREY_COLOR_INDEX = 9;\n\n  return (\n    <div data-testid=\"matching-policy-route\">\n      <NotificationRouteHeader\n        route={route}\n        receiver={receiver}\n        routesByIdMap={routesByIdMap}\n        instancesCount={instanceMatches.length}\n        alertManagerSourceName={alertManagerSourceName}\n        expandRoute={expandRoute}\n        onExpandRouteClick={setExpandRoute}\n      />\n      {expandRoute && (\n        <Stack gap={1} direction=\"column\">\n          <div className={styles.routeInstances} data-testid=\"route-matching-instance\">\n            {instanceMatches.map((instanceMatch) => {\n              const matchArray = Array.from(instanceMatch.labelsMatch);\n              let matchResult = matchArray.map(([label, matchResult]) => ({\n                label: `${label[0]}=${label[1]}`,\n                match: matchResult.match,\n                colorIndex: matchResult.match ? getTagColorIndexFromName(label[0]) : GREY_COLOR_INDEX,\n              }));\n\n              const matchingLabels = matchResult.filter((mr) => mr.match);\n              const nonMatchingLabels = matchResult.filter((mr) => !mr.match);\n\n              return (\n                <div className={styles.tagListCard} key={uniqueId()}>\n                  {matchArray.length > 0 ? (\n                    <>\n                      {matchingLabels.length > 0 ? (\n                        <TagList\n                          tags={matchingLabels.map((mr) => mr.label)}\n                          className={styles.labelList}\n                          getColorIndex={(_, index) => matchingLabels[index].colorIndex}\n                        />\n                      ) : (\n                        <div className={cx(styles.textMuted, styles.textItalic)}>No matching labels</div>\n                      )}\n                      <div className={styles.labelSeparator} />\n                      <TagList\n                        tags={nonMatchingLabels.map((mr) => mr.label)}\n                        className={styles.labelList}\n                        getColorIndex={(_, index) => nonMatchingLabels[index].colorIndex}\n                      />\n                    </>\n                  ) : (\n                    <div className={styles.textMuted}>No labels</div>\n                  )}\n                </div>\n              );\n            })}\n          </div>\n        </Stack>\n      )}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  textMuted: css`\n    color: ${theme.colors.text.secondary};\n  `,\n  textItalic: css`\n    font-style: italic;\n  `,\n  expandable: css`\n    cursor: pointer;\n  `,\n  routeHeader: css`\n    display: flex;\n    flex-direction: row;\n    gap: ${theme.spacing(1)};\n    align-items: center;\n    border-bottom: 1px solid ${theme.colors.border.weak};\n    &:hover {\n      background-color: ${theme.components.table.rowHoverBackground};\n    }\n    padding: ${theme.spacing(0.5, 0.5, 0.5, 0)};\n  `,\n  labelList: css`\n    flex: 0 1 auto;\n    justify-content: flex-start;\n  `,\n  labelSeparator: css`\n    width: 1px;\n    background-color: ${theme.colors.border.weak};\n  `,\n  tagListCard: css`\n    display: flex;\n    flex-direction: row;\n    gap: ${theme.spacing(2)};\n\n    position: relative;\n    background: ${theme.colors.background.secondary};\n    padding: ${theme.spacing(1)};\n\n    border-radius: ${theme.shape.borderRadius(2)};\n    border: solid 1px ${theme.colors.border.weak};\n  `,\n  routeInstances: css`\n    padding: ${theme.spacing(1, 0, 1, 4)};\n    position: relative;\n\n    display: flex;\n    flex-direction: column;\n    gap: ${theme.spacing(1)};\n\n    &:before {\n      content: '';\n      position: absolute;\n      left: ${theme.spacing(2)};\n      height: calc(100% - ${theme.spacing(2)});\n      width: ${theme.spacing(4)};\n      border-left: solid 1px ${theme.colors.border.weak};\n    }\n  `,\n  verticalBar: css`\n    width: 1px;\n    height: 20px;\n    background-color: ${theme.colors.secondary.main};\n    margin-left: ${theme.spacing(1)};\n    margin-right: ${theme.spacing(1)};\n  `,\n});\n","import { useMemo } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { Receiver } from '../../../../../../plugins/datasource/alertmanager/types';\nimport { Labels } from '../../../../../../types/unified-alerting-dto';\nimport { useAlertmanagerConfig } from '../../../hooks/useAlertmanagerConfig';\nimport { useRouteGroupsMatcher } from '../../../useRouteGroupsMatcher';\nimport { addUniqueIdentifierToRoute } from '../../../utils/amroutes';\nimport { AlertInstanceMatch, computeInheritedTree, normalizeRoute } from '../../../utils/notification-policies';\n\nimport { getRoutesByIdMap, RouteWithPath } from './route';\n\nexport const useAlertmanagerNotificationRoutingPreview = (\n  alertManagerSourceName: string,\n  potentialInstances: Labels[]\n) => {\n  const { currentData, isLoading: configLoading, error: configError } = useAlertmanagerConfig(alertManagerSourceName);\n  const config = currentData?.alertmanager_config;\n\n  const { matchInstancesToRoute } = useRouteGroupsMatcher();\n\n  // to create the list of matching contact points we need to first get the rootRoute\n  const { rootRoute, receivers } = useMemo(() => {\n    if (!config) {\n      return {\n        receivers: [],\n        rootRoute: undefined,\n      };\n    }\n\n    return {\n      rootRoute: config.route ? normalizeRoute(addUniqueIdentifierToRoute(config.route)) : undefined,\n      receivers: config.receivers ?? [],\n    };\n  }, [config]);\n\n  // create maps for routes to be get by id, this map also contains the path to the route\n  // ⚠️ don't forget to compute the inherited tree before using this map\n  const routesByIdMap: Map<string, RouteWithPath> = rootRoute\n    ? getRoutesByIdMap(computeInheritedTree(rootRoute))\n    : new Map();\n\n  // create map for receivers to be get by name\n  const receiversByName =\n    receivers.reduce((map, receiver) => {\n      return map.set(receiver.name, receiver);\n    }, new Map<string, Receiver>()) ?? new Map<string, Receiver>();\n\n  // match labels in the tree => map of notification policies and the alert instances (list of labels) in each one\n  const {\n    value: matchingMap = new Map<string, AlertInstanceMatch[]>(),\n    loading: matchingLoading,\n    error: matchingError,\n  } = useAsync(async () => {\n    if (!rootRoute) {\n      return;\n    }\n    return await matchInstancesToRoute(rootRoute, potentialInstances);\n  }, [rootRoute, potentialInstances]);\n\n  return {\n    routesByIdMap,\n    receiversByName,\n    matchingMap,\n    loading: configLoading || matchingLoading,\n    error: configError ?? matchingError,\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, LoadingPlaceholder, useStyles2, withErrorBoundary } from '@grafana/ui';\n\nimport { Stack } from '../../../../../../plugins/datasource/parca/QueryEditor/Stack';\nimport { Labels } from '../../../../../../types/unified-alerting-dto';\n\nimport { NotificationRoute } from './NotificationRoute';\nimport { useAlertmanagerNotificationRoutingPreview } from './useAlertmanagerNotificationRoutingPreview';\nimport { AlertManagerNameWithImage } from './useGetAlertManagersSourceNamesAndImage';\n\nfunction NotificationPreviewByAlertManager({\n  alertManagerSource,\n  potentialInstances,\n  onlyOneAM,\n}: {\n  alertManagerSource: AlertManagerNameWithImage;\n  potentialInstances: Labels[];\n  onlyOneAM: boolean;\n}) {\n  const styles = useStyles2(getStyles);\n\n  const { routesByIdMap, receiversByName, matchingMap, loading, error } = useAlertmanagerNotificationRoutingPreview(\n    alertManagerSource.name,\n    potentialInstances\n  );\n\n  if (error) {\n    return (\n      <Alert title=\"Cannot load Alertmanager configuration\" severity=\"error\">\n        {error.message}\n      </Alert>\n    );\n  }\n\n  if (loading) {\n    return <LoadingPlaceholder text=\"Loading routing preview...\" />;\n  }\n\n  const matchingPoliciesFound = matchingMap.size > 0;\n\n  return matchingPoliciesFound ? (\n    <div className={styles.alertManagerRow}>\n      {!onlyOneAM && (\n        <Stack direction=\"row\" alignItems=\"center\">\n          <div className={styles.firstAlertManagerLine}></div>\n          <div className={styles.alertManagerName}>\n            {' '}\n            Alert manager:\n            <img src={alertManagerSource.img} alt=\"\" className={styles.img} />\n            {alertManagerSource.name}\n          </div>\n          <div className={styles.secondAlertManagerLine}></div>\n        </Stack>\n      )}\n      <Stack gap={1} direction=\"column\">\n        {Array.from(matchingMap.entries()).map(([routeId, instanceMatches]) => {\n          const route = routesByIdMap.get(routeId);\n          const receiver = route?.receiver && receiversByName.get(route.receiver);\n\n          if (!route) {\n            return null;\n          }\n          if (!receiver) {\n            throw new Error('Receiver not found');\n          }\n          return (\n            <NotificationRoute\n              instanceMatches={instanceMatches}\n              route={route}\n              receiver={receiver}\n              key={routeId}\n              routesByIdMap={routesByIdMap}\n              alertManagerSourceName={alertManagerSource.name}\n            />\n          );\n        })}\n      </Stack>\n    </div>\n  ) : null;\n}\n\n// export default because we want to load the component dynamically using React.lazy\n// Due to loading of the web worker we don't want to load this component when not necessary\nexport default withErrorBoundary(NotificationPreviewByAlertManager);\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  alertManagerRow: css`\n    display: flex;\n    flex-direction: column;\n    gap: ${theme.spacing(1)};\n    width: 100%;\n  `,\n  firstAlertManagerLine: css`\n    height: 1px;\n    width: ${theme.spacing(4)};\n    background-color: ${theme.colors.secondary.main};\n  `,\n  alertManagerName: css`\n    width: fit-content;\n  `,\n  secondAlertManagerLine: css`\n    height: 1px;\n    width: 100%;\n    flex: 1;\n    background-color: ${theme.colors.secondary.main};\n  `,\n  img: css`\n    margin-left: ${theme.spacing(2)};\n    width: ${theme.spacing(3)};\n    height: ${theme.spacing(3)};\n    margin-right: ${theme.spacing(1)};\n  `,\n});\n","import { useMemo } from 'react';\n\nimport { contextSrv as ctx } from 'app/core/services/context_srv';\nimport { AccessControlAction } from 'app/types';\n\nimport { useAlertmanager } from '../state/AlertmanagerContext';\nimport { getInstancesPermissions, getNotificationsPermissions } from '../utils/access-control';\n\n/**\n * These hooks will determine if\n *  1. the action is supported in the current alertmanager or data source context\n *  2. user is allowed to perform actions based on their set of permissions / assigned role\n */\nexport enum AlertmanagerAction {\n  // configuration\n  ViewExternalConfiguration = 'view-external-configuration',\n  UpdateExternalConfiguration = 'update-external-configuration',\n\n  // contact points\n  CreateContactPoint = 'create-contact-point',\n  ViewContactPoint = 'view-contact-point',\n  UpdateContactPoint = 'edit-contact-points',\n  DeleteContactPoint = 'delete-contact-point',\n  ExportContactPoint = 'export-contact-point',\n\n  // notification templates\n  CreateNotificationTemplate = 'create-notification-template',\n  ViewNotificationTemplate = 'view-notification-template',\n  UpdateNotificationTemplate = 'edit-notification-template',\n  DeleteNotificationTemplate = 'delete-notification-template',\n  DecryptSecrets = 'decrypt-secrets',\n\n  // notification policies\n  CreateNotificationPolicy = 'create-notification-policy',\n  ViewNotificationPolicyTree = 'view-notification-policy-tree',\n  UpdateNotificationPolicyTree = 'update-notification-policy-tree',\n  DeleteNotificationPolicy = 'delete-notification-policy',\n  ExportNotificationPolicies = 'export-notification-policies',\n\n  // silences – these cannot be deleted only \"expired\" (updated)\n  CreateSilence = 'create-silence',\n  ViewSilence = 'view-silence',\n  UpdateSilence = 'update-silence',\n\n  // mute timings\n  ViewMuteTiming = 'view-mute-timing',\n  CreateMuteTiming = 'create-mute-timing',\n  UpdateMuteTiming = 'update-mute-timing',\n  DeleteMuteTiming = 'delete-mute-timing',\n}\n\nexport enum AlertSourceAction {\n  // internal (Grafana managed)\n  CreateAlertRule = 'create-alert-rule',\n  ViewAlertRule = 'view-alert-rule',\n  UpdateAlertRule = 'update-alert-rule',\n  DeleteAlertRule = 'delete-alert-rule',\n  // external (any compatible alerting data source)\n  CreateExternalAlertRule = 'create-external-alert-rule',\n  ViewExternalAlertRule = 'view-external-alert-rule',\n  UpdateExternalAlertRule = 'update-external-alert-rule',\n  DeleteExternalAlertRule = 'delete-external-alert-rule',\n}\n\nconst AlwaysSupported = true; // this just makes it easier to understand the code\nexport type Action = AlertmanagerAction | AlertSourceAction;\n\nexport type Ability = [actionSupported: boolean, actionAllowed: boolean];\nexport type Abilities<T extends Action> = Record<T, Ability>;\n\nexport function useAlertSourceAbilities(): Abilities<AlertSourceAction> {\n  // TODO add the \"supported\" booleans here, we currently only do authorization\n\n  const abilities: Abilities<AlertSourceAction> = {\n    // -- Grafana managed alert rules --\n    [AlertSourceAction.CreateAlertRule]: [AlwaysSupported, ctx.hasPermission(AccessControlAction.AlertingRuleCreate)],\n    [AlertSourceAction.ViewAlertRule]: [AlwaysSupported, ctx.hasPermission(AccessControlAction.AlertingRuleRead)],\n    [AlertSourceAction.UpdateAlertRule]: [AlwaysSupported, ctx.hasPermission(AccessControlAction.AlertingRuleUpdate)],\n    [AlertSourceAction.DeleteAlertRule]: [AlwaysSupported, ctx.hasPermission(AccessControlAction.AlertingRuleDelete)],\n    // -- External alert rules (Mimir / Loki / etc) --\n    // for these we only have \"read\" and \"write\" permissions\n    [AlertSourceAction.CreateExternalAlertRule]: [\n      AlwaysSupported,\n      ctx.hasPermission(AccessControlAction.AlertingRuleExternalWrite),\n    ],\n    [AlertSourceAction.ViewExternalAlertRule]: [\n      AlwaysSupported,\n      ctx.hasPermission(AccessControlAction.AlertingRuleExternalRead),\n    ],\n    [AlertSourceAction.UpdateExternalAlertRule]: [\n      AlwaysSupported,\n      ctx.hasPermission(AccessControlAction.AlertingRuleExternalWrite),\n    ],\n    [AlertSourceAction.DeleteExternalAlertRule]: [\n      AlwaysSupported,\n      ctx.hasPermission(AccessControlAction.AlertingRuleExternalWrite),\n    ],\n  };\n\n  return abilities;\n}\n\nexport function useAllAlertmanagerAbilities(): Abilities<AlertmanagerAction> {\n  const {\n    selectedAlertmanager,\n    hasConfigurationAPI,\n    isGrafanaAlertmanager: isGrafanaFlavoredAlertmanager,\n  } = useAlertmanager();\n\n  // These are used for interacting with Alertmanager resources where we apply alert.notifications:<name> permissions.\n  // There are different permissions based on wether the built-in alertmanager is selected (grafana) or an external one.\n  const notificationsPermissions = getNotificationsPermissions(selectedAlertmanager!);\n  const instancePermissions = getInstancesPermissions(selectedAlertmanager!);\n\n  // list out all of the abilities, and if the user has permissions to perform them\n  const abilities: Abilities<AlertmanagerAction> = {\n    // -- configuration --\n    [AlertmanagerAction.ViewExternalConfiguration]: [\n      AlwaysSupported,\n      ctx.hasPermission(AccessControlAction.AlertingNotificationsExternalRead),\n    ],\n    [AlertmanagerAction.UpdateExternalConfiguration]: [\n      hasConfigurationAPI,\n      ctx.hasPermission(AccessControlAction.AlertingNotificationsExternalWrite),\n    ],\n    // -- contact points --\n    [AlertmanagerAction.CreateContactPoint]: [hasConfigurationAPI, ctx.hasPermission(notificationsPermissions.create)],\n    [AlertmanagerAction.ViewContactPoint]: [AlwaysSupported, ctx.hasPermission(notificationsPermissions.read)],\n    [AlertmanagerAction.UpdateContactPoint]: [hasConfigurationAPI, ctx.hasPermission(notificationsPermissions.update)],\n    [AlertmanagerAction.DeleteContactPoint]: [hasConfigurationAPI, ctx.hasPermission(notificationsPermissions.delete)],\n    // only Grafana flavored alertmanager supports exporting\n    [AlertmanagerAction.ExportContactPoint]: [\n      isGrafanaFlavoredAlertmanager,\n      ctx.hasPermission(notificationsPermissions.read),\n    ],\n    // -- notification templates --\n    [AlertmanagerAction.CreateNotificationTemplate]: [\n      hasConfigurationAPI,\n      ctx.hasPermission(notificationsPermissions.create),\n    ],\n    [AlertmanagerAction.ViewNotificationTemplate]: [AlwaysSupported, ctx.hasPermission(notificationsPermissions.read)],\n    [AlertmanagerAction.UpdateNotificationTemplate]: [\n      hasConfigurationAPI,\n      ctx.hasPermission(notificationsPermissions.update),\n    ],\n    [AlertmanagerAction.DeleteNotificationTemplate]: [\n      hasConfigurationAPI,\n      ctx.hasPermission(notificationsPermissions.delete),\n    ],\n    // -- notification policies --\n    [AlertmanagerAction.CreateNotificationPolicy]: [\n      hasConfigurationAPI,\n      ctx.hasPermission(notificationsPermissions.create),\n    ],\n    [AlertmanagerAction.ViewNotificationPolicyTree]: [\n      AlwaysSupported,\n      ctx.hasPermission(notificationsPermissions.read),\n    ],\n    [AlertmanagerAction.UpdateNotificationPolicyTree]: [\n      hasConfigurationAPI,\n      ctx.hasPermission(notificationsPermissions.update),\n    ],\n    [AlertmanagerAction.DeleteNotificationPolicy]: [\n      hasConfigurationAPI,\n      ctx.hasPermission(notificationsPermissions.delete),\n    ],\n    [AlertmanagerAction.ExportNotificationPolicies]: [\n      isGrafanaFlavoredAlertmanager,\n      ctx.hasPermission(notificationsPermissions.read),\n    ],\n    [AlertmanagerAction.DecryptSecrets]: [\n      isGrafanaFlavoredAlertmanager,\n      ctx.hasPermission(notificationsPermissions.provisioning.readSecrets),\n    ],\n    // -- silences --\n    [AlertmanagerAction.CreateSilence]: [hasConfigurationAPI, ctx.hasPermission(instancePermissions.create)],\n    [AlertmanagerAction.ViewSilence]: [AlwaysSupported, ctx.hasPermission(instancePermissions.read)],\n    [AlertmanagerAction.UpdateSilence]: [hasConfigurationAPI, ctx.hasPermission(instancePermissions.update)],\n    // -- mute timtings --\n    [AlertmanagerAction.CreateMuteTiming]: [hasConfigurationAPI, ctx.hasPermission(notificationsPermissions.create)],\n    [AlertmanagerAction.ViewMuteTiming]: [AlwaysSupported, ctx.hasPermission(notificationsPermissions.read)],\n    [AlertmanagerAction.UpdateMuteTiming]: [hasConfigurationAPI, ctx.hasPermission(notificationsPermissions.update)],\n    [AlertmanagerAction.DeleteMuteTiming]: [hasConfigurationAPI, ctx.hasPermission(notificationsPermissions.delete)],\n  };\n\n  return abilities;\n}\n\nexport function useAlertmanagerAbility(action: AlertmanagerAction): Ability {\n  const abilities = useAllAlertmanagerAbilities();\n\n  return useMemo(() => {\n    return abilities[action];\n  }, [abilities, action]);\n}\n\nexport function useAlertmanagerAbilities(actions: AlertmanagerAction[]): Ability[] {\n  const abilities = useAllAlertmanagerAbilities();\n\n  return useMemo(() => {\n    return actions.map((action) => abilities[action]);\n  }, [abilities, actions]);\n}\n\nexport function useAlertSourceAbility(action: AlertSourceAction): Ability {\n  const abilities = useAlertSourceAbilities();\n  return useMemo(() => abilities[action], [abilities, action]);\n}\n","import { SerializedError } from '@reduxjs/toolkit';\n\nimport { alertmanagerApi } from '../api/alertmanagerApi';\n\ntype Options = {\n  refetchOnFocus: boolean;\n  refetchOnReconnect: boolean;\n};\n\n// TODO refactor this so we can just call \"alertmanagerApi.endpoints.getAlertmanagerConfiguration\" everywhere\n// and remove this hook since it adds little value\nexport function useAlertmanagerConfig(amSourceName?: string, options?: Options) {\n  const fetchConfig = alertmanagerApi.endpoints.getAlertmanagerConfiguration.useQuery(amSourceName ?? '', {\n    ...options,\n    skip: !amSourceName,\n  });\n\n  return {\n    ...fetchConfig,\n    // TODO refactor to get rid of this type assertion\n    error: fetchConfig.error as SerializedError,\n  };\n}\n","import { CorsWorker as Worker } from 'app/core/utils/CorsWorker';\n\n// CorsWorker is needed as a workaround for CORS issue caused\n// by static assets served from an url different from origin\nexport const createWorker = () => new Worker(new URL('./routeGroupsMatcher.worker.ts', import.meta.url));\n","import * as comlink from 'comlink';\nimport { useCallback, useEffect } from 'react';\nimport { useEnabled } from 'react-enable';\n\nimport { logError } from '@grafana/runtime';\n\nimport { AlertmanagerGroup, RouteWithID } from '../../../plugins/datasource/alertmanager/types';\nimport { Labels } from '../../../types/unified-alerting-dto';\n\nimport { logInfo } from './Analytics';\nimport { createWorker } from './createRouteGroupsMatcherWorker';\nimport { AlertingFeature } from './features';\nimport type { RouteGroupsMatcher } from './routeGroupsMatcher';\n\nlet routeMatcher: comlink.Remote<RouteGroupsMatcher> | undefined;\n\n// Load worker loads the worker if it's not loaded yet\n// and returns a function to dispose of the worker\n// We do it to enable feature toggling. If the feature is disabled we don't wont to load the worker code at all\n// An alternative way would be to move all this code to the hook below, but it will create and terminate the worker much more often\nfunction loadWorker() {\n  let worker: Worker | undefined;\n\n  if (routeMatcher === undefined) {\n    try {\n      worker = createWorker();\n      routeMatcher = comlink.wrap<RouteGroupsMatcher>(worker);\n    } catch (e: unknown) {\n      if (e instanceof Error) {\n        logError(e);\n      }\n    }\n  }\n\n  const disposeWorker = () => {\n    if (worker && routeMatcher) {\n      routeMatcher[comlink.releaseProxy]();\n      worker.terminate();\n\n      routeMatcher = undefined;\n      worker = undefined;\n    }\n  };\n\n  return { disposeWorker };\n}\n\nfunction validateWorker(\n  toggleEnabled: boolean,\n  matcher: typeof routeMatcher\n): asserts matcher is comlink.Remote<RouteGroupsMatcher> {\n  if (!toggleEnabled) {\n    throw new Error('Matching routes preview is disabled');\n  }\n\n  if (!routeMatcher) {\n    throw new Error('Route Matcher has not been initialized');\n  }\n}\n\nexport function useRouteGroupsMatcher() {\n  const workerPreviewEnabled = useEnabled(AlertingFeature.NotificationPoliciesV2MatchingInstances);\n\n  useEffect(() => {\n    if (workerPreviewEnabled) {\n      const { disposeWorker } = loadWorker();\n      return disposeWorker;\n    }\n\n    return () => null;\n  }, [workerPreviewEnabled]);\n\n  const getRouteGroupsMap = useCallback(\n    async (rootRoute: RouteWithID, alertGroups: AlertmanagerGroup[]) => {\n      validateWorker(workerPreviewEnabled, routeMatcher);\n\n      const startTime = performance.now();\n\n      const result = await routeMatcher.getRouteGroupsMap(rootRoute, alertGroups);\n\n      const timeSpent = performance.now() - startTime;\n\n      logInfo(`Route Groups Matched in  ${timeSpent} ms`, {\n        matchingTime: timeSpent.toString(),\n        alertGroupsCount: alertGroups.length.toString(),\n        // Counting all nested routes might be too time-consuming, so we only count the first level\n        topLevelRoutesCount: rootRoute.routes?.length.toString() ?? '0',\n      });\n\n      return result;\n    },\n    [workerPreviewEnabled]\n  );\n\n  const matchInstancesToRoute = useCallback(\n    async (rootRoute: RouteWithID, instancesToMatch: Labels[]) => {\n      validateWorker(workerPreviewEnabled, routeMatcher);\n\n      const startTime = performance.now();\n\n      const result = await routeMatcher.matchInstancesToRoute(rootRoute, instancesToMatch);\n\n      const timeSpent = performance.now() - startTime;\n\n      logInfo(`Instances Matched in  ${timeSpent} ms`, {\n        matchingTime: timeSpent.toString(),\n        instancesToMatchCount: instancesToMatch.length.toString(),\n        // Counting all nested routes might be too time-consuming, so we only count the first level\n        topLevelRoutesCount: rootRoute.routes?.length.toString() ?? '0',\n      });\n\n      return result;\n    },\n    [workerPreviewEnabled]\n  );\n\n  return { getRouteGroupsMap, matchInstancesToRoute };\n}\n","import { uniqueId } from 'lodash';\n\nimport { SelectableValue } from '@grafana/data';\nimport { MatcherOperator, ObjectMatcher, Route, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { FormAmRoute } from '../types/amroutes';\nimport { MatcherFieldValue } from '../types/silence-form';\n\nimport { matcherToMatcherField } from './alertmanager';\nimport { GRAFANA_RULES_SOURCE_NAME } from './datasource';\nimport { normalizeMatchers, parseMatcher } from './matchers';\nimport { findExistingRoute } from './routeTree';\nimport { isValidPrometheusDuration, safeParseDurationstr } from './time';\n\nconst matchersToArrayFieldMatchers = (\n  matchers: Record<string, string> | undefined,\n  isRegex: boolean\n): MatcherFieldValue[] =>\n  Object.entries(matchers ?? {}).reduce<MatcherFieldValue[]>(\n    (acc, [name, value]) => [\n      ...acc,\n      {\n        name,\n        value,\n        operator: isRegex ? MatcherOperator.regex : MatcherOperator.equal,\n      },\n    ],\n    []\n  );\n\nconst selectableValueToString = (selectableValue: SelectableValue<string>): string => selectableValue.value!;\n\nconst selectableValuesToStrings = (arr: Array<SelectableValue<string>> | undefined): string[] =>\n  (arr ?? []).map(selectableValueToString);\n\nexport const emptyArrayFieldMatcher: MatcherFieldValue = {\n  name: '',\n  value: '',\n  operator: MatcherOperator.equal,\n};\n\n// Default route group_by labels for newly created routes.\nexport const defaultGroupBy = ['grafana_folder', 'alertname'];\n\n// Common route group_by options for multiselect drop-down\nexport const commonGroupByOptions = [\n  { label: 'grafana_folder', value: 'grafana_folder' },\n  { label: 'alertname', value: 'alertname' },\n  { label: 'Disable (...)', value: '...' },\n];\n\nexport const emptyRoute: FormAmRoute = {\n  id: '',\n  overrideGrouping: false,\n  groupBy: defaultGroupBy,\n  object_matchers: [],\n  routes: [],\n  continue: false,\n  receiver: '',\n  overrideTimings: false,\n  groupWaitValue: '',\n  groupIntervalValue: '',\n  repeatIntervalValue: '',\n  muteTimeIntervals: [],\n};\n\n// add unique identifiers to each route in the route tree, that way we can figure out what route we've edited / deleted\nexport function addUniqueIdentifierToRoute(route: Route): RouteWithID {\n  return {\n    id: uniqueId('route-'),\n    ...route,\n    routes: (route.routes ?? []).map(addUniqueIdentifierToRoute),\n  };\n}\n\n//returns route, and a record mapping id to existing route\nexport const amRouteToFormAmRoute = (route: RouteWithID | Route | undefined): FormAmRoute => {\n  if (!route) {\n    return emptyRoute;\n  }\n\n  const id = 'id' in route ? route.id : uniqueId('route-');\n\n  if (Object.keys(route).length === 0) {\n    const formAmRoute = { ...emptyRoute, id };\n    return formAmRoute;\n  }\n\n  const formRoutes: FormAmRoute[] = [];\n  route.routes?.forEach((subRoute) => {\n    const subFormRoute = amRouteToFormAmRoute(subRoute);\n    formRoutes.push(subFormRoute);\n  });\n\n  const objectMatchers =\n    route.object_matchers?.map((matcher) => ({ name: matcher[0], operator: matcher[1], value: matcher[2] })) ?? [];\n  const matchers = route.matchers?.map((matcher) => matcherToMatcherField(parseMatcher(matcher))) ?? [];\n\n  return {\n    id,\n    // Frontend migration to use object_matchers instead of matchers, match, and match_re\n    object_matchers: [\n      ...matchers,\n      ...objectMatchers,\n      ...matchersToArrayFieldMatchers(route.match, false),\n      ...matchersToArrayFieldMatchers(route.match_re, true),\n    ],\n    continue: route.continue ?? false,\n    receiver: route.receiver ?? '',\n    overrideGrouping: Array.isArray(route.group_by) && route.group_by.length > 0,\n    groupBy: route.group_by ?? undefined,\n    overrideTimings: [route.group_wait, route.group_interval, route.repeat_interval].some(Boolean),\n    groupWaitValue: route.group_wait ?? '',\n    groupIntervalValue: route.group_interval ?? '',\n    repeatIntervalValue: route.repeat_interval ?? '',\n    routes: formRoutes,\n    muteTimeIntervals: route.mute_time_intervals ?? [],\n  };\n};\n\n// convert a FormAmRoute to a Route\nexport const formAmRouteToAmRoute = (\n  alertManagerSourceName: string,\n  formAmRoute: Partial<FormAmRoute>,\n  routeTree: RouteWithID\n): Route => {\n  const existing = findExistingRoute(formAmRoute.id ?? '', routeTree);\n\n  const {\n    overrideGrouping,\n    groupBy,\n    overrideTimings,\n    groupWaitValue,\n    groupIntervalValue,\n    repeatIntervalValue,\n    receiver,\n  } = formAmRoute;\n\n  // \"undefined\" means \"inherit from the parent policy\", currently supported by group_by, group_wait, group_interval, and repeat_interval\n  const INHERIT_FROM_PARENT = undefined;\n\n  const group_by = overrideGrouping ? groupBy : INHERIT_FROM_PARENT;\n\n  const overrideGroupWait = overrideTimings && groupWaitValue;\n  const group_wait = overrideGroupWait ? groupWaitValue : INHERIT_FROM_PARENT;\n\n  const overrideGroupInterval = overrideTimings && groupIntervalValue;\n  const group_interval = overrideGroupInterval ? groupIntervalValue : INHERIT_FROM_PARENT;\n\n  const overrideRepeatInterval = overrideTimings && repeatIntervalValue;\n  const repeat_interval = overrideRepeatInterval ? repeatIntervalValue : INHERIT_FROM_PARENT;\n  const object_matchers: ObjectMatcher[] | undefined = formAmRoute.object_matchers\n    ?.filter((route) => route.name && route.value && route.operator)\n    .map(({ name, operator, value }) => [name, operator, value]);\n\n  const routes = formAmRoute.routes?.map((subRoute) =>\n    formAmRouteToAmRoute(alertManagerSourceName, subRoute, routeTree)\n  );\n\n  const amRoute: Route = {\n    ...(existing ?? {}),\n    continue: formAmRoute.continue,\n    group_by: group_by,\n    object_matchers: object_matchers,\n    match: undefined, // DEPRECATED: Use matchers\n    match_re: undefined, // DEPRECATED: Use matchers\n    group_wait,\n    group_interval,\n    repeat_interval,\n    routes: routes,\n    mute_time_intervals: formAmRoute.muteTimeIntervals,\n    receiver: receiver,\n  };\n\n  // non-Grafana managed rules should use \"matchers\", Grafana-managed rules should use \"object_matchers\"\n  // Grafana maintains a fork of AM to support all utf-8 characters in the \"object_matchers\" property values but this\n  // does not exist in upstream AlertManager\n  if (alertManagerSourceName !== GRAFANA_RULES_SOURCE_NAME) {\n    amRoute.matchers = formAmRoute.object_matchers?.map(({ name, operator, value }) => `${name}${operator}${value}`);\n    amRoute.object_matchers = undefined;\n  } else {\n    amRoute.object_matchers = normalizeMatchers(amRoute);\n    amRoute.matchers = undefined;\n  }\n\n  if (formAmRoute.receiver) {\n    amRoute.receiver = formAmRoute.receiver;\n  }\n\n  return amRoute;\n};\n\nexport const stringToSelectableValue = (str: string): SelectableValue<string> => ({\n  label: str,\n  value: str,\n});\n\nexport const stringsToSelectableValues = (arr: string[] | undefined): Array<SelectableValue<string>> =>\n  (arr ?? []).map(stringToSelectableValue);\n\nexport const mapSelectValueToString = (selectableValue: SelectableValue<string>): string | undefined => {\n  // this allows us to deal with cleared values\n  if (selectableValue === null) {\n    return undefined;\n  }\n\n  if (!selectableValue) {\n    return '';\n  }\n\n  return selectableValueToString(selectableValue) ?? '';\n};\n\nexport const mapMultiSelectValueToStrings = (\n  selectableValues: Array<SelectableValue<string>> | undefined\n): string[] => {\n  if (!selectableValues) {\n    return [];\n  }\n\n  return selectableValuesToStrings(selectableValues);\n};\n\nexport function promDurationValidator(duration: string) {\n  if (duration.length === 0) {\n    return true;\n  }\n\n  return isValidPrometheusDuration(duration) || 'Invalid duration format. Must be {number}{time_unit}';\n}\n\n// function to convert ObjectMatchers to a array of strings\nexport const objectMatchersToString = (matchers: ObjectMatcher[]): string[] => {\n  return matchers.map((matcher) => {\n    const [name, operator, value] = matcher;\n    return `${name}${operator}${value}`;\n  });\n};\n\nexport const repeatIntervalValidator = (repeatInterval: string, groupInterval: string) => {\n  if (repeatInterval.length === 0) {\n    return true;\n  }\n\n  const validRepeatInterval = promDurationValidator(repeatInterval);\n  const validGroupInterval = promDurationValidator(groupInterval);\n\n  if (validRepeatInterval !== true) {\n    return validRepeatInterval;\n  }\n\n  if (validGroupInterval !== true) {\n    return validGroupInterval;\n  }\n\n  const repeatDuration = safeParseDurationstr(repeatInterval);\n  const groupDuration = safeParseDurationstr(groupInterval);\n\n  const isRepeatLowerThanGroupDuration = groupDuration !== 0 && repeatDuration < groupDuration;\n\n  return isRepeatLowerThanGroupDuration ? 'Repeat interval should be higher or equal to Group interval' : true;\n};\n","import { isArray, merge, pick, reduce } from 'lodash';\n\nimport {\n  AlertmanagerGroup,\n  MatcherOperator,\n  ObjectMatcher,\n  Route,\n  RouteWithID,\n} from 'app/plugins/datasource/alertmanager/types';\nimport { Labels } from 'app/types/unified-alerting-dto';\n\nimport { Label, normalizeMatchers } from './matchers';\n\ntype OperatorPredicate = (labelValue: string, matcherValue: string) => boolean;\n\nconst OperatorFunctions: Record<MatcherOperator, OperatorPredicate> = {\n  [MatcherOperator.equal]: (lv, mv) => lv === mv,\n  [MatcherOperator.notEqual]: (lv, mv) => lv !== mv,\n  [MatcherOperator.regex]: (lv, mv) => Boolean(lv.match(new RegExp(mv))),\n  [MatcherOperator.notRegex]: (lv, mv) => !Boolean(lv.match(new RegExp(mv))),\n};\n\nfunction isLabelMatch(matcher: ObjectMatcher, label: Label) {\n  const [labelKey, labelValue] = label;\n  const [matcherKey, operator, matcherValue] = matcher;\n\n  // not interested, keys don't match\n  if (labelKey !== matcherKey) {\n    return false;\n  }\n\n  const matchFunction = OperatorFunctions[operator];\n  if (!matchFunction) {\n    throw new Error(`no such operator: ${operator}`);\n  }\n\n  return matchFunction(labelValue, matcherValue);\n}\n\ninterface LabelMatchResult {\n  match: boolean;\n  matchers: ObjectMatcher[];\n}\n\ninterface MatchingResult {\n  matches: boolean;\n  details: Map<ObjectMatcher, Label[]>;\n  labelsMatch: Map<Label, LabelMatchResult>;\n}\n\n// check if every matcher returns \"true\" for the set of labels\nfunction matchLabels(matchers: ObjectMatcher[], labels: Label[]): MatchingResult {\n  const details = new Map<ObjectMatcher, Label[]>();\n\n  // If a policy has no matchers it still can be a match, hence matchers can be empty and match can be true\n  // So we cannot use empty array of matchers as an indicator of no match\n  const labelsMatch = new Map<Label, { match: boolean; matchers: ObjectMatcher[] }>(\n    labels.map((label) => [label, { match: false, matchers: [] }])\n  );\n\n  const matches = matchers.every((matcher) => {\n    const matchingLabels = labels.filter((label) => isLabelMatch(matcher, label));\n\n    matchingLabels.forEach((label) => {\n      const labelMatch = labelsMatch.get(label);\n      // The condition is just to satisfy TS. The map should have all the labels due to the previous map initialization\n      if (labelMatch) {\n        labelMatch.match = true;\n        labelMatch.matchers.push(matcher);\n      }\n    });\n\n    if (matchingLabels.length === 0) {\n      return false;\n    }\n\n    details.set(matcher, matchingLabels);\n    return matchingLabels.length > 0;\n  });\n\n  return { matches, details, labelsMatch };\n}\n\nexport interface AlertInstanceMatch {\n  instance: Labels;\n  matchDetails: Map<ObjectMatcher, Labels>;\n  labelsMatch: Map<Label, LabelMatchResult>;\n}\n\nexport interface RouteMatchResult<T extends Route> {\n  route: T;\n  details: Map<ObjectMatcher, Label[]>;\n  labelsMatch: Map<Label, LabelMatchResult>;\n}\n\n// Match does a depth-first left-to-right search through the route tree\n// and returns the matching routing nodes.\n\n// If the current node is not a match, return nothing\n// const normalizedMatchers = normalizeMatchers(root);\n// Normalization should have happened earlier in the code\nfunction findMatchingRoutes<T extends Route>(root: T, labels: Label[]): Array<RouteMatchResult<T>> {\n  let matches: Array<RouteMatchResult<T>> = [];\n\n  // If the current node is not a match, return nothing\n  const matchResult = matchLabels(root.object_matchers ?? [], labels);\n  if (!matchResult.matches) {\n    return [];\n  }\n\n  // If the current node matches, recurse through child nodes\n  if (root.routes) {\n    for (let index = 0; index < root.routes.length; index++) {\n      let child = root.routes[index];\n      let matchingChildren = findMatchingRoutes(child, labels);\n      // TODO how do I solve this typescript thingy? It looks correct to me /shrug\n      // @ts-ignore\n      matches = matches.concat(matchingChildren);\n      // we have matching children and we don't want to continue, so break here\n      if (matchingChildren.length && !child.continue) {\n        break;\n      }\n    }\n  }\n\n  // If no child nodes were matches, the current node itself is a match.\n  if (matches.length === 0) {\n    matches.push({ route: root, details: matchResult.details, labelsMatch: matchResult.labelsMatch });\n  }\n\n  return matches;\n}\n\n// This is a performance improvement to normalize matchers only once and use the normalized version later on\nexport function normalizeRoute(rootRoute: RouteWithID): RouteWithID {\n  function normalizeRoute(route: RouteWithID) {\n    route.object_matchers = normalizeMatchers(route);\n    delete route.matchers;\n    delete route.match;\n    delete route.match_re;\n    route.routes?.forEach(normalizeRoute);\n  }\n\n  const normalizedRootRoute = structuredClone(rootRoute);\n  normalizeRoute(normalizedRootRoute);\n\n  return normalizedRootRoute;\n}\n\n/**\n * find all of the groups that have instances that match the route, thay way we can find all instances\n * (and their grouping) for the given route\n */\nfunction findMatchingAlertGroups(\n  routeTree: Route,\n  route: Route,\n  alertGroups: AlertmanagerGroup[]\n): AlertmanagerGroup[] {\n  const matchingGroups: AlertmanagerGroup[] = [];\n\n  return alertGroups.reduce((acc, group) => {\n    // find matching alerts in the current group\n    const matchingAlerts = group.alerts.filter((alert) => {\n      const labels = Object.entries(alert.labels);\n      return findMatchingRoutes(routeTree, labels).some((matchingRoute) => matchingRoute.route === route);\n    });\n\n    // if the groups has any alerts left after matching, add it to the results\n    if (matchingAlerts.length) {\n      acc.push({\n        ...group,\n        alerts: matchingAlerts,\n      });\n    }\n\n    return acc;\n  }, matchingGroups);\n}\n\nexport type InhertitableProperties = Pick<\n  Route,\n  'receiver' | 'group_by' | 'group_wait' | 'group_interval' | 'repeat_interval' | 'mute_time_intervals'\n>;\n\n// inherited properties are config properties that exist on the parent route (or its inherited properties) but not on the child route\nfunction getInheritedProperties(\n  parentRoute: Route,\n  childRoute: Route,\n  propertiesParentInherited?: Partial<InhertitableProperties>\n) {\n  const fullParentProperties = merge({}, parentRoute, propertiesParentInherited);\n\n  const inheritableProperties: InhertitableProperties = pick(fullParentProperties, [\n    'receiver',\n    'group_by',\n    'group_wait',\n    'group_interval',\n    'repeat_interval',\n    'mute_time_intervals',\n  ]);\n\n  // TODO how to solve this TypeScript mystery?\n  const inherited = reduce(\n    inheritableProperties,\n    (inheritedProperties: Partial<Route> = {}, parentValue, property) => {\n      const parentHasValue = parentValue !== undefined;\n\n      // @ts-ignore\n      const inheritFromParentUndefined = parentHasValue && childRoute[property] === undefined;\n      // @ts-ignore\n      const inheritFromParentEmptyString = parentHasValue && childRoute[property] === '';\n\n      const inheritEmptyGroupByFromParent =\n        property === 'group_by' &&\n        parentHasValue &&\n        isArray(childRoute[property]) &&\n        childRoute[property]?.length === 0;\n\n      const inheritFromParent =\n        inheritFromParentUndefined || inheritFromParentEmptyString || inheritEmptyGroupByFromParent;\n\n      if (inheritFromParent) {\n        // @ts-ignore\n        inheritedProperties[property] = parentValue;\n      }\n\n      return inheritedProperties;\n    },\n    {}\n  );\n\n  return inherited;\n}\n\n/**\n * This function will compute the full tree with inherited properties – this is mostly used for search and filtering\n */\nexport function computeInheritedTree<T extends Route>(parent: T): T {\n  return {\n    ...parent,\n    routes: parent.routes?.map((child) => {\n      const inheritedProperties = getInheritedProperties(parent, child);\n\n      return computeInheritedTree({\n        ...child,\n        ...inheritedProperties,\n      });\n    }),\n  };\n}\n\nexport { findMatchingAlertGroups, findMatchingRoutes, getInheritedProperties };\n","/**\n * Various helper functions to modify (immutably) the route tree, aka \"notification policies\"\n */\n\nimport { omit } from 'lodash';\n\nimport { Route, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { FormAmRoute } from '../types/amroutes';\n\nimport { formAmRouteToAmRoute } from './amroutes';\n\n// add a form submission to the route tree\nexport const mergePartialAmRouteWithRouteTree = (\n  alertManagerSourceName: string,\n  partialFormRoute: Partial<FormAmRoute>,\n  routeTree: RouteWithID\n): Route => {\n  const existing = findExistingRoute(partialFormRoute.id ?? '', routeTree);\n  if (!existing) {\n    throw new Error(`No such route with ID '${partialFormRoute.id}'`);\n  }\n\n  function findAndReplace(currentRoute: RouteWithID): Route {\n    let updatedRoute: Route = currentRoute;\n\n    if (currentRoute.id === partialFormRoute.id) {\n      const newRoute = formAmRouteToAmRoute(alertManagerSourceName, partialFormRoute, routeTree);\n      updatedRoute = omit(\n        {\n          ...currentRoute,\n          ...newRoute,\n        },\n        'id'\n      );\n    }\n\n    return omit(\n      {\n        ...updatedRoute,\n        routes: currentRoute.routes?.map(findAndReplace),\n      },\n      'id'\n    );\n  }\n\n  return findAndReplace(routeTree);\n};\n\n// remove a route from the policy tree, returns a new tree\n// make sure to omit the \"id\" because Prometheus / Loki / Mimir will reject the payload\nexport const omitRouteFromRouteTree = (findRoute: RouteWithID, routeTree: RouteWithID): Route => {\n  if (findRoute.id === routeTree.id) {\n    throw new Error('You cant remove the root policy');\n  }\n\n  function findAndOmit(currentRoute: RouteWithID): Route {\n    return omit(\n      {\n        ...currentRoute,\n        routes: currentRoute.routes?.reduce((acc: Route[] = [], route) => {\n          if (route.id === findRoute.id) {\n            return acc;\n          }\n\n          acc.push(findAndOmit(route));\n          return acc;\n        }, []),\n      },\n      'id'\n    );\n  }\n\n  return findAndOmit(routeTree);\n};\n\n// add a new route to a parent route\nexport const addRouteToParentRoute = (\n  alertManagerSourceName: string,\n  partialFormRoute: Partial<FormAmRoute>,\n  parentRoute: RouteWithID,\n  routeTree: RouteWithID\n): Route => {\n  const newRoute = formAmRouteToAmRoute(alertManagerSourceName, partialFormRoute, routeTree);\n\n  function findAndAdd(currentRoute: RouteWithID): RouteWithID {\n    if (currentRoute.id === parentRoute.id) {\n      return {\n        ...currentRoute,\n        // TODO fix this typescript exception, it's... complicated\n        // @ts-ignore\n        routes: currentRoute.routes?.concat(newRoute),\n      };\n    }\n\n    return {\n      ...currentRoute,\n      routes: currentRoute.routes?.map(findAndAdd),\n    };\n  }\n\n  function findAndOmitId(currentRoute: RouteWithID): Route {\n    return omit(\n      {\n        ...currentRoute,\n        routes: currentRoute.routes?.map(findAndOmitId),\n      },\n      'id'\n    );\n  }\n\n  return findAndOmitId(findAndAdd(routeTree));\n};\n\nexport function findExistingRoute(id: string, routeTree: RouteWithID): RouteWithID | undefined {\n  return routeTree.id === id ? routeTree : routeTree.routes?.find((route) => findExistingRoute(id, route));\n}\n"],"names":["Authorize","actions","children","alertmanagerActions","isAlertmanagerAction","alertSourceActions","isAlertSourceAction","AuthorizeAlertmanager","AuthorizeAlertsource","alertmanagerAbilties","actionsAllowed","alertSourceAbilities","abilities","_supported","allowed","action","MetaText","icon","color","rest","styles","getStyles","interactive","Matchers","matchers","NUM_MATCHERS","firstFew","hasMoreMatchers","matcher","MatcherBadge","label","operator","value","theme","borderColor","isDefaultPolicy","route","getRoutesByIdMap","rootRoute","map","addRoutesToMap","path","r","hasEmptyMatchers","NotificationPolicyMatchers","PolicyPath","routesByIdMap","routePathIds","routePathObjects","id","pathRoute","index","NotificationRouteDetailsModal","onClose","receiver","alertManagerSourceName","isDefault","Modal","Stack","Icon","Button","units","higlight","NotificationRouteHeader","instancesCount","expandRoute","onExpandRouteClick","showDetails","setShowDetails","onClickDetails","CollapseToggle","isCollapsed","Spacer","NotificationRoute","instanceMatches","setExpandRoute","useToggle","GREY_COLOR_INDEX","instanceMatch","matchArray","matchResult","matchingLabels","mr","nonMatchingLabels","TagList","_","useAlertmanagerNotificationRoutingPreview","potentialInstances","currentData","configLoading","configError","useAlertmanagerConfig","config","matchInstancesToRoute","useRouteGroupsMatcher","receivers","receiversByName","matchingMap","matchingLoading","matchingError","useAsync","NotificationPreviewByAlertManager","alertManagerSource","onlyOneAM","loading","error","Alert","LoadingPlaceholder","routeId","AlertmanagerAction","AlertSourceAction","AlwaysSupported","useAlertSourceAbilities","useAllAlertmanagerAbilities","selectedAlertmanager","hasConfigurationAPI","isGrafanaFlavoredAlertmanager","notificationsPermissions","instancePermissions","useAlertmanagerAbility","useAlertmanagerAbilities","useAlertSourceAbility","amSourceName","options","fetchConfig","createWorker","routeMatcher","loadWorker","worker","comlink","e","validateWorker","toggleEnabled","workerPreviewEnabled","disposeWorker","getRouteGroupsMap","alertGroups","startTime","result","timeSpent","instancesToMatch","matchersToArrayFieldMatchers","isRegex","acc","name","selectableValueToString","selectableValue","selectableValuesToStrings","arr","emptyArrayFieldMatcher","defaultGroupBy","commonGroupByOptions","emptyRoute","addUniqueIdentifierToRoute","amRouteToFormAmRoute","formRoutes","subRoute","subFormRoute","objectMatchers","formAmRouteToAmRoute","formAmRoute","routeTree","existing","overrideGrouping","groupBy","overrideTimings","groupWaitValue","groupIntervalValue","repeatIntervalValue","INHERIT_FROM_PARENT","group_by","group_wait","group_interval","repeat_interval","object_matchers","routes","amRoute","stringToSelectableValue","str","stringsToSelectableValues","mapSelectValueToString","mapMultiSelectValueToStrings","selectableValues","promDurationValidator","duration","objectMatchersToString","repeatIntervalValidator","repeatInterval","groupInterval","validRepeatInterval","validGroupInterval","repeatDuration","groupDuration","OperatorFunctions","lv","mv","isLabelMatch","labelKey","labelValue","matcherKey","matcherValue","matchFunction","matchLabels","labels","details","labelsMatch","labelMatch","findMatchingRoutes","root","matches","child","matchingChildren","normalizeRoute","normalizedRootRoute","findMatchingAlertGroups","matchingGroups","group","matchingAlerts","alert","matchingRoute","getInheritedProperties","parentRoute","childRoute","propertiesParentInherited","fullParentProperties","inheritableProperties","inheritedProperties","parentValue","property","parentHasValue","inheritFromParentUndefined","inheritFromParentEmptyString","inheritEmptyGroupByFromParent","computeInheritedTree","parent","mergePartialAmRouteWithRouteTree","partialFormRoute","findExistingRoute","findAndReplace","currentRoute","updatedRoute","newRoute","omitRouteFromRouteTree","findRoute","findAndOmit","addRouteToParentRoute","findAndAdd","findAndOmitId"],"sourceRoot":""}