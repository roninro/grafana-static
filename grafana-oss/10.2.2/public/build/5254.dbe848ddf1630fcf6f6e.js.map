{"version":3,"file":"5254.dbe848ddf1630fcf6f6e.js","mappings":"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","sources":["webpack://grafana/./.yarn/__virtual__/@grafana-experimental-virtual-4d6787efaa/0/cache/@grafana-experimental-npm-1.7.0-bca9c8fecc-f418072aab.zip/node_modules/@grafana/experimental/dist/esm/ConfigEditor/AdvancedSettings/AdvancedHttpSettings.js","webpack://grafana/./public/app/core/components/Divider.tsx","webpack://grafana/./public/app/core/components/NodeGraphSettings.tsx","webpack://grafana/./public/app/core/components/TraceToMetrics/TraceToMetricsSettings.tsx","webpack://grafana/./public/app/plugins/datasource/loki/components/monaco-query-field/MonacoQueryFieldLazy.tsx","webpack://grafana/./public/app/plugins/datasource/loki/components/monaco-query-field/MonacoQueryFieldWrapper.tsx","webpack://grafana/./public/app/plugins/datasource/loki/components/LokiQueryField.tsx","webpack://grafana/./public/app/plugins/datasource/loki/languageUtils.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/QueryOptionGroup.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/CheatSheet.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/utils.ts","webpack://grafana/./public/app/plugins/datasource/tempo/LokiSearch.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/traceql/traceql.ts","webpack://grafana/./public/app/plugins/datasource/tempo/SearchTraceQLEditor/utils.ts","webpack://grafana/./public/app/plugins/datasource/tempo/VariableQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/language_provider.ts","webpack://grafana/./public/app/plugins/datasource/tempo/metricsSummary.ts","webpack://grafana/./public/app/plugins/datasource/tempo/streaming.ts","webpack://grafana/./public/app/plugins/datasource/tempo/variables.ts","webpack://grafana/./public/app/plugins/datasource/tempo/datasource.ts","webpack://grafana/./public/app/plugins/datasource/tempo/NativeSearch/TagsField/autocomplete.ts","webpack://grafana/./public/app/plugins/datasource/tempo/NativeSearch/TagsField/syntax.ts","webpack://grafana/./public/app/plugins/datasource/tempo/NativeSearch/TagsField/TagsField.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/NativeSearch/NativeSearch.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/traceql/TempoQueryBuilderOptions.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/SearchTraceQLEditor/DurationInput.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/SearchTraceQLEditor/InlineSearchField.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/SearchTraceQLEditor/GroupByField.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/SearchTraceQLEditor/SearchField.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/SearchTraceQLEditor/TagsInput.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/SearchTraceQLEditor/TraceQLSearch.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/ServiceGraphSection.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/types.ts","webpack://grafana/./.yarn/__virtual__/@grafana-lezer-traceql-virtual-470055e697/0/cache/@grafana-lezer-traceql-npm-0.0.7-90146cba9c-920f8116d6.zip/node_modules/@grafana/lezer-traceql/index.es.js","webpack://grafana/./public/app/plugins/datasource/tempo/traceql/situation.ts","webpack://grafana/./public/app/plugins/datasource/tempo/traceql/autocomplete.ts","webpack://grafana/./public/app/plugins/datasource/tempo/traceql/errorHighlighting.ts","webpack://grafana/./public/app/plugins/datasource/tempo/traceql/TraceQLEditor.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/traceql/QueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/QueryField.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/configuration/QuerySettings.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/configuration/LokiSearchSettings.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/configuration/ServiceGraphSettings.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/configuration/TraceQLSearchTags.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/configuration/TraceQLSearchSettings.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/configuration/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/tracking.ts","webpack://grafana/./public/app/plugins/datasource/tempo/module.ts","webpack://grafana/./.yarn/__virtual__/react-use-virtual-dd7926f458/0/cache/react-use-npm-17.4.0-0ef4521544-0889da919b.zip/node_modules/react-use/lib/useAsync.js"],"sourcesContent":["import React__default from 'react';\nimport { css, cx } from '@emotion/css';\nimport { InlineField, TagsInput, Input } from '@grafana/ui';\nimport { ConfigSubSection } from '../ConfigSection/ConfigSubSection.js';\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst AdvancedHttpSettings = ({\n  config,\n  onChange,\n  className\n}) => {\n  const onCookiesChange = (cookies) => {\n    onChange(__spreadProps(__spreadValues({}, config), {\n      jsonData: __spreadProps(__spreadValues({}, config.jsonData), {\n        keepCookies: cookies\n      })\n    }));\n  };\n  const onTimeoutChange = (event) => {\n    onChange(__spreadProps(__spreadValues({}, config), {\n      jsonData: __spreadProps(__spreadValues({}, config.jsonData), {\n        timeout: parseInt(event.currentTarget.value, 10)\n      })\n    }));\n  };\n  const styles = {\n    container: css({\n      maxWidth: 578\n    })\n  };\n  return /* @__PURE__ */ React__default.createElement(ConfigSubSection, { title: \"Advanced HTTP settings\", className: cx(styles.container, className) }, /* @__PURE__ */ React__default.createElement(\n    InlineField,\n    {\n      htmlFor: \"advanced-http-cookies\",\n      label: \"Allowed cookies\",\n      labelWidth: 24,\n      tooltip: \"Grafana proxy deletes forwarded cookies by default. Specify cookies by name that should be forwarded to the data source.\",\n      disabled: config.readOnly,\n      grow: true\n    },\n    /* @__PURE__ */ React__default.createElement(\n      TagsInput,\n      {\n        id: \"advanced-http-cookies\",\n        placeholder: \"New cookie (hit enter to add)\",\n        tags: config.jsonData.keepCookies,\n        onChange: onCookiesChange\n      }\n    )\n  ), /* @__PURE__ */ React__default.createElement(\n    InlineField,\n    {\n      htmlFor: \"advanced-http-timeout\",\n      label: \"Timeout\",\n      labelWidth: 24,\n      tooltip: \"HTTP request timeout in seconds\",\n      disabled: config.readOnly,\n      grow: true\n    },\n    /* @__PURE__ */ React__default.createElement(\n      Input,\n      {\n        id: \"advanced-http-timeout\",\n        type: \"number\",\n        min: 0,\n        placeholder: \"Timeout in seconds\",\n        \"aria-label\": \"Timeout in seconds\",\n        value: config.jsonData.timeout,\n        onChange: onTimeoutChange\n      }\n    )\n  ));\n};\n\nexport { AdvancedHttpSettings };\n//# sourceMappingURL=AdvancedHttpSettings.js.map\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nexport const Divider = ({ hideLine = false }) => {\n  const styles = useStyles2(getStyles);\n\n  if (hideLine) {\n    return <hr className={styles.dividerHideLine} />;\n  }\n\n  return <hr className={styles.divider} />;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  divider: css`\n    margin: ${theme.spacing(4, 0)};\n  `,\n  dividerHideLine: css`\n    border: none;\n    margin: ${theme.spacing(3, 0)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport {\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme2,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { ConfigSubSection } from '@grafana/experimental';\nimport { InlineField, InlineFieldRow, InlineSwitch, useStyles2 } from '@grafana/ui';\n\nimport { ConfigDescriptionLink } from './ConfigDescriptionLink';\n\nexport interface NodeGraphOptions {\n  enabled?: boolean;\n}\n\nexport interface NodeGraphData extends DataSourceJsonData {\n  nodeGraph?: NodeGraphOptions;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<NodeGraphData> {}\n\nexport function NodeGraphSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <InlineFieldRow className={styles.row}>\n        <InlineField\n          tooltip=\"Displays the node graph above the trace view. Default: disabled\"\n          label=\"Enable node graph\"\n          labelWidth={26}\n        >\n          <InlineSwitch\n            id=\"enableNodeGraph\"\n            value={options.jsonData.nodeGraph?.enabled}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'nodeGraph', {\n                ...options.jsonData.nodeGraph,\n                enabled: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </div>\n  );\n}\n\nexport const NodeGraphSection = ({ options, onOptionsChange }: DataSourcePluginOptionsEditorProps) => {\n  return (\n    <ConfigSubSection\n      title=\"Node graph\"\n      description={\n        <ConfigDescriptionLink\n          description=\"Show or hide the node graph visualization.\"\n          suffix={`${options.type}/#node-graph`}\n          feature=\"the node graph\"\n        />\n      }\n    >\n      <NodeGraphSettings options={options} onOptionsChange={onOptionsChange} />\n    </ConfigSubSection>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  infoText: css`\n    label: infoText;\n    padding-bottom: ${theme.spacing(2)};\n    color: ${theme.colors.text.secondary};\n  `,\n  container: css`\n    label: container;\n    width: 100%;\n  `,\n  row: css`\n    label: row;\n    align-items: baseline;\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport {\n  DataSourceInstanceSettings,\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme2,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { ConfigSection } from '@grafana/experimental';\nimport { Button, InlineField, InlineFieldRow, Input, useStyles2 } from '@grafana/ui';\nimport { DataSourcePicker } from 'app/features/datasources/components/picker/DataSourcePicker';\n\nimport { ConfigDescriptionLink } from '../ConfigDescriptionLink';\nimport { IntervalInput } from '../IntervalInput/IntervalInput';\nimport { TagMappingInput } from '../TraceToLogs/TagMappingInput';\nimport { getTimeShiftLabel, getTimeShiftTooltip, invalidTimeShiftError } from '../TraceToLogs/TraceToLogsSettings';\n\nexport interface TraceToMetricsOptions {\n  datasourceUid?: string;\n  tags?: Array<{ key: string; value: string }>;\n  queries: TraceToMetricQuery[];\n  spanStartTimeShift?: string;\n  spanEndTimeShift?: string;\n}\n\nexport interface TraceToMetricQuery {\n  name?: string;\n  query?: string;\n}\n\nexport interface TraceToMetricsData extends DataSourceJsonData {\n  tracesToMetrics?: TraceToMetricsOptions;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TraceToMetricsData> {}\n\nexport function TraceToMetricsSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={css({ width: '100%' })}>\n      <InlineFieldRow className={styles.row}>\n        <InlineField\n          tooltip=\"The Prometheus data source the trace is going to navigate to\"\n          label=\"Data source\"\n          labelWidth={26}\n        >\n          <DataSourcePicker\n            inputId=\"trace-to-metrics-data-source-picker\"\n            pluginId=\"prometheus\"\n            current={options.jsonData.tracesToMetrics?.datasourceUid}\n            noDefault={true}\n            width={40}\n            onChange={(ds: DataSourceInstanceSettings) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                ...options.jsonData.tracesToMetrics,\n                datasourceUid: ds.uid,\n              })\n            }\n          />\n        </InlineField>\n        {options.jsonData.tracesToMetrics?.datasourceUid ? (\n          <Button\n            type=\"button\"\n            variant=\"secondary\"\n            size=\"sm\"\n            fill=\"text\"\n            onClick={() => {\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                ...options.jsonData.tracesToMetrics,\n                datasourceUid: undefined,\n              });\n            }}\n          >\n            Clear\n          </Button>\n        ) : null}\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <IntervalInput\n          label={getTimeShiftLabel('start')}\n          tooltip={getTimeShiftTooltip('start', '-2m')}\n          value={options.jsonData.tracesToMetrics?.spanStartTimeShift || ''}\n          onChange={(val) => {\n            updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n              ...options.jsonData.tracesToMetrics,\n              spanStartTimeShift: val,\n            });\n          }}\n          placeholder={'-2m'}\n          isInvalidError={invalidTimeShiftError}\n        />\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <IntervalInput\n          label={getTimeShiftLabel('end')}\n          tooltip={getTimeShiftTooltip('end', '2m')}\n          value={options.jsonData.tracesToMetrics?.spanEndTimeShift || ''}\n          onChange={(val) => {\n            updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n              ...options.jsonData.tracesToMetrics,\n              spanEndTimeShift: val,\n            });\n          }}\n          placeholder={'2m'}\n          isInvalidError={invalidTimeShiftError}\n        />\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField tooltip=\"Tags that will be used in the metrics query\" label=\"Tags\" labelWidth={26}>\n          <TagMappingInput\n            values={options.jsonData.tracesToMetrics?.tags ?? []}\n            onChange={(v) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                ...options.jsonData.tracesToMetrics,\n                tags: v,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      {options.jsonData.tracesToMetrics?.queries?.map((query, i) => (\n        <div key={i} className={styles.queryRow}>\n          <InlineField label=\"Link Label\" labelWidth={26} tooltip=\"Descriptive label for the linked query\">\n            <Input\n              label=\"Link Label\"\n              type=\"text\"\n              allowFullScreen\n              value={query.name}\n              width={40}\n              onChange={(e) => {\n                let newQueries = options.jsonData.tracesToMetrics?.queries.slice() ?? [];\n                newQueries[i].name = e.currentTarget.value;\n                updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                  ...options.jsonData.tracesToMetrics,\n                  queries: newQueries,\n                });\n              }}\n            />\n          </InlineField>\n          <InlineField\n            label=\"Query\"\n            labelWidth={10}\n            tooltip=\"The Prometheus query that will run when navigating from a trace to metrics. Interpolate tags using the `$__tags` keyword\"\n            grow\n          >\n            <Input\n              label=\"Query\"\n              type=\"text\"\n              allowFullScreen\n              value={query.query}\n              onChange={(e) => {\n                let newQueries = options.jsonData.tracesToMetrics?.queries.slice() ?? [];\n                newQueries[i].query = e.currentTarget.value;\n                updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                  ...options.jsonData.tracesToMetrics,\n                  queries: newQueries,\n                });\n              }}\n            />\n          </InlineField>\n\n          <Button\n            variant=\"destructive\"\n            title=\"Remove query\"\n            icon=\"times\"\n            type=\"button\"\n            onClick={() => {\n              let newQueries = options.jsonData.tracesToMetrics?.queries.slice();\n              newQueries?.splice(i, 1);\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                ...options.jsonData.tracesToMetrics,\n                queries: newQueries,\n              });\n            }}\n          />\n        </div>\n      ))}\n\n      <Button\n        variant=\"secondary\"\n        title=\"Add query\"\n        icon=\"plus\"\n        type=\"button\"\n        onClick={() => {\n          updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n            ...options.jsonData.tracesToMetrics,\n            queries: [...(options.jsonData.tracesToMetrics?.queries ?? []), { query: '' }],\n          });\n        }}\n      >\n        Add query\n      </Button>\n    </div>\n  );\n}\n\nexport const TraceToMetricsSection = ({ options, onOptionsChange }: DataSourcePluginOptionsEditorProps) => {\n  return (\n    <ConfigSection\n      title=\"Trace to metrics\"\n      description={\n        <ConfigDescriptionLink\n          description=\"Navigate from a trace span to the selected data source's metrics.\"\n          suffix={`${options.type}/#trace-to-metrics`}\n          feature=\"trace to metrics\"\n        />\n      }\n      isCollapsible={true}\n      isInitiallyOpen={true}\n    >\n      <TraceToMetricsSettings options={options} onOptionsChange={onOptionsChange} />\n    </ConfigSection>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing(2)};\n    color: ${theme.colors.text.secondary};\n  `,\n  row: css`\n    label: row;\n    align-items: baseline;\n  `,\n  queryRow: css`\n    label: queryRow;\n    display: flex;\n    flex-flow: wrap;\n  `,\n});\n","import React, { Suspense } from 'react';\n\nimport { Props } from './MonacoQueryFieldProps';\n\nconst Field = React.lazy(() => import(/* webpackChunkName: \"loki-query-field\" */ './MonacoQueryField'));\n\nexport const MonacoQueryFieldLazy = (props: Props) => {\n  return (\n    <Suspense fallback={null}>\n      <Field {...props} />\n    </Suspense>\n  );\n};\n","import React, { useRef } from 'react';\n\nimport { MonacoQueryFieldLazy } from './MonacoQueryFieldLazy';\nimport { Props as MonacoProps } from './MonacoQueryFieldProps';\n\nexport type Props = Omit<MonacoProps, 'onRunQuery' | 'onBlur'> & {\n  onChange: (query: string) => void;\n  onRunQuery: () => void;\n  onQueryType?: (query: string) => void;\n};\n\nexport const MonacoQueryFieldWrapper = (props: Props) => {\n  const lastRunValueRef = useRef<string | null>(null);\n  const { onRunQuery, onChange, ...rest } = props;\n\n  const handleRunQuery = (value: string) => {\n    lastRunValueRef.current = value;\n    onChange(value);\n    onRunQuery();\n  };\n\n  const handleBlur = (value: string) => {\n    onChange(value);\n  };\n\n  return <MonacoQueryFieldLazy onRunQuery={handleRunQuery} onBlur={handleBlur} onChange={onChange} {...rest} />;\n};\n","import React, { ReactNode } from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\n\nimport { LokiDatasource } from '../datasource';\nimport { shouldRefreshLabels } from '../languageUtils';\nimport { LokiQuery, LokiOptions } from '../types';\n\nimport { MonacoQueryFieldWrapper } from './monaco-query-field/MonacoQueryFieldWrapper';\n\nexport interface LokiQueryFieldProps extends QueryEditorProps<LokiDatasource, LokiQuery, LokiOptions> {\n  ExtraFieldElement?: ReactNode;\n  placeholder?: string;\n  'data-testid'?: string;\n}\n\ninterface LokiQueryFieldState {\n  labelsLoaded: boolean;\n}\n\nexport class LokiQueryField extends React.PureComponent<LokiQueryFieldProps, LokiQueryFieldState> {\n  _isMounted = false;\n\n  constructor(props: LokiQueryFieldProps) {\n    super(props);\n\n    this.state = { labelsLoaded: false };\n  }\n\n  async componentDidMount() {\n    this._isMounted = true;\n    await this.props.datasource.languageProvider.start();\n    if (this._isMounted) {\n      this.setState({ labelsLoaded: true });\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  componentDidUpdate(prevProps: LokiQueryFieldProps) {\n    const {\n      range,\n      datasource: { languageProvider },\n    } = this.props;\n    const refreshLabels = shouldRefreshLabels(range, prevProps.range);\n    // We want to refresh labels when range changes (we round up intervals to a minute)\n    if (refreshLabels) {\n      languageProvider.fetchLabels();\n    }\n  }\n\n  onChangeQuery = (value: string, override?: boolean) => {\n    // Send text change to parent\n    const { query, onChange, onRunQuery } = this.props;\n    if (onChange) {\n      const nextQuery = { ...query, expr: value };\n      onChange(nextQuery);\n\n      if (override && onRunQuery) {\n        onRunQuery();\n      }\n    }\n  };\n\n  render() {\n    const { ExtraFieldElement, query, datasource, history, onRunQuery } = this.props;\n    const placeholder = this.props.placeholder ?? 'Enter a Loki query (run with Shift+Enter)';\n\n    return (\n      <>\n        <div\n          className=\"gf-form-inline gf-form-inline--xs-view-flex-column flex-grow-1\"\n          data-testid={this.props['data-testid']}\n        >\n          <div className=\"gf-form--grow flex-shrink-1 min-width-15\">\n            <MonacoQueryFieldWrapper\n              datasource={datasource}\n              history={history ?? []}\n              onChange={this.onChangeQuery}\n              onRunQuery={onRunQuery}\n              initialValue={query.expr ?? ''}\n              placeholder={placeholder}\n            />\n          </div>\n        </div>\n        {ExtraFieldElement}\n      </>\n    );\n  }\n}\n","import { TimeRange } from '@grafana/data';\n\nfunction roundMsToMin(milliseconds: number): number {\n  return roundSecToMin(milliseconds / 1000);\n}\n\nfunction roundSecToMin(seconds: number): number {\n  return Math.floor(seconds / 60);\n}\n\nexport function shouldRefreshLabels(range?: TimeRange, prevRange?: TimeRange): boolean {\n  if (range && prevRange) {\n    const sameMinuteFrom = roundMsToMin(range.from.valueOf()) === roundMsToMin(prevRange.from.valueOf());\n    const sameMinuteTo = roundMsToMin(range.to.valueOf()) === roundMsToMin(prevRange.to.valueOf());\n    // If both are same, don't need to refresh\n    return !(sameMinuteFrom && sameMinuteTo);\n  }\n  return false;\n}\n\n// Loki regular-expressions use the RE2 syntax (https://github.com/google/re2/wiki/Syntax),\n// so every character that matches something in that list has to be escaped.\n// the list of meta characters is: *+?()|\\.[]{}^$\n// we make a javascript regular expression that matches those characters:\nconst RE2_METACHARACTERS = /[*+?()|\\\\.\\[\\]{}^$]/g;\nfunction escapeLokiRegexp(value: string): string {\n  return value.replace(RE2_METACHARACTERS, '\\\\$&');\n}\n\n// based on the openmetrics-documentation, the 3 symbols we have to handle are:\n// - \\n ... the newline character\n// - \\  ... the backslash character\n// - \"  ... the double-quote character\nexport function escapeLabelValueInExactSelector(labelValue: string): string {\n  return labelValue.replace(/\\\\/g, '\\\\\\\\').replace(/\\n/g, '\\\\n').replace(/\"/g, '\\\\\"');\n}\n\nexport function unescapeLabelValue(labelValue: string): string {\n  return labelValue.replace(/\\\\n/g, '\\n').replace(/\\\\\"/g, '\"').replace(/\\\\\\\\/g, '\\\\');\n}\n\nexport function escapeLabelValueInRegexSelector(labelValue: string): string {\n  return escapeLabelValueInExactSelector(escapeLokiRegexp(labelValue));\n}\n\nexport function escapeLabelValueInSelector(labelValue: string, selector?: string): string {\n  return isRegexSelector(selector)\n    ? escapeLabelValueInRegexSelector(labelValue)\n    : escapeLabelValueInExactSelector(labelValue);\n}\n\nexport function isRegexSelector(selector?: string) {\n  if (selector && (selector.includes('=~') || selector.includes('!~'))) {\n    return true;\n  }\n  return false;\n}\n\nexport function isBytesString(string: string) {\n  const BYTES_KEYWORDS = [\n    'b',\n    'kib',\n    'Kib',\n    'kb',\n    'KB',\n    'mib',\n    'Mib',\n    'mb',\n    'MB',\n    'gib',\n    'Gib',\n    'gb',\n    'GB',\n    'tib',\n    'Tib',\n    'tb',\n    'TB',\n    'pib',\n    'Pib',\n    'pb',\n    'PB',\n    'eib',\n    'Eib',\n    'eb',\n    'EB',\n  ];\n  const regex = new RegExp(`^(?:-?\\\\d+(?:\\\\.\\\\d+)?)(?:${BYTES_KEYWORDS.join('|')})$`);\n  const match = string.match(regex);\n  return !!match;\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport { useToggle } from 'react-use';\n\nimport { getValueFormat, GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { Collapse, Icon, Tooltip, useStyles2 } from '@grafana/ui';\nimport { QueryStats } from 'app/plugins/datasource/loki/types';\n\nexport interface Props {\n  title: string;\n  collapsedInfo: string[];\n  queryStats?: QueryStats | null;\n  children: React.ReactNode;\n}\n\nexport function QueryOptionGroup({ title, children, collapsedInfo, queryStats }: Props) {\n  const [isOpen, toggleOpen] = useToggle(false);\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.wrapper}>\n      <Collapse\n        className={styles.collapse}\n        collapsible\n        isOpen={isOpen}\n        onToggle={toggleOpen}\n        label={\n          <Stack gap={0} wrap={false}>\n            <h6 className={styles.title}>{title}</h6>\n            {!isOpen && (\n              <div className={styles.description}>\n                {collapsedInfo.map((x, i) => (\n                  <span key={i}>{x}</span>\n                ))}\n              </div>\n            )}\n          </Stack>\n        }\n      >\n        <div className={styles.body}>{children}</div>\n      </Collapse>\n\n      {queryStats && config.featureToggles.lokiQuerySplitting && (\n        <Tooltip content=\"Note: the query will be split into multiple parts and executed in sequence. Query limits will only apply each individual part.\">\n          <Icon tabIndex={0} name=\"info-circle\" className={styles.tooltip} size=\"sm\" />\n        </Tooltip>\n      )}\n\n      {queryStats && <p className={styles.stats}>{generateQueryStats(queryStats)}</p>}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    collapse: css({\n      backgroundColor: 'unset',\n      border: 'unset',\n      marginBottom: 0,\n\n      ['> button']: {\n        padding: theme.spacing(0, 1),\n      },\n    }),\n    wrapper: css({\n      width: '100%',\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'baseline',\n    }),\n    title: css({\n      flexGrow: 1,\n      overflow: 'hidden',\n      fontSize: theme.typography.bodySmall.fontSize,\n      fontWeight: theme.typography.fontWeightMedium,\n      margin: 0,\n    }),\n    description: css({\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n      fontWeight: theme.typography.bodySmall.fontWeight,\n      paddingLeft: theme.spacing(2),\n      gap: theme.spacing(2),\n      display: 'flex',\n    }),\n    body: css({\n      display: 'flex',\n      gap: theme.spacing(2),\n      flexWrap: 'wrap',\n    }),\n    stats: css({\n      margin: '0px',\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n    }),\n    tooltip: css({\n      marginRight: theme.spacing(0.25),\n    }),\n  };\n};\n\nconst generateQueryStats = (queryStats: QueryStats) => {\n  if (queryStats.message) {\n    return queryStats.message;\n  }\n\n  return `This query will process approximately ${convertUnits(queryStats)}.`;\n};\n\nconst convertUnits = (queryStats: QueryStats): string => {\n  const { text, suffix } = getValueFormat('bytes')(queryStats.bytes, 1);\n  return text + suffix;\n};\n","import React from 'react';\n\nimport { config, reportInteraction } from '@grafana/runtime';\n\nexport default function CheatSheet() {\n  reportInteraction('grafana_traces_cheatsheet_clicked', {\n    datasourceType: 'tempo',\n    grafana_version: config.buildInfo.version,\n  });\n\n  return (\n    <div>\n      <h2 id=\"tempo-cheat-sheet\">Tempo Cheat Sheet</h2>\n      <p>\n        Tempo is a trace id lookup store. Enter a trace id in the above field and hit “Run Query” to retrieve your\n        trace. Tempo is generally paired with other datasources such as Loki or Prometheus to find traces.\n      </p>\n      <p>\n        Here are some{' '}\n        <a href=\"https://grafana.com/docs/tempo/latest/guides/instrumentation/\" target=\"blank\">\n          instrumentation examples\n        </a>{' '}\n        to get you started with trace discovery through logs and metrics (exemplars).\n      </p>\n    </div>\n  );\n}\n","import { DataSourceApi } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\n\nexport const getErrorMessage = (message: string | undefined, prefix?: string) => {\n  const err = message ? ` (${message})` : '';\n  let errPrefix = prefix ? prefix : 'Error';\n  return `${errPrefix}${err}. Please check the server logs for more details.`;\n};\n\nexport async function getDS(uid?: string): Promise<DataSourceApi | undefined> {\n  if (!uid) {\n    return undefined;\n  }\n\n  const dsSrv = getDataSourceSrv();\n  try {\n    return await dsSrv.get(uid);\n  } catch (error) {\n    console.error('Failed to load data source', error);\n    return undefined;\n  }\n}\n","import React from 'react';\nimport useAsync from 'react-use/lib/useAsync';\n\nimport { InlineLabel } from '@grafana/ui';\n\nimport { LokiQueryField } from '../loki/components/LokiQueryField';\nimport { LokiDatasource } from '../loki/datasource';\nimport { LokiQuery } from '../loki/types';\n\nimport { TempoQuery } from './types';\nimport { getDS } from './utils';\n\ninterface LokiSearchProps {\n  logsDatasourceUid?: string;\n  onChange: (value: LokiQuery) => void;\n  onRunQuery: () => void;\n  query: TempoQuery;\n}\n\nexport function LokiSearch({ logsDatasourceUid, onChange, onRunQuery, query }: LokiSearchProps) {\n  const dsState = useAsync(() => getDS(logsDatasourceUid), [logsDatasourceUid]);\n  if (dsState.loading) {\n    return null;\n  }\n\n  const ds = dsState.value as LokiDatasource;\n\n  if (ds) {\n    return (\n      <>\n        <InlineLabel>Tempo uses {ds.name} to find traces.</InlineLabel>\n        <LokiQueryField\n          datasource={ds}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          query={query.linkedQuery ?? ({ refId: 'linked' } as LokiQuery)}\n          history={[]}\n        />\n      </>\n    );\n  }\n\n  if (!logsDatasourceUid) {\n    return <div className=\"text-warning\">Please set up a Loki search datasource in the datasource settings.</div>;\n  }\n\n  if (logsDatasourceUid && !ds) {\n    return (\n      <div className=\"text-warning\">\n        Loki search datasource is configured but the data source no longer exists. Please configure existing data source\n        to use the search.\n      </div>\n    );\n  }\n\n  return null;\n}\n","import type { languages } from 'monaco-editor';\nimport { Grammar } from 'prismjs';\n\nexport const languageConfiguration: languages.LanguageConfiguration = {\n  // the default separators except `@$`\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^`~!#%^&*()\\-=+\\[{\\]}\\\\|;:'\",.<>\\/?\\s]+)/g,\n  brackets: [\n    ['{', '}'],\n    ['(', ')'],\n  ],\n  autoClosingPairs: [\n    { open: '{', close: '}' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n  surroundingPairs: [\n    { open: '{', close: '}' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n  folding: {},\n};\n\nexport const operators = ['=', '!=', '>', '<', '>=', '<=', '=~', '!~'];\nexport const stringOperators = ['=', '!=', '=~', '!~'];\nexport const numberOperators = ['=', '!=', '>', '<', '>=', '<='];\n\nexport const intrinsics = ['duration', 'kind', 'name', 'status'];\nexport const scopes: string[] = ['resource', 'span'];\n\nexport const functions = ['avg', 'min', 'max', 'sum', 'count', 'by'];\n\nconst keywords = intrinsics.concat(scopes);\n\nconst statusValues = ['ok', 'unset', 'error', 'false', 'true'];\n\nexport const language: languages.IMonarchLanguage = {\n  ignoreCase: false,\n  defaultToken: '',\n  tokenPostfix: '.traceql',\n\n  keywords,\n  operators,\n  statusValues,\n  functions,\n\n  symbols: /[=><!~?:&|+\\-*\\/^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  digits: /\\d+(_+\\d+)*/,\n  octaldigits: /[0-7]+(_+[0-7]+)*/,\n  binarydigits: /[0-1]+(_+[0-1]+)*/,\n\n  tokenizer: {\n    root: [\n      // durations\n      [/[0-9]+(.[0-9]+)?(us|µs|ns|ms|s|m|h)/, 'number'],\n\n      // trace ID\n      [/^\\s*[0-9A-Fa-f]+\\s*$/, 'tag'],\n\n      // functions, keywords, predefined values\n      [\n        /[a-zA-Z_.]\\w*/,\n        {\n          cases: {\n            '@functions': 'predefined',\n            '@keywords': 'keyword',\n            '@statusValues': 'type',\n            '@default': 'tag',\n          },\n        },\n      ],\n\n      // strings\n      [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n      [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n      [/\"/, 'string', '@string_double'],\n      [/'/, 'string', '@string_single'],\n\n      // delimiters and operators\n      [/[{}()\\[\\]]/, 'delimiter.bracket'],\n      [\n        /@symbols/,\n        {\n          cases: {\n            '@operators': 'delimiter',\n            '@default': '',\n          },\n        },\n      ],\n\n      // numbers\n      [/(@digits)[eE]([\\-+]?(@digits))?[fFdD]?/, 'number.float'],\n      [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?[fFdD]?/, 'number.float'],\n      [/0(@octaldigits)[Ll]?/, 'number.octal'],\n      [/0[bB](@binarydigits)[Ll]?/, 'number.binary'],\n      [/(@digits)[fFdD]/, 'number.float'],\n      [/(@digits)[lL]?/, 'number'],\n    ],\n\n    string_double: [\n      [/[^\\\\\"]+/, 'string'],\n      [/@escapes/, 'string.escape'],\n      [/\\\\./, 'string.escape.invalid'],\n      [/\"/, 'string', '@pop'],\n    ],\n\n    string_single: [\n      [/[^\\\\']+/, 'string'],\n      [/@escapes/, 'string.escape'],\n      [/\\\\./, 'string.escape.invalid'],\n      [/'/, 'string', '@pop'],\n    ],\n  },\n};\n\nexport const languageDefinition = {\n  id: 'traceql',\n  extensions: ['.traceql'],\n  aliases: ['tempo', 'traceql'],\n  mimetypes: [],\n  def: {\n    language,\n    languageConfiguration,\n  },\n};\n\nexport const traceqlGrammar: Grammar = {\n  comment: {\n    pattern: /#.*/,\n  },\n  'span-set': {\n    pattern: /\\{[^}]*}/,\n    inside: {\n      filter: {\n        pattern: /([\\w.\\/-]+)?(\\s*)(([!=+\\-<>~]+)\\s*(\"([^\"\\n&]+)?\"?|([^\"\\n\\s&|}]+))?)/g,\n        inside: {\n          comment: {\n            pattern: /#.*/,\n          },\n          'label-key': {\n            pattern: /[a-z_.][\\w./_-]*(?=\\s*(=|!=|>|<|>=|<=|=~|!~))/,\n            alias: 'attr-name',\n          },\n          'label-value': {\n            pattern: /(\"(?:\\\\.|[^\\\\\"])*\")|(\\w+)/,\n            alias: 'attr-value',\n          },\n        },\n      },\n      punctuation: /[}{&|]/,\n    },\n  },\n  number: /\\b-?\\d+((\\.\\d*)?([eE][+-]?\\d+)?)?\\b/,\n  operator: new RegExp(`/[-+*/=%^~]|&&?|\\\\|?\\\\||!=?|<(?:=>?|<|>)?|>[>=]?|`, 'i'),\n  punctuation: /[{};()`,.]/,\n};\n","import { startCase, uniq } from 'lodash';\n\nimport { SelectableValue } from '@grafana/data';\n\nimport { TraceqlFilter, TraceqlSearchScope } from '../dataquery.gen';\nimport { intrinsics } from '../traceql/traceql';\nimport { Scope } from '../types';\n\nexport const generateQueryFromFilters = (filters: TraceqlFilter[]) => {\n  return `{${filters\n    .filter((f) => f.tag && f.operator && f.value?.length)\n    .map((f) => `${scopeHelper(f)}${f.tag}${f.operator}${valueHelper(f)}`)\n    .join(' && ')}}`;\n};\n\nconst valueHelper = (f: TraceqlFilter) => {\n  if (Array.isArray(f.value) && f.value.length > 1) {\n    return `\"${f.value.join('|')}\"`;\n  }\n  if (f.valueType === 'string') {\n    return `\"${f.value}\"`;\n  }\n  return f.value;\n};\nconst scopeHelper = (f: TraceqlFilter) => {\n  // Intrinsic fields don't have a scope\n  if (intrinsics.find((t) => t === f.tag)) {\n    return '';\n  }\n  return (\n    (f.scope === TraceqlSearchScope.Resource || f.scope === TraceqlSearchScope.Span ? f.scope?.toLowerCase() : '') + '.'\n  );\n};\n\nexport const filterScopedTag = (f: TraceqlFilter) => {\n  return scopeHelper(f) + f.tag;\n};\n\nexport const filterTitle = (f: TraceqlFilter) => {\n  // Special case for the intrinsic \"name\" since a label called \"Name\" isn't explicit\n  if (f.tag === 'name') {\n    return 'Span Name';\n  }\n  return startCase(filterScopedTag(f));\n};\n\nexport const getFilteredTags = (tags: string[], staticTags: Array<string | undefined>) => {\n  return [...intrinsics, ...tags].filter((t) => !staticTags.includes(t));\n};\n\nexport const getUnscopedTags = (scopes: Scope[]) => {\n  return uniq(\n    scopes.map((scope: Scope) => (scope.name && scope.name !== 'intrinsic' && scope.tags ? scope.tags : [])).flat()\n  );\n};\n\nexport const getAllTags = (scopes: Scope[]) => {\n  return uniq(scopes.map((scope: Scope) => (scope.tags ? scope.tags : [])).flat());\n};\n\nexport const getTagsByScope = (scopes: Scope[], scope: TraceqlSearchScope | string) => {\n  return uniq(scopes.map((s: Scope) => (s.name && s.name === scope && s.tags ? s.tags : [])).flat());\n};\n\nexport function replaceAt<T>(array: T[], index: number, value: T) {\n  const ret = array.slice(0);\n  ret[index] = value;\n  return ret;\n}\n\nexport const operatorSelectableValue = (op: string) => {\n  const result: SelectableValue = { label: op, value: op };\n  switch (op) {\n    case '=':\n      result.description = 'Equals';\n      break;\n    case '!=':\n      result.description = 'Not equals';\n      break;\n    case '>':\n      result.description = 'Greater';\n      break;\n    case '>=':\n      result.description = 'Greater or Equal';\n      break;\n    case '<':\n      result.description = 'Less';\n      break;\n    case '<=':\n      result.description = 'Less or Equal';\n      break;\n    case '=~':\n      result.description = 'Matches regex';\n      break;\n    case '!~':\n      result.description = 'Does not match regex';\n      break;\n  }\n  return result;\n};\n","import React, { useEffect, useState } from 'react';\n\nimport { DataQuery, SelectableValue } from '@grafana/data';\nimport { InlineField, InlineFieldRow, Select } from '@grafana/ui';\n\nimport { TempoDatasource } from './datasource';\n\nexport enum TempoVariableQueryType {\n  LabelNames,\n  LabelValues,\n}\n\nexport interface TempoVariableQuery extends DataQuery {\n  type: TempoVariableQueryType;\n  label?: string;\n  stream?: string;\n}\n\nconst variableOptions = [\n  { label: 'Label names', value: TempoVariableQueryType.LabelNames },\n  { label: 'Label values', value: TempoVariableQueryType.LabelValues },\n];\n\nconst refId = 'TempoDatasourceVariableQueryEditor-VariableQuery';\n\nexport type TempoVariableQueryEditorProps = {\n  onChange: (value: TempoVariableQuery) => void;\n  query: TempoVariableQuery;\n  datasource: TempoDatasource;\n};\n\nexport const TempoVariableQueryEditor = ({ onChange, query, datasource }: TempoVariableQueryEditorProps) => {\n  const [label, setLabel] = useState(query.label || '');\n  const [type, setType] = useState<number | undefined>(query.type);\n  const [labelOptions, setLabelOptions] = useState<Array<SelectableValue<string>>>([]);\n\n  useEffect(() => {\n    if (type === TempoVariableQueryType.LabelValues) {\n      datasource.labelNamesQuery().then((labelNames: Array<{ text: string }>) => {\n        setLabelOptions(labelNames.map(({ text }) => ({ label: text, value: text })));\n      });\n    }\n  }, [datasource, query, type]);\n\n  const onQueryTypeChange = (newType: SelectableValue<TempoVariableQueryType>) => {\n    setType(newType.value);\n    if (newType.value !== undefined) {\n      onChange({\n        type: newType.value,\n        label,\n        refId,\n      });\n    }\n  };\n\n  const onLabelChange = (newLabel: SelectableValue<string>) => {\n    const newLabelValue = newLabel.value || '';\n    setLabel(newLabelValue);\n    if (type !== undefined) {\n      onChange({\n        type,\n        label: newLabelValue,\n        refId,\n      });\n    }\n  };\n\n  const handleBlur = () => {\n    if (type !== undefined) {\n      onChange({ type, label, refId });\n    }\n  };\n\n  return (\n    <>\n      <InlineFieldRow>\n        <InlineField label=\"Query type\" labelWidth={20}>\n          <Select\n            aria-label=\"Query type\"\n            onChange={onQueryTypeChange}\n            onBlur={handleBlur}\n            value={type}\n            options={variableOptions}\n            width={32}\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      {type === TempoVariableQueryType.LabelValues && (\n        <InlineFieldRow>\n          <InlineField label=\"Label\" labelWidth={20}>\n            <Select\n              aria-label=\"Label\"\n              onChange={onLabelChange}\n              onBlur={handleBlur}\n              value={{ label, value: label }}\n              options={labelOptions}\n              width={32}\n              allowCustomValue\n            />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n    </>\n  );\n};\n","import { LanguageProvider, SelectableValue } from '@grafana/data';\n\nimport { getAllTags, getTagsByScope, getUnscopedTags } from './SearchTraceQLEditor/utils';\nimport { TraceqlSearchScope } from './dataquery.gen';\nimport { TempoDatasource } from './datasource';\nimport { Scope } from './types';\n\nexport default class TempoLanguageProvider extends LanguageProvider {\n  datasource: TempoDatasource;\n  tagsV1?: string[];\n  tagsV2?: Scope[];\n  constructor(datasource: TempoDatasource, initialValues?: any) {\n    super();\n\n    this.datasource = datasource;\n    Object.assign(this, initialValues);\n  }\n\n  request = async (url: string, params = {}) => {\n    const res = await this.datasource.metadataRequest(url, params);\n    return res?.data;\n  };\n\n  start = async () => {\n    if (!this.startTask) {\n      this.startTask = this.fetchTags().then(() => {\n        return [];\n      });\n    }\n\n    return this.startTask;\n  };\n\n  async fetchTags() {\n    let v1Resp, v2Resp;\n    try {\n      v2Resp = await this.request('/api/v2/search/tags', []);\n    } catch (error) {\n      v1Resp = await this.request('/api/search/tags', []);\n    }\n\n    if (v2Resp && v2Resp.scopes) {\n      this.setV2Tags(v2Resp.scopes);\n    } else if (v1Resp) {\n      this.setV1Tags(v1Resp.tagNames);\n    }\n  }\n\n  setV1Tags = (tags: string[]) => {\n    this.tagsV1 = tags;\n  };\n\n  setV2Tags = (tags: Scope[]) => {\n    this.tagsV2 = tags;\n  };\n\n  getTags = (scope?: TraceqlSearchScope) => {\n    if (this.tagsV2 && scope) {\n      if (scope === TraceqlSearchScope.Unscoped) {\n        return getUnscopedTags(this.tagsV2);\n      }\n      return getTagsByScope(this.tagsV2, scope);\n    } else if (this.tagsV1) {\n      // This is needed because the /api/v2/search/tag/${tag}/values API expects \"status\" and the v1 API expects \"status.code\"\n      // so Tempo doesn't send anything and we inject it here for the autocomplete\n      if (!this.tagsV1.find((t) => t === 'status')) {\n        this.tagsV1.push('status');\n      }\n      return this.tagsV1;\n    }\n    return [];\n  };\n\n  getMetricsSummaryTags = (scope?: TraceqlSearchScope) => {\n    if (this.tagsV2 && scope) {\n      if (scope === TraceqlSearchScope.Unscoped) {\n        return getUnscopedTags(this.tagsV2);\n      }\n      return getTagsByScope(this.tagsV2, scope);\n    } else if (this.tagsV1) {\n      return this.tagsV1;\n    }\n    return [];\n  };\n\n  getTraceqlAutocompleteTags = (scope?: string) => {\n    if (this.tagsV2) {\n      if (!scope) {\n        // have not typed a scope yet || unscoped (.) typed\n        return getUnscopedTags(this.tagsV2);\n      } else if (scope === TraceqlSearchScope.Unscoped) {\n        return getUnscopedTags(this.tagsV2);\n      }\n      return getTagsByScope(this.tagsV2, scope);\n    } else if (this.tagsV1) {\n      // This is needed because the /api/v2/search/tag/${tag}/values API expects \"status\" and the v1 API expects \"status.code\"\n      // so Tempo doesn't send anything and we inject it here for the autocomplete\n      if (!this.tagsV1.find((t) => t === 'status')) {\n        this.tagsV1.push('status');\n      }\n      return this.tagsV1;\n    }\n    return [];\n  };\n\n  getAutocompleteTags = () => {\n    if (this.tagsV2) {\n      return getAllTags(this.tagsV2);\n    } else if (this.tagsV1) {\n      // This is needed because the /api/search/tag/${tag}/values API expects \"status.code\" and the v2 API expects \"status\"\n      // so Tempo doesn't send anything and we inject it here for the autocomplete\n      if (!this.tagsV1.find((t) => t === 'status.code')) {\n        this.tagsV1.push('status.code');\n      }\n      return this.tagsV1;\n    }\n    return [];\n  };\n\n  async getOptionsV1(tag: string): Promise<Array<SelectableValue<string>>> {\n    const encodedTag = this.encodeTag(tag);\n    const response = await this.request(`/api/search/tag/${encodedTag}/values`);\n    let options: Array<SelectableValue<string>> = [];\n    if (response && response.tagValues) {\n      options = response.tagValues.map((v: string) => ({\n        value: v,\n        label: v,\n      }));\n    }\n    return options;\n  }\n\n  async getOptionsV2(tag: string, query?: string): Promise<Array<SelectableValue<string>>> {\n    const encodedTag = this.encodeTag(tag);\n    const response = await this.request(`/api/v2/search/tag/${encodedTag}/values`, query ? { q: query } : {});\n    let options: Array<SelectableValue<string>> = [];\n    if (response && response.tagValues) {\n      response.tagValues.forEach((v: { type: string; value?: string }) => {\n        if (v.value) {\n          options.push({\n            type: v.type,\n            value: v.value,\n            label: v.value,\n          });\n        }\n      });\n    }\n    return options;\n  }\n\n  /**\n   * Encode (serialize) a given tag for use in a URL.\n   *\n   * @param tag the tag to encode\n   * @returns the encoded tag\n   */\n  private encodeTag = (tag: string): string => {\n    // If we call `encodeURIComponent` only once, we still get an error when issuing a request to the backend\n    // Reference: https://stackoverflow.com/a/37456192\n    return encodeURIComponent(encodeURIComponent(tag));\n  };\n}\n","import {\n  createDataFrame,\n  DataSourceInstanceSettings,\n  FieldDTO,\n  FieldType,\n  MutableDataFrame,\n  sortDataFrame,\n} from '@grafana/data';\n\nexport type MetricsSummary = {\n  spanCount: string;\n  errorSpanCount?: string;\n  p50: string;\n  p90: string;\n  p95: string;\n  p99: string;\n  series: Series[];\n};\n\ntype Series = {\n  key: string;\n  value: {\n    type: number;\n    n?: number;\n    f?: number;\n    s?: string;\n    b?: string;\n    d?: string;\n    status?: number;\n    kind?: number;\n  };\n};\n\ntype MetricsData = {\n  spanCount: number;\n  errorPercentage: number | string;\n  p50: number;\n  p90: number;\n  p95: number;\n  p99: number;\n  [key: string]: string | number;\n};\n\nexport function createTableFrameFromMetricsSummaryQuery(\n  data: MetricsSummary[],\n  targetQuery: string,\n  instanceSettings: DataSourceInstanceSettings\n) {\n  let frame;\n\n  if (!data.length) {\n    return emptyResponse;\n  }\n\n  const dynamicMetrics: Record<string, FieldDTO> = {};\n  data.forEach((res: MetricsSummary) => {\n    const configQuery = getConfigQuery(res.series, targetQuery);\n    res.series.forEach((series: Series) => {\n      dynamicMetrics[series.key] = {\n        name: `${series.key}`,\n        type: FieldType.string,\n        config: getConfig(series, configQuery, instanceSettings),\n        values: [],\n      };\n    });\n  });\n\n  frame = createDataFrame({\n    name: 'Metrics Summary',\n    refId: 'metrics-summary',\n    fields: [\n      ...Object.values(dynamicMetrics).sort((a, b) => a.name.localeCompare(b.name)),\n      {\n        name: 'kind',\n        type: FieldType.string,\n        config: { displayNameFromDS: 'Kind', custom: { width: 150 } },\n      },\n      {\n        name: 'spanCount',\n        type: FieldType.number,\n        config: { displayNameFromDS: 'Span count', custom: { width: 150 } },\n      },\n      {\n        name: 'errorPercentage',\n        type: FieldType.number,\n        config: { displayNameFromDS: 'Error', unit: 'percent', custom: { width: 150 } },\n      },\n      getPercentileRow('p50'),\n      getPercentileRow('p90'),\n      getPercentileRow('p95'),\n      getPercentileRow('p99'),\n    ],\n    meta: {\n      preferredVisualisationType: 'table',\n    },\n  });\n\n  const metricsData = data.map(transformToMetricsData);\n  frame.length = metricsData.length;\n  for (const trace of metricsData) {\n    for (const field of frame.fields) {\n      field.values.push(trace[field.name]);\n    }\n  }\n  frame = sortDataFrame(frame, 0);\n\n  return [frame];\n}\n\nexport const transformToMetricsData = (data: MetricsSummary) => {\n  const errorPercentage = data.errorSpanCount\n    ? (getNumberForMetric(data.errorSpanCount) / getNumberForMetric(data.spanCount)) * 100\n    : '0%';\n\n  const metricsData: MetricsData = {\n    kind: 'server', // so the user knows all results are of kind = server\n    spanCount: getNumberForMetric(data.spanCount),\n    errorPercentage,\n    p50: getNumberForMetric(data.p50),\n    p90: getNumberForMetric(data.p90),\n    p95: getNumberForMetric(data.p95),\n    p99: getNumberForMetric(data.p99),\n  };\n\n  data.series.forEach((series: Series) => {\n    metricsData[`${series.key}`] = getMetricValue(series) || '';\n  });\n\n  return metricsData;\n};\n\nexport const getConfigQuery = (series: Series[], targetQuery: string) => {\n  const queryParts = series.map((x: Series) => {\n    const isNumber = x.value.type === 3 || x.value.type === 4;\n    const isIntrinsic = x.value.type === 8 || x.value.type === 9;\n    const surround = isNumber || isIntrinsic ? '' : '\"';\n    return `${x.key}=${surround}` + '${__data.fields[\"' + x.key + '\"]}' + `${surround}`;\n  });\n\n  let configQuery = '';\n  const closingBracketIndex = targetQuery.indexOf('}');\n\n  if (closingBracketIndex !== -1) {\n    const queryAfterClosingBracket = targetQuery.substring(closingBracketIndex + 1);\n    configQuery = targetQuery.substring(0, closingBracketIndex);\n    if (queryParts.length > 0) {\n      configQuery += targetQuery.replace(/\\s/g, '').includes('{}') ? '' : ' && ';\n      configQuery += `${queryParts.join(' && ')} && kind=server`;\n      configQuery += `}`;\n    }\n    configQuery += `${queryAfterClosingBracket}`;\n  } else {\n    configQuery = `{${queryParts.join(' && ')} && kind=server} | ${targetQuery}`;\n  }\n\n  return configQuery;\n};\n\nconst getConfig = (series: Series, query: string, instanceSettings: DataSourceInstanceSettings) => {\n  const commonConfig = {\n    displayNameFromDS: series.key,\n    noValue: '<no value>',\n    links: [\n      {\n        title: 'Query in explore',\n        url: '',\n        internal: {\n          datasourceUid: instanceSettings.uid,\n          datasourceName: instanceSettings.name,\n          query: {\n            query,\n            queryType: 'traceql',\n          },\n        },\n      },\n    ],\n  };\n\n  if (series.value.type === 7) {\n    return {\n      ...commonConfig,\n      unit: 'ns',\n    };\n  }\n  return { ...commonConfig };\n};\n\nconst NO_VALUE = '';\n\nconst getMetricValue = (series: Series) => {\n  if (!series.value.type) {\n    return NO_VALUE;\n  }\n\n  switch (series.value.type) {\n    case 3:\n      return series.value.n;\n    case 4:\n      return series.value.f;\n    case 5:\n      return series.value.s;\n    case 6:\n      return series.value.b;\n    case 7:\n      return series.value.d;\n    case 8:\n      return getSpanStatusCode(series.value.status);\n    case 9:\n      return getSpanKind(series.value.kind);\n    default:\n      return NO_VALUE;\n  }\n};\n\n// Values set according to Tempo enum: https://github.com/grafana/tempo/blob/main/pkg/traceql/enum_statics.go\nconst getSpanStatusCode = (statusCode: number | undefined) => {\n  if (!statusCode) {\n    return NO_VALUE;\n  }\n\n  switch (statusCode) {\n    case 0:\n      return 'error';\n    case 1:\n      return 'ok';\n    default:\n      return 'unset';\n  }\n};\n\n// Values set according to Tempo enum: https://github.com/grafana/tempo/blob/main/pkg/traceql/enum_statics.go\nconst getSpanKind = (kind: number | undefined) => {\n  if (!kind) {\n    return NO_VALUE;\n  }\n\n  switch (kind) {\n    case 1:\n      return 'internal';\n    case 2:\n      return 'client';\n    case 3:\n      return 'server';\n    case 4:\n      return 'producer';\n    case 5:\n      return 'consumer';\n    default:\n      return 'unspecified';\n  }\n};\n\nconst getPercentileRow = (name: string) => {\n  return {\n    name: name,\n    type: FieldType.number,\n    config: {\n      displayNameFromDS: name,\n      unit: 'ns',\n      custom: {\n        width: 150,\n      },\n    },\n  };\n};\n\nconst getNumberForMetric = (metric: string) => {\n  const number = parseInt(metric, 10);\n  return isNaN(number) ? 0 : number;\n};\n\nexport const emptyResponse = new MutableDataFrame({\n  name: 'Metrics Summary',\n  refId: 'metrics-summary',\n  fields: [],\n  meta: {\n    preferredVisualisationType: 'table',\n  },\n});\n","import { capitalize } from 'lodash';\nimport { map, Observable, defer, mergeMap } from 'rxjs';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport {\n  DataFrame,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  FieldType,\n  LiveChannelScope,\n  LoadingState,\n  MutableDataFrame,\n  ThresholdsConfig,\n  ThresholdsMode,\n} from '@grafana/data';\nimport { getGrafanaLiveSrv } from '@grafana/runtime';\n\nimport { SearchStreamingState } from './dataquery.gen';\nimport { DEFAULT_SPSS, TempoDatasource } from './datasource';\nimport { formatTraceQLResponse } from './resultTransformer';\nimport { SearchMetrics, TempoJsonData, TempoQuery } from './types';\nexport async function getLiveStreamKey(): Promise<string> {\n  return uuidv4();\n}\n\nexport function doTempoChannelStream(\n  query: TempoQuery,\n  ds: TempoDatasource,\n  options: DataQueryRequest<TempoQuery>,\n  instanceSettings: DataSourceInstanceSettings<TempoJsonData>\n): Observable<DataQueryResponse> {\n  const range = options.range;\n\n  let frames: DataFrame[] | undefined = undefined;\n  let state: LoadingState = LoadingState.NotStarted;\n\n  return defer(() => getLiveStreamKey()).pipe(\n    mergeMap((key) => {\n      const requestTime = performance.now();\n      return getGrafanaLiveSrv()\n        .getStream<MutableDataFrame>({\n          scope: LiveChannelScope.DataSource,\n          namespace: ds.uid,\n          path: `search/${key}`,\n          data: {\n            ...query,\n            SpansPerSpanSet: query.spss ?? DEFAULT_SPSS,\n            timeRange: {\n              from: range.from.toISOString(),\n              to: range.to.toISOString(),\n            },\n          },\n        })\n        .pipe(\n          map((evt) => {\n            if ('message' in evt && evt?.message) {\n              const currentTime = performance.now();\n              const elapsedTime = currentTime - requestTime;\n              // Schema should be [traces, metrics, state, error]\n              const traces = evt.message.data.values[0][0];\n              const metrics = evt.message.data.values[1][0];\n              const frameState: SearchStreamingState = evt.message.data.values[2][0];\n              const error = evt.message.data.values[3][0];\n\n              switch (frameState) {\n                case SearchStreamingState.Done:\n                  state = LoadingState.Done;\n                  break;\n                case SearchStreamingState.Streaming:\n                  state = LoadingState.Streaming;\n                  break;\n                case SearchStreamingState.Error:\n                  throw new Error(error);\n              }\n\n              frames = [\n                metricsDataFrame(metrics, frameState, elapsedTime),\n                ...formatTraceQLResponse(traces, instanceSettings, query.tableType),\n              ];\n            }\n            return {\n              data: frames || [],\n              state,\n            };\n          })\n        );\n    })\n  );\n}\n\nfunction metricsDataFrame(metrics: SearchMetrics, state: SearchStreamingState, elapsedTime: number) {\n  const progressThresholds: ThresholdsConfig = {\n    steps: [\n      {\n        color: 'blue',\n        value: -Infinity,\n      },\n      {\n        color: 'green',\n        value: 75,\n      },\n    ],\n    mode: ThresholdsMode.Absolute,\n  };\n\n  const frame: DataFrame = {\n    refId: 'streaming-progress',\n    name: 'Streaming Progress',\n    length: 1,\n    fields: [\n      {\n        name: 'state',\n        type: FieldType.string,\n        values: [capitalize(state.toString())],\n        config: {\n          displayNameFromDS: 'State',\n        },\n      },\n      {\n        name: 'elapsedTime',\n        type: FieldType.number,\n        values: [elapsedTime],\n        config: {\n          unit: 'ms',\n          displayNameFromDS: 'Elapsed Time',\n        },\n      },\n      {\n        name: 'totalBlocks',\n        type: FieldType.number,\n        values: [metrics.totalBlocks],\n        config: {\n          displayNameFromDS: 'Total Blocks',\n        },\n      },\n      {\n        name: 'completedJobs',\n        type: FieldType.number,\n        values: [metrics.completedJobs],\n        config: {\n          displayNameFromDS: 'Completed Jobs',\n        },\n      },\n      {\n        name: 'totalJobs',\n        type: FieldType.number,\n        values: [metrics.totalJobs],\n        config: {\n          displayNameFromDS: 'Total Jobs',\n        },\n      },\n      {\n        name: 'progress',\n        type: FieldType.number,\n        values: [\n          state === SearchStreamingState.Done ? 100 : ((metrics.completedJobs || 0) / (metrics.totalJobs || 1)) * 100,\n        ],\n        config: {\n          displayNameFromDS: 'Progress',\n          unit: 'percent',\n          min: 0,\n          max: 100,\n          custom: {\n            cellOptions: {\n              type: 'gauge',\n              mode: 'gradient',\n            },\n          },\n          thresholds: progressThresholds,\n        },\n      },\n    ],\n    meta: {\n      preferredVisualisationType: 'table',\n    },\n  };\n  return frame;\n}\n","import { from, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { DataQueryRequest, CustomVariableSupport, MetricFindValue } from '@grafana/data';\n\nimport { TempoVariableQuery, TempoVariableQueryEditor } from './VariableQueryEditor';\nimport { TempoDatasource } from './datasource';\n\nexport class TempoVariableSupport extends CustomVariableSupport<TempoDatasource, TempoVariableQuery> {\n  editor = TempoVariableQueryEditor;\n\n  constructor(private datasource: TempoDatasource) {\n    super();\n  }\n\n  query(request: DataQueryRequest<TempoVariableQuery>): Observable<{ data: MetricFindValue[] }> {\n    if (!this.datasource) {\n      throw new Error('Datasource not initialized');\n    }\n\n    const result = this.datasource.executeVariableQuery(request.targets[0]);\n    return from(result).pipe(map((data) => ({ data })));\n  }\n}\n","import { groupBy, identity, pick, pickBy, startCase } from 'lodash';\nimport { EMPTY, from, lastValueFrom, merge, Observable, of, throwError } from 'rxjs';\nimport { catchError, concatMap, map, mergeMap, toArray } from 'rxjs/operators';\nimport semver from 'semver';\n\nimport {\n  CoreApp,\n  DataFrame,\n  DataFrameDTO,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataQueryResponseData,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  dateTime,\n  FieldType,\n  isValidGoDuration,\n  LoadingState,\n  rangeUtil,\n  ScopedVars,\n} from '@grafana/data';\nimport {\n  BackendSrvRequest,\n  config,\n  DataSourceWithBackend,\n  getBackendSrv,\n  getTemplateSrv,\n  reportInteraction,\n  TemplateSrv,\n} from '@grafana/runtime';\nimport { BarGaugeDisplayMode, TableCellDisplayMode, VariableFormatID } from '@grafana/schema';\nimport { NodeGraphOptions } from 'app/core/components/NodeGraphSettings';\nimport { TraceToLogsOptions } from 'app/core/components/TraceToLogs/TraceToLogsSettings';\nimport { serializeParams } from 'app/core/utils/fetch';\nimport { SpanBarOptions } from 'app/features/explore/TraceView/components';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\n\nimport { LokiOptions } from '../loki/types';\nimport { PrometheusDatasource } from '../prometheus/datasource';\nimport { PromQuery } from '../prometheus/types';\n\nimport { generateQueryFromFilters } from './SearchTraceQLEditor/utils';\nimport { TempoVariableQuery, TempoVariableQueryType } from './VariableQueryEditor';\nimport { TraceqlFilter, TraceqlSearchScope } from './dataquery.gen';\nimport {\n  defaultTableFilter,\n  durationMetric,\n  errorRateMetric,\n  failedMetric,\n  histogramMetric,\n  mapPromMetricsToServiceMap,\n  rateMetric,\n  serviceMapMetrics,\n  totalsMetric,\n} from './graphTransform';\nimport TempoLanguageProvider from './language_provider';\nimport { createTableFrameFromMetricsSummaryQuery, emptyResponse, MetricsSummary } from './metricsSummary';\nimport {\n  createTableFrameFromSearch,\n  transformFromOTLP as transformFromOTEL,\n  transformTrace,\n  transformTraceList,\n  formatTraceQLResponse,\n} from './resultTransformer';\nimport { doTempoChannelStream } from './streaming';\nimport { SearchQueryParams, TempoJsonData, TempoQuery } from './types';\nimport { getErrorMessage } from './utils';\nimport { TempoVariableSupport } from './variables';\n\nexport const DEFAULT_LIMIT = 20;\nexport const DEFAULT_SPSS = 3; // spans per span set\n\nenum FeatureName {\n  streaming = 'streaming',\n}\n\n/* Map, for each feature (e.g., streaming), the minimum Tempo version required to have that\n ** feature available. If the running Tempo instance on the user's backend is older than the\n ** target version, the feature is disabled in Grafana (frontend).\n */\nconst featuresToTempoVersion = {\n  [FeatureName.streaming]: '2.2.0',\n};\n\n// The version that we use as default in case we cannot retrieve it from the backend.\n// This is the last minor version of Tempo that does not expose the endpoint for build information.\nconst defaultTempoVersion = '2.1.0';\n\ninterface ServiceMapQueryResponse {\n  nodes: DataFrame;\n  edges: DataFrame;\n}\n\ninterface ServiceMapQueryResponseWithRates {\n  rates: Array<DataFrame | DataFrameDTO>;\n  nodes: DataFrame;\n  edges: DataFrame;\n}\n\nexport class TempoDatasource extends DataSourceWithBackend<TempoQuery, TempoJsonData> {\n  tracesToLogs?: TraceToLogsOptions;\n  serviceMap?: {\n    datasourceUid?: string;\n  };\n  search?: {\n    hide?: boolean;\n    filters?: TraceqlFilter[];\n  };\n  nodeGraph?: NodeGraphOptions;\n  lokiSearch?: {\n    datasourceUid?: string;\n  };\n  traceQuery?: {\n    timeShiftEnabled?: boolean;\n    spanStartTimeShift?: string;\n    spanEndTimeShift?: string;\n  };\n  uploadedJson?: string | ArrayBuffer | null = null;\n  spanBar?: SpanBarOptions;\n  languageProvider: TempoLanguageProvider;\n\n  // The version of Tempo running on the backend. `null` if we cannot retrieve it for whatever reason\n  tempoVersion?: string | null;\n\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings<TempoJsonData>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n    this.tracesToLogs = instanceSettings.jsonData.tracesToLogs;\n    this.serviceMap = instanceSettings.jsonData.serviceMap;\n    this.search = instanceSettings.jsonData.search;\n    this.nodeGraph = instanceSettings.jsonData.nodeGraph;\n    this.lokiSearch = instanceSettings.jsonData.lokiSearch;\n    this.traceQuery = instanceSettings.jsonData.traceQuery;\n    this.languageProvider = new TempoLanguageProvider(this);\n\n    if (!this.search?.filters) {\n      this.search = {\n        ...this.search,\n        filters: [\n          {\n            id: 'service-name',\n            tag: 'service.name',\n            operator: '=',\n            scope: TraceqlSearchScope.Resource,\n          },\n          { id: 'span-name', tag: 'name', operator: '=', scope: TraceqlSearchScope.Span },\n        ],\n      };\n    }\n\n    this.variables = new TempoVariableSupport(this);\n  }\n\n  async executeVariableQuery(query: TempoVariableQuery) {\n    // Avoid failing if the user did not select the query type (label names, label values, etc.)\n    if (query.type === undefined) {\n      return new Promise<Array<{ text: string }>>(() => []);\n    }\n\n    switch (query.type) {\n      case TempoVariableQueryType.LabelNames: {\n        return await this.labelNamesQuery();\n      }\n      case TempoVariableQueryType.LabelValues: {\n        return this.labelValuesQuery(query.label);\n      }\n      default: {\n        throw Error('Invalid query type', query.type);\n      }\n    }\n  }\n\n  async labelNamesQuery(): Promise<Array<{ text: string }>> {\n    await this.languageProvider.fetchTags();\n    const tags = this.languageProvider.getAutocompleteTags();\n    return tags.filter((tag) => tag !== undefined).map((tag) => ({ text: tag }));\n  }\n\n  async labelValuesQuery(labelName?: string): Promise<Array<{ text: string }>> {\n    if (!labelName) {\n      return [];\n    }\n\n    let options;\n    try {\n      // Retrieve the scope of the tag\n      // Example: given `http.status_code`, we want scope `span`\n      // Note that we ignore possible name clashes, e.g., `http.status_code` in both `span` and `resource`\n      const scope: string | undefined = (this.languageProvider.tagsV2 || [])\n        // flatten the Scope objects\n        .flatMap((tagV2) => tagV2.tags.map((tag) => ({ scope: tagV2.name, name: tag })))\n        // find associated scope\n        .find((tag) => tag.name === labelName)?.scope;\n      if (!scope) {\n        throw Error(`Scope for tag ${labelName} not found`);\n      }\n\n      // For V2, we need to send scope and tag name, e.g. `span.http.status_code`,\n      // unless the tag has intrinsic scope\n      const scopeAndTag = scope === 'intrinsic' ? labelName : `${scope}.${labelName}`;\n      options = await this.languageProvider.getOptionsV2(scopeAndTag);\n    } catch {\n      // For V1, the tag name (e.g. `http.status_code`) is enough\n      options = await this.languageProvider.getOptionsV1(labelName);\n    }\n\n    return options.filter((option) => option.value !== undefined).map((option) => ({ text: option.value })) as Array<{\n      text: string;\n    }>;\n  }\n\n  init = async () => {\n    const response = await lastValueFrom(\n      this._request('/api/status/buildinfo').pipe(\n        map((response) => response),\n        catchError((error) => {\n          console.error('Failure in retrieving build information', error.data.message);\n          return of({ error, data: { version: null } }); // unknown version\n        })\n      )\n    );\n    this.tempoVersion = response.data.version;\n  };\n\n  /**\n   * Check, for the given feature, whether it is available in Grafana.\n   *\n   * The check is done based on the version of the Tempo instance running on the backend and\n   * the minimum version required by the given feature to work.\n   *\n   * @param featureName - the name of the feature to consider\n   * @return true if the feature is available, false otherwise\n   */\n  private isFeatureAvailable(featureName: FeatureName) {\n    // We know for old Tempo instances we don't know their version, so resort to default\n    const actualVersion = this.tempoVersion ?? defaultTempoVersion;\n\n    try {\n      return semver.gte(actualVersion, featuresToTempoVersion[featureName]);\n    } catch {\n      // We assume we are on a development and recent branch, thus we enable all features\n      return true;\n    }\n  }\n\n  query(options: DataQueryRequest<TempoQuery>): Observable<DataQueryResponse> {\n    const subQueries: Array<Observable<DataQueryResponse>> = [];\n    const filteredTargets = options.targets.filter((target) => !target.hide);\n    const targets: { [type: string]: TempoQuery[] } = groupBy(filteredTargets, (t) => t.queryType || 'traceql');\n\n    if (targets.clear) {\n      return of({ data: [], state: LoadingState.Done });\n    }\n\n    const logsDatasourceUid = this.getLokiSearchDS();\n\n    // Run search queries on linked datasource\n    if (logsDatasourceUid && targets.search?.length > 0) {\n      reportInteraction('grafana_traces_loki_search_queried', {\n        datasourceType: 'tempo',\n        app: options.app ?? '',\n        grafana_version: config.buildInfo.version,\n        hasLinkedQueryExpr:\n          targets.search[0].linkedQuery?.expr && targets.search[0].linkedQuery?.expr !== '' ? true : false,\n      });\n\n      const dsSrv = getDatasourceSrv();\n      subQueries.push(\n        from(dsSrv.get(logsDatasourceUid)).pipe(\n          mergeMap((linkedDatasource: DataSourceApi) => {\n            // Wrap linked query into a data request based on original request\n            const linkedRequest: DataQueryRequest = { ...options, targets: targets.search.map((t) => t.linkedQuery!) };\n            // Find trace matchers in derived fields of the linked datasource that's identical to this datasource\n            const settings: DataSourceInstanceSettings<LokiOptions> = (linkedDatasource as any).instanceSettings;\n            const traceLinkMatcher: string[] =\n              settings.jsonData.derivedFields\n                ?.filter((field) => field.datasourceUid === this.uid && field.matcherRegex)\n                .map((field) => field.matcherRegex) || [];\n\n            if (!traceLinkMatcher || traceLinkMatcher.length === 0) {\n              return throwError(\n                () =>\n                  new Error(\n                    'No Loki datasource configured for search. Set up Derived Fields for traces in a Loki datasource settings and link it to this Tempo datasource.'\n                  )\n              );\n            } else {\n              return (linkedDatasource.query(linkedRequest) as Observable<DataQueryResponse>).pipe(\n                map((response) =>\n                  response.error ? response : transformTraceList(response, this.uid, this.name, traceLinkMatcher)\n                )\n              );\n            }\n          })\n        )\n      );\n    }\n\n    if (targets.nativeSearch?.length) {\n      try {\n        reportInteraction('grafana_traces_search_queried', {\n          datasourceType: 'tempo',\n          app: options.app ?? '',\n          grafana_version: config.buildInfo.version,\n          hasServiceName: targets.nativeSearch[0].serviceName ? true : false,\n          hasSpanName: targets.nativeSearch[0].spanName ? true : false,\n          resultLimit: targets.nativeSearch[0].limit ?? '',\n          hasSearch: targets.nativeSearch[0].search ? true : false,\n          minDuration: targets.nativeSearch[0].minDuration ?? '',\n          maxDuration: targets.nativeSearch[0].maxDuration ?? '',\n        });\n\n        const timeRange = { startTime: options.range.from.unix(), endTime: options.range.to.unix() };\n        const query = this.applyVariables(targets.nativeSearch[0], options.scopedVars);\n        const searchQuery = this.buildSearchQuery(query, timeRange);\n        subQueries.push(\n          this._request('/api/search', searchQuery).pipe(\n            map((response) => {\n              return {\n                data: [createTableFrameFromSearch(response.data.traces, this.instanceSettings)],\n              };\n            }),\n            catchError((err) => {\n              return of({ error: { message: getErrorMessage(err.data.message) }, data: [] });\n            })\n          )\n        );\n      } catch (error) {\n        return of({ error: { message: error instanceof Error ? error.message : 'Unknown error occurred' }, data: [] });\n      }\n    }\n\n    if (targets.traceql?.length) {\n      try {\n        const appliedQuery = this.applyVariables(targets.traceql[0], options.scopedVars);\n        const queryValue = appliedQuery?.query || '';\n        const hexOnlyRegex = /^[0-9A-Fa-f]*$/;\n        // Check whether this is a trace ID or traceQL query by checking if it only contains hex characters\n        if (queryValue.trim().match(hexOnlyRegex)) {\n          // There's only hex characters so let's assume that this is a trace ID\n          reportInteraction('grafana_traces_traceID_queried', {\n            datasourceType: 'tempo',\n            app: options.app ?? '',\n            grafana_version: config.buildInfo.version,\n            hasQuery: queryValue !== '' ? true : false,\n          });\n\n          subQueries.push(this.handleTraceIdQuery(options, targets.traceql));\n        } else {\n          reportInteraction('grafana_traces_traceql_queried', {\n            datasourceType: 'tempo',\n            app: options.app ?? '',\n            grafana_version: config.buildInfo.version,\n            query: queryValue ?? '',\n            streaming: config.featureToggles.traceQLStreaming,\n          });\n\n          if (config.featureToggles.traceQLStreaming && this.isFeatureAvailable(FeatureName.streaming)) {\n            subQueries.push(this.handleStreamingSearch(options, targets.traceql, queryValue));\n          } else {\n            subQueries.push(\n              this._request('/api/search', {\n                q: queryValue,\n                limit: options.targets[0].limit ?? DEFAULT_LIMIT,\n                spss: options.targets[0].spss ?? DEFAULT_SPSS,\n                start: options.range.from.unix(),\n                end: options.range.to.unix(),\n              }).pipe(\n                map((response) => {\n                  return {\n                    data: formatTraceQLResponse(\n                      response.data.traces,\n                      this.instanceSettings,\n                      targets.traceql[0].tableType\n                    ),\n                  };\n                }),\n                catchError((err) => {\n                  return of({ error: { message: getErrorMessage(err.data.message) }, data: [] });\n                })\n              )\n            );\n          }\n        }\n      } catch (error) {\n        return of({ error: { message: error instanceof Error ? error.message : 'Unknown error occurred' }, data: [] });\n      }\n    }\n\n    if (targets.traceqlSearch?.length) {\n      try {\n        if (config.featureToggles.metricsSummary) {\n          const groupBy = targets.traceqlSearch.find((t) => this.hasGroupBy(t));\n          if (groupBy) {\n            subQueries.push(this.handleMetricsSummary(groupBy, generateQueryFromFilters(groupBy.filters), options));\n          }\n        }\n\n        const traceqlSearchTargets = config.featureToggles.metricsSummary\n          ? targets.traceqlSearch.filter((t) => !this.hasGroupBy(t))\n          : targets.traceqlSearch;\n        if (traceqlSearchTargets.length > 0) {\n          const queryValueFromFilters = generateQueryFromFilters(traceqlSearchTargets[0].filters);\n\n          // We want to support template variables also in Search for consistency with other data sources\n          const queryValue = this.templateSrv.replace(queryValueFromFilters, options.scopedVars);\n\n          reportInteraction('grafana_traces_traceql_search_queried', {\n            datasourceType: 'tempo',\n            app: options.app ?? '',\n            grafana_version: config.buildInfo.version,\n            query: queryValue ?? '',\n            streaming: config.featureToggles.traceQLStreaming,\n          });\n\n          if (config.featureToggles.traceQLStreaming && this.isFeatureAvailable(FeatureName.streaming)) {\n            subQueries.push(this.handleStreamingSearch(options, traceqlSearchTargets, queryValue));\n          } else {\n            subQueries.push(\n              this._request('/api/search', {\n                q: queryValue,\n                limit: options.targets[0].limit ?? DEFAULT_LIMIT,\n                spss: options.targets[0].spss ?? DEFAULT_SPSS,\n                start: options.range.from.unix(),\n                end: options.range.to.unix(),\n              }).pipe(\n                map((response) => {\n                  return {\n                    data: formatTraceQLResponse(\n                      response.data.traces,\n                      this.instanceSettings,\n                      targets.traceqlSearch[0].tableType\n                    ),\n                  };\n                }),\n                catchError((err) => {\n                  return of({ error: { message: getErrorMessage(err.data.message) }, data: [] });\n                })\n              )\n            );\n          }\n        }\n      } catch (error) {\n        return of({ error: { message: error instanceof Error ? error.message : 'Unknown error occurred' }, data: [] });\n      }\n    }\n\n    if (targets.upload?.length) {\n      if (this.uploadedJson) {\n        reportInteraction('grafana_traces_json_file_uploaded', {\n          datasourceType: 'tempo',\n          app: options.app ?? '',\n          grafana_version: config.buildInfo.version,\n        });\n\n        const jsonData = JSON.parse(this.uploadedJson as string);\n        const isTraceData = jsonData.batches;\n        const isServiceGraphData =\n          Array.isArray(jsonData) && jsonData.some((df) => df?.meta?.preferredVisualisationType === 'nodeGraph');\n\n        if (isTraceData) {\n          subQueries.push(of(transformFromOTEL(jsonData.batches, this.nodeGraph?.enabled)));\n        } else if (isServiceGraphData) {\n          subQueries.push(of({ data: jsonData, state: LoadingState.Done }));\n        } else {\n          subQueries.push(of({ error: { message: 'Unable to parse uploaded data.' }, data: [] }));\n        }\n      } else {\n        subQueries.push(of({ data: [], state: LoadingState.Done }));\n      }\n    }\n\n    if (this.serviceMap?.datasourceUid && targets.serviceMap?.length > 0) {\n      reportInteraction('grafana_traces_service_graph_queried', {\n        datasourceType: 'tempo',\n        app: options.app ?? '',\n        grafana_version: config.buildInfo.version,\n        hasServiceMapQuery: targets.serviceMap[0].serviceMapQuery ? true : false,\n      });\n\n      const dsId = this.serviceMap.datasourceUid;\n      const tempoDsUid = this.uid;\n      subQueries.push(\n        serviceMapQuery(options, dsId, tempoDsUid).pipe(\n          concatMap((result) =>\n            rateQuery(options, result, dsId).pipe(\n              concatMap((result) => errorAndDurationQuery(options, result, dsId, tempoDsUid))\n            )\n          )\n        )\n      );\n    }\n\n    return merge(...subQueries);\n  }\n\n  applyTemplateVariables(query: TempoQuery, scopedVars: ScopedVars): Record<string, any> {\n    return this.applyVariables(query, scopedVars);\n  }\n\n  interpolateVariablesInQueries(queries: TempoQuery[], scopedVars: ScopedVars): TempoQuery[] {\n    if (!queries || queries.length === 0) {\n      return [];\n    }\n\n    return queries.map((query) => {\n      return {\n        ...query,\n        datasource: this.getRef(),\n        ...this.applyVariables(query, scopedVars),\n      };\n    });\n  }\n\n  applyVariables(query: TempoQuery, scopedVars: ScopedVars) {\n    const expandedQuery = { ...query };\n\n    if (query.linkedQuery) {\n      expandedQuery.linkedQuery = {\n        ...query.linkedQuery,\n        expr: this.templateSrv.replace(query.linkedQuery?.expr ?? '', scopedVars),\n      };\n    }\n\n    return {\n      ...expandedQuery,\n      query: this.templateSrv.replace(query.query ?? '', scopedVars, VariableFormatID.Pipe),\n      serviceName: this.templateSrv.replace(query.serviceName ?? '', scopedVars),\n      spanName: this.templateSrv.replace(query.spanName ?? '', scopedVars),\n      search: this.templateSrv.replace(query.search ?? '', scopedVars),\n      minDuration: this.templateSrv.replace(query.minDuration ?? '', scopedVars),\n      maxDuration: this.templateSrv.replace(query.maxDuration ?? '', scopedVars),\n    };\n  }\n\n  handleMetricsSummary = (target: TempoQuery, query: string, options: DataQueryRequest<TempoQuery>) => {\n    reportInteraction('grafana_traces_metrics_summary_queried', {\n      datasourceType: 'tempo',\n      app: options.app ?? '',\n      grafana_version: config.buildInfo.version,\n      filterCount: target.groupBy?.length ?? 0,\n    });\n\n    if (query === '{}') {\n      return of({\n        error: {\n          message:\n            'Please ensure you do not have an empty query. This is so filters are applied and the metrics summary is not generated from all spans.',\n        },\n        data: emptyResponse,\n      });\n    }\n\n    const groupBy = target.groupBy ? this.formatGroupBy(target.groupBy) : '';\n    return this._request('/api/metrics/summary', {\n      q: query,\n      groupBy,\n      start: options.range.from.unix(),\n      end: options.range.to.unix(),\n    }).pipe(\n      map((response) => {\n        if (!response.data.summaries) {\n          return {\n            error: {\n              message: getErrorMessage(\n                `No summary data for '${groupBy}'. Note: the metrics summary API only considers spans of kind = server. You can check if the attributes exist by running a TraceQL query like { attr_key = attr_value && kind = server }`\n              ),\n            },\n            data: emptyResponse,\n          };\n        }\n        // Check if any of the results have series data as older versions of Tempo placed the series data in a different structure\n        const hasSeries = response.data.summaries.some((summary: MetricsSummary) => summary.series.length > 0);\n        if (!hasSeries) {\n          return {\n            error: {\n              message: getErrorMessage(`No series data. Ensure you are using an up to date version of Tempo`),\n            },\n            data: emptyResponse,\n          };\n        }\n        return {\n          data: createTableFrameFromMetricsSummaryQuery(response.data.summaries, query, this.instanceSettings),\n        };\n      }),\n      catchError((error) => {\n        return of({\n          error: { message: getErrorMessage(error.data.message) },\n          data: emptyResponse,\n        });\n      })\n    );\n  };\n\n  formatGroupBy = (groupBy: TraceqlFilter[]) => {\n    return groupBy\n      ?.filter((f) => f.tag)\n      .map((f) => {\n        if (f.scope === TraceqlSearchScope.Unscoped) {\n          return `.${f.tag}`;\n        }\n        return f.scope !== TraceqlSearchScope.Intrinsic ? `${f.scope}.${f.tag}` : f.tag;\n      })\n      .join(', ');\n  };\n\n  hasGroupBy = (query: TempoQuery) => {\n    return query.groupBy?.find((gb) => gb.tag);\n  };\n\n  /**\n   * Handles the simplest of the queries where we have just a trace id and return trace data for it.\n   * @param options\n   * @param targets\n   * @private\n   */\n  handleTraceIdQuery(options: DataQueryRequest<TempoQuery>, targets: TempoQuery[]): Observable<DataQueryResponse> {\n    const validTargets = targets\n      .filter((t) => t.query)\n      .map((t): TempoQuery => ({ ...t, query: t.query?.trim(), queryType: 'traceId' }));\n    if (!validTargets.length) {\n      return EMPTY;\n    }\n\n    const traceRequest = this.traceIdQueryRequest(options, validTargets);\n\n    return super.query(traceRequest).pipe(\n      map((response) => {\n        if (response.error) {\n          return response;\n        }\n        return transformTrace(response, this.nodeGraph?.enabled);\n      })\n    );\n  }\n\n  traceIdQueryRequest(options: DataQueryRequest<TempoQuery>, targets: TempoQuery[]): DataQueryRequest<TempoQuery> {\n    const request = {\n      ...options,\n      targets,\n    };\n\n    if (this.traceQuery?.timeShiftEnabled) {\n      request.range = options.range && {\n        ...options.range,\n        from: options.range.from.subtract(\n          rangeUtil.intervalToMs(this.traceQuery?.spanStartTimeShift || '30m'),\n          'milliseconds'\n        ),\n        to: options.range.to.add(rangeUtil.intervalToMs(this.traceQuery?.spanEndTimeShift || '30m'), 'milliseconds'),\n      };\n    } else {\n      request.range = { from: dateTime(0), to: dateTime(0), raw: { from: dateTime(0), to: dateTime(0) } };\n    }\n\n    return request;\n  }\n\n  // This function can probably be simplified by avoiding passing both `targets` and `query`,\n  // since `query` is built from `targets`, if you look at how this function is currently called\n  handleStreamingSearch(\n    options: DataQueryRequest<TempoQuery>,\n    targets: TempoQuery[],\n    query: string\n  ): Observable<DataQueryResponse> {\n    if (query === '') {\n      return EMPTY;\n    }\n\n    return merge(\n      ...targets.map((target) =>\n        doTempoChannelStream(\n          { ...target, query },\n          this, // the datasource\n          options,\n          this.instanceSettings\n        )\n      )\n    );\n  }\n\n  async metadataRequest(url: string, params = {}) {\n    return await lastValueFrom(this._request(url, params, { method: 'GET', hideFromInspector: true }));\n  }\n\n  private _request(apiUrl: string, data?: any, options?: Partial<BackendSrvRequest>): Observable<Record<string, any>> {\n    const params = data ? serializeParams(data) : '';\n    const url = `${this.instanceSettings.url}${apiUrl}${params.length ? `?${params}` : ''}`;\n    const req = { ...options, url };\n\n    return getBackendSrv().fetch(req);\n  }\n\n  async testDatasource(): Promise<any> {\n    const options: BackendSrvRequest = {\n      headers: {},\n      method: 'GET',\n      url: `${this.instanceSettings.url}/api/echo`,\n    };\n\n    return await lastValueFrom(\n      getBackendSrv()\n        .fetch(options)\n        .pipe(\n          mergeMap(() => {\n            return of({ status: 'success', message: 'Data source successfully connected.' });\n          }),\n          catchError((err) => {\n            return of({ status: 'error', message: getErrorMessage(err.data.message, 'Unable to connect with Tempo') });\n          })\n        )\n    );\n  }\n\n  getQueryDisplayText(query: TempoQuery) {\n    if (query.queryType === 'nativeSearch') {\n      let result = [];\n      for (const key of ['serviceName', 'spanName', 'search', 'minDuration', 'maxDuration', 'limit']) {\n        if (query.hasOwnProperty(key) && query[key as keyof TempoQuery]) {\n          result.push(`${startCase(key)}: ${query[key as keyof TempoQuery]}`);\n        }\n      }\n      return result.join(', ');\n    }\n    return query.query ?? '';\n  }\n\n  buildSearchQuery(query: TempoQuery, timeRange?: { startTime: number; endTime?: number }): SearchQueryParams {\n    let tags = query.search ?? '';\n\n    let tempoQuery = pick(query, ['minDuration', 'maxDuration', 'limit']);\n    // Remove empty properties\n    tempoQuery = pickBy(tempoQuery, identity);\n\n    if (query.serviceName) {\n      tags += ` service.name=\"${query.serviceName}\"`;\n    }\n    if (query.spanName) {\n      tags += ` name=\"${query.spanName}\"`;\n    }\n\n    // Set default limit\n    if (!tempoQuery.limit) {\n      tempoQuery.limit = DEFAULT_LIMIT;\n    }\n\n    // Validate query inputs and remove spaces if valid\n    if (tempoQuery.minDuration) {\n      tempoQuery.minDuration = this.templateSrv.replace(tempoQuery.minDuration ?? '');\n      if (!isValidGoDuration(tempoQuery.minDuration)) {\n        throw new Error('Please enter a valid min duration.');\n      }\n      tempoQuery.minDuration = tempoQuery.minDuration.replace(/\\s/g, '');\n    }\n    if (tempoQuery.maxDuration) {\n      tempoQuery.maxDuration = this.templateSrv.replace(tempoQuery.maxDuration ?? '');\n      if (!isValidGoDuration(tempoQuery.maxDuration)) {\n        throw new Error('Please enter a valid max duration.');\n      }\n      tempoQuery.maxDuration = tempoQuery.maxDuration.replace(/\\s/g, '');\n    }\n\n    if (!Number.isInteger(tempoQuery.limit) || tempoQuery.limit <= 0) {\n      throw new Error('Please enter a valid limit.');\n    }\n\n    let searchQuery: SearchQueryParams = { tags, ...tempoQuery };\n\n    if (timeRange) {\n      searchQuery.start = timeRange.startTime;\n      searchQuery.end = timeRange.endTime;\n    }\n\n    return searchQuery;\n  }\n\n  // Get linked loki search datasource. Fall back to legacy loki search/trace to logs config\n  getLokiSearchDS = (): string | undefined => {\n    const legacyLogsDatasourceUid =\n      this.tracesToLogs?.lokiSearch !== false && this.lokiSearch === undefined\n        ? this.tracesToLogs?.datasourceUid\n        : undefined;\n    return this.lokiSearch?.datasourceUid ?? legacyLogsDatasourceUid;\n  };\n}\n\nfunction queryPrometheus(request: DataQueryRequest<PromQuery>, datasourceUid: string) {\n  return from(getDatasourceSrv().get(datasourceUid)).pipe(\n    mergeMap((ds) => {\n      return (ds as PrometheusDatasource).query(request);\n    })\n  );\n}\n\nfunction serviceMapQuery(\n  request: DataQueryRequest<TempoQuery>,\n  datasourceUid: string,\n  tempoDatasourceUid: string\n): Observable<ServiceMapQueryResponse> {\n  const serviceMapRequest = makePromServiceMapRequest(request);\n\n  return queryPrometheus(serviceMapRequest, datasourceUid).pipe(\n    // Just collect all the responses first before processing into node graph data\n    toArray(),\n    map((responses: DataQueryResponse[]) => {\n      const errorRes = responses.find((res) => !!res.error);\n      if (errorRes) {\n        throw new Error(getErrorMessage(errorRes.error?.message));\n      }\n\n      const { nodes, edges } = mapPromMetricsToServiceMap(responses, request.range);\n      if (nodes.fields.length > 0 && edges.fields.length > 0) {\n        const nodeLength = nodes.fields[0].values.length;\n        const edgeLength = edges.fields[0].values.length;\n\n        reportInteraction('grafana_traces_service_graph_size', {\n          datasourceType: 'tempo',\n          grafana_version: config.buildInfo.version,\n          nodeLength,\n          edgeLength,\n        });\n      }\n\n      // No handling of multiple targets assume just one. NodeGraph does not support it anyway, but still should be\n      // fixed at some point.\n      const { serviceMapIncludeNamespace, refId } = request.targets[0];\n      nodes.refId = refId;\n      edges.refId = refId;\n\n      if (serviceMapIncludeNamespace) {\n        nodes.fields[0].config = getFieldConfig(\n          datasourceUid, // datasourceUid\n          tempoDatasourceUid, // tempoDatasourceUid\n          '__data.fields.title', // targetField\n          '__data.fields[0]', // tempoField\n          undefined, // sourceField\n          { targetNamespace: '__data.fields.subtitle' }\n        );\n\n        edges.fields[0].config = getFieldConfig(\n          datasourceUid, // datasourceUid\n          tempoDatasourceUid, // tempoDatasourceUid\n          '__data.fields.targetName', // targetField\n          '__data.fields.target', // tempoField\n          '__data.fields.sourceName', // sourceField\n          { targetNamespace: '__data.fields.targetNamespace', sourceNamespace: '__data.fields.sourceNamespace' }\n        );\n      } else {\n        nodes.fields[0].config = getFieldConfig(\n          datasourceUid,\n          tempoDatasourceUid,\n          '__data.fields.id',\n          '__data.fields[0]'\n        );\n        edges.fields[0].config = getFieldConfig(\n          datasourceUid,\n          tempoDatasourceUid,\n          '__data.fields.target',\n          '__data.fields.target',\n          '__data.fields.source'\n        );\n      }\n\n      return {\n        nodes,\n        edges,\n        state: LoadingState.Done,\n      };\n    })\n  );\n}\n\nfunction rateQuery(\n  request: DataQueryRequest<TempoQuery>,\n  serviceMapResponse: ServiceMapQueryResponse,\n  datasourceUid: string\n): Observable<ServiceMapQueryResponseWithRates> {\n  const serviceMapRequest = makePromServiceMapRequest(request);\n  serviceMapRequest.targets = makeServiceGraphViewRequest([buildExpr(rateMetric, defaultTableFilter, request)]);\n\n  return queryPrometheus(serviceMapRequest, datasourceUid).pipe(\n    toArray(),\n    map((responses: DataQueryResponse[]) => {\n      const errorRes = responses.find((res) => !!res.error);\n      if (errorRes) {\n        throw new Error(getErrorMessage(errorRes.error?.message));\n      }\n      return {\n        rates: responses[0]?.data ?? [],\n        nodes: serviceMapResponse.nodes,\n        edges: serviceMapResponse.edges,\n      };\n    })\n  );\n}\n\n// we need the response from the rate query to get the rate span_name(s),\n// -> which determine the errorRate/duration span_name(s) we need to query\nfunction errorAndDurationQuery(\n  request: DataQueryRequest<TempoQuery>,\n  rateResponse: ServiceMapQueryResponseWithRates,\n  datasourceUid: string,\n  tempoDatasourceUid: string\n) {\n  let serviceGraphViewMetrics = [];\n  let errorRateBySpanName = '';\n  let durationsBySpanName: string[] = [];\n\n  let labels = [];\n  if (rateResponse.rates[0] && request.app === CoreApp.Explore) {\n    const spanNameField = rateResponse.rates[0].fields.find((field) => field.name === 'span_name');\n    if (spanNameField && spanNameField.values) {\n      labels = spanNameField.values;\n    }\n  } else if (rateResponse.rates) {\n    rateResponse.rates.map((df: DataFrame | DataFrameDTO) => {\n      const spanNameLabels = df.fields.find((field) => field.labels?.['span_name']);\n      if (spanNameLabels) {\n        labels.push(spanNameLabels.labels?.['span_name']);\n      }\n    });\n  }\n  const spanNames = getEscapedSpanNames(labels);\n\n  if (spanNames.length > 0) {\n    errorRateBySpanName = buildExpr(errorRateMetric, 'span_name=~\"' + spanNames.join('|') + '\"', request);\n    serviceGraphViewMetrics.push(errorRateBySpanName);\n    spanNames.map((name: string) => {\n      const metric = buildExpr(durationMetric, 'span_name=~\"' + name + '\"', request);\n      durationsBySpanName.push(metric);\n      serviceGraphViewMetrics.push(metric);\n    });\n  }\n\n  const serviceMapRequest = makePromServiceMapRequest(request);\n  serviceMapRequest.targets = makeServiceGraphViewRequest(serviceGraphViewMetrics);\n\n  return queryPrometheus(serviceMapRequest, datasourceUid).pipe(\n    // Just collect all the responses first before processing into node graph data\n    toArray(),\n    map((errorAndDurationResponse: DataQueryResponse[]) => {\n      const errorRes = errorAndDurationResponse.find((res) => !!res.error);\n      if (errorRes) {\n        throw new Error(getErrorMessage(errorRes.error?.message));\n      }\n\n      const serviceGraphView = getServiceGraphView(\n        request,\n        rateResponse,\n        errorAndDurationResponse[0],\n        errorRateBySpanName,\n        durationsBySpanName,\n        datasourceUid,\n        tempoDatasourceUid\n      );\n\n      if (serviceGraphView.fields.length === 0) {\n        return {\n          data: [rateResponse.nodes, rateResponse.edges],\n          state: LoadingState.Done,\n        };\n      }\n\n      return {\n        data: [serviceGraphView, rateResponse.nodes, rateResponse.edges],\n        state: LoadingState.Done,\n      };\n    })\n  );\n}\n\nfunction makePromLink(title: string, expr: string, datasourceUid: string, instant: boolean) {\n  return {\n    url: '',\n    title,\n    internal: {\n      query: {\n        expr: expr,\n        range: !instant,\n        exemplar: !instant,\n        instant: instant,\n      } as PromQuery,\n      datasourceUid,\n      datasourceName: getDatasourceSrv().getDataSourceSettingsByUid(datasourceUid)?.name ?? '',\n    },\n  };\n}\n\nexport function getEscapedSpanNames(values: string[]) {\n  return values.map((value: string) => value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\\\\\$&'));\n}\n\nexport function getFieldConfig(\n  datasourceUid: string,\n  tempoDatasourceUid: string,\n  targetField: string,\n  tempoField: string,\n  sourceField?: string,\n  namespaceFields?: { targetNamespace: string; sourceNamespace?: string }\n) {\n  let source = sourceField ? `client=\"\\${${sourceField}}\",` : '';\n  let target = `server=\"\\${${targetField}}\"`;\n  let serverSumBy = 'server';\n\n  if (namespaceFields !== undefined) {\n    const { targetNamespace } = namespaceFields;\n    target += `,server_service_namespace=\"\\${${targetNamespace}}\"`;\n    serverSumBy += ', server_service_namespace';\n\n    if (source) {\n      const { sourceNamespace } = namespaceFields;\n      source += `client_service_namespace=\"\\${${sourceNamespace}}\",`;\n      serverSumBy += ', client_service_namespace';\n    }\n  }\n\n  return {\n    links: [\n      makePromLink(\n        'Request rate',\n        `sum by (client, ${serverSumBy})(rate(${totalsMetric}{${source}${target}}[$__rate_interval]))`,\n        datasourceUid,\n        false\n      ),\n      makePromLink(\n        'Request histogram',\n        `histogram_quantile(0.9, sum(rate(${histogramMetric}{${source}${target}}[$__rate_interval])) by (le, client, ${serverSumBy}))`,\n        datasourceUid,\n        false\n      ),\n      makePromLink(\n        'Failed request rate',\n        `sum by (client, ${serverSumBy})(rate(${failedMetric}{${source}${target}}[$__rate_interval]))`,\n        datasourceUid,\n        false\n      ),\n      makeTempoLink('View traces', `\\${${tempoField}}`, '', tempoDatasourceUid),\n    ],\n  };\n}\n\nexport function makeTempoLink(title: string, serviceName: string, spanName: string, datasourceUid: string) {\n  let query: TempoQuery = { refId: 'A', queryType: 'traceqlSearch', filters: [] };\n  if (serviceName !== '') {\n    query.filters.push({\n      id: 'service-name',\n      scope: TraceqlSearchScope.Resource,\n      tag: 'service.name',\n      value: serviceName,\n      operator: '=',\n      valueType: 'string',\n    });\n  }\n  if (spanName !== '') {\n    query.filters.push({\n      id: 'span-name',\n      scope: TraceqlSearchScope.Span,\n      tag: 'name',\n      value: spanName,\n      operator: '=',\n      valueType: 'string',\n    });\n  }\n\n  return {\n    url: '',\n    title,\n    internal: {\n      query,\n      datasourceUid,\n      datasourceName: getDatasourceSrv().getDataSourceSettingsByUid(datasourceUid)?.name ?? '',\n    },\n  };\n}\n\nfunction makePromServiceMapRequest(options: DataQueryRequest<TempoQuery>): DataQueryRequest<PromQuery> {\n  return {\n    ...options,\n    targets: serviceMapMetrics.map((metric) => {\n      const { serviceMapQuery, serviceMapIncludeNamespace: serviceMapIncludeNamespace } = options.targets[0];\n      const extraSumByFields = serviceMapIncludeNamespace ? ', client_service_namespace, server_service_namespace' : '';\n      return {\n        format: 'table',\n        refId: metric,\n        // options.targets[0] is not correct here, but not sure what should happen if you have multiple queries for\n        // service map at the same time anyway\n        expr: `sum by (client, server${extraSumByFields}) (rate(${metric}${serviceMapQuery || ''}[$__range]))`,\n        instant: true,\n      };\n    }),\n  };\n}\n\nfunction getServiceGraphView(\n  request: DataQueryRequest<TempoQuery>,\n  rateResponse: ServiceMapQueryResponseWithRates,\n  secondResponse: DataQueryResponse,\n  errorRateBySpanName: string,\n  durationsBySpanName: string[],\n  datasourceUid: string,\n  tempoDatasourceUid: string\n) {\n  let df: any = { fields: [] };\n\n  const rate = rateResponse.rates.filter((x) => {\n    return x.refId === buildExpr(rateMetric, defaultTableFilter, request);\n  });\n  const errorRate = secondResponse.data.filter((x) => {\n    return x.refId === errorRateBySpanName;\n  });\n  const duration = secondResponse.data.filter((x) => {\n    return durationsBySpanName.includes(x.refId ?? '');\n  });\n\n  if (rate.length > 0 && rate[0].fields?.length > 2) {\n    df.fields.push({\n      ...rate[0].fields[1],\n      name: 'Name',\n      config: {\n        filterable: false,\n      },\n    });\n\n    df.fields.push({\n      ...rate[0].fields[2],\n      name: 'Rate',\n      config: {\n        links: [\n          makePromLink(\n            'Rate',\n            buildLinkExpr(buildExpr(rateMetric, 'span_name=\"${__data.fields[0]}\"', request)),\n            datasourceUid,\n            false\n          ),\n        ],\n        decimals: 2,\n      },\n    });\n\n    df.fields.push({\n      ...rate[0].fields[2],\n      name: '  ',\n      labels: null,\n      config: {\n        color: {\n          mode: 'continuous-BlPu',\n        },\n        custom: {\n          cellOptions: {\n            mode: BarGaugeDisplayMode.Lcd,\n            type: TableCellDisplayMode.Gauge,\n          },\n        },\n        decimals: 3,\n      },\n    });\n  }\n\n  if (errorRate.length > 0 && errorRate[0].fields?.length > 2) {\n    const errorRateNames = errorRate[0].fields[1]?.values ?? [];\n    const errorRateValues = errorRate[0].fields[2]?.values ?? [];\n    let errorRateObj: any = {};\n    errorRateNames.map((name: string, index: number) => {\n      errorRateObj[name] = { value: errorRateValues[index] };\n    });\n\n    const values = getRateAlignedValues({ ...rate }, errorRateObj);\n\n    df.fields.push({\n      ...errorRate[0].fields[2],\n      name: 'Error Rate',\n      values: values,\n      config: {\n        links: [\n          makePromLink(\n            'Error Rate',\n            buildLinkExpr(buildExpr(errorRateMetric, 'span_name=\"${__data.fields[0]}\"', request)),\n            datasourceUid,\n            false\n          ),\n        ],\n        decimals: 2,\n      },\n    });\n\n    df.fields.push({\n      ...errorRate[0].fields[2],\n      name: '   ',\n      values: values,\n      labels: null,\n      config: {\n        color: {\n          mode: 'continuous-RdYlGr',\n        },\n        custom: {\n          cellOptions: {\n            mode: BarGaugeDisplayMode.Lcd,\n            type: TableCellDisplayMode.Gauge,\n          },\n        },\n        decimals: 3,\n      },\n    });\n  }\n\n  if (duration.length > 0) {\n    let durationObj: any = {};\n    duration.forEach((d) => {\n      if (d.fields.length > 1) {\n        const delimiter = d.refId?.includes('span_name=~\"') ? 'span_name=~\"' : 'span_name=\"';\n        const name = d.refId?.split(delimiter)[1].split('\"}')[0];\n        durationObj[name!] = { value: d.fields[1].values[0] };\n      }\n    });\n    if (Object.keys(durationObj).length > 0) {\n      df.fields.push({\n        ...duration[0].fields[1],\n        name: 'Duration (p90)',\n        values: getRateAlignedValues({ ...rate }, durationObj),\n        config: {\n          links: [\n            makePromLink(\n              'Duration',\n              buildLinkExpr(buildExpr(durationMetric, 'span_name=\"${__data.fields[0]}\"', request)),\n              datasourceUid,\n              false\n            ),\n          ],\n          unit: 's',\n        },\n      });\n    }\n  }\n\n  if (df.fields.length > 0 && df.fields[0].values) {\n    df.fields.push({\n      name: 'Links',\n      type: FieldType.string,\n      values: df.fields[0].values.map(() => {\n        return 'Tempo';\n      }),\n      config: {\n        links: [makeTempoLink('Tempo', '', `\\${__data.fields[0]}`, tempoDatasourceUid)],\n      },\n    });\n  }\n\n  return df;\n}\n\nexport function buildExpr(\n  metric: { expr: string; params: string[] },\n  extraParams: string,\n  request: DataQueryRequest<TempoQuery>\n) {\n  let serviceMapQuery = request.targets[0]?.serviceMapQuery ?? '';\n  const serviceMapQueryMatch = serviceMapQuery.match(/^{(.*)}$/);\n  if (serviceMapQueryMatch?.length) {\n    serviceMapQuery = serviceMapQueryMatch[1];\n  }\n  // map serviceGraph metric tags to serviceGraphView metric tags\n  serviceMapQuery = serviceMapQuery.replace('client', 'service').replace('server', 'service');\n  const metricParams = serviceMapQuery.includes('span_name')\n    ? metric.params.concat(serviceMapQuery)\n    : metric.params\n        .concat(serviceMapQuery)\n        .concat(extraParams)\n        .filter((item: string) => item);\n  return metric.expr.replace('{}', '{' + metricParams.join(',') + '}');\n}\n\nexport function buildLinkExpr(expr: string) {\n  // don't want top 5 or by span name in links\n  expr = expr.replace('topk(5, ', '').replace(' by (span_name))', '');\n  return expr.replace('__range', '__rate_interval');\n}\n\n// query result frames can come back in any order\n// here we align the table col values to the same row name (rateName) across the table\nexport function getRateAlignedValues(\n  rateResp: DataQueryResponseData[],\n  objToAlign: { [x: string]: { value: string } }\n) {\n  const rateNames = rateResp[0]?.fields[1]?.values ?? [];\n  let values: string[] = [];\n\n  for (let i = 0; i < rateNames.length; i++) {\n    if (Object.keys(objToAlign).includes(rateNames[i])) {\n      values.push(objToAlign[rateNames[i]].value);\n    } else {\n      values.push('0');\n    }\n  }\n\n  return values;\n}\n\nexport function makeServiceGraphViewRequest(metrics: any[]) {\n  return metrics.map((metric) => {\n    return {\n      refId: metric,\n      expr: metric,\n      instant: true,\n    };\n  });\n}\n","import { SelectableValue } from '@grafana/data';\nimport type { Monaco, monacoTypes } from '@grafana/ui';\n\nimport TempoLanguageProvider from '../../language_provider';\n\ninterface Props {\n  languageProvider: TempoLanguageProvider;\n}\n\n/**\n * Class that implements CompletionItemProvider interface and allows us to provide suggestion for the Monaco\n * autocomplete system.\n */\nexport class CompletionProvider implements monacoTypes.languages.CompletionItemProvider {\n  languageProvider: TempoLanguageProvider;\n\n  constructor(props: Props) {\n    this.languageProvider = props.languageProvider;\n  }\n\n  triggerCharacters = ['=', ' '];\n\n  // We set these directly and ae required for the provider to function.\n  monaco: Monaco | undefined;\n  editor: monacoTypes.editor.IStandaloneCodeEditor | undefined;\n\n  private cachedValues: { [key: string]: Array<SelectableValue<string>> } = {};\n\n  provideCompletionItems(\n    model: monacoTypes.editor.ITextModel,\n    position: monacoTypes.Position\n  ): monacoTypes.languages.ProviderResult<monacoTypes.languages.CompletionList> {\n    // Should not happen, this should not be called before it is initialized\n    if (!(this.monaco && this.editor)) {\n      throw new Error('provideCompletionItems called before CompletionProvider was initialized');\n    }\n\n    // if the model-id does not match, then this call is from a different editor-instance,\n    // not \"our instance\", so return nothing\n    if (this.editor.getModel()?.id !== model.id) {\n      return { suggestions: [] };\n    }\n\n    const { range, offset } = getRangeAndOffset(this.monaco, model, position);\n    const situation = this.getSituation(model.getValue(), offset);\n    const completionItems = this.getCompletions(situation);\n\n    return completionItems.then((items) => {\n      // monaco by-default alphabetically orders the items.\n      // to stop it, we use a number-as-string sortkey,\n      // so that monaco keeps the order we use\n      const maxIndexDigits = items.length.toString().length;\n      const suggestions: monacoTypes.languages.CompletionItem[] = items.map((item, index) => {\n        const suggestion: monacoTypes.languages.CompletionItem = {\n          kind: getMonacoCompletionItemKind(item.type, this.monaco!),\n          label: item.label,\n          insertText: item.insertText,\n          sortText: index.toString().padStart(maxIndexDigits, '0'), // to force the order we have\n          range,\n        };\n        return suggestion;\n      });\n      return { suggestions };\n    });\n  }\n\n  private async getTagValues(tagName: string): Promise<Array<SelectableValue<string>>> {\n    let tagValues: Array<SelectableValue<string>>;\n\n    if (this.cachedValues.hasOwnProperty(tagName)) {\n      tagValues = this.cachedValues[tagName];\n    } else {\n      tagValues = await this.languageProvider.getOptionsV1(tagName);\n      this.cachedValues[tagName] = tagValues;\n    }\n    return tagValues;\n  }\n\n  /**\n   * Get suggestion based on the situation we are in like whether we should suggest tag names or values.\n   * @param situation\n   * @private\n   */\n  private async getCompletions(situation: Situation): Promise<Completion[]> {\n    switch (situation.type) {\n      // Not really sure what would make sense to suggest in this case so just leave it\n      case 'UNKNOWN': {\n        return [];\n      }\n      case 'EMPTY': {\n        return this.getTagsCompletions();\n      }\n      case 'IN_NAME':\n        return this.getTagsCompletions();\n      case 'IN_VALUE':\n        const tagValues = await this.getTagValues(situation.tagName);\n        const items: Completion[] = [];\n\n        const getInsertionText = (val: SelectableValue<string>): string => `\"${val.label}\"`;\n\n        tagValues.forEach((val) => {\n          if (val?.label) {\n            items.push({\n              label: val.label,\n              insertText: getInsertionText(val),\n              type: 'TAG_VALUE',\n            });\n          }\n        });\n        return items;\n      default:\n        throw new Error(`Unexpected situation ${situation}`);\n    }\n  }\n\n  private getTagsCompletions(): Completion[] {\n    const tags = this.languageProvider.getAutocompleteTags();\n    return tags\n      .sort((a, b) => a.localeCompare(b, undefined, { sensitivity: 'accent' }))\n      .map((key) => ({\n        label: key,\n        insertText: key,\n        type: 'TAG_NAME',\n      }));\n  }\n\n  /**\n   * Figure out where is the cursor and what kind of suggestions are appropriate.\n   * @param text\n   * @param offset\n   */\n  private getSituation(text: string, offset: number): Situation {\n    if (text === '' || offset === 0 || text[text.length - 1] === ' ') {\n      return {\n        type: 'EMPTY',\n      };\n    }\n\n    const textUntilCaret = text.substring(0, offset);\n\n    const regex = /(?<key>[^= ]+)(?<equals>=)?(?<value>([^ \"]+)|\"([^\"]*)\")?/;\n    const matches = textUntilCaret.match(new RegExp(regex, 'g'));\n\n    if (matches?.length) {\n      const last = matches[matches.length - 1];\n      const lastMatched = last.match(regex);\n      if (lastMatched) {\n        const key = lastMatched.groups?.key;\n        const equals = lastMatched.groups?.equals;\n\n        if (!key) {\n          return {\n            type: 'EMPTY',\n          };\n        }\n\n        if (!equals) {\n          return {\n            type: 'IN_NAME',\n          };\n        }\n\n        return {\n          type: 'IN_VALUE',\n          tagName: key,\n        };\n      }\n    }\n\n    return {\n      type: 'EMPTY',\n    };\n  }\n}\n\n/**\n * Get item kind which is used for icon next to the suggestion.\n * @param type\n * @param monaco\n */\nfunction getMonacoCompletionItemKind(type: CompletionType, monaco: Monaco): monacoTypes.languages.CompletionItemKind {\n  switch (type) {\n    case 'TAG_NAME':\n      return monaco.languages.CompletionItemKind.Enum;\n    case 'KEYWORD':\n      return monaco.languages.CompletionItemKind.Keyword;\n    case 'OPERATOR':\n      return monaco.languages.CompletionItemKind.Operator;\n    case 'TAG_VALUE':\n      return monaco.languages.CompletionItemKind.EnumMember;\n    case 'SCOPE':\n      return monaco.languages.CompletionItemKind.Class;\n    default:\n      throw new Error(`Unexpected CompletionType: ${type}`);\n  }\n}\n\nexport type CompletionType = 'TAG_NAME' | 'TAG_VALUE' | 'KEYWORD' | 'OPERATOR' | 'SCOPE';\ntype Completion = {\n  type: CompletionType;\n  label: string;\n  insertText: string;\n};\n\nexport type Tag = {\n  name: string;\n  value: string;\n};\n\nexport type Situation =\n  | {\n      type: 'UNKNOWN';\n    }\n  | {\n      type: 'EMPTY';\n    }\n  | {\n      type: 'IN_NAME';\n    }\n  | {\n      type: 'IN_VALUE';\n      tagName: string;\n    };\n\nfunction getRangeAndOffset(monaco: Monaco, model: monacoTypes.editor.ITextModel, position: monacoTypes.Position) {\n  const word = model.getWordAtPosition(position);\n  const range =\n    word != null\n      ? monaco.Range.lift({\n          startLineNumber: position.lineNumber,\n          endLineNumber: position.lineNumber,\n          startColumn: word.startColumn,\n          endColumn: word.endColumn,\n        })\n      : monaco.Range.fromPositions(position);\n\n  // documentation says `position` will be \"adjusted\" in `getOffsetAt` so we clone it here just for sure.\n  const positionClone = {\n    column: position.column,\n    lineNumber: position.lineNumber,\n  };\n\n  const offset = model.getOffsetAt(positionClone);\n  return { offset, range };\n}\n","import type { languages } from 'monaco-editor';\n\nexport const languageConfiguration: languages.LanguageConfiguration = {\n  // the default separators except `@$`\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^`~!#%^&*()\\-=+\\[{\\]}\\\\|;:'\",.<>\\/?\\s]+)/g,\n  brackets: [\n    ['{', '}'],\n    ['(', ')'],\n  ],\n  autoClosingPairs: [\n    { open: '{', close: '}' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n  surroundingPairs: [\n    { open: '{', close: '}' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n  folding: {},\n};\n\nconst operators = ['='];\n\nexport const language: languages.IMonarchLanguage = {\n  ignoreCase: false,\n  defaultToken: '',\n  tokenPostfix: '.tagsfield',\n\n  operators,\n\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  digits: /\\d+(_+\\d+)*/,\n  octaldigits: /[0-7]+(_+[0-7]+)*/,\n  binarydigits: /[0-1]+(_+[0-1]+)*/,\n  hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n  integersuffix: /(ll|LL|u|U|l|L)?(ll|LL|u|U|l|L)?/,\n  floatsuffix: /[fFlL]?/,\n\n  tokenizer: {\n    root: [\n      // labels\n      [/[a-z_.][\\w./_-]*(?=\\s*(=|!=|>|<|>=|<=|=~|!~))/, 'tag'],\n\n      // all keywords have the same color\n      [\n        /[a-zA-Z_.]\\w*/,\n        {\n          cases: {\n            '@default': 'identifier',\n          },\n        },\n      ],\n\n      // strings\n      [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n      [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n      [/\"/, 'string', '@string_double'],\n      [/'/, 'string', '@string_single'],\n\n      // whitespace\n      { include: '@whitespace' },\n\n      // delimiters and operators\n      [/[{}()\\[\\]]/, '@brackets'],\n      [/[<>](?!@symbols)/, '@brackets'],\n      [\n        /@symbols/,\n        {\n          cases: {\n            '@operators': 'delimiter',\n            '@default': '',\n          },\n        },\n      ],\n\n      // numbers\n      [/\\d+/, 'number'],\n      [/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n      [/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, 'number.hex'],\n      [/0[0-7']*[0-7](@integersuffix)/, 'number.octal'],\n      [/0[bB][0-1']*[0-1](@integersuffix)/, 'number.binary'],\n      [/\\d[\\d']*\\d(@integersuffix)/, 'number'],\n      [/\\d(@integersuffix)/, 'number'],\n    ],\n\n    string_double: [\n      [/[^\\\\\"]+/, 'string'],\n      [/@escapes/, 'string.escape'],\n      [/\\\\./, 'string.escape.invalid'],\n      [/\"/, 'string', '@pop'],\n    ],\n\n    string_single: [\n      [/[^\\\\']+/, 'string'],\n      [/@escapes/, 'string.escape'],\n      [/\\\\./, 'string.escape.invalid'],\n      [/'/, 'string', '@pop'],\n    ],\n\n    clauses: [\n      [/[^(,)]/, 'tag'],\n      [/\\)/, 'identifier', '@pop'],\n    ],\n\n    whitespace: [[/[ \\t\\r\\n]+/, 'white']],\n  },\n};\n\nexport const languageDefinition = {\n  id: 'tagsfield',\n  extensions: ['.tagsfield'],\n  aliases: ['tagsfield'],\n  mimetypes: [],\n  def: {\n    language,\n    languageConfiguration,\n  },\n};\n","import { css } from '@emotion/css';\nimport React, { useEffect, useRef } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { CodeEditor, Monaco, monacoTypes, useTheme2 } from '@grafana/ui';\n\nimport { createErrorNotification } from '../../../../../core/copy/appNotification';\nimport { notifyApp } from '../../../../../core/reducers/appNotification';\nimport { dispatch } from '../../../../../store/store';\nimport { TempoDatasource } from '../../datasource';\n\nimport { CompletionProvider } from './autocomplete';\nimport { languageDefinition } from './syntax';\n\ninterface Props {\n  placeholder: string;\n  value: string;\n  onChange: (val: string) => void;\n  onBlur?: () => void;\n  datasource: TempoDatasource;\n}\n\nexport function TagsField(props: Props) {\n  const { onChange, onBlur, placeholder } = props;\n  const setupAutocompleteFn = useAutocomplete(props.datasource);\n  const theme = useTheme2();\n  const styles = getStyles(theme, placeholder);\n\n  return (\n    <CodeEditor\n      value={props.value}\n      language={langId}\n      onBlur={onBlur}\n      onChange={onChange}\n      containerStyles={styles.queryField}\n      monacoOptions={{\n        folding: false,\n        fontSize: 14,\n        lineNumbers: 'off',\n        overviewRulerLanes: 0,\n        renderLineHighlight: 'none',\n        scrollbar: {\n          vertical: 'hidden',\n          verticalScrollbarSize: 8, // used as \"padding-right\"\n          horizontal: 'hidden',\n          horizontalScrollbarSize: 0,\n        },\n        scrollBeyondLastLine: false,\n        wordWrap: 'on',\n      }}\n      onBeforeEditorMount={ensureTraceQL}\n      onEditorDidMount={(editor, monaco) => {\n        setupAutocompleteFn(editor, monaco);\n        setupPlaceholder(editor, monaco, styles);\n        setupAutoSize(editor);\n      }}\n    />\n  );\n}\n\nfunction setupPlaceholder(editor: monacoTypes.editor.IStandaloneCodeEditor, monaco: Monaco, styles: EditorStyles) {\n  const placeholderDecorators = [\n    {\n      range: new monaco.Range(1, 1, 1, 1),\n      options: {\n        className: styles.placeholder, // The placeholder text is in styles.placeholder\n        isWholeLine: true,\n      },\n    },\n  ];\n\n  let decorators: string[] = [];\n\n  const checkDecorators = (): void => {\n    const model = editor.getModel();\n\n    if (!model) {\n      return;\n    }\n\n    const newDecorators = model.getValueLength() === 0 ? placeholderDecorators : [];\n    decorators = model.deltaDecorations(decorators, newDecorators);\n  };\n\n  checkDecorators();\n  editor.onDidChangeModelContent(checkDecorators);\n}\n\nfunction setupAutoSize(editor: monacoTypes.editor.IStandaloneCodeEditor) {\n  const container = editor.getDomNode();\n  const updateHeight = () => {\n    if (container) {\n      const contentHeight = Math.min(1000, editor.getContentHeight());\n      const width = parseInt(container.style.width, 10);\n      container.style.width = `${width}px`;\n      container.style.height = `${contentHeight}px`;\n      editor.layout({ width, height: contentHeight });\n    }\n  };\n  editor.onDidContentSizeChange(updateHeight);\n  updateHeight();\n}\n\n/**\n * Hook that returns function that will set up monaco autocomplete for the label selector\n * @param datasource\n */\nfunction useAutocomplete(datasource: TempoDatasource) {\n  // We need the provider ref so we can pass it the label/values data later. This is because we run the call for the\n  // values here but there is additional setup needed for the provider later on. We could run the getSeries() in the\n  // returned function but that is run after the monaco is mounted so would delay the request a bit when it does not\n  // need to.\n  const providerRef = useRef<CompletionProvider>(\n    new CompletionProvider({ languageProvider: datasource.languageProvider })\n  );\n\n  useEffect(() => {\n    const fetchTags = async () => {\n      try {\n        await datasource.languageProvider.start();\n      } catch (error) {\n        if (error instanceof Error) {\n          dispatch(notifyApp(createErrorNotification('Error', error)));\n        }\n      }\n    };\n    fetchTags();\n  }, [datasource]);\n\n  const autocompleteDisposeFun = useRef<(() => void) | null>(null);\n  useEffect(() => {\n    // when we unmount, we unregister the autocomplete-function, if it was registered\n    return () => {\n      autocompleteDisposeFun.current?.();\n    };\n  }, []);\n\n  // This should be run in monaco onEditorDidMount\n  return (editor: monacoTypes.editor.IStandaloneCodeEditor, monaco: Monaco) => {\n    providerRef.current.editor = editor;\n    providerRef.current.monaco = monaco;\n\n    const { dispose } = monaco.languages.registerCompletionItemProvider(langId, providerRef.current);\n    autocompleteDisposeFun.current = dispose;\n  };\n}\n\n// we must only run the setup code once\nlet setupDone = false;\nconst langId = 'tagsfield';\n\nfunction ensureTraceQL(monaco: Monaco) {\n  if (!setupDone) {\n    setupDone = true;\n    const { aliases, extensions, mimetypes, def } = languageDefinition;\n    monaco.languages.register({ id: langId, aliases, extensions, mimetypes });\n    monaco.languages.setMonarchTokensProvider(langId, def.language);\n    monaco.languages.setLanguageConfiguration(langId, def.languageConfiguration);\n  }\n}\n\ninterface EditorStyles {\n  placeholder: string;\n  queryField: string;\n}\n\nconst getStyles = (theme: GrafanaTheme2, placeholder: string): EditorStyles => {\n  return {\n    queryField: css`\n      border-radius: ${theme.shape.radius.default};\n      border: 1px solid ${theme.components.input.borderColor};\n      flex: 1;\n    `,\n    placeholder: css`\n      ::after {\n        content: '${placeholder}';\n        font-family: ${theme.typography.fontFamilyMonospace};\n        opacity: 0.3;\n      }\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { useCallback, useState, useEffect, useMemo } from 'react';\n\nimport { GrafanaTheme2, isValidGoDuration, SelectableValue, toOption } from '@grafana/data';\nimport { FetchError, getTemplateSrv, isFetchError, TemplateSrv } from '@grafana/runtime';\nimport { InlineFieldRow, InlineField, Input, Alert, useStyles2, fuzzyMatch, Select } from '@grafana/ui';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { dispatch } from 'app/store/store';\n\nimport { DEFAULT_LIMIT, TempoDatasource } from '../datasource';\nimport TempoLanguageProvider from '../language_provider';\nimport { TempoQuery } from '../types';\n\nimport { TagsField } from './TagsField/TagsField';\n\ninterface Props {\n  datasource: TempoDatasource;\n  query: TempoQuery;\n  onChange: (value: TempoQuery) => void;\n  onBlur?: () => void;\n  onRunQuery: () => void;\n}\n\nconst durationPlaceholder = 'e.g. 1.2s, 100ms';\n\nconst NativeSearch = ({ datasource, query, onChange, onBlur, onRunQuery }: Props) => {\n  const styles = useStyles2(getStyles);\n  const languageProvider = useMemo(() => new TempoLanguageProvider(datasource), [datasource]);\n  const [serviceOptions, setServiceOptions] = useState<Array<SelectableValue<string>>>();\n  const [spanOptions, setSpanOptions] = useState<Array<SelectableValue<string>>>();\n  const [error, setError] = useState<Error | FetchError | null>(null);\n  const [inputErrors, setInputErrors] = useState<{ [key: string]: boolean }>({});\n  const [isLoading, setIsLoading] = useState<{\n    serviceName: boolean;\n    spanName: boolean;\n  }>({\n    serviceName: false,\n    spanName: false,\n  });\n\n  const loadOptions = useCallback(\n    async (name: string, query = '') => {\n      const lpName = name === 'serviceName' ? 'service.name' : 'name';\n      setIsLoading((prevValue) => ({ ...prevValue, [name]: true }));\n\n      try {\n        const options = await languageProvider.getOptionsV1(lpName);\n        const filteredOptions = options.filter((item) => (item.value ? fuzzyMatch(item.value, query).found : false));\n        return filteredOptions;\n      } catch (error) {\n        if (isFetchError(error) && error?.status === 404) {\n          setError(error);\n        } else if (error instanceof Error) {\n          dispatch(notifyApp(createErrorNotification('Error', error)));\n        }\n        return [];\n      } finally {\n        setIsLoading((prevValue) => ({ ...prevValue, [name]: false }));\n      }\n    },\n    [languageProvider]\n  );\n\n  useEffect(() => {\n    const fetchOptions = async () => {\n      try {\n        const [services, spans] = await Promise.all([loadOptions('serviceName'), loadOptions('spanName')]);\n        if (query.serviceName && getTemplateSrv().containsTemplate(query.serviceName)) {\n          services.push(toOption(query.serviceName));\n        }\n        setServiceOptions(services);\n        if (query.spanName && getTemplateSrv().containsTemplate(query.spanName)) {\n          spans.push(toOption(query.spanName));\n        }\n        setSpanOptions(spans);\n      } catch (error) {\n        // Display message if Tempo is connected but search 404's\n        if (isFetchError(error) && error?.status === 404) {\n          setError(error);\n        } else if (error instanceof Error) {\n          dispatch(notifyApp(createErrorNotification('Error', error)));\n        }\n      }\n    };\n    fetchOptions();\n  }, [languageProvider, loadOptions, query.serviceName, query.spanName]);\n\n  const onKeyDown = (keyEvent: React.KeyboardEvent) => {\n    if (keyEvent.key === 'Enter' && (keyEvent.shiftKey || keyEvent.ctrlKey)) {\n      onRunQuery();\n    }\n  };\n\n  const handleOnChange = useCallback(\n    (value: string) => {\n      onChange({\n        ...query,\n        search: value,\n      });\n    },\n    [onChange, query]\n  );\n\n  const templateSrv: TemplateSrv = getTemplateSrv();\n\n  return (\n    <>\n      <div className={styles.container}>\n        <Alert title=\"Deprecated query type\" severity=\"warning\">\n          This query type has been deprecated and will be removed in Grafana v10.3. Please migrate to another Tempo\n          query type.\n        </Alert>\n        <InlineFieldRow>\n          <InlineField label=\"Service Name\" labelWidth={14} grow>\n            <Select\n              inputId=\"service\"\n              options={serviceOptions}\n              onOpenMenu={() => {\n                loadOptions('serviceName');\n              }}\n              isLoading={isLoading.serviceName}\n              value={serviceOptions?.find((v) => v?.value === query.serviceName) || query.serviceName}\n              onChange={(v) => {\n                onChange({\n                  ...query,\n                  serviceName: v?.value,\n                });\n              }}\n              placeholder=\"Select a service\"\n              isClearable\n              onKeyDown={onKeyDown}\n              aria-label={'select-service-name'}\n              allowCustomValue={true}\n            />\n          </InlineField>\n        </InlineFieldRow>\n        <InlineFieldRow>\n          <InlineField label=\"Span Name\" labelWidth={14} grow>\n            <Select\n              inputId=\"spanName\"\n              options={spanOptions}\n              onOpenMenu={() => {\n                loadOptions('spanName');\n              }}\n              isLoading={isLoading.spanName}\n              value={spanOptions?.find((v) => v?.value === query.spanName) || query.spanName}\n              onChange={(v) => {\n                onChange({\n                  ...query,\n                  spanName: v?.value,\n                });\n              }}\n              placeholder=\"Select a span\"\n              isClearable\n              onKeyDown={onKeyDown}\n              aria-label={'select-span-name'}\n              allowCustomValue={true}\n            />\n          </InlineField>\n        </InlineFieldRow>\n        <InlineFieldRow>\n          <InlineField label=\"Tags\" labelWidth={14} grow tooltip=\"Values should be in logfmt.\">\n            <TagsField\n              placeholder=\"http.status_code=200 error=true\"\n              value={query.search || ''}\n              onChange={handleOnChange}\n              onBlur={onBlur}\n              datasource={datasource}\n            />\n          </InlineField>\n        </InlineFieldRow>\n        <InlineFieldRow>\n          <InlineField label=\"Min Duration\" invalid={!!inputErrors.minDuration} labelWidth={14} grow>\n            <Input\n              id=\"minDuration\"\n              value={query.minDuration || ''}\n              placeholder={durationPlaceholder}\n              onBlur={() => {\n                const templatedMinDuration = templateSrv.replace(query.minDuration ?? '');\n                if (query.minDuration && !isValidGoDuration(templatedMinDuration)) {\n                  setInputErrors({ ...inputErrors, minDuration: true });\n                } else {\n                  setInputErrors({ ...inputErrors, minDuration: false });\n                }\n              }}\n              onChange={(v) =>\n                onChange({\n                  ...query,\n                  minDuration: v.currentTarget.value,\n                })\n              }\n              onKeyDown={onKeyDown}\n            />\n          </InlineField>\n        </InlineFieldRow>\n        <InlineFieldRow>\n          <InlineField label=\"Max Duration\" invalid={!!inputErrors.maxDuration} labelWidth={14} grow>\n            <Input\n              id=\"maxDuration\"\n              value={query.maxDuration || ''}\n              placeholder={durationPlaceholder}\n              onBlur={() => {\n                const templatedMaxDuration = templateSrv.replace(query.maxDuration ?? '');\n                if (query.maxDuration && !isValidGoDuration(templatedMaxDuration)) {\n                  setInputErrors({ ...inputErrors, maxDuration: true });\n                } else {\n                  setInputErrors({ ...inputErrors, maxDuration: false });\n                }\n              }}\n              onChange={(v) =>\n                onChange({\n                  ...query,\n                  maxDuration: v.currentTarget.value,\n                })\n              }\n              onKeyDown={onKeyDown}\n            />\n          </InlineField>\n        </InlineFieldRow>\n        <InlineFieldRow>\n          <InlineField\n            label=\"Limit\"\n            invalid={!!inputErrors.limit}\n            labelWidth={14}\n            grow\n            tooltip=\"Maximum number of returned results\"\n          >\n            <Input\n              id=\"limit\"\n              value={query.limit || ''}\n              placeholder={`Default: ${DEFAULT_LIMIT}`}\n              type=\"number\"\n              onChange={(v) => {\n                let limit = v.currentTarget.value ? parseInt(v.currentTarget.value, 10) : undefined;\n                if (limit && (!Number.isInteger(limit) || limit <= 0)) {\n                  setInputErrors({ ...inputErrors, limit: true });\n                } else {\n                  setInputErrors({ ...inputErrors, limit: false });\n                }\n\n                onChange({\n                  ...query,\n                  limit: v.currentTarget.value ? parseInt(v.currentTarget.value, 10) : undefined,\n                });\n              }}\n              onKeyDown={onKeyDown}\n            />\n          </InlineField>\n        </InlineFieldRow>\n      </div>\n      {error ? (\n        <Alert title=\"Unable to connect to Tempo search\" severity=\"info\" className={styles.alert}>\n          Please ensure that Tempo is configured with search enabled. If you would like to hide this tab, you can\n          configure it in the <a href={`/datasources/edit/${datasource.uid}`}>datasource settings</a>.\n        </Alert>\n      ) : null}\n    </>\n  );\n};\n\nexport default NativeSearch;\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    max-width: 500px;\n  `,\n  alert: css`\n    max-width: 75ch;\n    margin-top: ${theme.spacing(2)};\n  `,\n});\n","import React from 'react';\n\nimport { EditorField, EditorRow } from '@grafana/experimental';\nimport { AutoSizeInput, RadioButtonGroup } from '@grafana/ui';\nimport { QueryOptionGroup } from 'app/plugins/datasource/prometheus/querybuilder/shared/QueryOptionGroup';\n\nimport { SearchTableType } from '../dataquery.gen';\nimport { DEFAULT_LIMIT, DEFAULT_SPSS } from '../datasource';\nimport { TempoQuery } from '../types';\n\ninterface Props {\n  onChange: (value: TempoQuery) => void;\n  query: Partial<TempoQuery> & TempoQuery;\n}\n\nexport const TempoQueryBuilderOptions = React.memo<Props>(({ onChange, query }) => {\n  if (!query.hasOwnProperty('limit')) {\n    query.limit = DEFAULT_LIMIT;\n  }\n\n  if (!query.hasOwnProperty('tableType')) {\n    query.tableType = SearchTableType.Traces;\n  }\n\n  const onLimitChange = (e: React.FormEvent<HTMLInputElement>) => {\n    onChange({ ...query, limit: parseInt(e.currentTarget.value, 10) });\n  };\n  const onSpssChange = (e: React.FormEvent<HTMLInputElement>) => {\n    onChange({ ...query, spss: parseInt(e.currentTarget.value, 10) });\n  };\n  const onTableTypeChange = (val: SearchTableType) => {\n    onChange({ ...query, tableType: val });\n  };\n\n  const collapsedInfoList = [\n    `Limit: ${query.limit || DEFAULT_LIMIT}`,\n    `Spans Limit: ${query.spss || DEFAULT_SPSS}`,\n    `Table Format: ${query.tableType === SearchTableType.Traces ? 'Traces' : 'Spans'}`,\n  ];\n\n  return (\n    <>\n      <EditorRow>\n        <QueryOptionGroup title=\"Options\" collapsedInfo={collapsedInfoList}>\n          <EditorField label=\"Limit\" tooltip=\"Maximum number of traces to return.\">\n            <AutoSizeInput\n              className=\"width-4\"\n              placeholder=\"auto\"\n              type=\"number\"\n              min={1}\n              defaultValue={query.limit || DEFAULT_LIMIT}\n              onCommitChange={onLimitChange}\n              value={query.limit}\n            />\n          </EditorField>\n          <EditorField label=\"Span Limit\" tooltip=\"Maximum number of spans to return for each span set.\">\n            <AutoSizeInput\n              className=\"width-4\"\n              placeholder=\"auto\"\n              type=\"number\"\n              min={1}\n              defaultValue={query.spss || DEFAULT_SPSS}\n              onCommitChange={onSpssChange}\n              value={query.spss}\n            />\n          </EditorField>\n          <EditorField label=\"Table Format\" tooltip=\"How the query data should be displayed in the results table\">\n            <RadioButtonGroup\n              options={[\n                { label: 'Traces', value: SearchTableType.Traces },\n                { label: 'Spans', value: SearchTableType.Spans },\n              ]}\n              value={query.tableType}\n              onChange={onTableTypeChange}\n            />\n          </EditorField>\n        </QueryOptionGroup>\n      </EditorRow>\n    </>\n  );\n});\n\nTempoQueryBuilderOptions.displayName = 'TempoQueryBuilderOptions';\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { Select, HorizontalGroup, Input, useStyles2 } from '@grafana/ui';\n\nimport { TraceqlFilter } from '../dataquery.gen';\n\nimport { operatorSelectableValue } from './utils';\n\ninterface Props {\n  filter: TraceqlFilter;\n  updateFilter: (f: TraceqlFilter) => void;\n  isTagsLoading?: boolean;\n  operators: string[];\n}\n\n// Support template variables (e.g., `$dur`, `$v_1`) and durations (e.g., `300µs`, `1.2ms`)\nconst validationRegex = /^(\\$\\w+)|(\\d+(?:\\.\\d)?\\d*(?:us|µs|ns|ms|s|m|h))$/;\n\nconst getStyles = () => ({\n  noBoxShadow: css`\n    box-shadow: none;\n    *:focus {\n      box-shadow: none;\n    }\n  `,\n});\n\nconst DurationInput = ({ filter, operators, updateFilter }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  let invalid = false;\n  if (typeof filter.value === 'string') {\n    invalid = filter.value ? !validationRegex.test(filter.value.concat('')) : false;\n  }\n\n  return (\n    <HorizontalGroup spacing={'none'}>\n      <Select\n        className={styles.noBoxShadow}\n        inputId={`${filter.id}-operator`}\n        options={operators.map(operatorSelectableValue)}\n        value={filter.operator}\n        onChange={(v) => {\n          updateFilter({ ...filter, operator: v?.value });\n        }}\n        isClearable={false}\n        aria-label={`select ${filter.id} operator`}\n        allowCustomValue={true}\n        width={8}\n      />\n      <Input\n        className={styles.noBoxShadow}\n        value={filter.value}\n        onChange={(v) => {\n          updateFilter({ ...filter, value: v.currentTarget.value });\n        }}\n        placeholder=\"e.g. 100ms, 1.2s\"\n        aria-label={`select ${filter.id} value`}\n        invalid={invalid}\n        width={18}\n      />\n    </HorizontalGroup>\n  );\n};\n\nexport default DurationInput;\n","import React from 'react';\n\nimport { InlineFieldRow, InlineField } from '@grafana/ui';\n\ninterface Props {\n  label: string;\n  tooltip?: string;\n  children: React.ReactElement;\n}\nconst SearchField = ({ label, tooltip, children }: Props) => {\n  return (\n    <InlineFieldRow>\n      <InlineField label={label} labelWidth={28} grow tooltip={tooltip}>\n        {children}\n      </InlineField>\n    </InlineFieldRow>\n  );\n};\n\nexport default SearchField;\n","import { css } from '@emotion/css';\nimport React, { useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { AccessoryButton } from '@grafana/experimental';\nimport { HorizontalGroup, Select, useStyles2 } from '@grafana/ui';\n\nimport { TraceqlFilter, TraceqlSearchScope } from '../dataquery.gen';\nimport { TempoDatasource } from '../datasource';\nimport { TempoQuery } from '../types';\n\nimport InlineSearchField from './InlineSearchField';\nimport { replaceAt } from './utils';\n\ninterface Props {\n  datasource: TempoDatasource;\n  onChange: (value: TempoQuery) => void;\n  query: Partial<TempoQuery> & TempoQuery;\n  isTagsLoading: boolean;\n}\n\nexport const GroupByField = (props: Props) => {\n  const { datasource, onChange, query, isTagsLoading } = props;\n  const styles = useStyles2(getStyles);\n  const generateId = () => uuidv4().slice(0, 8);\n\n  useEffect(() => {\n    if (!query.groupBy || query.groupBy.length === 0) {\n      onChange({\n        ...query,\n        groupBy: [\n          {\n            id: generateId(),\n            scope: TraceqlSearchScope.Span,\n          },\n        ],\n      });\n    }\n  }, [onChange, query]);\n\n  const getTags = (f: TraceqlFilter) => {\n    return datasource!.languageProvider.getMetricsSummaryTags(f.scope);\n  };\n\n  const addFilter = () => {\n    updateFilter({\n      id: generateId(),\n      scope: TraceqlSearchScope.Span,\n    });\n  };\n\n  const removeFilter = (filter: TraceqlFilter) => {\n    onChange({ ...query, groupBy: query.groupBy?.filter((f) => f.id !== filter.id) });\n  };\n\n  const updateFilter = (filter: TraceqlFilter) => {\n    const copy = { ...query };\n    copy.groupBy ||= [];\n    const indexOfFilter = copy.groupBy.findIndex((f) => f.id === filter.id);\n    if (indexOfFilter >= 0) {\n      copy.groupBy = replaceAt(copy.groupBy, indexOfFilter, filter);\n    } else {\n      copy.groupBy.push(filter);\n    }\n    onChange(copy);\n  };\n\n  const scopeOptions = Object.values(TraceqlSearchScope).map((t) => ({ label: t, value: t }));\n\n  return (\n    <InlineSearchField\n      label=\"Aggregate by\"\n      tooltip=\"Select one or more tags to see the metrics summary. Note: the metrics summary API only considers spans of kind = server.\"\n    >\n      <>\n        {query.groupBy?.map((f, i) => (\n          <div key={f.id}>\n            <HorizontalGroup spacing={'none'} width={'auto'}>\n              <Select\n                aria-label={`Select scope for filter ${i + 1}`}\n                onChange={(v) => {\n                  updateFilter({ ...f, scope: v?.value, tag: '' });\n                }}\n                options={scopeOptions}\n                placeholder=\"Select scope\"\n                value={f.scope}\n              />\n              <Select\n                aria-label={`Select tag for filter ${i + 1}`}\n                isClearable\n                isLoading={isTagsLoading}\n                key={f.tag}\n                onChange={(v) => {\n                  updateFilter({ ...f, tag: v?.value });\n                }}\n                options={getTags(f)?.map((t) => ({\n                  label: t,\n                  value: t,\n                }))}\n                placeholder=\"Select tag\"\n                value={f.tag || ''}\n              />\n              <AccessoryButton\n                aria-label={`Remove tag for filter ${i + 1}`}\n                icon=\"times\"\n                onClick={() => removeFilter(f)}\n                tooltip=\"Remove tag\"\n                variant=\"secondary\"\n              />\n\n              {i === (query.groupBy?.length ?? 0) - 1 && (\n                <span className={styles.addFilter}>\n                  <AccessoryButton\n                    aria-label=\"Add tag\"\n                    icon=\"plus\"\n                    onClick={() => addFilter()}\n                    tooltip=\"Add tag\"\n                    variant=\"secondary\"\n                  />\n                </span>\n              )}\n            </HorizontalGroup>\n          </div>\n        ))}\n      </>\n    </InlineSearchField>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  addFilter: css`\n    margin-left: ${theme.spacing(2)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport { uniq } from 'lodash';\nimport React, { useState, useEffect, useMemo } from 'react';\nimport useAsync from 'react-use/lib/useAsync';\n\nimport { SelectableValue } from '@grafana/data';\nimport { AccessoryButton } from '@grafana/experimental';\nimport { FetchError, getTemplateSrv, isFetchError } from '@grafana/runtime';\nimport { Select, HorizontalGroup, useStyles2 } from '@grafana/ui';\n\nimport { createErrorNotification } from '../../../../core/copy/appNotification';\nimport { notifyApp } from '../../../../core/reducers/appNotification';\nimport { dispatch } from '../../../../store/store';\nimport { TraceqlFilter, TraceqlSearchScope } from '../dataquery.gen';\nimport { TempoDatasource } from '../datasource';\nimport TempoLanguageProvider from '../language_provider';\nimport { operators as allOperators, stringOperators, numberOperators } from '../traceql/traceql';\n\nimport { filterScopedTag, operatorSelectableValue } from './utils';\n\nconst getStyles = () => ({\n  dropdown: css`\n    box-shadow: none;\n  `,\n});\n\ninterface Props {\n  filter: TraceqlFilter;\n  datasource: TempoDatasource;\n  updateFilter: (f: TraceqlFilter) => void;\n  deleteFilter?: (f: TraceqlFilter) => void;\n  setError: (error: FetchError) => void;\n  isTagsLoading?: boolean;\n  tags: string[];\n  hideScope?: boolean;\n  hideTag?: boolean;\n  hideValue?: boolean;\n  allowDelete?: boolean;\n  query: string;\n}\nconst SearchField = ({\n  filter,\n  datasource,\n  updateFilter,\n  deleteFilter,\n  isTagsLoading,\n  tags,\n  setError,\n  hideScope,\n  hideTag,\n  hideValue,\n  allowDelete,\n  query,\n}: Props) => {\n  const styles = useStyles2(getStyles);\n  const languageProvider = useMemo(() => new TempoLanguageProvider(datasource), [datasource]);\n  const scopedTag = useMemo(() => filterScopedTag(filter), [filter]);\n  // We automatically change the operator to the regex op when users select 2 or more values\n  // However, they expect this to be automatically rolled back to the previous operator once\n  // there's only one value selected, so we store the previous operator and value\n  const [prevOperator, setPrevOperator] = useState(filter.operator);\n  const [prevValue, setPrevValue] = useState(filter.value);\n\n  const updateOptions = async () => {\n    try {\n      return filter.tag ? await languageProvider.getOptionsV2(scopedTag, query) : [];\n    } catch (error) {\n      // Display message if Tempo is connected but search 404's\n      if (isFetchError(error) && error?.status === 404) {\n        setError(error);\n      } else if (error instanceof Error) {\n        dispatch(notifyApp(createErrorNotification('Error', error)));\n      }\n    }\n    return [];\n  };\n\n  const { loading: isLoadingValues, value: options } = useAsync(updateOptions, [\n    scopedTag,\n    languageProvider,\n    setError,\n    query,\n  ]);\n\n  // Add selected option if it doesn't exist in the current list of options\n  if (filter.value && !Array.isArray(filter.value) && options && !options.find((o) => o.value === filter.value)) {\n    options.push({ label: filter.value.toString(), value: filter.value.toString(), type: filter.valueType });\n  }\n\n  useEffect(() => {\n    if (Array.isArray(filter.value) && filter.value.length > 1 && filter.operator !== '=~') {\n      setPrevOperator(filter.operator);\n      updateFilter({ ...filter, operator: '=~' });\n    }\n    if (Array.isArray(filter.value) && filter.value.length <= 1 && (prevValue?.length || 0) > 1) {\n      updateFilter({ ...filter, operator: prevOperator, value: filter.value[0] });\n    }\n  }, [prevValue, prevOperator, updateFilter, filter]);\n\n  useEffect(() => {\n    setPrevValue(filter.value);\n  }, [filter.value]);\n\n  const scopeOptions = Object.values(TraceqlSearchScope)\n    .filter((s) => s !== TraceqlSearchScope.Intrinsic)\n    .map((t) => ({ label: t, value: t }));\n\n  // If all values have type string or int/float use a focused list of operators instead of all operators\n  const optionsOfFirstType = options?.filter((o) => o.type === options[0]?.type);\n  const uniqueOptionType = options?.length === optionsOfFirstType?.length ? options?.[0]?.type : undefined;\n  let operatorList = allOperators;\n  switch (uniqueOptionType) {\n    case 'string':\n      operatorList = stringOperators;\n      break;\n    case 'int':\n    case 'float':\n      operatorList = numberOperators;\n  }\n\n  /**\n   * Add to a list of options the current template variables.\n   *\n   * @param options a list of options\n   * @returns the list of given options plus the template variables\n   */\n  const withTemplateVariableOptions = (options: SelectableValue[] | undefined) => {\n    const templateVariables = getTemplateSrv().getVariables();\n    return [...(options || []), ...templateVariables.map((v) => ({ label: `$${v.name}`, value: `$${v.name}` }))];\n  };\n\n  return (\n    <HorizontalGroup spacing={'none'} width={'auto'}>\n      {!hideScope && (\n        <Select\n          className={styles.dropdown}\n          inputId={`${filter.id}-scope`}\n          options={withTemplateVariableOptions(scopeOptions)}\n          value={filter.scope}\n          onChange={(v) => {\n            updateFilter({ ...filter, scope: v?.value });\n          }}\n          placeholder=\"Select scope\"\n          aria-label={`select ${filter.id} scope`}\n        />\n      )}\n      {!hideTag && (\n        <Select\n          className={styles.dropdown}\n          inputId={`${filter.id}-tag`}\n          isLoading={isTagsLoading}\n          // Add the current tag to the list if it doesn't exist in the tags prop, otherwise the field will be empty even though the state has a value\n          options={withTemplateVariableOptions(\n            (filter.tag !== undefined ? uniq([filter.tag, ...tags]) : tags).map((t) => ({\n              label: t,\n              value: t,\n            }))\n          )}\n          value={filter.tag}\n          onChange={(v) => {\n            updateFilter({ ...filter, tag: v?.value });\n          }}\n          placeholder=\"Select tag\"\n          isClearable\n          aria-label={`select ${filter.id} tag`}\n          allowCustomValue={true}\n        />\n      )}\n      <Select\n        className={styles.dropdown}\n        inputId={`${filter.id}-operator`}\n        options={withTemplateVariableOptions(operatorList.map(operatorSelectableValue))}\n        value={filter.operator}\n        onChange={(v) => {\n          updateFilter({ ...filter, operator: v?.value });\n        }}\n        isClearable={false}\n        aria-label={`select ${filter.id} operator`}\n        allowCustomValue={true}\n        width={8}\n      />\n      {!hideValue && (\n        <Select\n          className={styles.dropdown}\n          inputId={`${filter.id}-value`}\n          isLoading={isLoadingValues}\n          options={withTemplateVariableOptions(options)}\n          value={filter.value}\n          onChange={(val) => {\n            if (Array.isArray(val)) {\n              updateFilter({ ...filter, value: val.map((v) => v.value), valueType: val[0]?.type || uniqueOptionType });\n            } else {\n              updateFilter({ ...filter, value: val?.value, valueType: val?.type || uniqueOptionType });\n            }\n          }}\n          placeholder=\"Select value\"\n          isClearable={false}\n          aria-label={`select ${filter.id} value`}\n          allowCustomValue={true}\n          isMulti\n          allowCreateWhileLoading\n        />\n      )}\n      {allowDelete && (\n        <AccessoryButton\n          variant={'secondary'}\n          icon={'times'}\n          onClick={() => deleteFilter?.(filter)}\n          tooltip={'Remove tag'}\n          aria-label={`remove tag with ID ${filter.id}`}\n        />\n      )}\n    </HorizontalGroup>\n  );\n};\n\nexport default SearchField;\n","import { css } from '@emotion/css';\nimport React, { useCallback, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { AccessoryButton } from '@grafana/experimental';\nimport { FetchError } from '@grafana/runtime';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { TraceqlFilter, TraceqlSearchScope } from '../dataquery.gen';\nimport { TempoDatasource } from '../datasource';\n\nimport SearchField from './SearchField';\nimport { getFilteredTags } from './utils';\n\nconst getStyles = () => ({\n  vertical: css`\n    display: flex;\n    flex-direction: column;\n    gap: 0.25rem;\n  `,\n  horizontal: css`\n    display: flex;\n    flex-direction: row;\n    gap: 1rem;\n  `,\n});\n\ninterface Props {\n  updateFilter: (f: TraceqlFilter) => void;\n  deleteFilter: (f: TraceqlFilter) => void;\n  filters: TraceqlFilter[];\n  datasource: TempoDatasource;\n  setError: (error: FetchError) => void;\n  staticTags: Array<string | undefined>;\n  isTagsLoading: boolean;\n  hideValues?: boolean;\n  query: string;\n}\nconst TagsInput = ({\n  updateFilter,\n  deleteFilter,\n  filters,\n  datasource,\n  setError,\n  staticTags,\n  isTagsLoading,\n  hideValues,\n  query,\n}: Props) => {\n  const styles = useStyles2(getStyles);\n  const generateId = () => uuidv4().slice(0, 8);\n  const handleOnAdd = useCallback(\n    () => updateFilter({ id: generateId(), operator: '=', scope: TraceqlSearchScope.Span }),\n    [updateFilter]\n  );\n\n  useEffect(() => {\n    if (!filters?.length) {\n      handleOnAdd();\n    }\n  }, [filters, handleOnAdd]);\n\n  const getTags = (f: TraceqlFilter) => {\n    const tags = datasource.languageProvider.getTags(f.scope);\n    return getFilteredTags(tags, staticTags);\n  };\n\n  return (\n    <div className={styles.vertical}>\n      {filters?.map((f, i) => (\n        <div className={styles.horizontal} key={f.id}>\n          <SearchField\n            filter={f}\n            datasource={datasource}\n            setError={setError}\n            updateFilter={updateFilter}\n            tags={getTags(f)}\n            isTagsLoading={isTagsLoading}\n            deleteFilter={deleteFilter}\n            allowDelete={true}\n            hideValue={hideValues}\n            query={query}\n          />\n          {i === filters.length - 1 && (\n            <AccessoryButton variant={'secondary'} icon={'plus'} onClick={handleOnAdd} title={'Add tag'} />\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default TagsInput;\n","import { css } from '@emotion/css';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { EditorRow } from '@grafana/experimental';\nimport { config, FetchError, getTemplateSrv } from '@grafana/runtime';\nimport { Alert, HorizontalGroup, useStyles2 } from '@grafana/ui';\n\nimport { createErrorNotification } from '../../../../core/copy/appNotification';\nimport { notifyApp } from '../../../../core/reducers/appNotification';\nimport { dispatch } from '../../../../store/store';\nimport { RawQuery } from '../../prometheus/querybuilder/shared/RawQuery';\nimport { TraceqlFilter } from '../dataquery.gen';\nimport { TempoDatasource } from '../datasource';\nimport { TempoQueryBuilderOptions } from '../traceql/TempoQueryBuilderOptions';\nimport { traceqlGrammar } from '../traceql/traceql';\nimport { TempoQuery } from '../types';\n\nimport DurationInput from './DurationInput';\nimport { GroupByField } from './GroupByField';\nimport InlineSearchField from './InlineSearchField';\nimport SearchField from './SearchField';\nimport TagsInput from './TagsInput';\nimport { filterScopedTag, filterTitle, generateQueryFromFilters, replaceAt } from './utils';\n\ninterface Props {\n  datasource: TempoDatasource;\n  query: TempoQuery;\n  onChange: (value: TempoQuery) => void;\n  onBlur?: () => void;\n}\n\nconst TraceQLSearch = ({ datasource, query, onChange }: Props) => {\n  const styles = useStyles2(getStyles);\n  const [error, setError] = useState<Error | FetchError | null>(null);\n\n  const [isTagsLoading, setIsTagsLoading] = useState(true);\n  const [traceQlQuery, setTraceQlQuery] = useState<string>('');\n\n  const templateSrv = getTemplateSrv();\n\n  const updateFilter = useCallback(\n    (s: TraceqlFilter) => {\n      const copy = { ...query };\n      copy.filters ||= [];\n      const indexOfFilter = copy.filters.findIndex((f) => f.id === s.id);\n      if (indexOfFilter >= 0) {\n        // update in place if the filter already exists, for consistency and to avoid UI bugs\n        copy.filters = replaceAt(copy.filters, indexOfFilter, s);\n      } else {\n        copy.filters.push(s);\n      }\n      onChange(copy);\n    },\n    [onChange, query]\n  );\n\n  const deleteFilter = (s: TraceqlFilter) => {\n    onChange({ ...query, filters: query.filters.filter((f) => f.id !== s.id) });\n  };\n\n  useEffect(() => {\n    setTraceQlQuery(generateQueryFromFilters(query.filters || []));\n  }, [query]);\n\n  const findFilter = useCallback((id: string) => query.filters?.find((f) => f.id === id), [query.filters]);\n\n  useEffect(() => {\n    const fetchTags = async () => {\n      try {\n        await datasource.languageProvider.start();\n        setIsTagsLoading(false);\n      } catch (error) {\n        if (error instanceof Error) {\n          dispatch(notifyApp(createErrorNotification('Error', error)));\n        }\n      }\n    };\n    fetchTags();\n  }, [datasource]);\n\n  useEffect(() => {\n    // Initialize state with configured static filters that already have a value from the config\n    datasource.search?.filters\n      ?.filter((f) => f.value)\n      .forEach((f) => {\n        if (!findFilter(f.id)) {\n          updateFilter(f);\n        }\n      });\n  }, [datasource.search?.filters, findFilter, updateFilter]);\n\n  // filter out tags that already exist in the static fields\n  const staticTags = datasource.search?.filters?.map((f) => f.tag) || [];\n  staticTags.push('duration');\n\n  // Dynamic filters are all filters that don't match the ID of a filter in the datasource configuration\n  // The duration tag is a special case since its selector is hard-coded\n  const dynamicFilters = (query.filters || []).filter(\n    (f) => f.tag !== 'duration' && (datasource.search?.filters?.findIndex((sf) => sf.id === f.id) || 0) === -1\n  );\n\n  return (\n    <>\n      <div className={styles.container}>\n        <div>\n          {datasource.search?.filters?.map(\n            (f) =>\n              f.tag && (\n                <InlineSearchField\n                  key={f.id}\n                  label={filterTitle(f)}\n                  tooltip={`Filter your search by ${filterScopedTag(\n                    f\n                  )}. To modify the default filters shown for search visit the Tempo datasource configuration page.`}\n                >\n                  <SearchField\n                    filter={findFilter(f.id) || f}\n                    datasource={datasource}\n                    setError={setError}\n                    updateFilter={updateFilter}\n                    tags={[]}\n                    hideScope={true}\n                    hideTag={true}\n                    query={traceQlQuery}\n                  />\n                </InlineSearchField>\n              )\n          )}\n          <InlineSearchField\n            label={'Duration'}\n            tooltip=\"The span duration, i.e.\tend - start time of the span. Accepted units are ns, ms, s, m, h\"\n          >\n            <HorizontalGroup spacing={'sm'}>\n              <DurationInput\n                filter={\n                  findFilter('min-duration') || {\n                    id: 'min-duration',\n                    tag: 'duration',\n                    operator: '>',\n                    valueType: 'duration',\n                  }\n                }\n                operators={['>', '>=']}\n                updateFilter={updateFilter}\n              />\n              <DurationInput\n                filter={\n                  findFilter('max-duration') || {\n                    id: 'max-duration',\n                    tag: 'duration',\n                    operator: '<',\n                    valueType: 'duration',\n                  }\n                }\n                operators={['<', '<=']}\n                updateFilter={updateFilter}\n              />\n            </HorizontalGroup>\n          </InlineSearchField>\n          <InlineSearchField label={'Tags'}>\n            <TagsInput\n              filters={dynamicFilters}\n              datasource={datasource}\n              setError={setError}\n              updateFilter={updateFilter}\n              deleteFilter={deleteFilter}\n              staticTags={staticTags}\n              isTagsLoading={isTagsLoading}\n              query={traceQlQuery}\n            />\n          </InlineSearchField>\n          {config.featureToggles.metricsSummary && (\n            <GroupByField datasource={datasource} onChange={onChange} query={query} isTagsLoading={isTagsLoading} />\n          )}\n        </div>\n        <EditorRow>\n          <RawQuery query={templateSrv.replace(traceQlQuery)} lang={{ grammar: traceqlGrammar, name: 'traceql' }} />\n        </EditorRow>\n        <TempoQueryBuilderOptions onChange={onChange} query={query} />\n      </div>\n      {error ? (\n        <Alert title=\"Unable to connect to Tempo search\" severity=\"info\" className={styles.alert}>\n          Please ensure that Tempo is configured with search enabled. If you would like to hide this tab, you can\n          configure it in the <a href={`/datasources/edit/${datasource.uid}`}>datasource settings</a>.\n        </Alert>\n      ) : null}\n    </>\n  );\n};\n\nexport default TraceQLSearch;\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  alert: css`\n    max-width: 75ch;\n    margin-top: ${theme.spacing(2)};\n  `,\n  container: css`\n    display: flex;\n    gap: 4px;\n    flex-wrap: wrap;\n    flex-direction: column;\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\nimport useAsync from 'react-use/lib/useAsync';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, InlineField, InlineFieldRow, useStyles2 } from '@grafana/ui';\n\nimport { AdHocFilter } from '../../../features/variables/adhoc/picker/AdHocFilter';\nimport { AdHocVariableFilter } from '../../../features/variables/types';\nimport { PrometheusDatasource } from '../prometheus/datasource';\n\nimport { TempoQuery } from './types';\nimport { getDS } from './utils';\n\nexport function ServiceGraphSection({\n  graphDatasourceUid,\n  query,\n  onChange,\n}: {\n  graphDatasourceUid?: string;\n  query: TempoQuery;\n  onChange: (value: TempoQuery) => void;\n}) {\n  const styles = useStyles2(getStyles);\n  const dsState = useAsync(() => getDS(graphDatasourceUid), [graphDatasourceUid]);\n\n  // Check if service graph metrics are being collected. If not, displays a warning\n  const [hasKeys, setHasKeys] = useState<boolean | undefined>(undefined);\n  useEffect(() => {\n    async function fn(ds: PrometheusDatasource) {\n      const keys = await ds.getTagKeys({\n        filters: [\n          {\n            key: '__name__',\n            operator: '=~',\n            value:\n              'traces_service_graph_request_server_seconds_sum|traces_service_graph_request_total|traces_service_graph_request_failed_total',\n            condition: '',\n          },\n        ],\n      });\n      setHasKeys(Boolean(keys.length));\n    }\n    if (!dsState.loading && dsState.value) {\n      fn(dsState.value as PrometheusDatasource);\n    }\n  }, [dsState]);\n\n  if (dsState.loading) {\n    return null;\n  }\n\n  const ds = dsState.value as PrometheusDatasource;\n\n  if (!graphDatasourceUid) {\n    return getWarning(\n      'No service graph datasource selected',\n      'Please set up a service graph datasource in the datasource settings',\n      styles\n    );\n  }\n\n  if (graphDatasourceUid && !ds) {\n    return getWarning(\n      'No service graph data found',\n      'Service graph datasource is configured but the data source no longer exists. Please configure existing data source to use the service graph functionality',\n      styles\n    );\n  }\n\n  const filters = queryToFilter(query.serviceMapQuery || '');\n\n  return (\n    <div>\n      <InlineFieldRow>\n        <InlineField label=\"Filter\" labelWidth={14} grow>\n          <AdHocFilter\n            datasource={{ uid: graphDatasourceUid }}\n            filters={filters}\n            baseFilters={[\n              {\n                key: '__name__',\n                operator: '=~',\n                value: 'traces_service_graph_request_total|traces_spanmetrics_calls_total',\n                condition: '',\n              },\n            ]}\n            addFilter={(filter: AdHocVariableFilter) => {\n              onChange({\n                ...query,\n                serviceMapQuery: filtersToQuery([...filters, filter]),\n              });\n            }}\n            removeFilter={(index: number) => {\n              const newFilters = [...filters];\n              newFilters.splice(index, 1);\n              onChange({ ...query, serviceMapQuery: filtersToQuery(newFilters) });\n            }}\n            changeFilter={(index: number, filter: AdHocVariableFilter) => {\n              const newFilters = [...filters];\n              newFilters.splice(index, 1, filter);\n              onChange({ ...query, serviceMapQuery: filtersToQuery(newFilters) });\n            }}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      {hasKeys === false\n        ? getWarning(\n            'No service graph data found',\n            'Please ensure that service graph metrics are set up correctly',\n            styles\n          )\n        : null}\n    </div>\n  );\n}\n\nfunction getWarning(title: string, description: string, styles: { alert: string; link: string }) {\n  return (\n    <Alert title={title} severity=\"info\" className={styles.alert}>\n      {description} according to the{' '}\n      <a\n        target=\"_blank\"\n        rel=\"noreferrer noopener\"\n        href=\"https://grafana.com/docs/grafana/latest/datasources/tempo/service-graph/\"\n        className={styles.link}\n      >\n        Tempo documentation\n      </a>\n      .\n    </Alert>\n  );\n}\n\nfunction queryToFilter(query: string): AdHocVariableFilter[] {\n  let match;\n  let filters: AdHocVariableFilter[] = [];\n  const re = /([\\w_]+)(=|!=|<|>|=~|!~)\"(.*?)\"/g;\n  while ((match = re.exec(query)) !== null) {\n    filters.push({\n      key: match[1],\n      operator: match[2],\n      value: match[3],\n      condition: '',\n    });\n  }\n  return filters;\n}\n\nfunction filtersToQuery(filters: AdHocVariableFilter[]): string {\n  return `{${filters.map((f) => `${f.key}${f.operator}\"${f.value}\"`).join(',')}}`;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  alert: css`\n    max-width: 75ch;\n    margin-top: ${theme.spacing(2)};\n  `,\n  link: css`\n    color: ${theme.colors.text.link};\n    text-decoration: underline;\n  `,\n});\n","import { DataSourceJsonData } from '@grafana/data/src';\nimport { NodeGraphOptions } from 'app/core/components/NodeGraphSettings';\nimport { TraceToLogsOptions } from 'app/core/components/TraceToLogs/TraceToLogsSettings';\n\nimport { LokiQuery } from '../loki/types';\n\nimport { TempoQuery as TempoBase, TempoQueryType, TraceqlFilter } from './dataquery.gen';\n\nexport interface SearchQueryParams {\n  minDuration?: string;\n  maxDuration?: string;\n  limit?: number;\n  tags?: string;\n  start?: number;\n  end?: number;\n}\n\nexport interface TempoJsonData extends DataSourceJsonData {\n  tracesToLogs?: TraceToLogsOptions;\n  serviceMap?: {\n    datasourceUid?: string;\n  };\n  search?: {\n    hide?: boolean;\n    filters?: TraceqlFilter[];\n  };\n  nodeGraph?: NodeGraphOptions;\n  lokiSearch?: {\n    datasourceUid?: string;\n  };\n  spanBar?: {\n    tag: string;\n  };\n  traceQuery?: {\n    timeShiftEnabled?: boolean;\n    spanStartTimeShift?: string;\n    spanEndTimeShift?: string;\n  };\n}\n\nexport interface TempoQuery extends TempoBase {\n  // Query to find list of traces, e.g., via Loki\n  // TODO change this field to the schema type when LokiQuery exists in the schema\n  linkedQuery?: LokiQuery;\n  queryType: TempoQueryType;\n}\n\nexport interface MyDataSourceOptions extends DataSourceJsonData {}\n\nexport const defaultQuery: Partial<TempoQuery> = {};\n\nexport type TraceSearchMetadata = {\n  traceID: string;\n  rootServiceName: string;\n  rootTraceName: string;\n  startTimeUnixNano?: string;\n  durationMs?: number;\n  spanSet?: Spanset;\n  spanSets?: Spanset[];\n};\n\nexport type SearchMetrics = {\n  inspectedTraces?: number;\n  inspectedBytes?: number;\n  totalBlocks?: number;\n  completedJobs?: number;\n  totalJobs?: number;\n  totalBlockBytes?: number;\n};\n\nexport enum SpanKind {\n  UNSPECIFIED,\n  INTERNAL,\n  SERVER,\n  CLIENT,\n  PRODUCER,\n  CONSUMER,\n}\n\nexport type SpanAttributes = {\n  key: string;\n  value: {\n    stringValue?: string;\n    intValue?: string;\n    boolValue?: boolean;\n    doubleValue?: string;\n    Value?: {\n      string_value?: string;\n      int_value?: string;\n      bool_value?: boolean;\n      double_value?: string;\n    };\n  };\n};\n\nexport type Span = {\n  durationNanos: string;\n  traceId?: string;\n  spanID: string;\n  traceState?: string;\n  parentSpanId?: string;\n  name?: string;\n  kind?: SpanKind;\n  startTimeUnixNano: string;\n  endTimeUnixNano?: string;\n  attributes?: SpanAttributes[];\n  dropped_attributes_count?: number;\n};\n\nexport type Spanset = {\n  attributes?: SpanAttributes[];\n  spans: Span[];\n};\n\nexport type SearchResponse = {\n  traces: TraceSearchMetadata[];\n  metrics: SearchMetrics;\n};\n\nexport type Scope = {\n  name: string;\n  tags: string[];\n};\n","import { LRParser } from '@lezer/lr';\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst parser = LRParser.deserialize({\n  version: 14,\n  states: \",xOVQPOOOVQPO'#CfO!lQPO'#CeO$|QPO'#CgOOQO'#Cz'#CzOOQO'#Cy'#CyO%TQPO'#CyO%YQQO'#CvOOQO'#Cw'#CwO%bQPO'#CwO%mQPO'#C|O%rQPO'#C}O%wQQO'#DPOOQO'#Ce'#CeQ%|QPOOOOQO'#C^'#C^O&bQPO,59QO&iQQO,59cO&tQPO,59OO']QPO,58xO'dQPO,59QO'dQPO,59QO'dQPO,59QO'dQPO,59QO'dQPO,59QOOQO'#Cj'#CjOOQO'#Cp'#CpO'iQSO'#CpO(QQQO'#CrO(VQPO'#CrO!vQPO'#ChO([QSO,59RO!vQPO'#ChOOQO'#Ch'#ChOOQO,59R,59RO!vQPO,59eO(jQPO,59cO(jQPO,59bOOQO,59c,59cO!vQPO,59hO!vQPO,59iOOQO,59k,59kOVQPO,58xOVQPO,58xOVQPO,58xOVQPO,58xOVQPO,58xOVQPO,58xOOQO1G.l1G.lOOQO1G.}1G.}OOQO1G.j1G.jOOQO1G.d1G.dO'dQPO'#CfO)vQPO1G.lO*fQPO1G.lO*mQPO1G.lO*tQPO1G.lO*{QQO,59^OOQO,59^,59^O+WQQO,59^O+]QSO,59SO!vQPO,59SO!vQPO,59SO!vQPO,59SOOQO1G.m1G.mO+kQSO,59SO,PQSO1G/PO(jQPO'#CwO,_QWO1G.|O,|QSO1G/SO-[QSO'#DOO-mQPO1G/TO.^QPO1G.dO.|QPO1G.dO/TQPO1G.dO/[QPO1G.dO/cQPO1G.dO/}QPO,59QOOQO1G.x1G.xO0cQPO1G.xOOQO1G.n1G.nO0yQSO1G.nO1QQSO1G.nOOQO7+$k7+$kO1XQQO,59cOOQO7+$n7+$nO!vQPO,59jOOQO7+$o7+$oO1aQQO7+$dO1fQSO1G/UOOQO<<HO<<HO\",\n  stateData: \"2Q~OvOS~O`WOaWObWOcWOwPOzRO|XO!eTO!fSO!gSO!hSO!iSO!jYO!kZO!m[O~ORdOSeOTfOUgOyhOVXX~OtXXxXX~P!WO_iO`iOaiObiOciOekOhmOimOwnO|pO}pO!OiO!PiO!QiO!RiO!SiO!TiO!UiO!ViO!WiO!XiO!YiO!ZiO![jO!]jO!^jO!_jO!`jO!ajO!bjO!cjO!dlO~O{rO~P!vOwsO~OltOouO~O`vOavObvO~OwwO~OwxO~O!nyO~ORzOS{OT|OU}OV!POy!OO~Ox!QO~P!WOltOouOx!RO~Ox!SORQXSQXTQXUQXVQXyQX~Ox!TO~P%|Ow!UO~O!d!ZORdXUdX]dX{dXxdX!ldX~Og![O~O!d!]O~OR!`OU!aO]!_O{!bO~O`WOaWObWOcWOw!eO|XO!eTO!fSO!gSO!hSO!iSO~OSeOTfOyhOUYiVYitYixYi~ORYi~P)_OSeORYiUYiVYitYiyYixYi~OTYi~P)}ORdO~P)_OTfO~P)}Og!pOh!qOi!qO~Og!pO~OR!`OU!aO]!_Ox!rO~OR!`OU!aO]!_O{[ax[a!l[a~OR!`OU!aO]!_Ox!uO~OltORjiSjiTjiUjiVjitjiyjixji~OR!`OU!aO]!_Ox!wO~OR!`OU!aO]!_OxrX!lrX~Ox!yO!l!xO~OS{OT|Oy!OOUQiVQitQixQi~ORQi~P-uOS{ORQiUQiVQitQiyQixQi~OTQi~P.eORzO~P-uOT|O~P.eORzOS{OT|OU}Oy!OOVQitQixQi~ORdOSeOTfOUgOx!QOyhO~O!d!zO~O]!_OU[i{[ix[i!l[i~OR[i~P0hOR!`O~P0hOltOx!RO~Og!|O~OR!`OU!aO]!_Oxri!lri~Oab`ehige~\",\n  goto: \"%otPPuPPPPP!_!i!u#e#oP$_PPPPP$_P$_PPP#e$kP%Q%_P#e#e%l#eQ^OQcPQ!T{Q!jzQ!k|Q!l}Q!m!OR!n!Pa_OPz{|}!O!P^_Oz{|}!O!PRbP^QOz{|}!O!PQ`PQ!QeQ!VdQ!WfQ!XgQ!YhR!o!Ua]OPz{|}!O!PQoRQ!^nQ!cpQ!dsQ!gwQ!hxQ!r!_Q!s!`Q!t!aR!{!xeqRnpswx!_!`!a!x^VOz{|}!O!PQaPQ!RtQ!fuR!v!egWOPtuz{|}!O!P!egUOPtuz{|}!O!P!eR!ix\",\n  nodeNames: \"⚠ TraceQL SpansetPipelineExpression And Gt Desc Or Pipe WrappedSpansetPipeline SpansetPipeline SpansetExpression SpansetFilter FieldExpression FieldOp Static String Integer Float Duration TemplateVariable IntrinsicField Parent AttributeField Identifier Resource Span ScalarFilter ScalarExpression ScalarOp Aggregate AggregateExpression ComparisonOp GroupOperation SelectOperation SelectArgs CoalesceOperation\",\n  maxTerm: 76,\n  skippedNodes: [0],\n  repeatNodeCount: 0,\n  tokenData: \"#.Y~R!XX^$npq$nqr%crs%utu&juv)Zvw)bxy)myz)zz{)Z{|)Z|}*P}!O*U!O!P*_!P!Q)Z!Q![+Z!^!_,[!_!`,f!`!a,p!c!}*u#Q#R)Z#R#S*u#T#U-U#U#V.r#V#W/t#W#XAk#X#YE|#Y#ZHp#Z#]*u#]#^Ka#^#_*u#_#`! r#`#a*u#a#b!#z#b#c!&m#c#d!)z#d#e!*|#e#f*u#f#g!2X#g#h!@s#h#i!K|#i#j#&[#j#o*u#o#p#-j#p#q#-o#q#r#-|#r#s#.R#y#z$n$f$g$n#BY#BZ$n$IS$I_$n$I|$JO$n$JT$JU$n$KV$KW$n&FU&FV$n~$sYv~X^$npq$n#y#z$n$f$g$n#BY#BZ$n$IS$I_$n$I|$JO$n$JT$JU$n$KV$KW$n&FU&FV$nV%hQ}P!_!`%n#r#s%nU%uOoQ]S~%xVOY%uZr%urs&_s#O%u#P;'S%u;'S;=`&d<%lO%u~&dO_~~&gP;=`<%l%uR&mT!O!P&|!c!}&|#R#S&|#T#o&|#o#p'bP'RTcP!O!P&|!Q![&|!c!}&|#R#S&|#T#o&|R'eS!O!P'q!c!}'q#R#S'q#T#o'qR'tV!O!P'q!Q!['q![!](Z!c!}'q#R#S'q#T#o'q#q#r)SR(^T!O!P(m!Q![(m!c!}(m#R#S(m#T#o(mR(pU!O!P(m!Q![(m!c!}(m#R#S(m#T#o(m#q#r)SR)ZOcPgQ^)bO]SlY~)ePvw)h~)mOR~R)rPwPyz)uQ)zO!nQ~*POx~~*UO!l~_*_O|P]SlYV*fT!dTgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#o*uQ*zTgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#o*u~+`T`~!O!P+o!Q![+Z#[#]+}#a#b,S#g#h+}~+rP!Q![+u~+zPa~!Q![+u~,SOb~~,XPb~#g#h+}U,cPoQ]S!_!`%nU,mPoQ]S#r#s%n_,yQoQ]SSX!_!`%n!`!a-PX-UOTXR-ZVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#j*u#j#k-p#k#o*uR-uVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#Z*u#Z#[.[#[#o*uR.cT!hPgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#o*uR.wVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#m*u#m#n/^#n#o*uR/eT!jPgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#o*uR/yZgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#[*u#[#]0l#]#`*u#`#a5l#a#c*u#c#d8`#d#o*uR0qVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#]*u#]#^1W#^#o*uR1]VgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#`*u#`#a1r#a#o*uR1wVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#W*u#W#X2^#X#o*uR2cVgQ!O!P*u!Q![*u!c!e*u!e!f2x!f!}*u#R#S*u#T#o*uR2}VgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#c*u#c#d3d#d#o*uR3iVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#i*u#i#j4O#j#o*uR4TVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#b*u#b#c4j#c#o*uR4oVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#h*u#h#i5U#i#o*uR5]T!]PgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#o*uR5qVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#]*u#]#^6W#^#o*uR6]VgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#X*u#X#Y6r#Y#o*uR6wVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#b*u#b#c7^#c#o*uR7cVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#h*u#h#i7x#i#o*uR8PT!XPgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#o*uR8eYgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#U9T#U#b*u#b#c<c#c#i*u#i#j?q#j#o*uR9YVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#`*u#`#a9o#a#o*uR9tVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#X*u#X#Y:Z#Y#o*uR:`VgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#g*u#g#h:u#h#o*uR:zVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#V*u#V#W;a#W#o*uR;fVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#X*u#X#Y;{#Y#o*uR<ST!mPgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#o*uR<hVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#g*u#g#h<}#h#o*uR=SVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#i*u#i#j=i#j#o*uR=nVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#a*u#a#b>T#b#o*uR>YVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#X*u#X#Y>o#Y#o*uR>tVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#f*u#f#g?Z#g#o*uR?bT!ZPgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#o*uR?vVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#b*u#b#c@]#c#o*uR@bVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#h*u#h#i@w#i#o*uR@|UgQxyA`!O!P*u!Q![*u!c!}*u#R#S*u#T#o*uPAcPyzAfPAkO!ePRApVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#i*u#i#jBV#j#o*uRB[VgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#f*u#f#gBq#g#o*uRBvUgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#UCY#U#o*uRC_VgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#h*u#h#iCt#i#o*uRCyVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#]*u#]#^D`#^#o*uRDeVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#c*u#c#dDz#d#o*uREPVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#b*u#b#cEf#c#o*uREmT![PgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#o*uRFRVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#f*u#f#gFh#g#o*uRFmVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#f*u#f#gGS#g#o*uRGXVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#c*u#c#dGn#d#o*uRGsVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#f*u#f#gHY#g#o*uRHaT!SPgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#o*uRHuUgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#UIX#U#o*uRI^VgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#`*u#`#aIs#a#o*uRIxVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#g*u#g#hJ_#h#o*uRJdVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#X*u#X#YJy#Y#o*uRKQT!PPgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#o*uRKfVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#b*u#b#cK{#c#o*uRLQVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#h*u#h#iLg#i#o*uRLlVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#X*u#X#YMR#Y#o*uRMWVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#f*u#f#gMm#g#o*uRMrVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#b*u#b#cNX#c#o*uRN^UgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#UNp#U#o*uRNuVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#`*u#`#a! [#a#o*uR! cT!VPgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#o*uR! wVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#]*u#]#^!!^#^#o*uR!!cVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#b*u#b#c!!x#c#o*uR!!}VgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#W*u#W#X!#d#X#o*uR!#kT!`PgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#o*uR!$PWgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#U!$i#U#]*u#]#^!%k#^#o*uR!$nVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#l*u#l#m!%T#m#o*uR!%[T!fPgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#o*uR!%pVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#b*u#b#c!&V#c#o*uR!&^T!gPgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#o*uR!&rWgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#U!'[#U#]*u#]#^!(x#^#o*uR!'aVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#a*u#a#b!'v#b#o*uR!'{VgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#X*u#X#Y!(b#Y#o*uR!(iT!^PgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#o*uR!(}VgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#`*u#`#a!)d#a#o*uR!)kT!QPgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#o*uR!*PVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#_*u#_#`!*f#`#o*uR!*mT!RPgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#o*u~!+RWgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#U!+k#U#f*u#f#g!._#g#o*u~!+pVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#f*u#f#g!,V#g#o*u~!,[VgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#X*u#X#Y!,q#Y#o*u~!,vVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#b*u#b#c!-]#c#o*u~!-bVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#h*u#h#i!-w#i#o*u~!.OTe~gQ!O!P*u!Q![*u!c!}*u#R#S*u#T#o*uR!.dVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#c*u#c#d!.y#d#o*uR!/OVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#W*u#W#X!/e#X#o*uR!/jVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#i*u#i#j!0P#j#o*uR!0UVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#V*u#V#W!0k#W#o*uR!0pVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#X*u#X#Y!1V#Y#o*uR!1[VgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#f*u#f#g!1q#g#o*uR!1xT!YPgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#o*u~!2^XgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#X*u#X#Y!2y#Y#c*u#c#d!6s#d#o*u~!3OVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#g*u#g#h!3e#h#o*u~!3jVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#c*u#c#d!4P#d#o*u~!4UVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#i*u#i#j!4k#j#o*u~!4pVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#f*u#f#g!5V#g#o*u~!5[VgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#V*u#V#W!5q#W#o*u~!5vVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#X*u#X#Y!6]#Y#o*u~!6dTh~gQ!O!P*u!Q![*u!c!}*u#R#S*u#T#o*uR!6xVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#c*u#c#d!7_#d#o*uR!7dVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#h*u#h#i!7y#i#o*uR!8OXgQ!O!P*u!Q![*u!c!p*u!p!q!8k!q!u*u!u!v!:p!v!}*u#R#S*u#T#o*uR!8pUgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#U!9S#U#o*uR!9XVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#a*u#a#b!9n#b#o*uR!9sVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#X*u#X#Y!:Y#Y#o*uR!:aT!aPgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#o*uR!:uVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#X*u#X#Y!;[#Y#o*uR!;aVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#f*u#f#g!;v#g#o*uR!;{VgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#j*u#j#k!<b#k#o*uR!<gVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#]*u#]#^!<|#^#o*uR!=RVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#V*u#V#W!=h#W#o*uR!=mVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#X*u#X#Y!>S#Y#o*uR!>XVgQ!O!P*u!Q![*u!c!p*u!p!q!>n!q!}*u#R#S*u#T#o*uR!>sUgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#U!?V#U#o*uR!?[VgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#a*u#a#b!?q#b#o*uR!?vVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#X*u#X#Y!@]#Y#o*uR!@dT!bPgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#o*u~!@x[gQ!O!P*u!Q![*u!c!}*u#R#S*u#T#X*u#X#Y!An#Y#d*u#d#e!Fp#e#h*u#h#i!HZ#i#j!Jz#j#o*uR!AsXgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#`*u#`#a!B`#a#f*u#f#g!Dh#g#o*uR!BeVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#X*u#X#Y!Bz#Y#o*uR!CPVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#V*u#V#W!Cf#W#o*uR!CkVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#h*u#h#i!DQ#i#o*uR!DXT!kPgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#o*uR!DmVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#j*u#j#k!ES#k#o*uR!EXVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#X*u#X#Y!En#Y#o*uR!EsVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#f*u#f#g!FY#g#o*uR!FaT!WPgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#o*u~!FuUgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#U!GX#U#o*u~!G^VgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#b*u#b#c!Gs#c#o*u~!GzTi~gQ!O!P*u!Q![*u!c!}*u#R#S*u#T#o*uR!H`UgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#U!Hr#U#o*uR!HwVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#h*u#h#i!I^#i#o*uR!IcVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#i*u#i#j!Ix#j#o*uR!I}VgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#g*u#g#h!Jd#h#o*uR!JkT!_PgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#o*uR!KPVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#a*u#a#b!Kf#b#o*uR!KmT!iPgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#o*uR!LRVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#f*u#f#g!Lh#g#o*uR!LmWgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#U!MV#U#i*u#i#j#%Y#j#o*uR!M[VgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#V*u#V#W!Mq#W#o*uR!MvVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#X*u#X#Y!N]#Y#o*uR!NbVgQ!O!P*u!Q![*u!c!f*u!f!g!Nw!g!}*u#R#S*u#T#o*uR!N|VgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#i*u#i#j# c#j#o*uR# hVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#f*u#f#g# }#g#o*uR#!SUgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#U#!f#U#o*uR#!kVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#h*u#h#i##Q#i#o*uR##VVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#]*u#]#^##l#^#o*uR##qVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#c*u#c#d#$W#d#o*uR#$]VgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#b*u#b#c#$r#c#o*uR#$yT!cPgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#o*uR#%_VgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#X*u#X#Y#%t#Y#o*uR#%{T!OPgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#o*uR#&aVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#b*u#b#c#&v#c#o*uR#&{VgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#g*u#g#h#'b#h#o*uR#'gXgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#X*u#X#Y#(S#Y#d*u#d#e#)U#e#o*uR#(XVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#h*u#h#i#(n#i#o*uR#(uT!TPgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#o*uR#)ZVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#X*u#X#Y#)p#Y#o*uR#)uVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#V*u#V#W#*[#W#o*uR#*aVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#]*u#]#^#*v#^#o*uR#*{VgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#Y*u#Y#Z#+b#Z#o*uR#+gVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#]*u#]#^#+|#^#o*uR#,RVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#X*u#X#Y#,h#Y#o*uR#,mVgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#W*u#W#X#-S#X#o*uR#-ZT!UPgQ!O!P*u!Q![*u!c!}*u#R#S*u#T#o*u~#-oOz~~#-tPV~#p#q#-w~#-|OU~~#.RO{~]#.YO]SyX\",\n  tokenizers: [0, 1, 2, 3],\n  topRules: {\"TraceQL\":[0,1]},\n  tokenPrec: 775\n});\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst TraceQL = 1,\n  SpansetPipelineExpression = 2,\n  And = 3,\n  Gt = 4,\n  Desc = 5,\n  Or = 6,\n  Pipe = 7,\n  WrappedSpansetPipeline = 8,\n  SpansetPipeline = 9,\n  SpansetExpression = 10,\n  SpansetFilter = 11,\n  FieldExpression = 12,\n  FieldOp = 13,\n  Static = 14,\n  String = 15,\n  Integer = 16,\n  Float = 17,\n  Duration = 18,\n  TemplateVariable = 19,\n  IntrinsicField = 20,\n  Parent = 21,\n  AttributeField = 22,\n  Identifier = 23,\n  Resource = 24,\n  Span = 25,\n  ScalarFilter = 26,\n  ScalarExpression = 27,\n  ScalarOp = 28,\n  Aggregate = 29,\n  AggregateExpression = 30,\n  ComparisonOp = 31,\n  GroupOperation = 32,\n  SelectOperation = 33,\n  SelectArgs = 34,\n  CoalesceOperation = 35;\n\nexport { Aggregate, AggregateExpression, And, AttributeField, CoalesceOperation, ComparisonOp, Desc, Duration, FieldExpression, FieldOp, Float, GroupOperation, Gt, Identifier, Integer, IntrinsicField, Or, Parent, Pipe, Resource, ScalarExpression, ScalarFilter, ScalarOp, SelectArgs, SelectOperation, Span, SpansetExpression, SpansetFilter, SpansetPipeline, SpansetPipelineExpression, Static, String, TemplateVariable, TraceQL, WrappedSpansetPipeline, parser };\n","import { SyntaxNode, Tree } from '@lezer/common';\n\nimport {\n  Aggregate,\n  And,\n  AttributeField,\n  ComparisonOp,\n  FieldExpression,\n  FieldOp,\n  GroupOperation,\n  IntrinsicField,\n  Or,\n  parser,\n  Pipe,\n  ScalarFilter,\n  SelectArgs,\n  SpansetFilter,\n  SpansetPipeline,\n  SpansetPipelineExpression,\n  Static,\n  TraceQL,\n} from '@grafana/lezer-traceql';\n\ntype Direction = 'parent' | 'firstChild' | 'lastChild' | 'nextSibling' | 'prevSibling';\ntype NodeType = number;\n\nexport type Situation = { query: string } & SituationType;\n\nexport type SituationType =\n  | {\n      type: 'UNKNOWN';\n    }\n  | {\n      type: 'EMPTY';\n    }\n  | {\n      type: 'SPANSET_EMPTY';\n    }\n  | {\n      type: 'SPANSET_ONLY_DOT';\n    }\n  | {\n      type: 'SPANSET_EXPRESSION_OPERATORS';\n    }\n  | {\n      type: 'SPANFIELD_COMBINING_OPERATORS';\n    }\n  | {\n      type: 'SPANSET_IN_NAME';\n    }\n  | {\n      type: 'SPANSET_IN_NAME_SCOPE';\n      scope: string;\n    }\n  | {\n      type: 'SPANSET_IN_VALUE';\n      tagName: string;\n      betweenQuotes: boolean;\n    }\n  | {\n      type: 'SPANSET_AFTER_VALUE';\n    }\n  | {\n      type: 'SPANSET_COMBINING_OPERATORS';\n    }\n  | {\n      type: 'SPANSET_PIPELINE_AFTER_OPERATOR';\n    }\n  | {\n      type: 'SPANSET_IN_THE_MIDDLE';\n    }\n  | {\n      type: 'SPANSET_EXPRESSION_OPERATORS_WITH_MISSING_CLOSED_BRACE';\n    }\n  | {\n      type: 'NEW_SPANSET';\n    }\n  | {\n      type: 'ATTRIBUTE_FOR_FUNCTION';\n    }\n  | {\n      type: 'SPANSET_COMPARISON_OPERATORS';\n    };\n\ntype Path = Array<[Direction, NodeType[]]>;\n\ntype Resolver = {\n  path: NodeType[];\n  fun: (node: SyntaxNode, text: string, pos: number, originalPos: number) => SituationType | null;\n};\n\nfunction getErrorNode(tree: Tree, cursorPos: number): SyntaxNode | null {\n  const cur = tree.cursorAt(cursorPos);\n  do {\n    if (cur.from === cursorPos || cur.to === cursorPos) {\n      const { node } = cur;\n      if (node.type.isError) {\n        return node;\n      }\n    }\n  } while (cur.next());\n  return null;\n}\n\nfunction move(node: SyntaxNode, direction: Direction): SyntaxNode | null {\n  return node[direction];\n}\n\nfunction walk(node: SyntaxNode, path: Path): SyntaxNode | null {\n  let current: SyntaxNode | null = node;\n  for (const [direction, expectedNodeIDs] of path) {\n    current = move(current, direction);\n    if (current === null) {\n      // we could not move in the direction, we stop\n      return null;\n    }\n\n    // note that the found value can be 0, which is acceptable\n    if (expectedNodeIDs.find((id) => id === current?.type.id) === undefined) {\n      // the reached node has wrong type, we stop\n      return null;\n    }\n  }\n  return current;\n}\n\nfunction getNodeText(node: SyntaxNode, text: string): string {\n  // if the from and to are them same (e.g. for an error node) we can subtract 1 from the start/from index\n  return text.slice(node.from === node.to ? node.from - 1 : node.from, node.to);\n}\n\nfunction isPathMatch(resolverPath: NodeType[], cursorPath: number[]): boolean {\n  return resolverPath.every((item, index) => item === cursorPath[index]);\n}\n\n/**\n * Figure out where is the cursor and what kind of suggestions are appropriate.\n * @param text the user input\n * @param offset the position of the cursor (starting from 0) in the user input\n */\nexport function getSituation(text: string, offset: number): Situation | null {\n  // there is a special case when we are at the start of writing text,\n  // so we handle that case first\n  if (text === '') {\n    return {\n      query: text,\n      type: 'EMPTY',\n    };\n  }\n\n  const tree = parser.parse(text);\n\n  // Whitespaces (especially when multiple) on the left of the text cursor can trick the Lezer parser,\n  // causing a wrong tree cursor to be picked.\n  // Example: `{ span.foo =    ↓ }`, with `↓` being the cursor, tricks the parser.\n  // Quick and dirty hack: Shift the cursor to the left until we find a non-whitespace character on its left.\n  let shiftedOffset = offset;\n  while (shiftedOffset - 1 >= 0 && text[shiftedOffset - 1] === ' ') {\n    shiftedOffset -= 1;\n  }\n\n  // if the tree contains error, it is very probable that\n  // our node is one of those error nodes.\n  // also, if there are errors, the node lezer finds us,\n  // might not be the best node.\n  // so first we check if there is an error node at the cursor position\n  let maybeErrorNode = getErrorNode(tree, shiftedOffset);\n  if (!maybeErrorNode) {\n    // try again with the previous character\n    maybeErrorNode = getErrorNode(tree, shiftedOffset - 1);\n  }\n\n  const cur = maybeErrorNode != null ? maybeErrorNode.cursor() : tree.cursorAt(shiftedOffset);\n\n  const currentNode = cur.node;\n  const ids = [cur.type.id];\n  while (cur.parent()) {\n    ids.push(cur.type.id);\n  }\n\n  let situationType: SituationType | null = null;\n  for (let resolver of RESOLVERS) {\n    if (isPathMatch(resolver.path, ids)) {\n      situationType = resolver.fun(currentNode, text, shiftedOffset, offset);\n    }\n  }\n\n  return { query: text, ...(situationType ?? { type: 'UNKNOWN' }) };\n}\n\nconst ERROR_NODE_ID = 0;\n\nconst RESOLVERS: Resolver[] = [\n  // Curson on error node cases\n  {\n    path: [ERROR_NODE_ID, AttributeField],\n    fun: resolveAttribute,\n  },\n  {\n    path: [ERROR_NODE_ID, FieldExpression],\n    fun: resolveExpression,\n  },\n  {\n    path: [ERROR_NODE_ID, SpansetFilter],\n    fun: () => ({\n      type: 'SPANSET_EXPRESSION_OPERATORS_WITH_MISSING_CLOSED_BRACE',\n    }),\n  },\n  {\n    path: [ERROR_NODE_ID, Aggregate],\n    fun: resolveAttributeForFunction,\n  },\n  {\n    path: [ERROR_NODE_ID, IntrinsicField],\n    fun: resolveAttributeForFunction,\n  },\n  {\n    path: [ERROR_NODE_ID, SpansetPipelineExpression],\n    fun: resolveSpansetPipeline,\n  },\n  {\n    path: [ERROR_NODE_ID, ScalarFilter, SpansetPipeline],\n    fun: resolveArithmeticOperator,\n  },\n  {\n    path: [ERROR_NODE_ID, TraceQL],\n    fun: () => {\n      return {\n        type: 'UNKNOWN',\n      };\n    },\n  },\n  // Curson on valid node cases (the whole query could contain errors nevertheless)\n  {\n    path: [FieldExpression],\n    fun: resolveSpanset,\n  },\n  {\n    path: [SpansetFilter],\n    fun: resolveSpanset,\n  },\n  {\n    path: [SpansetPipelineExpression],\n    fun: resolveNewSpansetExpression,\n  },\n  {\n    path: [TraceQL],\n    fun: resolveNewSpansetExpression,\n  },\n];\n\nconst resolveAttributeCompletion = (node: SyntaxNode, text: string, pos: number): SituationType | void => {\n  // The user is completing an expression. We can take advantage of the fact that the Monaco editor is smart\n  // enough to automatically detect that there are some characters before the cursor and to take them into\n  // account when providing suggestions.\n  const endOfPathNode = walk(node, [['firstChild', [FieldExpression]]]);\n  if (endOfPathNode && text[pos - 1] !== ' ') {\n    const attributeFieldParent = walk(endOfPathNode, [['firstChild', [AttributeField]]]);\n    const attributeFieldParentText = attributeFieldParent ? getNodeText(attributeFieldParent, text) : '';\n    const indexOfDot = attributeFieldParentText.indexOf('.');\n    const attributeFieldUpToDot = attributeFieldParentText.slice(0, indexOfDot);\n\n    return {\n      type: 'SPANSET_IN_NAME_SCOPE',\n      scope: attributeFieldUpToDot,\n    };\n  }\n};\n\nfunction resolveSpanset(node: SyntaxNode, text: string, _: number, originalPos: number): SituationType {\n  const situation = resolveAttributeCompletion(node, text, originalPos);\n  if (situation) {\n    return situation;\n  }\n\n  let endOfPathNode = walk(node, [\n    ['firstChild', [FieldExpression]],\n    ['firstChild', [AttributeField]],\n  ]);\n  if (endOfPathNode) {\n    return {\n      type: 'SPANSET_EXPRESSION_OPERATORS',\n    };\n  }\n\n  endOfPathNode = walk(node, [\n    ['lastChild', [FieldExpression]],\n    ['lastChild', [FieldExpression]],\n    ['lastChild', [Static]],\n  ]);\n  if (endOfPathNode) {\n    return {\n      type: 'SPANFIELD_COMBINING_OPERATORS',\n    };\n  }\n\n  endOfPathNode = walk(node, [['lastChild', [FieldExpression]]]);\n  if (endOfPathNode) {\n    return {\n      type: 'SPANSET_EXPRESSION_OPERATORS',\n    };\n  }\n\n  return {\n    type: 'SPANSET_EMPTY',\n  };\n}\n\nfunction resolveAttribute(node: SyntaxNode, text: string): SituationType {\n  const attributeFieldParent = walk(node, [['parent', [AttributeField]]]);\n  const attributeFieldParentText = attributeFieldParent ? getNodeText(attributeFieldParent, text) : '';\n\n  if (attributeFieldParentText === '.') {\n    return {\n      type: 'SPANSET_ONLY_DOT',\n    };\n  }\n\n  const indexOfDot = attributeFieldParentText.indexOf('.');\n  const attributeFieldUpToDot = attributeFieldParentText.slice(0, indexOfDot);\n\n  if (['span', 'resource', 'parent'].find((item) => item === attributeFieldUpToDot)) {\n    return {\n      type: 'SPANSET_IN_NAME_SCOPE',\n      scope: attributeFieldUpToDot,\n    };\n  }\n  return {\n    type: 'SPANSET_IN_NAME',\n  };\n}\n\nfunction resolveExpression(node: SyntaxNode, text: string, _: number, originalPos: number): SituationType {\n  const situation = resolveAttributeCompletion(node, text, originalPos);\n  if (situation) {\n    return situation;\n  }\n\n  if (node.prevSibling?.type.id === FieldOp) {\n    let attributeField = node.prevSibling.prevSibling;\n    if (attributeField) {\n      return {\n        type: 'SPANSET_IN_VALUE',\n        tagName: getNodeText(attributeField, text),\n        betweenQuotes: false,\n      };\n    }\n  }\n\n  if (node.prevSibling?.type.name === 'And' || node.prevSibling?.type.name === 'Or') {\n    return {\n      type: 'SPANSET_EMPTY',\n    };\n  }\n\n  return {\n    type: 'SPANSET_IN_THE_MIDDLE',\n  };\n}\n\nfunction resolveArithmeticOperator(node: SyntaxNode, _0: string, _1: number): SituationType {\n  if (node.prevSibling?.type.id === ComparisonOp) {\n    return {\n      type: 'UNKNOWN',\n    };\n  }\n\n  return {\n    type: 'SPANSET_COMPARISON_OPERATORS',\n  };\n}\n\nfunction resolveNewSpansetExpression(node: SyntaxNode, text: string, offset: number): SituationType {\n  // Select the node immediately before the one pointed by the cursor\n  let previousNode = node.firstChild;\n  try {\n    previousNode = node.firstChild;\n    while (previousNode!.to < offset) {\n      previousNode = previousNode!.nextSibling;\n    }\n  } catch (error) {\n    console.error('Unexpected error while searching for previous node', error);\n  }\n\n  if (previousNode?.type.id === And || previousNode?.type.id === Or) {\n    return {\n      type: 'NEW_SPANSET',\n    };\n  }\n\n  return {\n    type: 'SPANSET_COMBINING_OPERATORS',\n  };\n}\n\nfunction resolveAttributeForFunction(node: SyntaxNode, _0: string, _1: number): SituationType {\n  const parent = node?.parent;\n  if (!!parent && [IntrinsicField, Aggregate, GroupOperation, SelectArgs].includes(parent.type.id)) {\n    return {\n      type: 'ATTRIBUTE_FOR_FUNCTION',\n    };\n  }\n  return {\n    type: 'UNKNOWN',\n  };\n}\n\nfunction resolveSpansetPipeline(node: SyntaxNode, _1: string, _2: number): SituationType {\n  if (node.prevSibling?.type.id === Pipe) {\n    return {\n      type: 'SPANSET_PIPELINE_AFTER_OPERATOR',\n    };\n  }\n  return {\n    type: 'NEW_SPANSET',\n  };\n}\n","import { IMarkdownString } from 'monaco-editor';\n\nimport { SelectableValue } from '@grafana/data';\nimport { isFetchError } from '@grafana/runtime';\nimport type { Monaco, monacoTypes } from '@grafana/ui';\n\nimport { createErrorNotification } from '../../../../core/copy/appNotification';\nimport { notifyApp } from '../../../../core/reducers/appNotification';\nimport { dispatch } from '../../../../store/store';\nimport TempoLanguageProvider from '../language_provider';\n\nimport { getSituation, Situation } from './situation';\nimport { intrinsics, scopes } from './traceql';\n\ninterface Props {\n  languageProvider: TempoLanguageProvider;\n}\n\ntype MinimalCompletionItem = {\n  label: string;\n  insertText: string;\n  detail?: string;\n  documentation?: string | IMarkdownString;\n};\n\n/**\n * Class that implements CompletionItemProvider interface and allows us to provide suggestion for the Monaco\n * autocomplete system.\n *\n * Here we want to provide suggestions for TraceQL. Please refer to\n * https://grafana.com/docs/tempo/latest/traceql for the syntax of the language.\n */\nexport class CompletionProvider implements monacoTypes.languages.CompletionItemProvider {\n  languageProvider: TempoLanguageProvider;\n  registerInteractionCommandId: string | null;\n\n  constructor(props: Props) {\n    this.languageProvider = props.languageProvider;\n    this.registerInteractionCommandId = null;\n  }\n\n  triggerCharacters = ['{', '.', '[', '(', '=', '~', ' ', '\"'];\n\n  // Operators\n  static readonly arithmeticOps: MinimalCompletionItem[] = [\n    {\n      label: '+',\n      insertText: '+',\n      detail: 'Plus',\n    },\n    {\n      label: '-',\n      insertText: '-',\n      detail: 'Minus',\n    },\n    {\n      label: '*',\n      insertText: '*',\n      detail: 'Times',\n    },\n    {\n      label: '/',\n      insertText: '/',\n      detail: 'Over',\n    },\n  ];\n\n  static readonly logicalOps: MinimalCompletionItem[] = [\n    {\n      label: '&&',\n      insertText: '&&',\n      detail: 'And',\n      documentation: 'And (intersection) operator. Checks that both conditions found matches.',\n    },\n    {\n      label: '||',\n      insertText: '||',\n      detail: 'Or',\n      documentation: 'Or (union) operator. Checks that either condition found matches.',\n    },\n  ];\n\n  static readonly comparisonOps: MinimalCompletionItem[] = [\n    {\n      label: '=',\n      insertText: '=',\n      detail: 'Equality',\n    },\n    {\n      label: '!=',\n      insertText: '!=',\n      detail: 'Inequality',\n    },\n    {\n      label: '>',\n      insertText: '>',\n      detail: 'Greater than',\n    },\n    {\n      label: '>=',\n      insertText: '>=',\n      detail: 'Greater than or equal to',\n    },\n    {\n      label: '<',\n      insertText: '<',\n      detail: 'Less than',\n    },\n    {\n      label: '<=',\n      insertText: '<=',\n      detail: 'Less than or equal to',\n    },\n    {\n      label: '=~',\n      insertText: '=~',\n      detail: 'Regular expression',\n    },\n    {\n      label: '!~',\n      insertText: '!~',\n      detail: 'Negated regular expression',\n    },\n  ];\n  static readonly structuralOps: MinimalCompletionItem[] = [\n    {\n      label: '>>',\n      insertText: '>>',\n      detail: 'Descendant',\n      documentation:\n        'Descendant operator. Looks for spans matching {condB} that are descendants of a span matching {condA}',\n    },\n    {\n      label: '>',\n      insertText: '>',\n      detail: 'Child',\n      documentation:\n        'Child operator. Looks for spans matching {condB} that are direct child spans of a parent matching {condA}',\n    },\n    {\n      label: '~',\n      insertText: '~',\n      detail: 'Sibling',\n      documentation:\n        'Sibling operator. Checks that spans matching {condA} and {condB} are siblings of the same parent span.',\n    },\n  ];\n\n  static readonly spansetOps: MinimalCompletionItem[] = [\n    {\n      label: '|',\n      insertText: '|',\n      detail: 'Pipe',\n    },\n    ...CompletionProvider.logicalOps,\n    ...CompletionProvider.structuralOps,\n  ];\n\n  // Functions (aggregator, selector, and combining operators)\n  static readonly spansetAggregatorOps: MinimalCompletionItem[] = [\n    {\n      label: 'count',\n      insertText: 'count()$0',\n      detail: 'Number of spans',\n      documentation: 'Counts the number of spans in a spanset',\n    },\n    {\n      label: 'avg',\n      insertText: 'avg($0)',\n      detail: 'Average of attribute',\n      documentation: 'Computes the average of a given numeric attribute or intrinsic for a spanset.',\n    },\n    {\n      label: 'max',\n      insertText: 'max($0)',\n      detail: 'Max value of attribute',\n      documentation: 'Computes the maximum value of a given numeric attribute or intrinsic for a spanset.',\n    },\n    {\n      label: 'min',\n      insertText: 'min($0)',\n      detail: 'Min value of attribute',\n      documentation: 'Computes the minimum value of a given numeric attribute or intrinsic for a spanset.',\n    },\n    {\n      label: 'sum',\n      insertText: 'sum($0)',\n      detail: 'Sum value of attribute',\n      documentation: 'Computes the sum value of a given numeric attribute or intrinsic for a spanset.',\n    },\n  ];\n\n  static readonly functions: MinimalCompletionItem[] = [\n    ...this.spansetAggregatorOps,\n    {\n      label: 'by',\n      insertText: 'by($0)',\n      detail: 'Grouping of attributes',\n      documentation: 'Groups by arbitrary attributes.',\n    },\n    {\n      label: 'select',\n      insertText: 'select($0)',\n      detail: 'Selection of fields',\n      documentation: 'Selects arbitrary fields from spans.',\n    },\n  ];\n\n  // We set these directly and ae required for the provider to function.\n  monaco: Monaco | undefined;\n  editor: monacoTypes.editor.IStandaloneCodeEditor | undefined;\n\n  private cachedValues: { [key: string]: Array<SelectableValue<string>> } = {};\n\n  provideCompletionItems(\n    model: monacoTypes.editor.ITextModel,\n    position: monacoTypes.Position\n  ): monacoTypes.languages.ProviderResult<monacoTypes.languages.CompletionList> {\n    // Should not happen, this should not be called before it is initialized\n    if (!(this.monaco && this.editor)) {\n      throw new Error('provideCompletionItems called before CompletionProvider was initialized');\n    }\n\n    // if the model-id does not match, then this call is from a different editor-instance,\n    // not \"our instance\", so return nothing\n    if (this.editor.getModel()?.id !== model.id) {\n      return { suggestions: [] };\n    }\n\n    const { range, offset } = getRangeAndOffset(this.monaco, model, position);\n    const situation = getSituation(model.getValue(), offset);\n    const completionItems = situation != null ? this.getCompletions(situation) : Promise.resolve([]);\n\n    return completionItems.then((items) => {\n      // monaco by-default alphabetically orders the items.\n      // to stop it, we use a number-as-string sortkey,\n      // so that monaco keeps the order we use\n      const maxIndexDigits = items.length.toString().length;\n      const suggestions: monacoTypes.languages.CompletionItem[] = items.map((item, index) => {\n        const suggestion: monacoTypes.languages.CompletionItem = {\n          kind: getMonacoCompletionItemKind(item.type, this.monaco!),\n          label: item.label,\n          insertText: item.insertText,\n          insertTextRules: item.insertTextRules,\n          detail: item.detail,\n          documentation: item.documentation,\n          sortText: index.toString().padStart(maxIndexDigits, '0'), // to force the order we have\n          range,\n          command: {\n            id: this.registerInteractionCommandId || 'noOp',\n            title: 'Report Interaction',\n            arguments: [item.label, item.type],\n          },\n        };\n        fixSuggestion(suggestion, item.type, model, offset);\n        return suggestion;\n      });\n      return { suggestions };\n    });\n  }\n\n  /**\n   * Set the ID for the registerInteraction command, to be used to keep track of how many completions are used by the users\n   */\n  setRegisterInteractionCommandId(id: string | null) {\n    this.registerInteractionCommandId = id;\n  }\n\n  private async getTagValues(tagName: string, query: string): Promise<Array<SelectableValue<string>>> {\n    let tagValues: Array<SelectableValue<string>>;\n\n    if (this.cachedValues.hasOwnProperty(tagName)) {\n      tagValues = this.cachedValues[tagName];\n    } else {\n      tagValues = await this.languageProvider.getOptionsV2(tagName, query);\n      this.cachedValues[tagName] = tagValues;\n    }\n    return tagValues;\n  }\n\n  /**\n   * Get suggestion based on the situation we are in like whether we should suggest tag names or values.\n   * @param situation\n   * @private\n   */\n  private async getCompletions(situation: Situation): Promise<Completion[]> {\n    switch (situation.type) {\n      // This should only happen for cases that we do not support yet\n      case 'UNKNOWN': {\n        return [];\n      }\n      case 'EMPTY': {\n        return this.getScopesCompletions('{ ')\n          .concat(this.getIntrinsicsCompletions('{ '))\n          .concat(this.getTagsCompletions('{ .'));\n      }\n      case 'SPANSET_EMPTY':\n        return this.getScopesCompletions().concat(this.getIntrinsicsCompletions()).concat(this.getTagsCompletions('.'));\n      case 'SPANSET_ONLY_DOT': {\n        return this.getTagsCompletions();\n      }\n      case 'SPANSET_IN_THE_MIDDLE':\n        return [...CompletionProvider.comparisonOps, ...CompletionProvider.logicalOps].map((key) => ({\n          ...key,\n          type: 'OPERATOR',\n        }));\n      case 'SPANSET_EXPRESSION_OPERATORS_WITH_MISSING_CLOSED_BRACE':\n        return [...CompletionProvider.comparisonOps, ...CompletionProvider.logicalOps].map((key) => ({\n          ...key,\n          type: 'OPERATOR',\n        }));\n      case 'SPANSET_IN_NAME':\n        return this.getScopesCompletions().concat(this.getIntrinsicsCompletions()).concat(this.getTagsCompletions());\n      case 'SPANSET_IN_NAME_SCOPE':\n        return this.getTagsCompletions(undefined, situation.scope);\n      case 'SPANSET_EXPRESSION_OPERATORS':\n        return [\n          ...CompletionProvider.comparisonOps,\n          ...CompletionProvider.logicalOps,\n          ...CompletionProvider.arithmeticOps,\n        ].map((key) => ({\n          ...key,\n          type: 'OPERATOR',\n        }));\n      case 'SPANFIELD_COMBINING_OPERATORS':\n        return [\n          ...CompletionProvider.logicalOps,\n          ...CompletionProvider.arithmeticOps,\n          ...CompletionProvider.comparisonOps,\n        ].map((key) => ({\n          ...key,\n          type: 'OPERATOR',\n        }));\n      case 'SPANSET_COMBINING_OPERATORS':\n        return CompletionProvider.spansetOps.map((key) => ({\n          ...key,\n          type: 'OPERATOR',\n        }));\n      case 'SPANSET_PIPELINE_AFTER_OPERATOR':\n        const functions = CompletionProvider.functions.map((key) => ({\n          ...key,\n          insertTextRules: this.monaco?.languages.CompletionItemInsertTextRule?.InsertAsSnippet,\n          type: 'FUNCTION' as const,\n        }));\n        const tags = this.getScopesCompletions()\n          .concat(this.getIntrinsicsCompletions())\n          .concat(this.getTagsCompletions('.'));\n        return [...functions, ...tags];\n      case 'SPANSET_COMPARISON_OPERATORS':\n        return CompletionProvider.comparisonOps.map((key) => ({\n          ...key,\n          type: 'OPERATOR',\n        }));\n      case 'SPANSET_IN_VALUE':\n        let tagValues;\n        try {\n          tagValues = await this.getTagValues(situation.tagName, situation.query);\n        } catch (error) {\n          if (isFetchError(error)) {\n            dispatch(notifyApp(createErrorNotification(error.data.error, new Error(error.data.message))));\n          } else if (error instanceof Error) {\n            dispatch(notifyApp(createErrorNotification('Error', error)));\n          }\n        }\n\n        const items: Completion[] = [];\n\n        const getInsertionText = (val: SelectableValue<string>): string => {\n          if (situation.betweenQuotes) {\n            return val.label!;\n          }\n          return val.type === 'string' ? `\"${val.label}\"` : val.label!;\n        };\n\n        tagValues?.forEach((val) => {\n          if (val?.label) {\n            items.push({\n              label: val.label,\n              insertText: getInsertionText(val),\n              type: 'TAG_VALUE',\n            });\n          }\n        });\n        return items;\n      case 'SPANSET_AFTER_VALUE':\n        return CompletionProvider.logicalOps.map((key) => ({\n          label: key.label,\n          insertText: key.insertText + '}',\n          type: 'OPERATOR',\n        }));\n      case 'NEW_SPANSET':\n        return this.getScopesCompletions('{ ', '$0 }')\n          .concat(this.getIntrinsicsCompletions('{ ', '$0 }'))\n          .concat(this.getTagsCompletions('.'));\n      case 'ATTRIBUTE_FOR_FUNCTION':\n        return this.getScopesCompletions().concat(this.getIntrinsicsCompletions()).concat(this.getTagsCompletions('.'));\n      default:\n        throw new Error(`Unexpected situation ${situation}`);\n    }\n  }\n\n  private getTagsCompletions(prepend?: string, scope?: string): Completion[] {\n    const tags = this.languageProvider.getTraceqlAutocompleteTags(scope);\n    return tags\n      .sort((a, b) => a.localeCompare(b, undefined, { sensitivity: 'accent' }))\n      .map((key) => ({\n        label: key,\n        insertText: (prepend || '') + key,\n        type: 'TAG_NAME',\n      }));\n  }\n\n  private getIntrinsicsCompletions(prepend?: string, append?: string): Completion[] {\n    return intrinsics.map((key) => ({\n      label: key,\n      insertText: (prepend || '') + key + (append || ''),\n      type: 'KEYWORD',\n      insertTextRules: this.monaco?.languages.CompletionItemInsertTextRule?.InsertAsSnippet,\n    }));\n  }\n\n  private getScopesCompletions(prepend?: string, append?: string): Completion[] {\n    return scopes.map((key) => ({\n      label: key,\n      insertText: (prepend || '') + key + (append || ''),\n      type: 'SCOPE',\n      insertTextRules: this.monaco?.languages.CompletionItemInsertTextRule?.InsertAsSnippet,\n    }));\n  }\n}\n\n/**\n * Get item kind which is used for icon next to the suggestion.\n * @param type\n * @param monaco\n */\nfunction getMonacoCompletionItemKind(type: CompletionType, monaco: Monaco): monacoTypes.languages.CompletionItemKind {\n  switch (type) {\n    case 'TAG_NAME':\n      return monaco.languages.CompletionItemKind.Enum;\n    case 'KEYWORD':\n      return monaco.languages.CompletionItemKind.Keyword;\n    case 'OPERATOR':\n      return monaco.languages.CompletionItemKind.Operator;\n    case 'TAG_VALUE':\n      return monaco.languages.CompletionItemKind.EnumMember;\n    case 'SCOPE':\n      return monaco.languages.CompletionItemKind.Class;\n    case 'FUNCTION':\n      return monaco.languages.CompletionItemKind.Function;\n    default:\n      throw new Error(`Unexpected CompletionType: ${type}`);\n  }\n}\n\nexport type CompletionType = 'TAG_NAME' | 'TAG_VALUE' | 'KEYWORD' | 'OPERATOR' | 'SCOPE' | 'FUNCTION';\ntype Completion = {\n  type: CompletionType;\n  label: string;\n  insertText: string;\n  insertTextRules?: monacoTypes.languages.CompletionItemInsertTextRule; // we used it to position the cursor\n  documentation?: string | IMarkdownString;\n  detail?: string;\n};\n\nexport type Tag = {\n  name: string;\n  value: string;\n};\n\nfunction getRangeAndOffset(monaco: Monaco, model: monacoTypes.editor.ITextModel, position: monacoTypes.Position) {\n  const word = model.getWordAtPosition(position);\n  const range =\n    word != null\n      ? monaco.Range.lift({\n          startLineNumber: position.lineNumber,\n          endLineNumber: position.lineNumber,\n          startColumn: word.startColumn,\n          endColumn: word.endColumn,\n        })\n      : monaco.Range.fromPositions(position);\n\n  // documentation says `position` will be \"adjusted\" in `getOffsetAt` so we clone it here just for sure.\n  const positionClone = {\n    column: position.column,\n    lineNumber: position.lineNumber,\n  };\n\n  const offset = model.getOffsetAt(positionClone);\n  return { offset, range };\n}\n\n/**\n * Fix the suggestions range and insert text. For the range we have to adjust because monaco by default replaces just\n * the last word which stops at dot while traceQL tags contain dots themselves and we want to replace the whole tag\n * name when suggesting. The insert text needs to be adjusted for scope (leading dot) if scope is currently missing.\n * This may be doable also when creating the suggestions but for a particular situation this seems to be easier to do\n * here.\n */\nfunction fixSuggestion(\n  suggestion: monacoTypes.languages.CompletionItem,\n  itemType: CompletionType,\n  model: monacoTypes.editor.ITextModel,\n  offset: number\n) {\n  if (itemType === 'TAG_NAME') {\n    const match = model\n      .getValue()\n      .substring(0, offset)\n      .match(/(span\\.|resource\\.|\\.)?([\\w./-]*)$/);\n\n    if (match) {\n      const scope = match[1];\n      const tag = match[2];\n\n      if (tag) {\n        // Add the default scope if needed.\n        if (!scope && suggestion.insertText[0] !== '.') {\n          suggestion.insertText = '.' + suggestion.insertText;\n        }\n\n        // Adjust the range, so that we will replace the whole tag.\n        suggestion.range = {\n          ...suggestion.range,\n          startColumn: offset - tag.length + 1,\n        };\n      }\n    }\n  }\n}\n","import { SyntaxNode } from '@lezer/common';\n\nimport {\n  Aggregate,\n  And,\n  AttributeField,\n  ComparisonOp,\n  FieldExpression,\n  FieldOp,\n  IntrinsicField,\n  Or,\n  parser,\n  Pipe,\n  ScalarExpression,\n  ScalarFilter,\n  SpansetFilter,\n  SpansetPipelineExpression,\n} from '@grafana/lezer-traceql';\nimport { monacoTypes } from '@grafana/ui';\n\n/**\n * Given an error node, generate an error message to be displayed to the user.\n *\n * @param errorNode the error node, as returned by the TraceQL Lezer parser\n * @returns the error message\n */\nexport const computeErrorMessage = (errorNode: SyntaxNode) => {\n  switch (errorNode.parent?.type.id) {\n    case FieldExpression:\n      switch (errorNode.prevSibling?.type.id) {\n        case And:\n        case Or:\n          return 'Invalid value after logical operator.';\n        case FieldOp:\n          return 'Invalid value after comparison or aritmetic operator.';\n        default:\n          return 'Invalid operator after field expression.';\n      }\n    case SpansetFilter:\n      if (errorNode.prevSibling?.type.id === FieldExpression) {\n        return 'Invalid comparison operator after field expression.';\n      }\n      return 'Invalid expression for spanset.';\n    case SpansetPipelineExpression:\n      switch (errorNode.prevSibling?.type.id) {\n        case SpansetPipelineExpression:\n          return 'Invalid spanset combining operator after spanset expression.';\n        case Pipe:\n          return 'Invalid aggregation operator after pipepile operator.';\n        default:\n          return 'Invalid spanset expression after spanset combining operator.';\n      }\n    case IntrinsicField:\n    case Aggregate:\n      return 'Invalid expression for aggregator operator.';\n    case AttributeField:\n      return 'Invalid expression for spanset.';\n    case ScalarFilter:\n      switch (errorNode.prevSibling?.type.id) {\n        case ComparisonOp:\n          return 'Invalid value after comparison operator.';\n        case ScalarExpression:\n          if (errorNode.prevSibling?.firstChild?.type.id === Aggregate) {\n            return 'Invalid comparison operator after aggregator operator.';\n          }\n        default:\n          return 'Invalid value after comparison operator.';\n      }\n    default:\n      return 'Invalid query.';\n  }\n};\n\n/**\n * Parse the given query and find the error nodes, if any, in the resulting tree.\n *\n * @param query the TraceQL query of the user\n * @returns the error nodes\n */\nexport const getErrorNodes = (query: string): SyntaxNode[] => {\n  // Return immediately if the query is empty, to avoid raising exceptions in processing it\n  if (query.trim() === '') {\n    return [];\n  }\n\n  // Check whether this is a trace ID or traceQL query by checking if it only contains hex characters\n  const hexOnlyRegex = /^[0-9A-Fa-f]*$/;\n  if (query.trim().match(hexOnlyRegex)) {\n    return [];\n  }\n\n  const tree = parser.parse(query);\n\n  // Find all error nodes and compute the associated erro boundaries\n  const errorNodes: SyntaxNode[] = [];\n  tree.iterate({\n    enter: (nodeRef) => {\n      if (nodeRef.type.id === 0) {\n        errorNodes.push(nodeRef.node);\n      }\n    },\n  });\n\n  return errorNodes;\n};\n\n/**\n * Use red markers (squiggles) to highlight syntax errors in queries.\n *\n */\nexport const setErrorMarkers = (\n  monaco: typeof monacoTypes,\n  model: monacoTypes.editor.ITextModel,\n  errorNodes: SyntaxNode[]\n) => {\n  monaco.editor.setModelMarkers(\n    model,\n    'owner', // default value\n    errorNodes.map((errorNode) => {\n      let startLine = 0;\n      let endLine = 0;\n      let start = errorNode.from;\n      let end = errorNode.to;\n\n      while (start > 0) {\n        startLine++;\n        start -= model.getLineLength(startLine) + 1; // new lines don't count for getLineLength() but they still count as a character for the parser\n      }\n      while (end > 0) {\n        endLine++;\n        end -= model.getLineLength(endLine) + 1;\n      }\n\n      return {\n        message: computeErrorMessage(errorNode),\n        severity: monaco.MarkerSeverity.Error,\n\n        startLineNumber: startLine,\n        endLineNumber: endLine,\n\n        // `+ 2` because of the above computations\n        startColumn: start + model.getLineLength(startLine) + 2,\n        endColumn: end + model.getLineLength(endLine) + 2,\n      };\n    })\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useEffect, useRef } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { CodeEditor, Monaco, monacoTypes, useTheme2 } from '@grafana/ui';\n\nimport { createErrorNotification } from '../../../../core/copy/appNotification';\nimport { notifyApp } from '../../../../core/reducers/appNotification';\nimport { dispatch } from '../../../../store/store';\nimport { TempoDatasource } from '../datasource';\n\nimport { CompletionProvider, CompletionType } from './autocomplete';\nimport { getErrorNodes, setErrorMarkers } from './errorHighlighting';\nimport { languageDefinition } from './traceql';\n\ninterface Props {\n  placeholder: string;\n  value: string;\n  onChange: (val: string) => void;\n  onRunQuery: () => void;\n  datasource: TempoDatasource;\n  readOnly?: boolean;\n}\n\nexport function TraceQLEditor(props: Props) {\n  const { onChange, onRunQuery, placeholder } = props;\n  const setupAutocompleteFn = useAutocomplete(props.datasource);\n  const theme = useTheme2();\n  const styles = getStyles(theme, placeholder);\n  // work around the problem that `onEditorDidMount` is called once\n  // and wouldn't get new version of onRunQuery\n  const onRunQueryRef = useRef(onRunQuery);\n  onRunQueryRef.current = onRunQuery;\n\n  const errorTimeoutId = useRef<number>();\n\n  return (\n    <CodeEditor\n      value={props.value}\n      language={langId}\n      onBlur={onChange}\n      onChange={onChange}\n      containerStyles={styles.queryField}\n      readOnly={props.readOnly}\n      monacoOptions={{\n        folding: false,\n        fontSize: 14,\n        lineNumbers: 'off',\n        overviewRulerLanes: 0,\n        renderLineHighlight: 'none',\n        scrollbar: {\n          vertical: 'hidden',\n          verticalScrollbarSize: 8, // used as \"padding-right\"\n          horizontal: 'hidden',\n          horizontalScrollbarSize: 0,\n        },\n        scrollBeyondLastLine: false,\n        wordWrap: 'on',\n      }}\n      onBeforeEditorMount={ensureTraceQL}\n      onEditorDidMount={(editor, monaco) => {\n        if (!props.readOnly) {\n          setupAutocompleteFn(editor, monaco, setupRegisterInteractionCommand(editor));\n          setupActions(editor, monaco, () => onRunQueryRef.current());\n          setupPlaceholder(editor, monaco, styles);\n        }\n        setupAutoSize(editor);\n\n        // Parse query that might already exist (e.g., after a page refresh)\n        const model = editor.getModel();\n        if (model) {\n          const errorNodes = getErrorNodes(model.getValue());\n          setErrorMarkers(monaco, model, errorNodes);\n        }\n\n        // Register callback for query changes\n        editor.onDidChangeModelContent((changeEvent) => {\n          const model = editor.getModel();\n\n          if (!model) {\n            return;\n          }\n\n          // Remove previous callback if existing, to prevent squiggles from been shown while the user is still typing\n          window.clearTimeout(errorTimeoutId.current);\n\n          const errorNodes = getErrorNodes(model.getValue());\n          const cursorPosition = changeEvent.changes[0].rangeOffset;\n\n          // Immediately updates the squiggles, in case the user fixed an error,\n          // excluding the error around the cursor position\n          setErrorMarkers(\n            monaco,\n            model,\n            errorNodes.filter((errorNode) => !(errorNode.from <= cursorPosition && cursorPosition <= errorNode.to))\n          );\n\n          // Later on, show all errors\n          errorTimeoutId.current = window.setTimeout(() => {\n            setErrorMarkers(monaco, model, errorNodes);\n          }, 500);\n        });\n      }}\n    />\n  );\n}\n\nfunction setupPlaceholder(editor: monacoTypes.editor.IStandaloneCodeEditor, monaco: Monaco, styles: EditorStyles) {\n  const placeholderDecorators = [\n    {\n      range: new monaco.Range(1, 1, 1, 1),\n      options: {\n        className: styles.placeholder, // The placeholder text is in styles.placeholder\n        isWholeLine: true,\n      },\n    },\n  ];\n\n  let decorators: string[] = [];\n\n  const checkDecorators = (): void => {\n    const model = editor.getModel();\n\n    if (!model) {\n      return;\n    }\n\n    const newDecorators = model.getValueLength() === 0 ? placeholderDecorators : [];\n    decorators = model.deltaDecorations(decorators, newDecorators);\n  };\n\n  checkDecorators();\n  editor.onDidChangeModelContent(checkDecorators);\n}\n\nfunction setupActions(editor: monacoTypes.editor.IStandaloneCodeEditor, monaco: Monaco, onRunQuery: () => void) {\n  editor.addAction({\n    id: 'run-query',\n    label: 'Run Query',\n    keybindings: [monaco.KeyMod.Shift | monaco.KeyCode.Enter],\n    contextMenuGroupId: 'navigation',\n    contextMenuOrder: 1.5,\n    run: function () {\n      onRunQuery();\n    },\n  });\n}\n\nfunction setupRegisterInteractionCommand(editor: monacoTypes.editor.IStandaloneCodeEditor): string | null {\n  return editor.addCommand(0, function (_, label, type: CompletionType) {\n    const properties: Record<string, unknown> = { datasourceType: 'tempo', type };\n    // Filter out the label for TAG_VALUE completions to avoid potentially exposing sensitive data\n    if (type !== 'TAG_VALUE') {\n      properties.label = label;\n    }\n    reportInteraction('grafana_traces_traceql_completion', properties);\n  });\n}\n\nfunction setupAutoSize(editor: monacoTypes.editor.IStandaloneCodeEditor) {\n  const container = editor.getDomNode();\n  const updateHeight = () => {\n    if (container) {\n      const contentHeight = Math.min(1000, editor.getContentHeight());\n      const width = parseInt(container.style.width, 10);\n      container.style.width = `${width}px`;\n      container.style.height = `${contentHeight}px`;\n      editor.layout({ width, height: contentHeight });\n    }\n  };\n  editor.onDidContentSizeChange(updateHeight);\n  updateHeight();\n}\n\n/**\n * Hook that returns function that will set up monaco autocomplete for the label selector\n * @param datasource\n */\nfunction useAutocomplete(datasource: TempoDatasource) {\n  // We need the provider ref so we can pass it the label/values data later. This is because we run the call for the\n  // values here but there is additional setup needed for the provider later on. We could run the getSeries() in the\n  // returned function but that is run after the monaco is mounted so would delay the request a bit when it does not\n  // need to.\n  const providerRef = useRef<CompletionProvider>(\n    new CompletionProvider({ languageProvider: datasource.languageProvider })\n  );\n\n  useEffect(() => {\n    const fetchTags = async () => {\n      try {\n        await datasource.languageProvider.start();\n      } catch (error) {\n        if (error instanceof Error) {\n          dispatch(notifyApp(createErrorNotification('Error', error)));\n        }\n      }\n    };\n    fetchTags();\n  }, [datasource]);\n\n  const autocompleteDisposeFun = useRef<(() => void) | null>(null);\n  useEffect(() => {\n    // when we unmount, we unregister the autocomplete-function, if it was registered\n    return () => {\n      autocompleteDisposeFun.current?.();\n    };\n  }, []);\n\n  // This should be run in monaco onEditorDidMount\n  return (\n    editor: monacoTypes.editor.IStandaloneCodeEditor,\n    monaco: Monaco,\n    registerInteractionCommandId: string | null\n  ) => {\n    providerRef.current.editor = editor;\n    providerRef.current.monaco = monaco;\n    providerRef.current.setRegisterInteractionCommandId(registerInteractionCommandId);\n\n    const { dispose } = monaco.languages.registerCompletionItemProvider(langId, providerRef.current);\n    autocompleteDisposeFun.current = dispose;\n  };\n}\n\n// we must only run the setup code once\nlet traceqlSetupDone = false;\nconst langId = 'traceql';\n\nfunction ensureTraceQL(monaco: Monaco) {\n  if (!traceqlSetupDone) {\n    traceqlSetupDone = true;\n    const { aliases, extensions, mimetypes, def } = languageDefinition;\n    monaco.languages.register({ id: langId, aliases, extensions, mimetypes });\n    monaco.languages.setMonarchTokensProvider(langId, def.language);\n    monaco.languages.setLanguageConfiguration(langId, def.languageConfiguration);\n  }\n}\n\ninterface EditorStyles {\n  placeholder: string;\n  queryField: string;\n}\n\nconst getStyles = (theme: GrafanaTheme2, placeholder: string): EditorStyles => {\n  return {\n    queryField: css`\n      border-radius: ${theme.shape.radius.default};\n      border: 1px solid ${theme.components.input.borderColor};\n      flex: 1;\n    `,\n    placeholder: css`\n      ::after {\n        content: '${placeholder}';\n        font-family: ${theme.typography.fontFamilyMonospace};\n        opacity: 0.3;\n      }\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport { defaults } from 'lodash';\nimport React from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\nimport { InlineLabel, useStyles2 } from '@grafana/ui';\n\nimport { TempoDatasource } from '../datasource';\nimport { defaultQuery, MyDataSourceOptions, TempoQuery } from '../types';\n\nimport { TempoQueryBuilderOptions } from './TempoQueryBuilderOptions';\nimport { TraceQLEditor } from './TraceQLEditor';\n\ntype Props = QueryEditorProps<TempoDatasource, TempoQuery, MyDataSourceOptions>;\n\nexport function QueryEditor(props: Props) {\n  const styles = useStyles2(getStyles);\n  const query = defaults(props.query, defaultQuery);\n\n  const onEditorChange = (value: string) => {\n    props.onChange({ ...query, query: value });\n  };\n\n  return (\n    <>\n      <InlineLabel>\n        Build complex queries using TraceQL to select a list of traces.{' '}\n        <a rel=\"noreferrer\" target=\"_blank\" href=\"https://grafana.com/docs/tempo/latest/traceql/\">\n          Documentation\n        </a>\n      </InlineLabel>\n      <TraceQLEditor\n        placeholder=\"Enter a TraceQL query or trace ID (run with Shift+Enter)\"\n        value={query.query || ''}\n        onChange={onEditorChange}\n        datasource={props.datasource}\n        onRunQuery={props.onRunQuery}\n      />\n      <div className={styles.optionsContainer}>\n        <TempoQueryBuilderOptions query={query} onChange={props.onChange} />\n      </div>\n    </>\n  );\n}\n\nconst getStyles = () => ({\n  optionsContainer: css`\n    margin-top: 10px;\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { config, reportInteraction } from '@grafana/runtime';\nimport {\n  Button,\n  FileDropzone,\n  HorizontalGroup,\n  InlineField,\n  InlineFieldRow,\n  Modal,\n  RadioButtonGroup,\n  Themeable2,\n  withTheme2,\n} from '@grafana/ui';\n\nimport { LokiQuery } from '../loki/types';\n\nimport { LokiSearch } from './LokiSearch';\nimport NativeSearch from './NativeSearch/NativeSearch';\nimport TraceQLSearch from './SearchTraceQLEditor/TraceQLSearch';\nimport { ServiceGraphSection } from './ServiceGraphSection';\nimport { TempoQueryType } from './dataquery.gen';\nimport { TempoDatasource } from './datasource';\nimport { QueryEditor } from './traceql/QueryEditor';\nimport { TempoQuery } from './types';\n\ninterface Props extends QueryEditorProps<TempoDatasource, TempoQuery>, Themeable2 {}\ninterface State {\n  uploadModalOpen: boolean;\n}\n\n// This needs to default to traceql for data sources like Splunk, where clicking on a\n// data link should open the traceql tab and run a search based on the configured query.\nconst DEFAULT_QUERY_TYPE: TempoQueryType = 'traceql';\n\nclass TempoQueryFieldComponent extends React.PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      uploadModalOpen: false,\n    };\n  }\n\n  // Set the default query type when the component mounts.\n  // Also do this if queryType is 'clear' (which is the case when the user changes the query type)\n  // otherwise if the user changes the query type and refreshes the page, no query type will be selected\n  // which is inconsistent with how the UI was originally when they selected the Tempo data source.\n  async componentDidMount() {\n    if (!this.props.query.queryType || this.props.query.queryType === 'clear') {\n      this.props.onChange({\n        ...this.props.query,\n        queryType: DEFAULT_QUERY_TYPE,\n      });\n    }\n  }\n\n  onChangeLinkedQuery = (value: LokiQuery) => {\n    const { query, onChange } = this.props;\n    onChange({\n      ...query,\n      linkedQuery: { ...value, refId: 'linked' },\n    });\n  };\n\n  onRunLinkedQuery = () => {\n    this.props.onRunQuery();\n  };\n\n  onClearResults = () => {\n    // Run clear query to clear results\n    const { onChange, query, onRunQuery } = this.props;\n    onChange({\n      ...query,\n      queryType: 'clear',\n    });\n    onRunQuery();\n  };\n\n  render() {\n    const { query, onChange, datasource, app } = this.props;\n\n    const logsDatasourceUid = datasource.getLokiSearchDS();\n\n    const graphDatasourceUid = datasource.serviceMap?.datasourceUid;\n\n    let queryTypeOptions: Array<SelectableValue<TempoQueryType>> = [\n      { value: 'traceqlSearch', label: 'Search' },\n      { value: 'traceql', label: 'TraceQL' },\n      { value: 'serviceMap', label: 'Service Graph' },\n    ];\n\n    if (logsDatasourceUid) {\n      if (datasource?.search?.hide) {\n        // Place at beginning as Search if no native search\n        queryTypeOptions.unshift({ value: 'search', label: 'Search' });\n      } else {\n        // Place at end as Loki Search if native search is enabled\n        queryTypeOptions.push({ value: 'search', label: 'Loki Search' });\n      }\n    }\n\n    // Show the deprecated search option if any of the deprecated search fields are set\n    if (\n      query.spanName ||\n      query.serviceName ||\n      query.search ||\n      query.maxDuration ||\n      query.minDuration ||\n      query.queryType === 'nativeSearch'\n    ) {\n      queryTypeOptions.unshift({ value: 'nativeSearch', label: '[Deprecated] Search' });\n    }\n\n    return (\n      <>\n        <Modal\n          title={'Upload trace'}\n          isOpen={this.state.uploadModalOpen}\n          onDismiss={() => this.setState({ uploadModalOpen: false })}\n        >\n          <div className={css({ padding: this.props.theme.spacing(2) })}>\n            <FileDropzone\n              options={{ multiple: false }}\n              onLoad={(result) => {\n                this.props.datasource.uploadedJson = result;\n                onChange({\n                  ...query,\n                  queryType: 'upload',\n                });\n                this.setState({ uploadModalOpen: false });\n                this.props.onRunQuery();\n              }}\n            />\n          </div>\n        </Modal>\n        <InlineFieldRow>\n          <InlineField label=\"Query type\" grow={true}>\n            <HorizontalGroup spacing={'sm'} align={'center'} justify={'space-between'}>\n              <RadioButtonGroup<TempoQueryType>\n                options={queryTypeOptions}\n                value={query.queryType}\n                onChange={(v) => {\n                  reportInteraction('grafana_traces_query_type_changed', {\n                    datasourceType: 'tempo',\n                    app: app ?? '',\n                    grafana_version: config.buildInfo.version,\n                    newQueryType: v,\n                    previousQueryType: query.queryType ?? '',\n                  });\n\n                  this.onClearResults();\n\n                  onChange({\n                    ...query,\n                    queryType: v,\n                  });\n                }}\n                size=\"md\"\n              />\n              <Button\n                variant=\"secondary\"\n                size=\"sm\"\n                onClick={() => {\n                  this.setState({ uploadModalOpen: true });\n                }}\n              >\n                Import trace\n              </Button>\n            </HorizontalGroup>\n          </InlineField>\n        </InlineFieldRow>\n        {query.queryType === 'search' && (\n          <LokiSearch\n            logsDatasourceUid={logsDatasourceUid}\n            query={query}\n            onRunQuery={this.onRunLinkedQuery}\n            onChange={this.onChangeLinkedQuery}\n          />\n        )}\n        {query.queryType === 'nativeSearch' && (\n          <NativeSearch\n            datasource={this.props.datasource}\n            query={query}\n            onChange={onChange}\n            onBlur={this.props.onBlur}\n            onRunQuery={this.props.onRunQuery}\n          />\n        )}\n        {query.queryType === 'traceqlSearch' && (\n          <TraceQLSearch\n            datasource={this.props.datasource}\n            query={query}\n            onChange={onChange}\n            onBlur={this.props.onBlur}\n          />\n        )}\n        {query.queryType === 'serviceMap' && (\n          <ServiceGraphSection graphDatasourceUid={graphDatasourceUid} query={query} onChange={onChange} />\n        )}\n        {query.queryType === 'traceql' && (\n          <QueryEditor\n            datasource={this.props.datasource}\n            query={query}\n            onRunQuery={this.props.onRunQuery}\n            onChange={onChange}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nexport const TempoQueryField = withTheme2(TempoQueryFieldComponent);\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { DataSourcePluginOptionsEditorProps, GrafanaTheme2, updateDatasourcePluginJsonDataOption } from '@grafana/data';\nimport { InlineField, InlineSwitch, useStyles2 } from '@grafana/ui';\nimport { IntervalInput } from 'app/core/components/IntervalInput/IntervalInput';\nimport { invalidTimeShiftError } from 'app/core/components/TraceToLogs/TraceToLogsSettings';\n\nimport { TempoJsonData } from '../types';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TempoJsonData> {}\n\nexport function QuerySettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles2(getStyles);\n\n  const getLabel = (type: 'start' | 'end') => {\n    return `Time shift for ${type} of search`;\n  };\n\n  const getTooltip = (type: 'start' | 'end') => {\n    return `Shifts the ${type} of the time range when searching by TraceID. Searching can return traces that do not fully fall into the search time range, so we recommend using higher time shifts for longer traces. Default: 30m (Time units can be used here, for example: 5s, 1m, 3h`;\n  };\n\n  return (\n    <div className={styles.container}>\n      <InlineField\n        label=\"Use time range in query\"\n        tooltip=\"The time range can be used when there are performance issues or timeouts since it will narrow down the search to the defined range. Default: disabled\"\n        labelWidth={26}\n      >\n        <InlineSwitch\n          id=\"enable-time-shift\"\n          value={options.jsonData.traceQuery?.timeShiftEnabled || false}\n          onChange={(event) => {\n            updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'traceQuery', {\n              ...options.jsonData.traceQuery,\n              timeShiftEnabled: event.currentTarget.checked,\n            });\n          }}\n        />\n      </InlineField>\n\n      <IntervalInput\n        label={getLabel('start')}\n        tooltip={getTooltip('start')}\n        value={options.jsonData.traceQuery?.spanStartTimeShift || ''}\n        disabled={!options.jsonData.traceQuery?.timeShiftEnabled}\n        onChange={(val) => {\n          updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'traceQuery', {\n            ...options.jsonData.traceQuery,\n            spanStartTimeShift: val,\n          });\n        }}\n        isInvalidError={invalidTimeShiftError}\n      />\n\n      <IntervalInput\n        label={getLabel('end')}\n        tooltip={getTooltip('end')}\n        value={options.jsonData.traceQuery?.spanEndTimeShift || ''}\n        disabled={!options.jsonData.traceQuery?.timeShiftEnabled}\n        onChange={(val) => {\n          updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'traceQuery', {\n            ...options.jsonData.traceQuery,\n            spanEndTimeShift: val,\n          });\n        }}\n        isInvalidError={invalidTimeShiftError}\n      />\n    </div>\n  );\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing(2)};\n    color: ${theme.colors.text.secondary};\n  `,\n  container: css`\n    width: 100%;\n  `,\n  row: css`\n    align-items: baseline;\n  `,\n});\n","import React from 'react';\n\nimport {\n  DataSourceInstanceSettings,\n  DataSourcePluginOptionsEditorProps,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { Button, InlineField, InlineFieldRow, useStyles2 } from '@grafana/ui';\nimport { DataSourcePicker } from 'app/features/datasources/components/picker/DataSourcePicker';\n\nimport { TempoJsonData } from '../types';\n\nimport { getStyles } from './QuerySettings';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TempoJsonData> {}\n\nexport function LokiSearchSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles2(getStyles);\n\n  // Default to the trace to logs datasource if configured and loki search was enabled\n  // but only if jsonData.lokiSearch hasn't been set\n  const legacyDatasource =\n    options.jsonData.tracesToLogs?.lokiSearch !== false ? options.jsonData.tracesToLogs?.datasourceUid : undefined;\n  if (legacyDatasource && options.jsonData.lokiSearch === undefined) {\n    updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'lokiSearch', {\n      datasourceUid: legacyDatasource,\n    });\n  }\n\n  return (\n    <div className={styles.container}>\n      <InlineFieldRow className={styles.row}>\n        <InlineField tooltip=\"The Loki data source with the service graph data\" label=\"Data source\" labelWidth={26}>\n          <DataSourcePicker\n            inputId=\"loki-search-data-source-picker\"\n            pluginId=\"loki\"\n            current={options.jsonData.lokiSearch?.datasourceUid}\n            noDefault={true}\n            width={40}\n            onChange={(ds: DataSourceInstanceSettings) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'lokiSearch', {\n                datasourceUid: ds.uid,\n              })\n            }\n          />\n        </InlineField>\n        {options.jsonData.lokiSearch?.datasourceUid ? (\n          <Button\n            type={'button'}\n            variant={'secondary'}\n            size={'sm'}\n            fill={'text'}\n            onClick={() => {\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'lokiSearch', {\n                datasourceUid: undefined,\n              });\n            }}\n          >\n            Clear\n          </Button>\n        ) : null}\n      </InlineFieldRow>\n    </div>\n  );\n}\n","import React from 'react';\n\nimport {\n  DataSourceInstanceSettings,\n  DataSourcePluginOptionsEditorProps,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { Button, InlineField, InlineFieldRow, useStyles2 } from '@grafana/ui';\nimport { DataSourcePicker } from 'app/features/datasources/components/picker/DataSourcePicker';\n\nimport { TempoJsonData } from '../types';\n\nimport { getStyles } from './QuerySettings';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TempoJsonData> {}\n\nexport function ServiceGraphSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <InlineFieldRow className={styles.row}>\n        <InlineField\n          tooltip=\"The Prometheus data source with the service graph data\"\n          label=\"Data source\"\n          labelWidth={26}\n        >\n          <DataSourcePicker\n            inputId=\"service-graph-data-source-picker\"\n            pluginId=\"prometheus\"\n            current={options.jsonData.serviceMap?.datasourceUid}\n            noDefault={true}\n            width={40}\n            onChange={(ds: DataSourceInstanceSettings) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'serviceMap', {\n                datasourceUid: ds.uid,\n              })\n            }\n          />\n        </InlineField>\n        {options.jsonData.serviceMap?.datasourceUid ? (\n          <Button\n            type={'button'}\n            variant={'secondary'}\n            size={'sm'}\n            fill={'text'}\n            onClick={() => {\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'serviceMap', {\n                datasourceUid: undefined,\n              });\n            }}\n          >\n            Clear\n          </Button>\n        ) : null}\n      </InlineFieldRow>\n    </div>\n  );\n}\n","import React, { useCallback, useEffect } from 'react';\nimport useAsync from 'react-use/lib/useAsync';\n\nimport { DataSourcePluginOptionsEditorProps, updateDatasourcePluginJsonDataOption } from '@grafana/data';\nimport { Alert } from '@grafana/ui';\n\nimport TagsInput from '../SearchTraceQLEditor/TagsInput';\nimport { replaceAt } from '../SearchTraceQLEditor/utils';\nimport { TraceqlFilter, TraceqlSearchScope } from '../dataquery.gen';\nimport { TempoDatasource } from '../datasource';\nimport { TempoJsonData } from '../types';\nimport { getErrorMessage } from '../utils';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TempoJsonData> {\n  datasource?: TempoDatasource;\n}\n\nexport function TraceQLSearchTags({ options, onOptionsChange, datasource }: Props) {\n  const fetchTags = async () => {\n    if (!datasource) {\n      throw new Error('Unable to retrieve datasource');\n    }\n\n    try {\n      await datasource.languageProvider.start();\n    } catch (err) {\n      // @ts-ignore\n      throw new Error(getErrorMessage(err.data.message, 'Unable to query Tempo'));\n    }\n  };\n\n  const { error, loading } = useAsync(fetchTags, [datasource, options]);\n\n  const updateFilter = useCallback(\n    (s: TraceqlFilter) => {\n      let copy = options.jsonData.search?.filters;\n      copy ||= [];\n      const indexOfFilter = copy.findIndex((f) => f.id === s.id);\n      if (indexOfFilter >= 0) {\n        // update in place if the filter already exists, for consistency and to avoid UI bugs\n        copy = replaceAt(copy, indexOfFilter, s);\n      } else {\n        copy.push(s);\n      }\n      updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'search', {\n        ...options.jsonData.search,\n        filters: copy,\n      });\n    },\n    [onOptionsChange, options]\n  );\n\n  const deleteFilter = (s: TraceqlFilter) => {\n    updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'search', {\n      ...options.jsonData.search,\n      filters: options.jsonData.search?.filters?.filter((f) => f.id !== s.id),\n    });\n  };\n\n  useEffect(() => {\n    if (!options.jsonData.search?.filters) {\n      updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'search', {\n        ...options.jsonData.search,\n        filters: [\n          {\n            id: 'service-name',\n            tag: 'service.name',\n            operator: '=',\n            scope: TraceqlSearchScope.Resource,\n          },\n          { id: 'span-name', tag: 'name', operator: '=', scope: TraceqlSearchScope.Span },\n        ],\n      });\n    }\n  }, [onOptionsChange, options]);\n\n  // filter out tags that already exist in TraceQLSearch editor\n  const staticTags = ['duration'];\n\n  const missingTag = options.jsonData.search?.filters?.find((f) => !f.tag);\n\n  return (\n    <>\n      {datasource ? (\n        <TagsInput\n          updateFilter={updateFilter}\n          deleteFilter={deleteFilter}\n          filters={options.jsonData.search?.filters || []}\n          datasource={datasource}\n          setError={() => {}}\n          staticTags={staticTags}\n          isTagsLoading={loading}\n          hideValues={true}\n          query={'{}'}\n        />\n      ) : (\n        <div>Invalid data source, please create a valid data source and try again</div>\n      )}\n      {error && (\n        <Alert title={'Unable to fetch TraceQL tags'} severity={'error'} topSpacing={1}>\n          {error.message}\n        </Alert>\n      )}\n      {missingTag && (\n        <Alert title={'Please ensure each filter has a selected tag'} severity={'warning'} topSpacing={1}></Alert>\n      )}\n    </>\n  );\n}\n","import React from 'react';\nimport useAsync from 'react-use/lib/useAsync';\n\nimport { DataSourcePluginOptionsEditorProps, updateDatasourcePluginJsonDataOption } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { InlineField, InlineFieldRow, InlineSwitch, useStyles2 } from '@grafana/ui';\n\nimport { TempoDatasource } from '../datasource';\nimport { TempoJsonData } from '../types';\n\nimport { getStyles } from './QuerySettings';\nimport { TraceQLSearchTags } from './TraceQLSearchTags';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TempoJsonData> {}\n\nexport function TraceQLSearchSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles2(getStyles);\n  const dataSourceSrv = getDataSourceSrv();\n  const fetchDatasource = async () => {\n    return (await dataSourceSrv.get({ type: options.type, uid: options.uid })) as TempoDatasource;\n  };\n\n  const { value: datasource } = useAsync(fetchDatasource, [dataSourceSrv, options]);\n\n  return (\n    <div className={styles.container}>\n      <InlineFieldRow className={styles.row}>\n        <InlineField tooltip=\"Removes the search tab from the query editor\" label=\"Hide search\" labelWidth={26}>\n          <InlineSwitch\n            id=\"hideSearch\"\n            value={options.jsonData.search?.hide}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'search', {\n                ...options.jsonData.search,\n                hide: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow className={styles.row}>\n        <InlineField tooltip=\"Configures which fields are available in the UI\" label=\"Static filters\" labelWidth={26}>\n          <TraceQLSearchTags datasource={datasource} options={options} onOptionsChange={onOptionsChange} />\n        </InlineField>\n      </InlineFieldRow>\n    </div>\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { DataSourcePluginOptionsEditorProps, GrafanaTheme2 } from '@grafana/data';\nimport {\n  AdvancedHttpSettings,\n  Auth,\n  ConfigSection,\n  ConfigSubSection,\n  ConnectionSettings,\n  convertLegacyAuthProps,\n  DataSourceDescription,\n} from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { SecureSocksProxySettings, useStyles2 } from '@grafana/ui';\nimport { ConfigDescriptionLink } from 'app/core/components/ConfigDescriptionLink';\nimport { Divider } from 'app/core/components/Divider';\nimport { NodeGraphSection } from 'app/core/components/NodeGraphSettings';\nimport { TraceToLogsSection } from 'app/core/components/TraceToLogs/TraceToLogsSettings';\nimport { TraceToMetricsSection } from 'app/core/components/TraceToMetrics/TraceToMetricsSettings';\nimport { SpanBarSection } from 'app/features/explore/TraceView/components/settings/SpanBarSettings';\n\nimport { LokiSearchSettings } from './LokiSearchSettings';\nimport { QuerySettings } from './QuerySettings';\nimport { ServiceGraphSettings } from './ServiceGraphSettings';\nimport { TraceQLSearchSettings } from './TraceQLSearchSettings';\n\nexport type Props = DataSourcePluginOptionsEditorProps;\n\nexport const ConfigEditor = ({ options, onOptionsChange }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <DataSourceDescription\n        dataSourceName=\"Tempo\"\n        docsLink=\"https://grafana.com/docs/grafana/latest/datasources/tempo\"\n        hasRequiredFields={false}\n      />\n\n      <Divider />\n      <ConnectionSettings config={options} onChange={onOptionsChange} urlPlaceholder=\"http://localhost:3200\" />\n\n      <Divider />\n      <Auth\n        {...convertLegacyAuthProps({\n          config: options,\n          onChange: onOptionsChange,\n        })}\n      />\n\n      <Divider />\n      <TraceToLogsSection options={options} onOptionsChange={onOptionsChange} />\n\n      <Divider />\n      {config.featureToggles.traceToMetrics ? (\n        <>\n          <TraceToMetricsSection options={options} onOptionsChange={onOptionsChange} />\n          <Divider />\n        </>\n      ) : null}\n\n      <ConfigSection\n        title=\"Additional settings\"\n        description=\"Additional settings are optional settings that can be configured for more control over your data source.\"\n        isCollapsible={true}\n        isInitiallyOpen={false}\n      >\n        <AdvancedHttpSettings config={options} onChange={onOptionsChange} />\n\n        {config.secureSocksDSProxyEnabled && (\n          <>\n            <Divider hideLine />\n            <SecureSocksProxySettings options={options} onOptionsChange={onOptionsChange} />\n          </>\n        )}\n\n        <Divider hideLine />\n        <ConfigSubSection\n          title=\"Service graph\"\n          description={\n            <ConfigDescriptionLink\n              description=\"Select a Prometheus data source that contains the service graph data.\"\n              suffix=\"tempo/#service-graph\"\n              feature=\"the service graph\"\n            />\n          }\n        >\n          <ServiceGraphSettings options={options} onOptionsChange={onOptionsChange} />\n        </ConfigSubSection>\n\n        <Divider hideLine />\n        <NodeGraphSection options={options} onOptionsChange={onOptionsChange} />\n\n        <Divider hideLine />\n        <ConfigSubSection\n          title=\"Tempo search\"\n          description={\n            <ConfigDescriptionLink\n              description=\"Modify how traces are searched.\"\n              suffix=\"tempo/#tempo-search\"\n              feature=\"Tempo search\"\n            />\n          }\n        >\n          <TraceQLSearchSettings options={options} onOptionsChange={onOptionsChange} />\n        </ConfigSubSection>\n\n        <Divider hideLine />\n        <ConfigSubSection\n          title=\"Loki search\"\n          description={\n            <ConfigDescriptionLink\n              description=\"Select a Loki data source to search for traces. Derived fields must be configured in the Loki data source.\"\n              suffix=\"tempo/#loki-search\"\n              feature=\"Loki search\"\n            />\n          }\n        >\n          <LokiSearchSettings options={options} onOptionsChange={onOptionsChange} />\n        </ConfigSubSection>\n\n        <Divider hideLine />\n        <ConfigSubSection\n          title=\"TraceID query\"\n          description={\n            <ConfigDescriptionLink\n              description=\"Modify how TraceID queries are run.\"\n              suffix=\"tempo/#traceid-query\"\n              feature=\"the TraceID query\"\n            />\n          }\n        >\n          <QuerySettings options={options} onOptionsChange={onOptionsChange} />\n        </ConfigSubSection>\n\n        <Divider hideLine />\n        <SpanBarSection options={options} onOptionsChange={onOptionsChange} />\n      </ConfigSection>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    label: container;\n    margin-bottom: ${theme.spacing(2)};\n    max-width: 900px;\n  `,\n});\n","import { DashboardLoadedEvent } from '@grafana/data';\nimport { getTemplateSrv, reportInteraction } from '@grafana/runtime';\n\nimport pluginJson from './plugin.json';\nimport { TempoQuery } from './types';\n\ntype TempoOnDashboardLoadedTrackingEvent = {\n  grafana_version?: string;\n  dashboard_id?: string;\n  org_id?: number;\n  native_search_query_count: number;\n  search_query_count: number;\n  service_map_query_count: number;\n  traceql_query_count: number;\n  upload_query_count: number;\n  native_search_queries_with_template_variables_count: number;\n  search_queries_with_template_variables_count: number;\n  service_map_queries_with_template_variables_count: number;\n  traceql_queries_with_template_variables_count: number;\n};\n\nexport const onDashboardLoadedHandler = ({\n  payload: { dashboardId, orgId, grafanaVersion, queries },\n}: DashboardLoadedEvent<TempoQuery>) => {\n  try {\n    const tempoQueries = queries[pluginJson.id];\n\n    if (!tempoQueries?.length) {\n      return;\n    }\n\n    let stats: TempoOnDashboardLoadedTrackingEvent = {\n      grafana_version: grafanaVersion,\n      dashboard_id: dashboardId,\n      org_id: orgId,\n      native_search_query_count: 0,\n      search_query_count: 0,\n      service_map_query_count: 0,\n      traceql_query_count: 0,\n      upload_query_count: 0,\n      native_search_queries_with_template_variables_count: 0,\n      search_queries_with_template_variables_count: 0,\n      service_map_queries_with_template_variables_count: 0,\n      traceql_queries_with_template_variables_count: 0,\n    };\n\n    for (const query of tempoQueries) {\n      if (query.hide) {\n        continue;\n      }\n\n      if (query.queryType === 'nativeSearch') {\n        stats.native_search_query_count++;\n        if (\n          (query.serviceName && hasTemplateVariables(query.serviceName)) ||\n          (query.spanName && hasTemplateVariables(query.spanName)) ||\n          (query.search && hasTemplateVariables(query.search)) ||\n          (query.minDuration && hasTemplateVariables(query.minDuration)) ||\n          (query.maxDuration && hasTemplateVariables(query.maxDuration))\n        ) {\n          stats.native_search_queries_with_template_variables_count++;\n        }\n      } else if (query.queryType === 'search') {\n        stats.search_query_count++;\n        if (query.linkedQuery && query.linkedQuery.expr && hasTemplateVariables(query.linkedQuery.expr)) {\n          stats.search_queries_with_template_variables_count++;\n        }\n      } else if (query.queryType === 'serviceMap') {\n        stats.service_map_query_count++;\n        if (query.serviceMapQuery && hasTemplateVariables(query.serviceMapQuery)) {\n          stats.service_map_queries_with_template_variables_count++;\n        }\n      } else if (query.queryType === 'traceql') {\n        stats.traceql_query_count++;\n        if (hasTemplateVariables(query.query)) {\n          stats.traceql_queries_with_template_variables_count++;\n        }\n      } else if (query.queryType === 'upload') {\n        stats.upload_query_count++;\n      }\n    }\n\n    reportInteraction('grafana_tempo_dashboard_loaded', stats);\n  } catch (error) {\n    console.error('error in tempo tracking handler', error);\n  }\n};\n\nconst hasTemplateVariables = (val?: string): boolean => {\n  return getTemplateSrv().containsTemplate(val);\n};\n","import { DataSourcePlugin, DashboardLoadedEvent } from '@grafana/data';\nimport { getAppEvents } from '@grafana/runtime';\n\nimport CheatSheet from './CheatSheet';\nimport { TempoQueryField } from './QueryField';\nimport { ConfigEditor } from './configuration/ConfigEditor';\nimport { TempoDatasource } from './datasource';\nimport { onDashboardLoadedHandler } from './tracking';\nimport { TempoQuery } from './types';\n\nexport const plugin = new DataSourcePlugin(TempoDatasource)\n  .setQueryEditor(TempoQueryField)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditorHelp(CheatSheet);\n\n// Subscribe to on dashboard loaded event so that we can track plugin adoption\ngetAppEvents().subscribe<DashboardLoadedEvent<TempoQuery>>(DashboardLoadedEvent, onDashboardLoadedHandler);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar react_1 = require(\"react\");\nvar useAsyncFn_1 = tslib_1.__importDefault(require(\"./useAsyncFn\"));\nfunction useAsync(fn, deps) {\n    if (deps === void 0) { deps = []; }\n    var _a = useAsyncFn_1.default(fn, deps, {\n        loading: true,\n    }), state = _a[0], callback = _a[1];\n    react_1.useEffect(function () {\n        callback();\n    }, [callback]);\n    return state;\n}\nexports.default = useAsync;\n"],"names":["__defProp","__defProps","__getOwnPropDescs","__getOwnPropSymbols","__hasOwnProp","__propIsEnum","__defNormalProp","obj","key","value","__spreadValues","a","b","prop","__spreadProps","AdvancedHttpSettings","config","onChange","className","onCookiesChange","cookies","onTimeoutChange","event","styles","Divider","hideLine","getStyles","theme","NodeGraphSettings","options","onOptionsChange","NodeGraphSection","TraceToMetricsSettings","ds","val","v","query","i","e","newQueries","TraceToMetricsSection","Field","MonacoQueryFieldLazy","props","MonacoQueryFieldWrapper","lastRunValueRef","onRunQuery","rest","handleRunQuery","handleBlur","LokiQueryField","override","nextQuery","prevProps","range","languageProvider","ExtraFieldElement","datasource","history","placeholder","roundMsToMin","milliseconds","roundSecToMin","seconds","shouldRefreshLabels","prevRange","sameMinuteFrom","sameMinuteTo","RE2_METACHARACTERS","escapeLokiRegexp","escapeLabelValueInExactSelector","labelValue","unescapeLabelValue","escapeLabelValueInRegexSelector","escapeLabelValueInSelector","selector","isRegexSelector","isBytesString","string","BYTES_KEYWORDS","regex","QueryOptionGroup","title","children","collapsedInfo","queryStats","isOpen","toggleOpen","x","generateQueryStats","convertUnits","text","suffix","CheatSheet","getErrorMessage","message","prefix","err","getDS","uid","dsSrv","error","LokiSearch","logsDatasourceUid","dsState","useAsync","InlineLabel","languageConfiguration","operators","stringOperators","numberOperators","intrinsics","scopes","functions","language","languageDefinition","traceqlGrammar","generateQueryFromFilters","filters","f","scopeHelper","valueHelper","filterScopedTag","filterTitle","getFilteredTags","tags","staticTags","t","getUnscopedTags","scope","getAllTags","getTagsByScope","s","replaceAt","array","index","ret","operatorSelectableValue","op","result","TempoVariableQueryType","variableOptions","refId","TempoVariableQueryEditor","label","setLabel","type","setType","labelOptions","setLabelOptions","labelNames","onQueryTypeChange","newType","onLabelChange","newLabel","newLabelValue","InlineFieldRow","InlineField","Select","TempoLanguageProvider","initialValues","url","params","tag","v1Resp","v2Resp","encodedTag","response","createTableFrameFromMetricsSummaryQuery","data","targetQuery","instanceSettings","frame","emptyResponse","dynamicMetrics","res","configQuery","getConfigQuery","series","getConfig","getPercentileRow","metricsData","transformToMetricsData","trace","field","errorPercentage","getNumberForMetric","getMetricValue","queryParts","isNumber","isIntrinsic","surround","closingBracketIndex","queryAfterClosingBracket","commonConfig","NO_VALUE","getSpanStatusCode","getSpanKind","statusCode","kind","name","metric","number","MutableDataFrame","getLiveStreamKey","doTempoChannelStream","frames","state","defer","mergeMap","requestTime","DEFAULT_SPSS","map","evt","elapsedTime","traces","metrics","frameState","metricsDataFrame","progressThresholds","TempoVariableSupport","request","from","DEFAULT_LIMIT","FeatureName","featuresToTempoVersion","defaultTempoVersion","TempoDatasource","DataSourceWithBackend","templateSrv","lastValueFrom","catchError","of","target","groupBy","summary","gb","legacyLogsDatasourceUid","labelName","tagV2","scopeAndTag","option","featureName","actualVersion","subQueries","filteredTargets","targets","linkedDatasource","linkedRequest","traceLinkMatcher","throwError","timeRange","searchQuery","queryValue","hexOnlyRegex","traceqlSearchTargets","queryValueFromFilters","jsonData","isTraceData","isServiceGraphData","df","dsId","tempoDsUid","serviceMapQuery","concatMap","rateQuery","errorAndDurationQuery","merge","scopedVars","queries","expandedQuery","validTargets","traceRequest","apiUrl","req","tempoQuery","queryPrometheus","datasourceUid","tempoDatasourceUid","serviceMapRequest","makePromServiceMapRequest","toArray","responses","errorRes","nodes","edges","nodeLength","edgeLength","serviceMapIncludeNamespace","getFieldConfig","serviceMapResponse","makeServiceGraphViewRequest","buildExpr","rateResponse","serviceGraphViewMetrics","errorRateBySpanName","durationsBySpanName","labels","spanNameField","spanNameLabels","spanNames","getEscapedSpanNames","errorAndDurationResponse","serviceGraphView","getServiceGraphView","makePromLink","expr","instant","values","targetField","tempoField","sourceField","namespaceFields","source","serverSumBy","targetNamespace","sourceNamespace","makeTempoLink","serviceName","spanName","secondResponse","rate","errorRate","duration","buildLinkExpr","errorRateNames","errorRateValues","errorRateObj","getRateAlignedValues","durationObj","d","delimiter","extraParams","serviceMapQueryMatch","metricParams","item","rateResp","objToAlign","rateNames","CompletionProvider","model","position","offset","getRangeAndOffset","situation","items","maxIndexDigits","getMonacoCompletionItemKind","tagName","tagValues","getInsertionText","textUntilCaret","matches","lastMatched","equals","monaco","word","positionClone","TagsField","onBlur","setupAutocompleteFn","useAutocomplete","CodeEditor","langId","ensureTraceQL","editor","setupPlaceholder","setupAutoSize","placeholderDecorators","decorators","checkDecorators","newDecorators","container","updateHeight","contentHeight","width","providerRef","autocompleteDisposeFun","dispose","setupDone","aliases","extensions","mimetypes","def","durationPlaceholder","serviceOptions","setServiceOptions","spanOptions","setSpanOptions","setError","inputErrors","setInputErrors","isLoading","setIsLoading","loadOptions","lpName","prevValue","fuzzy","services","spans","onKeyDown","keyEvent","handleOnChange","Alert","Input","templatedMinDuration","templatedMaxDuration","limit","TempoQueryBuilderOptions","onLimitChange","onSpssChange","onTableTypeChange","collapsedInfoList","EditorRow","EditorField","AutoSizeInput","RadioButtonGroup","validationRegex","filter","updateFilter","invalid","tooltip","GroupByField","isTagsLoading","generateId","getTags","addFilter","removeFilter","copy","indexOfFilter","scopeOptions","InlineSearchField","AccessoryButton","deleteFilter","hideScope","hideTag","hideValue","allowDelete","scopedTag","prevOperator","setPrevOperator","setPrevValue","updateOptions","isLoadingValues","o","optionsOfFirstType","uniqueOptionType","operatorList","withTemplateVariableOptions","templateVariables","hideValues","handleOnAdd","setIsTagsLoading","traceQlQuery","setTraceQlQuery","findFilter","id","dynamicFilters","sf","RawQuery","ServiceGraphSection","graphDatasourceUid","hasKeys","setHasKeys","fn","keys","getWarning","queryToFilter","AdHocFilter","filtersToQuery","newFilters","description","match","re","defaultQuery","SpanKind","parser","TraceQL","SpansetPipelineExpression","And","Gt","Desc","Or","Pipe","WrappedSpansetPipeline","SpansetPipeline","SpansetExpression","SpansetFilter","FieldExpression","FieldOp","Static","Integer","Float","Duration","TemplateVariable","IntrinsicField","Parent","AttributeField","Identifier","Resource","Span","ScalarFilter","ScalarExpression","ScalarOp","Aggregate","AggregateExpression","ComparisonOp","GroupOperation","SelectOperation","SelectArgs","CoalesceOperation","getErrorNode","tree","cursorPos","cur","node","move","direction","walk","path","current","expectedNodeIDs","getNodeText","isPathMatch","resolverPath","cursorPath","getSituation","shiftedOffset","maybeErrorNode","currentNode","ids","situationType","resolver","RESOLVERS","ERROR_NODE_ID","resolveAttribute","resolveExpression","resolveAttributeForFunction","resolveSpansetPipeline","resolveArithmeticOperator","resolveSpanset","resolveNewSpansetExpression","resolveAttributeCompletion","pos","endOfPathNode","attributeFieldParent","attributeFieldParentText","indexOfDot","_","originalPos","attributeFieldUpToDot","attributeField","_0","_1","previousNode","parent","_2","suggestion","fixSuggestion","prepend","append","itemType","computeErrorMessage","errorNode","getErrorNodes","errorNodes","nodeRef","setErrorMarkers","startLine","endLine","start","end","TraceQLEditor","onRunQueryRef","errorTimeoutId","setupRegisterInteractionCommand","setupActions","changeEvent","cursorPosition","properties","registerInteractionCommandId","traceqlSetupDone","QueryEditor","onEditorChange","DEFAULT_QUERY_TYPE","TempoQueryFieldComponent","app","queryTypeOptions","Modal","FileDropzone","Button","TempoQueryField","QuerySettings","getLabel","getTooltip","IntervalInput","LokiSearchSettings","legacyDatasource","DataSourcePicker","ServiceGraphSettings","TraceQLSearchTags","fetchTags","loading","missingTag","TraceQLSearchSettings","dataSourceSrv","fetchDatasource","ConfigEditor","DataSourceDescription","ConnectionSettings","Auth","ConfigSection","SecureSocksProxySettings","ConfigSubSection","ConfigDescriptionLink","onDashboardLoadedHandler","dashboardId","orgId","grafanaVersion","tempoQueries","stats","hasTemplateVariables","tslib_1","react_1","useAsyncFn_1","deps","_a","callback","exports"],"sourceRoot":""}