{"version":3,"file":"Connections.69ce7ce0a1c58719abdd.js","mappings":"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","sources":["webpack://grafana/./.yarn/__virtual__/@grafana-ui-virtual-d722efae30/1/packages/grafana-ui/src/components/Layout/Grid/Grid.tsx","webpack://grafana/./public/app/core/components/PageActionBar/PageActionBar.tsx","webpack://grafana/./public/app/core/components/Select/SortPicker.tsx","webpack://grafana/./public/app/features/connections/tabs/ConnectData/CardGrid/CardGrid.tsx","webpack://grafana/./public/app/features/connections/tabs/ConnectData/CategoryHeader/CategoryHeader.tsx","webpack://grafana/./public/app/features/connections/tabs/ConnectData/NoAccessModal/NoAccessModal.tsx","webpack://grafana/./public/app/features/connections/tabs/ConnectData/NoResults/NoResults.tsx","webpack://grafana/./public/app/features/connections/tabs/ConnectData/Search/Search.tsx","webpack://grafana/./public/app/features/connections/tabs/ConnectData/ConnectData.tsx","webpack://grafana/./public/app/features/connections/pages/AddNewConnectionPage.tsx","webpack://grafana/./public/app/features/connections/pages/DataSourceDetailsPage.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceAddButton.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourcesListHeader.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourcesList.tsx","webpack://grafana/./public/app/features/connections/pages/DataSourcesListPage.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceDashboards.tsx","webpack://grafana/./public/app/features/connections/hooks/useDataSourceSettingsNav.ts","webpack://grafana/./public/app/features/connections/pages/DataSourceDashboardsPage.tsx","webpack://grafana/./public/app/features/datasources/components/BasicSettings.tsx","webpack://grafana/./public/app/features/datasources/components/ButtonRow.tsx","webpack://grafana/./public/app/features/datasources/components/CloudInfoBox.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceReadOnlyMessage.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceLoadError.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceMissingRightsMessage.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourcePluginConfigPage.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourcePluginSettings.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourcePluginState.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceTestingStatus.tsx","webpack://grafana/./public/app/features/datasources/components/EditDataSource.tsx","webpack://grafana/./public/app/features/datasources/components/EditDataSourceActions.tsx","webpack://grafana/./public/app/features/datasources/components/useDataSourceInfo.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceTitle.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceTabPage.tsx","webpack://grafana/./public/app/features/connections/pages/EditDataSourcePage.tsx","webpack://grafana/./public/app/features/plugins/components/PluginsErrorsInfo.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceTypeCard.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceTypeCardList.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceCategories.tsx","webpack://grafana/./public/app/features/datasources/components/NewDataSource.tsx","webpack://grafana/./public/app/features/connections/pages/NewDataSourcePage.tsx","webpack://grafana/./public/app/features/connections/Connections.tsx","webpack://grafana/./public/app/features/plugins/components/PluginStateInfo.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { forwardRef, HTMLAttributes } from 'react';\n\nimport { GrafanaTheme2, ThemeSpacingTokens } from '@grafana/data';\n\nimport { useStyles2 } from '../../../themes';\n\ninterface GridProps extends Omit<HTMLAttributes<HTMLDivElement>, 'className' | 'style'> {\n  children: NonNullable<React.ReactNode>;\n\n  /** Specifies the gutters between columns and rows. It is overwritten when a column or row gap has a value */\n  gap?: ThemeSpacingTokens;\n\n  /** Number of columns */\n  columns?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;\n\n  /** For a responsive layout, fit as many columns while maintaining this minimum column width.\n   *  The real width will be calculated based on the theme spacing tokens: `theme.spacing(minColumnWidth)`\n   */\n  minColumnWidth?: 1 | 2 | 3 | 5 | 8 | 13 | 21 | 34 | 44 | 55 | 72 | 89 | 144;\n}\n\nexport const Grid = forwardRef<HTMLDivElement, GridProps>((props, ref) => {\n  const { children, gap, columns, minColumnWidth, ...rest } = props;\n  const styles = useStyles2(getGridStyles, gap, columns, minColumnWidth);\n\n  return (\n    <div ref={ref} {...rest} className={styles.grid}>\n      {children}\n    </div>\n  );\n});\n\nGrid.displayName = 'Grid';\n\nconst getGridStyles = (\n  theme: GrafanaTheme2,\n  gap: GridProps['gap'],\n  columns: GridProps['columns'],\n  minColumnWidth: GridProps['minColumnWidth']\n) => {\n  return {\n    grid: css([\n      {\n        display: 'grid',\n        gap: gap ? theme.spacing(gap) : undefined,\n      },\n      minColumnWidth && {\n        gridTemplateColumns: `repeat(auto-fill, minmax(${theme.spacing(minColumnWidth)}, 1fr))`,\n      },\n      columns && {\n        gridTemplateColumns: `repeat(${columns}, 1fr)`,\n      },\n    ]),\n  };\n};\n","import React, { PureComponent } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { LinkButton, FilterInput, InlineField } from '@grafana/ui';\n\nimport { SortPicker } from '../Select/SortPicker';\n\nexport interface Props {\n  searchQuery: string;\n  setSearchQuery: (value: string) => void;\n  linkButton?: { href: string; title: string; disabled?: boolean };\n  target?: string;\n  placeholder?: string;\n  sortPicker?: {\n    onChange: (sortValue: SelectableValue) => void;\n    value?: string;\n    getSortOptions?: () => Promise<SelectableValue[]>;\n  };\n}\n\nexport default class PageActionBar extends PureComponent<Props> {\n  render() {\n    const {\n      searchQuery,\n      linkButton,\n      setSearchQuery,\n      target,\n      placeholder = 'Search by name or type',\n      sortPicker,\n    } = this.props;\n    const linkProps: typeof LinkButton.defaultProps = { href: linkButton?.href, disabled: linkButton?.disabled };\n\n    if (target) {\n      linkProps.target = target;\n    }\n\n    return (\n      <div className=\"page-action-bar\">\n        <InlineField grow>\n          <FilterInput value={searchQuery} onChange={setSearchQuery} placeholder={placeholder} />\n        </InlineField>\n        {sortPicker && (\n          <SortPicker\n            onChange={sortPicker.onChange}\n            value={sortPicker.value}\n            getSortOptions={sortPicker.getSortOptions}\n          />\n        )}\n        {linkButton && <LinkButton {...linkProps}>{linkButton.title}</LinkButton>}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { useAsync } from 'react-use';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Icon, Select } from '@grafana/ui';\nimport { DEFAULT_SORT } from 'app/features/search/constants';\nimport { getGrafanaSearcher } from 'app/features/search/service';\n\nexport interface Props {\n  onChange: (sortValue: SelectableValue) => void;\n  value?: string;\n  placeholder?: string;\n  getSortOptions?: () => Promise<SelectableValue[]>;\n  filter?: string[];\n  isClearable?: boolean;\n}\n\nconst defaultSortOptionsGetter = (): Promise<SelectableValue[]> => {\n  return getGrafanaSearcher().getSortOptions();\n};\n\nexport function SortPicker({ onChange, value, placeholder, filter, getSortOptions, isClearable }: Props) {\n  // Using sync Select and manual options fetching here since we need to find the selected option by value\n  const options = useAsync<() => Promise<SelectableValue[]>>(async () => {\n    const vals = await (getSortOptions ?? defaultSortOptionsGetter)();\n    if (filter) {\n      return vals.filter((v) => filter.includes(v.value));\n    }\n    return vals;\n  }, [getSortOptions, filter]);\n\n  if (options.loading) {\n    return null;\n  }\n\n  const isDesc = Boolean(value?.includes('desc') || value?.startsWith('-')); // bluge syntax starts with \"-\"\n  return (\n    <Select\n      key={value}\n      width={28}\n      onChange={onChange}\n      value={options.value?.find((opt) => opt.value === value) ?? null}\n      options={options.value}\n      aria-label=\"Sort\"\n      placeholder={placeholder ?? `Sort (Default ${DEFAULT_SORT.label})`}\n      prefix={<Icon name={isDesc ? 'sort-amount-down' : 'sort-amount-up'} />}\n      isClearable={isClearable}\n    />\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Card, useStyles2 } from '@grafana/ui';\nimport { Grid } from '@grafana/ui/src/unstable';\nimport { PluginAngularBadge } from 'app/features/plugins/admin/components/Badges';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  heading: css({\n    fontSize: theme.typography.h5.fontSize,\n    fontWeight: 'inherit',\n  }),\n  figure: css({\n    width: 'inherit',\n    marginRight: '0px',\n    '> img': {\n      width: theme.spacing(7),\n    },\n  }),\n  meta: css({\n    marginTop: '6px',\n    position: 'relative',\n  }),\n  description: css({\n    margin: '0px',\n    fontSize: theme.typography.bodySmall.fontSize,\n  }),\n  card: css({\n    gridTemplateAreas: `\n        \"Figure   Heading   Actions\"\n        \"Figure Description Actions\"\n        \"Figure    Meta     Actions\"\n        \"Figure     -       Actions\"`,\n  }),\n  logo: css({\n    marginRight: theme.spacing(3),\n    marginLeft: theme.spacing(1),\n    width: theme.spacing(7),\n    maxHeight: theme.spacing(7),\n  }),\n});\n\nexport type CardGridItem = {\n  id: string;\n  name: string;\n  description: string;\n  url: string;\n  logo?: string;\n  angularDetected?: boolean;\n};\n\nexport interface CardGridProps {\n  items: CardGridItem[];\n  onClickItem?: (e: React.MouseEvent<HTMLElement>, item: CardGridItem) => void;\n}\n\nexport const CardGrid = ({ items, onClickItem }: CardGridProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Grid gap={1.5} minColumnWidth={44}>\n      {items.map((item) => (\n        <Card\n          key={item.id}\n          className={styles.card}\n          href={item.url}\n          onClick={(e) => {\n            if (onClickItem) {\n              onClickItem(e, item);\n            }\n          }}\n        >\n          <Card.Heading className={styles.heading}>{item.name}</Card.Heading>\n\n          <Card.Figure align=\"center\" className={styles.figure}>\n            <img className={styles.logo} src={item.logo} alt=\"\" />\n          </Card.Figure>\n\n          {item.angularDetected ? (\n            <Card.Meta className={styles.meta}>\n              <PluginAngularBadge />\n            </Card.Meta>\n          ) : null}\n        </Card>\n      ))}\n    </Grid>\n  );\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, IconName } from '@grafana/data';\nimport { Icon, useStyles2 } from '@grafana/ui';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  categoryHeader: css`\n    align-items: center;\n    display: flex;\n    margin-bottom: 24px;\n  `,\n  categoryLabel: css`\n    margin-bottom: 0px;\n    margin-left: 8px;\n  `,\n});\n\ntype Props = { iconName: IconName; label: string };\n\nexport const CategoryHeader = ({ iconName, label }: Props) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <div className={styles.categoryHeader}>\n      <Icon name={iconName} size=\"xl\" />\n      <h3 className={styles.categoryLabel}>{label}</h3>\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, Modal, Icon, Button } from '@grafana/ui';\n\nimport { type CardGridItem } from '../CardGrid';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  modal: css`\n    width: 500px;\n  `,\n  modalContent: css`\n    overflow: visible;\n    color: ${theme.colors.text.secondary};\n\n    a {\n      color: ${theme.colors.text.link};\n    }\n  `,\n  description: css`\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  bottomSection: css`\n    display: flex;\n    border-top: 1px solid ${theme.colors.border.weak};\n    padding-top: ${theme.spacing(3)};\n    margin-top: ${theme.spacing(3)};\n  `,\n  actionsSection: css`\n    display: flex;\n    justify-content: end;\n    margin-top: ${theme.spacing(3)};\n  `,\n  warningIcon: css`\n    color: ${theme.colors.warning.main};\n    padding-right: ${theme.spacing()};\n    margin-top: ${theme.spacing(0.25)};\n  `,\n  header: css`\n    display: flex;\n    align-items: center;\n  `,\n  headerTitle: css`\n    margin: 0;\n  `,\n  headerLogo: css`\n    margin-right: ${theme.spacing(2)};\n    width: 32px;\n    height: 32px;\n  `,\n});\n\nexport type NoAccessModalProps = {\n  item: CardGridItem;\n  isOpen: boolean;\n  onDismiss: () => void;\n};\n\nexport function NoAccessModal({ item, isOpen, onDismiss }: NoAccessModalProps) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Modal\n      className={styles.modal}\n      contentClassName={styles.modalContent}\n      title={<NoAccessModalHeader item={item} />}\n      isOpen={isOpen}\n      onDismiss={onDismiss}\n    >\n      <div>\n        <div>\n          {item.description && <div className={styles.description}>{item.description}</div>}\n          <div>\n            Links\n            <br />\n            <a\n              href={`https://grafana.com/grafana/plugins/${item.id}`}\n              title={`${item.name} on Grafana.com`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {item.name}\n            </a>\n          </div>\n        </div>\n        <div className={styles.bottomSection}>\n          <div className={styles.warningIcon}>\n            <Icon name=\"exclamation-triangle\" />\n          </div>\n          <div>\n            <p>\n              Editors cannot add new connections. You may check to see if it is already configured in{' '}\n              <a href=\"/connections/datasources\">Data sources</a>.\n            </p>\n            <p>To add a new connection, contact your Grafana admin.</p>\n          </div>\n        </div>\n        <div className={styles.actionsSection}>\n          <Button onClick={onDismiss}>Okay</Button>\n        </div>\n      </div>\n    </Modal>\n  );\n}\n\nexport function NoAccessModalHeader({ item }: { item: CardGridItem }) {\n  const styles = useStyles2(getStyles);\n  return (\n    <div>\n      <div className={styles.header}>\n        {item.logo && <img className={styles.headerLogo} src={item.logo} alt={`logo of ${item.name}`} />}\n        <h4 className={styles.headerTitle}>{item.name}</h4>\n      </div>\n    </div>\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { useStyles2 } from '@grafana/ui';\n\nconst getStyles = () => ({\n  noResults: css`\n    text-align: center;\n    padding: 50px 0;\n    font-style: italic;\n  `,\n});\n\nexport const NoResults = () => {\n  const styles = useStyles2(getStyles);\n\n  return <p className={styles.noResults}>No results matching your query were found.</p>;\n};\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, Input, useStyles2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  searchContainer: css`\n    display: flex;\n    margin: 16px 0;\n    justify-content: space-between;\n\n    position: sticky;\n    top: 0;\n    background-color: ${theme.colors.background.primary};\n    z-index: 2;\n    padding: ${theme.spacing(2)};\n    margin: 0 -${theme.spacing(2)};\n  `,\n});\n\nconst placeholder = t('connections.search.placeholder', 'Search all');\n\nexport const Search: FC<{ onChange: (e: React.FormEvent<HTMLInputElement>) => void }> = ({ onChange }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.searchContainer}>\n      <Input onChange={onChange} prefix={<Icon name=\"search\" />} placeholder={placeholder} aria-label=\"Search all\" />\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useMemo, useState } from 'react';\n\nimport { PluginType } from '@grafana/data';\nimport { useStyles2, LoadingPlaceholder } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { t } from 'app/core/internationalization';\nimport { useGetAll } from 'app/features/plugins/admin/state/hooks';\nimport { AccessControlAction } from 'app/types';\n\nimport { ROUTES } from '../../constants';\n\nimport { CardGrid, type CardGridItem } from './CardGrid';\nimport { CategoryHeader } from './CategoryHeader';\nimport { NoAccessModal } from './NoAccessModal';\nimport { NoResults } from './NoResults';\nimport { Search } from './Search';\n\nconst getStyles = () => ({\n  spacer: css`\n    height: 16px;\n  `,\n  modal: css`\n    width: 500px;\n  `,\n  modalContent: css`\n    overflow: visible;\n  `,\n});\n\nexport function AddNewConnection() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isNoAccessModalOpen, setIsNoAccessModalOpen] = useState(false);\n  const [focusedItem, setFocusedItem] = useState<CardGridItem | null>(null);\n  const styles = useStyles2(getStyles);\n  const canCreateDataSources = contextSrv.hasPermission(AccessControlAction.DataSourcesCreate);\n\n  const handleSearchChange = (e: React.FormEvent<HTMLInputElement>) => {\n    setSearchTerm(e.currentTarget.value.toLowerCase());\n  };\n\n  const { error, plugins, isLoading } = useGetAll({\n    keyword: searchTerm,\n    type: PluginType.datasource,\n  });\n\n  const cardGridItems = useMemo(\n    () =>\n      plugins.map((plugin) => ({\n        id: plugin.id,\n        name: plugin.name,\n        description: plugin.description,\n        logo: plugin.info.logos.small,\n        url: ROUTES.DataSourcesDetails.replace(':id', plugin.id),\n        angularDetected: plugin.angularDetected,\n      })),\n    [plugins]\n  );\n\n  const onClickCardGridItem = (e: React.MouseEvent<HTMLElement>, item: CardGridItem) => {\n    if (!canCreateDataSources) {\n      e.preventDefault();\n      e.stopPropagation();\n\n      openModal(item);\n    }\n  };\n\n  const openModal = (item: CardGridItem) => {\n    setIsNoAccessModalOpen(true);\n    setFocusedItem(item);\n  };\n\n  const closeModal = () => {\n    setIsNoAccessModalOpen(false);\n    setFocusedItem(null);\n  };\n\n  const showNoResults = useMemo(() => !isLoading && !error && plugins.length < 1, [isLoading, error, plugins]);\n  const categoryHeaderLabel = t('connections.connect-data.category-header-label', 'Data sources');\n\n  return (\n    <>\n      {focusedItem && <NoAccessModal item={focusedItem} isOpen={isNoAccessModalOpen} onDismiss={closeModal} />}\n      <Search onChange={handleSearchChange} />\n      {/* We need this extra spacing when there are no filters */}\n      <div className={styles.spacer} />\n      <CategoryHeader iconName=\"database\" label={categoryHeaderLabel} />\n      {isLoading ? (\n        <LoadingPlaceholder text=\"Loading...\" />\n      ) : !!error ? (\n        <p>Error: {error.message}</p>\n      ) : (\n        <CardGrid items={cardGridItems} onClickItem={onClickCardGridItem} />\n      )}\n      {showNoResults && <NoResults />}\n    </>\n  );\n}\n","import * as React from 'react';\n\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { AddNewConnection } from '../tabs/ConnectData';\n\nexport function AddNewConnectionPage() {\n  return (\n    <Page navId={'connections-add-new-connection'}>\n      <Page.Contents>\n        <AddNewConnection />\n      </Page.Contents>\n    </Page>\n  );\n}\n","import * as React from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { Alert, Badge } from '@grafana/ui';\nimport { PluginDetailsPage } from 'app/features/plugins/admin/components/PluginDetailsPage';\nimport { StoreState, useSelector, AppNotificationSeverity } from 'app/types';\n\nimport { ROUTES } from '../constants';\n\nexport function DataSourceDetailsPage() {\n  const overrideNavId = 'standalone-plugin-page-/connections/add-new-connection';\n  const { id } = useParams<{ id: string }>();\n  const navIndex = useSelector((state: StoreState) => state.navIndex);\n  const isConnectDataPageOverriden = Boolean(navIndex[overrideNavId]);\n  const navId = isConnectDataPageOverriden ? overrideNavId : 'connections-add-new-connection'; // The nav id changes (gets a prefix) if it is overriden by a plugin\n\n  return (\n    <PluginDetailsPage\n      pluginId={id}\n      navId={navId}\n      notFoundComponent={<NotFoundDatasource />}\n      notFoundNavModel={{\n        text: 'Unknown datasource',\n        subTitle: 'No datasource with this ID could be found.',\n        active: true,\n      }}\n    />\n  );\n}\n\nfunction NotFoundDatasource() {\n  const { id } = useParams<{ id: string }>();\n\n  return (\n    <Alert severity={AppNotificationSeverity.Warning} title=\"\">\n      Maybe you mistyped the URL or the plugin with the id <Badge text={id} color=\"orange\" /> is unavailable.\n      <br />\n      To see a list of available datasources please <a href={ROUTES.AddNewConnection}>click here</a>.\n    </Alert>\n  );\n}\n","import React from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { LinkButton } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { Trans } from 'app/core/internationalization';\nimport { AccessControlAction } from 'app/types';\n\nimport { useDataSourcesRoutes } from '../state';\n\nexport function DataSourceAddButton(): JSX.Element | null {\n  const canCreateDataSource = contextSrv.hasPermission(AccessControlAction.DataSourcesCreate);\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  return canCreateDataSource ? (\n    <LinkButton icon=\"plus\" href={config.appSubUrl + dataSourcesRoutes.New}>\n      <Trans i18nKey=\"data-sources.datasource-add-button.label\">Add new data source</Trans>\n    </LinkButton>\n  ) : null;\n}\n","import React, { useCallback } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport PageActionBar from 'app/core/components/PageActionBar/PageActionBar';\nimport { StoreState, useSelector, useDispatch } from 'app/types';\n\nimport { getDataSourcesSearchQuery, getDataSourcesSort, setDataSourcesSearchQuery, setIsSortAscending } from '../state';\n\nconst ascendingSortValue = 'alpha-asc';\nconst descendingSortValue = 'alpha-desc';\n\nconst sortOptions = [\n  // We use this unicode 'en dash' character (U+2013), because it looks nicer\n  // than simple dash in this context. This is also used in the response of\n  // the `sorting` endpoint, which is used in the search dashboard page.\n  { label: 'Sort by A–Z', value: ascendingSortValue },\n  { label: 'Sort by Z–A', value: descendingSortValue },\n];\n\nexport function DataSourcesListHeader() {\n  const dispatch = useDispatch();\n  const setSearchQuery = useCallback((q: string) => dispatch(setDataSourcesSearchQuery(q)), [dispatch]);\n  const searchQuery = useSelector(({ dataSources }: StoreState) => getDataSourcesSearchQuery(dataSources));\n\n  const setSort = useCallback(\n    (sort: SelectableValue) => dispatch(setIsSortAscending(sort.value === ascendingSortValue)),\n    [dispatch]\n  );\n  const isSortAscending = useSelector(({ dataSources }: StoreState) => getDataSourcesSort(dataSources));\n\n  const sortPicker = {\n    onChange: setSort,\n    value: isSortAscending ? ascendingSortValue : descendingSortValue,\n    getSortOptions: () => Promise.resolve(sortOptions),\n  };\n\n  return (\n    <PageActionBar searchQuery={searchQuery} setSearchQuery={setSearchQuery} key=\"action-bar\" sortPicker={sortPicker} />\n  );\n}\n","import { css } from '@emotion/css';\nimport React, { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { DataSourceSettings, GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { LinkButton, Card, Tag, useStyles2 } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { contextSrv } from 'app/core/core';\nimport { StoreState, AccessControlAction, useSelector } from 'app/types';\n\nimport { getDataSources, getDataSourcesCount, useDataSourcesRoutes, useLoadDataSources } from '../state';\nimport { trackCreateDashboardClicked, trackExploreClicked, trackDataSourcesListViewed } from '../tracking';\nimport { constructDataSourceExploreUrl } from '../utils';\n\nimport { DataSourcesListHeader } from './DataSourcesListHeader';\n\nexport function DataSourcesList() {\n  const { isLoading } = useLoadDataSources();\n\n  const dataSources = useSelector((state) => getDataSources(state.dataSources));\n  const dataSourcesCount = useSelector(({ dataSources }: StoreState) => getDataSourcesCount(dataSources));\n  const hasCreateRights = contextSrv.hasPermission(AccessControlAction.DataSourcesCreate);\n  const hasWriteRights = contextSrv.hasPermission(AccessControlAction.DataSourcesWrite);\n  const hasExploreRights = contextSrv.hasPermission(AccessControlAction.DataSourcesExplore);\n\n  return (\n    <DataSourcesListView\n      dataSources={dataSources}\n      dataSourcesCount={dataSourcesCount}\n      isLoading={isLoading}\n      hasCreateRights={hasCreateRights}\n      hasWriteRights={hasWriteRights}\n      hasExploreRights={hasExploreRights}\n    />\n  );\n}\n\nexport type ViewProps = {\n  dataSources: DataSourceSettings[];\n  dataSourcesCount: number;\n  isLoading: boolean;\n  hasCreateRights: boolean;\n  hasWriteRights: boolean;\n  hasExploreRights: boolean;\n};\n\nexport function DataSourcesListView({\n  dataSources,\n  dataSourcesCount,\n  isLoading,\n  hasCreateRights,\n  hasWriteRights,\n  hasExploreRights,\n}: ViewProps) {\n  const styles = useStyles2(getStyles);\n  const dataSourcesRoutes = useDataSourcesRoutes();\n  const location = useLocation();\n\n  useEffect(() => {\n    trackDataSourcesListViewed({\n      grafana_version: config.buildInfo.version,\n      path: location.pathname,\n    });\n  }, [location]);\n\n  if (isLoading) {\n    return <PageLoader />;\n  }\n\n  if (dataSourcesCount === 0) {\n    return (\n      <EmptyListCTA\n        buttonDisabled={!hasCreateRights}\n        title=\"No data sources defined\"\n        buttonIcon=\"database\"\n        buttonLink={dataSourcesRoutes.New}\n        buttonTitle=\"Add data source\"\n        proTip=\"You can also define data sources through configuration files.\"\n        proTipLink=\"http://docs.grafana.org/administration/provisioning/?utm_source=grafana_ds_list#data-sources\"\n        proTipLinkTitle=\"Learn more\"\n        proTipTarget=\"_blank\"\n      />\n    );\n  }\n\n  return (\n    <>\n      {/* List Header */}\n      <DataSourcesListHeader />\n\n      {/* List */}\n      <ul className={styles.list}>\n        {dataSources.map((dataSource) => {\n          const dsLink = config.appSubUrl + dataSourcesRoutes.Edit.replace(/:uid/gi, dataSource.uid);\n          return (\n            <li key={dataSource.uid}>\n              <Card href={hasWriteRights ? dsLink : undefined}>\n                <Card.Heading>{dataSource.name}</Card.Heading>\n                <Card.Figure>\n                  <img src={dataSource.typeLogoUrl} alt=\"\" height=\"40px\" width=\"40px\" className={styles.logo} />\n                </Card.Figure>\n                <Card.Meta>\n                  {[\n                    dataSource.typeName,\n                    dataSource.url,\n                    dataSource.isDefault && <Tag key=\"default-tag\" name={'default'} colorIndex={1} />,\n                  ]}\n                </Card.Meta>\n                <Card.Tags>\n                  {/* Build Dashboard */}\n                  <LinkButton\n                    icon=\"apps\"\n                    fill=\"outline\"\n                    variant=\"secondary\"\n                    href={`dashboard/new-with-ds/${dataSource.uid}`}\n                    onClick={() => {\n                      trackCreateDashboardClicked({\n                        grafana_version: config.buildInfo.version,\n                        datasource_uid: dataSource.uid,\n                        plugin_name: dataSource.typeName,\n                        path: location.pathname,\n                      });\n                    }}\n                  >\n                    Build a dashboard\n                  </LinkButton>\n\n                  {/* Explore */}\n                  {hasExploreRights && (\n                    <LinkButton\n                      icon=\"compass\"\n                      fill=\"outline\"\n                      variant=\"secondary\"\n                      className={styles.button}\n                      href={constructDataSourceExploreUrl(dataSource)}\n                      onClick={() => {\n                        trackExploreClicked({\n                          grafana_version: config.buildInfo.version,\n                          datasource_uid: dataSource.uid,\n                          plugin_name: dataSource.typeName,\n                          path: location.pathname,\n                        });\n                      }}\n                    >\n                      Explore\n                    </LinkButton>\n                  )}\n                </Card.Tags>\n              </Card>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    list: css({\n      listStyle: 'none',\n      display: 'grid',\n      // gap: '8px', Add back when legacy support for old Card interface is dropped\n    }),\n    logo: css({\n      objectFit: 'contain',\n    }),\n    button: css({\n      marginLeft: theme.spacing(2),\n    }),\n  };\n};\n","import * as React from 'react';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { DataSourceAddButton } from 'app/features/datasources/components/DataSourceAddButton';\nimport { DataSourcesList } from 'app/features/datasources/components/DataSourcesList';\nimport { getDataSourcesCount } from 'app/features/datasources/state';\nimport { StoreState, useSelector } from 'app/types';\n\nexport function DataSourcesListPage() {\n  const dataSourcesCount = useSelector(({ dataSources }: StoreState) => getDataSourcesCount(dataSources));\n\n  const actions = dataSourcesCount > 0 ? <DataSourceAddButton /> : undefined;\n  return (\n    <Page navId={'connections-datasources'} actions={actions}>\n      <Page.Contents>\n        <DataSourcesList />\n      </Page.Contents>\n    </Page>\n  );\n}\n","import React, { useEffect } from 'react';\n\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { importDashboard, removeDashboard } from 'app/features/dashboard/state/actions';\nimport { loadPluginDashboards } from 'app/features/plugins/admin/state/actions';\nimport { PluginDashboard, StoreState, useDispatch, useSelector } from 'app/types';\n\nimport DashboardTable from '../components/DashboardsTable';\nimport { useInitDataSourceSettings } from '../state';\n\nexport type Props = {\n  // The UID of the data source\n  uid: string;\n};\n\nexport function DataSourceDashboards({ uid }: Props) {\n  useInitDataSourceSettings(uid);\n\n  const dispatch = useDispatch();\n  const dataSource = useSelector((s: StoreState) => s.dataSources.dataSource);\n  const dashboards = useSelector((s: StoreState) => s.plugins.dashboards);\n  const isLoading = useSelector((s: StoreState) => s.plugins.isLoadingPluginDashboards);\n\n  useEffect(() => {\n    // Load plugin dashboards only when the datasource has loaded\n    if (dataSource.id > 0) {\n      dispatch(loadPluginDashboards());\n    }\n  }, [dispatch, dataSource.id]);\n\n  const onImportDashboard = (dashboard: PluginDashboard, overwrite: boolean) => {\n    dispatch(\n      importDashboard(\n        {\n          pluginId: dashboard.pluginId,\n          path: dashboard.path,\n          overwrite,\n          inputs: [\n            {\n              name: '*',\n              type: 'datasource',\n              pluginId: dataSource.type,\n              value: dataSource.name,\n            },\n          ],\n        },\n        dashboard.title\n      )\n    );\n  };\n\n  const onRemoveDashboard = ({ uid }: PluginDashboard) => {\n    dispatch(removeDashboard(uid));\n  };\n\n  return (\n    <DataSourceDashboardsView\n      dashboards={dashboards}\n      isLoading={isLoading}\n      onImportDashboard={onImportDashboard}\n      onRemoveDashboard={onRemoveDashboard}\n    />\n  );\n}\n\nexport type ViewProps = {\n  isLoading: boolean;\n  dashboards: PluginDashboard[];\n  onImportDashboard: (dashboard: PluginDashboard, overwrite: boolean) => void;\n  onRemoveDashboard: (dashboard: PluginDashboard) => void;\n};\n\nexport const DataSourceDashboardsView = ({\n  isLoading,\n  dashboards,\n  onImportDashboard,\n  onRemoveDashboard,\n}: ViewProps) => {\n  if (isLoading) {\n    return <PageLoader />;\n  }\n\n  return <DashboardTable dashboards={dashboards} onImport={onImportDashboard} onRemove={onRemoveDashboard} />;\n};\n","import { useLocation, useParams } from 'react-router-dom';\n\nimport { NavModel, NavModelItem } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { useDataSource, useDataSourceMeta, useDataSourceSettings } from 'app/features/datasources/state/hooks';\nimport { getDataSourceLoadingNav, buildNavModel, getDataSourceNav } from 'app/features/datasources/state/navModel';\nimport { useGetSingle } from 'app/features/plugins/admin/state/hooks';\nimport { useSelector } from 'app/types';\n\nexport function useDataSourceSettingsNav(pageIdParam?: string) {\n  const { uid } = useParams<{ uid: string }>();\n  const location = useLocation();\n  const datasource = useDataSource(uid);\n  const dataSourceMeta = useDataSourceMeta(datasource.type);\n  const datasourcePlugin = useGetSingle(datasource.type);\n  const params = new URLSearchParams(location.search);\n  const pageId = pageIdParam || params.get('page');\n\n  const { plugin, loadError, loading } = useDataSourceSettings();\n  const dsi = getDataSourceSrv()?.getInstanceSettings(uid);\n  const hasAlertingEnabled = Boolean(dsi?.meta?.alerting ?? false);\n  const isAlertManagerDatasource = dsi?.type === 'alertmanager';\n  const alertingSupported = hasAlertingEnabled || isAlertManagerDatasource;\n\n  const navIndex = useSelector((state) => state.navIndex);\n  const navIndexId = pageId ? `datasource-${pageId}-${uid}` : `datasource-settings-${uid}`;\n  let pageNav: NavModel = {\n    node: {\n      text: 'Data Source Nav Node',\n    },\n    main: {\n      text: 'Data Source Nav Node',\n    },\n  };\n\n  if (loadError) {\n    const node: NavModelItem = {\n      text: loadError,\n      subTitle: 'Data Source Error',\n      icon: 'exclamation-triangle',\n    };\n\n    pageNav = {\n      node: node,\n      main: node,\n    };\n  }\n\n  if (loading || !plugin) {\n    pageNav = getNavModel(navIndex, navIndexId, getDataSourceLoadingNav('settings'));\n  }\n\n  if (plugin) {\n    pageNav = getNavModel(\n      navIndex,\n      navIndexId,\n      getDataSourceNav(buildNavModel(datasource, plugin), pageId || 'settings')\n    );\n  }\n\n  const connectionsPageNav = {\n    ...pageNav.main,\n    dataSourcePluginName: datasourcePlugin?.name || plugin?.meta.name || '',\n    active: true,\n    text: datasource.name,\n    subTitle: `Type: ${dataSourceMeta.name}`,\n    children: (pageNav.main.children || []).map((navModelItem) => ({\n      ...navModelItem,\n      url: navModelItem.url?.replace('datasources/edit/', '/connections/datasources/edit/'),\n    })),\n  };\n\n  return {\n    navId: 'connections-datasources',\n    pageNav: connectionsPageNav,\n    dataSourceHeader: {\n      alertingSupported,\n    },\n  };\n}\n","import * as React from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { DataSourceDashboards } from 'app/features/datasources/components/DataSourceDashboards';\n\nimport { useDataSourceSettingsNav } from '../hooks/useDataSourceSettingsNav';\n\nexport function DataSourceDashboardsPage() {\n  const { uid } = useParams<{ uid: string }>();\n  const { navId, pageNav } = useDataSourceSettingsNav('dashboards');\n\n  return (\n    <Page navId={navId} pageNav={pageNav}>\n      <Page.Contents>\n        <DataSourceDashboards uid={uid} />\n      </Page.Contents>\n    </Page>\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config } from '@grafana/runtime';\nimport { InlineField, InlineSwitch, Input, Badge, useStyles2 } from '@grafana/ui';\n\nexport interface Props {\n  dataSourceName: string;\n  isDefault: boolean;\n  onNameChange: (name: string) => void;\n  onDefaultChange: (value: boolean) => void;\n  alertingSupported: boolean;\n  disabled?: boolean;\n}\n\nexport function BasicSettings({\n  dataSourceName,\n  isDefault,\n  onDefaultChange,\n  onNameChange,\n  alertingSupported,\n  disabled,\n}: Props) {\n  return (\n    <>\n      {!config.featureToggles.dataSourcePageHeader && <AlertingEnabled enabled={alertingSupported} />}\n\n      <div className=\"gf-form-group\" aria-label=\"Datasource settings page basic settings\">\n        <div className=\"gf-form-inline\">\n          {/* Name */}\n          <div className=\"gf-form max-width-30\">\n            <InlineField\n              label=\"Name\"\n              tooltip=\"The name is used when you select the data source in panels. The default data source is\n              'preselected in new panels.\"\n              grow\n              disabled={disabled}\n            >\n              <Input\n                id=\"basic-settings-name\"\n                type=\"text\"\n                value={dataSourceName}\n                placeholder=\"Name\"\n                onChange={(event) => onNameChange(event.currentTarget.value)}\n                required\n                aria-label={selectors.pages.DataSource.name}\n              />\n            </InlineField>\n          </div>\n\n          {/* Is Default */}\n          <InlineField label=\"Default\" labelWidth={8} disabled={disabled}>\n            <InlineSwitch\n              id=\"basic-settings-default\"\n              value={isDefault}\n              onChange={(event: React.FormEvent<HTMLInputElement>) => {\n                onDefaultChange(event.currentTarget.checked);\n              }}\n            />\n          </InlineField>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport function AlertingEnabled({ enabled }: { enabled: boolean }) {\n  const styles = useStyles2(getStyles);\n  return (\n    <div className={styles.badge}>\n      {enabled ? (\n        <Badge color=\"green\" icon=\"check-circle\" text=\"Alerting supported\" />\n      ) : (\n        <Badge color=\"orange\" icon=\"exclamation-triangle\" text=\"Alerting not supported\" />\n      )}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  badge: css`\n    margin-bottom: ${theme.spacing(2)};\n  `,\n});\n","import React from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button } from '@grafana/ui';\n\nexport interface Props {\n  canSave: boolean;\n  canDelete: boolean;\n  onDelete: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  onSubmit: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  onTest: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n}\n\nexport function ButtonRow({ canSave, canDelete, onDelete, onSubmit, onTest }: Props) {\n  return (\n    <div className=\"gf-form-button-row\">\n      <Button\n        type=\"button\"\n        variant=\"destructive\"\n        disabled={!canDelete}\n        onClick={onDelete}\n        data-testid={selectors.pages.DataSource.delete}\n      >\n        Delete\n      </Button>\n      {canSave && (\n        <Button\n          type=\"submit\"\n          variant=\"primary\"\n          disabled={!canSave}\n          onClick={onSubmit}\n          data-testid={selectors.pages.DataSource.saveAndTest}\n        >\n          Save &amp; test\n        </Button>\n      )}\n      {!canSave && (\n        <Button variant=\"primary\" onClick={onTest}>\n          Test\n        </Button>\n      )}\n    </div>\n  );\n}\n","import React from 'react';\n\nimport { DataSourceSettings } from '@grafana/data';\nimport { GrafanaEdition } from '@grafana/data/src/types/config';\nimport { Alert } from '@grafana/ui';\nimport { LocalStorageValueProvider } from 'app/core/components/LocalStorageValueProvider';\nimport { config } from 'app/core/config';\n\nconst LOCAL_STORAGE_KEY = 'datasources.settings.cloudInfoBox.isDismissed';\n\nexport interface Props {\n  dataSource: DataSourceSettings;\n}\n\nexport function CloudInfoBox({ dataSource }: Props) {\n  let mainDS = '';\n  let extraDS = '';\n\n  // don't show for already configured data sources or provisioned data sources\n  if (dataSource.readOnly || (dataSource.version ?? 0) > 2) {\n    return null;\n  }\n\n  // Skip showing this info box in some editions\n  if (config.buildInfo.edition !== GrafanaEdition.OpenSource) {\n    return null;\n  }\n\n  switch (dataSource.type) {\n    case 'prometheus':\n      mainDS = 'Prometheus';\n      extraDS = 'Loki';\n      break;\n    case 'loki':\n      mainDS = 'Loki';\n      extraDS = 'Prometheus';\n      break;\n    default:\n      return null;\n  }\n\n  return (\n    <LocalStorageValueProvider<boolean> storageKey={LOCAL_STORAGE_KEY} defaultValue={false}>\n      {(isDismissed, onDismiss) => {\n        if (isDismissed) {\n          return null;\n        }\n        return (\n          <Alert\n            title={`Configure your ${mainDS} data source below`}\n            severity=\"info\"\n            bottomSpacing={4}\n            onRemove={() => {\n              onDismiss(true);\n            }}\n          >\n            Or skip the effort and get {mainDS} (and {extraDS}) as fully-managed, scalable, and hosted data sources from\n            Grafana Labs with the{' '}\n            <a\n              className=\"external-link\"\n              href={`https://grafana.com/signup/cloud/connect-account?src=grafana-oss&cnt=${dataSource.type}-settings`}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              title=\"The free plan includes 10k active metrics and 50gb storage.\"\n            >\n              free-forever Grafana Cloud plan\n            </a>\n            .\n          </Alert>\n        );\n      }}\n    </LocalStorageValueProvider>\n  );\n}\n","import React from 'react';\n\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors';\nimport { Alert } from '@grafana/ui';\n\nexport const readOnlyMessage =\n  'This data source was added by config and cannot be modified using the UI. Please contact your server admin to update this data source.';\n\nexport function DataSourceReadOnlyMessage() {\n  return (\n    <Alert aria-label={e2eSelectors.pages.DataSource.readOnly} severity=\"info\" title=\"Provisioned data source\">\n      {readOnlyMessage}\n    </Alert>\n  );\n}\n","import React from 'react';\n\nimport { Button } from '@grafana/ui';\n\nimport { DataSourceRights } from '../types';\n\nimport { DataSourceReadOnlyMessage } from './DataSourceReadOnlyMessage';\n\nexport type Props = {\n  dataSourceRights: DataSourceRights;\n  onDelete: () => void;\n};\n\nexport function DataSourceLoadError({ dataSourceRights, onDelete }: Props) {\n  const { readOnly, hasDeleteRights } = dataSourceRights;\n  const canDelete = !readOnly && hasDeleteRights;\n  const navigateBack = () => history.back();\n\n  return (\n    <>\n      {readOnly && <DataSourceReadOnlyMessage />}\n\n      <div className=\"gf-form-button-row\">\n        {canDelete && (\n          <Button type=\"submit\" variant=\"destructive\" onClick={onDelete}>\n            Delete\n          </Button>\n        )}\n\n        <Button variant=\"secondary\" fill=\"outline\" type=\"button\" onClick={navigateBack}>\n          Back\n        </Button>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\n\nimport { Alert } from '@grafana/ui';\n\nexport const missingRightsMessage =\n  'You are not allowed to modify this data source. Please contact your server admin to update this data source.';\n\nexport function DataSourceMissingRightsMessage() {\n  return (\n    <Alert severity=\"info\" title=\"Missing rights\">\n      {missingRightsMessage}\n    </Alert>\n  );\n}\n","import React from 'react';\n\nimport { GenericDataSourcePlugin } from '../types';\n\nexport type Props = {\n  plugin?: GenericDataSourcePlugin | null;\n  pageId: string;\n};\n\nexport function DataSourcePluginConfigPage({ plugin, pageId }: Props) {\n  if (!plugin || !plugin.configPages) {\n    return null;\n  }\n\n  const page = plugin.configPages.find(({ id }) => id === pageId);\n\n  if (page) {\n    // TODO: Investigate if any plugins are using this? We should change this interface\n    return <page.body plugin={plugin} query={{}} />;\n  }\n\n  return <div>Page not found: {page}</div>;\n}\n","import { cloneDeep } from 'lodash';\nimport React, { PureComponent } from 'react';\n\nimport { DataSourcePluginMeta, DataSourceSettings } from '@grafana/data';\nimport { AngularComponent, getAngularLoader } from '@grafana/runtime';\n\nimport { GenericDataSourcePlugin } from '../types';\n\nexport interface Props {\n  plugin: GenericDataSourcePlugin;\n  dataSource: DataSourceSettings;\n  dataSourceMeta: DataSourcePluginMeta;\n  onModelChange: (dataSource: DataSourceSettings) => void;\n}\n\nexport class DataSourcePluginSettings extends PureComponent<Props> {\n  element: HTMLDivElement | null = null;\n  component?: AngularComponent;\n  scopeProps: {\n    ctrl: { datasourceMeta: DataSourcePluginMeta; current: DataSourceSettings };\n    onModelChanged: (dataSource: DataSourceSettings) => void;\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    this.scopeProps = {\n      ctrl: { datasourceMeta: props.dataSourceMeta, current: cloneDeep(props.dataSource) },\n      onModelChanged: this.onModelChanged,\n    };\n    this.onModelChanged = this.onModelChanged.bind(this);\n  }\n\n  componentDidMount() {\n    const { plugin } = this.props;\n\n    if (!this.element) {\n      return;\n    }\n\n    if (!plugin.components.ConfigEditor) {\n      // React editor is not specified, let's render angular editor\n      // How to approach this better? Introduce ReactDataSourcePlugin interface and typeguard it here?\n      const loader = getAngularLoader();\n      const template = '<plugin-component type=\"datasource-config-ctrl\" />';\n\n      this.component = loader.load(this.element, this.scopeProps, template);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { plugin } = this.props;\n    if (!plugin.components.ConfigEditor && this.props.dataSource !== prevProps.dataSource) {\n      this.scopeProps.ctrl.current = cloneDeep(this.props.dataSource);\n\n      this.component?.digest();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.component) {\n      this.component.destroy();\n    }\n  }\n\n  onModelChanged = (dataSource: DataSourceSettings) => {\n    this.props.onModelChange(dataSource);\n  };\n\n  render() {\n    const { plugin, dataSource } = this.props;\n\n    if (!plugin) {\n      return null;\n    }\n\n    return (\n      <div ref={(element) => (this.element = element)}>\n        {plugin.components.ConfigEditor &&\n          React.createElement(plugin.components.ConfigEditor, {\n            options: dataSource,\n            onOptionsChange: this.onModelChanged,\n          })}\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport { PluginState } from '@grafana/data';\nimport { PluginStateInfo } from 'app/features/plugins/components/PluginStateInfo';\n\nexport type Props = {\n  state?: PluginState;\n};\n\nexport function DataSourcePluginState({ state }: Props) {\n  return (\n    <div className=\"gf-form\">\n      <div className=\"gf-form-label width-10\">Plugin state</div>\n      <div className=\"gf-form-label gf-form-label--transparent\">\n        <PluginStateInfo state={state} />\n      </div>\n    </div>\n  );\n}\n","import { css, cx } from '@emotion/css';\nimport React, { HTMLAttributes } from 'react';\n\nimport { DataSourceSettings as DataSourceSettingsType, GrafanaTheme2 } from '@grafana/data';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors';\nimport { TestingStatus, config } from '@grafana/runtime';\nimport { AlertVariant, Alert, useTheme2, Link } from '@grafana/ui';\n\nimport { contextSrv } from '../../../core/core';\nimport { AccessControlAction } from '../../../types';\nimport { trackCreateDashboardClicked } from '../tracking';\n\nexport type Props = {\n  testingStatus?: TestingStatus;\n  exploreUrl: string;\n  dataSource: DataSourceSettingsType;\n};\n\ninterface AlertMessageProps extends HTMLAttributes<HTMLDivElement> {\n  title: string;\n  severity?: AlertVariant;\n  exploreUrl: string;\n  dataSourceId: string;\n  onDashboardLinkClicked: () => void;\n}\n\nconst getStyles = (theme: GrafanaTheme2, hasTitle: boolean) => {\n  return {\n    content: css`\n      color: ${theme.colors.text.secondary};\n      padding-top: ${hasTitle ? theme.spacing(1) : 0};\n      max-height: 50vh;\n      overflow-y: auto;\n    `,\n    disabled: css`\n      pointer-events: none;\n      color: ${theme.colors.text.secondary};\n    `,\n  };\n};\n\nconst AlertSuccessMessage = ({ title, exploreUrl, dataSourceId, onDashboardLinkClicked }: AlertMessageProps) => {\n  const theme = useTheme2();\n  const hasTitle = Boolean(title);\n  const styles = getStyles(theme, hasTitle);\n  const canExploreDataSources = contextSrv.hasPermission(AccessControlAction.DataSourcesExplore);\n\n  return (\n    <div className={styles.content}>\n      Next, you can start to visualize data by{' '}\n      <Link\n        aria-label={`Create a dashboard`}\n        href={`/dashboard/new-with-ds/${dataSourceId}`}\n        className=\"external-link\"\n        onClick={onDashboardLinkClicked}\n      >\n        building a dashboard\n      </Link>\n      , or by querying data in the{' '}\n      <Link\n        aria-label={`Explore data`}\n        className={cx('external-link', {\n          [`${styles.disabled}`]: !canExploreDataSources,\n          'test-disabled': !canExploreDataSources,\n        })}\n        href={exploreUrl}\n      >\n        Explore view\n      </Link>\n      .\n    </div>\n  );\n};\n\nAlertSuccessMessage.displayName = 'AlertSuccessMessage';\n\nconst alertVariants = new Set<AlertVariant>(['success', 'info', 'warning', 'error']);\nconst isAlertVariant = (str: string): str is AlertVariant => alertVariants.has(str as AlertVariant);\nconst getAlertVariant = (status: string): AlertVariant => {\n  if (status.toLowerCase() === 'ok') {\n    return 'success';\n  }\n  return isAlertVariant(status) ? status : 'info';\n};\n\nexport function DataSourceTestingStatus({ testingStatus, exploreUrl, dataSource }: Props) {\n  const severity = getAlertVariant(testingStatus?.status ?? 'error');\n  const message = testingStatus?.message;\n  const detailsMessage = testingStatus?.details?.message;\n  const detailsVerboseMessage = testingStatus?.details?.verboseMessage;\n  const onDashboardLinkClicked = () => {\n    trackCreateDashboardClicked({\n      grafana_version: config.buildInfo.version,\n      datasource_uid: dataSource.uid,\n      plugin_name: dataSource.typeName,\n      path: location.pathname,\n    });\n  };\n\n  if (message) {\n    return (\n      <div className=\"gf-form-group p-t-2\">\n        <Alert severity={severity} title={message} aria-label={e2eSelectors.pages.DataSource.alert}>\n          {testingStatus?.details && (\n            <>\n              {detailsMessage}\n              {severity === 'success' ? (\n                <AlertSuccessMessage\n                  title={message}\n                  exploreUrl={exploreUrl}\n                  dataSourceId={dataSource.uid}\n                  onDashboardLinkClicked={onDashboardLinkClicked}\n                />\n              ) : null}\n              {detailsVerboseMessage ? (\n                <details style={{ whiteSpace: 'pre-wrap' }}>{String(detailsVerboseMessage)}</details>\n              ) : null}\n            </>\n          )}\n        </Alert>\n      </div>\n    );\n  }\n\n  return null;\n}\n","import { AnyAction } from '@reduxjs/toolkit';\nimport { omit } from 'lodash';\nimport React, { useMemo } from 'react';\n\nimport {\n  DataSourcePluginContextProvider,\n  DataSourcePluginMeta,\n  DataSourceSettings as DataSourceSettingsType,\n  PluginExtensionPoints,\n  PluginExtensionDataSourceConfigContext,\n  DataSourceJsonData,\n  DataSourceUpdatedSuccessfully,\n} from '@grafana/data';\nimport { getDataSourceSrv, getPluginComponentExtensions } from '@grafana/runtime';\nimport appEvents from 'app/core/app_events';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { DataSourceSettingsState, useDispatch } from 'app/types';\n\nimport {\n  dataSourceLoaded,\n  setDataSourceName,\n  setIsDefault,\n  useDataSource,\n  useDataSourceExploreUrl,\n  useDataSourceMeta,\n  useDataSourceRights,\n  useDataSourceSettings,\n  useDeleteLoadedDataSource,\n  useInitDataSourceSettings,\n  useTestDataSource,\n  useUpdateDatasource,\n} from '../state';\nimport { trackDsConfigClicked, trackDsConfigUpdated } from '../tracking';\nimport { DataSourceRights } from '../types';\n\nimport { BasicSettings } from './BasicSettings';\nimport { ButtonRow } from './ButtonRow';\nimport { CloudInfoBox } from './CloudInfoBox';\nimport { DataSourceLoadError } from './DataSourceLoadError';\nimport { DataSourceMissingRightsMessage } from './DataSourceMissingRightsMessage';\nimport { DataSourcePluginConfigPage } from './DataSourcePluginConfigPage';\nimport { DataSourcePluginSettings } from './DataSourcePluginSettings';\nimport { DataSourcePluginState } from './DataSourcePluginState';\nimport { DataSourceReadOnlyMessage } from './DataSourceReadOnlyMessage';\nimport { DataSourceTestingStatus } from './DataSourceTestingStatus';\n\nexport type Props = {\n  // The ID of the data source\n  uid: string;\n  // The ID of the custom datasource setting page\n  pageId?: string | null;\n};\n\nexport function EditDataSource({ uid, pageId }: Props) {\n  useInitDataSourceSettings(uid);\n\n  const dispatch = useDispatch();\n  const dataSource = useDataSource(uid);\n  const dataSourceMeta = useDataSourceMeta(dataSource.type);\n  const dataSourceSettings = useDataSourceSettings();\n  const dataSourceRights = useDataSourceRights(uid);\n  const exploreUrl = useDataSourceExploreUrl(uid);\n  const onDelete = useDeleteLoadedDataSource();\n  const onTest = useTestDataSource(uid);\n  const onUpdate = useUpdateDatasource();\n  const onDefaultChange = (value: boolean) => dispatch(setIsDefault(value));\n  const onNameChange = (name: string) => dispatch(setDataSourceName(name));\n  const onOptionsChange = (ds: DataSourceSettingsType) => dispatch(dataSourceLoaded(ds));\n\n  return (\n    <EditDataSourceView\n      pageId={pageId}\n      dataSource={dataSource}\n      dataSourceMeta={dataSourceMeta}\n      dataSourceSettings={dataSourceSettings}\n      dataSourceRights={dataSourceRights}\n      exploreUrl={exploreUrl}\n      onDelete={onDelete}\n      onDefaultChange={onDefaultChange}\n      onNameChange={onNameChange}\n      onOptionsChange={onOptionsChange}\n      onTest={onTest}\n      onUpdate={onUpdate}\n    />\n  );\n}\n\nexport type ViewProps = {\n  pageId?: string | null;\n  dataSource: DataSourceSettingsType;\n  dataSourceMeta: DataSourcePluginMeta;\n  dataSourceSettings: DataSourceSettingsState;\n  dataSourceRights: DataSourceRights;\n  exploreUrl: string;\n  onDelete: () => void;\n  onDefaultChange: (isDefault: boolean) => AnyAction;\n  onNameChange: (name: string) => AnyAction;\n  onOptionsChange: (dataSource: DataSourceSettingsType) => AnyAction;\n  onTest: () => void;\n  onUpdate: (dataSource: DataSourceSettingsType) => Promise<DataSourceSettingsType>;\n};\n\nexport function EditDataSourceView({\n  pageId,\n  dataSource,\n  dataSourceMeta,\n  dataSourceSettings,\n  dataSourceRights,\n  exploreUrl,\n  onDelete,\n  onDefaultChange,\n  onNameChange,\n  onOptionsChange,\n  onTest,\n  onUpdate,\n}: ViewProps) {\n  const { plugin, loadError, testingStatus, loading } = dataSourceSettings;\n  const { readOnly, hasWriteRights, hasDeleteRights } = dataSourceRights;\n  const hasDataSource = dataSource.id > 0;\n\n  const dsi = getDataSourceSrv()?.getInstanceSettings(dataSource.uid);\n\n  const hasAlertingEnabled = Boolean(dsi?.meta?.alerting ?? false);\n  const isAlertManagerDatasource = dsi?.type === 'alertmanager';\n  const alertingSupported = hasAlertingEnabled || isAlertManagerDatasource;\n\n  const onSubmit = async (e: React.MouseEvent<HTMLButtonElement> | React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    trackDsConfigClicked('save_and_test');\n\n    try {\n      await onUpdate({ ...dataSource });\n      trackDsConfigUpdated({ item: 'success' });\n      appEvents.publish(new DataSourceUpdatedSuccessfully());\n    } catch (error) {\n      trackDsConfigUpdated({ item: 'fail', error });\n      return;\n    }\n\n    onTest();\n  };\n\n  const extensions = useMemo(() => {\n    const allowedPluginIds = ['grafana-pdc-app', 'grafana-auth-app'];\n    const extensionPointId = PluginExtensionPoints.DataSourceConfig;\n    const { extensions } = getPluginComponentExtensions({ extensionPointId });\n\n    return extensions.filter((e) => allowedPluginIds.includes(e.pluginId));\n  }, []);\n\n  if (loadError) {\n    return (\n      <DataSourceLoadError\n        dataSourceRights={dataSourceRights}\n        onDelete={() => {\n          trackDsConfigClicked('delete');\n          onDelete();\n        }}\n      />\n    );\n  }\n\n  if (loading) {\n    return <PageLoader />;\n  }\n\n  // TODO - is this needed?\n  if (!hasDataSource || !dsi) {\n    return null;\n  }\n\n  if (pageId) {\n    return (\n      <DataSourcePluginContextProvider instanceSettings={dsi}>\n        <DataSourcePluginConfigPage pageId={pageId} plugin={plugin} />\n      </DataSourcePluginContextProvider>\n    );\n  }\n\n  return (\n    <form onSubmit={onSubmit}>\n      {!hasWriteRights && <DataSourceMissingRightsMessage />}\n      {readOnly && <DataSourceReadOnlyMessage />}\n      {dataSourceMeta.state && <DataSourcePluginState state={dataSourceMeta.state} />}\n\n      <CloudInfoBox dataSource={dataSource} />\n\n      <BasicSettings\n        dataSourceName={dataSource.name}\n        isDefault={dataSource.isDefault}\n        onDefaultChange={onDefaultChange}\n        onNameChange={onNameChange}\n        alertingSupported={alertingSupported}\n        disabled={readOnly || !hasWriteRights}\n      />\n\n      {plugin && (\n        <DataSourcePluginContextProvider instanceSettings={dsi}>\n          <DataSourcePluginSettings\n            plugin={plugin}\n            dataSource={dataSource}\n            dataSourceMeta={dataSourceMeta}\n            onModelChange={onOptionsChange}\n          />\n        </DataSourcePluginContextProvider>\n      )}\n\n      {/* Extension point */}\n      {extensions.map((extension) => {\n        const Component = extension.component as React.ComponentType<{\n          context: PluginExtensionDataSourceConfigContext<DataSourceJsonData>;\n        }>;\n\n        return (\n          <div key={extension.id}>\n            <Component\n              context={{\n                dataSource: omit(dataSource, ['secureJsonData']),\n                dataSourceMeta: dataSourceMeta,\n                testingStatus,\n                setJsonData: (jsonData) =>\n                  onOptionsChange({\n                    ...dataSource,\n                    jsonData: { ...dataSource.jsonData, ...jsonData },\n                  }),\n              }}\n            />\n          </div>\n        );\n      })}\n\n      <DataSourceTestingStatus testingStatus={testingStatus} exploreUrl={exploreUrl} dataSource={dataSource} />\n\n      <ButtonRow\n        onSubmit={onSubmit}\n        onDelete={() => {\n          trackDsConfigClicked('delete');\n          onDelete();\n        }}\n        onTest={() => {\n          trackDsConfigClicked('test');\n          onTest();\n        }}\n        canDelete={!readOnly && hasDeleteRights}\n        canSave={!readOnly && hasWriteRights}\n      />\n    </form>\n  );\n}\n","import React from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { LinkButton } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction } from 'app/types';\n\nimport { useDataSource } from '../state';\nimport { trackCreateDashboardClicked, trackDsConfigClicked, trackExploreClicked } from '../tracking';\nimport { constructDataSourceExploreUrl } from '../utils';\n\ninterface Props {\n  uid: string;\n}\n\nexport function EditDataSourceActions({ uid }: Props) {\n  const dataSource = useDataSource(uid);\n  const hasExploreRights = contextSrv.hasPermission(AccessControlAction.DataSourcesExplore);\n\n  return (\n    <>\n      {hasExploreRights && (\n        <LinkButton\n          variant=\"secondary\"\n          size=\"sm\"\n          href={constructDataSourceExploreUrl(dataSource)}\n          onClick={() => {\n            trackDsConfigClicked('explore');\n            trackExploreClicked({\n              grafana_version: config.buildInfo.version,\n              datasource_uid: dataSource.uid,\n              plugin_name: dataSource.typeName,\n              path: location.pathname,\n            });\n          }}\n        >\n          Explore data\n        </LinkButton>\n      )}\n      <LinkButton\n        size=\"sm\"\n        variant=\"secondary\"\n        href={`dashboard/new-with-ds/${dataSource.uid}`}\n        onClick={() => {\n          trackDsConfigClicked('build_a_dashboard');\n          trackCreateDashboardClicked({\n            grafana_version: config.buildInfo.version,\n            datasource_uid: dataSource.uid,\n            plugin_name: dataSource.typeName,\n            path: location.pathname,\n          });\n        }}\n      >\n        Build a dashboard\n      </LinkButton>\n    </>\n  );\n}\n","import React from 'react';\n\nimport { Badge } from '@grafana/ui';\nimport { PageInfoItem } from 'app/core/components/Page/types';\n\ntype DataSourceInfo = {\n  dataSourcePluginName: string;\n  alertingSupported: boolean;\n};\n\nexport const useDataSourceInfo = (dataSourceInfo: DataSourceInfo): PageInfoItem[] => {\n  const info: PageInfoItem[] = [];\n  const alertingEnabled = dataSourceInfo.alertingSupported;\n\n  info.push({\n    label: 'Type',\n    value: dataSourceInfo.dataSourcePluginName,\n  });\n\n  info.push({\n    label: 'Alerting',\n    value: (\n      <Badge color={alertingEnabled ? 'green' : 'red'} text={alertingEnabled ? 'Supported' : 'Not supported'}></Badge>\n    ),\n  });\n\n  return info;\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\ninterface Props {\n  title: string;\n}\n\nexport function DataSourceTitle({ title }: Props) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <h1 className={styles.title}>{title}</h1>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      marginBottom: theme.spacing(2),\n      h1: {\n        display: 'inline-block',\n      },\n    }),\n    title: css({\n      display: 'inline-block',\n      margin: '0 0 0 0',\n      maxWidth: '40vw',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap',\n    }),\n  };\n};\n","import React from 'react';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { useDataSourceSettingsNav } from 'app/features/connections/hooks/useDataSourceSettingsNav';\n\nimport { EditDataSource } from '../components/EditDataSource';\nimport { EditDataSourceActions } from '../components/EditDataSourceActions';\nimport { useDataSourceInfo } from '../components/useDataSourceInfo';\n\nimport { DataSourceTitle } from './DataSourceTitle';\n\nexport interface Props {\n  uid: string;\n  pageId: string | null;\n}\n\nexport function DataSourceTabPage({ uid, pageId }: Props) {\n  const { navId, pageNav, dataSourceHeader } = useDataSourceSettingsNav();\n\n  const info = useDataSourceInfo({\n    dataSourcePluginName: pageNav.dataSourcePluginName,\n    alertingSupported: dataSourceHeader.alertingSupported,\n  });\n\n  return (\n    <Page\n      navId={navId}\n      pageNav={pageNav}\n      renderTitle={(title) => <DataSourceTitle title={title} />}\n      info={info}\n      actions={<EditDataSourceActions uid={uid} />}\n    >\n      <Page.Contents>\n        <EditDataSource uid={uid} pageId={pageId} />\n      </Page.Contents>\n    </Page>\n  );\n}\n\nexport default DataSourceTabPage;\n","import * as React from 'react';\nimport { useLocation, useParams } from 'react-router-dom';\n\nimport { config } from '@grafana/runtime';\nimport { Page } from 'app/core/components/Page/Page';\nimport DataSourceTabPage from 'app/features/datasources/components/DataSourceTabPage';\nimport { EditDataSource } from 'app/features/datasources/components/EditDataSource';\nimport { EditDataSourceActions } from 'app/features/datasources/components/EditDataSourceActions';\n\nimport { useDataSourceSettingsNav } from '../hooks/useDataSourceSettingsNav';\n\nexport function EditDataSourcePage() {\n  const { uid } = useParams<{ uid: string }>();\n  const location = useLocation();\n  const params = new URLSearchParams(location.search);\n  const pageId = params.get('page');\n  const dataSourcePageHeader = config.featureToggles.dataSourcePageHeader;\n  const { navId, pageNav } = useDataSourceSettingsNav();\n\n  if (dataSourcePageHeader) {\n    return <DataSourceTabPage uid={uid} pageId={pageId} />;\n  }\n\n  return (\n    <Page navId={navId} pageNav={pageNav} actions={<EditDataSourceActions uid={uid} />}>\n      <Page.Contents>\n        <EditDataSource uid={uid} pageId={pageId} />\n      </Page.Contents>\n    </Page>\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, PluginErrorCode, PluginSignatureStatus, PluginType } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Alert, HorizontalGroup, Icon, List, PluginSignatureBadge, useStyles2 } from '@grafana/ui';\n\nimport { useGetErrors, useFetchStatus } from '../admin/state/hooks';\n\ntype PluginsErrorInfoProps = {\n  filterByPluginType?: PluginType;\n};\n\nexport function PluginsErrorsInfo({ filterByPluginType }: PluginsErrorInfoProps) {\n  let errors = useGetErrors(filterByPluginType);\n  const { isLoading } = useFetchStatus();\n  const styles = useStyles2(getStyles);\n\n  if (isLoading || errors.length === 0) {\n    return null;\n  }\n\n  return (\n    <Alert\n      title=\"Unsigned plugins were found during plugin initialization. Grafana Labs cannot guarantee the integrity of these plugins. We recommend only using signed plugins.\"\n      aria-label={selectors.pages.PluginsList.signatureErrorNotice}\n      severity=\"warning\"\n    >\n      <p>The following plugins are disabled and not shown in the list below:</p>\n      <List\n        items={errors}\n        className={styles.list}\n        renderItem={(error) => (\n          <div className={styles.wrapper}>\n            <HorizontalGroup spacing=\"sm\" justify=\"flex-start\" align=\"center\">\n              <strong>{error.pluginId}</strong>\n              <PluginSignatureBadge\n                status={mapPluginErrorCodeToSignatureStatus(error.errorCode)}\n                className={styles.badge}\n              />\n            </HorizontalGroup>\n          </div>\n        )}\n      />\n      <a\n        href=\"https://grafana.com/docs/grafana/latest/plugins/plugin-signatures/\"\n        className={styles.docsLink}\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        <Icon name=\"book\" /> Read more about plugin signing\n      </a>\n    </Alert>\n  );\n}\n\nfunction mapPluginErrorCodeToSignatureStatus(code: PluginErrorCode) {\n  switch (code) {\n    case PluginErrorCode.invalidSignature:\n      return PluginSignatureStatus.invalid;\n    case PluginErrorCode.missingSignature:\n      return PluginSignatureStatus.missing;\n    case PluginErrorCode.modifiedSignature:\n      return PluginSignatureStatus.modified;\n    default:\n      return PluginSignatureStatus.missing;\n  }\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    list: css({\n      listStyleType: 'circle',\n    }),\n    wrapper: css({\n      marginTop: theme.spacing(1),\n    }),\n    badge: css({\n      marginTop: 0,\n    }),\n    docsLink: css({\n      display: 'inline-block',\n      color: theme.colors.text.link,\n      marginTop: theme.spacing(2),\n    }),\n  };\n}\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { DataSourcePluginMeta, GrafanaTheme2 } from '@grafana/data';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors';\nimport { Card, LinkButton, PluginSignatureBadge, useStyles2 } from '@grafana/ui';\n\nexport type Props = {\n  dataSourcePlugin: DataSourcePluginMeta;\n  onClick: () => void;\n};\n\nexport function DataSourceTypeCard({ onClick, dataSourcePlugin }: Props) {\n  const isPhantom = dataSourcePlugin.module === 'phantom';\n  const isClickable = !isPhantom && !dataSourcePlugin.unlicensed;\n  const learnMoreLink = dataSourcePlugin.info?.links?.length > 0 ? dataSourcePlugin.info.links[0] : null;\n  const learnMoreLinkTarget = learnMoreLink?.target ?? '_blank';\n\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Card className={cx(styles.card, 'card-parent')} onClick={isClickable ? onClick : () => {}}>\n      {/* Name */}\n      <Card.Heading\n        className={styles.heading}\n        aria-label={e2eSelectors.pages.AddDataSource.dataSourcePluginsV2(dataSourcePlugin.name)}\n      >\n        {dataSourcePlugin.name}\n      </Card.Heading>\n\n      {/* Logo */}\n      <Card.Figure align=\"center\" className={styles.figure}>\n        <img className={styles.logo} src={dataSourcePlugin.info.logos.small} alt=\"\" />\n      </Card.Figure>\n\n      <Card.Description className={styles.description}>{dataSourcePlugin.info.description}</Card.Description>\n\n      {/* Signature */}\n      {!isPhantom && (\n        <Card.Meta className={styles.meta}>\n          <PluginSignatureBadge status={dataSourcePlugin.signature} />\n        </Card.Meta>\n      )}\n\n      {/* Learn more */}\n      <Card.Actions className={styles.actions}>\n        {learnMoreLink && (\n          <LinkButton\n            aria-label={`${dataSourcePlugin.name}, learn more.`}\n            href={`${learnMoreLink.url}?utm_source=grafana_add_ds`}\n            onClick={(e) => e.stopPropagation()}\n            rel=\"noopener\"\n            target={learnMoreLinkTarget}\n            variant=\"secondary\"\n          >\n            {learnMoreLink.name}\n          </LinkButton>\n        )}\n      </Card.Actions>\n    </Card>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    heading: css({\n      fontSize: theme.v1.typography.heading.h5,\n      fontWeight: 'inherit',\n    }),\n    figure: css({\n      width: 'inherit',\n      marginRight: '0px',\n      '> img': {\n        width: theme.spacing(7),\n      },\n    }),\n    meta: css({\n      marginTop: '6px',\n      position: 'relative',\n    }),\n    description: css({\n      margin: '0px',\n      fontSize: theme.typography.size.sm,\n    }),\n    actions: css({\n      position: 'relative',\n      alignSelf: 'center',\n      marginTop: '0px',\n      opacity: 0,\n\n      '.card-parent:hover &, .card-parent:focus-within &': {\n        opacity: 1,\n      },\n    }),\n    card: css({\n      gridTemplateAreas: `\n        \"Figure   Heading   Actions\"\n        \"Figure Description Actions\"\n        \"Figure    Meta     Actions\"\n        \"Figure     -       Actions\"`,\n    }),\n    logo: css({\n      marginRight: theme.v1.spacing.lg,\n      marginLeft: theme.v1.spacing.sm,\n      width: theme.spacing(7),\n      maxHeight: theme.spacing(7),\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { DataSourcePluginMeta } from '@grafana/data';\nimport { List } from '@grafana/ui';\n\nimport { DataSourceTypeCard } from './DataSourceTypeCard';\n\nexport type Props = {\n  // The list of data-source plugins to display\n  dataSourcePlugins: DataSourcePluginMeta[];\n  // Called when a data-source plugin is clicked on in the list\n  onClickDataSourceType: (dataSource: DataSourcePluginMeta) => void;\n};\n\nexport function DataSourceTypeCardList({ dataSourcePlugins, onClickDataSourceType }: Props) {\n  if (!dataSourcePlugins || !dataSourcePlugins.length) {\n    return null;\n  }\n\n  return (\n    <List\n      items={dataSourcePlugins}\n      getItemKey={(item) => item.id.toString()}\n      renderItem={(item) => <DataSourceTypeCard dataSourcePlugin={item} onClick={() => onClickDataSourceType(item)} />}\n      className={css`\n        > li {\n          margin-bottom: 2px;\n        }\n      `}\n    />\n  );\n}\n","import React from 'react';\n\nimport { DataSourcePluginMeta } from '@grafana/data';\nimport { LinkButton } from '@grafana/ui';\nimport { DataSourcePluginCategory } from 'app/types';\n\nimport { ROUTES } from '../../connections/constants';\n\nimport { DataSourceTypeCardList } from './DataSourceTypeCardList';\n\nexport type Props = {\n  // The list of data-source plugin categories to display\n  categories: DataSourcePluginCategory[];\n\n  // Called when a data-source plugin is clicked on in the list\n  onClickDataSourceType: (dataSource: DataSourcePluginMeta) => void;\n};\n\nexport function DataSourceCategories({ categories, onClickDataSourceType }: Props) {\n  const moreDataSourcesLink = `${ROUTES.AddNewConnection}?cat=data-source`;\n\n  return (\n    <>\n      {/* Categories */}\n      {categories.map(({ id, title, plugins }) => (\n        <div className=\"add-data-source-category\" key={id}>\n          <div className=\"add-data-source-category__header\" id={id}>\n            {title}\n          </div>\n          <DataSourceTypeCardList dataSourcePlugins={plugins} onClickDataSourceType={onClickDataSourceType} />\n        </div>\n      ))}\n\n      {/* Find more */}\n      <div className=\"add-data-source-more\">\n        <LinkButton variant=\"secondary\" href={moreDataSourcesLink} target=\"_self\" rel=\"noopener\">\n          Find more data source plugins\n        </LinkButton>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\nimport { AnyAction } from 'redux';\n\nimport { DataSourcePluginMeta, PluginType } from '@grafana/data';\nimport { LinkButton, FilterInput } from '@grafana/ui';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { PluginsErrorsInfo } from 'app/features/plugins/components/PluginsErrorsInfo';\nimport { DataSourcePluginCategory, StoreState, useDispatch, useSelector } from 'app/types';\n\nimport { DataSourceCategories } from '../components/DataSourceCategories';\nimport { DataSourceTypeCardList } from '../components/DataSourceTypeCardList';\nimport {\n  useAddDatasource,\n  useLoadDataSourcePlugins,\n  getFilteredDataSourcePlugins,\n  setDataSourceTypeSearchQuery,\n  useDataSourcesRoutes,\n} from '../state';\n\nexport function NewDataSource() {\n  useLoadDataSourcePlugins();\n\n  const dispatch = useDispatch();\n  const filteredDataSources = useSelector((s: StoreState) => getFilteredDataSourcePlugins(s.dataSources));\n  const searchQuery = useSelector((s: StoreState) => s.dataSources.dataSourceTypeSearchQuery);\n  const isLoadingDatasourcePlugins = useSelector((s: StoreState) => s.dataSources.isLoadingDataSourcePlugins);\n  const dataSourceCategories = useSelector((s: StoreState) => s.dataSources.categories);\n  const onAddDataSource = useAddDatasource();\n  const onSetSearchQuery = (q: string) => dispatch(setDataSourceTypeSearchQuery(q));\n\n  return (\n    <NewDataSourceView\n      dataSources={filteredDataSources}\n      dataSourceCategories={dataSourceCategories}\n      searchQuery={searchQuery}\n      isLoading={isLoadingDatasourcePlugins}\n      onAddDataSource={onAddDataSource}\n      onSetSearchQuery={onSetSearchQuery}\n    />\n  );\n}\n\nexport type ViewProps = {\n  dataSources: DataSourcePluginMeta[];\n  dataSourceCategories: DataSourcePluginCategory[];\n  searchQuery: string;\n  isLoading: boolean;\n  onAddDataSource: (dataSource: DataSourcePluginMeta) => void;\n  onSetSearchQuery: (q: string) => AnyAction;\n};\n\nexport function NewDataSourceView({\n  dataSources,\n  dataSourceCategories,\n  searchQuery,\n  isLoading,\n  onAddDataSource,\n  onSetSearchQuery,\n}: ViewProps) {\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  if (isLoading) {\n    return <PageLoader />;\n  }\n\n  return (\n    <>\n      {/* Search */}\n      <div className=\"page-action-bar\">\n        <FilterInput value={searchQuery} onChange={onSetSearchQuery} placeholder=\"Filter by name or type\" />\n        <div className=\"page-action-bar__spacer\" />\n        <LinkButton href={dataSourcesRoutes.List} fill=\"outline\" variant=\"secondary\" icon=\"arrow-left\">\n          Cancel\n        </LinkButton>\n      </div>\n\n      {/* Show datasource plugin errors while not searching for anything specific */}\n      {!searchQuery && <PluginsErrorsInfo filterByPluginType={PluginType.datasource} />}\n\n      {/* Search results */}\n      <div>\n        {searchQuery && (\n          <DataSourceTypeCardList dataSourcePlugins={dataSources} onClickDataSourceType={onAddDataSource} />\n        )}\n        {!searchQuery && (\n          <DataSourceCategories categories={dataSourceCategories} onClickDataSourceType={onAddDataSource} />\n        )}\n      </div>\n    </>\n  );\n}\n","import * as React from 'react';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { NewDataSource } from 'app/features/datasources/components/NewDataSource';\n\nexport function NewDataSourcePage() {\n  return (\n    <Page\n      navId={'connections-datasources'}\n      pageNav={{ text: 'Add data source', subTitle: 'Choose a data source type', active: true }}\n    >\n      <Page.Contents>\n        <NewDataSource />\n      </Page.Contents>\n    </Page>\n  );\n}\n","import * as React from 'react';\nimport { Redirect, Route, Switch, useLocation } from 'react-router-dom';\n\nimport { DataSourcesRoutesContext } from 'app/features/datasources/state';\nimport { StoreState, useSelector } from 'app/types';\n\nimport { ROUTES } from './constants';\nimport {\n  AddNewConnectionPage,\n  DataSourceDashboardsPage,\n  DataSourceDetailsPage,\n  DataSourcesListPage,\n  EditDataSourcePage,\n  NewDataSourcePage,\n} from './pages';\n\nfunction RedirectToAddNewConnection() {\n  const { search } = useLocation();\n  return (\n    <Redirect\n      to={{\n        pathname: ROUTES.AddNewConnection,\n        search,\n      }}\n    />\n  );\n}\n\nexport default function Connections() {\n  const navIndex = useSelector((state: StoreState) => state.navIndex);\n  const isAddNewConnectionPageOverridden = Boolean(navIndex['standalone-plugin-page-/connections/add-new-connection']);\n\n  return (\n    <DataSourcesRoutesContext.Provider\n      value={{\n        New: ROUTES.DataSourcesNew,\n        List: ROUTES.DataSources,\n        Edit: ROUTES.DataSourcesEdit,\n        Dashboards: ROUTES.DataSourcesDashboards,\n      }}\n    >\n      <Switch>\n        {/* Redirect to \"Add new connection\" by default */}\n        <Route exact sensitive path={ROUTES.Base} component={() => <Redirect to={ROUTES.AddNewConnection} />} />\n        <Route exact sensitive path={ROUTES.DataSources} component={DataSourcesListPage} />\n        <Route exact sensitive path={ROUTES.DataSourcesNew} component={NewDataSourcePage} />\n        <Route exact sensitive path={ROUTES.DataSourcesDetails} component={DataSourceDetailsPage} />\n        <Route exact sensitive path={ROUTES.DataSourcesEdit} component={EditDataSourcePage} />\n        <Route exact sensitive path={ROUTES.DataSourcesDashboards} component={DataSourceDashboardsPage} />\n\n        {/* \"Add new connection\" page - we don't register a route in case a plugin already registers a standalone page for it */}\n        {!isAddNewConnectionPageOverridden && (\n          <Route exact sensitive path={ROUTES.AddNewConnection} component={AddNewConnectionPage} />\n        )}\n\n        {/* Redirect from earlier routes to updated routes */}\n        <Route exact path={ROUTES.ConnectDataOutdated} component={RedirectToAddNewConnection} />\n        <Redirect from={`${ROUTES.Base}/your-connections/:page`} to={`${ROUTES.Base}/:page`} />\n        <Redirect from={ROUTES.YourConnectionsOutdated} to={ROUTES.DataSources} />\n\n        {/* Not found */}\n        <Route component={() => <Redirect to=\"/notfound\" />} />\n      </Switch>\n    </DataSourcesRoutesContext.Provider>\n  );\n}\n","import React from 'react';\n\nimport { PluginState } from '@grafana/data';\nimport { Badge, BadgeProps } from '@grafana/ui';\n\ninterface Props {\n  state?: PluginState;\n  className?: string;\n}\n\nexport const PluginStateInfo = (props: Props) => {\n  const display = getFeatureStateInfo(props.state);\n\n  if (!display) {\n    return null;\n  }\n\n  return (\n    <Badge\n      className={props.className}\n      color={display.color}\n      title={display.tooltip}\n      text={display.text}\n      icon={display.icon}\n    />\n  );\n};\n\nfunction getFeatureStateInfo(state?: PluginState): BadgeProps | null {\n  switch (state) {\n    case PluginState.deprecated:\n      return {\n        text: 'Deprecated',\n        color: 'red',\n        tooltip: `This feature is deprecated and will be removed in a future release`,\n      };\n    case PluginState.alpha:\n      return {\n        text: 'Alpha',\n        color: 'blue',\n        tooltip: `This feature is experimental and future updates might not be backward compatible`,\n      };\n    case PluginState.beta:\n      return {\n        text: 'Beta',\n        color: 'blue',\n        tooltip: `This feature is close to complete but not fully tested`,\n      };\n    default:\n      return null;\n  }\n}\n"],"names":["Grid","props","ref","children","gap","columns","minColumnWidth","rest","styles","getGridStyles","theme","PageActionBar","searchQuery","linkButton","setSearchQuery","target","placeholder","sortPicker","linkProps","defaultSortOptionsGetter","SortPicker","onChange","value","filter","getSortOptions","isClearable","options","vals","v","isDesc","opt","getStyles","CardGrid","items","onClickItem","item","Card","e","CategoryHeader","iconName","label","Icon","NoAccessModal","isOpen","onDismiss","Modal","NoAccessModalHeader","Button","NoResults","Search","Input","AddNewConnection","searchTerm","setSearchTerm","isNoAccessModalOpen","setIsNoAccessModalOpen","focusedItem","setFocusedItem","canCreateDataSources","handleSearchChange","error","plugins","isLoading","cardGridItems","plugin","onClickCardGridItem","openModal","closeModal","showNoResults","categoryHeaderLabel","LoadingPlaceholder","AddNewConnectionPage","Page","DataSourceDetailsPage","overrideNavId","id","navId","state","PluginDetailsPage","NotFoundDatasource","Alert","Badge","DataSourceAddButton","canCreateDataSource","dataSourcesRoutes","config","ascendingSortValue","descendingSortValue","sortOptions","DataSourcesListHeader","dispatch","q","dataSources","setSort","sort","isSortAscending","DataSourcesList","dataSourcesCount","hasCreateRights","hasWriteRights","hasExploreRights","DataSourcesListView","location","PageLoader","EmptyListCTA","dataSource","dsLink","Tag","DataSourcesListPage","actions","DataSourceDashboards","uid","s","dashboards","onImportDashboard","dashboard","overwrite","onRemoveDashboard","DataSourceDashboardsView","useDataSourceSettingsNav","pageIdParam","datasource","dataSourceMeta","datasourcePlugin","params","pageId","loadError","loading","dsi","hasAlertingEnabled","isAlertManagerDatasource","alertingSupported","navIndex","navIndexId","pageNav","node","navModelItem","DataSourceDashboardsPage","BasicSettings","dataSourceName","isDefault","onDefaultChange","onNameChange","disabled","AlertingEnabled","InlineField","event","selectors","enabled","ButtonRow","canSave","canDelete","onDelete","onSubmit","onTest","LOCAL_STORAGE_KEY","CloudInfoBox","mainDS","extraDS","LocalStorageValueProvider","isDismissed","readOnlyMessage","DataSourceReadOnlyMessage","DataSourceLoadError","dataSourceRights","readOnly","hasDeleteRights","navigateBack","missingRightsMessage","DataSourceMissingRightsMessage","DataSourcePluginConfigPage","page","DataSourcePluginSettings","loader","template","prevProps","element","DataSourcePluginState","PluginStateInfo","hasTitle","AlertSuccessMessage","title","exploreUrl","dataSourceId","onDashboardLinkClicked","canExploreDataSources","Link","alertVariants","isAlertVariant","str","getAlertVariant","status","DataSourceTestingStatus","testingStatus","severity","message","detailsMessage","detailsVerboseMessage","EditDataSource","dataSourceSettings","onUpdate","name","onOptionsChange","ds","EditDataSourceView","hasDataSource","extensions","allowedPluginIds","extensionPointId","DataSourcePluginContextProvider","extension","Component","jsonData","EditDataSourceActions","useDataSourceInfo","dataSourceInfo","info","alertingEnabled","DataSourceTitle","DataSourceTabPage","dataSourceHeader","EditDataSourcePage","dataSourcePageHeader","PluginsErrorsInfo","filterByPluginType","errors","List","PluginSignatureBadge","mapPluginErrorCodeToSignatureStatus","code","DataSourceTypeCard","onClick","dataSourcePlugin","isPhantom","isClickable","learnMoreLink","learnMoreLinkTarget","DataSourceTypeCardList","dataSourcePlugins","onClickDataSourceType","DataSourceCategories","categories","moreDataSourcesLink","NewDataSource","filteredDataSources","isLoadingDatasourcePlugins","dataSourceCategories","onAddDataSource","onSetSearchQuery","NewDataSourceView","FilterInput","NewDataSourcePage","RedirectToAddNewConnection","search","Connections","isAddNewConnectionPageOverridden","display","getFeatureStateInfo"],"sourceRoot":""}