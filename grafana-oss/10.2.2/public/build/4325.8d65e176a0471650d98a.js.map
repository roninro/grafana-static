{"version":3,"file":"4325.8d65e176a0471650d98a.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/Provisioning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/dag.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/util.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-viewer/RuleViewerVisualization.tsx","webpack://grafana/./public/app/features/alerting/unified/GrafanaRuleQueryViewer.tsx","webpack://grafana/./public/app/features/alerting/unified/utils/query.ts","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleDetailsFederatedSources.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-viewer/RuleViewer.v1.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-viewer/RuleViewerLayout.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleHealth.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleState.tsx","webpack://grafana/./public/app/features/expressions/guards.ts"],"sourcesContent":["import React from 'react';\n\nimport { Alert, Badge } from '@grafana/ui';\n\nexport enum ProvisionedResource {\n  ContactPoint = 'contact point',\n  Template = 'template',\n  MuteTiming = 'mute timing',\n  AlertRule = 'alert rule',\n  RootNotificationPolicy = 'root notification policy',\n}\n\ninterface ProvisioningAlertProps {\n  resource: ProvisionedResource;\n}\n\nexport const ProvisioningAlert = ({ resource }: ProvisioningAlertProps) => {\n  return (\n    <Alert title={`This ${resource} cannot be edited through the UI`} severity=\"info\">\n      This {resource} has been provisioned, that means it was created by config. Please contact your server admin to\n      update this {resource}.\n    </Alert>\n  );\n};\n\nexport const ProvisioningBadge = () => {\n  return <Badge text={'Provisioned'} color={'purple'} />;\n};\n","import { compact, memoize, uniq } from 'lodash';\nimport memoizeOne from 'memoize-one';\n\nimport { Edge, Graph, Node } from 'app/core/utils/dag';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\n// memoized version of _createDagFromQueries to prevent recreating the DAG if no sources or targets are modified\nexport const createDagFromQueries = memoizeOne(\n  _createDagFromQueries,\n  (previous: Parameters<typeof _createDagFromQueries>, next: Parameters<typeof _createDagFromQueries>) => {\n    return fingerPrintQueries(previous[0]) === fingerPrintQueries(next[0]);\n  }\n);\n\n/**\n * Turn the array of alert queries (this means data queries and expressions)\n * in to a DAG, a directed acyclical graph\n */\nexport function _createDagFromQueries(queries: AlertQuery[]): Graph {\n  const graph = new Graph();\n\n  const nodes = queries.map((query) => query.refId);\n  graph.createNodes(nodes);\n\n  queries.forEach((query) => {\n    const source = query.refId;\n    const isMathExpression = isExpressionQuery(query.model) && query.model.type === 'math';\n\n    // some expressions have multiple targets (like the math expression)\n    const targets = isMathExpression\n      ? parseRefsFromMathExpression(query.model.expression ?? '')\n      : [query.model.expression];\n\n    targets.forEach((target) => {\n      const isSelf = source === target;\n\n      if (source && target && !isSelf) {\n        graph.link(target, source);\n      }\n    });\n  });\n\n  return graph;\n}\n\n/**\n * parse an expression like \"$A > $B\" or \"${FOO BAR} > 0\" to an array of refIds\n */\nexport function parseRefsFromMathExpression(input: string): string[] {\n  // we'll use two regular expressions, one for \"${var}\" and one for \"$var\"\n  const r1 = new RegExp(/\\$\\{(?<var>[a-zA-Z0-9_ ]+?)\\}/gm);\n  const r2 = new RegExp(/\\$(?<var>[a-zA-Z0-9_]+)/gm);\n\n  const m1 = Array.from(input.matchAll(r1)).map((m) => m.groups?.var);\n  const m2 = Array.from(input.matchAll(r2)).map((m) => m.groups?.var);\n\n  return compact(uniq([...m1, ...m2]));\n}\n\nexport const getOriginOfRefId = memoize(_getOriginsOfRefId, (refId, graph) => refId + fingerprintGraph(graph));\n\nexport function _getOriginsOfRefId(refId: string, graph: Graph): string[] {\n  const node = graph.getNode(refId);\n\n  let origins: Node[] = [];\n\n  // recurse through \"node > inputEdges > inputNode\"\n  function findChildNode(node: Node) {\n    const inputEdges = node.inputEdges;\n\n    if (inputEdges.length > 0) {\n      inputEdges.forEach((edge) => {\n        if (edge.inputNode) {\n          findChildNode(edge.inputNode);\n        }\n      });\n    } else {\n      origins?.push(node);\n    }\n  }\n\n  findChildNode(node);\n\n  return origins.map((origin) => origin.name);\n}\n\n// create a unique fingerprint of the DAG\nexport function fingerprintGraph(graph: Graph) {\n  return Object.keys(graph.nodes)\n    .map((name) => {\n      const n = graph.nodes[name];\n      let outputEdges = n.outputEdges.map((e: Edge) => e.outputNode?.name).join(', ');\n      let inputEdges = n.inputEdges.map((e: Edge) => e.inputNode?.name).join(', ');\n      return `${n.name}:${outputEdges}:${inputEdges}`;\n    })\n    .join(' ');\n}\n\n// create a unique fingerprint of the array of queries\nexport function fingerPrintQueries(queries: AlertQuery[]) {\n  return queries\n    .map((query) => {\n      const type = isExpressionQuery(query.model) ? query.model.type : query.queryType;\n      return query.refId + (query.model.expression ?? '') + type;\n    })\n    .join();\n}\n","import { xor } from 'lodash';\nimport { ValidateResult } from 'react-hook-form';\n\nimport {\n  DataFrame,\n  isTimeSeriesFrames,\n  LoadingState,\n  PanelData,\n  ThresholdsConfig,\n  ThresholdsMode,\n} from '@grafana/data';\nimport { GraphTresholdsStyleMode } from '@grafana/schema';\nimport { config } from 'app/core/config';\nimport { EvalFunction } from 'app/features/alerting/state/alertDef';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { ClassicCondition, ExpressionQueryType } from 'app/features/expressions/types';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { RuleFormType } from '../../types/rule-form';\n\nimport { createDagFromQueries, getOriginOfRefId } from './dag';\n\nexport function queriesWithUpdatedReferences(\n  queries: AlertQuery[],\n  previousRefId: string,\n  newRefId: string\n): AlertQuery[] {\n  return queries.map((query) => {\n    if (previousRefId === newRefId) {\n      return query;\n    }\n\n    if (!isExpressionQuery(query.model)) {\n      return query;\n    }\n\n    const isMathExpression = query.model.type === 'math';\n    const isReduceExpression = query.model.type === 'reduce';\n    const isResampleExpression = query.model.type === 'resample';\n    const isClassicExpression = query.model.type === 'classic_conditions';\n    const isThresholdExpression = query.model.type === 'threshold';\n\n    if (isMathExpression) {\n      return {\n        ...query,\n        model: {\n          ...query.model,\n          expression: updateMathExpressionRefs(query.model.expression ?? '', previousRefId, newRefId),\n        },\n      };\n    }\n\n    if (isResampleExpression || isReduceExpression || isThresholdExpression) {\n      const isReferencing = query.model.expression === previousRefId;\n\n      return {\n        ...query,\n        model: {\n          ...query.model,\n          expression: isReferencing ? newRefId : query.model.expression,\n        },\n      };\n    }\n\n    if (isClassicExpression) {\n      const conditions = query.model.conditions?.map((condition) => ({\n        ...condition,\n        query: {\n          ...condition.query,\n          params: condition.query.params.map((param: string) => (param === previousRefId ? newRefId : param)),\n        },\n      }));\n\n      return { ...query, model: { ...query.model, conditions } };\n    }\n\n    return query;\n  });\n}\n\nexport function updateMathExpressionRefs(expression: string, previousRefId: string, newRefId: string): string {\n  const oldExpression = new RegExp('(\\\\$' + previousRefId + '\\\\b)|(\\\\${' + previousRefId + '})', 'gm');\n  const newExpression = '${' + newRefId + '}';\n\n  return expression.replace(oldExpression, newExpression);\n}\n\nexport function refIdExists(queries: AlertQuery[], refId: string | null): boolean {\n  return queries.find((query) => query.refId === refId) !== undefined;\n}\n\n// some gateways (like Istio) will decode \"/\" and \"\\\" characters – this will cause 404 errors for any API call\n// that includes these values in the URL (ie. /my/path%2fto/resource -> /my/path/to/resource)\n//\n// see https://istio.io/latest/docs/ops/best-practices/security/#customize-your-system-on-path-normalization\nexport function checkForPathSeparator(value: string): ValidateResult {\n  const containsPathSeparator = value.includes('/') || value.includes('\\\\');\n  if (containsPathSeparator) {\n    return 'Cannot contain \"/\" or \"\\\\\" characters';\n  }\n\n  return true;\n}\n\n// this function assumes we've already checked if the data passed in to the function is of the alert condition\nexport function errorFromCurrentCondition(data: PanelData): Error | undefined {\n  if (data.series.length === 0) {\n    return;\n  }\n\n  const isTimeSeriesResults = isTimeSeriesFrames(data.series);\n\n  let error;\n  if (isTimeSeriesResults) {\n    error = new Error('You cannot use time series data as an alert condition, consider adding a reduce expression.');\n  }\n\n  return error;\n}\n\nexport function errorFromPreviewData(data: PanelData): Error | undefined {\n  // give preference to QueryErrors\n  if (data.errors?.length) {\n    return new Error(data.errors[0].message);\n  }\n\n  return;\n}\n\nexport function warningFromSeries(series: DataFrame[]): Error | undefined {\n  const notices = series[0]?.meta?.notices ?? [];\n  const warning = notices.find((notice) => notice.severity === 'warning')?.text;\n\n  return warning ? new Error(warning) : undefined;\n}\n\nexport type ThresholdDefinition = {\n  config: ThresholdsConfig;\n  mode: GraphTresholdsStyleMode;\n};\n\nexport type ThresholdDefinitions = Record<string, ThresholdDefinition>;\n\n/**\n * This function will retrieve threshold definitions for the given array of data and expression queries.\n */\nexport function getThresholdsForQueries(queries: AlertQuery[]) {\n  const thresholds: ThresholdDefinitions = {};\n  const SUPPORTED_EXPRESSION_TYPES = [ExpressionQueryType.threshold, ExpressionQueryType.classic];\n\n  for (const query of queries) {\n    if (!isExpressionQuery(query.model)) {\n      continue;\n    }\n\n    // currently only supporting \"threshold\" & \"classic_condition\" expressions\n    if (!SUPPORTED_EXPRESSION_TYPES.includes(query.model.type)) {\n      continue;\n    }\n\n    if (!Array.isArray(query.model.conditions)) {\n      continue;\n    }\n\n    // if any of the conditions are a \"range\" we switch to an \"area\" threshold view and ignore single threshold values\n    // the time series panel does not support both.\n    const hasRangeThreshold = query.model.conditions.some(isRangeCondition);\n\n    query.model.conditions.forEach((condition) => {\n      const threshold = condition.evaluator.params;\n\n      // \"classic_conditions\" use `condition.query.params[]` and \"threshold\" uses `query.model.expression`\n      const refId = condition.query?.params[0] ?? query.model.expression;\n\n      // if an expression hasn't been linked to a data query yet, it won't have a refId\n      if (!refId) {\n        return;\n      }\n\n      const isRangeThreshold = isRangeCondition(condition);\n\n      try {\n        // create a DAG so we can find the origin of the current expression\n        const graph = createDagFromQueries(queries);\n\n        const originRefIDs = getOriginOfRefId(refId, graph);\n        const originQueries = queries.filter((query) => originRefIDs.includes(query.refId));\n\n        originQueries.forEach((originQuery) => {\n          const originRefID = originQuery.refId;\n\n          // check if the origin is a data query\n          const originIsDataQuery = !isExpressionQuery(originQuery?.model);\n\n          // if yes, add threshold config to the refId of the data Query\n          const hasValidOrigin = Boolean(originIsDataQuery && originRefID);\n\n          // create the initial data structure for this origin refId\n          if (originRefID && !thresholds[originRefID]) {\n            thresholds[originRefID] = {\n              config: {\n                mode: ThresholdsMode.Absolute,\n                steps: [],\n              },\n              mode: GraphTresholdsStyleMode.Line,\n            };\n          }\n\n          if (originRefID && hasValidOrigin && !isRangeThreshold && !hasRangeThreshold) {\n            appendSingleThreshold(originRefID, threshold[0]);\n          } else if (originRefID && hasValidOrigin && isRangeThreshold) {\n            appendRangeThreshold(originRefID, threshold, condition.evaluator.type);\n            thresholds[originRefID].mode = GraphTresholdsStyleMode.LineAndArea;\n          }\n        });\n      } catch (err) {\n        console.error('Failed to parse thresholds', err);\n        return;\n      }\n    });\n  }\n\n  function appendSingleThreshold(refId: string, value: number): void {\n    thresholds[refId].config.steps.push(\n      ...[\n        {\n          value: -Infinity,\n          color: 'transparent',\n        },\n        {\n          value: value,\n          color: config.theme2.colors.error.main,\n        },\n      ]\n    );\n  }\n\n  function appendRangeThreshold(refId: string, values: number[], type: EvalFunction): void {\n    if (type === EvalFunction.IsWithinRange) {\n      thresholds[refId].config.steps.push(\n        ...[\n          {\n            value: -Infinity,\n            color: 'transparent',\n          },\n          {\n            value: values[0],\n            color: config.theme2.colors.error.main,\n          },\n          {\n            value: values[1],\n            color: config.theme2.colors.error.main,\n          },\n          {\n            value: values[1],\n            color: 'transparent',\n          },\n        ]\n      );\n    }\n\n    if (type === EvalFunction.IsOutsideRange) {\n      thresholds[refId].config.steps.push(\n        ...[\n          {\n            value: -Infinity,\n            color: config.theme2.colors.error.main,\n          },\n          // we have to duplicate this value, or the graph will not display the handle in the right color\n          {\n            value: values[0],\n            color: config.theme2.colors.error.main,\n          },\n          {\n            value: values[0],\n            color: 'transparent',\n          },\n          {\n            value: values[1],\n            color: config.theme2.colors.error.main,\n          },\n        ]\n      );\n    }\n\n    // now also sort the threshold values, if we don't then they will look weird in the time series panel\n    // TODO this doesn't work for negative values for now, those need to be sorted inverse\n    thresholds[refId].config.steps.sort((a, b) => a.value - b.value);\n\n    // also make sure we remove any \"undefined\" values from our steps in case the threshold config is incomplete\n    thresholds[refId].config.steps = thresholds[refId].config.steps.filter((step) => step.value !== undefined);\n  }\n\n  return thresholds;\n}\n\nfunction isRangeCondition(condition: ClassicCondition) {\n  return (\n    condition.evaluator.type === EvalFunction.IsWithinRange || condition.evaluator.type === EvalFunction.IsOutsideRange\n  );\n}\n\nexport function getStatusMessage(data: PanelData): string | undefined {\n  const genericErrorMessage = 'Failed to fetch data';\n  if (data.state !== LoadingState.Error) {\n    return;\n  }\n\n  const errors = data.errors;\n  if (errors?.length) {\n    return errors.map((error) => error.message ?? genericErrorMessage).join(', ');\n  }\n\n  return data.error?.message ?? genericErrorMessage;\n}\n\nexport function translateRouteParamToRuleType(param = ''): RuleFormType {\n  if (param === 'recording') {\n    return RuleFormType.cloudRecording;\n  }\n\n  return RuleFormType.grafana;\n}\n\n/**\n * This function finds what refIds have been updated given the previous Array of queries and an Array of updated data queries.\n * All expression queries are discarded from the arrays, since we have separate handlers for those (see \"onUpdateRefId\") of the ExpressionEditor\n *\n * This code assumes not more than 1 query refId has changed per \"onChangeQueries\",\n */\nexport function findRenamedDataQueryReferences(\n  previousQueries: AlertQuery[],\n  updatedQueries: AlertQuery[]\n): [string, string] {\n  const updatedDataQueries = updatedQueries\n    .filter((query) => !isExpressionQuery(query.model))\n    .map((query) => query.refId);\n  const previousDataQueries = previousQueries\n    .filter((query) => !isExpressionQuery(query.model))\n    .map((query) => query.refId);\n\n  // given the following two arrays\n  // ['A', 'B', 'C'] and ['FOO', 'B' 'C']\n  // the \"xor\" function will return ['A', 'FOO'] because those are not in both arrays\n  const [oldRefId, newRefId] = xor(previousDataQueries, updatedDataQueries);\n\n  return [oldRefId, newRefId];\n}\n","import { css } from '@emotion/css';\nimport React, { useCallback } from 'react';\n\nimport {\n  DataSourceInstanceSettings,\n  DataSourceJsonData,\n  DateTime,\n  dateTime,\n  GrafanaTheme2,\n  PanelData,\n  RelativeTimeRange,\n  urlUtil,\n} from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { DataSourceRef } from '@grafana/schema';\nimport { DateTimePicker, LinkButton, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { AlertDataQuery, AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { VizWrapper } from '../rule-editor/VizWrapper';\nimport { ThresholdDefinition } from '../rule-editor/util';\n\ninterface RuleViewerVisualizationProps extends Pick<AlertQuery, 'refId' | 'model' | 'relativeTimeRange'> {\n  dsSettings: DataSourceInstanceSettings<DataSourceJsonData>;\n  data?: PanelData;\n  thresholds?: ThresholdDefinition;\n  onTimeRangeChange: (range: RelativeTimeRange) => void;\n  className?: string;\n}\n\nconst headerHeight = 4;\n\nexport function RuleViewerVisualization({\n  data,\n  model,\n  thresholds,\n  dsSettings,\n  relativeTimeRange,\n  onTimeRangeChange,\n  className,\n}: RuleViewerVisualizationProps): JSX.Element | null {\n  const styles = useStyles2(getStyles);\n  const isExpression = isExpressionQuery(model);\n\n  const onTimeChange = useCallback(\n    (newDateTime: DateTime) => {\n      const now = dateTime().unix() - newDateTime.unix();\n\n      if (relativeTimeRange) {\n        const interval = relativeTimeRange.from - relativeTimeRange.to;\n        onTimeRangeChange({ from: now + interval, to: now });\n      }\n    },\n    [onTimeRangeChange, relativeTimeRange]\n  );\n\n  const setDateTime = useCallback((relativeTimeRangeTo: number) => {\n    return relativeTimeRangeTo === 0 ? dateTime() : dateTime().subtract(relativeTimeRangeTo, 'seconds');\n  }, []);\n\n  if (!data) {\n    return null;\n  }\n\n  const allowedToExploreDataSources = contextSrv.hasAccessToExplore();\n\n  return (\n    <div className={className}>\n      <div className={styles.header}>\n        <div className={styles.actions}>\n          {!isExpression && relativeTimeRange ? (\n            <DateTimePicker date={setDateTime(relativeTimeRange.to)} onChange={onTimeChange} maxDate={new Date()} />\n          ) : null}\n\n          {allowedToExploreDataSources && !isExpression && (\n            <LinkButton\n              size=\"md\"\n              variant=\"secondary\"\n              icon=\"compass\"\n              target=\"_blank\"\n              href={createExploreLink(dsSettings, model)}\n            >\n              View in Explore\n            </LinkButton>\n          )}\n        </div>\n      </div>\n      <VizWrapper data={data} thresholds={thresholds?.config} thresholdsType={thresholds?.mode} />\n    </div>\n  );\n}\n\nfunction createExploreLink(settings: DataSourceRef, model: AlertDataQuery): string {\n  const { uid, type } = settings;\n  const { refId, ...rest } = model;\n\n  /*\n    In my testing I've found some alerts that don't have a data source embedded inside the model.\n    At this moment in time it is unclear to me why some alert definitions not have a data source embedded in the model.\n\n    I don't think that should happen here, the fact that the datasource ref is sometimes missing here is a symptom of another cause. (Gilles)\n   */\n  return urlUtil.renderUrl(`${config.appSubUrl}/explore`, {\n    left: JSON.stringify({\n      datasource: settings.uid,\n      queries: [{ refId: 'A', ...rest, datasource: { type, uid } }],\n      range: { from: 'now-1h', to: 'now' },\n    }),\n  });\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    header: css`\n      height: ${theme.spacing(headerHeight)};\n      display: flex;\n      align-items: center;\n      justify-content: flex-end;\n      white-space: nowrap;\n      margin-bottom: ${theme.spacing(2)};\n    `,\n    refId: css`\n      font-weight: ${theme.typography.fontWeightMedium};\n      color: ${theme.colors.text.link};\n      overflow: hidden;\n    `,\n    dataSource: css`\n      margin-left: ${theme.spacing(1)};\n      font-style: italic;\n      color: ${theme.colors.text.secondary};\n    `,\n    actions: css`\n      display: flex;\n      align-items: center;\n    `,\n    errorMessage: css`\n      white-space: pre-wrap;\n    `,\n  };\n};\n","import { css, cx } from '@emotion/css';\nimport { dump } from 'js-yaml';\nimport { keyBy, startCase } from 'lodash';\nimport React from 'react';\n\nimport { DataSourceInstanceSettings, GrafanaTheme2, PanelData, RelativeTimeRange } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { Badge, useStyles2 } from '@grafana/ui';\nimport { mapRelativeTimeRangeToOption } from '@grafana/ui/src/components/DateTimePickers/RelativeTimeRangePicker/utils';\n\nimport { AlertQuery } from '../../../types/unified-alerting-dto';\nimport { isExpressionQuery } from '../../expressions/guards';\nimport {\n  downsamplingTypes,\n  ExpressionQuery,\n  ExpressionQueryType,\n  reducerModes,\n  ReducerMode,\n  reducerTypes,\n  thresholdFunctions,\n  upsamplingTypes,\n} from '../../expressions/types';\nimport alertDef, { EvalFunction } from '../state/alertDef';\n\nimport { ExpressionResult } from './components/expressions/Expression';\nimport { getThresholdsForQueries, ThresholdDefinition } from './components/rule-editor/util';\nimport { RuleViewerVisualization } from './components/rule-viewer/RuleViewerVisualization';\n\ninterface GrafanaRuleViewerProps {\n  queries: AlertQuery[];\n  condition: string;\n  evalDataByQuery?: Record<string, PanelData>;\n  evalTimeRanges?: Record<string, RelativeTimeRange>;\n  onTimeRangeChange: (queryRef: string, timeRange: RelativeTimeRange) => void;\n}\n\nexport function GrafanaRuleQueryViewer({\n  queries,\n  condition,\n  evalDataByQuery = {},\n  evalTimeRanges = {},\n  onTimeRangeChange,\n}: GrafanaRuleViewerProps) {\n  const dsByUid = keyBy(Object.values(config.datasources), (ds) => ds.uid);\n  const dataQueries = queries.filter((q) => !isExpressionQuery(q.model));\n  const expressions = queries.filter((q) => isExpressionQuery(q.model));\n  const styles = useStyles2(getExpressionViewerStyles);\n\n  const thresholds = getThresholdsForQueries(queries);\n\n  return (\n    <Stack gap={2} direction=\"column\">\n      <div className={styles.maxWidthContainer}>\n        <Stack gap={2}>\n          {dataQueries.map(({ model, relativeTimeRange, refId, datasourceUid }, index) => {\n            const dataSource = dsByUid[datasourceUid];\n\n            return (\n              <QueryPreview\n                key={index}\n                refId={refId}\n                isAlertCondition={condition === refId}\n                model={model}\n                relativeTimeRange={relativeTimeRange}\n                evalTimeRange={evalTimeRanges[refId]}\n                dataSource={dataSource}\n                thresholds={thresholds[refId]}\n                queryData={evalDataByQuery[refId]}\n                onEvalTimeRangeChange={(timeRange) => onTimeRangeChange(refId, timeRange)}\n              />\n            );\n          })}\n        </Stack>\n      </div>\n      <div className={styles.maxWidthContainer}>\n        <Stack gap={1}>\n          {expressions.map(({ model, refId, datasourceUid }, index) => {\n            const dataSource = dsByUid[datasourceUid];\n\n            return (\n              isExpressionQuery(model) && (\n                <ExpressionPreview\n                  key={index}\n                  refId={refId}\n                  isAlertCondition={condition === refId}\n                  model={model}\n                  dataSource={dataSource}\n                  evalData={evalDataByQuery[refId]}\n                />\n              )\n            );\n          })}\n        </Stack>\n      </div>\n    </Stack>\n  );\n}\n\ninterface QueryPreviewProps extends Pick<AlertQuery, 'refId' | 'relativeTimeRange' | 'model'> {\n  isAlertCondition: boolean;\n  dataSource?: DataSourceInstanceSettings;\n  queryData?: PanelData;\n  thresholds?: ThresholdDefinition;\n  evalTimeRange?: RelativeTimeRange;\n  onEvalTimeRangeChange: (timeRange: RelativeTimeRange) => void;\n}\n\nexport function QueryPreview({\n  refId,\n  relativeTimeRange,\n  thresholds,\n  model,\n  dataSource,\n  queryData,\n  evalTimeRange,\n  onEvalTimeRangeChange,\n}: QueryPreviewProps) {\n  const styles = useStyles2(getQueryPreviewStyles);\n\n  // relativeTimeRange is what is defined for a query\n  // evalTimeRange is temporary value which the user can change\n  const headerItems = [dataSource?.name ?? '[[Data source not found]]'];\n  if (relativeTimeRange) {\n    headerItems.push(mapRelativeTimeRangeToOption(relativeTimeRange).display);\n  }\n\n  return (\n    <QueryBox refId={refId} headerItems={headerItems} className={styles.contentBox}>\n      <pre className={styles.code}>\n        <code>{dump(model)}</code>\n      </pre>\n      {dataSource && (\n        <RuleViewerVisualization\n          refId={refId}\n          dsSettings={dataSource}\n          model={model}\n          data={queryData}\n          thresholds={thresholds}\n          relativeTimeRange={evalTimeRange}\n          onTimeRangeChange={onEvalTimeRangeChange}\n          className={styles.visualization}\n        />\n      )}\n    </QueryBox>\n  );\n}\n\nconst getQueryPreviewStyles = (theme: GrafanaTheme2) => ({\n  code: css`\n    margin: ${theme.spacing(1)};\n  `,\n  contentBox: css`\n    flex: 1 0 100%;\n  `,\n  visualization: css`\n    padding: ${theme.spacing(1)};\n  `,\n});\n\ninterface ExpressionPreviewProps extends Pick<AlertQuery, 'refId'> {\n  isAlertCondition: boolean;\n  model: ExpressionQuery;\n  dataSource: DataSourceInstanceSettings;\n  evalData?: PanelData;\n}\n\nfunction ExpressionPreview({ refId, model, evalData, isAlertCondition }: ExpressionPreviewProps) {\n  function renderPreview() {\n    switch (model.type) {\n      case ExpressionQueryType.math:\n        return <MathExpressionViewer model={model} />;\n\n      case ExpressionQueryType.reduce:\n        return <ReduceConditionViewer model={model} />;\n\n      case ExpressionQueryType.resample:\n        return <ResampleExpressionViewer model={model} />;\n\n      case ExpressionQueryType.classic:\n        return <ClassicConditionViewer model={model} />;\n\n      case ExpressionQueryType.threshold:\n        return <ThresholdExpressionViewer model={model} />;\n\n      default:\n        return <>Expression not supported: {model.type}</>;\n    }\n  }\n\n  return (\n    <QueryBox refId={refId} headerItems={[startCase(model.type)]} isAlertCondition={isAlertCondition}>\n      {renderPreview()}\n      {evalData && <ExpressionResult series={evalData.series} isAlertCondition={isAlertCondition} />}\n    </QueryBox>\n  );\n}\n\ninterface QueryBoxProps extends React.PropsWithChildren<unknown> {\n  refId: string;\n  headerItems?: string[];\n  isAlertCondition?: boolean;\n  className?: string;\n}\n\nfunction QueryBox({ refId, headerItems = [], children, isAlertCondition, className }: QueryBoxProps) {\n  const styles = useStyles2(getQueryBoxStyles);\n\n  return (\n    <div className={cx(styles.container, className)}>\n      <header className={styles.header}>\n        <span className={styles.refId}>{refId}</span>\n        {headerItems.map((item, index) => (\n          <span key={index} className={styles.textBlock}>\n            {item}\n          </span>\n        ))}\n        {isAlertCondition && (\n          <div className={styles.conditionIndicator}>\n            <Badge color=\"green\" icon=\"check\" text=\"Alert condition\" />\n          </div>\n        )}\n      </header>\n      {children}\n    </div>\n  );\n}\n\nconst getQueryBoxStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    flex: 1 0 25%;\n    border: 1px solid ${theme.colors.border.strong};\n    max-width: 100%;\n  `,\n  header: css`\n    display: flex;\n    align-items: center;\n    gap: ${theme.spacing(1)};\n    padding: ${theme.spacing(1)};\n    background-color: ${theme.colors.background.secondary};\n  `,\n  textBlock: css`\n    border: 1px solid ${theme.colors.border.weak};\n    padding: ${theme.spacing(0.5, 1)};\n    background-color: ${theme.colors.background.primary};\n  `,\n  refId: css`\n    color: ${theme.colors.text.link};\n    padding: ${theme.spacing(0.5, 1)};\n    border: 1px solid ${theme.colors.border.weak};\n  `,\n  conditionIndicator: css`\n    margin-left: auto;\n  `,\n});\n\nfunction ClassicConditionViewer({ model }: { model: ExpressionQuery }) {\n  const styles = useStyles2(getClassicConditionViewerStyles);\n\n  const reducerFunctions = keyBy(alertDef.reducerTypes, (rt) => rt.value);\n  const evalOperators = keyBy(alertDef.evalOperators, (eo) => eo.value);\n  const evalFunctions = keyBy(alertDef.evalFunctions, (ef) => ef.value);\n\n  return (\n    <div className={styles.container}>\n      {model.conditions?.map(({ query, operator, reducer, evaluator }, index) => {\n        const isRange = isRangeEvaluator(evaluator);\n\n        return (\n          <React.Fragment key={index}>\n            <div className={styles.blue}>\n              {index === 0 ? 'WHEN' : !!operator?.type && evalOperators[operator?.type]?.text}\n            </div>\n            <div className={styles.bold}>{reducer?.type && reducerFunctions[reducer.type]?.text}</div>\n            <div className={styles.blue}>OF</div>\n            <div className={styles.bold}>{query.params[0]}</div>\n            <div className={styles.blue}>{evalFunctions[evaluator.type].text}</div>\n            <div className={styles.bold}>\n              {isRange ? `(${evaluator.params[0]}; ${evaluator.params[1]})` : evaluator.params[0]}\n            </div>\n          </React.Fragment>\n        );\n      })}\n    </div>\n  );\n}\n\nconst getClassicConditionViewerStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    padding: ${theme.spacing(1)};\n    display: grid;\n    grid-template-columns: max-content max-content max-content max-content max-content max-content;\n    gap: ${theme.spacing(0, 1)};\n  `,\n  ...getCommonQueryStyles(theme),\n});\n\nfunction ReduceConditionViewer({ model }: { model: ExpressionQuery }) {\n  const styles = useStyles2(getReduceConditionViewerStyles);\n\n  const { reducer, expression, settings } = model;\n  const reducerType = reducerTypes.find((rt) => rt.value === reducer);\n\n  const reducerMode = settings?.mode ?? ReducerMode.Strict;\n  const modeName = reducerModes.find((rm) => rm.value === reducerMode);\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.label}>Function</div>\n      <div className={styles.value}>{reducerType?.label}</div>\n\n      <div className={styles.label}>Input</div>\n      <div className={styles.value}>{expression}</div>\n\n      <div className={styles.label}>Mode</div>\n      <div className={styles.value}>{modeName?.label}</div>\n    </div>\n  );\n}\n\nconst getReduceConditionViewerStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    padding: ${theme.spacing(1)};\n    display: grid;\n    gap: ${theme.spacing(1)};\n    grid-template-rows: 1fr 1fr;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n\n    > :nth-child(6) {\n      grid-column: span 3;\n    }\n  `,\n  ...getCommonQueryStyles(theme),\n});\n\nfunction ResampleExpressionViewer({ model }: { model: ExpressionQuery }) {\n  const styles = useStyles2(getResampleExpressionViewerStyles);\n\n  const { expression, window, downsampler, upsampler } = model;\n  const downsamplerType = downsamplingTypes.find((dt) => dt.value === downsampler);\n  const upsamplerType = upsamplingTypes.find((ut) => ut.value === upsampler);\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.label}>Input</div>\n      <div className={styles.value}>{expression}</div>\n\n      <div className={styles.label}>Resample to</div>\n      <div className={styles.value}>{window}</div>\n\n      <div className={styles.label}>Downsample</div>\n      <div className={styles.value}>{downsamplerType?.label}</div>\n\n      <div className={styles.label}>Upsample</div>\n      <div className={styles.value}>{upsamplerType?.label}</div>\n    </div>\n  );\n}\n\nconst getResampleExpressionViewerStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    padding: ${theme.spacing(1)};\n    display: grid;\n    gap: ${theme.spacing(1)};\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr;\n  `,\n  ...getCommonQueryStyles(theme),\n});\n\nfunction ThresholdExpressionViewer({ model }: { model: ExpressionQuery }) {\n  const styles = useStyles2(getExpressionViewerStyles);\n\n  const { expression, conditions } = model;\n\n  const evaluator = conditions && conditions[0]?.evaluator;\n  const thresholdFunction = thresholdFunctions.find((tf) => tf.value === evaluator?.type);\n\n  const isRange = evaluator ? isRangeEvaluator(evaluator) : false;\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.label}>Input</div>\n      <div className={styles.value}>{expression}</div>\n\n      {evaluator && (\n        <>\n          <div className={styles.blue}>{thresholdFunction?.label}</div>\n          <div className={styles.bold}>\n            {isRange ? `(${evaluator.params[0]}; ${evaluator.params[1]})` : evaluator.params[0]}\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nconst getExpressionViewerStyles = (theme: GrafanaTheme2) => {\n  const { blue, bold, ...common } = getCommonQueryStyles(theme);\n\n  return {\n    ...common,\n    maxWidthContainer: css`\n      max-width: 100%;\n    `,\n    container: css`\n      padding: ${theme.spacing(1)};\n      display: flex;\n      gap: ${theme.spacing(1)};\n    `,\n    blue: css`\n      ${blue};\n      margin: auto 0;\n    `,\n    bold: css`\n      ${bold};\n      margin: auto 0;\n    `,\n  };\n};\n\nfunction MathExpressionViewer({ model }: { model: ExpressionQuery }) {\n  const styles = useStyles2(getExpressionViewerStyles);\n\n  const { expression } = model;\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.label}>Input</div>\n      <div className={styles.value}>{expression}</div>\n    </div>\n  );\n}\n\nconst getCommonQueryStyles = (theme: GrafanaTheme2) => ({\n  blue: css`\n    color: ${theme.colors.text.link};\n  `,\n  bold: css`\n    font-weight: ${theme.typography.fontWeightBold};\n  `,\n  label: css`\n    display: flex;\n    align-items: center;\n    padding: ${theme.spacing(0.5, 1)};\n    background-color: ${theme.colors.background.secondary};\n    font-size: ${theme.typography.bodySmall.fontSize};\n    line-height: ${theme.typography.bodySmall.lineHeight};\n    font-weight: ${theme.typography.fontWeightBold};\n  `,\n  value: css`\n    padding: ${theme.spacing(0.5, 1)};\n    border: 1px solid ${theme.colors.border.weak};\n  `,\n});\n\nfunction isRangeEvaluator(evaluator: { params: number[]; type: EvalFunction }) {\n  return evaluator.type === EvalFunction.IsWithinRange || evaluator.type === EvalFunction.IsOutsideRange;\n}\n","import { DataSourceInstanceSettings } from '@grafana/data';\nimport { DataQuery } from '@grafana/schema';\nimport { LokiQuery } from 'app/plugins/datasource/loki/types';\nimport { PromQuery } from 'app/plugins/datasource/prometheus/types';\nimport { CombinedRule } from 'app/types/unified-alerting';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { isCloudRulesSource, isGrafanaRulesSource } from './datasource';\nimport { isGrafanaRulerRule } from './rules';\n\nexport function alertRuleToQueries(combinedRule: CombinedRule | undefined | null): AlertQuery[] {\n  if (!combinedRule) {\n    return [];\n  }\n  const { namespace, rulerRule } = combinedRule;\n  const { rulesSource } = namespace;\n\n  if (isGrafanaRulesSource(rulesSource)) {\n    if (isGrafanaRulerRule(rulerRule)) {\n      return rulerRule.grafana_alert.data;\n    }\n  }\n\n  if (isCloudRulesSource(rulesSource)) {\n    const model = cloudAlertRuleToModel(rulesSource, combinedRule);\n\n    return [dataQueryToAlertQuery(model, rulesSource.uid)];\n  }\n\n  return [];\n}\n\nexport function dataQueryToAlertQuery(dataQuery: DataQuery, dataSourceUid: string): AlertQuery {\n  return {\n    refId: dataQuery.refId,\n    datasourceUid: dataSourceUid,\n    queryType: '',\n    model: dataQuery,\n    relativeTimeRange: {\n      from: 360,\n      to: 0,\n    },\n  };\n}\n\nfunction cloudAlertRuleToModel(dsSettings: DataSourceInstanceSettings, rule: CombinedRule): DataQuery {\n  const refId = 'A';\n\n  switch (dsSettings.type) {\n    case 'prometheus': {\n      const query: PromQuery = {\n        refId,\n        expr: rule.query,\n      };\n\n      return query;\n    }\n\n    case 'loki': {\n      const query: LokiQuery = {\n        refId,\n        expr: rule.query,\n      };\n\n      return query;\n    }\n\n    default:\n      throw new Error(`Query for datasource type ${dsSettings.type} is currently not supported by cloud alert rules.`);\n  }\n}\n","import React from 'react';\n\nimport { CombinedRuleGroup } from 'app/types/unified-alerting';\n\nimport { DetailsField } from '../DetailsField';\n\ninterface Props {\n  group: CombinedRuleGroup;\n}\n\nconst RuleDetailsFederatedSources = ({ group }: Props) => {\n  const sourceTenants = group.source_tenants ?? [];\n\n  return (\n    <DetailsField label=\"Tenant sources\">\n      <>\n        {sourceTenants.map((tenant) => (\n          <div key={tenant}>{tenant}</div>\n        ))}\n      </>\n    </DetailsField>\n  );\n};\n\nexport { RuleDetailsFederatedSources };\n","import { css } from '@emotion/css';\nimport { produce } from 'immer';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useObservable, useToggle } from 'react-use';\n\nimport { GrafanaTheme2, LoadingState, PanelData, RelativeTimeRange } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { config, isFetchError } from '@grafana/runtime';\nimport { Alert, Button, Collapse, Icon, IconButton, LoadingPlaceholder, useStyles2, VerticalGroup } from '@grafana/ui';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nimport { DEFAULT_PER_PAGE_PAGINATION } from '../../../../../core/constants';\nimport { AlertQuery, GrafanaRuleDefinition } from '../../../../../types/unified-alerting-dto';\nimport { GrafanaRuleQueryViewer, QueryPreview } from '../../GrafanaRuleQueryViewer';\nimport { useAlertQueriesStatus } from '../../hooks/useAlertQueriesStatus';\nimport { useCombinedRule } from '../../hooks/useCombinedRule';\nimport { AlertingQueryRunner } from '../../state/AlertingQueryRunner';\nimport { useCleanAnnotations } from '../../utils/annotations';\nimport { getRulesSourceByName } from '../../utils/datasource';\nimport { alertRuleToQueries } from '../../utils/query';\nimport * as ruleId from '../../utils/rule-id';\nimport { isFederatedRuleGroup, isGrafanaRulerRule } from '../../utils/rules';\nimport { AlertLabels } from '../AlertLabels';\nimport { DetailsField } from '../DetailsField';\nimport { ProvisionedResource, ProvisioningAlert } from '../Provisioning';\nimport { RuleViewerLayout, RuleViewerLayoutContent } from '../rule-viewer/RuleViewerLayout';\nimport { RuleDetailsActionButtons } from '../rules/RuleDetailsActionButtons';\nimport { RuleDetailsAnnotations } from '../rules/RuleDetailsAnnotations';\nimport { RuleDetailsDataSources } from '../rules/RuleDetailsDataSources';\nimport { RuleDetailsExpression } from '../rules/RuleDetailsExpression';\nimport { RuleDetailsFederatedSources } from '../rules/RuleDetailsFederatedSources';\nimport { RuleDetailsMatchingInstances } from '../rules/RuleDetailsMatchingInstances';\nimport { RuleHealth } from '../rules/RuleHealth';\nimport { RuleState } from '../rules/RuleState';\n\ntype RuleViewerProps = GrafanaRouteComponentProps<{ id?: string; sourceName?: string }>;\n\nconst errorMessage = 'Could not find data source for rule';\nconst errorTitle = 'Could not view rule';\nconst pageTitle = 'View rule';\n\nexport function RuleViewer({ match }: RuleViewerProps) {\n  const styles = useStyles2(getStyles);\n  const [expandQuery, setExpandQuery] = useToggle(false);\n\n  const { id } = match.params;\n  const identifier = useMemo(() => {\n    if (!id) {\n      throw new Error('Rule ID is required');\n    }\n\n    return ruleId.parse(id, true);\n  }, [id]);\n\n  const { loading, error, result: rule } = useCombinedRule({ ruleIdentifier: identifier });\n\n  const runner = useMemo(() => new AlertingQueryRunner(), []);\n  const data = useObservable(runner.get());\n  const queries = useMemo(() => alertRuleToQueries(rule), [rule]);\n  const annotations = useCleanAnnotations(rule?.annotations || {});\n\n  const [evaluationTimeRanges, setEvaluationTimeRanges] = useState<Record<string, RelativeTimeRange>>({});\n\n  const { allDataSourcesAvailable } = useAlertQueriesStatus(queries);\n\n  const onRunQueries = useCallback(() => {\n    if (queries.length > 0 && allDataSourcesAvailable) {\n      const evalCustomizedQueries = queries.map<AlertQuery>((q) => ({\n        ...q,\n        relativeTimeRange: evaluationTimeRanges[q.refId] ?? q.relativeTimeRange,\n      }));\n\n      runner.run(evalCustomizedQueries);\n    }\n  }, [queries, evaluationTimeRanges, runner, allDataSourcesAvailable]);\n\n  useEffect(() => {\n    const alertQueries = alertRuleToQueries(rule);\n    const defaultEvalTimeRanges = Object.fromEntries(\n      alertQueries.map((q) => [q.refId, q.relativeTimeRange ?? { from: 0, to: 0 }])\n    );\n\n    setEvaluationTimeRanges(defaultEvalTimeRanges);\n  }, [rule]);\n\n  useEffect(() => {\n    if (allDataSourcesAvailable && expandQuery) {\n      onRunQueries();\n    }\n  }, [onRunQueries, allDataSourcesAvailable, expandQuery]);\n\n  useEffect(() => {\n    return () => runner.destroy();\n  }, [runner]);\n\n  const onQueryTimeRangeChange = useCallback(\n    (refId: string, timeRange: RelativeTimeRange) => {\n      const newEvalTimeRanges = produce(evaluationTimeRanges, (draft) => {\n        draft[refId] = timeRange;\n      });\n      setEvaluationTimeRanges(newEvalTimeRanges);\n    },\n    [evaluationTimeRanges, setEvaluationTimeRanges]\n  );\n\n  if (!identifier?.ruleSourceName) {\n    return (\n      <RuleViewerLayout title={pageTitle}>\n        <Alert title={errorTitle}>\n          <details className={styles.errorMessage}>{errorMessage}</details>\n        </Alert>\n      </RuleViewerLayout>\n    );\n  }\n\n  const rulesSource = getRulesSourceByName(identifier.ruleSourceName);\n\n  if (loading) {\n    return (\n      <RuleViewerLayout title={pageTitle}>\n        <LoadingPlaceholder text=\"Loading rule...\" />\n      </RuleViewerLayout>\n    );\n  }\n\n  if (error || !rulesSource) {\n    return (\n      <Alert title={errorTitle}>\n        <details className={styles.errorMessage}>\n          {isFetchError(error) ? error.message : errorMessage}\n          <br />\n          {/* TODO  Fix typescript */}\n          {/* {error && error?.stack} */}\n        </details>\n      </Alert>\n    );\n  }\n\n  if (!rule) {\n    return (\n      <RuleViewerLayout title={pageTitle}>\n        <span>Rule could not be found.</span>\n      </RuleViewerLayout>\n    );\n  }\n\n  const isFederatedRule = isFederatedRuleGroup(rule.group);\n  const isProvisioned = isGrafanaRulerRule(rule.rulerRule) && Boolean(rule.rulerRule.grafana_alert.provenance);\n\n  return (\n    <>\n      {isFederatedRule && (\n        <Alert severity=\"info\" title=\"This rule is part of a federated rule group.\">\n          <VerticalGroup>\n            Federated rule groups are currently an experimental feature.\n            <Button fill=\"text\" icon=\"book\">\n              <a href=\"https://grafana.com/docs/metrics-enterprise/latest/tenant-management/tenant-federation/#cross-tenant-alerting-and-recording-rule-federation\">\n                Read documentation\n              </a>\n            </Button>\n          </VerticalGroup>\n        </Alert>\n      )}\n      {isProvisioned && <ProvisioningAlert resource={ProvisionedResource.AlertRule} />}\n      <RuleViewerLayoutContent>\n        <div>\n          <Stack direction=\"row\" alignItems=\"center\" wrap={false} gap={1}>\n            <Icon name=\"bell\" size=\"lg\" /> <span className={styles.title}>{rule.name}</span>\n          </Stack>\n          <RuleState rule={rule} isCreating={false} isDeleting={false} />\n          <RuleDetailsActionButtons rule={rule} rulesSource={rulesSource} isViewMode={true} />\n        </div>\n        <div className={styles.details}>\n          <div className={styles.leftSide}>\n            {rule.promRule && (\n              <DetailsField label=\"Health\" horizontal={true}>\n                <RuleHealth rule={rule.promRule} />\n              </DetailsField>\n            )}\n            {!!rule.labels && !!Object.keys(rule.labels).length && (\n              <DetailsField label=\"Labels\" horizontal={true}>\n                <AlertLabels labels={rule.labels} />\n              </DetailsField>\n            )}\n            <RuleDetailsExpression rulesSource={rulesSource} rule={rule} annotations={annotations} />\n            <RuleDetailsAnnotations annotations={annotations} />\n          </div>\n          <div className={styles.rightSide}>\n            <RuleDetailsDataSources rule={rule} rulesSource={rulesSource} />\n            {isFederatedRule && <RuleDetailsFederatedSources group={rule.group} />}\n            <DetailsField label=\"Namespace / Group\" className={styles.rightSideDetails}>\n              {rule.namespace.name} / {rule.group.name}\n            </DetailsField>\n            {isGrafanaRulerRule(rule.rulerRule) && <GrafanaRuleUID rule={rule.rulerRule.grafana_alert} />}\n          </div>\n        </div>\n        <div>\n          <RuleDetailsMatchingInstances\n            rule={rule}\n            pagination={{ itemsPerPage: DEFAULT_PER_PAGE_PAGINATION }}\n            enableFiltering\n          />\n        </div>\n      </RuleViewerLayoutContent>\n      <Collapse\n        label=\"Query & Results\"\n        isOpen={expandQuery}\n        onToggle={setExpandQuery}\n        loading={data && isLoading(data)}\n        collapsible={true}\n        className={styles.collapse}\n      >\n        {isGrafanaRulerRule(rule.rulerRule) && !isFederatedRule && (\n          <GrafanaRuleQueryViewer\n            condition={rule.rulerRule.grafana_alert.condition}\n            queries={queries}\n            evalDataByQuery={data}\n            evalTimeRanges={evaluationTimeRanges}\n            onTimeRangeChange={onQueryTimeRangeChange}\n          />\n        )}\n\n        {!isGrafanaRulerRule(rule.rulerRule) && !isFederatedRule && data && Object.keys(data).length > 0 && (\n          <div className={styles.queries}>\n            {queries.map((query) => {\n              return (\n                <QueryPreview\n                  key={query.refId}\n                  refId={query.refId}\n                  model={query.model}\n                  dataSource={Object.values(config.datasources).find((ds) => ds.uid === query.datasourceUid)}\n                  queryData={data[query.refId]}\n                  relativeTimeRange={query.relativeTimeRange}\n                  evalTimeRange={evaluationTimeRanges[query.refId]}\n                  onEvalTimeRangeChange={(timeRange) => onQueryTimeRangeChange(query.refId, timeRange)}\n                  isAlertCondition={false}\n                />\n              );\n            })}\n          </div>\n        )}\n        {!isFederatedRule && !allDataSourcesAvailable && (\n          <Alert title=\"Query not available\" severity=\"warning\" className={styles.queryWarning}>\n            Cannot display the query preview. Some of the data sources used in the queries are not available.\n          </Alert>\n        )}\n      </Collapse>\n    </>\n  );\n}\n\nfunction GrafanaRuleUID({ rule }: { rule: GrafanaRuleDefinition }) {\n  const styles = useStyles2(getStyles);\n  const copyUID = () => navigator.clipboard && navigator.clipboard.writeText(rule.uid);\n\n  return (\n    <DetailsField label=\"Rule UID\" childrenWrapperClassName={styles.ruleUid}>\n      {rule.uid} <IconButton name=\"copy\" onClick={copyUID} tooltip=\"Copy rule UID\" />\n    </DetailsField>\n  );\n}\n\nfunction isLoading(data: Record<string, PanelData>): boolean {\n  return !!Object.values(data).find((d) => d.state === LoadingState.Loading);\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    errorMessage: css`\n      white-space: pre-wrap;\n    `,\n    queries: css`\n      height: 100%;\n      width: 100%;\n    `,\n    collapse: css`\n      margin-top: ${theme.spacing(2)};\n      border-color: ${theme.colors.border.weak};\n      border-radius: ${theme.shape.radius.default};\n    `,\n    queriesTitle: css`\n      padding: ${theme.spacing(2, 0.5)};\n      font-size: ${theme.typography.h5.fontSize};\n      font-weight: ${theme.typography.fontWeightBold};\n      font-family: ${theme.typography.h5.fontFamily};\n    `,\n    query: css`\n      border-bottom: 1px solid ${theme.colors.border.medium};\n      padding: ${theme.spacing(2)};\n    `,\n    queryWarning: css`\n      margin: ${theme.spacing(4, 0)};\n    `,\n    title: css`\n      font-size: ${theme.typography.h4.fontSize};\n      font-weight: ${theme.typography.fontWeightBold};\n      overflow: hidden;\n      white-space: nowrap;\n      text-overflow: ellipsis;\n    `,\n    details: css`\n      display: flex;\n      flex-direction: row;\n      gap: ${theme.spacing(4)};\n    `,\n    leftSide: css`\n      flex: 1;\n      overflow: hidden;\n    `,\n    rightSide: css`\n      padding-right: ${theme.spacing(3)};\n\n      max-width: 360px;\n      word-break: break-all;\n      overflow: hidden;\n    `,\n    rightSideDetails: css`\n      & > div:first-child {\n        width: auto;\n      }\n    `,\n    labels: css`\n      justify-content: flex-start;\n    `,\n    ruleUid: css`\n      display: flex;\n      align-items: center;\n      gap: ${theme.spacing(1)};\n    `,\n  };\n};\n\nexport default RuleViewer;\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, NavModelItem } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\n\ntype Props = {\n  children: React.ReactNode | React.ReactNode[];\n  title: string;\n  wrapInContent?: boolean;\n};\n\nconst defaultPageNav: Partial<NavModelItem> = {\n  icon: 'bell',\n  id: 'alert-rule-view',\n};\n\nexport function RuleViewerLayout(props: Props): JSX.Element | null {\n  const { wrapInContent = true, children, title } = props;\n  const styles = useStyles2(getPageStyles);\n\n  return (\n    <Page pageNav={{ ...defaultPageNav, text: title }} navId=\"alert-list\">\n      <Page.Contents>\n        <div className={styles.content}>{wrapInContent ? <RuleViewerLayoutContent {...props} /> : children}</div>\n      </Page.Contents>\n    </Page>\n  );\n}\n\ntype ContentProps = {\n  children: React.ReactNode | React.ReactNode[];\n  padding?: number;\n};\n\nexport function RuleViewerLayoutContent({ children, padding = 2 }: ContentProps): JSX.Element | null {\n  const styles = useStyles2(getContentStyles(padding));\n  return <div className={styles.wrapper}>{children}</div>;\n}\n\nconst getPageStyles = (theme: GrafanaTheme2) => {\n  return {\n    content: css`\n      max-width: ${theme.breakpoints.values.xxl}px;\n    `,\n  };\n};\n\nconst getContentStyles = (padding: number) => (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css`\n      background: ${theme.colors.background.primary};\n      border: 1px solid ${theme.colors.border.weak};\n      border-radius: ${theme.shape.radius.default};\n      padding: ${theme.spacing(padding)};\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, Tooltip, useStyles2 } from '@grafana/ui';\nimport { Rule } from 'app/types/unified-alerting';\n\ninterface Prom {\n  rule: Rule;\n}\n\nexport const RuleHealth = ({ rule }: Prom) => {\n  const style = useStyles2(getStyle);\n\n  if (rule.health === 'err' || rule.health === 'error') {\n    return (\n      <Tooltip theme=\"error\" content={rule.lastError || 'No error message provided.'}>\n        <div className={style.warn}>\n          <Icon name=\"exclamation-triangle\" />\n          <span>error</span>\n        </div>\n      </Tooltip>\n    );\n  }\n\n  return <>{rule.health}</>;\n};\n\nconst getStyle = (theme: GrafanaTheme2) => ({\n  warn: css`\n    display: inline-flex;\n    flex-direction: row;\n    align-items: center;\n    gap: ${theme.spacing(1)};\n\n    color: ${theme.colors.warning.text};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport { GrafanaTheme2, intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Spinner, useStyles2 } from '@grafana/ui';\nimport { CombinedRule } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nimport { isAlertingRule, isRecordingRule, getFirstActiveAt } from '../../utils/rules';\n\nimport { AlertStateTag } from './AlertStateTag';\n\ninterface Props {\n  rule: CombinedRule;\n  isDeleting: boolean;\n  isCreating: boolean;\n  isPaused?: boolean;\n}\n\nexport const RuleState = ({ rule, isDeleting, isCreating, isPaused }: Props) => {\n  const style = useStyles2(getStyle);\n  const { promRule } = rule;\n\n  // return how long the rule has been in its firing state, if any\n  const forTime = useMemo(() => {\n    if (\n      promRule &&\n      isAlertingRule(promRule) &&\n      promRule.alerts?.length &&\n      promRule.state !== PromAlertingRuleState.Inactive\n    ) {\n      // find earliest alert\n      const firstActiveAt = promRule.activeAt ? new Date(promRule.activeAt) : getFirstActiveAt(promRule);\n\n      // calculate time elapsed from earliest alert\n      if (firstActiveAt) {\n        return (\n          <span title={String(firstActiveAt)} className={style.for}>\n            for{' '}\n            {intervalToAbbreviatedDurationString(\n              {\n                start: firstActiveAt,\n                end: new Date(),\n              },\n              false\n            )}\n          </span>\n        );\n      }\n    }\n    return null;\n  }, [promRule, style]);\n\n  if (isDeleting) {\n    return (\n      <Stack gap={1}>\n        <Spinner />\n        Deleting\n      </Stack>\n    );\n  } else if (isCreating) {\n    return (\n      <Stack gap={1}>\n        <Spinner />\n        Creating\n      </Stack>\n    );\n  } else if (promRule && isAlertingRule(promRule)) {\n    return (\n      <Stack gap={1}>\n        <AlertStateTag state={promRule.state} isPaused={isPaused} />\n        {forTime}\n      </Stack>\n    );\n  } else if (promRule && isRecordingRule(promRule)) {\n    return <>Recording rule</>;\n  }\n  return <>n/a</>;\n};\n\nconst getStyle = (theme: GrafanaTheme2) => ({\n  for: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n    color: ${theme.colors.text.secondary};\n    white-space: nowrap;\n    padding-top: 2px;\n  `,\n});\n","import { isExpressionReference } from '@grafana/runtime/src/utils/DataSourceWithBackend';\nimport { DataQuery } from '@grafana/schema';\n\nimport { ExpressionQuery, ExpressionQueryType } from './types';\n\nexport const isExpressionQuery = (dataQuery?: DataQuery): dataQuery is ExpressionQuery => {\n  if (!dataQuery) {\n    return false;\n  }\n\n  if (isExpressionReference(dataQuery.datasource)) {\n    return true;\n  }\n\n  const expression = dataQuery as ExpressionQuery;\n\n  if (typeof expression.type !== 'string') {\n    return false;\n  }\n  return Object.values(ExpressionQueryType).includes(expression.type);\n};\n"],"names":["ProvisionedResource","ProvisioningAlert","resource","ProvisioningBadge","createDagFromQueries","_createDagFromQueries","previous","next","fingerPrintQueries","queries","graph","nodes","query","source","parseRefsFromMathExpression","target","input","r1","r2","m1","m2","getOriginOfRefId","_getOriginsOfRefId","refId","fingerprintGraph","node","origins","findChildNode","inputEdges","edge","origin","name","n","outputEdges","e","type","queriesWithUpdatedReferences","previousRefId","newRefId","isMathExpression","isReduceExpression","isResampleExpression","isClassicExpression","isThresholdExpression","updateMathExpressionRefs","isReferencing","conditions","condition","param","expression","oldExpression","newExpression","refIdExists","checkForPathSeparator","value","errorFromCurrentCondition","data","isTimeSeriesResults","error","errorFromPreviewData","warningFromSeries","series","warning","notice","getThresholdsForQueries","thresholds","SUPPORTED_EXPRESSION_TYPES","hasRangeThreshold","isRangeCondition","threshold","isRangeThreshold","originRefIDs","originQuery","originRefID","hasValidOrigin","appendSingleThreshold","appendRangeThreshold","err","config","values","a","b","step","getStatusMessage","genericErrorMessage","errors","translateRouteParamToRuleType","findRenamedDataQueryReferences","previousQueries","updatedQueries","updatedDataQueries","previousDataQueries","oldRefId","headerHeight","RuleViewerVisualization","model","dsSettings","relativeTimeRange","onTimeRangeChange","className","styles","getStyles","isExpression","onTimeChange","newDateTime","now","interval","setDateTime","relativeTimeRangeTo","allowedToExploreDataSources","DateTimePicker","createExploreLink","VizWrapper","settings","uid","rest","url","theme","GrafanaRuleQueryViewer","evalDataByQuery","evalTimeRanges","dsByUid","ds","dataQueries","q","expressions","getExpressionViewerStyles","Stack","datasourceUid","index","dataSource","QueryPreview","timeRange","ExpressionPreview","queryData","evalTimeRange","onEvalTimeRangeChange","getQueryPreviewStyles","headerItems","QueryBox","evalData","isAlertCondition","renderPreview","MathExpressionViewer","ReduceConditionViewer","ResampleExpressionViewer","ClassicConditionViewer","ThresholdExpressionViewer","Expression","children","getQueryBoxStyles","item","Badge","getClassicConditionViewerStyles","reducerFunctions","alertDef","rt","evalOperators","eo","evalFunctions","ef","operator","reducer","evaluator","isRange","isRangeEvaluator","getCommonQueryStyles","getReduceConditionViewerStyles","reducerType","reducerMode","modeName","rm","getResampleExpressionViewerStyles","window","downsampler","upsampler","downsamplerType","dt","upsamplerType","ut","thresholdFunction","tf","blue","bold","common","alertRuleToQueries","combinedRule","namespace","rulerRule","rulesSource","cloudAlertRuleToModel","dataQueryToAlertQuery","dataQuery","dataSourceUid","rule","RuleDetailsFederatedSources","group","sourceTenants","DetailsField","tenant","errorMessage","errorTitle","pageTitle","RuleViewer","match","expandQuery","setExpandQuery","useToggle","id","identifier","loading","useCombinedRule","runner","AlertingQueryRunner","useObservable","annotations","evaluationTimeRanges","setEvaluationTimeRanges","allDataSourcesAvailable","useAlertQueriesStatus","onRunQueries","evalCustomizedQueries","alertQueries","defaultEvalTimeRanges","onQueryTimeRangeChange","newEvalTimeRanges","draft","RuleViewerLayout","Alert","LoadingPlaceholder","isFederatedRule","isProvisioned","Button","Provisioning","Icon","RuleState","RuleDetailsActionButtons","RuleHealth","AlertLabels","RuleDetailsExpression","RuleDetailsAnnotations","RuleDetailsDataSources","GrafanaRuleUID","RuleDetailsMatchingInstances","Collapse","isLoading","copyUID","IconButton","d","defaultPageNav","props","wrapInContent","title","getPageStyles","RuleViewerLayoutContent","padding","getContentStyles","style","getStyle","isDeleting","isCreating","isPaused","promRule","forTime","firstActiveAt","isExpressionQuery"],"sourceRoot":""}