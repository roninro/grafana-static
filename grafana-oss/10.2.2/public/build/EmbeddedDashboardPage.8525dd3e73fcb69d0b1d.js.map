{"version":3,"file":"EmbeddedDashboardPage.8525dd3e73fcb69d0b1d.js","mappings":"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","sources":["webpack://grafana/./public/app/features/dashboard/components/EmbeddedDashboard/SaveDashboardForm.tsx","webpack://grafana/./public/app/features/dashboard/components/EmbeddedDashboard/SaveDashboardDrawer.tsx","webpack://grafana/./public/app/features/dashboard/containers/EmbeddedDashboardPage.tsx"],"sourcesContent":["import React, { useMemo, useState } from 'react';\n\nimport { Stack } from '@grafana/experimental';\nimport { Dashboard } from '@grafana/schema';\nimport { Button, Form } from '@grafana/ui';\nimport { useAppNotification } from 'app/core/copy/appNotification';\n\nimport { DashboardModel } from '../../state';\nimport { SaveDashboardData } from '../SaveDashboard/types';\n\ninterface SaveDashboardProps {\n  dashboard: DashboardModel;\n  onCancel: () => void;\n  onSubmit?: (clone: Dashboard) => Promise<unknown>;\n  onSuccess: () => void;\n  saveModel: SaveDashboardData;\n}\nexport const SaveDashboardForm = ({ dashboard, onCancel, onSubmit, onSuccess, saveModel }: SaveDashboardProps) => {\n  const [saving, setSaving] = useState(false);\n  const notifyApp = useAppNotification();\n  const hasChanges = useMemo(() => dashboard.hasTimeChanged() || saveModel.hasChanges, [dashboard, saveModel]);\n\n  const onFormSubmit = async () => {\n    if (!onSubmit) {\n      return;\n    }\n    setSaving(true);\n    onSubmit(saveModel.clone)\n      .then(() => {\n        notifyApp.success('Dashboard saved locally');\n        onSuccess();\n      })\n      .catch((error) => {\n        notifyApp.error(error.message || 'Error saving dashboard');\n      })\n      .finally(() => setSaving(false));\n  };\n\n  return (\n    <Form onSubmit={onFormSubmit}>\n      {() => {\n        return (\n          <Stack gap={2}>\n            <Stack alignItems=\"center\">\n              <Button variant=\"secondary\" onClick={onCancel} fill=\"outline\">\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={!hasChanges} icon={saving ? 'fa fa-spinner' : undefined}>\n                Save\n              </Button>\n              {!hasChanges && <div>No changes to save</div>}\n            </Stack>\n          </Stack>\n        );\n      }}\n    </Form>\n  );\n};\n","import React, { useMemo, useState } from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { Dashboard } from '@grafana/schema';\nimport { Drawer, Tab, TabsBar } from '@grafana/ui';\n\nimport { DashboardModel } from '../../state';\nimport DashboardValidation from '../SaveDashboard/DashboardValidation';\nimport { SaveDashboardDiff } from '../SaveDashboard/SaveDashboardDiff';\nimport { SaveDashboardData } from '../SaveDashboard/types';\nimport { jsonDiff } from '../VersionHistory/utils';\n\nimport { SaveDashboardForm } from './SaveDashboardForm';\n\ntype SaveDashboardDrawerProps = {\n  dashboard: DashboardModel;\n  onDismiss: () => void;\n  dashboardJson: string;\n  onSave: (clone: Dashboard) => Promise<unknown>;\n};\n\nexport const SaveDashboardDrawer = ({ dashboard, onDismiss, dashboardJson, onSave }: SaveDashboardDrawerProps) => {\n  const data = useMemo<SaveDashboardData>(() => {\n    const clone = dashboard.getSaveModelClone();\n\n    const diff = jsonDiff(JSON.parse(JSON.stringify(dashboardJson, null, 2)), clone);\n    let diffCount = 0;\n    for (const d of Object.values(diff)) {\n      diffCount += d.length;\n    }\n\n    return {\n      clone,\n      diff,\n      diffCount,\n      hasChanges: diffCount > 0,\n    };\n  }, [dashboard, dashboardJson]);\n\n  const [showDiff, setShowDiff] = useState(false);\n\n  return (\n    <Drawer\n      title={'Save dashboard'}\n      onClose={onDismiss}\n      subtitle={dashboard.title}\n      tabs={\n        <TabsBar>\n          <Tab label={'Details'} active={!showDiff} onChangeTab={() => setShowDiff(false)} />\n          {data.hasChanges && (\n            <Tab label={'Changes'} active={showDiff} onChangeTab={() => setShowDiff(true)} counter={data.diffCount} />\n          )}\n        </TabsBar>\n      }\n    >\n      {showDiff ? (\n        <SaveDashboardDiff diff={data.diff} oldValue={dashboardJson} newValue={data.clone} />\n      ) : (\n        <SaveDashboardForm\n          dashboard={dashboard}\n          saveModel={data}\n          onCancel={onDismiss}\n          onSuccess={onDismiss}\n          onSubmit={onSave}\n        />\n      )}\n\n      {config.featureToggles.showDashboardValidationWarnings && <DashboardValidation dashboard={dashboard} />}\n    </Drawer>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\n\nimport { GrafanaTheme2, PageLayoutType } from '@grafana/data';\nimport { getBackendSrv, locationService } from '@grafana/runtime';\nimport { Dashboard, TimeZone } from '@grafana/schema';\nimport { Button, ModalsController, PageToolbar, useStyles2 } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { useGrafana } from 'app/core/context/GrafanaContext';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { useDispatch, useSelector } from 'app/types';\n\nimport { updateTimeZoneForSession } from '../../profile/state/reducers';\nimport { DashNavTimeControls } from '../components/DashNav/DashNavTimeControls';\nimport { DashboardFailed } from '../components/DashboardLoading/DashboardFailed';\nimport { DashboardLoading } from '../components/DashboardLoading/DashboardLoading';\nimport { SaveDashboardDrawer } from '../components/EmbeddedDashboard/SaveDashboardDrawer';\nimport { DashboardGrid } from '../dashgrid/DashboardGrid';\nimport { DashboardModel } from '../state';\nimport { initDashboard } from '../state/initDashboard';\n\ninterface EmbeddedDashboardPageRouteParams {\n  uid: string;\n}\n\ninterface EmbeddedDashboardPageRouteSearchParams {\n  serverPort?: string;\n  json?: string;\n  accessToken?: string;\n}\n\nexport type Props = GrafanaRouteComponentProps<\n  EmbeddedDashboardPageRouteParams,\n  EmbeddedDashboardPageRouteSearchParams\n>;\n\nexport default function EmbeddedDashboardPage({ route, queryParams }: Props) {\n  const dispatch = useDispatch();\n  const context = useGrafana();\n  const dashboardState = useSelector((store) => store.dashboard);\n  const dashboard = dashboardState.getModel();\n  const [dashboardJson, setDashboardJson] = useState('');\n\n  /**\n   * Create dashboard model and initialize the dashboard from JSON\n   */\n  useEffect(() => {\n    const serverPort = queryParams.serverPort;\n\n    if (!serverPort) {\n      throw new Error('No serverPort provided');\n    }\n    getBackendSrv()\n      .get(`http://localhost:${serverPort}/load-dashboard`)\n      .then((dashboardJson) => {\n        setDashboardJson(dashboardJson);\n        // Remove dashboard UID from JSON to prevent errors from external dashboards\n        delete dashboardJson.uid;\n        const dashboardModel = new DashboardModel(dashboardJson);\n\n        dispatch(\n          initDashboard({\n            routeName: route.routeName,\n            fixUrl: false,\n            keybindingSrv: context.keybindings,\n            dashboardDto: { dashboard: dashboardModel, meta: { canEdit: true } },\n          })\n        );\n      })\n      .catch((err) => {\n        console.log('Error getting dashboard JSON: ', err);\n      });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (!dashboard) {\n    return <DashboardLoading initPhase={dashboardState.initPhase} />;\n  }\n\n  if (dashboard.meta.dashboardNotFound) {\n    return <p>Not available</p>;\n  }\n\n  return (\n    <Page pageNav={{ text: dashboard.title }} layout={PageLayoutType.Custom}>\n      <Toolbar dashboard={dashboard} dashboardJson={dashboardJson} />\n      {dashboardState.initError && <DashboardFailed initError={dashboardState.initError} />}\n      <div>\n        <DashboardGrid dashboard={dashboard} isEditable viewPanel={null} editPanel={null} hidePanelMenus />\n      </div>\n    </Page>\n  );\n}\n\ninterface ToolbarProps {\n  dashboard: DashboardModel;\n  dashboardJson: string;\n}\n\nconst Toolbar = ({ dashboard, dashboardJson }: ToolbarProps) => {\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n\n  const onChangeTimeZone = (timeZone: TimeZone) => {\n    dispatch(updateTimeZoneForSession(timeZone));\n  };\n\n  const saveDashboard = async (clone: Dashboard) => {\n    const params = locationService.getSearch();\n    const serverPort = params.get('serverPort');\n    if (!clone || !serverPort) {\n      return;\n    }\n\n    return getBackendSrv().post(`http://localhost:${serverPort}/save-dashboard`, { dashboard: clone });\n  };\n\n  return (\n    <PageToolbar title={dashboard.title} buttonOverflowAlignment=\"right\" className={styles.toolbar}>\n      {!dashboard.timepicker.hidden && (\n        <DashNavTimeControls dashboard={dashboard} onChangeTimeZone={onChangeTimeZone} />\n      )}\n      <ModalsController key=\"button-save\">\n        {({ showModal, hideModal }) => (\n          <Button\n            onClick={() => {\n              showModal(SaveDashboardDrawer, {\n                dashboard,\n                dashboardJson,\n                onDismiss: hideModal,\n                onSave: saveDashboard,\n              });\n            }}\n          >\n            Save\n          </Button>\n        )}\n      </ModalsController>\n    </PageToolbar>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    toolbar: css`\n      padding: ${theme.spacing(3, 2)};\n    `,\n  };\n};\n"],"names":["SaveDashboardForm","dashboard","onCancel","onSubmit","onSuccess","saveModel","saving","setSaving","notifyApp","hasChanges","onFormSubmit","error","Form","Stack","Button","SaveDashboardDrawer","onDismiss","dashboardJson","onSave","data","clone","diff","diffCount","d","showDiff","setShowDiff","Drawer","TabsBar","Tab","SaveDashboardDiff","config","DashboardValidation","EmbeddedDashboardPage","route","queryParams","dispatch","context","dashboardState","store","setDashboardJson","serverPort","dashboardModel","initDashboard","err","Page","Toolbar","DashboardFailed","DashboardGrid","DashboardLoading","styles","getStyles","onChangeTimeZone","timeZone","saveDashboard","PageToolbar","DashNavTimeControls","showModal","hideModal","theme"],"sourceRoot":""}