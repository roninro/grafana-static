{"version":3,"file":"560.b619cf2dc8bcfc6097ae.js","mappings":"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","sources":["webpack://grafana/./public/app/features/dashboard/dashgrid/LazyLoader.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelLinks.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderNotice.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderNotices.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderTitleItems.tsx","webpack://grafana/./public/app/features/dashboard/utils/getPanelChromeProps.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderMenu.tsx","webpack://grafana/./public/app/features/dashboard/utils/getPanelMenu.ts","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderMenuProvider.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderMenuWrapper.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelChromeAngular.tsx","webpack://grafana/./public/app/plugins/panel/timeseries/overrides/colorSeriesConfigFactory.ts","webpack://grafana/./public/app/core/log_events.ts","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelLoadTimeMonitor.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/panelOptionsLogger.ts","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelStateWrapper.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/DashboardPanel.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/SeriesVisibilityConfigFactory.ts","webpack://grafana/./public/app/features/dashboard/utils/loadSnapshotData.ts","webpack://grafana/./public/app/features/inspector/types.ts","webpack://grafana/./public/app/features/panel/panellinks/linkSuppliers.ts","webpack://grafana/./public/app/features/panel/state/selectors.ts"],"sourcesContent":["import React, { useId, useRef, useState } from 'react';\nimport { useEffectOnce } from 'react-use';\n\nexport interface Props {\n  children: React.ReactNode | (({ isInView }: { isInView: boolean }) => React.ReactNode);\n  width?: number;\n  height?: number;\n  onLoad?: () => void;\n  onChange?: (isInView: boolean) => void;\n}\n\nexport function LazyLoader({ children, width, height, onLoad, onChange }: Props) {\n  const id = useId();\n  const [loaded, setLoaded] = useState(false);\n  const [isInView, setIsInView] = useState(false);\n  const wrapperRef = useRef<HTMLDivElement>(null);\n\n  useEffectOnce(() => {\n    LazyLoader.addCallback(id, (entry) => {\n      if (!loaded && entry.isIntersecting) {\n        setLoaded(true);\n        onLoad?.();\n      }\n\n      setIsInView(entry.isIntersecting);\n      onChange?.(entry.isIntersecting);\n    });\n\n    const wrapperEl = wrapperRef.current;\n\n    if (wrapperEl) {\n      LazyLoader.observer.observe(wrapperEl);\n    }\n\n    return () => {\n      delete LazyLoader.callbacks[id];\n      wrapperEl && LazyLoader.observer.unobserve(wrapperEl);\n      if (Object.keys(LazyLoader.callbacks).length === 0) {\n        LazyLoader.observer.disconnect();\n      }\n    };\n  });\n\n  return (\n    <div id={id} ref={wrapperRef} style={{ width, height }}>\n      {loaded && (typeof children === 'function' ? children({ isInView }) : children)}\n    </div>\n  );\n}\n\nconst callbacks: Record<string, (e: IntersectionObserverEntry) => void> = {};\nLazyLoader.callbacks = callbacks;\nLazyLoader.addCallback = (id: string, c: (e: IntersectionObserverEntry) => void) => (LazyLoader.callbacks[id] = c);\nLazyLoader.observer = new IntersectionObserver(\n  (entries) => {\n    for (const entry of entries) {\n      if (LazyLoader.callbacks[entry.target.id]) {\n        LazyLoader.callbacks[entry.target.id](entry);\n      }\n    }\n  },\n  { rootMargin: '100px' }\n);\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { DataLink, GrafanaTheme2, LinkModel } from '@grafana/data';\nimport { Dropdown, Icon, Menu, ToolbarButton, useStyles2, PanelChrome } from '@grafana/ui';\n\ninterface Props {\n  panelLinks: DataLink[];\n  onShowPanelLinks: () => LinkModel[];\n}\n\nexport function PanelLinks({ panelLinks, onShowPanelLinks }: Props) {\n  const styles = useStyles2(getStyles);\n\n  const getLinksContent = (): JSX.Element => {\n    const interpolatedLinks = onShowPanelLinks();\n    return (\n      <Menu>\n        {interpolatedLinks?.map((link, idx) => {\n          return <Menu.Item key={idx} label={link.title} url={link.href} target={link.target} onClick={link.onClick} />;\n        })}\n      </Menu>\n    );\n  };\n\n  if (panelLinks.length === 1) {\n    const linkModel = onShowPanelLinks()[0];\n    return (\n      <PanelChrome.TitleItem\n        href={linkModel.href}\n        onClick={linkModel.onClick}\n        target={linkModel.target}\n        title={linkModel.title}\n      >\n        <Icon name=\"external-link-alt\" size=\"md\" />\n      </PanelChrome.TitleItem>\n    );\n  } else {\n    return (\n      <Dropdown overlay={getLinksContent}>\n        <ToolbarButton icon=\"external-link-alt\" iconSize=\"md\" aria-label=\"panel links\" className={styles.menuTrigger} />\n      </Dropdown>\n    );\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    menuTrigger: css({\n      height: '100%',\n      background: 'inherit',\n      border: 'none',\n      borderRadius: `${theme.shape.radius.default}`,\n      cursor: 'context-menu',\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, QueryResultMetaNotice } from '@grafana/data';\nimport { Icon, ToolbarButton, Tooltip, useStyles2 } from '@grafana/ui';\nimport { getFocusStyles, getMouseFocusStyles } from '@grafana/ui/src/themes/mixins';\n\ninterface Props {\n  notice: QueryResultMetaNotice;\n  onClick: (e: React.SyntheticEvent, tab: string) => void;\n}\n\nexport const PanelHeaderNotice = ({ notice, onClick }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const iconName =\n    notice.severity === 'error' || notice.severity === 'warning' ? 'exclamation-triangle' : 'file-landscape-alt';\n\n  if (notice.inspect && onClick) {\n    return (\n      <ToolbarButton\n        className={styles.notice}\n        icon={iconName}\n        iconSize=\"md\"\n        key={notice.severity}\n        tooltip={notice.text}\n        onClick={(e) => onClick(e, notice.inspect!)}\n      />\n    );\n  }\n\n  if (notice.link) {\n    return (\n      <a className={styles.notice} aria-label={notice.text} href={notice.link} target=\"_blank\" rel=\"noreferrer\">\n        <Icon name={iconName} style={{ marginRight: '8px' }} size=\"md\" />\n      </a>\n    );\n  }\n\n  return (\n    <Tooltip key={notice.severity} content={notice.text}>\n      <span className={styles.iconTooltip}>\n        <Icon name={iconName} size=\"md\" />\n      </span>\n    </Tooltip>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  notice: css({\n    background: 'inherit',\n    border: 'none',\n    borderRadius: theme.shape.radius.default,\n  }),\n  iconTooltip: css({\n    color: `${theme.colors.text.secondary}`,\n    backgroundColor: 'inherit',\n    cursor: 'auto',\n    border: 'none',\n    borderRadius: `${theme.shape.radius.default}`,\n    padding: `${theme.spacing(0, 1)}`,\n    height: ` ${theme.spacing(theme.components.height.md)}`,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n\n    '&:focus, &:focus-visible': {\n      ...getFocusStyles(theme),\n      zIndex: 1,\n    },\n    '&: focus:not(:focus-visible)': getMouseFocusStyles(theme),\n\n    '&:hover ': {\n      boxShadow: `${theme.shadows.z1}`,\n      color: `${theme.colors.text.primary}`,\n      background: `${theme.colors.background.secondary}`,\n    },\n  }),\n});\n","import React, { useCallback } from 'react';\n\nimport { DataFrame, QueryResultMetaNotice } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\n\nimport { PanelHeaderNotice } from './PanelHeaderNotice';\n\ninterface Props {\n  panelId: number;\n  frames: DataFrame[];\n}\n\nexport const PanelHeaderNotices = ({ frames, panelId }: Props) => {\n  const openInspect = useCallback(\n    (e: React.SyntheticEvent, tab: string) => {\n      e.stopPropagation();\n      locationService.partial({ inspect: panelId, inspectTab: tab });\n    },\n    [panelId]\n  );\n\n  // dedupe on severity\n  const notices: Record<string, QueryResultMetaNotice> = {};\n  for (const frame of frames) {\n    if (!frame.meta || !frame.meta.notices) {\n      continue;\n    }\n\n    for (const notice of frame.meta.notices) {\n      notices[notice.severity] = notice;\n    }\n  }\n\n  return (\n    <>\n      {Object.values(notices).map((notice) => (\n        <PanelHeaderNotice notice={notice} onClick={openInspect} key={notice.severity} />\n      ))}\n    </>\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { PanelData, GrafanaTheme2, PanelModel, LinkModel, AlertState, DataLink } from '@grafana/data';\nimport { Icon, PanelChrome, Tooltip, useStyles2, TimePickerTooltip } from '@grafana/ui';\n\nimport { PanelLinks } from '../PanelLinks';\n\nimport { PanelHeaderNotices } from './PanelHeaderNotices';\n\nexport interface AngularNotice {\n  show: boolean;\n  isAngularPanel: boolean;\n  isAngularDatasource: boolean;\n}\n\nexport interface Props {\n  alertState?: string;\n  data: PanelData;\n  panelId: number;\n  onShowPanelLinks?: () => Array<LinkModel<PanelModel>>;\n  panelLinks?: DataLink[];\n  angularNotice?: AngularNotice;\n}\n\nexport function PanelHeaderTitleItems(props: Props) {\n  const { alertState, data, panelId, onShowPanelLinks, panelLinks, angularNotice } = props;\n  const styles = useStyles2(getStyles);\n\n  // panel health\n  const alertStateItem = (\n    <Tooltip content={alertState ?? 'unknown'}>\n      <PanelChrome.TitleItem\n        className={cx({\n          [styles.ok]: alertState === AlertState.OK,\n          [styles.pending]: alertState === AlertState.Pending,\n          [styles.alerting]: alertState === AlertState.Alerting,\n        })}\n      >\n        <Icon name={alertState === 'alerting' ? 'heart-break' : 'heart'} className=\"panel-alert-icon\" size=\"md\" />\n      </PanelChrome.TitleItem>\n    </Tooltip>\n  );\n\n  const timeshift = (\n    <>\n      {data.request && data.request.timeInfo && (\n        <Tooltip content={<TimePickerTooltip timeRange={data.request?.range} timeZone={data.request?.timezone} />}>\n          <PanelChrome.TitleItem className={styles.timeshift}>\n            <Icon name=\"clock-nine\" size=\"md\" /> {data.request?.timeInfo}\n          </PanelChrome.TitleItem>\n        </Tooltip>\n      )}\n    </>\n  );\n\n  const message = `This ${pluginType(angularNotice)} requires Angular (deprecated).`;\n  const angularNoticeTooltip = (\n    <Tooltip content={message}>\n      <PanelChrome.TitleItem className={styles.angularNotice} data-testid=\"angular-deprecation-icon\">\n        <Icon name=\"exclamation-triangle\" size=\"md\" />\n      </PanelChrome.TitleItem>\n    </Tooltip>\n  );\n\n  return (\n    <>\n      {panelLinks && panelLinks.length > 0 && onShowPanelLinks && (\n        <PanelLinks onShowPanelLinks={onShowPanelLinks} panelLinks={panelLinks} />\n      )}\n\n      {<PanelHeaderNotices panelId={panelId} frames={data.series} />}\n      {timeshift}\n      {alertState && alertStateItem}\n      {angularNotice?.show && angularNoticeTooltip}\n    </>\n  );\n}\n\nconst pluginType = (angularNotice?: AngularNotice): string => {\n  if (angularNotice?.isAngularPanel) {\n    return 'panel';\n  }\n  if (angularNotice?.isAngularDatasource) {\n    return 'data source';\n  }\n  return 'panel or data source';\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    ok: css({\n      color: theme.colors.success.text,\n    }),\n    pending: css({\n      color: theme.colors.warning.text,\n    }),\n    alerting: css({\n      color: theme.colors.error.text,\n    }),\n    timeshift: css({\n      color: theme.colors.text.link,\n      gap: theme.spacing(0.5),\n      whiteSpace: 'nowrap',\n\n      '&:hover': {\n        color: theme.colors.emphasize(theme.colors.text.link, 0.03),\n      },\n    }),\n    angularNotice: css({\n      color: theme.colors.warning.text,\n    }),\n  };\n};\n","import React from 'react';\n\nimport { LinkModel, PanelData, PanelPlugin, renderMarkdown } from '@grafana/data';\nimport { config, getTemplateSrv, locationService, reportInteraction } from '@grafana/runtime';\nimport { PanelPadding } from '@grafana/ui';\nimport { InspectTab } from 'app/features/inspector/types';\nimport { getPanelLinksSupplier } from 'app/features/panel/panellinks/linkSuppliers';\nimport { isAngularDatasourcePlugin } from 'app/features/plugins/angularDeprecation/utils';\n\nimport { PanelHeaderTitleItems } from '../dashgrid/PanelHeader/PanelHeaderTitleItems';\nimport { DashboardModel, PanelModel } from '../state';\n\ninterface CommonProps {\n  panel: PanelModel;\n  data: PanelData;\n  dashboard: DashboardModel;\n  plugin: PanelPlugin;\n  isViewing: boolean;\n  isEditing: boolean;\n  isInView: boolean;\n  isDraggable?: boolean;\n  width: number;\n  height: number;\n  hideMenu?: boolean;\n}\n\nexport function getPanelChromeProps(props: CommonProps) {\n  let descriptionInteractionReported = false;\n\n  function hasOverlayHeader() {\n    // always show normal header if we have time override\n    if (props.data.request && props.data.request.timeInfo) {\n      return false;\n    }\n\n    return !props.panel.hasTitle();\n  }\n\n  const onShowPanelDescription = () => {\n    const descriptionMarkdown = getTemplateSrv().replace(props.panel.description, props.panel.scopedVars);\n    const interpolatedDescription = renderMarkdown(descriptionMarkdown);\n\n    if (!descriptionInteractionReported) {\n      // Description rendering function can be called multiple times due to re-renders but we want to report the interaction once.\n      reportInteraction('dashboards_panelheader_description_displayed');\n      descriptionInteractionReported = true;\n    }\n\n    return interpolatedDescription;\n  };\n\n  const onShowPanelLinks = (): LinkModel[] => {\n    const linkSupplier = getPanelLinksSupplier(props.panel);\n    if (!linkSupplier) {\n      return [];\n    }\n    const panelLinks = linkSupplier && linkSupplier.getLinks(props.panel.replaceVariables);\n\n    return panelLinks.map((panelLink) => ({\n      ...panelLink,\n      onClick: (...args) => {\n        reportInteraction('dashboards_panelheader_datalink_clicked', { has_multiple_links: panelLinks.length > 1 });\n        panelLink.onClick?.(...args);\n      },\n    }));\n  };\n\n  const onOpenInspector = (e: React.SyntheticEvent, tab: string) => {\n    e.stopPropagation();\n    locationService.partial({ inspect: props.panel.id, inspectTab: tab });\n  };\n\n  const onOpenErrorInspect = (e: React.SyntheticEvent) => {\n    e.stopPropagation();\n    locationService.partial({ inspect: props.panel.id, inspectTab: InspectTab.Error });\n    reportInteraction('dashboards_panelheader_statusmessage_clicked');\n  };\n\n  const onCancelQuery = () => {\n    props.panel.getQueryRunner().cancelQuery();\n    reportInteraction('dashboards_panelheader_cancelquery_clicked', { data_state: props.data.state });\n  };\n\n  const padding: PanelPadding = props.plugin.noPadding ? 'none' : 'md';\n  const alertState = props.data.alertState?.state;\n\n  const isAngularDatasource = props.panel.datasource?.uid\n    ? isAngularDatasourcePlugin(props.panel.datasource?.uid)\n    : false;\n  const isAngularPanel = props.panel.isAngularPlugin();\n  const showAngularNotice =\n    (config.featureToggles.angularDeprecationUI ?? false) && (isAngularDatasource || isAngularPanel);\n\n  const showTitleItems =\n    (props.panel.links && props.panel.links.length > 0 && onShowPanelLinks) ||\n    (props.data.series.length > 0 && props.data.series.some((v) => (v.meta?.notices?.length ?? 0) > 0)) ||\n    (props.data.request && props.data.request.timeInfo) ||\n    showAngularNotice ||\n    alertState;\n\n  const titleItems = showTitleItems && (\n    <PanelHeaderTitleItems\n      alertState={alertState}\n      data={props.data}\n      panelId={props.panel.id}\n      panelLinks={props.panel.links}\n      angularNotice={{\n        show: showAngularNotice,\n        isAngularDatasource,\n        isAngularPanel,\n      }}\n      onShowPanelLinks={onShowPanelLinks}\n    />\n  );\n\n  const description = props.panel.description ? onShowPanelDescription : undefined;\n\n  const dragClass =\n    !(props.isViewing || props.isEditing) && Boolean(props.isDraggable ?? true) ? 'grid-drag-handle' : '';\n\n  const title = props.panel.getDisplayTitle();\n\n  const onOpenMenu = () => {\n    reportInteraction('dashboards_panelheader_menu', { item: 'menu' });\n  };\n\n  return {\n    hasOverlayHeader,\n    onShowPanelDescription,\n    onShowPanelLinks,\n    onOpenInspector,\n    onOpenErrorInspect,\n    onCancelQuery,\n    padding,\n    description,\n    dragClass,\n    title,\n    titleItems,\n    onOpenMenu,\n  };\n}\n","import React from 'react';\n\nimport { PanelMenuItem } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Menu } from '@grafana/ui';\n\nexport interface Props {\n  items: PanelMenuItem[];\n  style?: React.CSSProperties;\n  itemsClassName?: string;\n  className?: string;\n}\n\nexport function PanelHeaderMenu({ items }: Props) {\n  const renderItems = (items: PanelMenuItem[]) => {\n    return items.map((item) => {\n      switch (item.type) {\n        case 'divider':\n          return <Menu.Divider key={item.text} />;\n        case 'group':\n          return (\n            <Menu.Group key={item.text} label={item.text}>\n              {item.subMenu ? renderItems(item.subMenu) : undefined}\n            </Menu.Group>\n          );\n        default:\n          return (\n            <Menu.Item\n              key={item.text}\n              label={item.text}\n              icon={item.iconClassName}\n              childItems={item.subMenu ? renderItems(item.subMenu) : undefined}\n              url={item.href}\n              onClick={item.onClick}\n              shortcut={item.shortcut}\n              testId={selectors.components.Panels.Panel.menuItems(item.text)}\n            />\n          );\n      }\n    });\n  };\n\n  return <Menu>{renderItems(items)}</Menu>;\n}\n","import {\n  getTimeZone,\n  PanelMenuItem,\n  PluginExtensionLink,\n  PluginExtensionPoints,\n  type PluginExtensionPanelContext,\n} from '@grafana/data';\nimport { AngularComponent, locationService, reportInteraction, getPluginLinkExtensions } from '@grafana/runtime';\nimport { PanelCtrl } from 'app/angular/panel/panel_ctrl';\nimport config from 'app/core/config';\nimport { t } from 'app/core/internationalization';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { getExploreUrl } from 'app/core/utils/explore';\nimport { DashboardModel } from 'app/features/dashboard/state/DashboardModel';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport {\n  addLibraryPanel,\n  copyPanel,\n  duplicatePanel,\n  removePanel,\n  sharePanel,\n  toggleLegend,\n  unlinkLibraryPanel,\n} from 'app/features/dashboard/utils/panel';\nimport { InspectTab } from 'app/features/inspector/types';\nimport { isPanelModelLibraryPanel } from 'app/features/library-panels/guard';\nimport { truncateTitle } from 'app/features/plugins/extensions/utils';\nimport { SHARED_DASHBOARD_QUERY } from 'app/plugins/datasource/dashboard';\nimport { store } from 'app/store/store';\n\nimport { navigateToExplore } from '../../explore/state/main';\nimport { getTimeSrv } from '../services/TimeSrv';\n\nexport function getPanelMenu(\n  dashboard: DashboardModel,\n  panel: PanelModel,\n  angularComponent?: AngularComponent | null\n): PanelMenuItem[] {\n  const onViewPanel = (event: React.MouseEvent) => {\n    event.preventDefault();\n    locationService.partial({\n      viewPanel: panel.id,\n    });\n    reportInteraction('dashboards_panelheader_menu', { item: 'view' });\n  };\n\n  const onEditPanel = (event: React.MouseEvent) => {\n    event.preventDefault();\n    locationService.partial({\n      editPanel: panel.id,\n    });\n\n    reportInteraction('dashboards_panelheader_menu', { item: 'edit' });\n  };\n\n  const onSharePanel = (event: React.MouseEvent) => {\n    event.preventDefault();\n    sharePanel(dashboard, panel);\n    reportInteraction('dashboards_panelheader_menu', { item: 'share' });\n  };\n\n  const onAddLibraryPanel = (event: React.MouseEvent) => {\n    event.preventDefault();\n    addLibraryPanel(dashboard, panel);\n    reportInteraction('dashboards_panelheader_menu', { item: 'createLibraryPanel' });\n  };\n\n  const onUnlinkLibraryPanel = (event: React.MouseEvent) => {\n    event.preventDefault();\n    unlinkLibraryPanel(panel);\n    reportInteraction('dashboards_panelheader_menu', { item: 'unlinkLibraryPanel' });\n  };\n\n  const onInspectPanel = (tab?: InspectTab) => {\n    locationService.partial({\n      inspect: panel.id,\n      inspectTab: tab,\n    });\n    reportInteraction('dashboards_panelheader_menu', { item: 'inspect', tab: tab ?? InspectTab.Data });\n  };\n\n  const onMore = (event: React.MouseEvent) => {\n    event.preventDefault();\n  };\n\n  const onDuplicatePanel = (event: React.MouseEvent) => {\n    event.preventDefault();\n    duplicatePanel(dashboard, panel);\n    reportInteraction('dashboards_panelheader_menu', { item: 'duplicate' });\n  };\n\n  const onCopyPanel = (event: React.MouseEvent) => {\n    event.preventDefault();\n    copyPanel(panel);\n    reportInteraction('dashboards_panelheader_menu', { item: 'copy' });\n  };\n\n  const onRemovePanel = (event: React.MouseEvent) => {\n    event.preventDefault();\n    removePanel(dashboard, panel, true);\n    reportInteraction('dashboards_panelheader_menu', { item: 'remove' });\n  };\n\n  const onNavigateToExplore = (event: React.MouseEvent) => {\n    event.preventDefault();\n    const openInNewWindow =\n      event.ctrlKey || event.metaKey ? (url: string) => window.open(`${config.appSubUrl}${url}`) : undefined;\n    store.dispatch(\n      navigateToExplore(panel, {\n        timeRange: getTimeSrv().timeRange(),\n        getExploreUrl,\n        openInNewWindow,\n      }) as any\n    );\n    reportInteraction('dashboards_panelheader_menu', { item: 'explore' });\n  };\n\n  const onToggleLegend = (event: React.MouseEvent) => {\n    event.preventDefault();\n    toggleLegend(panel);\n    reportInteraction('dashboards_panelheader_menu', { item: 'toggleLegend' });\n  };\n\n  const menu: PanelMenuItem[] = [];\n\n  if (!panel.isEditing) {\n    menu.push({\n      text: t('panel.header-menu.view', `View`),\n      iconClassName: 'eye',\n      onClick: onViewPanel,\n      shortcut: 'v',\n    });\n  }\n\n  if (dashboard.canEditPanel(panel) && !panel.isEditing) {\n    menu.push({\n      text: t('panel.header-menu.edit', `Edit`),\n      iconClassName: 'edit',\n      onClick: onEditPanel,\n      shortcut: 'e',\n    });\n  }\n\n  menu.push({\n    text: t('panel.header-menu.share', `Share`),\n    iconClassName: 'share-alt',\n    onClick: onSharePanel,\n    shortcut: 'p s',\n  });\n\n  if (\n    contextSrv.hasAccessToExplore() &&\n    !(panel.plugin && panel.plugin.meta.skipDataQuery) &&\n    panel.datasource?.uid !== SHARED_DASHBOARD_QUERY\n  ) {\n    menu.push({\n      text: t('panel.header-menu.explore', `Explore`),\n      iconClassName: 'compass',\n      onClick: onNavigateToExplore,\n      shortcut: 'p x',\n    });\n  }\n\n  const inspectMenu: PanelMenuItem[] = [];\n\n  // Only show these inspect actions for data plugins\n  if (panel.plugin && !panel.plugin.meta.skipDataQuery) {\n    inspectMenu.push({\n      text: t('panel.header-menu.inspect-data', `Data`),\n      onClick: (e: React.MouseEvent) => onInspectPanel(InspectTab.Data),\n    });\n\n    if (dashboard.meta.canEdit) {\n      inspectMenu.push({\n        text: t('panel.header-menu.query', `Query`),\n        onClick: (e: React.MouseEvent) => onInspectPanel(InspectTab.Query),\n      });\n    }\n  }\n\n  inspectMenu.push({\n    text: t('panel.header-menu.inspect-json', `Panel JSON`),\n    onClick: (e: React.MouseEvent) => onInspectPanel(InspectTab.JSON),\n  });\n\n  menu.push({\n    type: 'submenu',\n    text: t('panel.header-menu.inspect', `Inspect`),\n    iconClassName: 'info-circle',\n    onClick: (e: React.MouseEvent<HTMLElement>) => {\n      const currentTarget = e.currentTarget;\n      const target = e.target;\n\n      if (\n        target === currentTarget ||\n        (target instanceof HTMLElement && target.closest('[role=\"menuitem\"]') === currentTarget)\n      ) {\n        onInspectPanel();\n      }\n    },\n    shortcut: 'i',\n    subMenu: inspectMenu,\n  });\n\n  const subMenu: PanelMenuItem[] = [];\n  const canEdit = dashboard.canEditPanel(panel);\n  if (!(panel.isViewing || panel.isEditing)) {\n    if (canEdit) {\n      subMenu.push({\n        text: t('panel.header-menu.duplicate', `Duplicate`),\n        onClick: onDuplicatePanel,\n        shortcut: 'p d',\n      });\n\n      subMenu.push({\n        text: t('panel.header-menu.copy', `Copy`),\n        onClick: onCopyPanel,\n      });\n\n      if (isPanelModelLibraryPanel(panel)) {\n        subMenu.push({\n          text: t('panel.header-menu.unlink-library-panel', `Unlink library panel`),\n          onClick: onUnlinkLibraryPanel,\n        });\n      } else {\n        subMenu.push({\n          text: t('panel.header-menu.create-library-panel', `Create library panel`),\n          onClick: onAddLibraryPanel,\n        });\n      }\n    } else if (contextSrv.isEditor) {\n      // An editor but the dashboard is not editable\n      subMenu.push({\n        text: t('panel.header-menu.copy', `Copy`),\n        onClick: onCopyPanel,\n      });\n    }\n  }\n\n  // add old angular panel options\n  if (angularComponent) {\n    const scope = angularComponent.getScope();\n    const panelCtrl: PanelCtrl = scope.$$childHead.ctrl;\n    const angularMenuItems = panelCtrl.getExtendedMenu();\n\n    for (const item of angularMenuItems) {\n      const reactItem: PanelMenuItem = {\n        text: item.text,\n        href: item.href,\n        shortcut: item.shortcut,\n      };\n\n      if (item.click) {\n        reactItem.onClick = () => {\n          scope.$eval(item.click, { ctrl: panelCtrl });\n        };\n      }\n\n      subMenu.push(reactItem);\n    }\n  }\n\n  if (panel.options.legend) {\n    subMenu.push({\n      text: panel.options.legend.showLegend\n        ? t('panel.header-menu.hide-legend', 'Hide legend')\n        : t('panel.header-menu.show-legend', 'Show legend'),\n      onClick: onToggleLegend,\n      shortcut: 'p l',\n    });\n  }\n\n  // When editing hide most actions\n  if (panel.isEditing) {\n    subMenu.length = 0;\n  }\n\n  if (canEdit && panel.plugin && !panel.plugin.meta.skipDataQuery) {\n    subMenu.push({\n      text: t('panel.header-menu.get-help', 'Get help'),\n      onClick: (e: React.MouseEvent) => onInspectPanel(InspectTab.Help),\n    });\n  }\n\n  const { extensions } = getPluginLinkExtensions({\n    extensionPointId: PluginExtensionPoints.DashboardPanelMenu,\n    context: createExtensionContext(panel, dashboard),\n    limitPerPlugin: 3,\n  });\n\n  if (extensions.length > 0 && !panel.isEditing) {\n    menu.push({\n      text: 'Extensions',\n      iconClassName: 'plug',\n      type: 'submenu',\n      subMenu: createExtensionSubMenu(extensions),\n    });\n  }\n\n  if (subMenu.length) {\n    menu.push({\n      type: 'submenu',\n      text: t('panel.header-menu.more', `More...`),\n      iconClassName: 'cube',\n      subMenu,\n      onClick: onMore,\n    });\n  }\n\n  if (dashboard.canEditPanel(panel) && !panel.isEditing && !panel.isViewing) {\n    menu.push({ type: 'divider', text: '' });\n\n    menu.push({\n      text: t('panel.header-menu.remove', `Remove`),\n      iconClassName: 'trash-alt',\n      onClick: onRemovePanel,\n      shortcut: 'p r',\n    });\n  }\n\n  return menu;\n}\n\nfunction createExtensionContext(panel: PanelModel, dashboard: DashboardModel): PluginExtensionPanelContext {\n  return {\n    id: panel.id,\n    pluginId: panel.type,\n    title: panel.title,\n    timeRange: dashboard.time,\n    timeZone: getTimeZone({\n      timeZone: dashboard.timezone,\n    }),\n    dashboard: {\n      uid: dashboard.uid,\n      title: dashboard.title,\n      tags: Array.from<string>(dashboard.tags),\n    },\n    targets: panel.targets,\n    scopedVars: panel.scopedVars,\n    data: panel.getQueryRunner().getLastResult(),\n  };\n}\n\nfunction createExtensionSubMenu(extensions: PluginExtensionLink[]): PanelMenuItem[] {\n  const categorized: Record<string, PanelMenuItem[]> = {};\n  const uncategorized: PanelMenuItem[] = [];\n\n  for (const extension of extensions) {\n    const category = extension.category;\n\n    if (!category) {\n      uncategorized.push({\n        text: truncateTitle(extension.title, 25),\n        href: extension.path,\n        onClick: extension.onClick,\n      });\n      continue;\n    }\n\n    if (!Array.isArray(categorized[category])) {\n      categorized[category] = [];\n    }\n\n    categorized[category].push({\n      text: truncateTitle(extension.title, 25),\n      href: extension.path,\n      onClick: extension.onClick,\n    });\n  }\n\n  const subMenu = Object.keys(categorized).reduce((subMenu: PanelMenuItem[], category) => {\n    subMenu.push({\n      text: truncateTitle(category, 25),\n      type: 'group',\n      subMenu: categorized[category],\n    });\n    return subMenu;\n  }, []);\n\n  if (uncategorized.length > 0) {\n    if (subMenu.length > 0) {\n      subMenu.push({\n        text: 'divider',\n        type: 'divider',\n      });\n    }\n\n    Array.prototype.push.apply(subMenu, uncategorized);\n  }\n\n  return subMenu;\n}\n","import { ReactElement, useEffect, useState } from 'react';\n\nimport { LoadingState, PanelMenuItem } from '@grafana/data';\nimport { getPanelStateForModel } from 'app/features/panel/state/selectors';\nimport { useSelector } from 'app/types';\n\nimport { DashboardModel, PanelModel } from '../../state';\nimport { getPanelMenu } from '../../utils/getPanelMenu';\n\ninterface PanelHeaderMenuProviderApi {\n  items: PanelMenuItem[];\n}\n\ninterface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  loadingState?: LoadingState;\n  children: (props: PanelHeaderMenuProviderApi) => ReactElement;\n}\n\nexport function PanelHeaderMenuProvider({ panel, dashboard, loadingState, children }: Props) {\n  const [items, setItems] = useState<PanelMenuItem[]>([]);\n  const angularComponent = useSelector((state) => getPanelStateForModel(state, panel)?.angularComponent);\n\n  useEffect(() => {\n    setItems(getPanelMenu(dashboard, panel, angularComponent));\n  }, [dashboard, panel, angularComponent, loadingState, setItems]);\n\n  return children({ items });\n}\n","import React from 'react';\n\nimport { LoadingState } from '@grafana/data';\n\nimport { DashboardModel, PanelModel } from '../../state';\n\nimport { PanelHeaderMenu } from './PanelHeaderMenu';\nimport { PanelHeaderMenuProvider } from './PanelHeaderMenuProvider';\n\ninterface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  loadingState?: LoadingState;\n  style?: React.CSSProperties;\n  menuItemsClassName?: string;\n  menuWrapperClassName?: string;\n}\n\nexport function PanelHeaderMenuWrapper({ style, panel, dashboard, loadingState }: Props) {\n  return (\n    <PanelHeaderMenuProvider panel={panel} dashboard={dashboard} loadingState={loadingState}>\n      {({ items }) => <PanelHeaderMenu style={style} items={items} />}\n    </PanelHeaderMenuProvider>\n  );\n}\n","import React, { PureComponent } from 'react';\nimport { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { Subscription } from 'rxjs';\n\nimport { getDefaultTimeRange, LoadingState, PanelData, PanelPlugin } from '@grafana/data';\nimport { AngularComponent, getAngularLoader } from '@grafana/runtime';\nimport { PanelChrome } from '@grafana/ui';\nimport config from 'app/core/config';\nimport { PANEL_BORDER } from 'app/core/constants';\nimport { setPanelAngularComponent } from 'app/features/panel/state/reducers';\nimport { getPanelStateForModel } from 'app/features/panel/state/selectors';\nimport { StoreState } from 'app/types';\n\nimport { getTimeSrv, TimeSrv } from '../services/TimeSrv';\nimport { DashboardModel, PanelModel } from '../state';\nimport { getPanelChromeProps } from '../utils/getPanelChromeProps';\n\nimport { PanelHeaderMenuWrapper } from './PanelHeader/PanelHeaderMenuWrapper';\n\ninterface OwnProps {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  plugin: PanelPlugin;\n  isViewing: boolean;\n  isEditing: boolean;\n  isInView: boolean;\n  isDraggable?: boolean;\n  width: number;\n  height: number;\n  hideMenu?: boolean;\n}\n\ninterface ConnectedProps {\n  angularComponent?: AngularComponent;\n}\n\ninterface DispatchProps {\n  setPanelAngularComponent: typeof setPanelAngularComponent;\n}\n\nexport type Props = OwnProps & ConnectedProps & DispatchProps;\n\nexport interface State {\n  data: PanelData;\n  errorMessage?: string;\n}\n\ninterface AngularScopeProps {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  size: {\n    height: number;\n    width: number;\n  };\n}\n\nexport class PanelChromeAngularUnconnected extends PureComponent<Props, State> {\n  element: HTMLElement | null = null;\n  timeSrv: TimeSrv = getTimeSrv();\n  scopeProps?: AngularScopeProps;\n  subs = new Subscription();\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      data: {\n        state: LoadingState.NotStarted,\n        series: [],\n        timeRange: getDefaultTimeRange(),\n      },\n    };\n  }\n\n  componentDidMount() {\n    const { panel } = this.props;\n    this.loadAngularPanel();\n\n    // subscribe to data events\n    const queryRunner = panel.getQueryRunner();\n\n    // we are not displaying any of this data so no need for transforms or field config\n    this.subs.add(\n      queryRunner.getData({ withTransforms: false, withFieldConfig: false }).subscribe({\n        next: (data: PanelData) => this.onPanelDataUpdate(data),\n      })\n    );\n  }\n\n  onPanelDataUpdate(data: PanelData) {\n    let errorMessage: string | undefined;\n\n    if (data.state === LoadingState.Error) {\n      const { error } = data;\n      if (error) {\n        if (errorMessage !== error.message) {\n          errorMessage = error.message;\n        }\n      }\n    }\n\n    this.setState({ data, errorMessage });\n  }\n\n  componentWillUnmount() {\n    this.subs.unsubscribe();\n    if (this.props.angularComponent) {\n      this.props.angularComponent?.destroy();\n    }\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    const { plugin, height, width, panel } = this.props;\n\n    if (prevProps.plugin !== plugin) {\n      this.loadAngularPanel();\n    }\n\n    if (prevProps.width !== width || prevProps.height !== height) {\n      if (this.scopeProps) {\n        this.scopeProps.size.height = this.getInnerPanelHeight();\n        this.scopeProps.size.width = this.getInnerPanelWidth();\n        panel.render();\n      }\n    }\n  }\n\n  getInnerPanelHeight() {\n    const { plugin, height } = this.props;\n    const { theme } = config;\n\n    const headerHeight = this.hasOverlayHeader() ? 0 : theme.panelHeaderHeight;\n    const chromePadding = plugin.noPadding ? 0 : theme.panelPadding;\n    return height - headerHeight - chromePadding * 2 - PANEL_BORDER;\n  }\n\n  getInnerPanelWidth() {\n    const { plugin, width } = this.props;\n    const { theme } = config;\n\n    const chromePadding = plugin.noPadding ? 0 : theme.panelPadding;\n    return width - chromePadding * 2 - PANEL_BORDER;\n  }\n\n  loadAngularPanel() {\n    const { panel, dashboard, setPanelAngularComponent } = this.props;\n\n    // if we have no element or already have loaded the panel return\n    if (!this.element) {\n      return;\n    }\n\n    const loader = getAngularLoader();\n    const template = '<plugin-component type=\"panel\" class=\"panel-height-helper\"></plugin-component>';\n\n    this.scopeProps = {\n      panel: panel,\n      dashboard: dashboard,\n      size: { width: this.getInnerPanelWidth(), height: this.getInnerPanelHeight() },\n    };\n\n    setPanelAngularComponent({\n      key: panel.key,\n      angularComponent: loader.load(this.element, this.scopeProps, template),\n    });\n  }\n\n  hasOverlayHeader() {\n    const { panel } = this.props;\n    const { data } = this.state;\n\n    // always show normal header if we have time override\n    if (data.request && data.request.timeInfo) {\n      return false;\n    }\n\n    return !panel.hasTitle();\n  }\n\n  render() {\n    const { dashboard, panel } = this.props;\n    const { errorMessage, data } = this.state;\n    const { transparent } = panel;\n\n    const panelChromeProps = getPanelChromeProps({ ...this.props, data });\n\n    // Shift the hover menu down if it's on the top row so it doesn't get clipped by topnav\n    const hoverHeaderOffset = (panel.gridPos?.y ?? 0) === 0 ? -16 : undefined;\n\n    const menu = (\n      <div data-testid=\"panel-dropdown\">\n        <PanelHeaderMenuWrapper panel={panel} dashboard={dashboard} loadingState={data.state} />\n      </div>\n    );\n\n    return (\n      <PanelChrome\n        width={this.props.width}\n        height={this.props.height}\n        title={panelChromeProps.title}\n        loadingState={data.state}\n        statusMessage={errorMessage}\n        statusMessageOnClick={panelChromeProps.onOpenErrorInspect}\n        description={panelChromeProps.description}\n        titleItems={panelChromeProps.titleItems}\n        menu={this.props.hideMenu ? undefined : menu}\n        dragClass={panelChromeProps.dragClass}\n        dragClassCancel=\"grid-drag-cancel\"\n        padding={panelChromeProps.padding}\n        hoverHeaderOffset={hoverHeaderOffset}\n        hoverHeader={panelChromeProps.hasOverlayHeader()}\n        displayMode={transparent ? 'transparent' : 'default'}\n        onCancelQuery={panelChromeProps.onCancelQuery}\n        onOpenMenu={panelChromeProps.onOpenMenu}\n      >\n        {() => <div ref={(element) => (this.element = element)} className=\"panel-height-helper\" />}\n      </PanelChrome>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state, props) => {\n  return {\n    angularComponent: getPanelStateForModel(state, props.panel)?.angularComponent,\n  };\n};\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, OwnProps> = { setPanelAngularComponent };\n\nexport const PanelChromeAngular = connect(mapStateToProps, mapDispatchToProps)(PanelChromeAngularUnconnected);\n","import {\n  ConfigOverrideRule,\n  DynamicConfigValue,\n  FieldColorModeId,\n  FieldConfigSource,\n  FieldMatcherID,\n} from '@grafana/data';\n\nexport const changeSeriesColorConfigFactory = (\n  label: string,\n  color: string,\n  fieldConfig: FieldConfigSource\n): FieldConfigSource => {\n  const { overrides } = fieldConfig;\n  const currentIndex = fieldConfig.overrides.findIndex((override) => {\n    return override.matcher.id === FieldMatcherID.byName && override.matcher.options === label;\n  });\n\n  if (currentIndex < 0) {\n    return {\n      ...fieldConfig,\n      overrides: [...fieldConfig.overrides, createOverride(label, color)],\n    };\n  }\n\n  const overridesCopy = Array.from(overrides);\n  const existing = overridesCopy[currentIndex];\n  const propertyIndex = existing.properties.findIndex((p) => p.id === 'color');\n\n  if (propertyIndex < 0) {\n    overridesCopy[currentIndex] = {\n      ...existing,\n      properties: [...existing.properties, createProperty(color)],\n    };\n\n    return {\n      ...fieldConfig,\n      overrides: overridesCopy,\n    };\n  }\n\n  const propertiesCopy = Array.from(existing.properties);\n  propertiesCopy[propertyIndex] = createProperty(color);\n\n  overridesCopy[currentIndex] = {\n    ...existing,\n    properties: propertiesCopy,\n  };\n\n  return {\n    ...fieldConfig,\n    overrides: overridesCopy,\n  };\n};\n\nconst createOverride = (label: string, color: string): ConfigOverrideRule => {\n  return {\n    matcher: {\n      id: FieldMatcherID.byName,\n      options: label,\n    },\n    properties: [createProperty(color)],\n  };\n};\n\nconst createProperty = (color: string): DynamicConfigValue => {\n  return {\n    id: 'color',\n    value: {\n      mode: FieldColorModeId.Fixed,\n      fixedColor: color,\n    },\n  };\n};\n","export enum PanelLogEvents {\n  FIELD_CONFIG_OVERRIDES_CHANGED_EVENT = 'field config overrides changed',\n  NEW_PANEL_OPTION_EVENT = 'new panel option',\n  PANEL_OPTION_CHANGED_EVENT = 'panel option changed',\n  NEW_DEFAULT_FIELD_CONFIG_EVENT = 'new default field config',\n  DEFAULT_FIELD_CONFIG_CHANGED_EVENT = 'default field config changed',\n  NEW_CUSTOM_FIELD_CONFIG_EVENT = 'new custom field config',\n  CUSTOM_FIELD_CONFIG_CHANGED_EVENT = 'custom field config changed',\n  MEASURE_PANEL_LOAD_TIME_EVENT = 'measure panel load time',\n  THRESHOLDS_COUNT_CHANGED_EVENT = 'thresholds count changed',\n  THRESHOLDS_MODE_CHANGED_EVENT = 'thresholds mode changed',\n  MAPPINGS_COUNT_CHANGED_EVENT = 'mappings count changed',\n  LINKS_COUNT_CHANGED_EVENT = 'links count changed',\n  PANEL_ERROR = 'panel error',\n}\n\nexport const FIELD_CONFIG_OVERRIDES_KEY = 'overrides';\nexport const FIELD_CONFIG_CUSTOM_KEY = 'custom';\n","import { useEffect } from 'react';\n\nimport { faro } from '@grafana/faro-web-sdk';\nimport { config } from 'app/core/config';\nimport { PanelLogEvents } from 'app/core/log_events';\n\ninterface Props {\n  panelType: string;\n  panelId: number;\n  panelTitle: string;\n}\n\nexport const PanelLoadTimeMonitor = (props: Props) => {\n  const startLoadTime = performance.now();\n\n  useEffect(() => {\n    if (!config.grafanaJavascriptAgent.enabled) {\n      return;\n    }\n\n    // This code will be run ASAP after Style and Layout information have\n    // been calculated and the paint has occurred.\n    // https://firefox-source-docs.mozilla.org/performance/bestpractices.html\n    requestAnimationFrame(() => {\n      setTimeout(() => {\n        faro.api.pushMeasurement(\n          {\n            type: PanelLogEvents.MEASURE_PANEL_LOAD_TIME_EVENT,\n            values: {\n              start_loading_time_ms: startLoadTime,\n              load_time_ms: performance.now() - startLoadTime,\n            },\n          },\n          {\n            context: {\n              panel_type: props.panelType,\n              panel_id: String(props.panelId),\n              panel_title: props.panelTitle,\n            },\n          }\n        );\n      }, 0);\n    });\n\n    return;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return null;\n};\n","import { FieldConfigSource } from '@grafana/data';\nimport { faro } from '@grafana/faro-web-sdk';\nimport { FIELD_CONFIG_CUSTOM_KEY, FIELD_CONFIG_OVERRIDES_KEY, PanelLogEvents } from 'app/core/log_events';\n\ninterface PanelLogInfo {\n  panelId: string;\n  panelType: string;\n  panelTitle: string;\n}\n\nexport class PanelOptionsLogger {\n  private initialPanelOptions: unknown;\n  private initialFieldConfig: FieldConfigSource;\n  private panelLogInfo: PanelLogInfo;\n\n  constructor(initialPanelOptions: unknown, initialFieldConfig: FieldConfigSource, panelLogInfo: PanelLogInfo) {\n    this.initialPanelOptions = initialPanelOptions;\n    this.initialFieldConfig = initialFieldConfig;\n    this.panelLogInfo = panelLogInfo;\n  }\n\n  logChanges = (latestPanelOptions: unknown, latestFieldConfig: FieldConfigSource) => {\n    this.logPanelOptionChanges(latestPanelOptions, this.initialPanelOptions);\n    this.logFieldConfigChanges(latestFieldConfig, this.initialFieldConfig);\n\n    //set the old values to the current values for next log diff\n    this.initialPanelOptions = latestPanelOptions;\n    this.initialFieldConfig = latestFieldConfig;\n  };\n\n  logPanelEvent = (eventName: string, newKey: string, newVal: string, oldVal?: string) => {\n    const logObj = {\n      key: newKey,\n      newValue: newVal,\n      oldValue: oldVal ?? '',\n      panelTitle: this.panelLogInfo.panelTitle,\n      panelId: this.panelLogInfo.panelId,\n      panelType: this.panelLogInfo.panelType,\n    };\n\n    faro.api.pushEvent(eventName, logObj);\n  };\n\n  logPanelOptionChanges = (panelOptions: unknown, oldPanelOptions: unknown) => {\n    if (typeof panelOptions !== 'object' || panelOptions === null) {\n      return;\n    }\n\n    if (typeof oldPanelOptions !== 'object' || oldPanelOptions === null) {\n      return;\n    }\n\n    const oldPanelOptionsUnknown: { [key: string]: unknown } = { ...oldPanelOptions };\n\n    for (const [key, value] of Object.entries(panelOptions)) {\n      const newValue: string = typeof value !== 'string' ? JSON.stringify(value) : value;\n      const oldValue: string =\n        typeof value !== 'string' ? JSON.stringify(oldPanelOptionsUnknown[key]) : String(oldPanelOptionsUnknown[key]);\n\n      if (oldPanelOptionsUnknown[key] === undefined) {\n        this.logPanelEvent(PanelLogEvents.NEW_PANEL_OPTION_EVENT, key, newValue);\n      } else if (oldValue !== newValue) {\n        this.logPanelEvent(PanelLogEvents.PANEL_OPTION_CHANGED_EVENT, key, newValue, oldValue);\n      }\n    }\n  };\n\n  logFieldConfigChanges = (fieldConfig: FieldConfigSource<unknown>, oldFieldConfig: FieldConfigSource<unknown>) => {\n    // overrides are an array of objects, so stringify it all and log changes\n    // in lack of an index, we can't tell which override changed\n    const oldOverridesStr = JSON.stringify(oldFieldConfig.overrides);\n    const newOverridesStr = JSON.stringify(fieldConfig.overrides);\n    if (oldOverridesStr !== newOverridesStr) {\n      this.logPanelEvent(\n        PanelLogEvents.FIELD_CONFIG_OVERRIDES_CHANGED_EVENT,\n        FIELD_CONFIG_OVERRIDES_KEY,\n        newOverridesStr,\n        oldOverridesStr\n      );\n    }\n\n    const oldDefaults: { [key: string]: unknown } = { ...oldFieldConfig.defaults };\n\n    // go through field config keys except custom, we treat that below\n    for (const [key, value] of Object.entries(fieldConfig.defaults)) {\n      if (key === FIELD_CONFIG_CUSTOM_KEY) {\n        continue;\n      }\n\n      const newValue: string = typeof value !== 'string' ? JSON.stringify(value) : value;\n      const oldValue: string = typeof value !== 'string' ? JSON.stringify(oldDefaults[key]) : String(oldDefaults[key]);\n\n      if (oldDefaults[key] === undefined) {\n        this.logPanelEvent(PanelLogEvents.NEW_DEFAULT_FIELD_CONFIG_EVENT, key, newValue);\n      } else if (oldValue !== newValue) {\n        this.logPanelEvent(PanelLogEvents.DEFAULT_FIELD_CONFIG_CHANGED_EVENT, key, newValue, oldValue);\n      }\n    }\n\n    if (!fieldConfig.defaults.custom || oldDefaults.custom === undefined) {\n      return;\n    }\n\n    const oldCustom: { [key: string]: unknown } = { ...oldDefaults.custom };\n\n    // go through custom field config keys\n    for (const [key, value] of Object.entries(fieldConfig.defaults.custom)) {\n      if (oldDefaults.custom === null || oldCustom[key] === null) {\n        continue;\n      }\n\n      const newValue: string = typeof value !== 'string' ? JSON.stringify(value) : value;\n      const oldValue: string = typeof value !== 'string' ? JSON.stringify(oldCustom[key]) : String(oldCustom[key]);\n\n      if (oldCustom[key] === undefined) {\n        this.logPanelEvent(PanelLogEvents.NEW_CUSTOM_FIELD_CONFIG_EVENT, key, newValue);\n      } else if (oldValue !== newValue) {\n        this.logPanelEvent(PanelLogEvents.CUSTOM_FIELD_CONFIG_CHANGED_EVENT, key, newValue, oldValue);\n      }\n    }\n  };\n}\n","import React, { PureComponent } from 'react';\nimport { Subscription } from 'rxjs';\n\nimport {\n  AbsoluteTimeRange,\n  AnnotationChangeEvent,\n  AnnotationEventUIModel,\n  CoreApp,\n  DashboardCursorSync,\n  DataFrame,\n  EventFilterOptions,\n  FieldConfigSource,\n  getDataSourceRef,\n  getDefaultTimeRange,\n  LoadingState,\n  PanelData,\n  PanelPlugin,\n  PanelPluginMeta,\n  TimeRange,\n  toDataFrameDTO,\n  toUtc,\n} from '@grafana/data';\nimport { RefreshEvent } from '@grafana/runtime';\nimport { VizLegendOptions } from '@grafana/schema';\nimport {\n  ErrorBoundary,\n  PanelChrome,\n  PanelContext,\n  PanelContextProvider,\n  SeriesVisibilityChangeMode,\n  AdHocFilterItem,\n} from '@grafana/ui';\nimport config from 'app/core/config';\nimport { profiler } from 'app/core/profiler';\nimport { applyPanelTimeOverrides } from 'app/features/dashboard/utils/panel';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { applyFilterFromTable } from 'app/features/variables/adhoc/actions';\nimport { onUpdatePanelSnapshotData } from 'app/plugins/datasource/grafana/utils';\nimport { changeSeriesColorConfigFactory } from 'app/plugins/panel/timeseries/overrides/colorSeriesConfigFactory';\nimport { dispatch } from 'app/store/store';\nimport { RenderEvent } from 'app/types/events';\n\nimport { deleteAnnotation, saveAnnotation, updateAnnotation } from '../../annotations/api';\nimport { getDashboardQueryRunner } from '../../query/state/DashboardQueryRunner/DashboardQueryRunner';\nimport { getTimeSrv, TimeSrv } from '../services/TimeSrv';\nimport { DashboardModel, PanelModel } from '../state';\nimport { getPanelChromeProps } from '../utils/getPanelChromeProps';\nimport { loadSnapshotData } from '../utils/loadSnapshotData';\n\nimport { PanelHeaderMenuWrapper } from './PanelHeader/PanelHeaderMenuWrapper';\nimport { PanelLoadTimeMonitor } from './PanelLoadTimeMonitor';\nimport { seriesVisibilityConfigFactory } from './SeriesVisibilityConfigFactory';\nimport { liveTimer } from './liveTimer';\nimport { PanelOptionsLogger } from './panelOptionsLogger';\n\nconst DEFAULT_PLUGIN_ERROR = 'Error in plugin';\n\nexport interface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  plugin: PanelPlugin;\n  isViewing: boolean;\n  isEditing: boolean;\n  isInView: boolean;\n  isDraggable?: boolean;\n  width: number;\n  height: number;\n  onInstanceStateChange: (value: any) => void;\n  timezone?: string;\n  hideMenu?: boolean;\n}\n\nexport interface State {\n  isFirstLoad: boolean;\n  renderCounter: number;\n  errorMessage?: string;\n  context: PanelContext;\n  data: PanelData;\n  liveTime?: TimeRange;\n}\n\nexport class PanelStateWrapper extends PureComponent<Props, State> {\n  private readonly timeSrv: TimeSrv = getTimeSrv();\n  private subs = new Subscription();\n  private eventFilter: EventFilterOptions = { onlyLocal: true };\n  private panelOptionsLogger: PanelOptionsLogger | undefined = undefined;\n\n  constructor(props: Props) {\n    super(props);\n\n    // Can this eventBus be on PanelModel?  when we have more complex event filtering, that may be a better option\n    const eventBus = props.dashboard.events.newScopedBus(`panel:${props.panel.id}`, this.eventFilter);\n\n    this.state = {\n      isFirstLoad: true,\n      renderCounter: 0,\n      context: {\n        eventsScope: '__global_',\n        eventBus,\n        app: this.getPanelContextApp(),\n        sync: this.getSync,\n        onSeriesColorChange: this.onSeriesColorChange,\n        onToggleSeriesVisibility: this.onSeriesVisibilityChange,\n        onAnnotationCreate: this.onAnnotationCreate,\n        onAnnotationUpdate: this.onAnnotationUpdate,\n        onAnnotationDelete: this.onAnnotationDelete,\n        onInstanceStateChange: this.onInstanceStateChange,\n        onToggleLegendSort: this.onToggleLegendSort,\n        canAddAnnotations: props.dashboard.canAddAnnotations.bind(props.dashboard),\n        canEditAnnotations: props.dashboard.canEditAnnotations.bind(props.dashboard),\n        canDeleteAnnotations: props.dashboard.canDeleteAnnotations.bind(props.dashboard),\n        onAddAdHocFilter: this.onAddAdHocFilter,\n        onUpdateData: this.onUpdateData,\n      },\n      data: this.getInitialPanelDataState(),\n    };\n\n    if (config.featureToggles.panelMonitoring && this.getPanelContextApp() === CoreApp.PanelEditor) {\n      const panelInfo = {\n        panelId: String(props.panel.id),\n        panelType: props.panel.type,\n        panelTitle: props.panel.title,\n      };\n\n      this.panelOptionsLogger = new PanelOptionsLogger(props.panel.getOptions(), props.panel.fieldConfig, panelInfo);\n    }\n  }\n\n  // Due to a mutable panel model we get the sync settings via function that proactively reads from the model\n  getSync = () => (this.props.isEditing ? DashboardCursorSync.Off : this.props.dashboard.graphTooltip);\n\n  onInstanceStateChange = (value: any) => {\n    this.props.onInstanceStateChange(value);\n\n    this.setState({\n      context: {\n        ...this.state.context,\n        instanceState: value,\n      },\n    });\n  };\n\n  getPanelContextApp() {\n    if (this.props.isEditing) {\n      return CoreApp.PanelEditor;\n    }\n    if (this.props.isViewing) {\n      return CoreApp.PanelViewer;\n    }\n\n    return CoreApp.Dashboard;\n  }\n\n  onUpdateData = (frames: DataFrame[]): Promise<boolean> => {\n    return onUpdatePanelSnapshotData(this.props.panel, frames);\n  };\n\n  onSeriesColorChange = (label: string, color: string) => {\n    this.onFieldConfigChange(changeSeriesColorConfigFactory(label, color, this.props.panel.fieldConfig));\n  };\n\n  onSeriesVisibilityChange = (label: string, mode: SeriesVisibilityChangeMode) => {\n    this.onFieldConfigChange(\n      seriesVisibilityConfigFactory(label, mode, this.props.panel.fieldConfig, this.state.data.series)\n    );\n  };\n\n  onToggleLegendSort = (sortKey: string) => {\n    const legendOptions: VizLegendOptions = this.props.panel.options.legend;\n\n    // We don't want to do anything when legend options are not available\n    if (!legendOptions) {\n      return;\n    }\n\n    let sortDesc = legendOptions.sortDesc;\n    let sortBy = legendOptions.sortBy;\n    if (sortKey !== sortBy) {\n      sortDesc = undefined;\n    }\n\n    // if already sort ascending, disable sorting\n    if (sortDesc === false) {\n      sortBy = undefined;\n      sortDesc = undefined;\n    } else {\n      sortDesc = !sortDesc;\n      sortBy = sortKey;\n    }\n\n    this.onOptionsChange({\n      ...this.props.panel.options,\n      legend: { ...legendOptions, sortBy, sortDesc },\n    });\n  };\n\n  getInitialPanelDataState(): PanelData {\n    return {\n      state: LoadingState.NotStarted,\n      series: [],\n      timeRange: getDefaultTimeRange(),\n    };\n  }\n\n  componentDidMount() {\n    const { panel, dashboard } = this.props;\n\n    // Subscribe to panel events\n    this.subs.add(panel.events.subscribe(RefreshEvent, this.onRefresh));\n    this.subs.add(panel.events.subscribe(RenderEvent, this.onRender));\n\n    dashboard.panelInitialized(this.props.panel);\n\n    // Move snapshot data into the query response\n    if (this.hasPanelSnapshot) {\n      this.setState({\n        data: loadSnapshotData(panel, dashboard),\n        isFirstLoad: false,\n      });\n      return;\n    }\n\n    if (!this.wantsQueryExecution) {\n      this.setState({ isFirstLoad: false });\n    }\n\n    this.subs.add(\n      panel\n        .getQueryRunner()\n        .getData({ withTransforms: true, withFieldConfig: true })\n        .subscribe({\n          next: (data) => this.onDataUpdate(data),\n        })\n    );\n\n    // Listen for live timer events\n    liveTimer.listen(this);\n  }\n\n  componentWillUnmount() {\n    this.subs.unsubscribe();\n    liveTimer.remove(this);\n  }\n\n  liveTimeChanged(liveTime: TimeRange) {\n    const { data } = this.state;\n    if (data.timeRange) {\n      const delta = liveTime.to.valueOf() - data.timeRange.to.valueOf();\n      if (delta < 100) {\n        // 10hz\n        console.log('Skip tick render', this.props.panel.title, delta);\n        return;\n      }\n    }\n    this.setState({ liveTime });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { isInView, width, panel } = this.props;\n    const { context } = this.state;\n\n    const app = this.getPanelContextApp();\n\n    if (context.app !== app) {\n      this.setState({\n        context: {\n          ...context,\n          app,\n        },\n      });\n    }\n\n    // View state has changed\n    if (isInView !== prevProps.isInView) {\n      if (isInView) {\n        // Check if we need a delayed refresh\n        if (panel.refreshWhenInView) {\n          this.onRefresh();\n        }\n      }\n    }\n\n    // The timer depends on panel width\n    if (width !== prevProps.width) {\n      liveTimer.updateInterval(this);\n    }\n  }\n\n  // Updates the response with information from the stream\n  // The next is outside a react synthetic event so setState is not batched\n  // So in this context we can only do a single call to setState\n  onDataUpdate(data: PanelData) {\n    const { dashboard, panel, plugin } = this.props;\n\n    // Ignore this data update if we are now a non data panel\n    if (plugin.meta.skipDataQuery) {\n      this.setState({ data: this.getInitialPanelDataState() });\n      return;\n    }\n\n    let { isFirstLoad } = this.state;\n    let errorMessage: string | undefined;\n\n    switch (data.state) {\n      case LoadingState.Loading:\n        // Skip updating state data if it is already in loading state\n        // This is to avoid rendering partial loading responses\n        if (this.state.data.state === LoadingState.Loading) {\n          return;\n        }\n        break;\n      case LoadingState.Error:\n        const { error, errors } = data;\n        if (errors?.length) {\n          if (errors.length === 1) {\n            errorMessage = errors[0].message;\n          } else {\n            errorMessage = 'Multiple errors found. Click for more details';\n          }\n        } else if (error) {\n          if (errorMessage !== error.message) {\n            errorMessage = error.message;\n          }\n        }\n        break;\n      case LoadingState.Done:\n        // If we are doing a snapshot save data in panel model\n        if (dashboard.snapshot) {\n          panel.snapshotData = data.series.map((frame) => toDataFrameDTO(frame));\n        }\n        if (isFirstLoad) {\n          isFirstLoad = false;\n        }\n        break;\n    }\n\n    this.setState({ isFirstLoad, errorMessage, data, liveTime: undefined });\n  }\n\n  onRefresh = () => {\n    const { dashboard, panel, isInView, width } = this.props;\n\n    if (!isInView) {\n      panel.refreshWhenInView = true;\n      return;\n    }\n\n    const timeData = applyPanelTimeOverrides(panel, this.timeSrv.timeRange());\n\n    // Issue Query\n    if (this.wantsQueryExecution) {\n      if (width < 0) {\n        return;\n      }\n\n      panel.refreshWhenInView = false;\n      panel.runAllPanelQueries({\n        dashboardUID: dashboard.uid,\n        dashboardTimezone: dashboard.getTimezone(),\n        timeData,\n        width,\n      });\n    } else {\n      // The panel should render on refresh as well if it doesn't have a query, like clock panel\n      this.setState({\n        data: { ...this.state.data, timeRange: this.timeSrv.timeRange() },\n        renderCounter: this.state.renderCounter + 1,\n        liveTime: undefined,\n      });\n    }\n  };\n\n  onRender = () => {\n    const stateUpdate = { renderCounter: this.state.renderCounter + 1 };\n    this.setState(stateUpdate);\n  };\n\n  onOptionsChange = (options: any) => {\n    this.props.panel.updateOptions(options);\n  };\n\n  onFieldConfigChange = (config: FieldConfigSource) => {\n    this.props.panel.updateFieldConfig(config);\n  };\n\n  logPanelChangesOnError() {\n    this.panelOptionsLogger!.logChanges(this.props.panel.getOptions(), this.props.panel.fieldConfig);\n  }\n\n  onPanelError = (error: Error) => {\n    if (config.featureToggles.panelMonitoring && this.getPanelContextApp() === CoreApp.PanelEditor) {\n      this.logPanelChangesOnError();\n    }\n\n    const errorMessage = error.message || DEFAULT_PLUGIN_ERROR;\n\n    if (this.state.errorMessage !== errorMessage) {\n      this.setState({ errorMessage });\n    }\n  };\n\n  onPanelErrorRecover = () => {\n    this.setState({ errorMessage: undefined });\n  };\n\n  onAnnotationCreate = async (event: AnnotationEventUIModel) => {\n    const isRegion = event.from !== event.to;\n    const anno = {\n      dashboardUID: this.props.dashboard.uid,\n      panelId: this.props.panel.id,\n      isRegion,\n      time: event.from,\n      timeEnd: isRegion ? event.to : 0,\n      tags: event.tags,\n      text: event.description,\n    };\n    await saveAnnotation(anno);\n    getDashboardQueryRunner().run({ dashboard: this.props.dashboard, range: this.timeSrv.timeRange() });\n    this.state.context.eventBus.publish(new AnnotationChangeEvent(anno));\n  };\n\n  onAnnotationDelete = async (id: string) => {\n    await deleteAnnotation({ id });\n    getDashboardQueryRunner().run({ dashboard: this.props.dashboard, range: this.timeSrv.timeRange() });\n    this.state.context.eventBus.publish(new AnnotationChangeEvent({ id }));\n  };\n\n  onAnnotationUpdate = async (event: AnnotationEventUIModel) => {\n    const isRegion = event.from !== event.to;\n    const anno = {\n      id: event.id,\n      dashboardUID: this.props.dashboard.uid,\n      panelId: this.props.panel.id,\n      isRegion,\n      time: event.from,\n      timeEnd: isRegion ? event.to : 0,\n      tags: event.tags,\n      text: event.description,\n    };\n    await updateAnnotation(anno);\n\n    getDashboardQueryRunner().run({ dashboard: this.props.dashboard, range: this.timeSrv.timeRange() });\n    this.state.context.eventBus.publish(new AnnotationChangeEvent(anno));\n  };\n\n  get hasPanelSnapshot() {\n    const { panel } = this.props;\n    return panel.snapshotData && panel.snapshotData.length;\n  }\n\n  get wantsQueryExecution() {\n    return !(this.props.plugin.meta.skipDataQuery || this.hasPanelSnapshot);\n  }\n\n  onChangeTimeRange = (timeRange: AbsoluteTimeRange) => {\n    this.timeSrv.setTime({\n      from: toUtc(timeRange.from),\n      to: toUtc(timeRange.to),\n    });\n  };\n\n  shouldSignalRenderingCompleted(loadingState: LoadingState, pluginMeta: PanelPluginMeta) {\n    return loadingState === LoadingState.Done || loadingState === LoadingState.Error || pluginMeta.skipDataQuery;\n  }\n\n  skipFirstRender(loadingState: LoadingState) {\n    const { isFirstLoad } = this.state;\n    return (\n      this.wantsQueryExecution &&\n      isFirstLoad &&\n      (loadingState === LoadingState.Loading || loadingState === LoadingState.NotStarted)\n    );\n  }\n\n  onAddAdHocFilter = (filter: AdHocFilterItem) => {\n    const { key, value, operator } = filter;\n\n    // When the datasource is null/undefined (for a default datasource), we use getInstanceSettings\n    // to find the real datasource ref for the default datasource.\n    const datasourceInstance = getDatasourceSrv().getInstanceSettings(this.props.panel.datasource);\n    const datasourceRef = datasourceInstance && getDataSourceRef(datasourceInstance);\n    if (!datasourceRef) {\n      return;\n    }\n\n    dispatch(applyFilterFromTable({ datasource: datasourceRef, key, operator, value }));\n  };\n\n  renderPanelContent(innerWidth: number, innerHeight: number) {\n    const { panel, plugin, dashboard } = this.props;\n    const { renderCounter, data } = this.state;\n    const { state: loadingState } = data;\n\n    // do not render component until we have first data\n    if (this.skipFirstRender(loadingState)) {\n      return null;\n    }\n\n    // This is only done to increase a counter that is used by backend\n    // image rendering to know when to capture image\n    if (this.shouldSignalRenderingCompleted(loadingState, plugin.meta)) {\n      profiler.renderingCompleted();\n    }\n\n    const PanelComponent = plugin.panel!;\n    const timeRange = this.state.liveTime ?? data.timeRange ?? this.timeSrv.timeRange();\n    const panelOptions = panel.getOptions();\n\n    // Update the event filter (dashboard settings may have changed)\n    // Yes this is called ever render for a function that is triggered on every mouse move\n    this.eventFilter.onlyLocal = dashboard.graphTooltip === 0;\n\n    return (\n      <>\n        <PanelContextProvider value={this.state.context}>\n          <PanelComponent\n            id={panel.id}\n            data={data}\n            title={panel.title}\n            timeRange={timeRange}\n            timeZone={this.props.dashboard.getTimezone()}\n            options={panelOptions}\n            fieldConfig={panel.fieldConfig}\n            transparent={panel.transparent}\n            width={innerWidth}\n            height={innerHeight}\n            renderCounter={renderCounter}\n            replaceVariables={panel.replaceVariables}\n            onOptionsChange={this.onOptionsChange}\n            onFieldConfigChange={this.onFieldConfigChange}\n            onChangeTimeRange={this.onChangeTimeRange}\n            eventBus={dashboard.events}\n          />\n          {config.featureToggles.panelMonitoring && this.state.errorMessage === undefined && (\n            <PanelLoadTimeMonitor panelType={plugin.meta.id} panelId={panel.id} panelTitle={panel.title} />\n          )}\n        </PanelContextProvider>\n      </>\n    );\n  }\n\n  render() {\n    const { dashboard, panel, width, height, plugin } = this.props;\n    const { errorMessage, data } = this.state;\n    const { transparent } = panel;\n\n    const panelChromeProps = getPanelChromeProps({ ...this.props, data });\n\n    // Shift the hover menu down if it's on the top row so it doesn't get clipped by topnav\n    const hoverHeaderOffset = (panel.gridPos?.y ?? 0) === 0 ? -16 : undefined;\n\n    const menu = (\n      <div data-testid=\"panel-dropdown\">\n        <PanelHeaderMenuWrapper panel={panel} dashboard={dashboard} loadingState={data.state} />\n      </div>\n    );\n\n    return (\n      <PanelChrome\n        width={width}\n        height={height}\n        title={panelChromeProps.title}\n        loadingState={data.state}\n        statusMessage={errorMessage}\n        statusMessageOnClick={panelChromeProps.onOpenErrorInspect}\n        description={panelChromeProps.description}\n        titleItems={panelChromeProps.titleItems}\n        menu={this.props.hideMenu ? undefined : menu}\n        dragClass={panelChromeProps.dragClass}\n        dragClassCancel=\"grid-drag-cancel\"\n        padding={panelChromeProps.padding}\n        hoverHeaderOffset={hoverHeaderOffset}\n        hoverHeader={panelChromeProps.hasOverlayHeader()}\n        displayMode={transparent ? 'transparent' : 'default'}\n        onCancelQuery={panelChromeProps.onCancelQuery}\n        onOpenMenu={panelChromeProps.onOpenMenu}\n      >\n        {(innerWidth, innerHeight) => (\n          <>\n            <ErrorBoundary\n              dependencies={[data, plugin, panel.getOptions()]}\n              onError={this.onPanelError}\n              onRecover={this.onPanelErrorRecover}\n            >\n              {({ error }) => {\n                if (error) {\n                  return null;\n                }\n                return this.renderPanelContent(innerWidth, innerHeight);\n              }}\n            </ErrorBoundary>\n          </>\n        )}\n      </PanelChrome>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { StoreState } from 'app/types';\n\nimport { initPanelState } from '../../panel/state/actions';\nimport { setPanelInstanceState } from '../../panel/state/reducers';\nimport { DashboardModel, PanelModel } from '../state';\n\nimport { LazyLoader } from './LazyLoader';\nimport { PanelChromeAngular } from './PanelChromeAngular';\nimport { PanelStateWrapper } from './PanelStateWrapper';\n\nexport interface OwnProps {\n  panel: PanelModel;\n  stateKey: string;\n  dashboard: DashboardModel;\n  isEditing: boolean;\n  isViewing: boolean;\n  isDraggable?: boolean;\n  width: number;\n  height: number;\n  lazy?: boolean;\n  timezone?: string;\n  hideMenu?: boolean;\n}\n\nconst mapStateToProps = (state: StoreState, props: OwnProps) => {\n  const panelState = state.panels[props.stateKey];\n  if (!panelState) {\n    return { plugin: null };\n  }\n\n  return {\n    plugin: panelState.plugin,\n    instanceState: panelState.instanceState,\n  };\n};\n\nconst mapDispatchToProps = {\n  initPanelState,\n  setPanelInstanceState,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class DashboardPanelUnconnected extends PureComponent<Props> {\n  static defaultProps: Partial<Props> = {\n    lazy: true,\n  };\n\n  componentDidMount() {\n    this.props.panel.isInView = !this.props.lazy;\n    if (!this.props.lazy) {\n      this.onPanelLoad();\n    }\n  }\n\n  onInstanceStateChange = (value: any) => {\n    this.props.setPanelInstanceState({ key: this.props.stateKey, value });\n  };\n\n  onVisibilityChange = (v: boolean) => {\n    this.props.panel.isInView = v;\n  };\n\n  onPanelLoad = () => {\n    if (!this.props.plugin) {\n      this.props.initPanelState(this.props.panel);\n    }\n  };\n\n  renderPanel = ({ isInView }: { isInView: boolean }) => {\n    const {\n      dashboard,\n      panel,\n      isViewing,\n      isEditing,\n      width,\n      height,\n      plugin,\n      timezone,\n      hideMenu,\n      isDraggable = true,\n    } = this.props;\n\n    if (!plugin) {\n      return null;\n    }\n\n    if (plugin && plugin.angularPanelCtrl) {\n      return (\n        <PanelChromeAngular\n          plugin={plugin}\n          panel={panel}\n          dashboard={dashboard}\n          isViewing={isViewing}\n          isEditing={isEditing}\n          isInView={isInView}\n          isDraggable={isDraggable}\n          width={width}\n          height={height}\n        />\n      );\n    }\n\n    return (\n      <PanelStateWrapper\n        plugin={plugin}\n        panel={panel}\n        dashboard={dashboard}\n        isViewing={isViewing}\n        isEditing={isEditing}\n        isInView={isInView}\n        isDraggable={isDraggable}\n        width={width}\n        height={height}\n        onInstanceStateChange={this.onInstanceStateChange}\n        timezone={timezone}\n        hideMenu={hideMenu}\n      />\n    );\n  };\n\n  render() {\n    const { width, height, lazy } = this.props;\n\n    return lazy ? (\n      <LazyLoader width={width} height={height} onChange={this.onVisibilityChange} onLoad={this.onPanelLoad}>\n        {this.renderPanel}\n      </LazyLoader>\n    ) : (\n      this.renderPanel({ isInView: true })\n    );\n  }\n}\n\nexport const DashboardPanel = connector(DashboardPanelUnconnected);\n","import {\n  ByNamesMatcherMode,\n  ConfigOverrideRule,\n  DataFrame,\n  DynamicConfigValue,\n  FieldConfigSource,\n  FieldMatcherID,\n  fieldMatchers,\n  FieldType,\n  getFieldDisplayName,\n  isSystemOverrideWithRef,\n  SystemConfigOverrideRule,\n} from '@grafana/data';\nimport { SeriesVisibilityChangeMode } from '@grafana/ui';\n\nconst displayOverrideRef = 'hideSeriesFrom';\nconst isHideSeriesOverride = isSystemOverrideWithRef(displayOverrideRef);\n\nexport function seriesVisibilityConfigFactory(\n  label: string,\n  mode: SeriesVisibilityChangeMode,\n  fieldConfig: FieldConfigSource,\n  data: DataFrame[]\n) {\n  const { overrides } = fieldConfig;\n\n  const displayName = label;\n  const currentIndex = overrides.findIndex(isHideSeriesOverride);\n\n  if (currentIndex < 0) {\n    if (mode === SeriesVisibilityChangeMode.ToggleSelection) {\n      const override = createOverride([displayName, ...getNamesOfHiddenFields(overrides, data)]);\n\n      return {\n        ...fieldConfig,\n        overrides: [...fieldConfig.overrides, override],\n      };\n    }\n\n    const displayNames = getDisplayNames(data, displayName);\n    const override = createOverride(displayNames);\n\n    return {\n      ...fieldConfig,\n      overrides: [...fieldConfig.overrides, override],\n    };\n  }\n\n  const overridesCopy = Array.from(overrides);\n  const [current] = overridesCopy.splice(currentIndex, 1) as SystemConfigOverrideRule[];\n\n  if (mode === SeriesVisibilityChangeMode.ToggleSelection) {\n    let existing = getExistingDisplayNames(current);\n    const nameOfHiddenFields = getNamesOfHiddenFields(overridesCopy, data);\n\n    if (nameOfHiddenFields.length > 0) {\n      existing = existing.filter((el) => nameOfHiddenFields.indexOf(el) < 0);\n    }\n\n    if (existing[0] === displayName && existing.length === 1) {\n      return {\n        ...fieldConfig,\n        overrides: overridesCopy,\n      };\n    }\n\n    const override = createOverride([displayName, ...nameOfHiddenFields]);\n\n    return {\n      ...fieldConfig,\n      overrides: [...overridesCopy, override],\n    };\n  }\n\n  const override = createExtendedOverride(current, displayName);\n\n  if (allFieldsAreExcluded(override, data)) {\n    return {\n      ...fieldConfig,\n      overrides: overridesCopy,\n    };\n  }\n\n  return {\n    ...fieldConfig,\n    overrides: [...overridesCopy, override],\n  };\n}\n\nfunction createOverride(\n  names: string[],\n  mode = ByNamesMatcherMode.exclude,\n  property?: DynamicConfigValue\n): SystemConfigOverrideRule {\n  property = property ?? {\n    id: 'custom.hideFrom',\n    value: {\n      viz: true,\n      legend: false,\n      tooltip: false,\n    },\n  };\n\n  return {\n    __systemRef: displayOverrideRef,\n    matcher: {\n      id: FieldMatcherID.byNames,\n      options: {\n        mode: mode,\n        names: names,\n        prefix: mode === ByNamesMatcherMode.exclude ? 'All except:' : undefined,\n        readOnly: true,\n      },\n    },\n    properties: [\n      {\n        ...property,\n        value: {\n          viz: true,\n          legend: false,\n          tooltip: false,\n        },\n      },\n    ],\n  };\n}\n\nconst createExtendedOverride = (\n  current: SystemConfigOverrideRule,\n  displayName: string,\n  mode = ByNamesMatcherMode.exclude\n): SystemConfigOverrideRule => {\n  const property = current.properties.find((p) => p.id === 'custom.hideFrom');\n  const existing = getExistingDisplayNames(current);\n  const index = existing.findIndex((name) => name === displayName);\n\n  if (index < 0) {\n    existing.push(displayName);\n  } else {\n    existing.splice(index, 1);\n  }\n\n  return createOverride(existing, mode, property);\n};\n\nconst getExistingDisplayNames = (rule: SystemConfigOverrideRule): string[] => {\n  const names = rule.matcher.options?.names;\n  if (!Array.isArray(names)) {\n    return [];\n  }\n  return [...names];\n};\n\nconst allFieldsAreExcluded = (override: SystemConfigOverrideRule, data: DataFrame[]): boolean => {\n  return getExistingDisplayNames(override).length === getDisplayNames(data).length;\n};\n\nconst getDisplayNames = (data: DataFrame[], excludeName?: string): string[] => {\n  const unique = new Set<string>();\n\n  for (const frame of data) {\n    for (const field of frame.fields) {\n      if (field.type !== FieldType.number) {\n        continue;\n      }\n\n      const name = getFieldDisplayName(field, frame, data);\n\n      if (name === excludeName) {\n        continue;\n      }\n\n      unique.add(name);\n    }\n  }\n\n  return Array.from(unique);\n};\n\nconst getNamesOfHiddenFields = (overrides: ConfigOverrideRule[], data: DataFrame[]): string[] => {\n  let names: string[] = [];\n\n  for (const override of overrides) {\n    const property = override.properties.find((p) => p.id === 'custom.hideFrom');\n\n    if (property !== undefined && property.value?.legend === true) {\n      const info = fieldMatchers.get(override.matcher.id);\n      const matcher = info.get(override.matcher.options);\n\n      for (const frame of data) {\n        for (const field of frame.fields) {\n          if (field.type !== FieldType.number) {\n            continue;\n          }\n\n          const name = getFieldDisplayName(field, frame, data);\n\n          if (matcher(field, frame, data)) {\n            names.push(name);\n          }\n        }\n      }\n    }\n  }\n\n  return names;\n};\n","import {\n  applyFieldOverrides,\n  arrayToDataFrame,\n  getDefaultTimeRange,\n  getProcessedDataFrames,\n  LoadingState,\n  PanelData,\n} from '@grafana/data';\nimport { config } from 'app/core/config';\n\nimport { SnapshotWorker } from '../../query/state/DashboardQueryRunner/SnapshotWorker';\nimport { getTimeSrv } from '../services/TimeSrv';\nimport { DashboardModel, PanelModel } from '../state';\n\nimport { applyPanelTimeOverrides } from './panel';\n\nexport function loadSnapshotData(panel: PanelModel, dashboard: DashboardModel): PanelData {\n  const data = getProcessedDataFrames(panel.snapshotData);\n  const worker = new SnapshotWorker();\n  const options = { dashboard, range: getDefaultTimeRange() };\n  const annotationEvents = worker.canWork(options) ? worker.getAnnotationsInSnapshot(dashboard, panel.id) : [];\n  const annotations = [arrayToDataFrame(annotationEvents)];\n  const timeData = applyPanelTimeOverrides(panel, getTimeSrv().timeRange());\n\n  return {\n    timeRange: timeData.timeRange,\n    state: LoadingState.Done,\n    series: applyFieldOverrides({\n      data,\n      fieldConfig: {\n        defaults: {},\n        overrides: [],\n      },\n      replaceVariables: panel.replaceVariables,\n      fieldConfigRegistry: panel.plugin!.fieldConfigRegistry,\n      theme: config.theme2,\n      timeZone: dashboard.getTimezone(),\n    }),\n    structureRev: 1,\n    annotations,\n  };\n}\n","export enum InspectTab {\n  Data = 'data',\n  Meta = 'meta', // When result metadata exists\n  Error = 'error',\n  Stats = 'stats',\n  JSON = 'json',\n  Query = 'query',\n  Help = 'help', // get info required for support+debugging\n}\n","import {\n  DataLink,\n  DisplayValue,\n  FieldDisplay,\n  formattedValueToString,\n  getFieldDisplayValuesProxy,\n  getTimeField,\n  InterpolateFunction,\n  Labels,\n  LinkModelSupplier,\n  ScopedVar,\n  ScopedVars,\n} from '@grafana/data';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\n\nimport { getLinkSrv } from './link_srv';\n\ninterface SeriesVars {\n  name?: string;\n  refId?: string;\n}\n\ninterface FieldVars {\n  name: string;\n  labels?: Labels;\n}\n\ninterface ValueVars {\n  raw: any;\n  numeric: number;\n  text: string;\n  time?: number;\n  calc?: string;\n}\n\ninterface DataViewVars {\n  name?: string;\n  refId?: string;\n  fields?: Record<string, DisplayValue>;\n}\n\ninterface DataLinkScopedVars extends ScopedVars {\n  __series: ScopedVar<SeriesVars>;\n  __field: ScopedVar<FieldVars>;\n  __value: ScopedVar<ValueVars>;\n  __data: ScopedVar<DataViewVars>;\n}\n\n/**\n * Link suppliers creates link models based on a link origin\n */\nexport const getFieldLinksSupplier = (value: FieldDisplay): LinkModelSupplier<FieldDisplay> | undefined => {\n  const links = value.field.links;\n  if (!links || links.length === 0) {\n    return undefined;\n  }\n\n  return {\n    getLinks: (replaceVariables: InterpolateFunction) => {\n      const scopedVars: Partial<DataLinkScopedVars> = {};\n\n      if (value.view) {\n        const { dataFrame } = value.view;\n\n        scopedVars['__series'] = {\n          value: {\n            name: dataFrame.name,\n            refId: dataFrame.refId,\n          },\n          text: 'Series',\n        };\n\n        const field = value.colIndex !== undefined ? dataFrame.fields[value.colIndex] : undefined;\n\n        if (field) {\n          scopedVars['__field'] = {\n            value: {\n              name: field.name,\n              labels: field.labels,\n            },\n            text: 'Field',\n          };\n\n          if (value.rowIndex !== undefined && value.rowIndex >= 0) {\n            const { timeField } = getTimeField(dataFrame);\n            scopedVars['__value'] = {\n              value: {\n                raw: field.values[value.rowIndex],\n                numeric: value.display.numeric,\n                text: formattedValueToString(value.display),\n                time: timeField ? timeField.values[value.rowIndex] : undefined,\n              },\n              text: 'Value',\n            };\n          }\n\n          // Expose other values on the row\n          if (value.view) {\n            scopedVars['__data'] = {\n              value: {\n                name: dataFrame.name,\n                refId: dataFrame.refId,\n                fields: getFieldDisplayValuesProxy({\n                  frame: dataFrame,\n                  rowIndex: value.rowIndex!,\n                }),\n              },\n              text: 'Data',\n            };\n          }\n        } else {\n          // calculation\n          scopedVars['__value'] = {\n            value: {\n              raw: value.display.numeric,\n              numeric: value.display.numeric,\n              text: formattedValueToString(value.display),\n              calc: value.name,\n            },\n            text: 'Value',\n          };\n        }\n      } else {\n        console.log('VALUE', value);\n      }\n\n      const replace: InterpolateFunction = (value: string, vars: ScopedVars | undefined, fmt?: string | Function) => {\n        const finalVars: ScopedVars = {\n          ...scopedVars,\n          ...vars,\n        };\n        return replaceVariables(value, finalVars, fmt);\n      };\n\n      return links.map((link: DataLink) => {\n        return getLinkSrv().getDataLinkUIModel(link, replace, value);\n      });\n    },\n  };\n};\n\nexport const getPanelLinksSupplier = (panel: PanelModel): LinkModelSupplier<PanelModel> | undefined => {\n  const links = panel.links;\n\n  if (!links || links.length === 0) {\n    return undefined;\n  }\n\n  return {\n    getLinks: () => {\n      return links.map((link) => {\n        return getLinkSrv().getDataLinkUIModel(link, panel.replaceVariables, panel);\n      });\n    },\n  };\n};\n","import { PanelModel } from 'app/features/dashboard/state';\nimport { StoreState } from 'app/types';\n\nimport { PanelState } from './reducers';\n\nexport function getPanelStateForModel(state: StoreState, model: PanelModel): PanelState | undefined {\n  return state.panels[model.key];\n}\n"],"names":["LazyLoader","children","width","height","onLoad","onChange","id","loaded","setLoaded","isInView","setIsInView","wrapperRef","useEffectOnce","entry","wrapperEl","callbacks","c","entries","PanelLinks","panelLinks","onShowPanelLinks","styles","getStyles","getLinksContent","interpolatedLinks","Menu","link","idx","linkModel","PanelChrome","Icon","Dropdown","ToolbarButton","theme","PanelHeaderNotice","notice","onClick","iconName","e","Tooltip","PanelHeaderNotices","frames","panelId","openInspect","tab","notices","frame","PanelHeaderTitleItems","props","alertState","data","angularNotice","alertStateItem","timeshift","message","pluginType","angularNoticeTooltip","getPanelChromeProps","descriptionInteractionReported","hasOverlayHeader","onShowPanelDescription","descriptionMarkdown","interpolatedDescription","linkSupplier","panelLink","args","onOpenInspector","onOpenErrorInspect","onCancelQuery","padding","isAngularDatasource","isAngularPanel","showAngularNotice","titleItems","v","description","dragClass","title","PanelHeaderMenu","items","renderItems","item","getPanelMenu","dashboard","panel","angularComponent","onViewPanel","event","onEditPanel","onSharePanel","onAddLibraryPanel","onUnlinkLibraryPanel","onInspectPanel","onMore","onDuplicatePanel","onCopyPanel","onRemovePanel","onNavigateToExplore","openInNewWindow","url","config","store","onToggleLegend","menu","inspectMenu","currentTarget","target","subMenu","canEdit","scope","panelCtrl","angularMenuItems","reactItem","extensions","createExtensionContext","createExtensionSubMenu","categorized","uncategorized","extension","category","PanelHeaderMenuProvider","loadingState","setItems","state","PanelHeaderMenuWrapper","style","PanelChromeAngularUnconnected","Subscription","queryRunner","errorMessage","error","prevProps","prevState","plugin","headerHeight","chromePadding","setPanelAngularComponent","loader","template","transparent","panelChromeProps","hoverHeaderOffset","element","mapStateToProps","mapDispatchToProps","PanelChromeAngular","changeSeriesColorConfigFactory","label","color","fieldConfig","overrides","currentIndex","override","createOverride","overridesCopy","existing","propertyIndex","p","createProperty","propertiesCopy","PanelLogEvents","FIELD_CONFIG_OVERRIDES_KEY","FIELD_CONFIG_CUSTOM_KEY","PanelLoadTimeMonitor","startLoadTime","PanelOptionsLogger","initialPanelOptions","initialFieldConfig","panelLogInfo","latestPanelOptions","latestFieldConfig","eventName","newKey","newVal","oldVal","logObj","panelOptions","oldPanelOptions","oldPanelOptionsUnknown","key","value","newValue","oldValue","oldFieldConfig","oldOverridesStr","newOverridesStr","oldDefaults","oldCustom","DEFAULT_PLUGIN_ERROR","PanelStateWrapper","mode","sortKey","legendOptions","sortDesc","sortBy","timeData","stateUpdate","options","isRegion","anno","timeRange","filter","operator","datasourceInstance","datasourceRef","eventBus","panelInfo","loadSnapshotData","liveTimer","liveTime","delta","context","app","isFirstLoad","errors","pluginMeta","innerWidth","innerHeight","renderCounter","profiler","PanelComponent","PanelContext","ErrorBoundary","panelState","connector","DashboardPanelUnconnected","isViewing","isEditing","timezone","hideMenu","isDraggable","lazy","DashboardPanel","displayOverrideRef","isHideSeriesOverride","seriesVisibilityConfigFactory","displayName","getNamesOfHiddenFields","displayNames","getDisplayNames","current","getExistingDisplayNames","nameOfHiddenFields","el","createExtendedOverride","allFieldsAreExcluded","names","property","index","name","rule","excludeName","unique","field","matcher","worker","annotationEvents","annotations","InspectTab","getFieldLinksSupplier","links","replaceVariables","scopedVars","dataFrame","timeField","replace","vars","fmt","finalVars","getPanelLinksSupplier","getPanelStateForModel","model"],"sourceRoot":""}