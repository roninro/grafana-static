{"version":3,"file":"scenes.377ab0483cf1c1401af9.js","mappings":"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","sources":["webpack://grafana/./.yarn/__virtual__/@grafana-plugins-grafana-testdata-datasource-virtual-abcd447352/1/public/app/plugins/datasource/grafana-testdata-datasource/dataquery.gen.ts","webpack://grafana/./public/app/features/dashboard-scene/pages/DashboardScenePage.tsx","webpack://grafana/./public/app/features/dashboard-scene/panel-edit/PanelEditorRenderer.tsx","webpack://grafana/./public/app/features/dashboard-scene/panel-edit/PanelOptionsPane.tsx","webpack://grafana/./public/app/features/dashboard-scene/panel-edit/PanelEditor.tsx","webpack://grafana/./public/app/features/dashboard-scene/pages/DashboardScenePageStateManager.ts","webpack://grafana/./public/app/features/dashboard-scene/pages/PanelEditPage.tsx","webpack://grafana/./public/app/features/inspector/types.ts","webpack://grafana/./public/app/features/scenes/SceneListPage.tsx","webpack://grafana/./public/app/features/scenes/ScenePage.tsx","webpack://grafana/./public/app/features/scenes/apps/SceneRadioToggle.tsx","webpack://grafana/./public/app/features/scenes/apps/SceneSearchBox.tsx","webpack://grafana/./public/app/features/scenes/apps/transforms.ts","webpack://grafana/./public/app/features/scenes/apps/utils.ts","webpack://grafana/./public/app/features/scenes/apps/scenes.tsx","webpack://grafana/./public/app/features/scenes/apps/traffic.tsx","webpack://grafana/./public/app/features/scenes/apps/GrafanaMonitoringApp.tsx","webpack://grafana/./public/app/features/scenes/scenes/queries.ts","webpack://grafana/./public/app/features/scenes/scenes/gridMultiTimeRange.tsx","webpack://grafana/./public/app/features/scenes/scenes/gridMultiple.tsx","webpack://grafana/./public/app/features/scenes/scenes/gridWithMultipleData.tsx","webpack://grafana/./public/app/features/scenes/scenes/queryVariableDemo.tsx","webpack://grafana/./public/app/features/scenes/scenes/repeatingPanels.tsx","webpack://grafana/./public/app/features/scenes/scenes/sceneWithRows.tsx","webpack://grafana/./public/app/features/scenes/scenes/transformations.tsx","webpack://grafana/./public/app/features/scenes/scenes/variablesDemo.tsx","webpack://grafana/./public/app/features/scenes/scenes/index.tsx"],"sourcesContent":["// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     public/app/plugins/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     PluginTSTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nimport * as common from '@grafana/schema';\n\nexport enum TestDataQueryType {\n  Annotations = 'annotations',\n  Arrow = 'arrow',\n  CSVContent = 'csv_content',\n  CSVFile = 'csv_file',\n  CSVMetricValues = 'csv_metric_values',\n  DataPointsOutsideRange = 'datapoints_outside_range',\n  ExponentialHeatmapBucketData = 'exponential_heatmap_bucket_data',\n  FlameGraph = 'flame_graph',\n  GrafanaAPI = 'grafana_api',\n  LinearHeatmapBucketData = 'linear_heatmap_bucket_data',\n  Live = 'live',\n  Logs = 'logs',\n  ManualEntry = 'manual_entry',\n  NoDataPoints = 'no_data_points',\n  NodeGraph = 'node_graph',\n  PredictableCSVWave = 'predictable_csv_wave',\n  PredictablePulse = 'predictable_pulse',\n  RandomWalk = 'random_walk',\n  RandomWalkTable = 'random_walk_table',\n  RandomWalkWithError = 'random_walk_with_error',\n  RawFrame = 'raw_frame',\n  ServerError500 = 'server_error_500',\n  Simulation = 'simulation',\n  SlowQuery = 'slow_query',\n  StreamingClient = 'streaming_client',\n  TableStatic = 'table_static',\n  Trace = 'trace',\n  USA = 'usa',\n  VariablesQuery = 'variables-query',\n}\n\nexport interface StreamingQuery {\n  bands?: number;\n  noise: number;\n  speed: number;\n  spread: number;\n  type: ('signal' | 'logs' | 'fetch');\n  url?: string;\n}\n\nexport interface PulseWaveQuery {\n  offCount?: number;\n  offValue?: number;\n  onCount?: number;\n  onValue?: number;\n  timeStep?: number;\n}\n\nexport interface SimulationQuery {\n  config?: Record<string, unknown>;\n  key: {\n    type: string;\n    tick: number;\n    uid?: string;\n  };\n  last?: boolean;\n  stream?: boolean;\n}\n\nexport interface NodesQuery {\n  count?: number;\n  type?: ('random' | 'response' | 'random edges');\n}\n\nexport interface USAQuery {\n  fields?: Array<string>;\n  mode?: string;\n  period?: string;\n  states?: Array<string>;\n}\n\nexport const defaultUSAQuery: Partial<USAQuery> = {\n  fields: [],\n  states: [],\n};\n\nexport interface CSVWave {\n  labels?: string;\n  name?: string;\n  timeStep?: number;\n  valuesCSV?: string;\n}\n\n/**\n * TODO: Should this live here given it's not used in the dataquery?\n */\nexport interface Scenario {\n  description?: string;\n  hideAliasField?: boolean;\n  id: string;\n  name: string;\n  stringInput: string;\n}\n\nexport interface TestData extends common.DataQuery {\n  alias?: string;\n  channel?: string;\n  csvContent?: string;\n  csvFileName?: string;\n  csvWave?: Array<CSVWave>; // TODO can we prevent partial from being generated\n  /**\n   * Drop percentage (the chance we will lose a point 0-100)\n   */\n  dropPercent?: number;\n  errorType?: ('server_panic' | 'frontend_exception' | 'frontend_observable');\n  flamegraphDiff?: boolean;\n  labels?: string;\n  levelColumn?: boolean;\n  lines?: number;\n  nodes?: NodesQuery;\n  points?: Array<Array<(string | number)>>;\n  pulseWave?: PulseWaveQuery;\n  rawFrameContent?: string;\n  scenarioId?: TestDataQueryType;\n  seriesCount?: number;\n  sim?: SimulationQuery;\n  spanCount?: number;\n  stream?: StreamingQuery;\n  stringInput?: string;\n  usa?: USAQuery;\n}\n\nexport const defaultTestData: Partial<TestData> = {\n  csvWave: [],\n  points: [],\n  scenarioId: TestDataQueryType.RandomWalk,\n};\n","// Libraries\nimport React, { useEffect } from 'react';\n\nimport { PageLayoutType } from '@grafana/data';\nimport { Page } from 'app/core/components/Page/Page';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nimport { getDashboardScenePageStateManager } from './DashboardScenePageStateManager';\n\nexport interface Props extends GrafanaRouteComponentProps<{ uid: string }> {}\n\nexport function DashboardScenePage({ match }: Props) {\n  const stateManager = getDashboardScenePageStateManager();\n  const { dashboard, isLoading, loadError } = stateManager.useState();\n\n  useEffect(() => {\n    stateManager.loadDashboard(match.params.uid);\n\n    return () => {\n      stateManager.clearState();\n    };\n  }, [stateManager, match.params.uid]);\n\n  if (!dashboard) {\n    return (\n      <Page layout={PageLayoutType.Canvas}>\n        {isLoading && <PageLoader />}\n        {loadError && <h2>{loadError}</h2>}\n      </Page>\n    );\n  }\n\n  return <dashboard.Component model={dashboard} />;\n}\n\nexport default DashboardScenePage;\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { GrafanaTheme2, PageLayoutType } from '@grafana/data';\nimport { SceneComponentProps } from '@grafana/scenes';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { AppChromeUpdate } from 'app/core/components/AppChrome/AppChromeUpdate';\nimport { NavToolbarSeparator } from 'app/core/components/AppChrome/NavToolbar/NavToolbarSeparator';\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { PanelEditor } from './PanelEditor';\n\nexport function PanelEditorRenderer({ model }: SceneComponentProps<PanelEditor>) {\n  const { body, controls, drawer } = model.useState();\n  const styles = useStyles2(getStyles);\n  const location = useLocation();\n  const pageNav = model.getPageNav(location);\n\n  return (\n    <Page navId=\"scenes\" pageNav={pageNav} layout={PageLayoutType.Custom}>\n      <AppChromeUpdate actions={getToolbarActions(model)} />\n      <div className={styles.canvasContent}>\n        {controls && (\n          <div className={styles.controls}>\n            {controls.map((control) => (\n              <control.Component key={control.state.key} model={control} />\n            ))}\n          </div>\n        )}\n        <div className={styles.body}>\n          <body.Component model={body} />\n        </div>\n      </div>\n      {drawer && <drawer.Component model={drawer} />}\n    </Page>\n  );\n}\n\nfunction getToolbarActions(editor: PanelEditor) {\n  return (\n    <>\n      <NavToolbarSeparator leftActionsSeparator key=\"separator\" />\n\n      <Button\n        onClick={editor.onDiscard}\n        tooltip=\"\"\n        key=\"panel-edit-discard\"\n        variant=\"destructive\"\n        fill=\"outline\"\n        size=\"sm\"\n      >\n        Discard\n      </Button>\n\n      <Button onClick={editor.onApply} tooltip=\"\" key=\"panel-edit-apply\" variant=\"primary\" size=\"sm\">\n        Apply\n      </Button>\n    </>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    canvasContent: css({\n      label: 'canvas-content',\n      display: 'flex',\n      flexDirection: 'column',\n      padding: theme.spacing(0, 2),\n      flexBasis: '100%',\n      flexGrow: 1,\n      minHeight: 0,\n      width: '100%',\n    }),\n    body: css({\n      label: 'body',\n      flexGrow: 1,\n      display: 'flex',\n      position: 'relative',\n      minHeight: 0,\n      gap: '8px',\n      marginBottom: theme.spacing(2),\n    }),\n    controls: css({\n      display: 'flex',\n      flexWrap: 'wrap',\n      alignItems: 'center',\n      gap: theme.spacing(1),\n      padding: theme.spacing(2, 0),\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { SceneComponentProps, SceneObjectBase, SceneObjectState, VizPanel } from '@grafana/scenes';\nimport { Field, Input, useStyles2 } from '@grafana/ui';\n\nexport interface PanelOptionsPaneState extends SceneObjectState {}\n\nexport class PanelOptionsPane extends SceneObjectBase<PanelOptionsPaneState> {\n  public panel: VizPanel;\n\n  public constructor(panel: VizPanel) {\n    super({});\n\n    this.panel = panel;\n  }\n\n  static Component = ({ model }: SceneComponentProps<PanelOptionsPane>) => {\n    const { panel } = model;\n    const { title } = panel.useState();\n    const styles = useStyles2(getStyles);\n\n    return (\n      <div className={styles.box}>\n        <Field label=\"Title\">\n          <Input value={title} onChange={(evt) => panel.setState({ title: evt.currentTarget.value })} />\n        </Field>\n      </div>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    box: css({\n      display: 'flex',\n      flexDirection: 'column',\n      padding: theme.spacing(2),\n      flexBasis: '100%',\n      flexGrow: 1,\n      minHeight: 0,\n    }),\n  };\n}\n","import * as H from 'history';\n\nimport { locationService } from '@grafana/runtime';\nimport {\n  getUrlSyncManager,\n  SceneFlexItem,\n  SceneFlexLayout,\n  SceneObject,\n  SceneObjectBase,\n  SceneObjectRef,\n  SceneObjectState,\n  sceneUtils,\n  SplitLayout,\n  VizPanel,\n} from '@grafana/scenes';\n\nimport { DashboardScene } from '../scene/DashboardScene';\nimport { getDashboardUrl } from '../utils/utils';\n\nimport { PanelEditorRenderer } from './PanelEditorRenderer';\nimport { PanelOptionsPane } from './PanelOptionsPane';\n\nexport interface PanelEditorState extends SceneObjectState {\n  body: SceneObject;\n  controls?: SceneObject[];\n  isDirty?: boolean;\n  /** Panel to inspect */\n  inspectPanelId?: string;\n  /** Scene object that handles the current drawer */\n  drawer?: SceneObject;\n\n  dashboardRef: SceneObjectRef<DashboardScene>;\n  sourcePanelRef: SceneObjectRef<VizPanel>;\n  panelRef: SceneObjectRef<VizPanel>;\n}\n\nexport class PanelEditor extends SceneObjectBase<PanelEditorState> {\n  static Component = PanelEditorRenderer;\n\n  public constructor(state: PanelEditorState) {\n    super(state);\n\n    this.addActivationHandler(() => this._activationHandler());\n  }\n\n  private _activationHandler() {\n    // Deactivation logic\n    return () => {\n      getUrlSyncManager().cleanUp(this);\n    };\n  }\n\n  public startUrlSync() {\n    getUrlSyncManager().initSync(this);\n  }\n\n  public getPageNav(location: H.Location) {\n    return {\n      text: 'Edit panel',\n      parentItem: this.state.dashboardRef.resolve().getPageNav(location),\n    };\n  }\n\n  public onDiscard = () => {\n    // Open question on what to preserve when going back\n    // Preserve time range, and variables state (that might have been changed while in panel edit)\n    // Preserve current panel data? (say if you just changed the time range and have new data)\n    this._navigateBackToDashboard();\n  };\n\n  public onApply = () => {\n    this._commitChanges();\n    this._navigateBackToDashboard();\n  };\n\n  public onSave = () => {\n    this._commitChanges();\n    // Open dashboard save drawer\n  };\n\n  private _commitChanges() {\n    const dashboard = this.state.dashboardRef.resolve();\n    const sourcePanel = this.state.sourcePanelRef.resolve();\n    const panel = this.state.panelRef.resolve();\n\n    if (!dashboard.state.isEditing) {\n      dashboard.onEnterEditMode();\n    }\n\n    const newState = sceneUtils.cloneSceneObjectState(panel.state);\n    sourcePanel.setState(newState);\n\n    // preserve time range and variables state\n    dashboard.setState({\n      $timeRange: this.state.$timeRange?.clone(),\n      $variables: this.state.$variables?.clone(),\n      isDirty: true,\n    });\n  }\n\n  private _navigateBackToDashboard() {\n    locationService.push(\n      getDashboardUrl({\n        uid: this.state.dashboardRef.resolve().state.uid,\n        currentQueryParams: locationService.getLocation().search,\n      })\n    );\n  }\n}\n\nexport function buildPanelEditScene(dashboard: DashboardScene, panel: VizPanel): PanelEditor {\n  const panelClone = panel.clone();\n  const dashboardStateCloned = sceneUtils.cloneSceneObjectState(dashboard.state);\n\n  return new PanelEditor({\n    dashboardRef: dashboard.getRef(),\n    sourcePanelRef: panel.getRef(),\n    panelRef: panelClone.getRef(),\n    controls: dashboardStateCloned.controls,\n    $variables: dashboardStateCloned.$variables,\n    $timeRange: dashboardStateCloned.$timeRange,\n    body: new SplitLayout({\n      direction: 'row',\n      primary: new SceneFlexLayout({\n        direction: 'column',\n        children: [panelClone],\n      }),\n      secondary: new SceneFlexItem({\n        width: '300px',\n        body: new PanelOptionsPane(panelClone),\n      }),\n    }),\n  });\n}\n","import { StateManagerBase } from 'app/core/services/StateManagerBase';\nimport { dashboardLoaderSrv } from 'app/features/dashboard/services/DashboardLoaderSrv';\nimport { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\n\nimport { buildPanelEditScene, PanelEditor } from '../panel-edit/PanelEditor';\nimport { DashboardScene } from '../scene/DashboardScene';\nimport { transformSaveModelToScene } from '../serialization/transformSaveModelToScene';\nimport { getVizPanelKeyForPanelId, findVizPanelByKey } from '../utils/utils';\n\nexport interface DashboardScenePageState {\n  dashboard?: DashboardScene;\n  panelEditor?: PanelEditor;\n  isLoading?: boolean;\n  loadError?: string;\n}\n\nexport class DashboardScenePageStateManager extends StateManagerBase<DashboardScenePageState> {\n  private cache: Record<string, DashboardScene> = {};\n\n  public async loadDashboard(uid: string) {\n    try {\n      const dashboard = await this.loadScene(uid);\n      dashboard.startUrlSync();\n\n      this.setState({ dashboard: dashboard, isLoading: false });\n    } catch (err) {\n      this.setState({ isLoading: false, loadError: String(err) });\n    }\n  }\n\n  public async loadPanelEdit(uid: string, panelId: string) {\n    try {\n      const dashboard = await this.loadScene(uid);\n      const panel = findVizPanelByKey(dashboard, getVizPanelKeyForPanelId(parseInt(panelId, 10)));\n\n      if (!panel) {\n        this.setState({ isLoading: false, loadError: 'Panel not found' });\n        return;\n      }\n\n      const panelEditor = buildPanelEditScene(dashboard, panel);\n      panelEditor.startUrlSync();\n\n      this.setState({ isLoading: false, panelEditor });\n    } catch (err) {\n      this.setState({ isLoading: false, loadError: String(err) });\n    }\n  }\n\n  private async loadScene(uid: string): Promise<DashboardScene> {\n    const fromCache = this.cache[uid];\n    if (fromCache) {\n      return fromCache;\n    }\n\n    this.setState({ isLoading: true });\n\n    const rsp = await dashboardLoaderSrv.loadDashboard('db', '', uid);\n\n    if (rsp.dashboard) {\n      const scene = transformSaveModelToScene(rsp);\n      this.cache[uid] = scene;\n      return scene;\n    }\n\n    throw new Error('Dashboard not found');\n  }\n\n  public clearState() {\n    getDashboardSrv().setCurrent(undefined);\n    this.setState({ dashboard: undefined, loadError: undefined, isLoading: false, panelEditor: undefined });\n  }\n}\n\nlet stateManager: DashboardScenePageStateManager | null = null;\n\nexport function getDashboardScenePageStateManager(): DashboardScenePageStateManager {\n  if (!stateManager) {\n    stateManager = new DashboardScenePageStateManager({});\n  }\n\n  return stateManager;\n}\n","// Libraries\nimport React, { useEffect } from 'react';\n\nimport { PageLayoutType } from '@grafana/data';\nimport { Page } from 'app/core/components/Page/Page';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nimport { getDashboardScenePageStateManager } from './DashboardScenePageStateManager';\n\nexport interface Props extends GrafanaRouteComponentProps<{ uid: string; panelId: string }> {}\n\nexport function PanelEditPage({ match }: Props) {\n  const stateManager = getDashboardScenePageStateManager();\n  const { panelEditor, isLoading, loadError } = stateManager.useState();\n\n  useEffect(() => {\n    stateManager.loadPanelEdit(match.params.uid, match.params.panelId);\n    return () => {\n      stateManager.clearState();\n    };\n  }, [stateManager, match.params.uid, match.params.panelId]);\n\n  if (!panelEditor) {\n    return (\n      <Page layout={PageLayoutType.Canvas}>\n        {isLoading && <PageLoader />}\n        {loadError && <h2>{loadError}</h2>}\n      </Page>\n    );\n  }\n\n  return <panelEditor.Component model={panelEditor} />;\n}\n\nexport default PanelEditPage;\n","export enum InspectTab {\n  Data = 'data',\n  Meta = 'meta', // When result metadata exists\n  Error = 'error',\n  Stats = 'stats',\n  JSON = 'json',\n  Query = 'query',\n  Help = 'help', // get info required for support+debugging\n}\n","// Libraries\nimport React from 'react';\nimport { useAsync } from 'react-use';\n\nimport { Stack } from '@grafana/experimental';\nimport { Card } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\n\n// Types\nimport { getGrafanaSearcher } from '../search/service';\n\nimport { getScenes } from './scenes';\n\nexport interface Props {}\n\nexport const SceneListPage = ({}: Props) => {\n  const scenes = getScenes();\n  const results = useAsync(() => {\n    return getGrafanaSearcher().starred({ starred: true });\n  }, []);\n\n  return (\n    <Page navId=\"scenes\" subTitle=\"Experimental new runtime and state model for dashboards\">\n      <Page.Contents>\n        <Stack direction=\"column\" gap={1}>\n          <h5>Apps</h5>\n          <Stack direction=\"column\" gap={0}>\n            <Card href={`/scenes/grafana-monitoring`}>\n              <Card.Heading>Grafana monitoring</Card.Heading>\n            </Card>\n          </Stack>\n          <h5>Test scenes</h5>\n          <Stack direction=\"column\" gap={0}>\n            {scenes.map((scene) => (\n              <Card key={scene.title} href={`/scenes/${scene.title}`}>\n                <Card.Heading>{scene.title}</Card.Heading>\n              </Card>\n            ))}\n          </Stack>\n          {results.value && (\n            <>\n              <h5>Starred dashboards</h5>\n              <Stack direction=\"column\" gap={0}>\n                {results.value!.view.map((dash) => (\n                  <Card href={`/scenes/dashboard/${dash.uid}`} key={dash.uid}>\n                    <Card.Heading>{dash.name}</Card.Heading>\n                  </Card>\n                ))}\n              </Stack>\n            </>\n          )}\n        </Stack>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default SceneListPage;\n","// Libraries\nimport React, { useEffect, useState } from 'react';\n\nimport { getUrlSyncManager } from '@grafana/scenes';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nimport { getSceneByTitle } from './scenes';\n\nexport interface Props extends GrafanaRouteComponentProps<{ name: string }> {}\n\nexport const ScenePage = (props: Props) => {\n  const scene = getSceneByTitle(props.match.params.name);\n  const [isInitialized, setInitialized] = useState(false);\n\n  useEffect(() => {\n    if (scene && !isInitialized) {\n      getUrlSyncManager().initSync(scene);\n      setInitialized(true);\n    }\n  }, [isInitialized, scene]);\n\n  if (!scene) {\n    return <h2>Scene not found</h2>;\n  }\n\n  if (!isInitialized) {\n    return null;\n  }\n\n  return <scene.Component model={scene} />;\n};\n\nexport default ScenePage;\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { SceneComponentProps, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { RadioButtonGroup } from '@grafana/ui';\n\nexport interface SceneRadioToggleState extends SceneObjectState {\n  options: Array<SelectableValue<string>>;\n  value: string;\n  onChange: (value: string) => void;\n}\n\nexport class SceneRadioToggle extends SceneObjectBase<SceneRadioToggleState> {\n  onChange = (value: string) => {\n    this.setState({ value });\n    this.state.onChange(value);\n  };\n\n  static Component = ({ model }: SceneComponentProps<SceneRadioToggle>) => {\n    const { options, value } = model.useState();\n\n    return <RadioButtonGroup options={options} value={value} onChange={model.onChange} />;\n  };\n}\n","import React from 'react';\n\nimport { SceneComponentProps, SceneObjectState, SceneObjectBase } from '@grafana/scenes';\nimport { Input } from '@grafana/ui';\n\nexport interface SceneSearchBoxState extends SceneObjectState {\n  value: string;\n}\n\nexport class SceneSearchBox extends SceneObjectBase<SceneSearchBoxState> {\n  onChange = (evt: React.FormEvent<HTMLInputElement>) => {\n    this.setState({ value: evt.currentTarget.value });\n  };\n\n  static Component = ({ model }: SceneComponentProps<SceneSearchBox>) => {\n    const { value } = model.useState();\n\n    return <Input width={25} placeholder=\"Search...\" value={value} onChange={model.onChange} />;\n  };\n}\n","import { map } from 'rxjs';\n\nimport {\n  BasicValueMatcherOptions,\n  CustomTransformOperator,\n  DataTransformerID,\n  getFrameDisplayName,\n  ValueMatcherID,\n} from '@grafana/data';\nimport { FilterByValueMatch, FilterByValueType } from '@grafana/data/src/transformations/transformers/filterByValue';\nimport { DataTransformerConfig, MatcherConfig } from '@grafana/schema';\n\nexport function getTableFilterTransform(query: string): DataTransformerConfig {\n  const regex: MatcherConfig<BasicValueMatcherOptions<string>> = {\n    id: ValueMatcherID.regex,\n    options: { value: query },\n  };\n\n  return {\n    id: DataTransformerID.filterByValue,\n    options: {\n      type: FilterByValueType.include,\n      match: FilterByValueMatch.all,\n      filters: [\n        {\n          fieldName: 'handler',\n          config: regex,\n        },\n      ],\n    },\n  };\n}\n\nexport function getTimeSeriesFilterTransform(query: string): CustomTransformOperator {\n  return () => (source) => {\n    return source.pipe(\n      map((data) => {\n        return data.filter((frame) => getFrameDisplayName(frame).toLowerCase().includes(query.toLowerCase()));\n      })\n    );\n  };\n}\n","import { useLocation } from 'react-router-dom';\n\nimport { UrlQueryMap, urlUtil } from '@grafana/data';\nimport { locationSearchToObject } from '@grafana/runtime';\nimport { QueryVariable, SceneQueryRunner, SceneVariableSet } from '@grafana/scenes';\nimport { PromQuery } from 'app/plugins/datasource/prometheus/types';\n\nexport function useAppQueryParams() {\n  const location = useLocation();\n  return locationSearchToObject(location.search || '');\n}\n\nexport function getLinkUrlWithAppUrlState(path: string, params: UrlQueryMap): string {\n  return urlUtil.renderUrl(path, params);\n}\n\nexport function getInstantQuery(query: Partial<PromQuery>): SceneQueryRunner {\n  return new SceneQueryRunner({\n    datasource: { uid: 'gdev-prometheus' },\n    queries: [\n      {\n        refId: 'A',\n        instant: true,\n        format: 'table',\n        maxDataPoints: 500,\n        ...query,\n      },\n    ],\n  });\n}\n\nexport function getTimeSeriesQuery(query: Partial<PromQuery>): SceneQueryRunner {\n  return new SceneQueryRunner({\n    datasource: { uid: 'gdev-prometheus' },\n    queries: [\n      {\n        refId: 'A',\n        range: true,\n        format: 'time_series',\n        maxDataPoints: 500,\n        ...query,\n      },\n    ],\n  });\n}\n\nexport function getVariablesDefinitions() {\n  return new SceneVariableSet({\n    variables: [\n      new QueryVariable({\n        name: 'instance',\n        datasource: { uid: 'gdev-prometheus' },\n        query: { query: 'label_values(grafana_http_request_duration_seconds_sum, instance)', refId: 'A' },\n      }),\n    ],\n  });\n}\n","import React from 'react';\n\nimport { FieldColorModeId, getFrameDisplayName } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport {\n  SceneFlexLayout,\n  SceneByFrameRepeater,\n  SceneTimePicker,\n  EmbeddedScene,\n  SceneDataNode,\n  SceneTimeRange,\n  VariableValueSelectors,\n  SceneQueryRunner,\n  SceneControlsSpacer,\n  SceneDataTransformer,\n  SceneRefreshPicker,\n  SceneFlexItem,\n  PanelBuilders,\n} from '@grafana/scenes';\nimport { BigValueGraphMode, BigValueTextMode, LogsDedupStrategy, LogsSortOrder } from '@grafana/schema';\nimport { LinkButton } from '@grafana/ui';\n\nimport { SceneRadioToggle } from './SceneRadioToggle';\nimport { SceneSearchBox } from './SceneSearchBox';\nimport { getTableFilterTransform, getTimeSeriesFilterTransform } from './transforms';\nimport { getInstantQuery, getLinkUrlWithAppUrlState, getTimeSeriesQuery, getVariablesDefinitions } from './utils';\n\nexport function getHttpHandlerListScene(): EmbeddedScene {\n  const searchBox = new SceneSearchBox({ value: '' });\n\n  const httpHandlerQueries = getInstantQuery({\n    expr: 'sort_desc(avg without(job, instance) (rate(grafana_http_request_duration_seconds_sum[$__rate_interval]) * 1e3)) ',\n  });\n\n  const httpHandlerQueriesFiltered = new SceneDataTransformer({\n    $data: httpHandlerQueries,\n    transformations: [getTableFilterTransform('')],\n  });\n\n  httpHandlerQueriesFiltered.addActivationHandler(() => {\n    const sub = searchBox.subscribeToState((state) => {\n      // Update transform and re-process them\n      httpHandlerQueriesFiltered.setState({ transformations: [getTableFilterTransform(state.value)] });\n      httpHandlerQueriesFiltered.reprocessTransformations();\n    });\n\n    return () => sub.unsubscribe();\n  });\n\n  const httpHandlersTable = PanelBuilders.table()\n    .setTitle('Handlers')\n    .setData(httpHandlerQueriesFiltered)\n    .setOption('footer', {\n      enablePagination: true,\n    })\n    .setOverrides((b) =>\n      b\n        .matchFieldsWithNameByRegex('.*')\n        .overrideFilterable(false)\n        .matchFieldsWithName('Time')\n        .overrideCustomFieldConfig('hidden', true)\n        .matchFieldsWithName('Value')\n        .overrideDisplayName('Duration (Avg)')\n        .matchFieldsWithName('handler')\n        .overrideLinks([\n          {\n            title: 'Go to handler drilldown view',\n            url: '',\n            onBuildUrl: () => {\n              const params = locationService.getSearchObject();\n              return getLinkUrlWithAppUrlState(\n                '/scenes/grafana-monitoring/handlers/${__value.text:percentencode}',\n                params\n              );\n            },\n          },\n        ])\n    )\n    .build();\n\n  const reqDurationTimeSeries = new SceneQueryRunner({\n    datasource: { uid: 'gdev-prometheus' },\n    queries: [\n      {\n        refId: 'A',\n        //expr: ``,\n        expr: 'topk(20, avg without(job, instance) (rate(grafana_http_request_duration_seconds_sum[$__rate_interval])) * 1e3)',\n        range: true,\n        format: 'time_series',\n        legendFormat: '{{method}} {{handler}} (status = {{status_code}})',\n        maxDataPoints: 500,\n      },\n    ],\n  });\n\n  const reqDurationTimeSeriesFiltered = new SceneDataTransformer({\n    $data: reqDurationTimeSeries,\n    transformations: [getTimeSeriesFilterTransform('')],\n  });\n\n  reqDurationTimeSeriesFiltered.addActivationHandler(() => {\n    const sub = searchBox.subscribeToState((state) => {\n      // Update transform and re-process them\n      reqDurationTimeSeriesFiltered.setState({ transformations: [getTimeSeriesFilterTransform(state.value)] });\n      reqDurationTimeSeriesFiltered.reprocessTransformations();\n    });\n\n    return () => sub.unsubscribe();\n  });\n\n  const graphsScene = new SceneByFrameRepeater({\n    $data: reqDurationTimeSeriesFiltered,\n    body: new SceneFlexLayout({\n      direction: 'column',\n      children: [],\n    }),\n    getLayoutChild: (data, frame, frameIndex) => {\n      return new SceneFlexItem({\n        key: `panel-${frameIndex}`,\n        minHeight: 200,\n        $data: new SceneDataNode({\n          data: {\n            ...data,\n            series: [frame],\n          },\n        }),\n        body: new SceneFlexLayout({\n          direction: 'row',\n          key: `row-${frameIndex}`,\n          children: [\n            new SceneFlexItem({\n              key: `flex1-${frameIndex}`,\n              body: PanelBuilders.timeseries()\n                .setTitle(getFrameDisplayName(frame))\n                .setOption('legend', { showLegend: false })\n                .setHeaderActions(\n                  <LinkButton\n                    fill=\"text\"\n                    size=\"sm\"\n                    icon=\"arrow-right\"\n                    href={getHandlerDrilldownUrl(frame.fields[1]!.labels!.handler)}\n                  >\n                    Details\n                  </LinkButton>\n                )\n                .build(),\n            }),\n\n            new SceneFlexItem({\n              key: `flex2-${frameIndex}`,\n              width: 200,\n              body: PanelBuilders.stat()\n                .setTitle('Last')\n                .setOption('graphMode', BigValueGraphMode.None)\n                .setOption('textMode', BigValueTextMode.Value)\n                .setDisplayName('Last')\n                .build(),\n            }),\n          ],\n        }),\n      });\n    },\n  });\n\n  const layout = new SceneFlexLayout({\n    children: [new SceneFlexItem({ body: httpHandlersTable })],\n  });\n\n  const sceneToggle = new SceneRadioToggle({\n    options: [\n      { value: 'table', label: 'Table' },\n      { value: 'graphs', label: 'Graphs' },\n    ],\n    value: 'table',\n    onChange: (value) => {\n      if (value === 'table') {\n        layout.setState({ children: [new SceneFlexItem({ body: httpHandlersTable })] });\n      } else {\n        layout.setState({ children: [graphsScene] });\n      }\n    },\n  });\n\n  const scene = new EmbeddedScene({\n    $variables: getVariablesDefinitions(),\n    $data: httpHandlerQueries,\n    $timeRange: new SceneTimeRange({ from: 'now-1h', to: 'now' }),\n    controls: [\n      new VariableValueSelectors({}),\n      searchBox,\n      new SceneControlsSpacer(),\n      sceneToggle,\n      new SceneTimePicker({ isOnCanvas: true }),\n      new SceneRefreshPicker({ isOnCanvas: true }),\n    ],\n    body: layout,\n  });\n\n  return scene;\n}\n\nfunction getHandlerDrilldownUrl(handler: string) {\n  const params = locationService.getSearchObject();\n  return getLinkUrlWithAppUrlState(`/scenes/grafana-monitoring/handlers/${encodeURIComponent(handler)}`, params);\n}\n\nexport function getHandlerDetailsScene(handler: string): EmbeddedScene {\n  const reqDurationTimeSeries = getTimeSeriesQuery({\n    expr: `avg without(job, instance) (rate(grafana_http_request_duration_seconds_sum{handler=\"${handler}\"}[$__rate_interval])) * 1e3`,\n    legendFormat: '{{method}} {{handler}} (status = {{status_code}})',\n  });\n\n  const reqCountTimeSeries = getTimeSeriesQuery({\n    expr: `sum without(job, instance) (rate(grafana_http_request_duration_seconds_count{handler=\"${handler}\"}[$__rate_interval])) `,\n    legendFormat: '{{method}} {{handler}} (status = {{status_code}})',\n  });\n\n  const scene = new EmbeddedScene({\n    $variables: getVariablesDefinitions(),\n    $timeRange: new SceneTimeRange({ from: 'now-1h', to: 'now' }),\n    controls: [\n      new VariableValueSelectors({}),\n      new SceneControlsSpacer(),\n      new SceneTimePicker({ isOnCanvas: true }),\n      new SceneRefreshPicker({ isOnCanvas: true }),\n    ],\n    body: new SceneFlexLayout({\n      direction: 'column',\n      children: [\n        new SceneFlexItem({\n          body: PanelBuilders.timeseries().setData(reqDurationTimeSeries).setTitle('Request duration avg (ms)').build(),\n        }),\n        new SceneFlexItem({\n          body: PanelBuilders.timeseries().setData(reqCountTimeSeries).setTitle('Request count/s').build(),\n        }),\n      ],\n    }),\n  });\n\n  return scene;\n}\n\nexport function getOverviewScene(): EmbeddedScene {\n  const scene = new EmbeddedScene({\n    $variables: getVariablesDefinitions(),\n    $timeRange: new SceneTimeRange({ from: 'now-1h', to: 'now' }),\n    controls: [\n      new VariableValueSelectors({}),\n      new SceneControlsSpacer(),\n      new SceneTimePicker({ isOnCanvas: true }),\n      new SceneRefreshPicker({ isOnCanvas: true }),\n    ],\n    body: new SceneFlexLayout({\n      direction: 'column',\n      children: [\n        new SceneFlexItem({\n          height: 150,\n          body: new SceneFlexLayout({\n            children: [\n              new SceneFlexItem({\n                body: getInstantStatPanel('grafana_stat_totals_dashboard', 'Dashboards'),\n              }),\n              new SceneFlexItem({\n                body: getInstantStatPanel('grafana_stat_total_users', 'Users'),\n              }),\n              new SceneFlexItem({\n                body: getInstantStatPanel('sum(grafana_stat_totals_datasource)', 'Data sources'),\n              }),\n              new SceneFlexItem({\n                body: getInstantStatPanel('grafana_stat_total_service_account_tokens', 'Service account tokens'),\n              }),\n            ],\n          }),\n        }),\n\n        new SceneFlexItem({\n          body: PanelBuilders.timeseries()\n            .setData(\n              new SceneQueryRunner({\n                datasource: { uid: 'gdev-prometheus' },\n                queries: [\n                  {\n                    refId: 'A',\n                    expr: `sum(process_resident_memory_bytes{job=\"grafana\", instance=~\"$instance\"})`,\n                    range: true,\n                    format: 'time_series',\n                    maxDataPoints: 500,\n                  },\n                ],\n              })\n            )\n            .setTitle('Memory usage')\n            .setOption('legend', { showLegend: false })\n            .setUnit('bytes')\n            .setMin(0)\n            .setCustomFieldConfig('lineWidth', 2)\n            .setCustomFieldConfig('fillOpacity', 6)\n            .build(),\n        }),\n        new SceneFlexItem({\n          body: PanelBuilders.timeseries()\n            .setData(\n              new SceneQueryRunner({\n                datasource: { uid: 'gdev-prometheus' },\n                queries: [\n                  {\n                    refId: 'A',\n                    expr: `sum(go_goroutines{job=\"grafana\", instance=~\"$instance\"})`,\n                    range: true,\n                    format: 'time_series',\n                    maxDataPoints: 500,\n                  },\n                ],\n              })\n            )\n            .setOption('legend', { showLegend: false })\n            .setMin(0)\n            .setCustomFieldConfig('lineWidth', 2)\n            .setCustomFieldConfig('fillOpacity', 6)\n            .setTitle('Go routines')\n            .build(),\n        }),\n      ],\n    }),\n  });\n\n  return scene;\n}\n\nfunction getInstantStatPanel(query: string, title: string) {\n  return PanelBuilders.stat()\n    .setData(getInstantQuery({ expr: query }))\n    .setTitle(title)\n    .setColor({ fixedColor: 'text', mode: FieldColorModeId.Fixed })\n    .build();\n}\n\nexport function getHandlerLogsScene(handler: string): EmbeddedScene {\n  const logsQuery = new SceneQueryRunner({\n    datasource: { uid: 'gdev-loki' },\n    queries: [\n      {\n        refId: 'A',\n        expr: `{job=\"grafana\"} | logfmt | handler=\\`${handler}\\` | __error__=\\`\\``,\n        queryType: 'range',\n        maxDataPoints: 5000,\n      },\n    ],\n  });\n\n  const scene = new EmbeddedScene({\n    $variables: getVariablesDefinitions(),\n    $timeRange: new SceneTimeRange({ from: 'now-1h', to: 'now' }),\n    controls: [\n      new VariableValueSelectors({}),\n      new SceneControlsSpacer(),\n      new SceneTimePicker({ isOnCanvas: true }),\n      new SceneRefreshPicker({ isOnCanvas: true }),\n    ],\n    body: new SceneFlexLayout({\n      direction: 'column',\n      children: [\n        new SceneFlexItem({\n          body: PanelBuilders.logs()\n            .setData(logsQuery)\n            .setTitle('')\n            .setOption('showTime', true)\n            .setOption('showLabels', false)\n            .setOption('showCommonLabels', false)\n            .setOption('wrapLogMessage', true)\n            .setOption('prettifyLogMessage', false)\n            .setOption('enableLogDetails', true)\n            .setOption('dedupStrategy', LogsDedupStrategy.none)\n            .setOption('sortOrder', LogsSortOrder.Descending)\n            .build(),\n        }),\n      ],\n    }),\n  });\n\n  return scene;\n}\n\nexport function getOverviewLogsScene(): EmbeddedScene {\n  const logsQuery = new SceneQueryRunner({\n    datasource: { uid: 'gdev-loki' },\n    queries: [\n      {\n        refId: 'A',\n        expr: `{job=\"grafana\"} | logfmt | __error__=\\`\\``,\n        queryType: 'range',\n        maxDataPoints: 5000,\n      },\n    ],\n  });\n\n  const scene = new EmbeddedScene({\n    $variables: getVariablesDefinitions(),\n    $timeRange: new SceneTimeRange({ from: 'now-1h', to: 'now' }),\n    controls: [\n      new VariableValueSelectors({}),\n      new SceneControlsSpacer(),\n      new SceneTimePicker({ isOnCanvas: true }),\n      new SceneRefreshPicker({ isOnCanvas: true }),\n    ],\n    body: new SceneFlexLayout({\n      direction: 'column',\n      children: [\n        new SceneFlexItem({\n          body: PanelBuilders.logs()\n            .setTitle('')\n            .setData(logsQuery)\n            .setOption('showTime', true)\n            .setOption('showLabels', false)\n            .setOption('showCommonLabels', false)\n            .setOption('wrapLogMessage', true)\n            .setOption('prettifyLogMessage', false)\n            .setOption('enableLogDetails', true)\n            .setOption('dedupStrategy', LogsDedupStrategy.none)\n            .setOption('sortOrder', LogsSortOrder.Descending)\n            .build(),\n        }),\n      ],\n    }),\n  });\n\n  return scene;\n}\n","import React from 'react';\n\nimport {\n  SceneFlexLayout,\n  SceneTimePicker,\n  EmbeddedScene,\n  SceneTimeRange,\n  VariableValueSelectors,\n  SceneControlsSpacer,\n  SceneRefreshPicker,\n  SceneFlexItem,\n  SceneObjectState,\n  SceneObjectBase,\n  SceneObjectUrlSyncConfig,\n  SceneObjectUrlValues,\n  PanelBuilders,\n} from '@grafana/scenes';\nimport { Button } from '@grafana/ui';\n\nimport { getInstantQuery, getTimeSeriesQuery, getVariablesDefinitions } from './utils';\n\nexport function getTrafficScene(): EmbeddedScene {\n  const httpHandlersTable = PanelBuilders.table()\n    .setData(\n      getInstantQuery({\n        expr: 'sort_desc(avg without(job, instance) (rate(grafana_http_request_duration_seconds_sum[$__rate_interval]) * 1e3)) ',\n      })\n    )\n    .setTitle('Handlers')\n    .setOption('footer', { enablePagination: true })\n    .setOverrides((b) =>\n      b\n        .matchFieldsWithNameByRegex('.*')\n        .overrideFilterable(false)\n        .matchFieldsWithName('Time')\n        .overrideCustomFieldConfig('hidden', true)\n        .matchFieldsWithName('Value')\n        .overrideDisplayName('Duration (Avg)')\n        .matchFieldsWithName('handler')\n        .overrideLinks([\n          {\n            title: 'Go to handler drilldown view',\n            url: '/scenes/grafana-monitoring/traffic?handler=${__value.text:percentencode}',\n          },\n        ])\n    )\n    .build();\n\n  const scene = new EmbeddedScene({\n    $variables: getVariablesDefinitions(),\n    $timeRange: new SceneTimeRange({ from: 'now-1h', to: 'now' }),\n    controls: [\n      new VariableValueSelectors({}),\n      new SceneControlsSpacer(),\n      new SceneTimePicker({ isOnCanvas: true }),\n      new SceneRefreshPicker({ isOnCanvas: true }),\n    ],\n    body: new SceneFlexLayout({\n      $behaviors: [new HandlerDrilldownViewBehavior()],\n      children: [new SceneFlexItem({ body: httpHandlersTable })],\n    }),\n  });\n\n  return scene;\n}\n\nexport interface HandlerDrilldownViewBehaviorState extends SceneObjectState {\n  handler?: string;\n}\n\nexport class HandlerDrilldownViewBehavior extends SceneObjectBase<HandlerDrilldownViewBehaviorState> {\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, { keys: ['handler'] });\n\n  constructor() {\n    super({});\n\n    this.addActivationHandler(() => {\n      this._subs.add(this.subscribeToState((state) => this.onHandlerChanged(state.handler)));\n      this.onHandlerChanged(this.state.handler);\n    });\n  }\n\n  private onHandlerChanged(handler: string | undefined) {\n    const layout = this.getLayout();\n\n    if (handler == null) {\n      layout.setState({ children: layout.state.children.slice(0, 1) });\n    } else {\n      layout.setState({ children: [layout.state.children[0], this.getDrilldownView(handler)] });\n    }\n  }\n\n  private getDrilldownView(handler: string): SceneFlexItem {\n    return new SceneFlexItem({\n      key: 'drilldown-flex',\n      body: PanelBuilders.timeseries()\n        .setData(\n          getTimeSeriesQuery({\n            expr: `rate(grafana_http_request_duration_seconds_sum{handler=\"${handler}\"}[$__rate_interval]) * 1e3`,\n          })\n        )\n        .setTitle(`Handler: ${handler} details`)\n        .setHeaderActions(\n          <Button size=\"sm\" variant=\"secondary\" icon=\"times\" onClick={() => this.setState({ handler: undefined })} />\n        )\n        .build(),\n    });\n  }\n\n  getUrlState() {\n    return { handler: this.state.handler };\n  }\n\n  updateFromUrl(values: SceneObjectUrlValues) {\n    if (typeof values.handler === 'string' || values.handler === undefined) {\n      this.setState({ handler: values.handler });\n    }\n  }\n\n  private getLayout() {\n    if (this.parent instanceof SceneFlexLayout) {\n      return this.parent;\n    }\n\n    throw new Error('Invalid parent');\n  }\n}\n","// Libraries\nimport React, { useMemo, useState } from 'react';\n\nimport { SceneApp, SceneAppPage, SceneRouteMatch, SceneAppPageLike } from '@grafana/scenes';\nimport { usePageNav } from 'app/core/components/Page/usePageNav';\nimport { PluginPageContext, PluginPageContextType } from 'app/features/plugins/components/PluginPageContext';\n\nimport {\n  getOverviewScene,\n  getHttpHandlerListScene,\n  getOverviewLogsScene,\n  getHandlerDetailsScene,\n  getHandlerLogsScene,\n} from './scenes';\nimport { getTrafficScene } from './traffic';\n\nexport function GrafanaMonitoringApp() {\n  const appScene = useMemo(\n    () =>\n      new SceneApp({\n        pages: [getMainPageScene()],\n      }),\n    []\n  );\n\n  const sectionNav = usePageNav('scenes')!;\n  const [pluginContext] = useState<PluginPageContextType>({ sectionNav });\n\n  return (\n    <PluginPageContext.Provider value={pluginContext}>\n      <appScene.Component model={appScene} />\n    </PluginPageContext.Provider>\n  );\n}\n\nexport function getMainPageScene() {\n  return new SceneAppPage({\n    title: 'Grafana Monitoring',\n    subTitle: 'A custom app with embedded scenes to monitor your Grafana server',\n    url: '/scenes/grafana-monitoring',\n    hideFromBreadcrumbs: false,\n    getScene: getOverviewScene,\n    tabs: [\n      new SceneAppPage({\n        title: 'Overview',\n        url: '/scenes/grafana-monitoring',\n        getScene: getOverviewScene,\n        preserveUrlKeys: ['from', 'to', 'var-instance'],\n      }),\n      new SceneAppPage({\n        title: 'HTTP handlers',\n        url: '/scenes/grafana-monitoring/handlers',\n        getScene: getHttpHandlerListScene,\n        preserveUrlKeys: ['from', 'to', 'var-instance'],\n        drilldowns: [\n          {\n            routePath: '/scenes/grafana-monitoring/handlers/:handler',\n            getPage: getHandlerDrilldownPage,\n          },\n        ],\n      }),\n      new SceneAppPage({\n        title: 'Traffic',\n        url: '/scenes/grafana-monitoring/traffic',\n        getScene: getTrafficScene,\n        preserveUrlKeys: ['from', 'to', 'var-instance'],\n      }),\n      new SceneAppPage({\n        title: 'Logs',\n        url: '/scenes/grafana-monitoring/logs',\n        getScene: getOverviewLogsScene,\n        preserveUrlKeys: ['from', 'to', 'var-instance'],\n      }),\n    ],\n  });\n}\n\nexport function getHandlerDrilldownPage(\n  match: SceneRouteMatch<{ handler: string; tab?: string }>,\n  parent: SceneAppPageLike\n) {\n  const handler = decodeURIComponent(match.params.handler);\n  const baseUrl = `/scenes/grafana-monitoring/handlers/${encodeURIComponent(handler)}`;\n\n  return new SceneAppPage({\n    title: handler,\n    subTitle: 'A grafana http handler is responsible for service a specific API request',\n    url: baseUrl,\n    getParentPage: () => parent,\n    getScene: () => getHandlerDetailsScene(handler),\n    tabs: [\n      new SceneAppPage({\n        title: 'Metrics',\n        url: baseUrl,\n        routePath: '/scenes/grafana-monitoring/handlers/:handler',\n        getScene: () => getHandlerDetailsScene(handler),\n        preserveUrlKeys: ['from', 'to', 'var-instance'],\n      }),\n      new SceneAppPage({\n        title: 'Logs',\n        url: baseUrl + '/logs',\n        routePath: '/scenes/grafana-monitoring/handlers/:handler/logs',\n        getScene: () => getHandlerLogsScene(handler),\n        preserveUrlKeys: ['from', 'to', 'var-instance'],\n      }),\n    ],\n  });\n}\n\nexport default GrafanaMonitoringApp;\n","import { QueryRunnerState, SceneQueryRunner } from '@grafana/scenes';\nimport { TestData } from '@grafana-plugins/grafana-testdata-datasource/dataquery.gen';\n\nexport function getQueryRunnerWithRandomWalkQuery(\n  overrides?: Partial<TestData>,\n  queryRunnerOverrides?: Partial<QueryRunnerState>\n) {\n  return new SceneQueryRunner({\n    queries: [\n      {\n        refId: 'A',\n        datasource: {\n          uid: 'gdev-testdata',\n          type: 'testdata',\n        },\n        scenarioId: 'random_walk',\n        ...overrides,\n      },\n    ],\n    ...queryRunnerOverrides,\n  });\n}\n","import {\n  SceneGridRow,\n  SceneTimePicker,\n  SceneGridLayout,\n  SceneTimeRange,\n  SceneRefreshPicker,\n  SceneGridItem,\n  PanelBuilders,\n} from '@grafana/scenes';\nimport { TestDataQueryType } from '@grafana-plugins/grafana-testdata-datasource/dataquery.gen';\n\nimport { DashboardScene } from '../../dashboard-scene/scene/DashboardScene';\n\nimport { getQueryRunnerWithRandomWalkQuery } from './queries';\n\nexport function getGridWithMultipleTimeRanges(): DashboardScene {\n  const globalTimeRange = new SceneTimeRange();\n  const row1TimeRange = new SceneTimeRange({\n    from: 'now-1y',\n    to: 'now',\n  });\n\n  return new DashboardScene({\n    title: 'Grid with rows and different queries and time ranges',\n    body: new SceneGridLayout({\n      children: [\n        new SceneGridRow({\n          $timeRange: row1TimeRange,\n          $data: getQueryRunnerWithRandomWalkQuery({ scenarioId: TestDataQueryType.RandomWalkTable }),\n          title: 'Row A - has its own query, last year time range',\n          key: 'Row A',\n          isCollapsed: true,\n          y: 0,\n          children: [\n            new SceneGridItem({\n              x: 0,\n              y: 1,\n              width: 12,\n              height: 5,\n              isResizable: true,\n              isDraggable: true,\n              body: PanelBuilders.timeseries().setTitle('Row A Child1').build(),\n            }),\n            new SceneGridItem({\n              x: 0,\n              y: 5,\n              width: 6,\n              height: 5,\n              isResizable: true,\n              isDraggable: true,\n              body: PanelBuilders.timeseries().setTitle('Row A Child2').build(),\n            }),\n          ],\n        }),\n        new SceneGridItem({\n          x: 0,\n          y: 12,\n          width: 6,\n          height: 10,\n          isResizable: true,\n          isDraggable: true,\n          body: PanelBuilders.timeseries()\n            .setTitle('Outsider, has its own query')\n            .setData(getQueryRunnerWithRandomWalkQuery())\n            .build(),\n        }),\n      ],\n    }),\n    $timeRange: globalTimeRange,\n    $data: getQueryRunnerWithRandomWalkQuery(),\n    actions: [new SceneTimePicker({}), new SceneRefreshPicker({})],\n  });\n}\n","import {\n  SceneTimePicker,\n  SceneFlexLayout,\n  SceneGridLayout,\n  SceneTimeRange,\n  SceneRefreshPicker,\n  SceneGridItem,\n  SceneFlexItem,\n  PanelBuilders,\n} from '@grafana/scenes';\n\nimport { DashboardScene } from '../../dashboard-scene/scene/DashboardScene';\n\nimport { getQueryRunnerWithRandomWalkQuery } from './queries';\n\nexport function getMultipleGridLayoutTest(): DashboardScene {\n  return new DashboardScene({\n    title: 'Multiple grid layouts test',\n    body: new SceneFlexLayout({\n      children: [\n        new SceneFlexItem({\n          body: new SceneGridLayout({\n            children: [\n              new SceneGridItem({\n                x: 0,\n                y: 0,\n                width: 12,\n                height: 10,\n                isDraggable: true,\n                isResizable: true,\n                body: PanelBuilders.timeseries().setTitle('Dragabble and resizable').build(),\n              }),\n              new SceneGridItem({\n                x: 12,\n                y: 0,\n                width: 12,\n                height: 10,\n                isResizable: false,\n                isDraggable: true,\n                body: PanelBuilders.timeseries().setTitle('Draggable only').build(),\n              }),\n              new SceneGridItem({\n                x: 6,\n                y: 11,\n                width: 12,\n                height: 10,\n                isResizable: false,\n                isDraggable: true,\n                body: new SceneFlexLayout({\n                  direction: 'column',\n                  children: [\n                    new SceneFlexItem({\n                      ySizing: 'fill',\n                      body: PanelBuilders.timeseries().setTitle('Fill height').build(),\n                    }),\n                    new SceneFlexItem({\n                      ySizing: 'fill',\n                      body: PanelBuilders.timeseries().setTitle('Fill height').build(),\n                    }),\n                  ],\n                }),\n              }),\n            ],\n          }),\n        }),\n        new SceneFlexItem({\n          body: new SceneGridLayout({\n            children: [\n              new SceneGridItem({\n                x: 0,\n                y: 0,\n                width: 12,\n                height: 10,\n                isDraggable: true,\n                isResizable: true,\n                body: PanelBuilders.timeseries().setTitle('Dragabble and resizable').build(),\n              }),\n              new SceneGridItem({\n                x: 12,\n                y: 0,\n                width: 12,\n                height: 10,\n                isResizable: false,\n                isDraggable: true,\n                body: PanelBuilders.timeseries().setTitle('Draggable only').build(),\n              }),\n              new SceneGridItem({\n                x: 6,\n                y: 11,\n                width: 12,\n                height: 10,\n                isResizable: false,\n                isDraggable: true,\n                body: new SceneFlexLayout({\n                  direction: 'column',\n                  children: [\n                    new SceneFlexItem({\n                      ySizing: 'fill',\n                      body: PanelBuilders.timeseries().setTitle('Fill height').build(),\n                    }),\n                    new SceneFlexItem({\n                      ySizing: 'fill',\n                      body: PanelBuilders.timeseries().setTitle('Fill height').build(),\n                    }),\n                  ],\n                }),\n              }),\n            ],\n          }),\n        }),\n      ],\n    }),\n    $timeRange: new SceneTimeRange(),\n    $data: getQueryRunnerWithRandomWalkQuery(),\n    actions: [new SceneTimePicker({}), new SceneRefreshPicker({})],\n  });\n}\n","import {\n  SceneGridRow,\n  SceneTimePicker,\n  SceneGridLayout,\n  SceneTimeRange,\n  SceneRefreshPicker,\n  SceneGridItem,\n  PanelBuilders,\n} from '@grafana/scenes';\nimport { TestDataQueryType } from '@grafana-plugins/grafana-testdata-datasource/dataquery.gen';\n\nimport { DashboardScene } from '../../dashboard-scene/scene/DashboardScene';\n\nimport { getQueryRunnerWithRandomWalkQuery } from './queries';\n\nexport function getGridWithMultipleData(): DashboardScene {\n  return new DashboardScene({\n    title: 'Grid with rows and different queries',\n    body: new SceneGridLayout({\n      children: [\n        new SceneGridRow({\n          $timeRange: new SceneTimeRange(),\n          $data: getQueryRunnerWithRandomWalkQuery({ scenarioId: TestDataQueryType.RandomWalkTable }),\n          title: 'Row A - has its own query',\n          key: 'Row A',\n          isCollapsed: true,\n          y: 0,\n          children: [\n            new SceneGridItem({\n              x: 0,\n              y: 1,\n              width: 12,\n              height: 5,\n              isResizable: true,\n              isDraggable: true,\n              body: PanelBuilders.timeseries().setTitle('Row A Child1').build(),\n            }),\n            new SceneGridItem({\n              x: 0,\n              y: 5,\n              width: 6,\n              height: 5,\n              isResizable: true,\n              isDraggable: true,\n              body: PanelBuilders.timeseries().setTitle('Row A Child2').build(),\n            }),\n          ],\n        }),\n        new SceneGridRow({\n          title: 'Row B - uses global query',\n          key: 'Row B',\n          isCollapsed: true,\n          y: 1,\n          children: [\n            new SceneGridItem({\n              x: 0,\n              y: 2,\n              width: 12,\n              height: 5,\n              isResizable: false,\n              isDraggable: true,\n              body: PanelBuilders.timeseries().setTitle('Row B Child1').build(),\n            }),\n            new SceneGridItem({\n              x: 0,\n              y: 7,\n              width: 6,\n              height: 5,\n              isResizable: false,\n              isDraggable: true,\n              body: PanelBuilders.timeseries()\n                .setTitle('Row B Child2 with data')\n                .setData(getQueryRunnerWithRandomWalkQuery({ seriesCount: 10 }))\n                .build(),\n            }),\n          ],\n        }),\n        new SceneGridItem({\n          x: 0,\n          y: 12,\n          width: 6,\n          height: 10,\n          isResizable: true,\n          isDraggable: true,\n          body: PanelBuilders.timeseries()\n            .setTitle('Outsider, has its own query')\n            .setData(getQueryRunnerWithRandomWalkQuery({ seriesCount: 10 }))\n            .build(),\n        }),\n        new SceneGridItem({\n          x: 6,\n          y: 12,\n          width: 12,\n          height: 10,\n          isResizable: true,\n          isDraggable: true,\n          body: PanelBuilders.timeseries().setTitle('Outsider, uses global query').build(),\n        }),\n      ],\n    }),\n    $timeRange: new SceneTimeRange(),\n    $data: getQueryRunnerWithRandomWalkQuery(),\n    actions: [new SceneTimePicker({}), new SceneRefreshPicker({})],\n  });\n}\n","import { VariableRefresh } from '@grafana/data';\nimport {\n  SceneCanvasText,\n  SceneTimePicker,\n  SceneFlexLayout,\n  SceneTimeRange,\n  VariableValueSelectors,\n  SceneVariableSet,\n  CustomVariable,\n  DataSourceVariable,\n  QueryVariable,\n  SceneRefreshPicker,\n  SceneFlexItem,\n} from '@grafana/scenes';\n\nimport { DashboardScene } from '../../dashboard-scene/scene/DashboardScene';\n\nexport function getQueryVariableDemo(): DashboardScene {\n  return new DashboardScene({\n    title: 'Query variable',\n    $variables: new SceneVariableSet({\n      variables: [\n        new CustomVariable({\n          name: 'metric',\n          query: 'job : job, instance : instance',\n        }),\n        new DataSourceVariable({\n          name: 'datasource',\n          pluginId: 'prometheus',\n        }),\n        new QueryVariable({\n          name: 'instance (using datasource variable)',\n          refresh: VariableRefresh.onTimeRangeChanged,\n          query: { query: 'label_values(go_gc_duration_seconds, ${metric})', refId: 'A' },\n          datasource: { uid: '${datasource}' },\n        }),\n        new QueryVariable({\n          name: 'label values (on time range refresh)',\n          refresh: VariableRefresh.onTimeRangeChanged,\n          query: { query: 'label_values(go_gc_duration_seconds, ${metric})', refId: 'B' },\n          datasource: { uid: 'gdev-prometheus', type: 'prometheus' },\n        }),\n        new QueryVariable({\n          name: 'legacy (graphite)',\n          refresh: VariableRefresh.onTimeRangeChanged,\n          query: { queryType: 'Default', target: 'stats.response.*', refId: 'C' },\n          datasource: { uid: 'gdev-graphite', type: 'graphite' },\n        }),\n      ],\n    }),\n    body: new SceneFlexLayout({\n      direction: 'row',\n      children: [\n        new SceneFlexItem({\n          width: '40%',\n          body: new SceneCanvasText({\n            text: 'metric: ${metric}',\n            fontSize: 20,\n            align: 'center',\n          }),\n        }),\n      ],\n    }),\n    $timeRange: new SceneTimeRange(),\n    actions: [new SceneTimePicker({}), new SceneRefreshPicker({})],\n    controls: [new VariableValueSelectors({})],\n  });\n}\n","import {\n  SceneTimePicker,\n  SceneTimeRange,\n  VariableValueSelectors,\n  SceneVariableSet,\n  TestVariable,\n  SceneRefreshPicker,\n  PanelBuilders,\n  SceneGridLayout,\n  SceneControlsSpacer,\n  SceneGridRow,\n} from '@grafana/scenes';\nimport { VariableRefresh } from '@grafana/schema';\nimport { PanelRepeaterGridItem } from 'app/features/dashboard-scene/scene/PanelRepeaterGridItem';\nimport { RowRepeaterBehavior } from 'app/features/dashboard-scene/scene/RowRepeaterBehavior';\n\nimport { DashboardScene } from '../../dashboard-scene/scene/DashboardScene';\n\nimport { getQueryRunnerWithRandomWalkQuery } from './queries';\n\n/**\n * Repeat panels by variable that changes with time refresh. This tries to setup a very specific scenario\n * where a variable that is slow (2s) and constantly changing it's result is used to repeat panels. This\n * can be used to verify that when the time range change the repeated panels with locally scoped variable value\n * still wait for the top level variable to finish loading and the repeat process to complete.\n */\nexport function getRepeatingPanelsDemo(): DashboardScene {\n  return new DashboardScene({\n    title: 'Variables - Repeating panels',\n    $variables: new SceneVariableSet({\n      variables: [\n        new TestVariable({\n          name: 'server',\n          query: 'AB',\n          value: 'server',\n          text: '',\n          delayMs: 2000,\n          isMulti: true,\n          includeAll: true,\n          refresh: VariableRefresh.onTimeRangeChanged,\n          optionsToReturn: [\n            { label: 'A', value: 'A' },\n            { label: 'B', value: 'B' },\n          ],\n          options: [],\n          $behaviors: [changeVariable],\n        }),\n      ],\n    }),\n    body: new SceneGridLayout({\n      isDraggable: true,\n      isResizable: true,\n      children: [\n        new PanelRepeaterGridItem({\n          variableName: 'server',\n          x: 0,\n          y: 0,\n          width: 24,\n          height: 8,\n          itemHeight: 8,\n          source: PanelBuilders.timeseries()\n            .setTitle('server = $server')\n            .setData(getQueryRunnerWithRandomWalkQuery({ alias: 'server = $server' }))\n            .build(),\n        }),\n      ],\n    }),\n    $timeRange: new SceneTimeRange(),\n    actions: [],\n    controls: [\n      new VariableValueSelectors({}),\n      new SceneControlsSpacer(),\n      new SceneTimePicker({}),\n      new SceneRefreshPicker({}),\n    ],\n  });\n}\n\nfunction changeVariable(variable: TestVariable) {\n  const sub = variable.subscribeToState((state, old) => {\n    if (!state.loading && old.loading) {\n      if (variable.state.optionsToReturn?.length === 2) {\n        variable.setState({\n          query: 'ABC',\n          optionsToReturn: [\n            { label: 'A', value: 'A' },\n            { label: 'B', value: 'B' },\n            { label: 'C', value: 'C' },\n          ],\n        });\n      } else {\n        variable.setState({\n          query: 'AB',\n          optionsToReturn: [\n            { label: 'A', value: 'A' },\n            { label: 'B', value: 'B' },\n          ],\n        });\n      }\n    }\n  });\n\n  return () => {\n    sub.unsubscribe();\n  };\n}\n\nexport function getRepeatingRowsDemo(): DashboardScene {\n  return new DashboardScene({\n    title: 'Variables - Repeating rows',\n    $variables: new SceneVariableSet({\n      variables: [\n        new TestVariable({\n          name: 'server',\n          query: 'AB',\n          value: ['A', 'B', 'C'],\n          text: ['A', 'B', 'C'],\n          delayMs: 2000,\n          isMulti: true,\n          includeAll: true,\n          refresh: VariableRefresh.onTimeRangeChanged,\n          optionsToReturn: [\n            { label: 'A', value: 'A' },\n            { label: 'B', value: 'B' },\n            { label: 'C', value: 'C' },\n          ],\n          options: [],\n          //$behaviors: [changeVariable],\n        }),\n        new TestVariable({\n          name: 'pod',\n          query: 'AB',\n          value: ['Mu', 'Ma', 'Mi'],\n          text: ['Mu', 'Ma', 'Mi'],\n          delayMs: 2000,\n          isMulti: true,\n          includeAll: true,\n          refresh: VariableRefresh.onTimeRangeChanged,\n          optionsToReturn: [\n            { label: 'Mu', value: 'Mu' },\n            { label: 'Ma', value: 'Ma' },\n            { label: 'Mi', value: 'Mi' },\n          ],\n          options: [],\n        }),\n      ],\n    }),\n    body: new SceneGridLayout({\n      isDraggable: true,\n      isResizable: true,\n      children: [\n        new SceneGridRow({\n          title: 'Row $server',\n          key: 'Row A',\n          isCollapsed: false,\n          y: 0,\n          x: 0,\n          $behaviors: [\n            new RowRepeaterBehavior({\n              variableName: 'server',\n              sources: [\n                new PanelRepeaterGridItem({\n                  variableName: 'pod',\n                  x: 0,\n                  y: 0,\n                  width: 24,\n                  height: 5,\n                  itemHeight: 5,\n                  source: PanelBuilders.timeseries()\n                    .setTitle('server = $server, pod = $pod')\n                    .setData(getQueryRunnerWithRandomWalkQuery({ alias: 'server = $server, pod = $pod' }))\n                    .build(),\n                }),\n              ],\n            }),\n          ],\n        }),\n      ],\n    }),\n    $timeRange: new SceneTimeRange(),\n    actions: [],\n    controls: [\n      new VariableValueSelectors({}),\n      new SceneControlsSpacer(),\n      new SceneTimePicker({}),\n      new SceneRefreshPicker({}),\n    ],\n  });\n}\n","import {\n  NestedScene,\n  SceneTimePicker,\n  SceneFlexLayout,\n  SceneTimeRange,\n  SceneRefreshPicker,\n  SceneFlexItem,\n  PanelBuilders,\n} from '@grafana/scenes';\n\nimport { DashboardScene } from '../../dashboard-scene/scene/DashboardScene';\n\nimport { getQueryRunnerWithRandomWalkQuery } from './queries';\n\nexport function getSceneWithRows(): DashboardScene {\n  return new DashboardScene({\n    title: 'Scene with rows',\n    body: new SceneFlexLayout({\n      direction: 'column',\n      children: [\n        new NestedScene({\n          title: 'Overview',\n          canCollapse: true,\n          body: new SceneFlexLayout({\n            direction: 'row',\n            children: [\n              new SceneFlexItem({\n                body: PanelBuilders.timeseries().setTitle('Fill height').build(),\n              }),\n\n              new SceneFlexItem({\n                body: PanelBuilders.timeseries().setTitle('Fill height').build(),\n              }),\n            ],\n          }),\n        }),\n        new NestedScene({\n          title: 'More server details',\n          canCollapse: true,\n          body: new SceneFlexLayout({\n            direction: 'row',\n            children: [\n              new SceneFlexItem({\n                body: PanelBuilders.timeseries().setTitle('Fill height').build(),\n              }),\n              new SceneFlexItem({\n                body: PanelBuilders.timeseries().setTitle('Fill height').build(),\n              }),\n            ],\n          }),\n        }),\n      ],\n    }),\n    $timeRange: new SceneTimeRange(),\n    $data: getQueryRunnerWithRandomWalkQuery(),\n    actions: [new SceneTimePicker({}), new SceneRefreshPicker({})],\n  });\n}\n","import {\n  SceneTimePicker,\n  SceneFlexLayout,\n  SceneDataTransformer,\n  SceneTimeRange,\n  SceneRefreshPicker,\n  SceneFlexItem,\n  PanelBuilders,\n} from '@grafana/scenes';\n\nimport { DashboardScene } from '../../dashboard-scene/scene/DashboardScene';\n\nimport { getQueryRunnerWithRandomWalkQuery } from './queries';\n\nexport function getTransformationsDemo(): DashboardScene {\n  return new DashboardScene({\n    title: 'Transformations demo',\n    body: new SceneFlexLayout({\n      direction: 'row',\n      children: [\n        new SceneFlexItem({\n          body: new SceneFlexLayout({\n            direction: 'column',\n            children: [\n              new SceneFlexItem({\n                body: new SceneFlexLayout({\n                  direction: 'row',\n                  children: [\n                    new SceneFlexItem({\n                      body: PanelBuilders.timeseries().setTitle('Source data (global query)').build(),\n                    }),\n                    new SceneFlexItem({\n                      body: PanelBuilders.stat()\n                        .setTitle('Transformed data')\n                        .setData(\n                          new SceneDataTransformer({\n                            transformations: [\n                              {\n                                id: 'reduce',\n                                options: {\n                                  reducers: ['last', 'mean'],\n                                },\n                              },\n                            ],\n                          })\n                        )\n                        .build(),\n                    }),\n                  ],\n                }),\n              }),\n              new SceneFlexItem({\n                body: PanelBuilders.stat()\n                  .setTitle('Query with predefined transformations')\n                  .setData(\n                    new SceneDataTransformer({\n                      $data: getQueryRunnerWithRandomWalkQuery(),\n                      transformations: [\n                        {\n                          id: 'reduce',\n                          options: {\n                            reducers: ['mean'],\n                          },\n                        },\n                      ],\n                    })\n                  )\n                  .build(),\n              }),\n            ],\n          }),\n        }),\n      ],\n    }),\n    $timeRange: new SceneTimeRange(),\n    $data: getQueryRunnerWithRandomWalkQuery(),\n    actions: [new SceneTimePicker({}), new SceneRefreshPicker({})],\n  });\n}\n","import {\n  SceneCanvasText,\n  SceneTimePicker,\n  SceneFlexLayout,\n  SceneTimeRange,\n  VariableValueSelectors,\n  SceneVariableSet,\n  CustomVariable,\n  DataSourceVariable,\n  TestVariable,\n  NestedScene,\n  SceneRefreshPicker,\n  TextBoxVariable,\n  SceneFlexItem,\n  PanelBuilders,\n} from '@grafana/scenes';\n\nimport { DashboardScene } from '../../dashboard-scene/scene/DashboardScene';\n\nimport { getQueryRunnerWithRandomWalkQuery } from './queries';\n\nexport function getVariablesDemo(): DashboardScene {\n  return new DashboardScene({\n    title: 'Variables',\n    $variables: new SceneVariableSet({\n      variables: [\n        new TestVariable({\n          name: 'server',\n          query: 'A.*',\n          value: 'server',\n          text: '',\n          delayMs: 1000,\n          options: [],\n        }),\n        new TestVariable({\n          name: 'pod',\n          query: 'A.$server.*',\n          value: 'pod',\n          delayMs: 1000,\n          isMulti: true,\n          text: '',\n          options: [],\n        }),\n        new TestVariable({\n          name: 'handler',\n          query: 'A.$server.$pod.*',\n          value: 'handler',\n          delayMs: 1000,\n          //isMulti: true,\n          text: '',\n          options: [],\n        }),\n        new CustomVariable({\n          name: 'custom',\n          query: 'A : 10,B : 20',\n        }),\n        new DataSourceVariable({\n          name: 'ds',\n          pluginId: 'testdata',\n        }),\n        new TextBoxVariable({\n          name: 'textbox',\n          value: 'default value',\n        }),\n      ],\n    }),\n    body: new SceneFlexLayout({\n      direction: 'row',\n      children: [\n        new SceneFlexItem({\n          body: new SceneFlexLayout({\n            direction: 'column',\n            children: [\n              new SceneFlexItem({\n                body: new SceneFlexLayout({\n                  children: [\n                    new SceneFlexItem({\n                      body: PanelBuilders.timeseries()\n                        .setTitle('handler: $handler')\n                        .setData(\n                          getQueryRunnerWithRandomWalkQuery({\n                            alias: 'handler: $handler',\n                          })\n                        )\n                        .build(),\n                    }),\n                    new SceneFlexItem({\n                      body: new SceneCanvasText({\n                        text: 'Text: ${textbox}',\n                        fontSize: 20,\n                        align: 'center',\n                      }),\n                    }),\n                    new SceneFlexItem({\n                      width: '40%',\n                      body: new SceneCanvasText({\n                        text: 'server: ${server} pod:${pod}',\n                        fontSize: 20,\n                        align: 'center',\n                      }),\n                    }),\n                  ],\n                }),\n              }),\n              new SceneFlexItem({\n                body: new NestedScene({\n                  title: 'Collapsable inner scene',\n                  canCollapse: true,\n                  body: new SceneFlexLayout({\n                    direction: 'row',\n                    children: [\n                      new SceneFlexItem({\n                        body: PanelBuilders.timeseries()\n                          .setTitle('handler: $handler')\n                          .setData(\n                            getQueryRunnerWithRandomWalkQuery({\n                              alias: 'handler: $handler',\n                            })\n                          )\n                          .build(),\n                      }),\n                    ],\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n      ],\n    }),\n    $timeRange: new SceneTimeRange(),\n    actions: [new SceneTimePicker({}), new SceneRefreshPicker({})],\n    controls: [new VariableValueSelectors({})],\n  });\n}\n\nexport function getVariablesDemoWithAll(): DashboardScene {\n  return new DashboardScene({\n    title: 'Variables with All values',\n    $variables: new SceneVariableSet({\n      variables: [\n        new TestVariable({\n          name: 'server',\n          query: 'A.*',\n          value: 'AA',\n          text: 'AA',\n          includeAll: true,\n          defaultToAll: true,\n          delayMs: 1000,\n          options: [],\n        }),\n        new TestVariable({\n          name: 'pod',\n          query: 'A.$server.*',\n          value: [],\n          delayMs: 1000,\n          isMulti: true,\n          includeAll: true,\n          defaultToAll: true,\n          text: '',\n          options: [],\n        }),\n        new TestVariable({\n          name: 'handler',\n          query: 'A.$server.$pod.*',\n          value: [],\n          delayMs: 1000,\n          includeAll: true,\n          defaultToAll: false,\n          isMulti: true,\n          text: '',\n          options: [],\n        }),\n      ],\n    }),\n    body: new SceneFlexLayout({\n      direction: 'row',\n      children: [\n        new SceneFlexItem({\n          body: PanelBuilders.timeseries()\n            .setTitle('handler: $handler')\n            .setData(\n              getQueryRunnerWithRandomWalkQuery({\n                alias: 'handler: $handler',\n              })\n            )\n            .build(),\n        }),\n        new SceneFlexItem({\n          width: '40%',\n          body: new SceneCanvasText({\n            text: 'server: ${server} pod:${pod}',\n            fontSize: 20,\n            align: 'center',\n          }),\n        }),\n      ],\n    }),\n    $timeRange: new SceneTimeRange(),\n    actions: [new SceneTimePicker({}), new SceneRefreshPicker({})],\n    controls: [new VariableValueSelectors({})],\n  });\n}\n","import { DashboardScene } from '../../dashboard-scene/scene/DashboardScene';\n\nimport { getGridWithMultipleTimeRanges } from './gridMultiTimeRange';\nimport { getMultipleGridLayoutTest } from './gridMultiple';\nimport { getGridWithMultipleData } from './gridWithMultipleData';\nimport { getQueryVariableDemo } from './queryVariableDemo';\nimport { getRepeatingPanelsDemo, getRepeatingRowsDemo } from './repeatingPanels';\nimport { getSceneWithRows } from './sceneWithRows';\nimport { getTransformationsDemo } from './transformations';\nimport { getVariablesDemo, getVariablesDemoWithAll } from './variablesDemo';\n\ninterface SceneDef {\n  title: string;\n  getScene: () => DashboardScene;\n}\nexport function getScenes(): SceneDef[] {\n  return [\n    { title: 'Scene with rows', getScene: getSceneWithRows },\n    { title: 'Grid with rows and different queries', getScene: getGridWithMultipleData },\n    { title: 'Grid with rows and different queries and time ranges', getScene: getGridWithMultipleTimeRanges },\n    { title: 'Multiple grid layouts test', getScene: getMultipleGridLayoutTest },\n    { title: 'Variables', getScene: getVariablesDemo },\n    { title: 'Variables with All values', getScene: getVariablesDemoWithAll },\n    { title: 'Variables - Repeating panels', getScene: getRepeatingPanelsDemo },\n    { title: 'Variables - Repeating rows', getScene: getRepeatingRowsDemo },\n    { title: 'Query variable', getScene: getQueryVariableDemo },\n    { title: 'Transformations demo', getScene: getTransformationsDemo },\n  ];\n}\n\nconst cache: Record<string, DashboardScene> = {};\n\nexport function getSceneByTitle(title: string) {\n  if (cache[title]) {\n    return cache[title];\n  }\n\n  const scene = getScenes().find((x) => x.title === title);\n\n  if (scene) {\n    cache[title] = scene.getScene();\n  }\n\n  return cache[title];\n}\n"],"names":["TestDataQueryType","defaultUSAQuery","defaultTestData","DashboardScenePage","match","stateManager","dashboard","isLoading","loadError","PanelEditorRenderer","model","body","controls","drawer","styles","getStyles","location","pageNav","Page","AppChromeUpdate","getToolbarActions","control","editor","NavToolbarSeparator","Button","theme","PanelOptionsPane","panel","title","Field","Input","evt","PanelEditor","state","sourcePanel","newState","buildPanelEditScene","panelClone","dashboardStateCloned","DashboardScenePageStateManager","StateManagerBase","uid","err","panelId","panelEditor","fromCache","rsp","scene","transformSaveModelToScene","getDashboardScenePageStateManager","PanelEditPage","InspectTab","SceneListPage","scenes","results","dash","ScenePage","props","isInitialized","setInitialized","SceneRadioToggle","value","options","RadioButtonGroup","SceneSearchBox","getTableFilterTransform","query","regex","getTimeSeriesFilterTransform","source","map","data","frame","useAppQueryParams","getLinkUrlWithAppUrlState","path","params","url","getInstantQuery","getTimeSeriesQuery","getVariablesDefinitions","getHttpHandlerListScene","searchBox","httpHandlerQueries","httpHandlerQueriesFiltered","sub","httpHandlersTable","b","reqDurationTimeSeries","reqDurationTimeSeriesFiltered","graphsScene","frameIndex","getHandlerDrilldownUrl","layout","sceneToggle","handler","getHandlerDetailsScene","reqCountTimeSeries","getOverviewScene","getInstantStatPanel","getHandlerLogsScene","logsQuery","getOverviewLogsScene","getTrafficScene","HandlerDrilldownViewBehavior","values","GrafanaMonitoringApp","appScene","getMainPageScene","sectionNav","usePageNav","pluginContext","PluginPageContext","getHandlerDrilldownPage","parent","baseUrl","getQueryRunnerWithRandomWalkQuery","overrides","queryRunnerOverrides","getGridWithMultipleTimeRanges","globalTimeRange","row1TimeRange","DashboardScene","getMultipleGridLayoutTest","getGridWithMultipleData","getQueryVariableDemo","getRepeatingPanelsDemo","changeVariable","PanelRepeaterGridItem","variable","old","getRepeatingRowsDemo","RowRepeaterBehavior","getSceneWithRows","getTransformationsDemo","getVariablesDemo","getVariablesDemoWithAll","getScenes","cache","getSceneByTitle","x"],"sourceRoot":""}