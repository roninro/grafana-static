{"version":3,"file":"1301.1ce56f7f95cba9841746.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/expressions/util.ts","webpack://grafana/./public/app/features/alerting/unified/components/expressions/Expression.tsx","webpack://grafana/./public/app/features/alerting/unified/components/expressions/ExpressionStatusIndicator.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/VizWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertQueriesStatus.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useCombinedRule.ts","webpack://grafana/./public/app/features/alerting/unified/utils/timeRange.ts","webpack://grafana/./public/app/features/alerting/unified/state/AlertingQueryRunner.ts"],"sourcesContent":["import { DataFrame, Labels, roundDecimals } from '@grafana/data';\n\n/**\n * ⚠️ `frame.fields` could be an empty array ⚠️\n *\n * TypeScript will NOT complain about it when accessing items via index signatures.\n * Make sure to check for empty array or use optional chaining!\n *\n * see https://github.com/Microsoft/TypeScript/issues/13778\n */\n\nconst getSeriesName = (frame: DataFrame): string | undefined => {\n  const firstField = frame.fields[0];\n\n  const displayNameFromDS = firstField?.config?.displayNameFromDS;\n  return displayNameFromDS ?? frame.name ?? firstField?.labels?.__name__;\n};\n\nconst getSeriesValue = (frame: DataFrame) => {\n  const value = frame.fields[0]?.values[0];\n\n  if (Number.isFinite(value)) {\n    return roundDecimals(value, 5);\n  }\n\n  return value;\n};\n\nconst getSeriesLabels = (frame: DataFrame): Record<string, string> => {\n  const firstField = frame.fields[0];\n  return firstField?.labels ?? {};\n};\n\nconst formatLabels = (labels: Labels): string => {\n  return Object.entries(labels)\n    .map(([key, value]) => key + '=' + value)\n    .join(', ');\n};\n\nconst isEmptySeries = (series: DataFrame[]): boolean => {\n  const isEmpty = series.every((serie) => serie.fields.every((field) => field.values.every((value) => value == null)));\n\n  return isEmpty;\n};\n\nexport { getSeriesName, getSeriesValue, getSeriesLabels, formatLabels, isEmptySeries };\n","import { css, cx } from '@emotion/css';\nimport { uniqueId } from 'lodash';\nimport React, { FC, useCallback, useState } from 'react';\n\nimport { DataFrame, dateTimeFormat, GrafanaTheme2, isTimeSeriesFrames, LoadingState, PanelData } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { AutoSizeInput, Button, clearButtonStyles, IconButton, useStyles2 } from '@grafana/ui';\nimport { ClassicConditions } from 'app/features/expressions/components/ClassicConditions';\nimport { Math } from 'app/features/expressions/components/Math';\nimport { Reduce } from 'app/features/expressions/components/Reduce';\nimport { Resample } from 'app/features/expressions/components/Resample';\nimport { Threshold } from 'app/features/expressions/components/Threshold';\nimport {\n  ExpressionQuery,\n  ExpressionQueryType,\n  expressionTypes,\n  getExpressionLabel,\n} from 'app/features/expressions/types';\nimport { AlertQuery, PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nimport { usePagination } from '../../hooks/usePagination';\nimport { HoverCard } from '../HoverCard';\nimport { Spacer } from '../Spacer';\nimport { AlertStateTag } from '../rules/AlertStateTag';\n\nimport { ExpressionStatusIndicator } from './ExpressionStatusIndicator';\nimport { formatLabels, getSeriesLabels, getSeriesName, getSeriesValue, isEmptySeries } from './util';\n\ninterface ExpressionProps {\n  isAlertCondition?: boolean;\n  data?: PanelData;\n  error?: Error;\n  warning?: Error;\n  queries: AlertQuery[];\n  query: ExpressionQuery;\n  onSetCondition: (refId: string) => void;\n  onUpdateRefId: (oldRefId: string, newRefId: string) => void;\n  onRemoveExpression: (refId: string) => void;\n  onUpdateExpressionType: (refId: string, type: ExpressionQueryType) => void;\n  onChangeQuery: (query: ExpressionQuery) => void;\n}\n\nexport const Expression: FC<ExpressionProps> = ({\n  queries = [],\n  query,\n  data,\n  error,\n  warning,\n  isAlertCondition,\n  onSetCondition,\n  onUpdateRefId,\n  onRemoveExpression,\n  onUpdateExpressionType,\n  onChangeQuery,\n}) => {\n  const styles = useStyles2(getStyles);\n\n  const queryType = query?.type;\n\n  const isLoading = data && Object.values(data).some((d) => Boolean(d) && d.state === LoadingState.Loading);\n  const hasResults = Array.isArray(data?.series) && !isLoading;\n  const series = data?.series ?? [];\n  const seriesCount = series.length;\n\n  const alertCondition = isAlertCondition ?? false;\n\n  const groupedByState = {\n    [PromAlertingRuleState.Firing]: series.filter((serie) => getSeriesValue(serie) !== 0),\n    [PromAlertingRuleState.Inactive]: series.filter((serie) => getSeriesValue(serie) === 0),\n  };\n\n  const renderExpressionType = useCallback(\n    (query: ExpressionQuery) => {\n      // these are the refs we can choose from that don't include the current one\n      const availableRefIds = queries\n        .filter((q) => query.refId !== q.refId)\n        .map((q) => ({ value: q.refId, label: q.refId }));\n\n      switch (query.type) {\n        case ExpressionQueryType.math:\n          return <Math onChange={onChangeQuery} query={query} labelWidth={'auto'} onRunQuery={() => {}} />;\n\n        case ExpressionQueryType.reduce:\n          return <Reduce onChange={onChangeQuery} refIds={availableRefIds} labelWidth={'auto'} query={query} />;\n\n        case ExpressionQueryType.resample:\n          return <Resample onChange={onChangeQuery} query={query} labelWidth={'auto'} refIds={availableRefIds} />;\n\n        case ExpressionQueryType.classic:\n          return <ClassicConditions onChange={onChangeQuery} query={query} refIds={availableRefIds} />;\n\n        case ExpressionQueryType.threshold:\n          return <Threshold onChange={onChangeQuery} query={query} labelWidth={'auto'} refIds={availableRefIds} />;\n\n        default:\n          return <>Expression not supported: {query.type}</>;\n      }\n    },\n    [onChangeQuery, queries]\n  );\n  const selectedExpressionType = expressionTypes.find((o) => o.value === queryType);\n  const selectedExpressionDescription = selectedExpressionType?.description ?? '';\n\n  return (\n    <div\n      className={cx(\n        styles.expression.wrapper,\n        alertCondition && styles.expression.alertCondition,\n        queryType === ExpressionQueryType.classic && styles.expression.classic,\n        queryType !== ExpressionQueryType.classic && styles.expression.nonClassic\n      )}\n    >\n      <div className={styles.expression.stack}>\n        <Header\n          refId={query.refId}\n          queryType={queryType}\n          onRemoveExpression={() => onRemoveExpression(query.refId)}\n          onUpdateRefId={(newRefId) => onUpdateRefId(query.refId, newRefId)}\n          onUpdateExpressionType={(type) => onUpdateExpressionType(query.refId, type)}\n          onSetCondition={onSetCondition}\n          warning={warning}\n          error={error}\n          query={query}\n          alertCondition={alertCondition}\n        />\n        <div className={styles.expression.body}>\n          <div className={styles.expression.description}>{selectedExpressionDescription}</div>\n          {renderExpressionType(query)}\n        </div>\n        {hasResults && (\n          <>\n            <ExpressionResult series={series} isAlertCondition={isAlertCondition} />\n\n            <div className={styles.footer}>\n              <Stack direction=\"row\" alignItems=\"center\">\n                <Spacer />\n\n                <PreviewSummary\n                  isCondition={Boolean(isAlertCondition)}\n                  firing={groupedByState[PromAlertingRuleState.Firing].length}\n                  normal={groupedByState[PromAlertingRuleState.Inactive].length}\n                  seriesCount={seriesCount}\n                />\n              </Stack>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\ninterface ExpressionResultProps {\n  series: DataFrame[];\n  isAlertCondition?: boolean;\n}\nexport const PAGE_SIZE = 20;\nexport const ExpressionResult: FC<ExpressionResultProps> = ({ series, isAlertCondition }) => {\n  const { pageItems, previousPage, nextPage, numberOfPages, pageStart, pageEnd } = usePagination(series, 1, PAGE_SIZE);\n  const styles = useStyles2(getStyles);\n\n  // sometimes we receive results where every value is just \"null\" when noData occurs\n  const emptyResults = isEmptySeries(series);\n  const isTimeSeriesResults = !emptyResults && isTimeSeriesFrames(series);\n\n  const shouldShowPagination = numberOfPages > 1;\n\n  return (\n    <div className={styles.expression.results}>\n      {!emptyResults && isTimeSeriesResults && (\n        <div>\n          {pageItems.map((frame, index) => (\n            <TimeseriesRow\n              key={uniqueId()}\n              frame={frame}\n              index={pageStart + index}\n              isAlertCondition={isAlertCondition}\n            />\n          ))}\n        </div>\n      )}\n      {!emptyResults &&\n        !isTimeSeriesResults &&\n        pageItems.map((frame, index) => (\n          // There's no way to uniquely identify a frame that doesn't cause render bugs :/ (Gilles)\n          <FrameRow key={uniqueId()} frame={frame} index={pageStart + index} isAlertCondition={isAlertCondition} />\n        ))}\n      {emptyResults && <div className={cx(styles.expression.noData, styles.mutedText)}>No data</div>}\n      {shouldShowPagination && (\n        <div className={styles.pagination.wrapper} data-testid=\"paginate-expression\">\n          <Stack>\n            <Button\n              variant=\"secondary\"\n              fill=\"outline\"\n              onClick={previousPage}\n              icon=\"angle-left\"\n              size=\"sm\"\n              aria-label=\"previous-page\"\n            />\n            <Spacer />\n            <span className={styles.mutedText}>\n              {pageStart} - {pageEnd} of {series.length}\n            </span>\n            <Spacer />\n            <Button\n              variant=\"secondary\"\n              fill=\"outline\"\n              onClick={nextPage}\n              icon=\"angle-right\"\n              size=\"sm\"\n              aria-label=\"next-page\"\n            />\n          </Stack>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport const PreviewSummary: FC<{ firing: number; normal: number; isCondition: boolean; seriesCount: number }> = ({\n  firing,\n  normal,\n  isCondition,\n  seriesCount,\n}) => {\n  const { mutedText } = useStyles2(getStyles);\n\n  if (seriesCount === 0) {\n    return <span className={mutedText}>No series</span>;\n  }\n\n  if (isCondition) {\n    return <span className={mutedText}>{`${seriesCount} series: ${firing} firing, ${normal} normal`}</span>;\n  }\n\n  return <span className={mutedText}>{`${seriesCount} series`}</span>;\n};\n\ninterface HeaderProps {\n  refId: string;\n  queryType: ExpressionQueryType;\n  onUpdateRefId: (refId: string) => void;\n  onRemoveExpression: () => void;\n  onUpdateExpressionType: (type: ExpressionQueryType) => void;\n  warning?: Error;\n  error?: Error;\n  onSetCondition: (refId: string) => void;\n  query: ExpressionQuery;\n  alertCondition: boolean;\n}\n\nconst Header: FC<HeaderProps> = ({\n  refId,\n  queryType,\n  onUpdateRefId,\n  onRemoveExpression,\n  warning,\n  onSetCondition,\n  alertCondition,\n  query,\n  error,\n}) => {\n  const styles = useStyles2(getStyles);\n  const clearButton = useStyles2(clearButtonStyles);\n  /**\n   * There are 3 edit modes:\n   *\n   * 1. \"refId\": Editing the refId (ie. A -> B)\n   * 2. \"expressionType\": Editing the type of the expression (ie. Reduce -> Math)\n   * 3. \"false\": This means we're not editing either of those\n   */\n  const [editMode, setEditMode] = useState<'refId' | 'expressionType' | false>(false);\n\n  const editing = editMode !== false;\n  const editingRefId = editing && editMode === 'refId';\n\n  return (\n    <header className={styles.header.wrapper}>\n      <Stack direction=\"row\" gap={0.5} alignItems=\"center\">\n        <Stack direction=\"row\" gap={1} alignItems=\"center\" wrap={false}>\n          {!editingRefId && (\n            <button type=\"button\" className={cx(clearButton, styles.editable)} onClick={() => setEditMode('refId')}>\n              <div className={styles.expression.refId}>{refId}</div>\n            </button>\n          )}\n          {editingRefId && (\n            <AutoSizeInput\n              autoFocus\n              defaultValue={refId}\n              minWidth={5}\n              onChange={(event) => {\n                onUpdateRefId(event.currentTarget.value);\n                setEditMode(false);\n              }}\n              onFocus={(event) => event.target.select()}\n              onBlur={(event) => {\n                onUpdateRefId(event.currentTarget.value);\n                setEditMode(false);\n              }}\n            />\n          )}\n          <div>{getExpressionLabel(queryType)}</div>\n        </Stack>\n        <Spacer />\n        <ExpressionStatusIndicator\n          error={error}\n          warning={warning}\n          onSetCondition={() => onSetCondition(query.refId)}\n          isCondition={alertCondition}\n        />\n        <IconButton\n          name=\"trash-alt\"\n          variant=\"secondary\"\n          className={styles.mutedIcon}\n          onClick={onRemoveExpression}\n          tooltip=\"Remove expression\"\n        />\n      </Stack>\n    </header>\n  );\n};\n\ninterface FrameProps extends Pick<ExpressionProps, 'isAlertCondition'> {\n  frame: DataFrame;\n  index: number;\n}\n\nconst FrameRow: FC<FrameProps> = ({ frame, index, isAlertCondition }) => {\n  const styles = useStyles2(getStyles);\n\n  const name = getSeriesName(frame) || 'Series ' + index;\n  const value = getSeriesValue(frame);\n  const labelsRecord = getSeriesLabels(frame);\n  const labels = Object.entries(labelsRecord);\n  const hasLabels = labels.length > 0;\n\n  const showFiring = isAlertCondition && value !== 0;\n  const showNormal = isAlertCondition && value === 0;\n\n  const title = `${hasLabels ? '' : name}${hasLabels ? `{${formatLabels(labelsRecord)}}` : ''}`;\n\n  return (\n    <div className={styles.expression.resultsRow}>\n      <Stack direction=\"row\" gap={1} alignItems=\"center\">\n        <div className={styles.expression.resultLabel} title={title}>\n          <span>{hasLabels ? '' : name}</span>\n          {hasLabels && (\n            <>\n              <span>{'{'}</span>\n              {labels.map(([key, value], index) => (\n                <span key={uniqueId()}>\n                  <span className={styles.expression.labelKey}>{key}</span>\n                  <span>=</span>\n                  <span>&quot;</span>\n                  <span className={styles.expression.labelValue}>{value}</span>\n                  <span>&quot;</span>\n                  {index < labels.length - 1 && <span>, </span>}\n                </span>\n              ))}\n              <span>{'}'}</span>\n            </>\n          )}\n        </div>\n        <div className={styles.expression.resultValue}>{value}</div>\n        {showFiring && <AlertStateTag state={PromAlertingRuleState.Firing} size=\"sm\" />}\n        {showNormal && <AlertStateTag state={PromAlertingRuleState.Inactive} size=\"sm\" />}\n      </Stack>\n    </div>\n  );\n};\n\nconst TimeseriesRow: FC<FrameProps & { index: number }> = ({ frame, index }) => {\n  const styles = useStyles2(getStyles);\n\n  const valueField = frame.fields[1]; // field 0 is \"time\", field 1 is \"value\"\n\n  const hasLabels = valueField.labels;\n  const displayNameFromDS = valueField.config?.displayNameFromDS;\n  const name = displayNameFromDS ?? (hasLabels ? formatLabels(valueField.labels ?? {}) : 'Series ' + index);\n\n  const timestamps = frame.fields[0].values;\n\n  const getTimestampFromIndex = (index: number) => frame.fields[0].values[index];\n  const getValueFromIndex = (index: number) => frame.fields[1].values[index];\n\n  return (\n    <div className={styles.expression.resultsRow}>\n      <Stack direction=\"row\" alignItems=\"center\">\n        <span className={cx(styles.mutedText, styles.expression.resultLabel)} title={name}>\n          {name}\n        </span>\n        <div className={styles.expression.resultValue}>\n          <HoverCard\n            placement=\"right\"\n            wrapperClassName={styles.timeseriesTableWrapper}\n            content={\n              <table className={styles.timeseriesTable}>\n                <thead>\n                  <tr>\n                    <th>Timestamp</th>\n                    <th>Value</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {timestamps.map((_, index) => (\n                    <tr key={index}>\n                      <td className={styles.mutedText}>{dateTimeFormat(getTimestampFromIndex(index))}</td>\n                      <td className={styles.expression.resultValue}>{getValueFromIndex(index)}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            }\n          >\n            <span>Time series data</span>\n          </HoverCard>\n        </div>\n      </Stack>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  expression: {\n    wrapper: css`\n      display: flex;\n      border: solid 1px ${theme.colors.border.medium};\n      flex: 1;\n      flex-basis: 400px;\n      border-radius: ${theme.shape.radius.default};\n    `,\n    stack: css`\n      display: flex;\n      flex-direction: column;\n      flex-wrap: nowrap;\n      gap: 0;\n      width: 100%;\n      min-width: 0; // this one is important to prevent text overflow\n    `,\n    classic: css`\n      max-width: 100%;\n    `,\n    nonClassic: css`\n      max-width: 640px;\n    `,\n    alertCondition: css``,\n    body: css`\n      padding: ${theme.spacing(1)};\n      flex: 1;\n    `,\n    description: css`\n      margin-bottom: ${theme.spacing(1)};\n      font-size: ${theme.typography.size.xs};\n      color: ${theme.colors.text.secondary};\n    `,\n    refId: css`\n      font-weight: ${theme.typography.fontWeightBold};\n      color: ${theme.colors.primary.text};\n    `,\n    results: css`\n      display: flex;\n      flex-direction: column;\n      flex-wrap: nowrap;\n\n      border-top: solid 1px ${theme.colors.border.medium};\n    `,\n    noResults: css`\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    `,\n    resultsRow: css`\n      padding: ${theme.spacing(0.75)} ${theme.spacing(1)};\n\n      &:nth-child(odd) {\n        background-color: ${theme.colors.background.secondary};\n      }\n\n      &:hover {\n        background-color: ${theme.colors.background.canvas};\n      }\n    `,\n    labelKey: css`\n      color: ${theme.isDark ? '#73bf69' : '#56a64b'};\n    `,\n    labelValue: css`\n      color: ${theme.isDark ? '#ce9178' : '#a31515'};\n    `,\n    resultValue: css`\n      text-align: right;\n    `,\n    resultLabel: css`\n      flex: 1;\n      overflow-x: auto;\n\n      display: inline-block;\n      white-space: nowrap;\n    `,\n    noData: css`\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      padding: ${theme.spacing()};\n    `,\n  },\n  mutedText: css`\n    color: ${theme.colors.text.secondary};\n    font-size: 0.9em;\n\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  `,\n  header: {\n    wrapper: css`\n      background: ${theme.colors.background.secondary};\n      padding: ${theme.spacing(0.5)} ${theme.spacing(1)};\n      border-bottom: solid 1px ${theme.colors.border.weak};\n    `,\n  },\n  footer: css`\n    background: ${theme.colors.background.secondary};\n    padding: ${theme.spacing(1)};\n    border-top: solid 1px ${theme.colors.border.weak};\n  `,\n  draggableIcon: css`\n    cursor: grab;\n  `,\n  mutedIcon: css`\n    color: ${theme.colors.text.secondary};\n  `,\n  editable: css`\n    padding: ${theme.spacing(0.5)} ${theme.spacing(1)};\n    border: solid 1px ${theme.colors.border.weak};\n    border-radius: ${theme.shape.radius.default};\n\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    gap: ${theme.spacing(1)};\n\n    cursor: pointer;\n  `,\n  timeseriesTableWrapper: css`\n    max-height: 500px;\n\n    overflow-y: scroll;\n  `,\n  timeseriesTable: css`\n    table-layout: auto;\n\n    width: 100%;\n    height: 100%;\n\n    td,\n    th {\n      padding: ${theme.spacing(1)};\n    }\n\n    td {\n      background: ${theme.colors.background.primary};\n    }\n\n    th {\n      background: ${theme.colors.background.secondary};\n    }\n\n    tr {\n      border-bottom: 1px solid ${theme.colors.border.medium};\n\n      &:last-of-type {\n        border-bottom: none;\n      }\n    }\n  `,\n  pagination: {\n    wrapper: css`\n      border-top: 1px solid ${theme.colors.border.medium};\n      padding: ${theme.spacing()};\n    `,\n  },\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Badge, clearButtonStyles, useStyles2 } from '@grafana/ui';\n\ninterface AlertConditionProps {\n  warning?: Error;\n  error?: Error;\n  isCondition?: boolean;\n  onSetCondition?: () => void;\n}\n\nexport const ExpressionStatusIndicator = ({ error, warning, isCondition, onSetCondition }: AlertConditionProps) => {\n  const styles = useStyles2(getStyles);\n\n  const elements: JSX.Element[] = [];\n\n  if (error && isCondition) {\n    return <Badge color=\"red\" icon=\"exclamation-circle\" text=\"Alert condition\" tooltip={error.message} />;\n  } else if (error) {\n    elements.push(<Badge key=\"error\" color=\"red\" icon=\"exclamation-circle\" text=\"Error\" tooltip={error.message} />);\n  }\n\n  if (warning && isCondition) {\n    return <Badge color=\"orange\" icon=\"exclamation-triangle\" text=\"Alert condition\" tooltip={warning.message} />;\n  } else if (warning) {\n    elements.push(\n      <Badge key=\"warning\" color=\"orange\" icon=\"exclamation-triangle\" text=\"Warning\" tooltip={warning.message} />\n    );\n  }\n\n  if (isCondition) {\n    elements.unshift(<Badge key=\"condition\" color=\"green\" icon=\"check\" text=\"Alert condition\" />);\n  } else {\n    elements.unshift(\n      <button\n        key=\"make-condition\"\n        type=\"button\"\n        className={styles.actionLink}\n        onClick={() => onSetCondition && onSetCondition()}\n      >\n        Set as alert condition\n      </button>\n    );\n  }\n\n  return <>{elements}</>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const clearButton = clearButtonStyles(theme);\n\n  return {\n    actionLink: css`\n      ${clearButton};\n      color: ${theme.colors.text.link};\n      cursor: pointer;\n\n      &:hover {\n        text-decoration: underline;\n      }\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2, isTimeSeriesFrames, PanelData, ThresholdsConfig } from '@grafana/data';\nimport { GraphTresholdsStyleMode } from '@grafana/schema';\nimport { useStyles2 } from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\nimport { GraphContainer } from 'app/features/explore/Graph/GraphContainer';\n\nimport { ExpressionResult } from '../expressions/Expression';\n\nimport { getStatusMessage } from './util';\n\ninterface Props {\n  data: PanelData;\n  thresholds?: ThresholdsConfig;\n  thresholdsType?: GraphTresholdsStyleMode;\n  onThresholdsChange?: (thresholds: ThresholdsConfig) => void;\n}\n\n/** The VizWrapper is just a simple component that renders either a table or a graph based on the type of data we receive from \"PanelData\" */\nexport const VizWrapper = ({ data, thresholds, thresholdsType }: Props) => {\n  const styles = useStyles2(getStyles);\n  const isTimeSeriesData = isTimeSeriesFrames(data.series);\n  const statusMessage = getStatusMessage(data);\n  const thresholdsStyle = thresholdsType ? { mode: thresholdsType } : undefined;\n  const timeRange = {\n    from: data.timeRange.from.valueOf(),\n    to: data.timeRange.to.valueOf(),\n  };\n\n  return (\n    <div className={styles.wrapper}>\n      <AutoSizer disableHeight>\n        {({ width }) => (\n          <div style={{ width }}>\n            {isTimeSeriesData ? (\n              <GraphContainer\n                statusMessage={statusMessage}\n                data={data.series}\n                eventBus={appEvents}\n                height={300}\n                width={width}\n                absoluteRange={timeRange}\n                timeZone=\"browser\"\n                onChangeTime={() => {}}\n                splitOpenFn={() => {}}\n                loadingState={data.state}\n                thresholdsConfig={thresholds}\n                thresholdsStyle={thresholdsStyle}\n              />\n            ) : (\n              <div className={styles.instantVectorResultWrapper}>\n                <header className={styles.title}>Table</header>\n                <ExpressionResult series={data.series} />\n              </div>\n            )}\n          </div>\n        )}\n      </AutoSizer>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    width: 100%;\n    position: relative;\n  `,\n  instantVectorResultWrapper: css`\n    border: solid 1px ${theme.colors.border.medium};\n    border-radius: ${theme.shape.radius.default};\n    padding: 0;\n\n    display: flex;\n    flex-direction: column;\n    flex-wrap: nowrap;\n  `,\n  title: css({\n    label: 'panel-title',\n    padding: theme.spacing(),\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n    whiteSpace: 'nowrap',\n    fontSize: theme.typography.h6.fontSize,\n    fontWeight: theme.typography.h6.fontWeight,\n  }),\n});\n","import { useMemo } from 'react';\n\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { isExpressionReference } from '@grafana/runtime/src/utils/DataSourceWithBackend';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nexport function useAlertQueriesStatus(queries: AlertQuery[]) {\n  const allDataSourcesAvailable = useMemo(\n    () =>\n      queries\n        .filter((query) => !isExpressionReference(query.datasourceUid))\n        .every((query) => {\n          const instanceSettings = getDataSourceSrv().getInstanceSettings(query.datasourceUid);\n          return Boolean(instanceSettings);\n        }),\n    [queries]\n  );\n\n  return { allDataSourcesAvailable };\n}\n","import { useEffect, useMemo } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { useDispatch } from 'app/types';\nimport { CombinedRule, RuleIdentifier, RuleNamespace, RulerDataSourceConfig } from 'app/types/unified-alerting';\nimport { RulerRuleGroupDTO, RulerRulesConfigDTO } from 'app/types/unified-alerting-dto';\n\nimport { alertRuleApi } from '../api/alertRuleApi';\nimport { featureDiscoveryApi } from '../api/featureDiscoveryApi';\nimport { fetchPromAndRulerRulesAction } from '../state/actions';\nimport { getDataSourceByName, GRAFANA_RULES_SOURCE_NAME, isGrafanaRulesSource } from '../utils/datasource';\nimport { AsyncRequestMapSlice, AsyncRequestState, initialAsyncRequestState } from '../utils/redux';\nimport * as ruleId from '../utils/rule-id';\nimport {\n  isCloudRuleIdentifier,\n  isGrafanaRuleIdentifier,\n  isPrometheusRuleIdentifier,\n  isRulerNotSupportedResponse,\n} from '../utils/rules';\n\nimport {\n  attachRulerRulesToCombinedRules,\n  combineRulesNamespaces,\n  useCombinedRuleNamespaces,\n} from './useCombinedRuleNamespaces';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\nexport function useCombinedRulesMatching(\n  ruleName: string | undefined,\n  ruleSourceName: string | undefined\n): AsyncRequestState<CombinedRule[]> {\n  const requestState = useCombinedRulesLoader(ruleSourceName);\n  const combinedRules = useCombinedRuleNamespaces(ruleSourceName);\n\n  const rules = useMemo(() => {\n    if (!ruleName || !ruleSourceName || combinedRules.length === 0) {\n      return [];\n    }\n\n    const rules: CombinedRule[] = [];\n\n    for (const namespace of combinedRules) {\n      for (const group of namespace.groups) {\n        for (const rule of group.rules) {\n          if (rule.name === ruleName) {\n            rules.push(rule);\n          }\n        }\n      }\n    }\n\n    return rules;\n  }, [ruleName, ruleSourceName, combinedRules]);\n\n  return {\n    ...requestState,\n    result: rules,\n  };\n}\n\nexport function useCloudCombinedRulesMatching(\n  ruleName: string,\n  ruleSourceName: string,\n  filter?: { namespace?: string; groupName?: string }\n): { loading: boolean; error?: unknown; rules?: CombinedRule[] } {\n  const dsSettings = getDataSourceByName(ruleSourceName);\n  const { dsFeatures, isLoadingDsFeatures } = useDataSourceFeatures(ruleSourceName);\n\n  const {\n    currentData: promRuleNs = [],\n    isLoading: isLoadingPromRules,\n    error: promRuleNsError,\n  } = alertRuleApi.endpoints.prometheusRuleNamespaces.useQuery({\n    ruleSourceName: ruleSourceName,\n    ruleName: ruleName,\n    namespace: filter?.namespace,\n    groupName: filter?.groupName,\n  });\n\n  const [fetchRulerRuleGroup] = alertRuleApi.endpoints.rulerRuleGroup.useLazyQuery();\n\n  const { loading, error, value } = useAsync(async () => {\n    if (!dsSettings) {\n      throw new Error('Unable to obtain data source settings');\n    }\n\n    if (promRuleNsError) {\n      throw new Error('Unable to obtain Prometheus rules');\n    }\n\n    const rulerGroups: RulerRuleGroupDTO[] = [];\n    if (dsFeatures?.rulerConfig) {\n      const rulerConfig = dsFeatures.rulerConfig;\n\n      const nsGroups = promRuleNs\n        .map((namespace) => namespace.groups.map((group) => ({ namespace: namespace, group: group })))\n        .flat();\n\n      // RTK query takes care of deduplication\n      await Promise.allSettled(\n        nsGroups.map(async (nsGroup) => {\n          const rulerGroup = await fetchRulerRuleGroup({\n            rulerConfig: rulerConfig,\n            namespace: nsGroup.namespace.name,\n            group: nsGroup.group.name,\n          }).unwrap();\n          rulerGroups.push(rulerGroup);\n        })\n      );\n    }\n\n    // TODO Join with ruler rules\n    const namespaces = promRuleNs.map((ns) => attachRulerRulesToCombinedRules(dsSettings, ns, rulerGroups));\n    const rules = namespaces.flatMap((ns) => ns.groups.flatMap((group) => group.rules));\n\n    return rules;\n  }, [dsSettings, dsFeatures, isLoadingPromRules, promRuleNsError, promRuleNs, fetchRulerRuleGroup]);\n\n  return { loading: isLoadingDsFeatures || loading, error: error, rules: value };\n}\n\nfunction useCombinedRulesLoader(\n  rulesSourceName: string | undefined,\n  identifier?: RuleIdentifier\n): AsyncRequestState<void> {\n  const dispatch = useDispatch();\n  const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n  const promRuleRequest = getRequestState(rulesSourceName, promRuleRequests);\n  const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n  const rulerRuleRequest = getRequestState(rulesSourceName, rulerRuleRequests);\n\n  const { loading } = useAsync(async () => {\n    if (!rulesSourceName) {\n      return;\n    }\n\n    await dispatch(fetchPromAndRulerRulesAction({ rulesSourceName, identifier }));\n  }, [dispatch, rulesSourceName]);\n\n  return {\n    loading,\n    error: promRuleRequest.error ?? isRulerNotSupportedResponse(rulerRuleRequest) ? undefined : rulerRuleRequest.error,\n    dispatched: promRuleRequest.dispatched && rulerRuleRequest.dispatched,\n  };\n}\n\nfunction getRequestState(\n  ruleSourceName: string | undefined,\n  slice: AsyncRequestMapSlice<RulerRulesConfigDTO | RuleNamespace[] | null>\n): AsyncRequestState<RulerRulesConfigDTO | RuleNamespace[] | null> {\n  if (!ruleSourceName) {\n    return initialAsyncRequestState;\n  }\n\n  const state = slice[ruleSourceName];\n\n  if (!state) {\n    return initialAsyncRequestState;\n  }\n\n  return state;\n}\n\nexport function useCombinedRule({ ruleIdentifier }: { ruleIdentifier: RuleIdentifier }): {\n  loading: boolean;\n  result?: CombinedRule;\n  error?: unknown;\n} {\n  const { ruleSourceName } = ruleIdentifier;\n  const dsSettings = getDataSourceByName(ruleSourceName);\n\n  const { dsFeatures, isLoadingDsFeatures } = useDataSourceFeatures(ruleSourceName);\n\n  const {\n    currentData: promRuleNs,\n    isLoading: isLoadingPromRules,\n    error: promRuleNsError,\n  } = alertRuleApi.endpoints.prometheusRuleNamespaces.useQuery(\n    {\n      // TODO Refactor parameters\n      ruleSourceName: ruleIdentifier.ruleSourceName,\n      namespace:\n        isPrometheusRuleIdentifier(ruleIdentifier) || isCloudRuleIdentifier(ruleIdentifier)\n          ? ruleIdentifier.namespace\n          : undefined,\n      groupName:\n        isPrometheusRuleIdentifier(ruleIdentifier) || isCloudRuleIdentifier(ruleIdentifier)\n          ? ruleIdentifier.groupName\n          : undefined,\n      ruleName:\n        isPrometheusRuleIdentifier(ruleIdentifier) || isCloudRuleIdentifier(ruleIdentifier)\n          ? ruleIdentifier.ruleName\n          : undefined,\n    }\n    // TODO – experiment with enabling these now that we request a single alert rule more efficiently.\n    // Requires a recent version of Prometheus with support for query params on /api/v1/rules\n    // {\n    //   refetchOnFocus: true,\n    //   refetchOnReconnect: true,\n    // }\n  );\n\n  const [\n    fetchRulerRuleGroup,\n    { currentData: rulerRuleGroup, isLoading: isLoadingRulerGroup, error: rulerRuleGroupError },\n  ] = alertRuleApi.endpoints.rulerRuleGroup.useLazyQuery();\n\n  const [fetchRulerRules, { currentData: rulerRules, isLoading: isLoadingRulerRules, error: rulerRulesError }] =\n    alertRuleApi.endpoints.rulerRules.useLazyQuery();\n\n  useEffect(() => {\n    if (!dsFeatures?.rulerConfig) {\n      return;\n    }\n\n    if (dsFeatures.rulerConfig && isCloudRuleIdentifier(ruleIdentifier)) {\n      fetchRulerRuleGroup({\n        rulerConfig: dsFeatures.rulerConfig,\n        namespace: ruleIdentifier.namespace,\n        group: ruleIdentifier.groupName,\n      });\n    } else if (isGrafanaRuleIdentifier(ruleIdentifier)) {\n      // TODO Fetch a single group for Grafana managed rules, we're currently still fetching all rules for Grafana managed\n      fetchRulerRules({ rulerConfig: dsFeatures.rulerConfig });\n    }\n  }, [dsFeatures, fetchRulerRuleGroup, fetchRulerRules, ruleIdentifier]);\n\n  const rule = useMemo(() => {\n    if (!promRuleNs) {\n      return;\n    }\n\n    if (isGrafanaRuleIdentifier(ruleIdentifier)) {\n      const combinedNamespaces = combineRulesNamespaces('grafana', promRuleNs, rulerRules);\n\n      for (const namespace of combinedNamespaces) {\n        for (const group of namespace.groups) {\n          for (const rule of group.rules) {\n            const id = ruleId.fromCombinedRule(ruleSourceName, rule);\n\n            if (ruleId.equal(id, ruleIdentifier)) {\n              return rule;\n            }\n          }\n        }\n      }\n    }\n\n    if (!dsSettings) {\n      return;\n    }\n\n    if (\n      promRuleNs.length > 0 &&\n      (isCloudRuleIdentifier(ruleIdentifier) || isPrometheusRuleIdentifier(ruleIdentifier))\n    ) {\n      const namespaces = promRuleNs.map((ns) =>\n        attachRulerRulesToCombinedRules(dsSettings, ns, rulerRuleGroup ? [rulerRuleGroup] : [])\n      );\n\n      for (const namespace of namespaces) {\n        for (const group of namespace.groups) {\n          for (const rule of group.rules) {\n            const id = ruleId.fromCombinedRule(ruleSourceName, rule);\n\n            if (ruleId.equal(id, ruleIdentifier)) {\n              return rule;\n            }\n          }\n        }\n      }\n    }\n\n    return;\n  }, [ruleIdentifier, ruleSourceName, promRuleNs, rulerRuleGroup, rulerRules, dsSettings]);\n\n  return {\n    loading: isLoadingDsFeatures || isLoadingPromRules || isLoadingRulerGroup || isLoadingRulerRules,\n    error: promRuleNsError ?? rulerRuleGroupError ?? rulerRulesError,\n    result: rule,\n  };\n}\n\nconst grafanaRulerConfig: RulerDataSourceConfig = {\n  dataSourceName: GRAFANA_RULES_SOURCE_NAME,\n  apiVersion: 'legacy',\n};\n\nconst grafanaDsFeatures = {\n  rulerConfig: grafanaRulerConfig,\n};\n\nexport function useDataSourceFeatures(dataSourceName: string) {\n  const isGrafanaDs = isGrafanaRulesSource(dataSourceName);\n\n  const { currentData: dsFeatures, isLoading: isLoadingDsFeatures } =\n    featureDiscoveryApi.endpoints.discoverDsFeatures.useQuery(\n      {\n        rulesSourceName: dataSourceName,\n      },\n      { skip: isGrafanaDs }\n    );\n\n  if (isGrafanaDs) {\n    return { isLoadingDsFeatures: false, dsFeatures: grafanaDsFeatures };\n  }\n\n  return { isLoadingDsFeatures, dsFeatures };\n}\n","import { RelativeTimeRange } from '@grafana/data';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { ExpressionQuery, ExpressionQueryType } from '../../../expressions/types';\n\nconst FALL_BACK_TIME_RANGE = { from: 21600, to: 0 };\n\nexport const getTimeRangeForExpression = (query: ExpressionQuery, queries: AlertQuery[]): RelativeTimeRange => {\n  const referencedRefIds: string[] | undefined = getReferencedIds(query, queries);\n\n  if (!referencedRefIds) {\n    return FALL_BACK_TIME_RANGE;\n  }\n\n  const { from, to } = getTimeRanges(referencedRefIds, queries);\n\n  if (!from.length && !to.length) {\n    return FALL_BACK_TIME_RANGE;\n  }\n\n  return {\n    from: Math.max(...from),\n    to: Math.min(...to),\n  };\n};\n\nconst getReferencedIds = (model: ExpressionQuery, queries: AlertQuery[]): string[] | undefined => {\n  switch (model.type) {\n    case ExpressionQueryType.classic:\n      return getReferencedIdsForClassicCondition(model);\n    case ExpressionQueryType.math:\n      return getReferencedIdsForMath(model, queries);\n    case ExpressionQueryType.resample:\n    case ExpressionQueryType.reduce:\n    case ExpressionQueryType.threshold:\n      return getReferencedIdsForReduce(model);\n  }\n};\n\nconst getReferencedIdsForClassicCondition = (model: ExpressionQuery) => {\n  return model.conditions?.map((condition) => {\n    return condition.query.params[0];\n  });\n};\n\nconst getTimeRanges = (referencedRefIds: string[], queries: AlertQuery[]) => {\n  let from: number[] = [];\n  let to = [FALL_BACK_TIME_RANGE.to];\n  for (const referencedRefIdsKey of referencedRefIds) {\n    const query = queries.find((query) => query.refId === referencedRefIdsKey);\n\n    if (!query || !query.relativeTimeRange) {\n      continue;\n    }\n    from.push(query.relativeTimeRange.from);\n    to.push(query.relativeTimeRange.to);\n  }\n\n  return {\n    from,\n    to,\n  };\n};\n\nconst getReferencedIdsForMath = (model: ExpressionQuery, queries: AlertQuery[]) => {\n  return (\n    queries\n      // filter queries of type query and filter expression on if it includes any refIds\n      .filter((q) => q.queryType === 'query' && model.expression?.includes(q.refId))\n      .map((q) => {\n        return q.refId;\n      })\n  );\n};\n\nconst getReferencedIdsForReduce = (model: ExpressionQuery) => {\n  return model.expression ? [model.expression] : undefined;\n};\n","import { reject } from 'lodash';\nimport { Observable, of, OperatorFunction, ReplaySubject, Unsubscribable } from 'rxjs';\nimport { catchError, map, share } from 'rxjs/operators';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport {\n  dataFrameFromJSON,\n  DataFrameJSON,\n  getDefaultTimeRange,\n  LoadingState,\n  PanelData,\n  rangeUtil,\n  TimeRange,\n  withLoadingIndicator,\n  preProcessPanelData,\n} from '@grafana/data';\nimport { FetchResponse, getDataSourceSrv, toDataQueryError, DataSourceWithBackend } from '@grafana/runtime';\nimport { BackendSrv, getBackendSrv } from 'app/core/services/backend_srv';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { cancelNetworkRequestsOnUnsubscribe } from 'app/features/query/state/processing/canceler';\nimport { setStructureRevision } from 'app/features/query/state/processing/revision';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { getTimeRangeForExpression } from '../utils/timeRange';\n\nexport interface AlertingQueryResult {\n  error?: string;\n  status?: number; // HTTP status error\n  frames: DataFrameJSON[];\n}\n\nexport interface AlertingQueryResponse {\n  results: Record<string, AlertingQueryResult>;\n}\nexport class AlertingQueryRunner {\n  private subject: ReplaySubject<Record<string, PanelData>>;\n  private subscription?: Unsubscribable;\n  private lastResult: Record<string, PanelData>;\n\n  constructor(\n    private backendSrv = getBackendSrv(),\n    private dataSourceSrv = getDataSourceSrv()\n  ) {\n    this.subject = new ReplaySubject(1);\n    this.lastResult = {};\n  }\n\n  get(): Observable<Record<string, PanelData>> {\n    return this.subject.asObservable();\n  }\n\n  async run(queries: AlertQuery[]) {\n    const empty = initialState(queries, LoadingState.Done);\n    const queriesToExclude: string[] = [];\n\n    // do not execute if one more of the queries are not runnable,\n    // for example not completely configured\n    for (const query of queries) {\n      const refId = query.model.refId;\n\n      if (isExpressionQuery(query.model)) {\n        continue;\n      }\n\n      const dataSourceInstance = await this.dataSourceSrv.get(query.datasourceUid);\n      const skipRunningQuery =\n        dataSourceInstance instanceof DataSourceWithBackend &&\n        dataSourceInstance.filterQuery &&\n        !dataSourceInstance.filterQuery(query.model);\n\n      if (skipRunningQuery) {\n        queriesToExclude.push(refId);\n      }\n    }\n\n    const queriesToRun = reject(queries, (q) => queriesToExclude.includes(q.model.refId));\n\n    if (queriesToRun.length === 0) {\n      return this.subject.next(empty);\n    }\n\n    this.subscription = runRequest(this.backendSrv, queriesToRun).subscribe({\n      next: (dataPerQuery) => {\n        const nextResult = applyChange(dataPerQuery, (refId, data) => {\n          const previous = this.lastResult[refId];\n          const preProcessed = preProcessPanelData(data, previous);\n          return setStructureRevision(preProcessed, previous);\n        });\n\n        this.lastResult = nextResult;\n        this.subject.next(this.lastResult);\n      },\n\n      error: (error: Error) => {\n        this.lastResult = mapErrorToPanelData(this.lastResult, error);\n        this.subject.next(this.lastResult);\n      },\n    });\n  }\n\n  cancel() {\n    if (!this.subscription) {\n      return;\n    }\n    this.subscription.unsubscribe();\n\n    let requestIsRunning = false;\n\n    const nextResult = applyChange(this.lastResult, (refId, data) => {\n      if (data.state === LoadingState.Loading) {\n        requestIsRunning = true;\n      }\n\n      return {\n        ...data,\n        state: LoadingState.Done,\n      };\n    });\n\n    if (requestIsRunning) {\n      this.subject.next(nextResult);\n    }\n  }\n\n  destroy() {\n    if (this.subject) {\n      this.subject.complete();\n    }\n\n    this.cancel();\n  }\n}\n\nconst runRequest = (backendSrv: BackendSrv, queries: AlertQuery[]): Observable<Record<string, PanelData>> => {\n  const initial = initialState(queries, LoadingState.Loading);\n  const request = {\n    data: { data: queries },\n    url: '/api/v1/eval',\n    method: 'POST',\n    requestId: uuidv4(),\n  };\n\n  return withLoadingIndicator({\n    whileLoading: initial,\n    source: backendSrv.fetch<AlertingQueryResponse>(request).pipe(\n      mapToPanelData(initial),\n      catchError((error) => of(mapErrorToPanelData(initial, error))),\n      cancelNetworkRequestsOnUnsubscribe(backendSrv, request.requestId),\n      share()\n    ),\n  });\n};\n\nconst initialState = (queries: AlertQuery[], state: LoadingState): Record<string, PanelData> => {\n  return queries.reduce((dataByQuery: Record<string, PanelData>, query) => {\n    dataByQuery[query.refId] = {\n      state,\n      series: [],\n      timeRange: getTimeRange(query, queries),\n    };\n\n    return dataByQuery;\n  }, {});\n};\n\nconst getTimeRange = (query: AlertQuery, queries: AlertQuery[]): TimeRange => {\n  if (isExpressionQuery(query.model)) {\n    const relative = getTimeRangeForExpression(query.model, queries);\n    return rangeUtil.relativeToTimeRange(relative);\n  }\n\n  if (!query.relativeTimeRange) {\n    console.warn(`Query with refId: ${query.refId} did not have any relative time range, using default.`);\n    return getDefaultTimeRange();\n  }\n\n  return rangeUtil.relativeToTimeRange(query.relativeTimeRange);\n};\n\nconst mapToPanelData = (\n  dataByQuery: Record<string, PanelData>\n): OperatorFunction<FetchResponse<AlertingQueryResponse>, Record<string, PanelData>> => {\n  return map((response) => {\n    const { data } = response;\n    const results: Record<string, PanelData> = {};\n\n    for (const [refId, result] of Object.entries(data.results)) {\n      const { error, status, frames = [] } = result;\n\n      // extract errors from the /eval results\n      const errors = error ? [{ message: error, refId, status }] : [];\n\n      results[refId] = {\n        errors,\n        timeRange: dataByQuery[refId].timeRange,\n        state: LoadingState.Done,\n        series: frames.map(dataFrameFromJSON),\n      };\n    }\n\n    return results;\n  });\n};\n\nconst mapErrorToPanelData = (lastResult: Record<string, PanelData>, error: Error): Record<string, PanelData> => {\n  const queryError = toDataQueryError(error);\n\n  return applyChange(lastResult, (refId, data) => {\n    return {\n      ...data,\n      state: LoadingState.Error,\n      error: queryError,\n    };\n  });\n};\n\nconst applyChange = (\n  initial: Record<string, PanelData>,\n  change: (refId: string, data: PanelData) => PanelData\n): Record<string, PanelData> => {\n  const nextResult: Record<string, PanelData> = {};\n\n  for (const [refId, data] of Object.entries(initial)) {\n    nextResult[refId] = change(refId, data);\n  }\n\n  return nextResult;\n};\n"],"names":["getSeriesName","frame","firstField","getSeriesValue","value","getSeriesLabels","formatLabels","labels","key","isEmptySeries","series","serie","field","Expression","queries","query","data","error","warning","isAlertCondition","onSetCondition","onUpdateRefId","onRemoveExpression","onUpdateExpressionType","onChangeQuery","styles","getStyles","queryType","isLoading","d","hasResults","seriesCount","alertCondition","groupedByState","renderExpressionType","availableRefIds","q","Reduce","Resample","ClassicConditions","Threshold","selectedExpressionDescription","o","Header","newRefId","type","ExpressionResult","Stack","Spacer","PreviewSummary","PAGE_SIZE","pageItems","previousPage","nextPage","numberOfPages","pageStart","pageEnd","usePagination","emptyResults","isTimeSeriesResults","shouldShowPagination","index","TimeseriesRow","FrameRow","Button","firing","normal","isCondition","mutedText","refId","clearButton","editMode","setEditMode","editingRefId","AutoSizeInput","event","ExpressionStatusIndicator","IconButton","name","labelsRecord","hasLabels","showFiring","showNormal","title","AlertStateTag","valueField","timestamps","getTimestampFromIndex","getValueFromIndex","HoverCard","_","theme","elements","VizWrapper","thresholds","thresholdsType","isTimeSeriesData","statusMessage","thresholdsStyle","timeRange","width","useAlertQueriesStatus","useCombinedRulesMatching","ruleName","ruleSourceName","requestState","useCombinedRulesLoader","combinedRules","rules","namespace","group","rule","useCloudCombinedRulesMatching","filter","dsSettings","dsFeatures","isLoadingDsFeatures","useDataSourceFeatures","promRuleNs","isLoadingPromRules","promRuleNsError","fetchRulerRuleGroup","loading","rulerGroups","rulerConfig","nsGroups","nsGroup","rulerGroup","ns","rulesSourceName","identifier","dispatch","promRuleRequests","state","promRuleRequest","getRequestState","rulerRuleRequests","rulerRuleRequest","slice","useCombinedRule","ruleIdentifier","rulerRuleGroup","isLoadingRulerGroup","rulerRuleGroupError","fetchRulerRules","rulerRules","isLoadingRulerRules","rulerRulesError","combinedNamespaces","id","namespaces","grafanaDsFeatures","dataSourceName","isGrafanaDs","FALL_BACK_TIME_RANGE","getTimeRangeForExpression","referencedRefIds","getReferencedIds","from","to","getTimeRanges","model","getReferencedIdsForClassicCondition","getReferencedIdsForMath","getReferencedIdsForReduce","condition","referencedRefIdsKey","AlertingQueryRunner","backendSrv","dataSourceSrv","ReplaySubject","empty","initialState","queriesToExclude","dataSourceInstance","DataSourceWithBackend","queriesToRun","runRequest","dataPerQuery","nextResult","applyChange","previous","preProcessed","mapErrorToPanelData","requestIsRunning","initial","request","withLoadingIndicator","mapToPanelData","catchError","of","share","dataByQuery","getTimeRange","relative","map","response","results","result","status","frames","errors","lastResult","queryError","toDataQueryError","change"],"sourceRoot":""}