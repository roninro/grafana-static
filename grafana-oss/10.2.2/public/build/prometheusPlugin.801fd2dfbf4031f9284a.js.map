{"version":3,"file":"prometheusPlugin.801fd2dfbf4031f9284a.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/operationUtils.ts","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/types.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/components/PromCheatSheet.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/QueryPattern.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/QueryPatternsModal.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/state.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/NestedQuery.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/NestedQueryList.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryBuilder.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/QueryPreview.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryBuilderContainer.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/PromExemplarField.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/PromExploreExtraField.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryLegendEditor.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryBuilderOptions.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryEditorSelector.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/PromQueryEditorForAlerting.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/PromQueryEditorByApp.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/module.ts"],"sourcesContent":["import { LabelParamEditor } from '../../prometheus/querybuilder/components/LabelParamEditor';\nimport {\n  getAggregationExplainer,\n  getLastLabelRemovedHandler,\n  getOnLabelAddedHandler,\n  getPromAndLokiOperationDisplayName,\n} from '../../prometheus/querybuilder/shared/operationUtils';\nimport {\n  QueryBuilderOperation,\n  QueryBuilderOperationDef,\n  QueryBuilderOperationParamDef,\n  VisualQueryModeller,\n} from '../../prometheus/querybuilder/shared/types';\nimport { FUNCTIONS } from '../syntax';\n\nimport { LokiOperationId, LokiOperationOrder, LokiVisualQuery, LokiVisualQueryOperationCategory } from './types';\n\nexport function createRangeOperation(name: string, isRangeOperationWithGrouping?: boolean): QueryBuilderOperationDef {\n  const params = [getRangeVectorParamDef()];\n  const defaultParams = ['$__auto'];\n  let paramChangedHandler = undefined;\n\n  if (name === LokiOperationId.QuantileOverTime) {\n    defaultParams.push('0.95');\n    params.push({\n      name: 'Quantile',\n      type: 'number',\n    });\n  }\n\n  if (isRangeOperationWithGrouping) {\n    params.push({\n      name: 'By label',\n      type: 'string',\n      restParam: true,\n      optional: true,\n    });\n\n    paramChangedHandler = getOnLabelAddedHandler(`__${name}_by`);\n  }\n\n  return {\n    id: name,\n    name: getPromAndLokiOperationDisplayName(name),\n    params: params,\n    defaultParams,\n    alternativesKey: 'range function',\n    category: LokiVisualQueryOperationCategory.RangeFunctions,\n    orderRank: LokiOperationOrder.RangeVectorFunction,\n    renderer: operationWithRangeVectorRenderer,\n    addOperationHandler: addLokiOperation,\n    paramChangedHandler,\n    explainHandler: (op, def) => {\n      let opDocs = FUNCTIONS.find((x) => x.insertText === op.id)?.documentation ?? '';\n\n      if (op.params[0] === '$__auto') {\n        return `${opDocs} \\`$__auto\\` is a variable that will be replaced with the [value of step](https://grafana.com/docs/grafana/next/datasources/loki/query-editor/#options) for range queries and with the value of the selected time range (calculated to - from) for instant queries.`;\n      } else {\n        return `${opDocs} The [range vector](https://grafana.com/docs/loki/latest/logql/metric_queries/#range-vector-aggregation) is set to \\`${op.params[0]}\\`.`;\n      }\n    },\n  };\n}\n\nexport function createRangeOperationWithGrouping(name: string): QueryBuilderOperationDef[] {\n  const rangeOperation = createRangeOperation(name, true);\n  // Copy range operation params without the last param\n  const params = rangeOperation.params.slice(0, -1);\n  const operations: QueryBuilderOperationDef[] = [\n    rangeOperation,\n    {\n      id: `__${name}_by`,\n      name: `${getPromAndLokiOperationDisplayName(name)} by`,\n      params: [\n        ...params,\n        {\n          name: 'Label',\n          type: 'string',\n          restParam: true,\n          optional: true,\n          editor: LabelParamEditor,\n        },\n      ],\n      defaultParams: [...rangeOperation.defaultParams, ''],\n      alternativesKey: 'range function with grouping',\n      category: LokiVisualQueryOperationCategory.RangeFunctions,\n      renderer: getRangeAggregationWithGroupingRenderer(name, 'by'),\n      paramChangedHandler: getLastLabelRemovedHandler(name),\n      explainHandler: getAggregationExplainer(name, 'by'),\n      addOperationHandler: addLokiOperation,\n      hideFromList: true,\n    },\n    {\n      id: `__${name}_without`,\n      name: `${getPromAndLokiOperationDisplayName(name)} without`,\n      params: [\n        ...params,\n        {\n          name: 'Label',\n          type: 'string',\n          restParam: true,\n          optional: true,\n          editor: LabelParamEditor,\n        },\n      ],\n      defaultParams: [...rangeOperation.defaultParams, ''],\n      alternativesKey: 'range function with grouping',\n      category: LokiVisualQueryOperationCategory.RangeFunctions,\n      renderer: getRangeAggregationWithGroupingRenderer(name, 'without'),\n      paramChangedHandler: getLastLabelRemovedHandler(name),\n      explainHandler: getAggregationExplainer(name, 'without'),\n      addOperationHandler: addLokiOperation,\n      hideFromList: true,\n    },\n  ];\n\n  return operations;\n}\n\nexport function getRangeAggregationWithGroupingRenderer(aggregation: string, grouping: 'by' | 'without') {\n  return function aggregationRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n    const restParamIndex = def.params.findIndex((param) => param.restParam);\n    const params = model.params.slice(0, restParamIndex);\n    const restParams = model.params.slice(restParamIndex);\n\n    if (params.length === 2 && aggregation === LokiOperationId.QuantileOverTime) {\n      return `${aggregation}(${params[1]}, ${innerExpr} [${params[0]}]) ${grouping} (${restParams.join(', ')})`;\n    }\n\n    return `${aggregation}(${innerExpr} [${params[0]}]) ${grouping} (${restParams.join(', ')})`;\n  };\n}\n\nfunction operationWithRangeVectorRenderer(\n  model: QueryBuilderOperation,\n  def: QueryBuilderOperationDef,\n  innerExpr: string\n) {\n  const params = model.params ?? [];\n  const rangeVector = params[0] ?? '$__auto';\n  // QuantileOverTime is only range vector with more than one param\n  if (params.length === 2 && model.id === LokiOperationId.QuantileOverTime) {\n    const quantile = params[1];\n    return `${model.id}(${quantile}, ${innerExpr} [${rangeVector}])`;\n  }\n\n  return `${model.id}(${innerExpr} [${params[0] ?? '$__auto'}])`;\n}\n\nexport function labelFilterRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n  const integerOperators = ['<', '<=', '>', '>='];\n\n  if (integerOperators.includes(String(model.params[1]))) {\n    return `${innerExpr} | ${model.params[0]} ${model.params[1]} ${model.params[2]}`;\n  }\n\n  return `${innerExpr} | ${model.params[0]} ${model.params[1]} \\`${model.params[2]}\\``;\n}\n\nexport function isConflictingFilter(\n  operation: QueryBuilderOperation,\n  queryOperations: QueryBuilderOperation[]\n): boolean {\n  const operationIsNegative = operation.params[1].toString().startsWith('!');\n\n  const candidates = queryOperations.filter(\n    (queryOperation) =>\n      queryOperation.id === LokiOperationId.LabelFilter &&\n      queryOperation.params[0] === operation.params[0] &&\n      queryOperation.params[2] === operation.params[2]\n  );\n\n  const conflict = candidates.some((candidate) => {\n    if (operationIsNegative && candidate.params[1].toString().startsWith('!') === false) {\n      return true;\n    }\n    if (operationIsNegative === false && candidate.params[1].toString().startsWith('!')) {\n      return true;\n    }\n    return false;\n  });\n\n  return conflict;\n}\n\nexport function pipelineRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n  switch (model.id) {\n    case LokiOperationId.Logfmt:\n      const [strict = false, keepEmpty = false, ...labels] = model.params;\n      return `${innerExpr} | logfmt${strict ? ' --strict' : ''}${keepEmpty ? ' --keep-empty' : ''} ${labels.join(\n        ', '\n      )}`.trim();\n    default:\n      return `${innerExpr} | ${model.id}`;\n  }\n}\n\nfunction isRangeVectorFunction(def: QueryBuilderOperationDef) {\n  return def.category === LokiVisualQueryOperationCategory.RangeFunctions;\n}\n\nfunction getIndexOfOrLast(\n  operations: QueryBuilderOperation[],\n  queryModeller: VisualQueryModeller,\n  condition: (def: QueryBuilderOperationDef) => boolean\n) {\n  const index = operations.findIndex((x) => {\n    const opDef = queryModeller.getOperationDef(x.id);\n    if (!opDef) {\n      return false;\n    }\n    return condition(opDef);\n  });\n\n  return index === -1 ? operations.length : index;\n}\n\nexport function addLokiOperation(\n  def: QueryBuilderOperationDef,\n  query: LokiVisualQuery,\n  modeller: VisualQueryModeller\n): LokiVisualQuery {\n  const newOperation: QueryBuilderOperation = {\n    id: def.id,\n    params: def.defaultParams,\n  };\n\n  const operations = [...query.operations];\n\n  const existingRangeVectorFunction = operations.find((x) => {\n    const opDef = modeller.getOperationDef(x.id);\n    if (!opDef) {\n      return false;\n    }\n    return isRangeVectorFunction(opDef);\n  });\n\n  switch (def.category) {\n    case LokiVisualQueryOperationCategory.Aggregations:\n    case LokiVisualQueryOperationCategory.Functions:\n      // If we are adding a function but we have not range vector function yet add one\n      if (!existingRangeVectorFunction) {\n        const placeToInsert = getIndexOfOrLast(\n          operations,\n          modeller,\n          (def) => def.category === LokiVisualQueryOperationCategory.Functions\n        );\n        operations.splice(placeToInsert, 0, { id: LokiOperationId.Rate, params: ['$__auto'] });\n      }\n      operations.push(newOperation);\n      break;\n    case LokiVisualQueryOperationCategory.RangeFunctions:\n      // If adding a range function and range function is already added replace it\n      if (existingRangeVectorFunction) {\n        const index = operations.indexOf(existingRangeVectorFunction);\n        operations[index] = newOperation;\n        break;\n      }\n\n    // Add range functions after any formats, line filters and label filters\n    default:\n      const placeToInsert = getIndexOfOrLast(\n        operations,\n        modeller,\n        (x) => (def.orderRank ?? 100) < (x.orderRank ?? 100)\n      );\n      operations.splice(placeToInsert, 0, newOperation);\n      break;\n  }\n\n  return {\n    ...query,\n    operations,\n  };\n}\n\nexport function addNestedQueryHandler(def: QueryBuilderOperationDef, query: LokiVisualQuery): LokiVisualQuery {\n  return {\n    ...query,\n    binaryQueries: [\n      ...(query.binaryQueries ?? []),\n      {\n        operator: '/',\n        query,\n      },\n    ],\n  };\n}\n\nexport function getLineFilterRenderer(operation: string, caseInsensitive?: boolean) {\n  return function lineFilterRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n    if (caseInsensitive) {\n      return `${innerExpr} ${operation} \\`(?i)${model.params[0]}\\``;\n    }\n    return `${innerExpr} ${operation} \\`${model.params[0]}\\``;\n  };\n}\n\nfunction getRangeVectorParamDef(): QueryBuilderOperationParamDef {\n  return {\n    name: 'Range',\n    type: 'string',\n    options: ['$__auto', '1m', '5m', '10m', '1h', '24h'],\n  };\n}\n","import { VisualQueryBinary } from '../../prometheus/querybuilder/shared/LokiAndPromQueryModellerBase';\nimport { QueryBuilderLabelFilter, QueryBuilderOperation } from '../../prometheus/querybuilder/shared/types';\n\n/**\n * Visual query model\n */\nexport interface LokiVisualQuery {\n  labels: QueryBuilderLabelFilter[];\n  operations: QueryBuilderOperation[];\n  binaryQueries?: LokiVisualQueryBinary[];\n}\n\nexport type LokiVisualQueryBinary = VisualQueryBinary<LokiVisualQuery>;\nexport enum LokiQueryPatternType {\n  Log = 'log',\n  Metric = 'metric',\n}\n\nexport interface LokiQueryPattern {\n  name: string;\n  operations: QueryBuilderOperation[];\n  type: LokiQueryPatternType;\n}\n\nexport enum LokiVisualQueryOperationCategory {\n  Aggregations = 'Aggregations',\n  RangeFunctions = 'Range functions',\n  Functions = 'Functions',\n  Formats = 'Formats',\n  LineFilters = 'Line filters',\n  LabelFilters = 'Label filters',\n  BinaryOps = 'Binary operations',\n}\n\nexport enum LokiOperationId {\n  Json = 'json',\n  Logfmt = 'logfmt',\n  Regexp = 'regexp',\n  Pattern = 'pattern',\n  Unpack = 'unpack',\n  LineFormat = 'line_format',\n  LabelFormat = 'label_format',\n  Decolorize = 'decolorize',\n  Drop = 'drop',\n  Keep = 'keep',\n  Rate = 'rate',\n  RateCounter = 'rate_counter',\n  CountOverTime = 'count_over_time',\n  SumOverTime = 'sum_over_time',\n  AvgOverTime = 'avg_over_time',\n  MaxOverTime = 'max_over_time',\n  MinOverTime = 'min_over_time',\n  FirstOverTime = 'first_over_time',\n  LastOverTime = 'last_over_time',\n  StdvarOverTime = 'stdvar_over_time',\n  StddevOverTime = 'stddev_over_time',\n  QuantileOverTime = 'quantile_over_time',\n  BytesRate = 'bytes_rate',\n  BytesOverTime = 'bytes_over_time',\n  AbsentOverTime = 'absent_over_time',\n  Sum = 'sum',\n  Avg = 'avg',\n  Min = 'min',\n  Max = 'max',\n  Stddev = 'stddev',\n  Stdvar = 'stdvar',\n  Count = 'count',\n  TopK = 'topk',\n  BottomK = 'bottomk',\n  LineContains = '__line_contains',\n  LineContainsNot = '__line_contains_not',\n  LineContainsCaseInsensitive = '__line_contains_case_insensitive',\n  LineContainsNotCaseInsensitive = '__line_contains_not_case_insensitive',\n  LineMatchesRegex = '__line_matches_regex',\n  LineMatchesRegexNot = '__line_matches_regex_not',\n  LineFilterIpMatches = '__line_filter_ip_matches',\n  LabelFilter = '__label_filter',\n  LabelFilterNoErrors = '__label_filter_no_errors',\n  LabelFilterIpMatches = '__label_filter_ip_marches',\n  Unwrap = 'unwrap',\n  SumBy = '__sum_by',\n  SumWithout = '__sum_without',\n  // Binary ops\n  Addition = '__addition',\n  Subtraction = '__subtraction',\n  MultiplyBy = '__multiply_by',\n  DivideBy = '__divide_by',\n  Modulo = '__modulo',\n  Exponent = '__exponent',\n  NestedQuery = '__nested_query',\n  EqualTo = '__equal_to',\n  NotEqualTo = '__not_equal_to',\n  GreaterThan = '__greater_than',\n  LessThan = '__less_than',\n  GreaterOrEqual = '__greater_or_equal',\n  LessOrEqual = '__less_or_equal',\n}\n\nexport enum LokiOperationOrder {\n  LineFilters = 1,\n  Parsers = 2,\n  PipeOperations = 3,\n  // Unwrap is a special case, as it is usually the last operation, so the order is after pipeOperations\n  Unwrap = 4,\n  NoErrors = 5,\n  RangeVectorFunction = 5,\n  Last = 6,\n}\n\nexport const lokiOperators = {\n  equals: { label: '=', value: '=', description: 'Equals', isMultiValue: false },\n  doesNotEqual: { label: '!=', value: '!=', description: 'Does not equal', isMultiValue: false },\n  matchesRegex: { label: '=~', value: '=~', description: 'Matches regex', isMultiValue: true },\n  doesNotMatchRegex: { label: '!~', value: '!~', description: 'Does not match regex', isMultiValue: true },\n  greaterThan: { label: '>', value: '>', description: 'Greater than', isMultiValue: false },\n  greaterThanOrEqual: { label: '>=', value: '>=', description: 'Greater than or equal to', isMultiValue: false },\n  lessThan: { label: '<', value: '<', description: 'Less than', isMultiValue: false },\n  lessThanOrEqual: { label: '<=', value: '<=', description: 'Less than or equal to', isMultiValue: false },\n  contains: { label: '|=', value: '|=', description: 'Contains', isMultiValue: false },\n  doesNotContain: { label: '!=', value: '!=', description: 'Does not contain', isMultiValue: false },\n};\n","import React from 'react';\n\nimport { QueryEditorHelpProps } from '@grafana/data';\n\nimport { PromQuery } from '../types';\n\nconst CHEAT_SHEET_ITEMS = [\n  {\n    title: 'Request Rate',\n    expression: 'rate(http_request_total[5m])',\n    label:\n      'Given an HTTP request counter, this query calculates the per-second average request rate over the last 5 minutes.',\n  },\n  {\n    title: '95th Percentile of Request Latencies',\n    expression: 'histogram_quantile(0.95, sum(rate(prometheus_http_request_duration_seconds_bucket[5m])) by (le))',\n    label: 'Calculates the 95th percentile of HTTP request rate over 5 minute windows.',\n  },\n  {\n    title: 'Alerts Firing',\n    expression: 'sort_desc(sum(sum_over_time(ALERTS{alertstate=\"firing\"}[24h])) by (alertname))',\n    label: 'Sums up the alerts that have been firing over the last 24 hours.',\n  },\n  {\n    title: 'Step',\n    label:\n      'Defines the graph resolution using a duration format (15s, 1m, 3h, ...). Small steps create high-resolution graphs but can be slow over larger time ranges. Using a longer step lowers the resolution and smooths the graph by producing fewer datapoints. If no step is given the resolution is calculated automatically.',\n  },\n];\n\nconst PromCheatSheet = (props: QueryEditorHelpProps<PromQuery>) => (\n  <div>\n    <h2>PromQL Cheat Sheet</h2>\n    {CHEAT_SHEET_ITEMS.map((item, index) => (\n      <div className=\"cheat-sheet-item\" key={index}>\n        <div className=\"cheat-sheet-item__title\">{item.title}</div>\n        {item.expression ? (\n          <button\n            type=\"button\"\n            className=\"cheat-sheet-item__example\"\n            onClick={(e) => props.onClickExample({ refId: 'A', expr: item.expression })}\n          >\n            <code>{item.expression}</code>\n          </button>\n        ) : null}\n        <div className=\"cheat-sheet-item__label\">{item.label}</div>\n      </div>\n    ))}\n  </div>\n);\n\nexport default PromCheatSheet;\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Card, useStyles2 } from '@grafana/ui';\nimport { RawQuery } from 'app/plugins/datasource/prometheus/querybuilder/shared/RawQuery';\n\nimport promqlGrammar from '../promql';\n\nimport { promQueryModeller } from './PromQueryModeller';\nimport { PromQueryPattern } from './types';\n\ntype Props = {\n  pattern: PromQueryPattern;\n  hasNewQueryOption: boolean;\n  hasPreviousQuery: boolean | string;\n  selectedPatternName: string | null;\n  setSelectedPatternName: (name: string | null) => void;\n  onPatternSelect: (pattern: PromQueryPattern, selectAsNewQuery?: boolean) => void;\n};\n\nexport const QueryPattern = (props: Props) => {\n  const { pattern, onPatternSelect, hasNewQueryOption, hasPreviousQuery, selectedPatternName, setSelectedPatternName } =\n    props;\n\n  const styles = useStyles2(getStyles);\n  const lang = { grammar: promqlGrammar, name: 'promql' };\n\n  return (\n    <Card className={styles.card}>\n      <Card.Heading>{pattern.name}</Card.Heading>\n      <div className={styles.rawQueryContainer}>\n        <RawQuery\n          aria-label={`${pattern.name} raw query`}\n          query={promQueryModeller.renderQuery({\n            labels: [],\n            operations: pattern.operations,\n            binaryQueries: pattern.binaryQueries,\n          })}\n          lang={lang}\n          className={styles.rawQuery}\n        />\n      </div>\n      <Card.Actions>\n        {selectedPatternName !== pattern.name ? (\n          <Button\n            size=\"sm\"\n            aria-label=\"use this query button\"\n            onClick={() => {\n              if (hasPreviousQuery) {\n                // If user has previous query, we need to confirm that they want to apply this query pattern\n                setSelectedPatternName(pattern.name);\n              } else {\n                onPatternSelect(pattern);\n              }\n            }}\n          >\n            Use this query\n          </Button>\n        ) : (\n          <>\n            <div className={styles.spacing}>\n              {`If you would like to use this query, ${\n                hasNewQueryOption\n                  ? 'you can either apply this query pattern or create a new query'\n                  : 'this query pattern will be applied to your current query'\n              }.`}\n            </div>\n            <Button size=\"sm\" aria-label=\"back button\" fill=\"outline\" onClick={() => setSelectedPatternName(null)}>\n              Back\n            </Button>\n            <Button\n              size=\"sm\"\n              aria-label=\"apply query starter button\"\n              onClick={() => {\n                onPatternSelect(pattern);\n              }}\n            >\n              Apply query\n            </Button>\n            {hasNewQueryOption && (\n              <Button\n                size=\"sm\"\n                aria-label=\"create new query button\"\n                onClick={() => {\n                  onPatternSelect(pattern, true);\n                }}\n              >\n                Create new query\n              </Button>\n            )}\n          </>\n        )}\n      </Card.Actions>\n    </Card>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    card: css`\n      width: 49.5%;\n      display: flex;\n      flex-direction: column;\n    `,\n    rawQueryContainer: css`\n      flex-grow: 1;\n    `,\n    rawQuery: css`\n      background-color: ${theme.colors.background.primary};\n      padding: ${theme.spacing(1)};\n      margin-top: ${theme.spacing(1)};\n    `,\n    spacing: css`\n      margin-bottom: ${theme.spacing(1)};\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport { capitalize } from 'lodash';\nimport React, { useMemo, useState } from 'react';\n\nimport { CoreApp, DataQuery, GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, Collapse, Modal, useStyles2 } from '@grafana/ui';\nimport { getNextRefIdChar } from 'app/core/utils/query';\n\nimport { PromQuery } from '../types';\n\nimport { promQueryModeller } from './PromQueryModeller';\nimport { QueryPattern } from './QueryPattern';\nimport { buildVisualQueryFromString } from './parsing';\nimport { PromQueryPattern, PromQueryPatternType } from './types';\n\ntype Props = {\n  isOpen: boolean;\n  query: PromQuery;\n  queries: DataQuery[] | undefined;\n  app?: CoreApp;\n  onClose: () => void;\n  onChange: (query: PromQuery) => void;\n  onAddQuery?: (query: PromQuery) => void;\n};\n\nexport const QueryPatternsModal = (props: Props) => {\n  const { isOpen, onClose, onChange, onAddQuery, query, queries, app } = props;\n  const [openTabs, setOpenTabs] = useState<string[]>([]);\n  const [selectedPatternName, setSelectedPatternName] = useState<string | null>(null);\n\n  const styles = useStyles2(getStyles);\n  const hasNewQueryOption = !!onAddQuery;\n  const hasPreviousQuery = useMemo(() => {\n    const visualQuery = buildVisualQueryFromString(query.expr ?? '');\n    // has anything entered in the query, metric, labels, operations, or binary queries\n    const hasOperations = visualQuery.query.operations.length > 0,\n      hasMetric = visualQuery.query.metric,\n      hasLabels = visualQuery.query.labels.length > 0,\n      hasBinaryQueries = visualQuery.query.binaryQueries ? visualQuery.query.binaryQueries.length > 0 : false;\n\n    return hasOperations || hasMetric || hasLabels || hasBinaryQueries;\n  }, [query.expr]);\n\n  const onPatternSelect = (pattern: PromQueryPattern, selectAsNewQuery = false) => {\n    const visualQuery = buildVisualQueryFromString(selectAsNewQuery ? '' : query.expr);\n    reportInteraction('grafana_prom_kickstart_your_query_selected', {\n      app: app ?? '',\n      editorMode: query.editorMode,\n      selectedPattern: pattern.name,\n      preSelectedOperationsCount: visualQuery.query.operations.length,\n      preSelectedLabelsCount: visualQuery.query.labels.length,\n      createNewQuery: hasNewQueryOption && selectAsNewQuery,\n    });\n\n    visualQuery.query.operations = pattern.operations;\n    visualQuery.query.binaryQueries = pattern.binaryQueries;\n    if (hasNewQueryOption && selectAsNewQuery) {\n      onAddQuery({\n        ...query,\n        refId: getNextRefIdChar(queries ?? [query]),\n        expr: promQueryModeller.renderQuery(visualQuery.query),\n      });\n    } else {\n      onChange({\n        ...query,\n        expr: promQueryModeller.renderQuery(visualQuery.query),\n      });\n    }\n    setSelectedPatternName(null);\n    onClose();\n  };\n\n  return (\n    <Modal aria-label=\"Kick start your query modal\" isOpen={isOpen} title=\"Kick start your query\" onDismiss={onClose}>\n      <div className={styles.spacing}>\n        Kick start your query by selecting one of these queries. You can then continue to complete your query.\n      </div>\n      {Object.values(PromQueryPatternType).map((patternType) => {\n        return (\n          <Collapse\n            aria-label={`open and close ${patternType} query starter card`}\n            key={patternType}\n            label={`${capitalize(patternType)} query starters`}\n            isOpen={openTabs.includes(patternType)}\n            collapsible={true}\n            onToggle={() =>\n              setOpenTabs((tabs) =>\n                // close tab if it's already open, otherwise open it\n                tabs.includes(patternType) ? tabs.filter((t) => t !== patternType) : [...tabs, patternType]\n              )\n            }\n          >\n            <div className={styles.cardsContainer}>\n              {promQueryModeller\n                .getQueryPatterns()\n                .filter((pattern) => pattern.type === patternType)\n                .map((pattern) => (\n                  <QueryPattern\n                    key={pattern.name}\n                    pattern={pattern}\n                    hasNewQueryOption={hasNewQueryOption}\n                    hasPreviousQuery={hasPreviousQuery}\n                    onPatternSelect={onPatternSelect}\n                    selectedPatternName={selectedPatternName}\n                    setSelectedPatternName={setSelectedPatternName}\n                  />\n                ))}\n            </div>\n          </Collapse>\n        );\n      })}\n      <Button aria-label=\"close kick start your query modal\" variant=\"secondary\" onClick={onClose}>\n        Close\n      </Button>\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    cardsContainer: css`\n      display: flex;\n      flex-direction: row;\n      flex-wrap: wrap;\n      justify-content: space-between;\n    `,\n    spacing: css`\n      margin-bottom: ${theme.spacing(1)};\n    `,\n  };\n};\n","import { CoreApp } from '@grafana/data';\nimport store from 'app/core/store';\n\nimport { LegendFormatMode, PromQuery } from '../types';\n\nimport { QueryEditorMode } from './shared/types';\n\nconst queryEditorModeDefaultLocalStorageKey = 'PrometheusQueryEditorModeDefault';\n\nexport function changeEditorMode(query: PromQuery, editorMode: QueryEditorMode, onChange: (query: PromQuery) => void) {\n  // If empty query store new mode as default\n  if (query.expr === '') {\n    store.set(queryEditorModeDefaultLocalStorageKey, editorMode);\n  }\n\n  onChange({ ...query, editorMode });\n}\n\nfunction getDefaultEditorMode(expr: string, defaultEditor: QueryEditorMode = QueryEditorMode.Builder): QueryEditorMode {\n  // If we already have an expression default to code view\n  if (expr != null && expr !== '') {\n    return QueryEditorMode.Code;\n  }\n\n  const value: QueryEditorMode = store.get(queryEditorModeDefaultLocalStorageKey);\n  switch (value) {\n    case QueryEditorMode.Builder:\n    case QueryEditorMode.Code:\n      return value;\n    default:\n      return defaultEditor;\n  }\n}\n\n/**\n * Returns query with defaults, and boolean true/false depending on change was required\n */\nexport function getQueryWithDefaults(\n  query: PromQuery & { expr?: string },\n  app: CoreApp | undefined,\n  defaultEditor?: QueryEditorMode\n): PromQuery {\n  let result = query;\n\n  if (!query.editorMode) {\n    result = { ...query, editorMode: getDefaultEditorMode(query.expr, defaultEditor) };\n  }\n\n  // default query expr is now empty string, set in getDefaultQuery\n  // While expr is required in the types, it is not always defined at runtime, so we need to check for undefined and default to an empty string to prevent runtime errors\n  if (!query.expr) {\n    result = { ...result, expr: '', legendFormat: LegendFormatMode.Auto };\n  }\n\n  if (query.range == null && query.instant == null) {\n    // Default to range query\n    result = { ...result, range: true };\n\n    // In explore we default to both instant & range\n    if (app === CoreApp.Explore) {\n      result.instant = true;\n    }\n  }\n\n  // Unified Alerting does not support \"both\" for query type – fall back to \"range\".\n  const isBothInstantAndRange = query.instant && query.range;\n  if (app === CoreApp.UnifiedAlerting && isBothInstantAndRange) {\n    result = { ...result, instant: false, range: true };\n  }\n\n  return result;\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, toOption } from '@grafana/data';\nimport { EditorRows, FlexItem } from '@grafana/experimental';\nimport { AutoSizeInput, IconButton, Select, useStyles2 } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { binaryScalarDefs } from '../binaryScalarOperations';\nimport { PromVisualQueryBinary } from '../types';\n\nimport { PromQueryBuilder } from './PromQueryBuilder';\n\nexport interface Props {\n  nestedQuery: PromVisualQueryBinary;\n  datasource: PrometheusDatasource;\n  index: number;\n  onChange: (index: number, update: PromVisualQueryBinary) => void;\n  onRemove: (index: number) => void;\n  onRunQuery: () => void;\n  showExplain: boolean;\n}\n\nexport const NestedQuery = React.memo<Props>((props) => {\n  const { nestedQuery, index, datasource, onChange, onRemove, onRunQuery, showExplain } = props;\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.card}>\n      <div className={styles.header}>\n        <div className={styles.name}>Operator</div>\n        <Select\n          width=\"auto\"\n          options={operators}\n          value={toOption(nestedQuery.operator)}\n          onChange={(value) => {\n            onChange(index, {\n              ...nestedQuery,\n              operator: value.value!,\n            });\n          }}\n        />\n        <div className={styles.name}>Vector matches</div>\n        <div className={styles.vectorMatchWrapper}>\n          <Select<PromVisualQueryBinary['vectorMatchesType']>\n            width=\"auto\"\n            value={nestedQuery.vectorMatchesType || 'on'}\n            allowCustomValue\n            options={[\n              { value: 'on', label: 'on' },\n              { value: 'ignoring', label: 'ignoring' },\n            ]}\n            onChange={(val) => {\n              onChange(index, {\n                ...nestedQuery,\n                vectorMatchesType: val.value,\n              });\n            }}\n          />\n          <AutoSizeInput\n            className={styles.vectorMatchInput}\n            minWidth={20}\n            defaultValue={nestedQuery.vectorMatches}\n            onCommitChange={(evt) => {\n              onChange(index, {\n                ...nestedQuery,\n                vectorMatches: evt.currentTarget.value,\n                vectorMatchesType: nestedQuery.vectorMatchesType || 'on',\n              });\n            }}\n          />\n        </div>\n        <FlexItem grow={1} />\n        <IconButton name=\"times\" size=\"sm\" onClick={() => onRemove(index)} tooltip=\"Remove match\" />\n      </div>\n      <div className={styles.body}>\n        <EditorRows>\n          <PromQueryBuilder\n            showExplain={showExplain}\n            query={nestedQuery.query}\n            datasource={datasource}\n            onRunQuery={onRunQuery}\n            onChange={(update) => {\n              onChange(index, { ...nestedQuery, query: update });\n            }}\n          />\n        </EditorRows>\n      </div>\n    </div>\n  );\n});\n\nconst operators = binaryScalarDefs.map((def) => ({ label: def.sign, value: def.sign }));\n\nNestedQuery.displayName = 'NestedQuery';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    card: css({\n      label: 'card',\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(0.5),\n    }),\n    header: css({\n      label: 'header',\n      padding: theme.spacing(0.5, 0.5, 0.5, 1),\n      gap: theme.spacing(1),\n      display: 'flex',\n      alignItems: 'center',\n    }),\n    name: css({\n      label: 'name',\n      whiteSpace: 'nowrap',\n    }),\n    body: css({\n      label: 'body',\n      paddingLeft: theme.spacing(2),\n    }),\n    vectorMatchInput: css({\n      label: 'vectorMatchInput',\n      marginLeft: -1,\n    }),\n    vectorMatchWrapper: css({\n      label: 'vectorMatchWrapper',\n      display: 'flex',\n    }),\n  };\n};\n","import React from 'react';\n\nimport { Stack } from '@grafana/experimental';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { PromVisualQuery, PromVisualQueryBinary } from '../types';\n\nimport { NestedQuery } from './NestedQuery';\n\nexport interface Props {\n  query: PromVisualQuery;\n  datasource: PrometheusDatasource;\n  onChange: (query: PromVisualQuery) => void;\n  onRunQuery: () => void;\n  showExplain: boolean;\n}\n\nexport function NestedQueryList(props: Props) {\n  const { query, datasource, onChange, onRunQuery, showExplain } = props;\n  const nestedQueries = query.binaryQueries ?? [];\n\n  const onNestedQueryUpdate = (index: number, update: PromVisualQueryBinary) => {\n    const updatedList = [...nestedQueries];\n    updatedList.splice(index, 1, update);\n    onChange({ ...query, binaryQueries: updatedList });\n  };\n\n  const onRemove = (index: number) => {\n    const updatedList = [...nestedQueries.slice(0, index), ...nestedQueries.slice(index + 1)];\n    onChange({ ...query, binaryQueries: updatedList });\n  };\n\n  return (\n    <Stack direction=\"column\" gap={1}>\n      {nestedQueries.map((nestedQuery, index) => (\n        <NestedQuery\n          key={index.toString()}\n          nestedQuery={nestedQuery}\n          index={index}\n          onChange={onNestedQueryUpdate}\n          datasource={datasource}\n          onRemove={onRemove}\n          onRunQuery={onRunQuery}\n          showExplain={showExplain}\n        />\n      ))}\n    </Stack>\n  );\n}\n","import React, { useState } from 'react';\n\nimport { DataSourceApi, PanelData } from '@grafana/data';\nimport { EditorRow } from '@grafana/experimental';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport promqlGrammar from '../../promql';\nimport { promQueryModeller } from '../PromQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { OperationExplainedBox } from '../shared/OperationExplainedBox';\nimport { OperationList } from '../shared/OperationList';\nimport { OperationListExplained } from '../shared/OperationListExplained';\nimport { OperationsEditorRow } from '../shared/OperationsEditorRow';\nimport { QueryBuilderHints } from '../shared/QueryBuilderHints';\nimport { RawQuery } from '../shared/RawQuery';\nimport { QueryBuilderOperation } from '../shared/types';\nimport { PromVisualQuery } from '../types';\n\nimport { MetricsLabelsSection } from './MetricsLabelsSection';\nimport { NestedQueryList } from './NestedQueryList';\nimport { EXPLAIN_LABEL_FILTER_CONTENT } from './PromQueryBuilderExplained';\n\nexport interface Props {\n  query: PromVisualQuery;\n  datasource: PrometheusDatasource;\n  onChange: (update: PromVisualQuery) => void;\n  onRunQuery: () => void;\n  data?: PanelData;\n  showExplain: boolean;\n}\n\nexport const PromQueryBuilder = React.memo<Props>((props) => {\n  const { datasource, query, onChange, onRunQuery, data, showExplain } = props;\n  const [highlightedOp, setHighlightedOp] = useState<QueryBuilderOperation | undefined>();\n\n  const lang = { grammar: promqlGrammar, name: 'promql' };\n\n  const initHints = datasource.getInitHints();\n\n  return (\n    <>\n      <EditorRow>\n        <MetricsLabelsSection query={query} onChange={onChange} datasource={datasource} />\n      </EditorRow>\n      {initHints.length ? (\n        <div className=\"query-row-break\">\n          <div className=\"prom-query-field-info text-warning\">\n            {initHints[0].label}{' '}\n            {initHints[0].fix ? (\n              <button type=\"button\" className={'text-warning'}>\n                {initHints[0].fix.label}\n              </button>\n            ) : null}\n          </div>\n        </div>\n      ) : null}\n      {showExplain && (\n        <OperationExplainedBox\n          stepNumber={1}\n          title={<RawQuery query={`${query.metric} ${promQueryModeller.renderLabels(query.labels)}`} lang={lang} />}\n        >\n          {EXPLAIN_LABEL_FILTER_CONTENT}\n        </OperationExplainedBox>\n      )}\n      <OperationsEditorRow>\n        <OperationList<PromVisualQuery>\n          queryModeller={promQueryModeller}\n          // eslint-ignore\n          datasource={datasource as DataSourceApi}\n          query={query}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          highlightedOp={highlightedOp}\n        />\n        <QueryBuilderHints<PromVisualQuery>\n          datasource={datasource}\n          query={query}\n          onChange={onChange}\n          data={data}\n          queryModeller={promQueryModeller}\n          buildVisualQueryFromString={buildVisualQueryFromString}\n        />\n      </OperationsEditorRow>\n      {showExplain && (\n        <OperationListExplained<PromVisualQuery>\n          lang={lang}\n          query={query}\n          stepNumber={2}\n          queryModeller={promQueryModeller}\n          onMouseEnter={(op) => setHighlightedOp(op)}\n          onMouseLeave={() => setHighlightedOp(undefined)}\n        />\n      )}\n      {query.binaryQueries && query.binaryQueries.length > 0 && (\n        <NestedQueryList\n          query={query}\n          datasource={datasource}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          showExplain={showExplain}\n        />\n      )}\n    </>\n  );\n});\n\nPromQueryBuilder.displayName = 'PromQueryBuilder';\n","import React from 'react';\n\nimport { EditorFieldGroup, EditorRow } from '@grafana/experimental';\n\nimport promqlGrammar from '../../promql';\nimport { RawQuery } from '../shared/RawQuery';\n\nexport interface Props {\n  query: string;\n}\n\nexport function QueryPreview({ query }: Props) {\n  if (!query) {\n    return null;\n  }\n\n  return (\n    <EditorRow>\n      <EditorFieldGroup>\n        <RawQuery query={query} lang={{ grammar: promqlGrammar, name: 'promql' }} />\n      </EditorFieldGroup>\n    </EditorRow>\n  );\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport React, { useEffect, useReducer } from 'react';\n\nimport { PanelData } from '@grafana/data';\nimport { config } from '@grafana/runtime';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { PromQuery } from '../../types';\nimport { promQueryModeller } from '../PromQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { PromVisualQuery } from '../types';\n\nimport { PromQueryBuilder } from './PromQueryBuilder';\nimport { QueryPreview } from './QueryPreview';\nimport { getSettings, MetricsModalSettings } from './metrics-modal/state/state';\n\nexport interface Props {\n  query: PromQuery;\n  datasource: PrometheusDatasource;\n  onChange: (update: PromQuery) => void;\n  onRunQuery: () => void;\n  data?: PanelData;\n  showExplain: boolean;\n}\n\nexport interface State {\n  visQuery?: PromVisualQuery;\n  expr: string;\n}\n\nconst prometheusMetricEncyclopedia = config.featureToggles.prometheusMetricEncyclopedia;\n/**\n * This component is here just to contain the translation logic between string query and the visual query builder model.\n */\nexport function PromQueryBuilderContainer(props: Props) {\n  const { query, onChange, onRunQuery, datasource, data, showExplain } = props;\n  const [state, dispatch] = useReducer(stateSlice.reducer, { expr: query.expr });\n  // Only rebuild visual query if expr changes from outside\n  useEffect(() => {\n    dispatch(exprChanged(query.expr));\n\n    if (prometheusMetricEncyclopedia) {\n      dispatch(\n        setMetricsModalSettings({\n          useBackend: query.useBackend ?? false,\n          disableTextWrap: query.disableTextWrap ?? false,\n          fullMetaSearch: query.fullMetaSearch ?? false,\n          includeNullMetadata: query.includeNullMetadata ?? true,\n        })\n      );\n    }\n  }, [query]);\n\n  const onVisQueryChange = (visQuery: PromVisualQuery) => {\n    const expr = promQueryModeller.renderQuery(visQuery);\n    dispatch(visualQueryChange({ visQuery, expr }));\n\n    if (prometheusMetricEncyclopedia) {\n      const metricsModalSettings = getSettings(visQuery);\n      onChange({ ...props.query, expr: expr, ...metricsModalSettings });\n    } else {\n      onChange({ ...props.query, expr: expr });\n    }\n  };\n\n  if (!state.visQuery) {\n    return null;\n  }\n\n  return (\n    <>\n      <PromQueryBuilder\n        query={state.visQuery}\n        datasource={datasource}\n        onChange={onVisQueryChange}\n        onRunQuery={onRunQuery}\n        data={data}\n        showExplain={showExplain}\n      />\n      {<QueryPreview query={query.expr} />}\n    </>\n  );\n}\n\nconst initialState: State = {\n  expr: '',\n};\n\nconst stateSlice = createSlice({\n  name: 'prom-builder-container',\n  initialState,\n  reducers: {\n    visualQueryChange: (state, action: PayloadAction<{ visQuery: PromVisualQuery; expr: string }>) => {\n      state.expr = action.payload.expr;\n      state.visQuery = action.payload.visQuery;\n    },\n    exprChanged: (state, action: PayloadAction<string>) => {\n      if (!state.visQuery || state.expr !== action.payload) {\n        state.expr = action.payload;\n        const parseResult = buildVisualQueryFromString(action.payload ?? '');\n\n        state.visQuery = parseResult.query;\n      }\n    },\n    setMetricsModalSettings: (state, action: PayloadAction<MetricsModalSettings>) => {\n      if (state.visQuery && prometheusMetricEncyclopedia) {\n        state.visQuery.useBackend = action.payload.useBackend;\n        state.visQuery.disableTextWrap = action.payload.disableTextWrap;\n        state.visQuery.fullMetaSearch = action.payload.fullMetaSearch;\n        state.visQuery.includeNullMetadata = action.payload.includeNullMetadata;\n      }\n    },\n  },\n});\n\nconst { visualQueryChange, exprChanged, setMetricsModalSettings } = stateSlice.actions;\n","import { css, cx } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\nimport { usePrevious } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { IconButton, InlineLabel, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../datasource';\nimport { PromQuery } from '../types';\n\ninterface Props {\n  onChange: (exemplar: boolean) => void;\n  datasource: PrometheusDatasource;\n  query: PromQuery;\n  'data-testid'?: string;\n}\n\nexport function PromExemplarField({ datasource, onChange, query, ...rest }: Props) {\n  const [error, setError] = useState<string | null>(null);\n  const styles = useStyles2(getStyles);\n  const prevError = usePrevious(error);\n\n  useEffect(() => {\n    if (!datasource.exemplarsAvailable) {\n      setError('Exemplars for this query are not available');\n      onChange(false);\n    } else if (query.instant && !query.range) {\n      setError('Exemplars are not available for instant queries');\n      onChange(false);\n    } else {\n      setError(null);\n      // If error is cleared, we want to change exemplar to true\n      if (prevError && !error) {\n        onChange(true);\n      }\n    }\n  }, [datasource.exemplarsAvailable, query.instant, query.range, onChange, prevError, error]);\n\n  const iconButtonStyles = cx(\n    {\n      [styles.activeIcon]: !!query.exemplar,\n    },\n    styles.eyeIcon\n  );\n\n  return (\n    <InlineLabel width=\"auto\" data-testid={rest['data-testid']}>\n      <Tooltip content={error ?? ''}>\n        <div className={styles.iconWrapper}>\n          Exemplars\n          <IconButton\n            name=\"eye\"\n            tooltip={!!query.exemplar ? 'Disable query with exemplars' : 'Enable query with exemplars'}\n            disabled={!!error}\n            className={iconButtonStyles}\n            onClick={() => {\n              onChange(!query.exemplar);\n            }}\n          />\n        </div>\n      </Tooltip>\n    </InlineLabel>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    eyeIcon: css`\n      margin-left: ${theme.spacing(2)};\n    `,\n    activeIcon: css`\n      color: ${theme.colors.primary.main};\n    `,\n    iconWrapper: css`\n      display: flex;\n      align-items: center;\n    `,\n  };\n}\n","import { css, cx } from '@emotion/css';\nimport { isEqual } from 'lodash';\nimport React, { memo, useCallback } from 'react';\nimport { usePrevious } from 'react-use';\n\nimport { InlineFormLabel, RadioButtonGroup } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../datasource';\nimport { PromQuery } from '../types';\n\nimport { PromExemplarField } from './PromExemplarField';\n\nexport interface PromExploreExtraFieldProps {\n  query: PromQuery;\n  onChange: (value: PromQuery) => void;\n  onRunQuery: () => void;\n  datasource: PrometheusDatasource;\n}\n\nexport const PromExploreExtraField = memo(({ query, datasource, onChange, onRunQuery }: PromExploreExtraFieldProps) => {\n  const rangeOptions = getQueryTypeOptions(true);\n  const prevQuery = usePrevious(query);\n\n  const onExemplarChange = useCallback(\n    (exemplar: boolean) => {\n      if (!isEqual(query, prevQuery) || exemplar !== query.exemplar) {\n        onChange({ ...query, exemplar });\n      }\n    },\n    [prevQuery, query, onChange]\n  );\n\n  function onChangeQueryStep(interval: string) {\n    onChange({ ...query, interval });\n  }\n\n  function onStepChange(e: React.SyntheticEvent<HTMLInputElement>) {\n    if (e.currentTarget.value !== query.interval) {\n      onChangeQueryStep(e.currentTarget.value);\n    }\n  }\n\n  function onReturnKeyDown(e: React.KeyboardEvent<HTMLInputElement>) {\n    if (e.key === 'Enter' && e.shiftKey) {\n      onRunQuery();\n    }\n  }\n\n  const onQueryTypeChange = getQueryTypeChangeHandler(query, onChange);\n\n  return (\n    <div aria-label=\"Prometheus extra field\" className=\"gf-form-inline\" data-testid={testIds.extraFieldEditor}>\n      {/*Query type field*/}\n      <div\n        data-testid={testIds.queryTypeField}\n        className={cx(\n          'gf-form explore-input-margin',\n          css`\n            flex-wrap: nowrap;\n          `\n        )}\n        aria-label=\"Query type field\"\n      >\n        <InlineFormLabel width=\"auto\">Query type</InlineFormLabel>\n\n        <RadioButtonGroup\n          options={rangeOptions}\n          value={query.range && query.instant ? 'both' : query.instant ? 'instant' : 'range'}\n          onChange={onQueryTypeChange}\n        />\n      </div>\n      {/*Step field*/}\n      <div\n        data-testid={testIds.stepField}\n        className={cx(\n          'gf-form',\n          css`\n            flex-wrap: nowrap;\n          `\n        )}\n        aria-label=\"Step field\"\n      >\n        <InlineFormLabel\n          width={6}\n          tooltip={\n            'Time units and built-in variables can be used here, for example: $__interval, $__rate_interval, 5s, 1m, 3h, 1d, 1y (Default if no unit is specified: s)'\n          }\n        >\n          Min step\n        </InlineFormLabel>\n        <input\n          type={'text'}\n          className=\"gf-form-input width-4\"\n          placeholder={'auto'}\n          onChange={onStepChange}\n          onKeyDown={onReturnKeyDown}\n          value={query.interval ?? ''}\n        />\n      </div>\n\n      <PromExemplarField onChange={onExemplarChange} datasource={datasource} query={query} />\n    </div>\n  );\n});\n\nPromExploreExtraField.displayName = 'PromExploreExtraField';\n\nexport function getQueryTypeOptions(includeBoth: boolean) {\n  const rangeOptions = [\n    { value: 'range', label: 'Range', description: 'Run query over a range of time' },\n    {\n      value: 'instant',\n      label: 'Instant',\n      description: 'Run query against a single point in time. For this query, the \"To\" time is used',\n    },\n  ];\n\n  if (includeBoth) {\n    rangeOptions.push({ value: 'both', label: 'Both', description: 'Run an Instant query and a Range query' });\n  }\n\n  return rangeOptions;\n}\n\nexport function getQueryTypeChangeHandler(query: PromQuery, onChange: (update: PromQuery) => void) {\n  return (queryType: string) => {\n    if (queryType === 'instant') {\n      onChange({ ...query, instant: true, range: false, exemplar: false });\n    } else if (queryType === 'range') {\n      onChange({ ...query, instant: false, range: true });\n    } else {\n      onChange({ ...query, instant: true, range: true });\n    }\n  };\n}\n\nexport const testIds = {\n  extraFieldEditor: 'prom-editor-extra-field',\n  stepField: 'prom-editor-extra-field-step',\n  queryTypeField: 'prom-editor-extra-field-query-type',\n};\n","import React, { useRef } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/experimental';\nimport { Select, AutoSizeInput } from '@grafana/ui';\n\nimport { LegendFormatMode } from '../../types';\n\nexport interface Props {\n  legendFormat: string | undefined;\n  onChange: (legendFormat: string) => void;\n  onRunQuery: () => void;\n}\n\nconst legendModeOptions = [\n  {\n    label: 'Auto',\n    value: LegendFormatMode.Auto,\n    description: 'Only includes unique labels',\n  },\n  { label: 'Verbose', value: LegendFormatMode.Verbose, description: 'All label names and values' },\n  { label: 'Custom', value: LegendFormatMode.Custom, description: 'Provide a naming template' },\n];\n\n/**\n * Tests for this component are on the parent level (PromQueryBuilderOptions).\n */\nexport const PromQueryLegendEditor = React.memo<Props>(({ legendFormat, onChange, onRunQuery }) => {\n  const mode = getLegendMode(legendFormat);\n  const inputRef = useRef<HTMLInputElement | null>(null);\n\n  const onLegendFormatChanged = (evt: React.FormEvent<HTMLInputElement>) => {\n    let newFormat = evt.currentTarget.value;\n    if (newFormat.length === 0) {\n      newFormat = LegendFormatMode.Auto;\n    }\n\n    if (newFormat !== legendFormat) {\n      onChange(newFormat);\n      onRunQuery();\n    }\n  };\n\n  const onLegendModeChanged = (value: SelectableValue<LegendFormatMode>) => {\n    switch (value.value!) {\n      case LegendFormatMode.Auto:\n        onChange(LegendFormatMode.Auto);\n        break;\n      case LegendFormatMode.Custom:\n        onChange('{{label_name}}');\n        setTimeout(() => {\n          inputRef.current?.focus();\n          inputRef.current?.setSelectionRange(2, 12, 'forward');\n        }, 10);\n        break;\n      case LegendFormatMode.Verbose:\n        onChange('');\n        break;\n    }\n    onRunQuery();\n  };\n\n  return (\n    <EditorField\n      label=\"Legend\"\n      tooltip=\"Series name override or template. Ex. {{hostname}} will be replaced with label value for hostname.\"\n    >\n      <>\n        {mode === LegendFormatMode.Custom && (\n          <AutoSizeInput\n            id=\"legendFormat\"\n            minWidth={22}\n            placeholder=\"auto\"\n            defaultValue={legendFormat}\n            onCommitChange={onLegendFormatChanged}\n            ref={inputRef}\n          />\n        )}\n        {mode !== LegendFormatMode.Custom && (\n          <Select\n            inputId=\"legend.mode\"\n            isSearchable={false}\n            placeholder=\"Select legend mode\"\n            options={legendModeOptions}\n            width={22}\n            onChange={onLegendModeChanged}\n            value={legendModeOptions.find((x) => x.value === mode)}\n          />\n        )}\n      </>\n    </EditorField>\n  );\n});\n\nPromQueryLegendEditor.displayName = 'PromQueryLegendEditor';\n\nfunction getLegendMode(legendFormat: string | undefined) {\n  // This special value means the new smart minimal series naming\n  if (legendFormat === LegendFormatMode.Auto) {\n    return LegendFormatMode.Auto;\n  }\n\n  // Missing or empty legend format is the old verbose behavior\n  if (legendFormat == null || legendFormat === '') {\n    return LegendFormatMode.Verbose;\n  }\n\n  return LegendFormatMode.Custom;\n}\n\nexport function getLegendModeLabel(legendFormat: string | undefined) {\n  const mode = getLegendMode(legendFormat);\n  if (mode !== LegendFormatMode.Custom) {\n    return legendModeOptions.find((x) => x.value === mode)?.label;\n  }\n  return legendFormat;\n}\n","import React, { SyntheticEvent } from 'react';\n\nimport { CoreApp, SelectableValue } from '@grafana/data';\nimport { EditorField, EditorRow, EditorSwitch } from '@grafana/experimental';\nimport { AutoSizeInput, RadioButtonGroup, Select } from '@grafana/ui';\n\nimport { getQueryTypeChangeHandler, getQueryTypeOptions } from '../../components/PromExploreExtraField';\nimport { PromQueryFormat } from '../../dataquery.gen';\nimport { PromQuery } from '../../types';\nimport { QueryOptionGroup } from '../shared/QueryOptionGroup';\n\nimport { FORMAT_OPTIONS, INTERVAL_FACTOR_OPTIONS } from './PromQueryEditorSelector';\nimport { getLegendModeLabel, PromQueryLegendEditor } from './PromQueryLegendEditor';\n\nexport interface UIOptions {\n  exemplars: boolean;\n  type: boolean;\n  format: boolean;\n  minStep: boolean;\n  legend: boolean;\n  resolution: boolean;\n}\n\nexport interface Props {\n  query: PromQuery;\n  app?: CoreApp;\n  onChange: (update: PromQuery) => void;\n  onRunQuery: () => void;\n}\n\nexport const PromQueryBuilderOptions = React.memo<Props>(({ query, app, onChange, onRunQuery }) => {\n  const onChangeFormat = (value: SelectableValue<PromQueryFormat>) => {\n    onChange({ ...query, format: value.value });\n    onRunQuery();\n  };\n\n  const onChangeStep = (evt: React.FormEvent<HTMLInputElement>) => {\n    onChange({ ...query, interval: evt.currentTarget.value });\n    onRunQuery();\n  };\n\n  const queryTypeOptions = getQueryTypeOptions(\n    app === CoreApp.Explore || app === CoreApp.Correlations || app === CoreApp.PanelEditor\n  );\n  const onQueryTypeChange = getQueryTypeChangeHandler(query, onChange);\n\n  const onExemplarChange = (event: SyntheticEvent<HTMLInputElement>) => {\n    const isEnabled = event.currentTarget.checked;\n    onChange({ ...query, exemplar: isEnabled });\n    onRunQuery();\n  };\n\n  const onIntervalFactorChange = (value: SelectableValue<number>) => {\n    onChange({ ...query, intervalFactor: value.value });\n    onRunQuery();\n  };\n\n  const formatOption = FORMAT_OPTIONS.find((option) => option.value === query.format) || FORMAT_OPTIONS[0];\n  const queryTypeValue = getQueryTypeValue(query);\n  const queryTypeLabel = queryTypeOptions.find((x) => x.value === queryTypeValue)!.label;\n\n  return (\n    <EditorRow>\n      <QueryOptionGroup\n        title=\"Options\"\n        collapsedInfo={getCollapsedInfo(query, formatOption.label!, queryTypeLabel, app)}\n      >\n        <PromQueryLegendEditor\n          legendFormat={query.legendFormat}\n          onChange={(legendFormat) => onChange({ ...query, legendFormat })}\n          onRunQuery={onRunQuery}\n        />\n        <EditorField\n          label=\"Min step\"\n          tooltip={\n            <>\n              An additional lower limit for the step parameter of the Prometheus query and for the{' '}\n              <code>$__interval</code> and <code>$__rate_interval</code> variables.\n            </>\n          }\n        >\n          <AutoSizeInput\n            type=\"text\"\n            aria-label=\"Set lower limit for the step parameter\"\n            placeholder={'auto'}\n            minWidth={10}\n            onCommitChange={onChangeStep}\n            defaultValue={query.interval}\n          />\n        </EditorField>\n        <EditorField label=\"Format\">\n          <Select value={formatOption} allowCustomValue onChange={onChangeFormat} options={FORMAT_OPTIONS} />\n        </EditorField>\n        <EditorField label=\"Type\">\n          <RadioButtonGroup options={queryTypeOptions} value={queryTypeValue} onChange={onQueryTypeChange} />\n        </EditorField>\n        {shouldShowExemplarSwitch(query, app) && (\n          <EditorField label=\"Exemplars\">\n            <EditorSwitch value={query.exemplar || false} onChange={onExemplarChange} />\n          </EditorField>\n        )}\n        {query.intervalFactor && query.intervalFactor > 1 && (\n          <EditorField label=\"Resolution\">\n            <Select\n              aria-label=\"Select resolution\"\n              isSearchable={false}\n              options={INTERVAL_FACTOR_OPTIONS}\n              onChange={onIntervalFactorChange}\n              value={INTERVAL_FACTOR_OPTIONS.find((option) => option.value === query.intervalFactor)}\n            />\n          </EditorField>\n        )}\n      </QueryOptionGroup>\n    </EditorRow>\n  );\n});\n\nfunction shouldShowExemplarSwitch(query: PromQuery, app?: CoreApp) {\n  if (app === CoreApp.UnifiedAlerting || !query.range) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction getQueryTypeValue(query: PromQuery) {\n  return query.range && query.instant ? 'both' : query.instant ? 'instant' : 'range';\n}\n\nfunction getCollapsedInfo(query: PromQuery, formatOption: string, queryType: string, app?: CoreApp): string[] {\n  const items: string[] = [];\n\n  items.push(`Legend: ${getLegendModeLabel(query.legendFormat)}`);\n  items.push(`Format: ${formatOption}`);\n  items.push(`Step: ${query.interval ?? 'auto'}`);\n  items.push(`Type: ${queryType}`);\n\n  if (shouldShowExemplarSwitch(query, app)) {\n    if (query.exemplar) {\n      items.push(`Exemplars: true`);\n    } else {\n      items.push(`Exemplars: false`);\n    }\n  }\n  return items;\n}\n\nPromQueryBuilderOptions.displayName = 'PromQueryBuilderOptions';\n","import { isEqual, map } from 'lodash';\nimport React, { SyntheticEvent, useCallback, useEffect, useState } from 'react';\n\nimport { CoreApp, LoadingState, SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorHeader, EditorRows, FlexItem, Space } from '@grafana/experimental';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, ConfirmModal } from '@grafana/ui';\n\nimport { PromQueryEditorProps } from '../../components/types';\nimport { PromQueryFormat } from '../../dataquery.gen';\nimport { PromQuery } from '../../types';\nimport { QueryPatternsModal } from '../QueryPatternsModal';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { QueryEditorModeToggle } from '../shared/QueryEditorModeToggle';\nimport { QueryHeaderSwitch } from '../shared/QueryHeaderSwitch';\nimport { promQueryEditorExplainKey, useFlag } from '../shared/hooks/useFlag';\nimport { QueryEditorMode } from '../shared/types';\nimport { changeEditorMode, getQueryWithDefaults } from '../state';\n\nimport { PromQueryBuilderContainer } from './PromQueryBuilderContainer';\nimport { PromQueryBuilderOptions } from './PromQueryBuilderOptions';\nimport { PromQueryCodeEditor } from './PromQueryCodeEditor';\n\nexport const FORMAT_OPTIONS: Array<SelectableValue<PromQueryFormat>> = [\n  { label: 'Time series', value: 'time_series' },\n  { label: 'Table', value: 'table' },\n  { label: 'Heatmap', value: 'heatmap' },\n];\n\nexport const INTERVAL_FACTOR_OPTIONS: Array<SelectableValue<number>> = map([1, 2, 3, 4, 5, 10], (value: number) => ({\n  value,\n  label: '1/' + value,\n}));\n\ntype Props = PromQueryEditorProps;\n\nexport const PromQueryEditorSelector = React.memo<Props>((props) => {\n  const {\n    onChange,\n    onRunQuery,\n    data,\n    app,\n    onAddQuery,\n    datasource: { defaultEditor },\n    queries,\n  } = props;\n\n  const [parseModalOpen, setParseModalOpen] = useState(false);\n  const [queryPatternsModalOpen, setQueryPatternsModalOpen] = useState(false);\n  const [dataIsStale, setDataIsStale] = useState(false);\n  const { flag: explain, setFlag: setExplain } = useFlag(promQueryEditorExplainKey);\n\n  const query = getQueryWithDefaults(props.query, app, defaultEditor);\n  // This should be filled in from the defaults by now.\n  const editorMode = query.editorMode!;\n\n  const onEditorModeChange = useCallback(\n    (newMetricEditorMode: QueryEditorMode) => {\n      reportInteraction('user_grafana_prometheus_editor_mode_clicked', {\n        newEditor: newMetricEditorMode,\n        previousEditor: query.editorMode ?? '',\n        newQuery: !query.expr,\n        app: app ?? '',\n      });\n\n      if (newMetricEditorMode === QueryEditorMode.Builder) {\n        const result = buildVisualQueryFromString(query.expr || '');\n        // If there are errors, give user a chance to decide if they want to go to builder as that can lose some data.\n        if (result.errors.length) {\n          setParseModalOpen(true);\n          return;\n        }\n      }\n      changeEditorMode(query, newMetricEditorMode, onChange);\n    },\n    [onChange, query, app]\n  );\n\n  useEffect(() => {\n    setDataIsStale(false);\n  }, [data]);\n\n  const onChangeInternal = (query: PromQuery) => {\n    if (!isEqual(query, props.query)) {\n      setDataIsStale(true);\n    }\n    onChange(query);\n  };\n\n  const onShowExplainChange = (e: SyntheticEvent<HTMLInputElement>) => {\n    setExplain(e.currentTarget.checked);\n  };\n\n  return (\n    <>\n      <ConfirmModal\n        isOpen={parseModalOpen}\n        title=\"Parsing error: Switch to the builder mode?\"\n        body=\"There is a syntax error, or the query structure cannot be visualized when switching to the builder mode. Parts of the query may be lost. \"\n        confirmText=\"Continue\"\n        onConfirm={() => {\n          changeEditorMode(query, QueryEditorMode.Builder, onChange);\n          setParseModalOpen(false);\n        }}\n        onDismiss={() => setParseModalOpen(false)}\n      />\n      <QueryPatternsModal\n        isOpen={queryPatternsModalOpen}\n        onClose={() => setQueryPatternsModalOpen(false)}\n        query={query}\n        queries={queries}\n        app={app}\n        onChange={onChange}\n        onAddQuery={onAddQuery}\n      />\n      <EditorHeader>\n        <Button\n          aria-label={selectors.components.QueryBuilder.queryPatterns}\n          variant=\"secondary\"\n          size=\"sm\"\n          onClick={() => setQueryPatternsModalOpen((prevValue) => !prevValue)}\n        >\n          Kick start your query\n        </Button>\n        <QueryHeaderSwitch label=\"Explain\" value={explain} onChange={onShowExplainChange} />\n        <FlexItem grow={1} />\n        {app !== CoreApp.Explore && app !== CoreApp.Correlations && (\n          <Button\n            variant={dataIsStale ? 'primary' : 'secondary'}\n            size=\"sm\"\n            onClick={onRunQuery}\n            icon={data?.state === LoadingState.Loading ? 'fa fa-spinner' : undefined}\n            disabled={data?.state === LoadingState.Loading}\n          >\n            Run queries\n          </Button>\n        )}\n        <QueryEditorModeToggle mode={editorMode} onChange={onEditorModeChange} />\n      </EditorHeader>\n      <Space v={0.5} />\n      <EditorRows>\n        {editorMode === QueryEditorMode.Code && (\n          <PromQueryCodeEditor {...props} query={query} showExplain={explain} onChange={onChangeInternal} />\n        )}\n        {editorMode === QueryEditorMode.Builder && (\n          <PromQueryBuilderContainer\n            query={query}\n            datasource={props.datasource}\n            onChange={onChangeInternal}\n            onRunQuery={props.onRunQuery}\n            data={data}\n            showExplain={explain}\n          />\n        )}\n        <PromQueryBuilderOptions query={query} app={props.app} onChange={onChange} onRunQuery={onRunQuery} />\n      </EditorRows>\n    </>\n  );\n});\n\nPromQueryEditorSelector.displayName = 'PromQueryEditorSelector';\n","import React from 'react';\n\nimport PromQueryField from './PromQueryField';\nimport { PromQueryEditorProps } from './types';\n\nexport function PromQueryEditorForAlerting(props: PromQueryEditorProps) {\n  const { datasource, query, range, data, onChange, onRunQuery } = props;\n\n  return (\n    <PromQueryField\n      datasource={datasource}\n      query={query}\n      onRunQuery={onRunQuery}\n      onChange={onChange}\n      history={[]}\n      range={range}\n      data={data}\n      data-testid={testIds.editor}\n    />\n  );\n}\n\nexport const testIds = {\n  editor: 'prom-editor-cloud-alerting',\n};\n","import React, { memo } from 'react';\n\nimport { CoreApp } from '@grafana/data';\n\nimport { PromQueryEditorSelector } from '../querybuilder/components/PromQueryEditorSelector';\n\nimport { PromQueryEditorForAlerting } from './PromQueryEditorForAlerting';\nimport { PromQueryEditorProps } from './types';\n\nexport function PromQueryEditorByApp(props: PromQueryEditorProps) {\n  const { app } = props;\n\n  switch (app) {\n    case CoreApp.CloudAlerting:\n      return <PromQueryEditorForAlerting {...props} />;\n    default:\n      return <PromQueryEditorSelector {...props} />;\n  }\n}\n\nexport default memo(PromQueryEditorByApp);\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport PromCheatSheet from './components/PromCheatSheet';\nimport PromQueryEditorByApp from './components/PromQueryEditorByApp';\nimport { ConfigEditor } from './configuration/ConfigEditor';\nimport { PrometheusDatasource } from './datasource';\n\nexport const plugin = new DataSourcePlugin(PrometheusDatasource)\n  .setQueryEditor(PromQueryEditorByApp)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditorHelp(PromCheatSheet);\n"],"names":["createRangeOperation","name","isRangeOperationWithGrouping","params","getRangeVectorParamDef","defaultParams","paramChangedHandler","operationWithRangeVectorRenderer","addLokiOperation","op","def","opDocs","x","createRangeOperationWithGrouping","rangeOperation","getRangeAggregationWithGroupingRenderer","aggregation","grouping","model","innerExpr","restParamIndex","param","restParams","rangeVector","quantile","labelFilterRenderer","isConflictingFilter","operation","queryOperations","operationIsNegative","queryOperation","candidate","pipelineRenderer","strict","keepEmpty","labels","isRangeVectorFunction","getIndexOfOrLast","operations","queryModeller","condition","index","opDef","query","modeller","newOperation","existingRangeVectorFunction","placeToInsert","addNestedQueryHandler","getLineFilterRenderer","caseInsensitive","LokiQueryPatternType","LokiVisualQueryOperationCategory","LokiOperationId","LokiOperationOrder","lokiOperators","CHEAT_SHEET_ITEMS","props","item","e","QueryPattern","pattern","onPatternSelect","hasNewQueryOption","hasPreviousQuery","selectedPatternName","setSelectedPatternName","styles","getStyles","lang","promql","Card","RawQuery","Button","theme","QueryPatternsModal","isOpen","onClose","onChange","onAddQuery","queries","app","openTabs","setOpenTabs","visualQuery","hasOperations","hasMetric","hasLabels","hasBinaryQueries","selectAsNewQuery","Modal","patternType","Collapse","tabs","t","queryEditorModeDefaultLocalStorageKey","changeEditorMode","editorMode","store","getDefaultEditorMode","expr","defaultEditor","value","getQueryWithDefaults","result","isBothInstantAndRange","NestedQuery","nestedQuery","datasource","onRemove","onRunQuery","showExplain","Select","operators","val","AutoSizeInput","evt","FlexItem","IconButton","EditorRows","PromQueryBuilder","update","NestedQueryList","nestedQueries","onNestedQueryUpdate","updatedList","Stack","data","highlightedOp","setHighlightedOp","initHints","EditorRow","MetricsLabelsSection","OperationExplainedBox","OperationsEditorRow","OperationList","QueryBuilderHints","OperationListExplained","QueryPreview","EditorFieldGroup","prometheusMetricEncyclopedia","config","PromQueryBuilderContainer","state","dispatch","stateSlice","exprChanged","setMetricsModalSettings","onVisQueryChange","visQuery","visualQueryChange","metricsModalSettings","initialState","action","parseResult","PromExemplarField","rest","error","setError","prevError","usePrevious","iconButtonStyles","InlineLabel","Tooltip","PromExploreExtraField","rangeOptions","getQueryTypeOptions","prevQuery","onExemplarChange","exemplar","onChangeQueryStep","interval","onStepChange","onReturnKeyDown","onQueryTypeChange","getQueryTypeChangeHandler","testIds","RadioButtonGroup","includeBoth","queryType","legendModeOptions","PromQueryLegendEditor","legendFormat","mode","getLegendMode","inputRef","onLegendFormatChanged","newFormat","onLegendModeChanged","EditorField","getLegendModeLabel","PromQueryBuilderOptions","onChangeFormat","onChangeStep","queryTypeOptions","event","isEnabled","onIntervalFactorChange","formatOption","FORMAT_OPTIONS","option","queryTypeValue","getQueryTypeValue","queryTypeLabel","QueryOptionGroup","getCollapsedInfo","shouldShowExemplarSwitch","EditorSwitch","INTERVAL_FACTOR_OPTIONS","items","PromQueryEditorSelector","parseModalOpen","setParseModalOpen","queryPatternsModalOpen","setQueryPatternsModalOpen","dataIsStale","setDataIsStale","explain","setExplain","useFlag","onEditorModeChange","newMetricEditorMode","onChangeInternal","onShowExplainChange","ConfirmModal","EditorHeader","selectors","prevValue","QueryHeaderSwitch","QueryEditorModeToggle","Space","PromQueryCodeEditor","PromQueryEditorForAlerting","range","PromQueryField","PromQueryEditorByApp","ConfigEditor"],"sourceRoot":""}