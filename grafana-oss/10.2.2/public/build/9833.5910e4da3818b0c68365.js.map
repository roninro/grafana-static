{"version":3,"file":"9833.5910e4da3818b0c68365.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/contact-points/useContactPoints.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/utils.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/ReceiversAndTemplatesView.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaReceiversExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/ReceiversSection.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaReceiverExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/grafanaAppReceivers/ReceiverMetadataBadge.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/grafanaAppReceivers/useReceiversMetadata.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/useAlertmanagerConfigHealth.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/ReceiversTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/TemplatesTable.tsx","webpack://grafana/./public/app/features/alerting/unified/styles/table.ts","webpack://grafana/./public/app/features/alerting/unified/utils/receivers.ts","webpack://grafana/./public/app/plugins/datasource/alertmanager/consts.ts"],"sourcesContent":["/**\n * This hook will combine data from both the Alertmanager config\n * and (if available) it will also fetch the status from the Grafana Managed status endpoint\n */\n\nimport { produce } from 'immer';\nimport { remove } from 'lodash';\n\nimport { alertmanagerApi } from '../../api/alertmanagerApi';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\n\nimport { enhanceContactPointsWithStatus } from './utils';\n\nexport const RECEIVER_STATUS_KEY = Symbol('receiver_status');\nconst RECEIVER_STATUS_POLLING_INTERVAL = 10 * 1000; // 10 seconds\n\n/**\n * This hook will combine data from two endpoints;\n * 1. the alertmanager config endpoint where the definition of the receivers are\n * 2. (if available) the alertmanager receiver status endpoint, currently Grafana Managed only\n */\nexport function useContactPointsWithStatus(selectedAlertmanager: string) {\n  const isGrafanaManagedAlertmanager = selectedAlertmanager === GRAFANA_RULES_SOURCE_NAME;\n\n  // fetch receiver status if we're dealing with a Grafana Managed Alertmanager\n  const fetchContactPointsStatus = alertmanagerApi.endpoints.getContactPointsStatus.useQuery(undefined, {\n    // TODO these don't seem to work since we've not called setupListeners()\n    refetchOnFocus: true,\n    refetchOnReconnect: true,\n    // re-fetch status every so often for up-to-date information\n    pollingInterval: RECEIVER_STATUS_POLLING_INTERVAL,\n    // skip fetching receiver statuses if not Grafana AM\n    skip: !isGrafanaManagedAlertmanager,\n  });\n\n  // fetch the latest config from the Alertmanager\n  const fetchAlertmanagerConfiguration = alertmanagerApi.endpoints.getAlertmanagerConfiguration.useQuery(\n    selectedAlertmanager,\n    {\n      refetchOnFocus: true,\n      refetchOnReconnect: true,\n      selectFromResult: (result) => ({\n        ...result,\n        contactPoints: result.data ? enhanceContactPointsWithStatus(result.data, fetchContactPointsStatus.data) : [],\n      }),\n    }\n  );\n\n  // TODO kinda yucky to combine hooks like this, better alternative?\n  const error = fetchAlertmanagerConfiguration.error ?? fetchContactPointsStatus.error;\n  const isLoading = fetchAlertmanagerConfiguration.isLoading || fetchContactPointsStatus.isLoading;\n\n  const contactPoints = fetchAlertmanagerConfiguration.contactPoints;\n\n  return {\n    error,\n    isLoading,\n    contactPoints,\n  };\n}\n\nexport function useDeleteContactPoint(selectedAlertmanager: string) {\n  const [fetchAlertmanagerConfig] = alertmanagerApi.endpoints.getAlertmanagerConfiguration.useLazyQuery();\n  const [updateAlertManager, updateAlertmanagerState] =\n    alertmanagerApi.endpoints.updateAlertmanagerConfiguration.useMutation();\n\n  const deleteTrigger = (contactPointName: string) => {\n    return fetchAlertmanagerConfig(selectedAlertmanager).then(({ data }) => {\n      if (!data) {\n        return;\n      }\n\n      const newConfig = produce(data, (draft) => {\n        remove(draft?.alertmanager_config?.receivers ?? [], (receiver) => receiver.name === contactPointName);\n        return draft;\n      });\n\n      return updateAlertManager({\n        selectedAlertmanager,\n        config: newConfig,\n      }).unwrap();\n    });\n  };\n\n  return {\n    deleteTrigger,\n    updateAlertmanagerState,\n  };\n}\n","import { countBy, split, trim } from 'lodash';\nimport { ReactNode } from 'react';\n\nimport {\n  AlertManagerCortexConfig,\n  GrafanaManagedContactPoint,\n  GrafanaManagedReceiverConfig,\n  Route,\n} from 'app/plugins/datasource/alertmanager/types';\nimport { NotifierStatus, ReceiversStateDTO } from 'app/types';\n\nimport { computeInheritedTree } from '../../utils/notification-policies';\nimport { extractReceivers } from '../../utils/receivers';\n\nimport { RECEIVER_STATUS_KEY } from './useContactPoints';\n\nexport function isProvisioned(contactPoint: GrafanaManagedContactPoint) {\n  // for some reason the provenance is on the receiver and not the entire contact point\n  const provenance = contactPoint.grafana_managed_receiver_configs?.find((receiver) => receiver.provenance)?.provenance;\n\n  return Boolean(provenance);\n}\n\n// TODO we should really add some type information to these receiver settings...\nexport function getReceiverDescription(receiver: GrafanaManagedReceiverConfig): ReactNode | undefined {\n  switch (receiver.type) {\n    case 'email': {\n      const hasEmailAddresses = 'addresses' in receiver.settings; // when dealing with alertmanager email_configs we don't normalize the settings\n      return hasEmailAddresses ? summarizeEmailAddresses(receiver.settings['addresses']) : undefined;\n    }\n    case 'slack': {\n      const channelName = receiver.settings['recipient'];\n      return channelName ? `#${channelName}` : undefined;\n    }\n    case 'kafka': {\n      const topicName = receiver.settings['kafkaTopic'];\n      return topicName;\n    }\n    case 'webhook': {\n      const url = receiver.settings['url'];\n      return url;\n    }\n    default:\n      return undefined;\n  }\n}\n\n// input: foo+1@bar.com, foo+2@bar.com, foo+3@bar.com, foo+4@bar.com\n// output: foo+1@bar.com, foo+2@bar.com, +2 more\nfunction summarizeEmailAddresses(addresses: string): string {\n  const MAX_ADDRESSES_SHOWN = 3;\n  const SUPPORTED_SEPARATORS = /,|;|\\n+/g;\n\n  const emails = addresses.trim().split(SUPPORTED_SEPARATORS).map(trim);\n\n  const notShown = emails.length - MAX_ADDRESSES_SHOWN;\n\n  const truncatedAddresses = split(addresses, SUPPORTED_SEPARATORS, MAX_ADDRESSES_SHOWN);\n  if (notShown > 0) {\n    truncatedAddresses.push(`+${notShown} more`);\n  }\n\n  return truncatedAddresses.join(', ');\n}\n\n// Grafana Managed contact points have receivers with additional diagnostics\nexport interface ReceiverConfigWithStatus extends GrafanaManagedReceiverConfig {\n  // we're using a symbol here so we'll never have a conflict on keys for a receiver\n  // we also specify that the diagnostics might be \"undefined\" for vanilla Alertmanager\n  [RECEIVER_STATUS_KEY]?: NotifierStatus | undefined;\n}\n\nexport interface ContactPointWithStatus extends GrafanaManagedContactPoint {\n  numberOfPolicies: number;\n  grafana_managed_receiver_configs: ReceiverConfigWithStatus[];\n}\n\n/**\n * This function adds the status information for each of the integrations (contact point types) in a contact point\n * 1. we iterate over all contact points\n * 2. for each contact point we \"enhance\" it with the status or \"undefined\" for vanilla Alertmanager\n */\nexport function enhanceContactPointsWithStatus(\n  result: AlertManagerCortexConfig,\n  status: ReceiversStateDTO[] = []\n): ContactPointWithStatus[] {\n  const contactPoints = result.alertmanager_config.receivers ?? [];\n\n  // compute the entire inherited tree before finding what notification policies are using a particular contact point\n  const fullyInheritedTree = computeInheritedTree(result?.alertmanager_config?.route ?? {});\n  const usedContactPoints = getUsedContactPoints(fullyInheritedTree);\n  const usedContactPointsByName = countBy(usedContactPoints);\n\n  return contactPoints.map((contactPoint) => {\n    const receivers = extractReceivers(contactPoint);\n    const statusForReceiver = status.find((status) => status.name === contactPoint.name);\n\n    return {\n      ...contactPoint,\n      numberOfPolicies: usedContactPointsByName[contactPoint.name] ?? 0,\n      grafana_managed_receiver_configs: receivers.map((receiver, index) => ({\n        ...receiver,\n        [RECEIVER_STATUS_KEY]: statusForReceiver?.integrations[index],\n      })),\n    };\n  });\n}\n\nexport function getUsedContactPoints(route: Route): string[] {\n  const childrenContactPoints = route.routes?.flatMap((route) => getUsedContactPoints(route)) ?? [];\n  if (route.receiver) {\n    return [route.receiver, ...childrenContactPoints];\n  }\n\n  return childrenContactPoints;\n}\n","import React from 'react';\n\nimport { Stack } from '@grafana/experimental';\nimport { Alert, LinkButton } from '@grafana/ui';\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\n\nimport { AlertmanagerAction, useAlertmanagerAbility } from '../../hooks/useAbilities';\nimport { GRAFANA_RULES_SOURCE_NAME, isVanillaPrometheusAlertManagerDataSource } from '../../utils/datasource';\nimport { makeAMLink } from '../../utils/misc';\nimport { Authorize } from '../Authorize';\n\nimport { ReceiversSection } from './ReceiversSection';\nimport { ReceiversTable } from './ReceiversTable';\nimport { TemplatesTable } from './TemplatesTable';\n\ninterface Props {\n  config: AlertManagerCortexConfig;\n  alertManagerName: string;\n}\n\nexport const ReceiversAndTemplatesView = ({ config, alertManagerName }: Props) => {\n  const isGrafanaManagedAlertmanager = alertManagerName === GRAFANA_RULES_SOURCE_NAME;\n  const isVanillaAM = isVanillaPrometheusAlertManagerDataSource(alertManagerName);\n\n  return (\n    <Stack direction=\"column\" gap={4}>\n      <ReceiversTable config={config} alertManagerName={alertManagerName} />\n      {/* Vanilla flavored Alertmanager does not support editing message templates via the UI */}\n      {!isVanillaAM && <TemplatesView config={config} alertManagerName={alertManagerName} />}\n      {/* Grafana manager Alertmanager does not support global config, Mimir and Cortex do */}\n      {!isGrafanaManagedAlertmanager && <GlobalConfigAlert alertManagerName={alertManagerName} />}\n    </Stack>\n  );\n};\n\nexport const TemplatesView = ({ config, alertManagerName }: Props) => {\n  const [createNotificationTemplateSupported, createNotificationTemplateAllowed] = useAlertmanagerAbility(\n    AlertmanagerAction.CreateNotificationTemplate\n  );\n\n  return (\n    <ReceiversSection\n      title=\"Notification templates\"\n      description=\"Create notification templates to customize your notifications.\"\n      addButtonLabel=\"Add template\"\n      addButtonTo={makeAMLink('/alerting/notifications/templates/new', alertManagerName)}\n      showButton={createNotificationTemplateSupported && createNotificationTemplateAllowed}\n    >\n      <TemplatesTable config={config} alertManagerName={alertManagerName} />\n    </ReceiversSection>\n  );\n};\n\ninterface GlobalConfigAlertProps {\n  alertManagerName: string;\n}\n\nexport const GlobalConfigAlert = ({ alertManagerName }: GlobalConfigAlertProps) => {\n  const isVanillaAM = isVanillaPrometheusAlertManagerDataSource(alertManagerName);\n\n  return (\n    <Authorize actions={[AlertmanagerAction.UpdateExternalConfiguration]}>\n      <Alert severity=\"info\" title=\"Global config for contact points\">\n        <p>\n          For each external Alertmanager you can define global settings, like server addresses, usernames and password,\n          for all the supported contact points.\n        </p>\n        <LinkButton href={makeAMLink('alerting/notifications/global-config', alertManagerName)} variant=\"secondary\">\n          {isVanillaAM ? 'View global config' : 'Edit global config'}\n        </LinkButton>\n      </Alert>\n    </Authorize>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { allGrafanaExportProviders, ExportFormats } from './providers';\n\ninterface GrafanaReceiversExportPreviewProps {\n  exportFormat: ExportFormats;\n  onClose: () => void;\n  decrypt: boolean;\n}\n\nconst GrafanaReceiversExportPreview = ({ decrypt, exportFormat, onClose }: GrafanaReceiversExportPreviewProps) => {\n  const { currentData: receiverDefinition = '', isFetching } = alertRuleApi.useExportReceiversQuery({\n    decrypt: decrypt,\n    format: exportFormat,\n  });\n\n  const downloadFileName = `contact-points-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={receiverDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n};\n\ninterface GrafanaReceiversExporterProps {\n  onClose: () => void;\n  decrypt: boolean;\n}\n\nexport const GrafanaReceiversExporter = ({ onClose, decrypt }: GrafanaReceiversExporterProps) => {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaReceiversExportPreview decrypt={decrypt} exportFormat={activeTab} onClose={onClose} />\n    </GrafanaExportDrawer>\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useToggle } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Button, Dropdown, Icon, Menu, MenuItem, useStyles2 } from '@grafana/ui';\n\nimport { GrafanaReceiversExporter } from '../export/GrafanaReceiversExporter';\n\ninterface Props {\n  title: string;\n  description: string;\n  addButtonLabel: string;\n  addButtonTo: string;\n  className?: string;\n  showButton?: boolean;\n  canReadSecrets?: boolean;\n  showExport?: boolean;\n}\n\nexport const ReceiversSection = ({\n  className,\n  title,\n  description,\n  addButtonLabel,\n  addButtonTo,\n  children,\n  showButton = true,\n  canReadSecrets = false,\n  showExport = false,\n}: React.PropsWithChildren<Props>) => {\n  const styles = useStyles2(getStyles);\n  const showMore = showExport;\n  const [showExportDrawer, toggleShowExportDrawer] = useToggle(false);\n\n  const newMenu = <Menu>{showExport && <MenuItem onClick={toggleShowExportDrawer} label=\"Export all\" />}</Menu>;\n\n  return (\n    <Stack direction=\"column\" gap={2}>\n      <div className={cx(styles.heading, className)}>\n        <div>\n          <h4>{title}</h4>\n          <div className={styles.description}>{description}</div>\n        </div>\n        <Stack direction=\"row\" gap={0.5}>\n          {showButton && (\n            <Link to={addButtonTo}>\n              <Button type=\"button\" icon=\"plus\">\n                {addButtonLabel}\n              </Button>\n            </Link>\n          )}\n          {showMore && (\n            <Dropdown overlay={newMenu}>\n              <Button variant=\"secondary\">\n                More\n                <Icon name=\"angle-down\" />\n              </Button>\n            </Dropdown>\n          )}\n        </Stack>\n      </div>\n      {children}\n      {showExportDrawer && <GrafanaReceiversExporter decrypt={canReadSecrets} onClose={toggleShowExportDrawer} />}\n    </Stack>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  heading: css`\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-end;\n  `,\n  description: css`\n    color: ${theme.colors.text.secondary};\n  `,\n});\n","import React, { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { allGrafanaExportProviders, ExportFormats } from './providers';\n\ninterface GrafanaReceiverExportPreviewProps {\n  exportFormat: ExportFormats;\n  onClose: () => void;\n  receiverName: string;\n  decrypt: boolean;\n}\n\nconst GrafanaReceiverExportPreview = ({\n  receiverName,\n  decrypt,\n  exportFormat,\n  onClose,\n}: GrafanaReceiverExportPreviewProps) => {\n  const { currentData: receiverDefinition = '', isFetching } = alertRuleApi.useExportReceiverQuery({\n    receiverName: receiverName,\n    decrypt: decrypt,\n    format: exportFormat,\n  });\n\n  const downloadFileName = `cp-${receiverName}-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={receiverDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n};\n\ninterface GrafanaReceiverExporterProps {\n  onClose: () => void;\n  receiverName: string;\n  decrypt: boolean;\n}\n\nexport const GrafanaReceiverExporter = ({ onClose, receiverName, decrypt }: GrafanaReceiverExporterProps) => {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaReceiverExportPreview\n        receiverName={receiverName}\n        decrypt={decrypt}\n        exportFormat={activeTab}\n        onClose={onClose}\n      />\n    </GrafanaExportDrawer>\n  );\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { HorizontalGroup, Icon, LinkButton, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { ReceiverMetadata } from './useReceiversMetadata';\n\ninterface Props {\n  metadata: ReceiverMetadata;\n}\n\nexport const ReceiverMetadataBadge = ({ metadata: { icon, title, externalUrl, warning } }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Stack alignItems=\"center\" gap={1}>\n      <div className={styles.wrapper}>\n        <HorizontalGroup align=\"center\" spacing=\"xs\">\n          <img src={icon} alt=\"\" height=\"12px\" />\n          <span>{title}</span>\n        </HorizontalGroup>\n      </div>\n      {externalUrl && <LinkButton icon=\"external-link-alt\" href={externalUrl} variant=\"secondary\" size=\"sm\" />}\n      {warning && (\n        <Tooltip content={warning} theme=\"error\">\n          <Icon name=\"exclamation-triangle\" size=\"lg\" className={styles.warnIcon} />\n        </Tooltip>\n      )}\n    </Stack>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    text-align: left;\n    height: 22px;\n    display: inline-flex;\n    padding: 1px 4px;\n    border-radius: ${theme.shape.borderRadius()};\n    border: 1px solid rgba(245, 95, 62, 1);\n    color: rgba(245, 95, 62, 1);\n    font-weight: ${theme.typography.fontWeightRegular};\n  `,\n  warnIcon: css`\n    fill: ${theme.colors.warning.main};\n  `,\n});\n","import { useMemo } from 'react';\n\nimport { Receiver } from '../../../../../../plugins/datasource/alertmanager/types';\nimport { onCallApi } from '../../../api/onCallApi';\nimport { usePluginBridge } from '../../../hooks/usePluginBridge';\nimport { SupportedPlugin } from '../../../types/pluginBridges';\nimport { createBridgeURL } from '../../PluginBridge';\n\nimport { ReceiverTypes } from './onCall/onCall';\nimport { GRAFANA_APP_RECEIVERS_SOURCE_IMAGE } from './types';\n\nexport interface ReceiverMetadata {\n  icon: string;\n  title: string;\n  externalUrl?: string;\n  warning?: string;\n}\n\nconst onCallReceiverICon = GRAFANA_APP_RECEIVERS_SOURCE_IMAGE[SupportedPlugin.OnCall];\nconst onCallReceiverTitle = 'Grafana OnCall';\n\nconst onCallReceiverMeta: ReceiverMetadata = {\n  title: onCallReceiverTitle,\n  icon: onCallReceiverICon,\n};\n\nexport const useReceiversMetadata = (receivers: Receiver[]): Map<Receiver, ReceiverMetadata> => {\n  const { installed: isOnCallEnabled } = usePluginBridge(SupportedPlugin.OnCall);\n  const { data: onCallIntegrations = [] } = onCallApi.useGrafanaOnCallIntegrationsQuery(undefined, {\n    skip: !isOnCallEnabled,\n  });\n\n  return useMemo(() => {\n    const result = new Map<Receiver, ReceiverMetadata>();\n\n    receivers.forEach((receiver) => {\n      const onCallReceiver = receiver.grafana_managed_receiver_configs?.find((c) => c.type === ReceiverTypes.OnCall);\n\n      if (onCallReceiver) {\n        if (!isOnCallEnabled) {\n          result.set(receiver, {\n            ...onCallReceiverMeta,\n            warning: 'Grafana OnCall is not enabled',\n          });\n          return;\n        }\n\n        const matchingOnCallIntegration = onCallIntegrations.find(\n          (i) => i.integration_url === onCallReceiver.settings.url\n        );\n\n        result.set(receiver, {\n          ...onCallReceiverMeta,\n          externalUrl: matchingOnCallIntegration\n            ? createBridgeURL(SupportedPlugin.OnCall, `/integrations/${matchingOnCallIntegration.value}`)\n            : undefined,\n          warning: matchingOnCallIntegration ? undefined : 'OnCall Integration no longer exists',\n        });\n      }\n    });\n\n    return result;\n  }, [isOnCallEnabled, receivers, onCallIntegrations]);\n};\n","import { countBy } from 'lodash';\n\nimport { AlertmanagerConfig } from '../../../../../plugins/datasource/alertmanager/types';\nimport { getUsedContactPoints } from '../contact-points/utils';\n\nexport interface ContactPointConfigHealth {\n  matchingRoutes: number;\n}\n\nexport interface AlertmanagerConfigHealth {\n  contactPoints: Record<string, ContactPointConfigHealth>;\n}\n\nexport function useAlertmanagerConfigHealth(config: AlertmanagerConfig): AlertmanagerConfigHealth {\n  if (!config.receivers) {\n    return { contactPoints: {} };\n  }\n\n  if (!config.route) {\n    return { contactPoints: Object.fromEntries(config.receivers.map((r) => [r.name, { matchingRoutes: 0 }])) };\n  }\n\n  const definedContactPointNames = config.receivers?.map((receiver) => receiver.name) ?? [];\n  const usedContactPoints = getUsedContactPoints(config.route);\n  const usedContactPointCounts = countBy(usedContactPoints);\n\n  const contactPointsHealth: AlertmanagerConfigHealth['contactPoints'] = {};\n  const configHealth: AlertmanagerConfigHealth = { contactPoints: contactPointsHealth };\n\n  definedContactPointNames.forEach((contactPointName) => {\n    contactPointsHealth[contactPointName] = { matchingRoutes: usedContactPointCounts[contactPointName] ?? 0 };\n  });\n\n  return configHealth;\n}\n","import pluralize from 'pluralize';\nimport React, { useMemo, useState } from 'react';\nimport { useToggle } from 'react-use';\n\nimport { dateTime, dateTimeFormat } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Badge, Button, ConfirmModal, Icon, Modal, useStyles2 } from '@grafana/ui';\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\nimport { ContactPointsState, NotifiersState, ReceiversState, useDispatch } from 'app/types';\n\nimport { useGetContactPointsState } from '../../api/receiversApi';\nimport { Authorize } from '../../components/Authorize';\nimport { AlertmanagerAction, useAlertmanagerAbility } from '../../hooks/useAbilities';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { deleteReceiverAction } from '../../state/actions';\nimport { getAlertTableStyles } from '../../styles/table';\nimport { SupportedPlugin } from '../../types/pluginBridges';\nimport { isReceiverUsed } from '../../utils/alertmanager';\nimport { GRAFANA_RULES_SOURCE_NAME, isVanillaPrometheusAlertManagerDataSource } from '../../utils/datasource';\nimport { makeAMLink } from '../../utils/misc';\nimport { extractNotifierTypeCounts } from '../../utils/receivers';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { ProvisioningBadge } from '../Provisioning';\nimport { GrafanaReceiverExporter } from '../export/GrafanaReceiverExporter';\nimport { ActionIcon } from '../rules/ActionIcon';\n\nimport { ReceiversSection } from './ReceiversSection';\nimport { ReceiverMetadataBadge } from './grafanaAppReceivers/ReceiverMetadataBadge';\nimport { ReceiverMetadata, useReceiversMetadata } from './grafanaAppReceivers/useReceiversMetadata';\nimport { AlertmanagerConfigHealth, useAlertmanagerConfigHealth } from './useAlertmanagerConfigHealth';\n\ninterface UpdateActionProps extends ActionProps {\n  onClickDeleteReceiver: (receiverName: string) => void;\n}\n\nfunction UpdateActions({ alertManagerName, receiverName, onClickDeleteReceiver }: UpdateActionProps) {\n  return (\n    <>\n      <Authorize actions={[AlertmanagerAction.UpdateContactPoint]}>\n        <ActionIcon\n          aria-label=\"Edit\"\n          data-testid=\"edit\"\n          to={makeAMLink(\n            `/alerting/notifications/receivers/${encodeURIComponent(receiverName)}/edit`,\n            alertManagerName\n          )}\n          tooltip=\"Edit contact point\"\n          icon=\"pen\"\n        />\n      </Authorize>\n      <Authorize actions={[AlertmanagerAction.DeleteContactPoint]}>\n        <ActionIcon\n          onClick={() => onClickDeleteReceiver(receiverName)}\n          tooltip=\"Delete contact point\"\n          icon=\"trash-alt\"\n        />\n      </Authorize>\n    </>\n  );\n}\n\ninterface ActionProps {\n  alertManagerName: string;\n  receiverName: string;\n  canReadSecrets?: boolean;\n}\n\nfunction ViewAction({ alertManagerName, receiverName }: ActionProps) {\n  return (\n    <Authorize actions={[AlertmanagerAction.UpdateContactPoint]}>\n      <ActionIcon\n        data-testid=\"view\"\n        to={makeAMLink(`/alerting/notifications/receivers/${encodeURIComponent(receiverName)}/edit`, alertManagerName)}\n        tooltip=\"View contact point\"\n        icon=\"file-alt\"\n      />\n    </Authorize>\n  );\n}\n\nfunction ExportAction({ receiverName, canReadSecrets = false }: ActionProps) {\n  const [showExportDrawer, toggleShowExportDrawer] = useToggle(false);\n\n  return (\n    <Authorize actions={[AlertmanagerAction.ExportContactPoint]}>\n      <ActionIcon\n        data-testid=\"export\"\n        tooltip={\n          canReadSecrets ? 'Export contact point with decrypted secrets' : 'Export contact point with redacted secrets'\n        }\n        icon=\"download-alt\"\n        onClick={toggleShowExportDrawer}\n      />\n      {showExportDrawer && (\n        <GrafanaReceiverExporter\n          receiverName={receiverName}\n          decrypt={canReadSecrets}\n          onClose={toggleShowExportDrawer}\n        />\n      )}\n    </Authorize>\n  );\n}\n\ninterface ReceiverErrorProps {\n  errorCount: number;\n  errorDetail?: string;\n  showErrorCount: boolean;\n  tooltip?: string;\n}\n\nfunction ReceiverError({ errorCount, errorDetail, showErrorCount, tooltip }: ReceiverErrorProps) {\n  const text = showErrorCount ? `${errorCount} ${pluralize('error', errorCount)}` : 'Error';\n  const tooltipToRender = tooltip ?? errorDetail ?? 'Error';\n\n  return <Badge color=\"red\" icon=\"exclamation-circle\" text={text} tooltip={tooltipToRender} />;\n}\n\ninterface NotifierHealthProps {\n  errorsByNotifier: number;\n  errorDetail?: string;\n  lastNotify: string;\n}\n\nfunction NotifierHealth({ errorsByNotifier, errorDetail, lastNotify }: NotifierHealthProps) {\n  const hasErrors = errorsByNotifier > 0;\n  const noAttempts = isLastNotifyNullDate(lastNotify);\n\n  if (hasErrors) {\n    return <ReceiverError errorCount={errorsByNotifier} errorDetail={errorDetail} showErrorCount={false} />;\n  }\n\n  if (noAttempts) {\n    return <>No attempts</>;\n  }\n\n  return <Badge color=\"green\" text=\"OK\" />;\n}\n\ninterface ReceiverHealthProps {\n  errorsByReceiver: number;\n  someWithNoAttempt: boolean;\n}\n\nfunction ReceiverHealth({ errorsByReceiver, someWithNoAttempt }: ReceiverHealthProps) {\n  const hasErrors = errorsByReceiver > 0;\n\n  if (hasErrors) {\n    return (\n      <ReceiverError\n        errorCount={errorsByReceiver}\n        showErrorCount={true}\n        tooltip=\"Expand the contact point to see error details.\"\n      />\n    );\n  }\n\n  if (someWithNoAttempt) {\n    return <>No attempts</>;\n  }\n\n  return <Badge color=\"green\" text=\"OK\" />;\n}\n\nconst useContactPointsState = (alertManagerName: string) => {\n  const contactPointsState = useGetContactPointsState(alertManagerName);\n  const receivers: ReceiversState = contactPointsState?.receivers ?? {};\n  const errorStateAvailable = Object.keys(receivers).length > 0;\n  return { contactPointsState, errorStateAvailable };\n};\n\ninterface ReceiverItem {\n  name: string;\n  types: string[];\n  provisioned?: boolean;\n  grafanaAppReceiverType?: SupportedPlugin;\n  metadata?: ReceiverMetadata;\n}\n\ninterface NotifierStatus {\n  lastError?: null | string;\n  lastNotify: string;\n  lastNotifyDuration: string;\n  type: string;\n  sendResolved?: boolean;\n}\n\ntype RowTableColumnProps = DynamicTableColumnProps<ReceiverItem>;\ntype RowItemTableProps = DynamicTableItemProps<ReceiverItem>;\n\ntype NotifierTableColumnProps = DynamicTableColumnProps<NotifierStatus>;\ntype NotifierItemTableProps = DynamicTableItemProps<NotifierStatus>;\n\ninterface NotifiersTableProps {\n  notifiersState: NotifiersState;\n}\n\nconst isLastNotifyNullDate = (lastNotify: string) => lastNotify === '0001-01-01T00:00:00.000Z';\n\nfunction LastNotify({ lastNotifyDate }: { lastNotifyDate: string }) {\n  if (isLastNotifyNullDate(lastNotifyDate)) {\n    return <>{'-'}</>;\n  } else {\n    return (\n      <Stack alignItems=\"center\">\n        <div>{`${dateTime(lastNotifyDate).locale('en').fromNow(true)} ago`}</div>\n        <Icon name=\"clock-nine\" />\n        <div>{`${dateTimeFormat(lastNotifyDate, { format: 'YYYY-MM-DD HH:mm:ss' })}`}</div>\n      </Stack>\n    );\n  }\n}\n\nconst possibleNullDurations = ['', '0', '0ms', '0s', '0m', '0h', '0d', '0w', '0y'];\nconst durationIsNull = (duration: string) => possibleNullDurations.includes(duration);\n\nfunction NotifiersTable({ notifiersState }: NotifiersTableProps) {\n  function getNotifierColumns(): NotifierTableColumnProps[] {\n    return [\n      {\n        id: 'health',\n        label: 'Health',\n        renderCell: ({ data: { lastError, lastNotify } }) => {\n          return (\n            <NotifierHealth\n              errorsByNotifier={lastError ? 1 : 0}\n              errorDetail={lastError ?? undefined}\n              lastNotify={lastNotify}\n            />\n          );\n        },\n        size: 0.5,\n      },\n      {\n        id: 'name',\n        label: 'Name',\n        renderCell: ({ data: { type }, id }) => <>{`${type}[${id}]`}</>,\n        size: 1,\n      },\n      {\n        id: 'lastNotify',\n        label: 'Last delivery attempt',\n        renderCell: ({ data: { lastNotify } }) => <LastNotify lastNotifyDate={lastNotify} />,\n        size: 3,\n      },\n      {\n        id: 'lastNotifyDuration',\n        label: 'Last duration',\n        renderCell: ({ data: { lastNotify, lastNotifyDuration } }) => (\n          <>{isLastNotifyNullDate(lastNotify) && durationIsNull(lastNotifyDuration) ? '-' : lastNotifyDuration}</>\n        ),\n        size: 1,\n      },\n      {\n        id: 'sendResolved',\n        label: 'Send resolved',\n        renderCell: ({ data: { sendResolved } }) => <>{String(Boolean(sendResolved))}</>,\n        size: 1,\n      },\n    ];\n  }\n\n  const notifierRows: NotifierItemTableProps[] = Object.entries(notifiersState).flatMap((typeState) =>\n    typeState[1].map((notifierStatus, index) => {\n      return {\n        id: index,\n        data: {\n          type: typeState[0],\n          lastError: notifierStatus.lastNotifyAttemptError,\n          lastNotify: notifierStatus.lastNotifyAttempt,\n          lastNotifyDuration: notifierStatus.lastNotifyAttemptDuration,\n          sendResolved: notifierStatus.sendResolved,\n        },\n      };\n    })\n  );\n\n  return <DynamicTable items={notifierRows} cols={getNotifierColumns()} pagination={{ itemsPerPage: 25 }} />;\n}\n\ninterface Props {\n  config: AlertManagerCortexConfig;\n  alertManagerName: string;\n}\n\nexport const ReceiversTable = ({ config, alertManagerName }: Props) => {\n  const dispatch = useDispatch();\n  const isVanillaAM = isVanillaPrometheusAlertManagerDataSource(alertManagerName);\n  const grafanaNotifiers = useUnifiedAlertingSelector((state) => state.grafanaNotifiers);\n\n  const configHealth = useAlertmanagerConfigHealth(config.alertmanager_config);\n  const { contactPointsState, errorStateAvailable } = useContactPointsState(alertManagerName);\n  const receiversMetadata = useReceiversMetadata(config.alertmanager_config.receivers ?? []);\n\n  // receiver name slated for deletion. If this is set, a confirmation modal is shown. If user approves, this receiver is deleted\n  const [receiverToDelete, setReceiverToDelete] = useState<string>();\n  const [showCannotDeleteReceiverModal, setShowCannotDeleteReceiverModal] = useState(false);\n\n  const [supportsExport, allowedToExport] = useAlertmanagerAbility(AlertmanagerAction.ExportContactPoint);\n  const showExport = supportsExport && allowedToExport;\n\n  const onClickDeleteReceiver = (receiverName: string): void => {\n    if (isReceiverUsed(receiverName, config)) {\n      setShowCannotDeleteReceiverModal(true);\n    } else {\n      setReceiverToDelete(receiverName);\n    }\n  };\n\n  const deleteReceiver = () => {\n    if (receiverToDelete) {\n      dispatch(deleteReceiverAction(receiverToDelete, alertManagerName));\n    }\n    setReceiverToDelete(undefined);\n  };\n\n  const rows: RowItemTableProps[] = useMemo(() => {\n    const receivers = config.alertmanager_config.receivers ?? [];\n\n    return (\n      receivers.map((receiver) => ({\n        id: receiver.name,\n        data: {\n          name: receiver.name,\n          types: Object.entries(extractNotifierTypeCounts(receiver, grafanaNotifiers.result ?? [])).map(\n            ([type, count]) => {\n              if (count > 1) {\n                return `${type} (${count})`;\n              }\n              return type;\n            }\n          ),\n          provisioned: receiver.grafana_managed_receiver_configs?.some((receiver) => receiver.provenance),\n          metadata: receiversMetadata.get(receiver),\n        },\n      })) ?? []\n    );\n  }, [grafanaNotifiers.result, config.alertmanager_config, receiversMetadata]);\n\n  const [createSupported, createAllowed] = useAlertmanagerAbility(AlertmanagerAction.CreateContactPoint);\n\n  const [_, canReadSecrets] = useAlertmanagerAbility(AlertmanagerAction.DecryptSecrets);\n\n  const columns = useGetColumns(\n    alertManagerName,\n    errorStateAvailable,\n    contactPointsState,\n    configHealth,\n    onClickDeleteReceiver,\n    isVanillaAM,\n    canReadSecrets\n  );\n\n  return (\n    <ReceiversSection\n      canReadSecrets={canReadSecrets}\n      title=\"Contact points\"\n      description=\"Define where notifications are sent, for example, email or Slack.\"\n      showButton={createSupported && createAllowed}\n      addButtonLabel={'Add contact point'}\n      addButtonTo={makeAMLink('/alerting/notifications/receivers/new', alertManagerName)}\n      showExport={showExport}\n    >\n      <DynamicTable\n        pagination={{ itemsPerPage: 25 }}\n        items={rows}\n        cols={columns}\n        isExpandable={errorStateAvailable}\n        renderExpandedContent={\n          errorStateAvailable\n            ? ({ data: { name } }) => (\n                <NotifiersTable notifiersState={contactPointsState?.receivers[name]?.notifiers ?? {}} />\n              )\n            : undefined\n        }\n      />\n      {!!showCannotDeleteReceiverModal && (\n        <Modal\n          isOpen={true}\n          title=\"Cannot delete contact point\"\n          onDismiss={() => setShowCannotDeleteReceiverModal(false)}\n        >\n          <p>\n            Contact point cannot be deleted because it is used in more policies. Please update or delete these policies\n            first.\n          </p>\n          <Modal.ButtonRow>\n            <Button variant=\"secondary\" onClick={() => setShowCannotDeleteReceiverModal(false)} fill=\"outline\">\n              Close\n            </Button>\n          </Modal.ButtonRow>\n        </Modal>\n      )}\n      {!!receiverToDelete && (\n        <ConfirmModal\n          isOpen={true}\n          title=\"Delete contact point\"\n          body={`Are you sure you want to delete contact point \"${receiverToDelete}\"?`}\n          confirmText=\"Yes, delete\"\n          onConfirm={deleteReceiver}\n          onDismiss={() => setReceiverToDelete(undefined)}\n        />\n      )}\n    </ReceiversSection>\n  );\n};\nconst errorsByReceiver = (contactPointsState: ContactPointsState, receiverName: string) =>\n  contactPointsState?.receivers[receiverName]?.errorCount ?? 0;\n\nconst someNotifiersWithNoAttempt = (contactPointsState: ContactPointsState, receiverName: string) => {\n  const notifiers = Object.values(contactPointsState?.receivers[receiverName]?.notifiers ?? {});\n\n  if (notifiers.length === 0) {\n    return false;\n  }\n\n  const hasSomeWitNoAttempt = notifiers.flat().some((status) => isLastNotifyNullDate(status.lastNotifyAttempt));\n  return hasSomeWitNoAttempt;\n};\n\nfunction useGetColumns(\n  alertManagerName: string,\n  errorStateAvailable: boolean,\n  contactPointsState: ContactPointsState | undefined,\n  configHealth: AlertmanagerConfigHealth,\n  onClickDeleteReceiver: (receiverName: string) => void,\n  isVanillaAM: boolean,\n  canReadSecrets: boolean\n): RowTableColumnProps[] {\n  const tableStyles = useStyles2(getAlertTableStyles);\n\n  const enableHealthColumn =\n    errorStateAvailable || Object.values(configHealth.contactPoints).some((cp) => cp.matchingRoutes === 0);\n\n  const isGrafanaAlertManager = alertManagerName === GRAFANA_RULES_SOURCE_NAME;\n\n  const baseColumns: RowTableColumnProps[] = [\n    {\n      id: 'name',\n      label: 'Contact point name',\n      renderCell: ({ data: { name, provisioned } }) => (\n        <>\n          <div>{name}</div>\n          {provisioned && <ProvisioningBadge />}\n        </>\n      ),\n      size: 3,\n      className: tableStyles.nameCell,\n    },\n    {\n      id: 'type',\n      label: 'Type',\n      renderCell: ({ data: { types, metadata } }) => (\n        <>{metadata ? <ReceiverMetadataBadge metadata={metadata} /> : types.join(', ')}</>\n      ),\n      size: 2,\n    },\n  ];\n  const healthColumn: RowTableColumnProps = {\n    id: 'health',\n    label: 'Health',\n    renderCell: ({ data: { name } }) => {\n      if (configHealth.contactPoints[name]?.matchingRoutes === 0) {\n        return <UnusedContactPointBadge />;\n      }\n\n      return (\n        contactPointsState &&\n        Object.entries(contactPointsState.receivers).length > 0 && (\n          <ReceiverHealth\n            errorsByReceiver={errorsByReceiver(contactPointsState, name)}\n            someWithNoAttempt={someNotifiersWithNoAttempt(contactPointsState, name)}\n          />\n        )\n      );\n    },\n    size: '160px',\n  };\n\n  return [\n    ...baseColumns,\n    ...(enableHealthColumn ? [healthColumn] : []),\n    {\n      id: 'actions',\n      label: 'Actions',\n      renderCell: ({ data: { provisioned, name } }) => (\n        <Authorize\n          actions={[\n            AlertmanagerAction.UpdateContactPoint,\n            AlertmanagerAction.DeleteContactPoint,\n            AlertmanagerAction.ExportContactPoint,\n          ]}\n        >\n          <div className={tableStyles.actionsCell}>\n            {!isVanillaAM && !provisioned && (\n              <UpdateActions\n                alertManagerName={alertManagerName}\n                receiverName={name}\n                onClickDeleteReceiver={onClickDeleteReceiver}\n              />\n            )}\n            {(isVanillaAM || provisioned) && <ViewAction alertManagerName={alertManagerName} receiverName={name} />}\n            {isGrafanaAlertManager && (\n              <ExportAction alertManagerName={alertManagerName} receiverName={name} canReadSecrets={canReadSecrets} />\n            )}\n          </div>\n        </Authorize>\n      ),\n      size: '100px',\n    },\n  ];\n}\n\nexport function UnusedContactPointBadge() {\n  return (\n    <Badge\n      text=\"Unused\"\n      color=\"orange\"\n      icon=\"exclamation-triangle\"\n      tooltip=\"This contact point is not used in any notification policy and it will not receive any alerts\"\n    />\n  );\n}\n","import React, { Fragment, useMemo, useState } from 'react';\n\nimport { ConfirmModal, useStyles2 } from '@grafana/ui';\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { Authorize } from '../../components/Authorize';\nimport { AlertmanagerAction } from '../../hooks/useAbilities';\nimport { deleteTemplateAction } from '../../state/actions';\nimport { getAlertTableStyles } from '../../styles/table';\nimport { makeAMLink } from '../../utils/misc';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { DetailsField } from '../DetailsField';\nimport { ProvisioningBadge } from '../Provisioning';\nimport { ActionIcon } from '../rules/ActionIcon';\n\nimport { TemplateEditor } from './TemplateEditor';\n\ninterface Props {\n  config: AlertManagerCortexConfig;\n  alertManagerName: string;\n}\n\nexport const TemplatesTable = ({ config, alertManagerName }: Props) => {\n  const dispatch = useDispatch();\n  const [expandedTemplates, setExpandedTemplates] = useState<Record<string, boolean>>({});\n  const tableStyles = useStyles2(getAlertTableStyles);\n\n  const templateRows = useMemo(() => {\n    const templates = Object.entries(config.template_files);\n\n    return templates.map(([name, template]) => ({\n      name,\n      template,\n      provenance: (config.template_file_provenances ?? {})[name],\n    }));\n  }, [config]);\n  const [templateToDelete, setTemplateToDelete] = useState<string>();\n\n  const deleteTemplate = () => {\n    if (templateToDelete) {\n      dispatch(deleteTemplateAction(templateToDelete, alertManagerName));\n    }\n    setTemplateToDelete(undefined);\n  };\n\n  return (\n    <>\n      <table className={tableStyles.table} data-testid=\"templates-table\">\n        <colgroup>\n          <col className={tableStyles.colExpand} />\n          <col />\n          <col />\n        </colgroup>\n        <thead>\n          <tr>\n            <th></th>\n            <th>Template</th>\n            <Authorize\n              actions={[\n                AlertmanagerAction.CreateNotificationTemplate,\n                AlertmanagerAction.UpdateNotificationTemplate,\n                AlertmanagerAction.DeleteNotificationTemplate,\n              ]}\n            >\n              <th>Actions</th>\n            </Authorize>\n          </tr>\n        </thead>\n        <tbody>\n          {!templateRows.length && (\n            <tr className={tableStyles.evenRow}>\n              <td colSpan={3}>No templates defined.</td>\n            </tr>\n          )}\n          {templateRows.map(({ name, template, provenance }, idx) => {\n            const isExpanded = !!expandedTemplates[name];\n            return (\n              <Fragment key={name}>\n                <tr key={name} className={idx % 2 === 0 ? tableStyles.evenRow : undefined}>\n                  <td>\n                    <CollapseToggle\n                      isCollapsed={!expandedTemplates[name]}\n                      onToggle={() => setExpandedTemplates({ ...expandedTemplates, [name]: !isExpanded })}\n                    />\n                  </td>\n                  <td>\n                    {name} {provenance && <ProvisioningBadge />}\n                  </td>\n                  <td className={tableStyles.actionsCell}>\n                    {provenance && (\n                      <ActionIcon\n                        to={makeAMLink(\n                          `/alerting/notifications/templates/${encodeURIComponent(name)}/edit`,\n                          alertManagerName\n                        )}\n                        tooltip=\"view template\"\n                        icon=\"file-alt\"\n                      />\n                    )}\n                    {!provenance && (\n                      <Authorize actions={[AlertmanagerAction.UpdateNotificationTemplate]}>\n                        <ActionIcon\n                          to={makeAMLink(\n                            `/alerting/notifications/templates/${encodeURIComponent(name)}/edit`,\n                            alertManagerName\n                          )}\n                          tooltip=\"edit template\"\n                          icon=\"pen\"\n                        />\n                      </Authorize>\n                    )}\n                    <Authorize actions={[AlertmanagerAction.CreateContactPoint]}>\n                      <ActionIcon\n                        to={makeAMLink(\n                          `/alerting/notifications/templates/${encodeURIComponent(name)}/duplicate`,\n                          alertManagerName\n                        )}\n                        tooltip=\"Copy template\"\n                        icon=\"copy\"\n                      />\n                    </Authorize>\n                    {!provenance && (\n                      <Authorize actions={[AlertmanagerAction.DeleteNotificationTemplate]}>\n                        <ActionIcon\n                          onClick={() => setTemplateToDelete(name)}\n                          tooltip=\"delete template\"\n                          icon=\"trash-alt\"\n                        />\n                      </Authorize>\n                    )}\n                  </td>\n                </tr>\n                {isExpanded && (\n                  <tr className={idx % 2 === 0 ? tableStyles.evenRow : undefined}>\n                    <td></td>\n                    <td colSpan={2}>\n                      <DetailsField label=\"Description\" horizontal={true}>\n                        <TemplateEditor\n                          width={'auto'}\n                          height={'auto'}\n                          autoHeight={true}\n                          value={template}\n                          showLineNumbers={false}\n                          monacoOptions={{\n                            readOnly: true,\n                            scrollBeyondLastLine: false,\n                          }}\n                        />\n                      </DetailsField>\n                    </td>\n                  </tr>\n                )}\n              </Fragment>\n            );\n          })}\n        </tbody>\n      </table>\n\n      {!!templateToDelete && (\n        <ConfirmModal\n          isOpen={true}\n          title=\"Delete template\"\n          body={`Are you sure you want to delete template \"${templateToDelete}\"?`}\n          confirmText=\"Yes, delete\"\n          onConfirm={deleteTemplate}\n          onDismiss={() => setTemplateToDelete(undefined)}\n        />\n      )}\n    </>\n  );\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getAlertTableStyles = (theme: GrafanaTheme2) => ({\n  table: css`\n    width: 100%;\n    border-radius: ${theme.shape.radius.default};\n    border: solid 1px ${theme.colors.border.weak};\n    background-color: ${theme.colors.background.secondary};\n\n    th {\n      padding: ${theme.spacing(1)};\n    }\n\n    td {\n      padding: 0 ${theme.spacing(1)};\n    }\n\n    tr {\n      height: 38px;\n    }\n  `,\n  evenRow: css`\n    background-color: ${theme.colors.background.primary};\n  `,\n  colExpand: css`\n    width: 36px;\n  `,\n  nameCell: css`\n    gap: ${theme.spacing(1)};\n  `,\n  actionsCell: css`\n    text-align: right;\n    width: 1%;\n    white-space: nowrap;\n\n    & > * + * {\n      margin-left: ${theme.spacing(0.5)};\n    }\n  `,\n});\n","import { capitalize, isEmpty, times } from 'lodash';\n\nimport { receiverTypeNames } from 'app/plugins/datasource/alertmanager/consts';\nimport { GrafanaManagedReceiverConfig, Receiver } from 'app/plugins/datasource/alertmanager/types';\nimport { NotifierDTO } from 'app/types';\n\n// extract notifier type name to count map, eg { Slack: 1, Email: 2 }\n\ntype NotifierTypeCounts = Record<string, number>; // name : count\n\nexport function extractNotifierTypeCounts(receiver: Receiver, grafanaNotifiers: NotifierDTO[]): NotifierTypeCounts {\n  if ('grafana_managed_receiver_configs' in receiver) {\n    return getGrafanaNotifierTypeCounts(receiver.grafana_managed_receiver_configs ?? [], grafanaNotifiers);\n  }\n  return getCortexAlertManagerNotifierTypeCounts(receiver);\n}\n\nfunction getCortexAlertManagerNotifierTypeCounts(receiver: Receiver): NotifierTypeCounts {\n  return Object.entries(receiver)\n    .filter(([key]) => key !== 'grafana_managed_receiver_configs' && key.endsWith('_configs')) // filter out only properties that are alertmanager notifier\n    .filter(([_, value]) => Array.isArray(value) && !!value.length) // check that there are actually notifiers of this type configured\n    .reduce<NotifierTypeCounts>((acc, [key, value]) => {\n      const type = key.replace('_configs', ''); // remove the `_config` part from the key, making it intto a notifier name\n      const name = receiverTypeNames[type] ?? capitalize(type);\n      return {\n        ...acc,\n        [name]: (acc[name] ?? 0) + (Array.isArray(value) ? value.length : 1),\n      };\n    }, {});\n}\n\n/**\n * This function will extract the integrations that have been defined for either grafana managed contact point\n * or vanilla Alertmanager receiver.\n *\n * It will attempt to normalize the data structure to how they have been defined for Grafana managed contact points.\n * That way we can work with the same data structure in the UI.\n *\n * We don't normalize the configuration settings and those are blank for vanilla Alertmanager receivers.\n *\n * Example input:\n *  { name: 'my receiver', email_configs: [{ from: \"foo@bar.com\" }] }\n *\n * Example output:\n *  { name: 'my receiver', grafana_managed_receiver_configs: [{ type: 'email', settings: {} }] }\n */\nexport function extractReceivers(receiver: Receiver): GrafanaManagedReceiverConfig[] {\n  if ('grafana_managed_receiver_configs' in receiver) {\n    return receiver.grafana_managed_receiver_configs ?? [];\n  }\n\n  const integrations = Object.entries(receiver)\n    .filter(([key]) => key !== 'grafana_managed_receiver_configs' && key.endsWith('_configs'))\n    .filter(([_, value]) => Array.isArray(value) && !isEmpty(value))\n    .reduce((acc: GrafanaManagedReceiverConfig[], [key, value]) => {\n      const type = key.replace('_configs', '');\n\n      const configs = times(value.length, () => ({\n        name: receiver.name,\n        type: type,\n        settings: [], // we don't normalize the configuration values\n        disableResolveMessage: false,\n      }));\n\n      return acc.concat(configs);\n    }, []);\n\n  return integrations;\n}\n\nfunction getGrafanaNotifierTypeCounts(\n  configs: GrafanaManagedReceiverConfig[],\n  grafanaNotifiers: NotifierDTO[]\n): NotifierTypeCounts {\n  return configs\n    .map((recv) => recv.type) // extract types from config\n    .map((type) => grafanaNotifiers.find((r) => r.type === type)?.name ?? capitalize(type)) // get readable name from notifier cofnig, or if not available, just capitalize\n    .reduce<NotifierTypeCounts>(\n      (acc, type) => ({\n        ...acc,\n        [type]: (acc[type] ?? 0) + 1,\n      }),\n      {}\n    );\n}\n","export const receiverTypeNames: Record<string, string> = {\n  pagerduty: 'PagerDuty',\n  pushover: 'Pushover',\n  slack: 'Slack',\n  opsgenie: 'OpsGenie',\n  webhook: 'Webhook',\n  victorops: 'VictorOps',\n  wechat: 'WeChat',\n  discord: 'Discord',\n  webex: 'Cisco Webex Teams',\n  sns: 'Amazon SNS',\n  telegram: 'Telegram',\n  msteams: 'Microsoft Teams',\n};\n"],"names":["RECEIVER_STATUS_KEY","RECEIVER_STATUS_POLLING_INTERVAL","useContactPointsWithStatus","selectedAlertmanager","isGrafanaManagedAlertmanager","fetchContactPointsStatus","fetchAlertmanagerConfiguration","result","error","isLoading","contactPoints","useDeleteContactPoint","fetchAlertmanagerConfig","updateAlertManager","updateAlertmanagerState","contactPointName","data","newConfig","draft","receiver","isProvisioned","contactPoint","getReceiverDescription","summarizeEmailAddresses","channelName","addresses","SUPPORTED_SEPARATORS","notShown","truncatedAddresses","enhanceContactPointsWithStatus","status","fullyInheritedTree","usedContactPoints","getUsedContactPoints","usedContactPointsByName","receivers","statusForReceiver","index","route","childrenContactPoints","ReceiversAndTemplatesView","config","alertManagerName","isVanillaAM","TemplatesView","GlobalConfigAlert","createNotificationTemplateSupported","createNotificationTemplateAllowed","GrafanaReceiversExportPreview","decrypt","exportFormat","onClose","receiverDefinition","isFetching","alertRuleApi","downloadFileName","LoadingPlaceholder","FileExportPreview","GrafanaReceiversExporter","activeTab","setActiveTab","GrafanaExportDrawer","ReceiversSection","className","title","description","addButtonLabel","addButtonTo","children","showButton","canReadSecrets","showExport","styles","getStyles","showMore","showExportDrawer","toggleShowExportDrawer","useToggle","newMenu","Menu","MenuItem","Stack","Button","Dropdown","Icon","theme","GrafanaReceiverExportPreview","receiverName","GrafanaReceiverExporter","ReceiverMetadataBadge","icon","externalUrl","warning","Tooltip","onCallReceiverMeta","useReceiversMetadata","isOnCallEnabled","usePluginBridge","onCallIntegrations","onCallApi","onCallReceiver","c","matchingOnCallIntegration","i","useAlertmanagerConfigHealth","r","definedContactPointNames","usedContactPointCounts","contactPointsHealth","configHealth","UpdateActions","onClickDeleteReceiver","Authorize","ActionIcon","ViewAction","ExportAction","ReceiverError","errorCount","errorDetail","showErrorCount","tooltip","text","tooltipToRender","Badge","NotifierHealth","errorsByNotifier","lastNotify","hasErrors","noAttempts","isLastNotifyNullDate","ReceiverHealth","errorsByReceiver","someWithNoAttempt","useContactPointsState","contactPointsState","errorStateAvailable","LastNotify","lastNotifyDate","possibleNullDurations","durationIsNull","duration","NotifiersTable","notifiersState","getNotifierColumns","lastError","type","id","lastNotifyDuration","sendResolved","notifierRows","typeState","notifierStatus","DynamicTable","ReceiversTable","dispatch","grafanaNotifiers","useUnifiedAlertingSelector","state","receiversMetadata","receiverToDelete","setReceiverToDelete","showCannotDeleteReceiverModal","setShowCannotDeleteReceiverModal","supportsExport","allowedToExport","deleteReceiver","rows","count","createSupported","createAllowed","_","columns","useGetColumns","name","Modal","ConfirmModal","someNotifiersWithNoAttempt","notifiers","tableStyles","enableHealthColumn","cp","isGrafanaAlertManager","baseColumns","provisioned","Provisioning","types","metadata","healthColumn","UnusedContactPointBadge","TemplatesTable","expandedTemplates","setExpandedTemplates","templateRows","template","templateToDelete","setTemplateToDelete","deleteTemplate","provenance","idx","isExpanded","getAlertTableStyles","extractNotifierTypeCounts","getGrafanaNotifierTypeCounts","getCortexAlertManagerNotifierTypeCounts","key","value","acc","extractReceivers","configs","recv","receiverTypeNames"],"sourceRoot":""}