{"version":3,"file":"4073.fc3c0c43afc757b56a88.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/api/onCallApi.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/CloudCommonChannelSettings.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/CloudReceiverForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/GrafanaCommonChannelSettings.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/TestContactPointModal.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/GrafanaReceiverForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/ChannelOptions.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/ChannelSubForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/fields/DeletedSubform.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/util.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/ReceiverForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/grafanaAppReceivers/onCall/onCall.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/grafanaAppReceivers/onCall/useOnCallIntegration.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/grafanaAppReceivers/types.ts"],"sourcesContent":["import { FetchError, isFetchError } from '@grafana/runtime';\n\nimport { GRAFANA_ONCALL_INTEGRATION_TYPE } from '../components/receivers/grafanaAppReceivers/onCall/onCall';\nimport { SupportedPlugin } from '../types/pluginBridges';\n\nimport { alertingApi } from './alertingApi';\n\nexport interface NewOnCallIntegrationDTO {\n  id: string;\n  connected_escalations_chains_count: number;\n  integration: string;\n  integration_url: string;\n  verbal_name: string;\n}\n\nexport interface OnCallPaginatedResult<T> {\n  results: T[];\n}\n\nexport const ONCALL_INTEGRATION_V2_FEATURE = 'grafana_alerting_v2';\ntype OnCallFeature = typeof ONCALL_INTEGRATION_V2_FEATURE | string;\n\ntype AlertReceiveChannelsResult = OnCallPaginatedResult<OnCallIntegrationDTO> | OnCallIntegrationDTO[];\n\nexport interface OnCallIntegrationDTO {\n  value: string;\n  display_name: string;\n  integration_url: string;\n}\n\nexport interface CreateIntegrationDTO {\n  integration: typeof GRAFANA_ONCALL_INTEGRATION_TYPE; // The only one supported right now\n  verbal_name: string;\n}\n\nconst getProxyApiUrl = (path: string) => `/api/plugin-proxy/${SupportedPlugin.OnCall}${path}`;\n\nexport const onCallApi = alertingApi.injectEndpoints({\n  endpoints: (build) => ({\n    grafanaOnCallIntegrations: build.query<OnCallIntegrationDTO[], void>({\n      query: () => ({\n        url: getProxyApiUrl('/api/internal/v1/alert_receive_channels/'),\n        // legacy_grafana_alerting is necessary for OnCall.\n        // We do NOT need to differentiate between these two on our side\n        params: { filters: true, integration: [GRAFANA_ONCALL_INTEGRATION_TYPE, 'legacy_grafana_alerting'] },\n      }),\n      transformResponse: (response: AlertReceiveChannelsResult) => {\n        if (isPaginatedResponse(response)) {\n          return response.results;\n        }\n        return response;\n      },\n      providesTags: ['OnCallIntegrations'],\n    }),\n    validateIntegrationName: build.query<boolean, string>({\n      query: (name) => ({\n        url: getProxyApiUrl('/api/internal/v1/alert_receive_channels/validate_name/'),\n        params: { verbal_name: name },\n        showErrorAlert: false,\n      }),\n    }),\n    createIntegration: build.mutation<NewOnCallIntegrationDTO, CreateIntegrationDTO>({\n      query: (integration) => ({\n        url: getProxyApiUrl('/api/internal/v1/alert_receive_channels/'),\n        data: integration,\n        method: 'POST',\n        showErrorAlert: true,\n      }),\n      invalidatesTags: ['OnCallIntegrations'],\n    }),\n    features: build.query<OnCallFeature[], void>({\n      query: () => ({\n        url: getProxyApiUrl('/api/internal/v1/features/'),\n      }),\n    }),\n  }),\n});\n\nfunction isPaginatedResponse(\n  response: AlertReceiveChannelsResult\n): response is OnCallPaginatedResult<OnCallIntegrationDTO> {\n  return 'results' in response && Array.isArray(response.results);\n}\n\nexport const { useGrafanaOnCallIntegrationsQuery } = onCallApi;\n\nexport function isOnCallFetchError(error: unknown): error is FetchError<{ detail: string }> {\n  return isFetchError(error) && 'detail' in error.data;\n}\n","import React from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nimport { Checkbox, Field } from '@grafana/ui';\n\nimport { CommonSettingsComponentProps } from '../../../types/receiver-form';\n\nexport const CloudCommonChannelSettings = ({\n  pathPrefix,\n  className,\n  readOnly = false,\n}: CommonSettingsComponentProps) => {\n  const { register } = useFormContext();\n  return (\n    <div className={className}>\n      <Field disabled={readOnly}>\n        <Checkbox\n          {...register(`${pathPrefix}sendResolved`)}\n          label=\"Send resolved\"\n          disabled={readOnly}\n          description=\"Whether or not to notify about resolved alerts.\"\n        />\n      </Field>\n    </div>\n  );\n};\n","import React, { useMemo } from 'react';\n\nimport { Alert } from '@grafana/ui';\nimport { AlertManagerCortexConfig, Receiver } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { alertmanagerApi } from '../../../api/alertmanagerApi';\nimport { updateAlertManagerConfigAction } from '../../../state/actions';\nimport { CloudChannelValues, ReceiverFormValues, CloudChannelMap } from '../../../types/receiver-form';\nimport { cloudNotifierTypes } from '../../../utils/cloud-alertmanager-notifier-types';\nimport { isVanillaPrometheusAlertManagerDataSource } from '../../../utils/datasource';\nimport {\n  cloudReceiverToFormValues,\n  formValuesToCloudReceiver,\n  updateConfigWithReceiver,\n} from '../../../utils/receiver-form';\n\nimport { CloudCommonChannelSettings } from './CloudCommonChannelSettings';\nimport { ReceiverForm } from './ReceiverForm';\nimport { Notifier } from './notifiers';\n\ninterface Props {\n  alertManagerSourceName: string;\n  config: AlertManagerCortexConfig;\n  existing?: Receiver;\n}\n\nconst defaultChannelValues: CloudChannelValues = Object.freeze({\n  __id: '',\n  sendResolved: true,\n  secureSettings: {},\n  settings: {},\n  secureFields: {},\n  type: 'email',\n});\n\nconst cloudNotifiers = cloudNotifierTypes.map<Notifier>((n) => ({ dto: n }));\n\nexport const CloudReceiverForm = ({ existing, alertManagerSourceName, config }: Props) => {\n  const dispatch = useDispatch();\n  const isVanillaAM = isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName);\n\n  // transform receiver DTO to form values\n  const [existingValue] = useMemo((): [ReceiverFormValues<CloudChannelValues> | undefined, CloudChannelMap] => {\n    if (!existing) {\n      return [undefined, {}];\n    }\n    return cloudReceiverToFormValues(existing, cloudNotifierTypes);\n  }, [existing]);\n\n  const onSubmit = async (values: ReceiverFormValues<CloudChannelValues>) => {\n    const newReceiver = formValuesToCloudReceiver(values, defaultChannelValues);\n    await dispatch(\n      updateAlertManagerConfigAction({\n        newConfig: updateConfigWithReceiver(config, newReceiver, existing?.name),\n        oldConfig: config,\n        alertManagerSourceName,\n        successMessage: existing ? 'Contact point updated.' : 'Contact point created.',\n        redirectPath: '/alerting/notifications',\n      })\n    ).then(() => {\n      dispatch(alertmanagerApi.util.invalidateTags(['AlertmanagerConfiguration']));\n    });\n  };\n\n  const takenReceiverNames = useMemo(\n    () => config.alertmanager_config.receivers?.map(({ name }) => name).filter((name) => name !== existing?.name) ?? [],\n    [config, existing]\n  );\n\n  // this basically checks if we can manage the selected alert manager data source, either because it's a Grafana Managed one\n  // or a Mimir-based AlertManager\n  const isManageableAlertManagerDataSource = !isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName);\n\n  return (\n    <>\n      {!isVanillaAM && (\n        <Alert title=\"Info\" severity=\"info\">\n          Note that empty string values will be replaced with global defaults where appropriate.\n        </Alert>\n      )}\n      <ReceiverForm<CloudChannelValues>\n        isEditable={isManageableAlertManagerDataSource}\n        isTestable={isManageableAlertManagerDataSource}\n        config={config}\n        onSubmit={onSubmit}\n        initialValues={existingValue}\n        notifiers={cloudNotifiers}\n        alertManagerSourceName={alertManagerSourceName}\n        defaultItem={defaultChannelValues}\n        takenReceiverNames={takenReceiverNames}\n        commonSettingsComponent={CloudCommonChannelSettings}\n      />\n    </>\n  );\n};\n","import React from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nimport { Checkbox, Field } from '@grafana/ui';\n\nimport { CommonSettingsComponentProps } from '../../../types/receiver-form';\n\nexport const GrafanaCommonChannelSettings = ({\n  pathPrefix,\n  className,\n  readOnly = false,\n}: CommonSettingsComponentProps) => {\n  const { register } = useFormContext();\n  return (\n    <div className={className}>\n      <Field>\n        <Checkbox\n          {...register(`${pathPrefix}disableResolveMessage`)}\n          label=\"Disable resolved message\"\n          description=\"Disable the resolve message [OK] that is sent when alerting state returns to false\"\n          disabled={readOnly}\n        />\n      </Field>\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { FormProvider, useForm } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Label, Modal, RadioButtonGroup, useStyles2 } from '@grafana/ui';\nimport { TestReceiversAlert } from 'app/plugins/datasource/alertmanager/types';\nimport { Annotations, Labels } from 'app/types/unified-alerting-dto';\n\nimport { defaultAnnotations } from '../../../utils/constants';\nimport AnnotationsStep from '../../rule-editor/AnnotationsStep';\nimport LabelsField from '../../rule-editor/LabelsField';\n\ninterface Props {\n  isOpen: boolean;\n  onDismiss: () => void;\n  onTest: (alert?: TestReceiversAlert) => void;\n}\n\ntype AnnoField = {\n  key: string;\n  value: string;\n};\n\ninterface FormFields {\n  annotations: AnnoField[];\n  labels: AnnoField[];\n}\n\nenum NotificationType {\n  predefined = 'Predefined',\n  custom = 'Custom',\n}\n\nconst notificationOptions = Object.values(NotificationType).map((value) => ({ label: value, value: value }));\n\nconst defaultValues: FormFields = {\n  annotations: [...defaultAnnotations],\n  labels: [{ key: '', value: '' }],\n};\n\nexport const TestContactPointModal = ({ isOpen, onDismiss, onTest }: Props) => {\n  const [notificationType, setNotificationType] = useState<NotificationType>(NotificationType.predefined);\n  const styles = useStyles2(getStyles);\n  const formMethods = useForm<FormFields>({ defaultValues, mode: 'onBlur' });\n\n  const onSubmit = (data: FormFields) => {\n    if (notificationType === NotificationType.custom) {\n      const alert = {\n        annotations: data.annotations\n          .filter(({ key, value }) => !!key && !!value)\n          .reduce<Annotations>((acc, { key, value }) => {\n            return { ...acc, [key]: value };\n          }, {}),\n        labels: data.labels\n          .filter(({ key, value }) => !!key && !!value)\n          .reduce<Labels>((acc, { key, value }) => {\n            return { ...acc, [key]: value };\n          }, {}),\n      };\n      onTest(alert);\n    } else {\n      onTest();\n    }\n  };\n\n  return (\n    <Modal onDismiss={onDismiss} isOpen={isOpen} title={'Test contact point'}>\n      <div className={styles.section}>\n        <Label>Notification message</Label>\n        <RadioButtonGroup\n          options={notificationOptions}\n          value={notificationType}\n          onChange={(value) => setNotificationType(value)}\n        />\n      </div>\n\n      <FormProvider {...formMethods}>\n        <form onSubmit={formMethods.handleSubmit(onSubmit)}>\n          {notificationType === NotificationType.predefined && (\n            <div className={styles.section}>\n              You will send a test notification that uses a predefined alert. If you have defined a custom template or\n              message, for better results switch to <strong>custom</strong> notification message, from above.\n            </div>\n          )}\n          {notificationType === NotificationType.custom && (\n            <>\n              <div className={styles.section}>\n                You will send a test notification that uses the annotations defined below. This is a good option if you\n                use custom templates and messages.\n              </div>\n              <div className={styles.section}>\n                <AnnotationsStep />\n              </div>\n              <div className={styles.section}>\n                <LabelsField />\n              </div>\n            </>\n          )}\n\n          <Modal.ButtonRow>\n            <Button type=\"submit\">Send test notification</Button>\n          </Modal.ButtonRow>\n        </form>\n      </FormProvider>\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    align-items: flex-start;\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  section: css`\n    margin-bottom: ${theme.spacing(2)};\n  `,\n});\n","import React, { useMemo, useState } from 'react';\n\nimport { Alert, LoadingPlaceholder } from '@grafana/ui';\nimport {\n  AlertManagerCortexConfig,\n  GrafanaManagedContactPoint,\n  GrafanaManagedReceiverConfig,\n  TestReceiversAlert,\n} from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { alertmanagerApi } from '../../../api/alertmanagerApi';\nimport { testReceiversAction, updateAlertManagerConfigAction } from '../../../state/actions';\nimport { GrafanaChannelValues, ReceiverFormValues } from '../../../types/receiver-form';\nimport { GRAFANA_RULES_SOURCE_NAME, isVanillaPrometheusAlertManagerDataSource } from '../../../utils/datasource';\nimport {\n  formChannelValuesToGrafanaChannelConfig,\n  formValuesToGrafanaReceiver,\n  grafanaReceiverToFormValues,\n  updateConfigWithReceiver,\n} from '../../../utils/receiver-form';\nimport { ProvisionedResource, ProvisioningAlert } from '../../Provisioning';\nimport { ReceiverTypes } from '../grafanaAppReceivers/onCall/onCall';\nimport { useOnCallIntegration } from '../grafanaAppReceivers/onCall/useOnCallIntegration';\n\nimport { GrafanaCommonChannelSettings } from './GrafanaCommonChannelSettings';\nimport { ReceiverForm } from './ReceiverForm';\nimport { TestContactPointModal } from './TestContactPointModal';\nimport { Notifier } from './notifiers';\n\ninterface Props {\n  alertManagerSourceName: string;\n  config: AlertManagerCortexConfig;\n  existing?: GrafanaManagedContactPoint;\n}\n\nconst defaultChannelValues: GrafanaChannelValues = Object.freeze({\n  __id: '',\n  secureSettings: {},\n  settings: {},\n  secureFields: {},\n  disableResolveMessage: false,\n  type: 'email',\n});\n\nexport const GrafanaReceiverForm = ({ existing, alertManagerSourceName, config }: Props) => {\n  const dispatch = useDispatch();\n\n  const {\n    onCallNotifierMeta,\n    extendOnCallNotifierFeatures,\n    extendOnCallReceivers,\n    onCallFormValidators,\n    createOnCallIntegrations,\n    isLoadingOnCallIntegration,\n    hasOnCallError,\n  } = useOnCallIntegration();\n\n  const { useGrafanaNotifiersQuery } = alertmanagerApi;\n  const { data: grafanaNotifiers = [], isLoading: isLoadingNotifiers } = useGrafanaNotifiersQuery();\n\n  const [testChannelValues, setTestChannelValues] = useState<GrafanaChannelValues>();\n\n  // transform receiver DTO to form values\n  const [existingValue, id2original] = useMemo((): [\n    ReceiverFormValues<GrafanaChannelValues> | undefined,\n    Record<string, GrafanaManagedReceiverConfig>,\n  ] => {\n    if (!existing || isLoadingNotifiers || isLoadingOnCallIntegration) {\n      return [undefined, {}];\n    }\n\n    return grafanaReceiverToFormValues(extendOnCallReceivers(existing), grafanaNotifiers);\n  }, [existing, isLoadingNotifiers, grafanaNotifiers, extendOnCallReceivers, isLoadingOnCallIntegration]);\n\n  const onSubmit = async (values: ReceiverFormValues<GrafanaChannelValues>) => {\n    const newReceiver = formValuesToGrafanaReceiver(values, id2original, defaultChannelValues, grafanaNotifiers);\n    const receiverWithOnCall = await createOnCallIntegrations(newReceiver);\n\n    const newConfig = updateConfigWithReceiver(config, receiverWithOnCall, existing?.name);\n    await dispatch(\n      updateAlertManagerConfigAction({\n        newConfig: newConfig,\n        oldConfig: config,\n        alertManagerSourceName: GRAFANA_RULES_SOURCE_NAME,\n        successMessage: existing ? 'Contact point updated.' : 'Contact point created',\n        redirectPath: '/alerting/notifications',\n      })\n    ).then(() => {\n      dispatch(alertmanagerApi.util.invalidateTags(['AlertmanagerConfiguration']));\n    });\n  };\n\n  const onTestChannel = (values: GrafanaChannelValues) => {\n    setTestChannelValues(values);\n  };\n\n  const testNotification = (alert?: TestReceiversAlert) => {\n    if (testChannelValues) {\n      const existing: GrafanaManagedReceiverConfig | undefined = id2original[testChannelValues.__id];\n      const chan = formChannelValuesToGrafanaChannelConfig(testChannelValues, defaultChannelValues, 'test', existing);\n\n      const payload = {\n        alertManagerSourceName,\n        receivers: [\n          {\n            name: 'test',\n            grafana_managed_receiver_configs: [chan],\n          },\n        ],\n        alert,\n      };\n\n      dispatch(testReceiversAction(payload));\n    }\n  };\n\n  const takenReceiverNames = useMemo(\n    () => config.alertmanager_config.receivers?.map(({ name }) => name).filter((name) => name !== existing?.name) ?? [],\n    [config, existing]\n  );\n\n  // if any receivers in the contact point have a \"provenance\", the entire contact point should be readOnly\n  const hasProvisionedItems = existing\n    ? (existing.grafana_managed_receiver_configs ?? []).some((item) => Boolean(item.provenance))\n    : false;\n\n  // this basically checks if we can manage the selected alert manager data source, either because it's a Grafana Managed one\n  // or a Mimir-based AlertManager\n  const isManageableAlertManagerDataSource = !isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName);\n\n  const isEditable = isManageableAlertManagerDataSource && !hasProvisionedItems;\n  const isTestable = isManageableAlertManagerDataSource || hasProvisionedItems;\n\n  if (isLoadingNotifiers || isLoadingOnCallIntegration) {\n    return <LoadingPlaceholder text=\"Loading notifiers...\" />;\n  }\n\n  const notifiers: Notifier[] = grafanaNotifiers.map((n) => {\n    if (n.type === 'oncall') {\n      return {\n        dto: extendOnCallNotifierFeatures(n),\n        meta: onCallNotifierMeta,\n      };\n    }\n\n    return { dto: n };\n  });\n\n  return (\n    <>\n      {hasOnCallError && (\n        <Alert severity=\"error\" title=\"Loading OnCall integration failed\">\n          Grafana OnCall plugin has been enabled in your Grafana instances but it is not reachable. Please check the\n          plugin configuration\n        </Alert>\n      )}\n\n      {hasProvisionedItems && <ProvisioningAlert resource={ProvisionedResource.ContactPoint} />}\n\n      <ReceiverForm<GrafanaChannelValues>\n        isEditable={isEditable}\n        isTestable={isTestable}\n        config={config}\n        onSubmit={onSubmit}\n        initialValues={existingValue}\n        onTestChannel={onTestChannel}\n        notifiers={notifiers}\n        alertManagerSourceName={alertManagerSourceName}\n        defaultItem={{ ...defaultChannelValues }}\n        takenReceiverNames={takenReceiverNames}\n        commonSettingsComponent={GrafanaCommonChannelSettings}\n        customValidators={{ [ReceiverTypes.OnCall]: onCallFormValidators }}\n      />\n      <TestContactPointModal\n        onDismiss={() => setTestChannelValues(undefined)}\n        isOpen={!!testChannelValues}\n        onTest={(alert) => testNotification(alert)}\n      />\n    </>\n  );\n};\n","import React from 'react';\nimport { useFormContext, FieldError, FieldErrors, DeepMap } from 'react-hook-form';\n\nimport { Button, Field, Input } from '@grafana/ui';\nimport { NotificationChannelOption, NotificationChannelSecureFields } from 'app/types';\n\nimport { ChannelValues, ReceiverFormValues } from '../../../types/receiver-form';\n\nimport { OptionField } from './fields/OptionField';\n\nexport interface Props<R extends ChannelValues> {\n  defaultValues: R;\n  selectedChannelOptions: NotificationChannelOption[];\n  secureFields: NotificationChannelSecureFields;\n\n  onResetSecureField: (key: string) => void;\n  errors?: FieldErrors<R>;\n  pathPrefix?: string;\n  readOnly?: boolean;\n\n  customValidators?: Record<string, React.ComponentProps<typeof OptionField>['customValidator']>;\n}\n\nexport function ChannelOptions<R extends ChannelValues>({\n  defaultValues,\n  selectedChannelOptions,\n  onResetSecureField,\n  secureFields,\n  errors,\n  pathPrefix = '',\n  readOnly = false,\n  customValidators = {},\n}: Props<R>): JSX.Element {\n  const { watch } = useFormContext<ReceiverFormValues<R>>();\n  const currentFormValues = watch(); // react hook form types ARE LYING!\n  return (\n    <>\n      {selectedChannelOptions.map((option: NotificationChannelOption, index: number) => {\n        const key = `${option.label}-${index}`;\n        // Some options can be dependent on other options, this determines what is selected in the dependency options\n        // I think this needs more thought.\n        // pathPrefix = items.index.\n        const paths = pathPrefix.split('.');\n        const selectedOptionValue =\n          paths.length >= 2 ? currentFormValues.items[Number(paths[1])].settings[option.showWhen.field] : undefined;\n\n        if (option.showWhen.field && selectedOptionValue !== option.showWhen.is) {\n          return null;\n        }\n\n        if (secureFields && secureFields[option.propertyName]) {\n          return (\n            <Field key={key} label={option.label} description={option.description || undefined}>\n              <Input\n                readOnly={true}\n                value=\"Configured\"\n                suffix={\n                  readOnly ? null : (\n                    <Button onClick={() => onResetSecureField(option.propertyName)} fill=\"text\" type=\"button\" size=\"sm\">\n                      Clear\n                    </Button>\n                  )\n                }\n              />\n            </Field>\n          );\n        }\n\n        const error: FieldError | DeepMap<any, FieldError> | undefined = (\n          (option.secure ? errors?.secureSettings : errors?.settings) as DeepMap<any, FieldError> | undefined\n        )?.[option.propertyName];\n\n        const defaultValue = defaultValues?.settings?.[option.propertyName];\n\n        return (\n          <OptionField\n            defaultValue={defaultValue}\n            readOnly={readOnly}\n            key={key}\n            error={error}\n            pathPrefix={pathPrefix}\n            pathSuffix={option.secure ? 'secureSettings.' : 'settings.'}\n            option={option}\n            customValidator={customValidators[option.propertyName]}\n          />\n        );\n      })}\n    </>\n  );\n}\n","import { css } from '@emotion/css';\nimport { sortBy } from 'lodash';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useFormContext, FieldErrors, FieldValues } from 'react-hook-form';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Alert, Button, Field, InputControl, Select, useStyles2 } from '@grafana/ui';\n\nimport { useUnifiedAlertingSelector } from '../../../hooks/useUnifiedAlertingSelector';\nimport { ChannelValues, CommonSettingsComponentType } from '../../../types/receiver-form';\nimport { OnCallIntegrationType } from '../grafanaAppReceivers/onCall/useOnCallIntegration';\n\nimport { ChannelOptions } from './ChannelOptions';\nimport { CollapsibleSection } from './CollapsibleSection';\nimport { Notifier } from './notifiers';\n\ninterface Props<R extends FieldValues> {\n  defaultValues: R;\n  initialValues?: R;\n  pathPrefix: string;\n  notifiers: Notifier[];\n  onDuplicate: () => void;\n  onTest?: () => void;\n  commonSettingsComponent: CommonSettingsComponentType;\n\n  secureFields?: Record<string, boolean>;\n  errors?: FieldErrors<R>;\n  onDelete?: () => void;\n  isEditable?: boolean;\n  isTestable?: boolean;\n\n  customValidators?: React.ComponentProps<typeof ChannelOptions>['customValidators'];\n}\n\nexport function ChannelSubForm<R extends ChannelValues>({\n  defaultValues,\n  initialValues,\n  pathPrefix,\n  onDuplicate,\n  onDelete,\n  onTest,\n  notifiers,\n  errors,\n  secureFields,\n  commonSettingsComponent: CommonSettingsComponent,\n  isEditable = true,\n  isTestable,\n  customValidators = {},\n}: Props<R>): JSX.Element {\n  const styles = useStyles2(getStyles);\n\n  const fieldName = useCallback((fieldName: string) => `${pathPrefix}${fieldName}`, [pathPrefix]);\n\n  const { control, watch, register, trigger, formState, setValue } = useFormContext();\n  const selectedType = watch(fieldName('type')) ?? defaultValues.type; // nope, setting \"default\" does not work at all.\n  const { loading: testingReceiver } = useUnifiedAlertingSelector((state) => state.testReceivers);\n\n  // TODO I don't like integration specific code here but other ways require a bigger refactoring\n  const onCallIntegrationType = watch(fieldName('settings.integration_type'));\n  const isTestAvailable = onCallIntegrationType !== OnCallIntegrationType.NewIntegration;\n\n  useEffect(() => {\n    register(`${pathPrefix}.__id`);\n    /* Need to manually register secureFields or else they'll\n     be lost when testing a contact point */\n    register(`${pathPrefix}.secureFields`);\n  }, [register, pathPrefix]);\n\n  // Prevent forgetting about initial values when switching the integration type and the oncall integration type\n  useEffect(() => {\n    // Restore values when switching back from a changed integration to the default one\n    const subscription = watch((_, { name, type, value }) => {\n      if (initialValues && name === fieldName('type') && value === initialValues.type && type === 'change') {\n        setValue(fieldName('settings'), initialValues.settings);\n      }\n      // Restore initial value of an existing oncall integration\n      if (\n        initialValues &&\n        name === fieldName('settings.integration_type') &&\n        value === OnCallIntegrationType.ExistingIntegration\n      ) {\n        setValue(fieldName('settings.url'), initialValues.settings['url']);\n      }\n    });\n\n    return () => subscription.unsubscribe();\n  }, [selectedType, initialValues, setValue, fieldName, watch]);\n\n  const [_secureFields, setSecureFields] = useState(secureFields ?? {});\n\n  const onResetSecureField = (key: string) => {\n    if (_secureFields[key]) {\n      const updatedSecureFields = { ...secureFields };\n      delete updatedSecureFields[key];\n      setSecureFields(updatedSecureFields);\n      setValue(`${pathPrefix}.secureFields`, updatedSecureFields);\n    }\n  };\n\n  const typeOptions = useMemo(\n    (): SelectableValue[] =>\n      sortBy(notifiers, ({ dto, meta }) => [meta?.order ?? 0, dto.name])\n        // .notifiers.sort((a, b) => a.dto.name.localeCompare(b.dto.name))\n        .map<SelectableValue>(({ dto: { name, type }, meta }) => ({\n          label: name,\n          value: type,\n          description: meta?.description,\n          isDisabled: meta ? !meta.enabled : false,\n          imgUrl: meta?.iconUrl,\n        })),\n    [notifiers]\n  );\n\n  const handleTest = async () => {\n    await trigger();\n    const isValid = Object.keys(formState.errors).length === 0;\n\n    if (isValid && onTest) {\n      onTest();\n    }\n  };\n\n  const notifier = notifiers.find(({ dto: { type } }) => type === selectedType);\n  // if there are mandatory options defined, optional options will be hidden by a collapse\n  // if there aren't mandatory options, all options will be shown without collapse\n  const mandatoryOptions = notifier?.dto.options.filter((o) => o.required);\n  const optionalOptions = notifier?.dto.options.filter((o) => !o.required);\n\n  const contactPointTypeInputId = `contact-point-type-${pathPrefix}`;\n\n  return (\n    <div className={styles.wrapper} data-testid=\"item-container\">\n      <div className={styles.topRow}>\n        <div>\n          <Field label=\"Integration\" htmlFor={contactPointTypeInputId} data-testid={`${pathPrefix}type`}>\n            <InputControl\n              name={fieldName('type')}\n              defaultValue={defaultValues.type}\n              render={({ field: { ref, onChange, ...field } }) => (\n                <Select\n                  disabled={!isEditable}\n                  inputId={contactPointTypeInputId}\n                  {...field}\n                  width={37}\n                  options={typeOptions}\n                  onChange={(value) => onChange(value?.value)}\n                />\n              )}\n              control={control}\n              rules={{ required: true }}\n            />\n          </Field>\n        </div>\n        <div className={styles.buttons}>\n          {isTestable && onTest && isTestAvailable && (\n            <Button\n              disabled={testingReceiver}\n              size=\"xs\"\n              variant=\"secondary\"\n              type=\"button\"\n              onClick={() => handleTest()}\n              icon={testingReceiver ? 'fa fa-spinner' : 'message'}\n            >\n              Test\n            </Button>\n          )}\n          {isEditable && (\n            <>\n              <Button size=\"xs\" variant=\"secondary\" type=\"button\" onClick={() => onDuplicate()} icon=\"copy\">\n                Duplicate\n              </Button>\n              {onDelete && (\n                <Button\n                  data-testid={`${pathPrefix}delete-button`}\n                  size=\"xs\"\n                  variant=\"secondary\"\n                  type=\"button\"\n                  onClick={() => onDelete()}\n                  icon=\"trash-alt\"\n                >\n                  Delete\n                </Button>\n              )}\n            </>\n          )}\n        </div>\n      </div>\n      {notifier && (\n        <div className={styles.innerContent}>\n          <ChannelOptions<R>\n            defaultValues={defaultValues}\n            selectedChannelOptions={mandatoryOptions?.length ? mandatoryOptions! : optionalOptions!}\n            secureFields={_secureFields}\n            errors={errors}\n            onResetSecureField={onResetSecureField}\n            pathPrefix={pathPrefix}\n            readOnly={!isEditable}\n            customValidators={customValidators}\n          />\n          {!!(mandatoryOptions?.length && optionalOptions?.length) && (\n            <CollapsibleSection label={`Optional ${notifier.dto.name} settings`}>\n              {notifier.dto.info !== '' && (\n                <Alert title=\"\" severity=\"info\">\n                  {notifier.dto.info}\n                </Alert>\n              )}\n              <ChannelOptions<R>\n                defaultValues={defaultValues}\n                selectedChannelOptions={optionalOptions!}\n                secureFields={_secureFields}\n                onResetSecureField={onResetSecureField}\n                errors={errors}\n                pathPrefix={pathPrefix}\n                readOnly={!isEditable}\n                customValidators={customValidators}\n              />\n            </CollapsibleSection>\n          )}\n          <CollapsibleSection label=\"Notification settings\">\n            <CommonSettingsComponent pathPrefix={pathPrefix} readOnly={!isEditable} />\n          </CollapsibleSection>\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  buttons: css`\n    & > * + * {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  innerContent: css`\n    max-width: 536px;\n  `,\n  wrapper: css`\n    margin: ${theme.spacing(2, 0)};\n    padding: ${theme.spacing(1)};\n    border: solid 1px ${theme.colors.border.medium};\n    border-radius: ${theme.shape.radius.default};\n    max-width: ${theme.breakpoints.values.xl}${theme.breakpoints.unit};\n  `,\n  topRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n  `,\n  channelSettingsHeader: css`\n    margin-top: ${theme.spacing(2)};\n  `,\n});\n","import React, { useEffect } from 'react';\nimport { useFormContext } from 'react-hook-form';\n\ninterface Props {\n  pathPrefix: string;\n}\n\n// we can't drop the deleted item from list entirely because\n// there will be a rece condition with register/unregister calls in react-hook-form\n// and fields will become randomly erroneously unregistered\nexport function DeletedSubForm({ pathPrefix }: Props): JSX.Element {\n  const { register } = useFormContext();\n\n  // required to be registered or react-hook-form will randomly drop the values when it feels like it\n  useEffect(() => {\n    register(`${pathPrefix}.__id`);\n    register(`${pathPrefix}.__deleted`);\n  }, [register, pathPrefix]);\n\n  return <></>;\n}\n","import { omit } from 'lodash';\n\nimport { ChannelValues, ReceiverFormValues } from '../../../types/receiver-form';\n\nexport interface DeprecatedAuthHTTPConfig {\n  bearer_token?: string;\n  bearer_token_file?: string;\n}\n\nexport interface HTTPAuthConfig {\n  authorization?: {\n    type: string;\n    credentials?: string;\n    credentials_file?: string;\n  };\n}\n\n// convert the newer http_config to the older (deprecated) format\nexport function normalizeFormValues(\n  values?: ReceiverFormValues<ChannelValues>\n): ReceiverFormValues<ChannelValues> | undefined {\n  if (!values) {\n    return;\n  }\n\n  return {\n    ...values,\n    items: values.items.map((item) => ({\n      ...item,\n      settings: {\n        ...item.settings,\n        http_config: item.settings?.http_config ? normalizeHTTPConfig(item.settings?.http_config) : undefined,\n      },\n    })),\n  };\n}\n\nfunction normalizeHTTPConfig(config: HTTPAuthConfig | DeprecatedAuthHTTPConfig): DeprecatedAuthHTTPConfig {\n  if (isDeprecatedHTTPAuthConfig(config)) {\n    return config;\n  }\n\n  return {\n    ...omit(config, 'authorization'),\n    bearer_token: config.authorization?.credentials,\n    bearer_token_file: config.authorization?.credentials_file,\n  };\n}\n\nfunction isDeprecatedHTTPAuthConfig(\n  config: HTTPAuthConfig | DeprecatedAuthHTTPConfig\n): config is DeprecatedAuthHTTPConfig {\n  return ['bearer_token', 'bearer_token_file'].some((prop) => prop in config);\n}\n","import { css } from '@emotion/css';\nimport React, { useCallback } from 'react';\nimport { FieldErrors, FormProvider, SubmitErrorHandler, useForm, Validate } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { isFetchError } from '@grafana/runtime';\nimport { Alert, Button, Field, Input, LinkButton, useStyles2 } from '@grafana/ui';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\n\nimport { getMessageFromError } from '../../../../../../core/utils/errors';\nimport { logAlertingError } from '../../../Analytics';\nimport { isOnCallFetchError } from '../../../api/onCallApi';\nimport { useControlledFieldArray } from '../../../hooks/useControlledFieldArray';\nimport { ChannelValues, CommonSettingsComponentType, ReceiverFormValues } from '../../../types/receiver-form';\nimport { makeAMLink } from '../../../utils/misc';\nimport { initialAsyncRequestState } from '../../../utils/redux';\n\nimport { ChannelSubForm } from './ChannelSubForm';\nimport { DeletedSubForm } from './fields/DeletedSubform';\nimport { Notifier } from './notifiers';\nimport { normalizeFormValues } from './util';\n\ninterface Props<R extends ChannelValues> {\n  config: AlertManagerCortexConfig;\n  notifiers: Notifier[];\n  defaultItem: R;\n  alertManagerSourceName: string;\n  onTestChannel?: (channel: R) => void;\n  onSubmit: (values: ReceiverFormValues<R>) => Promise<void>;\n  takenReceiverNames: string[]; // will validate that user entered receiver name is not one of these\n  commonSettingsComponent: CommonSettingsComponentType;\n  initialValues?: ReceiverFormValues<R>;\n  isEditable: boolean;\n  isTestable?: boolean;\n  customValidators?: Record<string, React.ComponentProps<typeof ChannelSubForm>['customValidators']>;\n}\n\nexport function ReceiverForm<R extends ChannelValues>({\n  config,\n  initialValues,\n  defaultItem,\n  notifiers,\n  alertManagerSourceName,\n  onSubmit,\n  onTestChannel,\n  takenReceiverNames,\n  commonSettingsComponent,\n  isEditable,\n  isTestable,\n  customValidators,\n}: Props<R>): JSX.Element {\n  const notifyApp = useAppNotification();\n  const styles = useStyles2(getStyles);\n\n  // normalize deprecated and new config values\n  const normalizedConfig = normalizeFormValues(initialValues);\n\n  const defaultValues = normalizedConfig ?? {\n    name: '',\n    items: [\n      {\n        ...defaultItem,\n        __id: String(Math.random()),\n      } as any,\n    ],\n  };\n\n  const formAPI = useForm<ReceiverFormValues<R>>({\n    // making a copy here beacuse react-hook-form will mutate these, and break if the object is frozen. for real.\n    defaultValues: structuredClone(defaultValues),\n  });\n\n  useCleanup((state) => (state.unifiedAlerting.saveAMConfig = initialAsyncRequestState));\n\n  const {\n    handleSubmit,\n    register,\n    formState: { errors, isSubmitting },\n    getValues,\n  } = formAPI;\n\n  const { fields, append, remove } = useControlledFieldArray<R>({ name: 'items', formAPI, softDelete: true });\n\n  const validateNameIsAvailable: Validate<string> = useCallback(\n    (name: string) =>\n      takenReceiverNames.map((name) => name.trim().toLowerCase()).includes(name.trim().toLowerCase())\n        ? 'Another receiver with this name already exists.'\n        : true,\n    [takenReceiverNames]\n  );\n\n  const submitCallback = async (values: ReceiverFormValues<R>) => {\n    try {\n      await onSubmit({\n        ...values,\n        items: values.items.filter((item) => !item.__deleted),\n      });\n    } catch (e) {\n      if (e instanceof Error || isFetchError(e)) {\n        notifyApp.error('Failed to save the contact point', getErrorMessage(e));\n\n        const error = new Error('Failed to save the contact point');\n        error.cause = e;\n        logAlertingError(error);\n      }\n      throw e;\n    }\n  };\n\n  const onInvalid: SubmitErrorHandler<ReceiverFormValues<R>> = () => {\n    notifyApp.error('There are errors in the form. Please correct them and try again!');\n  };\n\n  return (\n    <FormProvider {...formAPI}>\n      {!config.alertmanager_config.route && (\n        <Alert severity=\"warning\" title=\"Attention\">\n          Because there is no default policy configured yet, this contact point will automatically be set as default.\n        </Alert>\n      )}\n      <form onSubmit={handleSubmit(submitCallback, onInvalid)}>\n        <h4 className={styles.heading}>\n          {!isEditable ? 'Contact point' : initialValues ? 'Update contact point' : 'Create contact point'}\n        </h4>\n        <Field label=\"Name\" invalid={!!errors.name} error={errors.name && errors.name.message} required>\n          <Input\n            readOnly={!isEditable}\n            id=\"name\"\n            {...register('name', {\n              required: 'Name is required',\n              validate: { nameIsAvailable: validateNameIsAvailable },\n            })}\n            width={39}\n            placeholder=\"Name\"\n          />\n        </Field>\n        {fields.map((field, index) => {\n          const pathPrefix = `items.${index}.`;\n          if (field.__deleted) {\n            return <DeletedSubForm key={field.__id} pathPrefix={pathPrefix} />;\n          }\n          const initialItem = initialValues?.items.find(({ __id }) => __id === field.__id);\n          return (\n            <ChannelSubForm<R>\n              defaultValues={field}\n              initialValues={initialItem}\n              key={field.__id}\n              onDuplicate={() => {\n                const currentValues: R = getValues().items[index];\n                append({ ...currentValues, __id: String(Math.random()) });\n              }}\n              onTest={\n                onTestChannel\n                  ? () => {\n                      const currentValues: R = getValues().items[index];\n                      onTestChannel(currentValues);\n                    }\n                  : undefined\n              }\n              onDelete={() => remove(index)}\n              pathPrefix={pathPrefix}\n              notifiers={notifiers}\n              secureFields={initialItem?.secureFields}\n              errors={errors?.items?.[index] as FieldErrors<R>}\n              commonSettingsComponent={commonSettingsComponent}\n              isEditable={isEditable}\n              isTestable={isTestable}\n              customValidators={customValidators ? customValidators[field.type] : undefined}\n            />\n          );\n        })}\n        <>\n          {isEditable && (\n            <Button\n              type=\"button\"\n              icon=\"plus\"\n              variant=\"secondary\"\n              onClick={() => append({ ...defaultItem, __id: String(Math.random()) } as R)}\n            >\n              Add contact point integration\n            </Button>\n          )}\n          <div className={styles.buttons}>\n            {isEditable && (\n              <>\n                {isSubmitting && (\n                  <Button disabled={true} icon=\"fa fa-spinner\" variant=\"primary\">\n                    Saving...\n                  </Button>\n                )}\n                {!isSubmitting && <Button type=\"submit\">Save contact point</Button>}\n              </>\n            )}\n            <LinkButton\n              disabled={isSubmitting}\n              variant=\"secondary\"\n              data-testid=\"cancel-button\"\n              href={makeAMLink('alerting/notifications', alertManagerSourceName)}\n            >\n              Cancel\n            </LinkButton>\n          </div>\n        </>\n      </form>\n    </FormProvider>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  heading: css`\n    margin: ${theme.spacing(4, 0)};\n  `,\n  buttons: css`\n    margin-top: ${theme.spacing(4)};\n\n    & > * + * {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n});\n\nfunction getErrorMessage(error: unknown) {\n  if (isOnCallFetchError(error)) {\n    return error.data.detail;\n  }\n\n  return getMessageFromError(error);\n}\n","import { Receiver } from 'app/plugins/datasource/alertmanager/types';\n\nimport { OnCallIntegrationDTO } from '../../../../api/onCallApi';\n\n// TODO This value needs to be changed to grafana_alerting when the OnCall team introduces the necessary changes\nexport const GRAFANA_ONCALL_INTEGRATION_TYPE = 'grafana_alerting';\n\nexport enum ReceiverTypes {\n  OnCall = 'oncall',\n}\n\nexport const isInOnCallIntegrations = (url: string, integrationsUrls: string[]) => {\n  return integrationsUrls.includes(url);\n};\n\nexport const isOnCallReceiver = (receiver: Receiver, integrations: OnCallIntegrationDTO[]) => {\n  if (!receiver.grafana_managed_receiver_configs) {\n    return false;\n  }\n  // A receiver it's an onCall contact point if it includes only one integration, and this integration it's an onCall\n  // An integration it's an onCall type if it's included in the list of integrations returned by the onCall api endpoint\n  const onlyOneIntegration = receiver.grafana_managed_receiver_configs.length === 1;\n  const isOnCall = isInOnCallIntegrations(\n    receiver.grafana_managed_receiver_configs[0]?.settings?.url ?? '',\n    integrations.map((i) => i.integration_url)\n  );\n  return onlyOneIntegration && isOnCall;\n};\n","import { produce } from 'immer';\nimport { useCallback, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { isFetchError } from '@grafana/runtime';\n\nimport { useAppNotification } from '../../../../../../../core/copy/appNotification';\nimport { Receiver } from '../../../../../../../plugins/datasource/alertmanager/types';\nimport { NotifierDTO } from '../../../../../../../types';\nimport { ONCALL_INTEGRATION_V2_FEATURE, onCallApi } from '../../../../api/onCallApi';\nimport { usePluginBridge } from '../../../../hooks/usePluginBridge';\nimport { SupportedPlugin } from '../../../../types/pluginBridges';\nimport { option } from '../../../../utils/notifier-types';\nimport { GRAFANA_APP_RECEIVERS_SOURCE_IMAGE } from '../types';\n\nimport { GRAFANA_ONCALL_INTEGRATION_TYPE, ReceiverTypes } from './onCall';\n\nexport enum OnCallIntegrationType {\n  NewIntegration = 'new_oncall_integration',\n  ExistingIntegration = 'existing_oncall_integration',\n}\n\nexport enum OnCallIntegrationSetting {\n  IntegrationType = 'integration_type',\n  IntegrationName = 'integration_name',\n}\n\nenum OnCallIntegrationStatus {\n  Disabled = 'disabled',\n  // The old integration done exclusively on the OnCall side\n  // Relies on automatic creation of contact points and altering notification policies\n  // If enabled Alerting UI should not enable any OnCall integration features\n  V1 = 'v1',\n  // The new integration - On Alerting side we create OnCall integrations and use theirs URLs\n  // as parameters for oncall contact points\n  V2 = 'v2',\n}\n\nfunction useOnCallPluginStatus() {\n  const {\n    installed: isOnCallEnabled,\n    loading: isPluginBridgeLoading,\n    error: pluginError,\n  } = usePluginBridge(SupportedPlugin.OnCall);\n\n  const {\n    data: onCallFeatures = [],\n    error: onCallFeaturesError,\n    isLoading: isOnCallFeaturesLoading,\n  } = onCallApi.endpoints.features.useQuery(undefined, { skip: !isOnCallEnabled });\n\n  const integrationStatus = useMemo((): OnCallIntegrationStatus => {\n    if (!isOnCallEnabled) {\n      return OnCallIntegrationStatus.Disabled;\n    }\n    // TODO Support for V2 integration should be added when the OnCall team introduces the necessary changes\n\n    return onCallFeatures.includes(ONCALL_INTEGRATION_V2_FEATURE)\n      ? OnCallIntegrationStatus.V2\n      : OnCallIntegrationStatus.V1;\n  }, [isOnCallEnabled, onCallFeatures]);\n\n  const isAlertingV2IntegrationEnabled = useMemo(\n    () => integrationStatus === OnCallIntegrationStatus.V2,\n    [integrationStatus]\n  );\n\n  return {\n    isOnCallEnabled,\n    integrationStatus,\n    isAlertingV2IntegrationEnabled,\n    isOnCallStatusLoading: isPluginBridgeLoading || isOnCallFeaturesLoading,\n    onCallError: pluginError ?? onCallFeaturesError,\n  };\n}\n\nexport function useOnCallIntegration() {\n  const notifyApp = useAppNotification();\n\n  const { isOnCallEnabled, integrationStatus, isAlertingV2IntegrationEnabled, isOnCallStatusLoading, onCallError } =\n    useOnCallPluginStatus();\n\n  const { useCreateIntegrationMutation, useGrafanaOnCallIntegrationsQuery, useLazyValidateIntegrationNameQuery } =\n    onCallApi;\n\n  const [validateIntegrationNameQuery, { isFetching: isValidating }] = useLazyValidateIntegrationNameQuery();\n  const [createIntegrationMutation] = useCreateIntegrationMutation();\n\n  const {\n    data: grafanaOnCallIntegrations = [],\n    isLoading: isLoadingOnCallIntegrations,\n    isError: isIntegrationsQueryError,\n  } = useGrafanaOnCallIntegrationsQuery(undefined, { skip: !isAlertingV2IntegrationEnabled });\n\n  const onCallFormValidators = useMemo(() => {\n    return {\n      integration_name: async (value: string) => {\n        try {\n          await validateIntegrationNameQuery(value).unwrap();\n          return true;\n        } catch (error) {\n          if (isFetchError(error) && error.status === 409) {\n            return 'Integration of this name already exists in OnCall';\n          }\n\n          notifyApp.error('Failed to validate OnCall integration name. Is the OnCall API available?');\n          throw error;\n        }\n      },\n      url: (value: string) => {\n        if (!isAlertingV2IntegrationEnabled) {\n          return true;\n        }\n\n        return grafanaOnCallIntegrations.map((i) => i.integration_url).includes(value)\n          ? true\n          : 'Selection of existing OnCall integration is required';\n      },\n    };\n  }, [grafanaOnCallIntegrations, validateIntegrationNameQuery, isAlertingV2IntegrationEnabled, notifyApp]);\n\n  const extendOnCallReceivers = useCallback(\n    (receiver: Receiver): Receiver => {\n      if (!isAlertingV2IntegrationEnabled) {\n        return receiver;\n      }\n\n      return produce(receiver, (draft) => {\n        draft.grafana_managed_receiver_configs?.forEach((config) => {\n          if (config.type === ReceiverTypes.OnCall) {\n            config.settings[OnCallIntegrationSetting.IntegrationType] = OnCallIntegrationType.ExistingIntegration;\n          }\n        });\n      });\n    },\n    [isAlertingV2IntegrationEnabled]\n  );\n\n  const createOnCallIntegrations = useCallback(\n    async (receiver: Receiver): Promise<Receiver> => {\n      if (!isAlertingV2IntegrationEnabled) {\n        return receiver;\n      }\n\n      const onCallIntegrations = receiver.grafana_managed_receiver_configs?.filter((c) => c.type === 'oncall') ?? [];\n      const newOnCallIntegrations = onCallIntegrations.filter(\n        (c) => c.settings[OnCallIntegrationSetting.IntegrationType] === OnCallIntegrationType.NewIntegration\n      );\n\n      const createNewOnCallIntegrationJobs = newOnCallIntegrations.map(async (c) => {\n        const newIntegration = await createIntegrationMutation({\n          integration: GRAFANA_ONCALL_INTEGRATION_TYPE,\n          verbal_name: c.settings[OnCallIntegrationSetting.IntegrationName],\n        }).unwrap();\n\n        c.settings['url'] = newIntegration.integration_url;\n      });\n\n      await Promise.all(createNewOnCallIntegrationJobs);\n\n      return produce(receiver, (draft) => {\n        draft.grafana_managed_receiver_configs?.forEach((c) => {\n          // Clean up the settings before sending the receiver to the backend\n          // The settings object can contain any additional data but integration type and name are purely frontend thing\n          // and should not be sent and kept in the backend\n          if (c.type === ReceiverTypes.OnCall) {\n            delete c.settings[OnCallIntegrationSetting.IntegrationType];\n            delete c.settings[OnCallIntegrationSetting.IntegrationName];\n          }\n        });\n      });\n    },\n    [isAlertingV2IntegrationEnabled, createIntegrationMutation]\n  );\n\n  const extendOnCallNotifierFeatures = useCallback(\n    (notifier: NotifierDTO): NotifierDTO => {\n      // If V2 integration is not enabled the receiver will not be extended\n      // We still allow users to use this contact point but they need to provide URL manually\n      // As they do for webhook integration\n      // Removing the oncall notifier from the list of available notifiers has drawbacks - it's tricky to define what should happen\n      // if someone turned off or downgraded the OnCall plugin but had some receivers configured with OnCall notifier\n      // By falling back to plain URL input we allow users to change the config with OnCall disabled/not supporting V2 integration\n      if (notifier.type === ReceiverTypes.OnCall && isAlertingV2IntegrationEnabled) {\n        const options = notifier.options.filter((o) => o.propertyName !== 'url');\n\n        const newIntegrationOption: SelectableValue<string> = {\n          value: OnCallIntegrationType.NewIntegration,\n          label: 'New OnCall integration',\n          description: 'A new OnCall integration without escalation chains will be automatically created',\n        };\n        const existingIntegrationOption: SelectableValue<string> = {\n          value: OnCallIntegrationType.ExistingIntegration,\n          label: 'Existing OnCall integration',\n          description: 'Use an existing OnCall integration',\n        };\n\n        options.unshift(\n          option(OnCallIntegrationSetting.IntegrationType, 'How to connect to OnCall', '', {\n            required: true,\n            element: 'radio',\n            defaultValue: newIntegrationOption,\n            selectOptions: [newIntegrationOption, existingIntegrationOption],\n          }),\n          option(\n            OnCallIntegrationSetting.IntegrationName,\n            'Integration name',\n            'The name of the new OnCall integration',\n            {\n              required: true,\n              showWhen: { field: 'integration_type', is: OnCallIntegrationType.NewIntegration },\n            }\n          ),\n          option('url', 'OnCall Integration', 'The OnCall integration to send alerts to', {\n            element: 'select',\n            required: true,\n            showWhen: { field: 'integration_type', is: OnCallIntegrationType.ExistingIntegration },\n            selectOptions: grafanaOnCallIntegrations.map((i) => ({\n              label: i.display_name,\n              description: i.integration_url,\n              value: i.integration_url,\n            })),\n          })\n        );\n\n        return { ...notifier, options };\n      }\n\n      return notifier;\n    },\n    [grafanaOnCallIntegrations, isAlertingV2IntegrationEnabled]\n  );\n\n  return {\n    integrationStatus,\n    onCallNotifierMeta: {\n      enabled: !!isOnCallEnabled,\n      order: -1, // The default is 0. We want OnCall to be the first on the list\n      description: isOnCallEnabled\n        ? 'Connect effortlessly to Grafana OnCall'\n        : 'Enable Grafana OnCall plugin to use this integration',\n      iconUrl: GRAFANA_APP_RECEIVERS_SOURCE_IMAGE[SupportedPlugin.OnCall],\n    },\n    extendOnCallNotifierFeatures,\n    extendOnCallReceivers,\n    createOnCallIntegrations,\n    onCallFormValidators,\n    isLoadingOnCallIntegration: isLoadingOnCallIntegrations || isOnCallStatusLoading,\n    isValidating,\n    hasOnCallError: Boolean(onCallError) || isIntegrationsQueryError,\n  };\n}\n","import { GrafanaManagedContactPoint } from '../../../../../../plugins/datasource/alertmanager/types';\nimport { SupportedPlugin } from '../../../types/pluginBridges';\n\nexport interface AmRouteReceiver {\n  label: string;\n  value: string;\n  grafanaAppReceiverType?: SupportedPlugin;\n}\n\nexport interface ReceiverWithTypes extends GrafanaManagedContactPoint {\n  grafanaAppReceiverType?: SupportedPlugin;\n}\nexport const GRAFANA_APP_RECEIVERS_SOURCE_IMAGE: Record<SupportedPlugin, string> = {\n  [SupportedPlugin.OnCall]: 'public/img/alerting/oncall_logo.svg',\n\n  [SupportedPlugin.Incident]: '',\n  [SupportedPlugin.MachineLearning]: '',\n};\n"],"names":["ONCALL_INTEGRATION_V2_FEATURE","getProxyApiUrl","path","onCallApi","build","response","isPaginatedResponse","name","integration","useGrafanaOnCallIntegrationsQuery","isOnCallFetchError","error","CloudCommonChannelSettings","pathPrefix","className","readOnly","register","Field","Checkbox","defaultChannelValues","cloudNotifiers","n","CloudReceiverForm","existing","alertManagerSourceName","config","dispatch","isVanillaAM","existingValue","onSubmit","values","newReceiver","alertmanagerApi","takenReceiverNames","isManageableAlertManagerDataSource","Alert","ReceiverForm","GrafanaCommonChannelSettings","NotificationType","notificationOptions","value","defaultValues","TestContactPointModal","isOpen","onDismiss","onTest","notificationType","setNotificationType","styles","getStyles","formMethods","data","alert","key","acc","Modal","Label","RadioButtonGroup","AnnotationsStep","LabelsField","Button","theme","GrafanaReceiverForm","onCallNotifierMeta","extendOnCallNotifierFeatures","extendOnCallReceivers","onCallFormValidators","createOnCallIntegrations","isLoadingOnCallIntegration","hasOnCallError","useOnCallIntegration","useGrafanaNotifiersQuery","grafanaNotifiers","isLoadingNotifiers","testChannelValues","setTestChannelValues","id2original","receiverWithOnCall","newConfig","onTestChannel","testNotification","chan","payload","hasProvisionedItems","item","isEditable","isTestable","LoadingPlaceholder","notifiers","Provisioning","ChannelOptions","selectedChannelOptions","onResetSecureField","secureFields","errors","customValidators","watch","currentFormValues","option","index","paths","selectedOptionValue","Input","defaultValue","OptionField","ChannelSubForm","initialValues","onDuplicate","onDelete","CommonSettingsComponent","fieldName","control","trigger","formState","setValue","selectedType","testingReceiver","useUnifiedAlertingSelector","state","isTestAvailable","subscription","_","type","_secureFields","setSecureFields","updatedSecureFields","typeOptions","dto","meta","handleTest","notifier","mandatoryOptions","o","optionalOptions","contactPointTypeInputId","InputControl","ref","onChange","field","Select","CollapsibleSection","DeletedSubForm","normalizeFormValues","normalizeHTTPConfig","isDeprecatedHTTPAuthConfig","prop","defaultItem","commonSettingsComponent","notifyApp","formAPI","useCleanup","handleSubmit","isSubmitting","getValues","fields","append","remove","useControlledFieldArray","validateNameIsAvailable","submitCallback","e","getErrorMessage","onInvalid","initialItem","__id","currentValues","GRAFANA_ONCALL_INTEGRATION_TYPE","ReceiverTypes","isInOnCallIntegrations","url","integrationsUrls","isOnCallReceiver","receiver","integrations","onlyOneIntegration","isOnCall","i","OnCallIntegrationType","OnCallIntegrationSetting","OnCallIntegrationStatus","useOnCallPluginStatus","isOnCallEnabled","isPluginBridgeLoading","pluginError","onCallFeatures","onCallFeaturesError","isOnCallFeaturesLoading","integrationStatus","isAlertingV2IntegrationEnabled","isOnCallStatusLoading","onCallError","useCreateIntegrationMutation","useLazyValidateIntegrationNameQuery","validateIntegrationNameQuery","isValidating","createIntegrationMutation","grafanaOnCallIntegrations","isLoadingOnCallIntegrations","isIntegrationsQueryError","draft","createNewOnCallIntegrationJobs","c","newIntegration","options","newIntegrationOption","existingIntegrationOption","GRAFANA_APP_RECEIVERS_SOURCE_IMAGE"],"sourceRoot":""}