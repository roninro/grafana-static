{"version":3,"file":"AdminAuthentication.a9df76989e5591ce7daa.js","mappings":"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","sources":["webpack://grafana/./public/app/features/auth-config/components/ConfigureAuthCTA.tsx","webpack://grafana/./public/app/features/auth-config/constants.ts","webpack://grafana/./public/app/features/auth-config/components/ProviderCard.tsx","webpack://grafana/./public/app/features/auth-config/state/actions.ts","webpack://grafana/./public/app/features/auth-config/utils.ts","webpack://grafana/./public/app/features/auth-config/AuthConfigPage.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { CallToActionCard, IconName, LinkButton, useStyles2 } from '@grafana/ui';\n\nexport interface Props {\n  title: string;\n  buttonIcon: IconName;\n  buttonLink?: string;\n  buttonTitle: string;\n  buttonDisabled?: boolean;\n  description?: string;\n  onClick?: () => void;\n}\n\nconst ConfigureAuthCTA: React.FunctionComponent<Props> = ({\n  title,\n  buttonIcon,\n  buttonLink,\n  buttonTitle,\n  buttonDisabled,\n  description,\n  onClick,\n}) => {\n  const styles = useStyles2(getStyles);\n  const footer = description ? <span key=\"proTipFooter\">{description}</span> : '';\n  const ctaElementClassName = !description ? styles.button : '';\n\n  const ctaElement = (\n    <LinkButton\n      size=\"lg\"\n      href={buttonLink}\n      icon={buttonIcon}\n      className={ctaElementClassName}\n      data-testid={selectors.components.CallToActionCard.buttonV2(buttonTitle)}\n      disabled={buttonDisabled}\n      onClick={() => onClick && onClick()}\n    >\n      {buttonTitle}\n    </LinkButton>\n  );\n\n  return <CallToActionCard className={styles.cta} message={title} footer={footer} callToActionElement={ctaElement} />;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    cta: css`\n      text-align: center;\n    `,\n    button: css`\n      margin-bottom: ${theme.spacing(2.5)};\n    `,\n  };\n};\n\nexport default ConfigureAuthCTA;\n","export const BASE_PATH = 'admin/authentication/';\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Badge, Card, useStyles2, Icon } from '@grafana/ui';\n\nimport { BASE_PATH } from '../constants';\n\nexport const LOGO_SIZE = '48px';\n\ntype Props = {\n  providerId: string;\n  displayName: string;\n  enabled: boolean;\n  configPath?: string;\n  authType?: string;\n  badges?: JSX.Element[];\n  onClick?: () => void;\n};\n\nexport function ProviderCard({ providerId, displayName, enabled, configPath, authType, badges, onClick }: Props) {\n  const styles = useStyles2(getStyles);\n  configPath = BASE_PATH + (configPath || providerId);\n\n  return (\n    <Card href={configPath} className={styles.container} onClick={() => onClick && onClick()}>\n      <div className={styles.header}>\n        <span className={styles.smallText}>{authType}</span>\n        <span className={styles.name}>{displayName}</span>\n      </div>\n      <div className={styles.footer}>\n        <div className={styles.badgeContainer}>\n          {enabled ? <Badge text=\"Enabled\" color=\"green\" icon=\"check\" /> : <Badge text=\"Not enabled\" color=\"blue\" />}\n        </div>\n        <span className={styles.edit}>\n          Edit\n          <Icon color=\"blue\" name={'arrow-right'} size=\"sm\" />\n        </span>\n      </div>\n    </Card>\n  );\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      min-height: ${theme.spacing(18)};\n      display: flex;\n      flex-direction: column;\n      justify-content: space-around;\n      border-radius: ${theme.spacing(0.5)};\n      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    `,\n    header: css`\n      margin-top: -${theme.spacing(2)};\n      display: flex;\n      flex-direction: column;\n      justify-content: start;\n      align-items: flex-start;\n      margin-bottom: ${theme.spacing(2)};\n    `,\n    footer: css`\n      margin-top: ${theme.spacing(2)};\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    `,\n    name: css`\n      align-self: flex-start;\n      font-size: ${theme.typography.h4.fontSize};\n      color: ${theme.colors.text.primary};\n      margin: 0;\n      margin-top: ${theme.spacing(-1)};\n    `,\n    smallText: css`\n      font-size: ${theme.typography.bodySmall.fontSize};\n      color: ${theme.colors.text.secondary};\n      padding: ${theme.spacing(1)} 0; // Add some padding\n      max-width: 90%; // Add a max-width to prevent text from stretching too wide\n    `,\n    badgeContainer: css`\n      display: flex;\n      gap: ${theme.spacing(1)};\n    `,\n    edit: css`\n      display: flex;\n      align-items: center;\n      color: ${theme.colors.text.link};\n      gap: ${theme.spacing(0.5)};\n    `,\n  };\n};\n","import { lastValueFrom } from 'rxjs';\n\nimport { getBackendSrv, isFetchError } from '@grafana/runtime';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, Settings, ThunkResult, UpdateSettingsQuery } from 'app/types';\n\nimport { getAuthProviderStatus, getRegisteredAuthProviders } from '..';\nimport { AuthProviderStatus, SettingsError } from '../types';\n\nimport { loadingBegin, loadingEnd, providerStatusesLoaded, resetError, setError, settingsUpdated } from './reducers';\n\nexport function loadSettings(): ThunkResult<Promise<Settings>> {\n  return async (dispatch) => {\n    if (contextSrv.hasPermission(AccessControlAction.SettingsRead)) {\n      dispatch(loadingBegin());\n      const result = await getBackendSrv().get('/api/admin/settings');\n      dispatch(settingsUpdated(result));\n      await dispatch(loadProviderStatuses());\n      dispatch(loadingEnd());\n      return result;\n    }\n  };\n}\n\nexport function loadProviderStatuses(): ThunkResult<void> {\n  return async (dispatch) => {\n    const registeredProviders = getRegisteredAuthProviders();\n    const providerStatuses: Record<string, AuthProviderStatus> = {};\n    const getStatusPromises: Array<Promise<AuthProviderStatus>> = [];\n    for (const provider of registeredProviders) {\n      getStatusPromises.push(getAuthProviderStatus(provider.id));\n    }\n    const statuses = await Promise.all(getStatusPromises);\n    for (let i = 0; i < registeredProviders.length; i++) {\n      const provider = registeredProviders[i];\n      const status = statuses[i];\n      providerStatuses[provider.id] = status;\n    }\n    dispatch(providerStatusesLoaded(providerStatuses));\n  };\n}\n\nexport function saveSettings(data: UpdateSettingsQuery): ThunkResult<Promise<boolean>> {\n  return async (dispatch) => {\n    if (contextSrv.hasPermission(AccessControlAction.SettingsWrite)) {\n      try {\n        await lastValueFrom(\n          getBackendSrv().fetch({\n            url: '/api/admin/settings',\n            method: 'PUT',\n            data,\n            showSuccessAlert: false,\n            showErrorAlert: false,\n          })\n        );\n        dispatch(resetError());\n        return true;\n      } catch (error) {\n        console.log(error);\n        if (isFetchError(error)) {\n          error.isHandled = true;\n          const updateErr: SettingsError = {\n            message: error.data?.message,\n            errors: error.data?.errors,\n          };\n          dispatch(setError(updateErr));\n          return false;\n        }\n      }\n    }\n    return false;\n  };\n}\n","import { BASE_PATH } from './constants';\nimport { AuthProviderInfo } from './types';\n\nexport function getProviderUrl(provider: AuthProviderInfo) {\n  return BASE_PATH + (provider.configPath || provider.id);\n}\n","import { css } from '@emotion/css';\nimport { isEmpty } from 'lodash';\nimport React, { useEffect } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { useStyles2 } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { StoreState } from 'app/types';\n\nimport ConfigureAuthCTA from './components/ConfigureAuthCTA';\nimport { ProviderCard } from './components/ProviderCard';\nimport { loadSettings } from './state/actions';\nimport { AuthProviderInfo } from './types';\nimport { getProviderUrl } from './utils';\n\nimport { getRegisteredAuthProviders } from '.';\n\ninterface OwnProps {}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nfunction mapStateToProps(state: StoreState) {\n  const { isLoading, providerStatuses } = state.authConfig;\n  return {\n    isLoading,\n    providerStatuses,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadSettings,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport const AuthConfigPageUnconnected = ({ providerStatuses, isLoading, loadSettings }: Props): JSX.Element => {\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    loadSettings();\n  }, [loadSettings]);\n\n  const authProviders = getRegisteredAuthProviders();\n  const enabledProviders = authProviders.filter((p) => providerStatuses[p.id]?.enabled);\n  const configuresProviders = authProviders.filter(\n    (p) => providerStatuses[p.id]?.configured && !providerStatuses[p.id]?.enabled\n  );\n  const availableProviders = authProviders.filter(\n    (p) => !providerStatuses[p.id]?.enabled && !providerStatuses[p.id]?.configured && !providerStatuses[p.id]?.hide\n  );\n  const firstAvailableProvider = availableProviders?.length ? availableProviders[0] : null;\n\n  {\n    /* TODO: make generic for the provider of the configuration or make the documentation point to a collection of all our providers */\n  }\n  const docsLink = (\n    <a\n      className=\"external-link\"\n      href=\"https://grafana.com/docs/grafana/next/setup-grafana/configure-security/configure-authentication/saml-ui/\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      documentation.\n    </a>\n  );\n\n  const subTitle = <span>Manage your auth settings and configure single sign-on. Find out more in our {docsLink}</span>;\n\n  const onCTAClick = () => {\n    reportInteraction('authentication_ui_created', { provider: firstAvailableProvider?.type });\n  };\n  const onProviderCardClick = (provider: AuthProviderInfo) => {\n    reportInteraction('authentication_ui_provider_clicked', { provider: provider.type });\n  };\n\n  return (\n    <Page navId=\"authentication\" subTitle={subTitle}>\n      <Page.Contents isLoading={isLoading}>\n        <h3 className={styles.sectionHeader}>Configured authentication</h3>\n        {!!enabledProviders?.length && (\n          <div className={styles.cardsContainer}>\n            {enabledProviders.map((provider) => (\n              <ProviderCard\n                key={provider.id}\n                providerId={provider.id}\n                displayName={providerStatuses[provider.id]?.name || provider.displayName}\n                authType={provider.protocol}\n                enabled={providerStatuses[provider.id]?.enabled}\n                configPath={provider.configPath}\n                onClick={() => onProviderCardClick(provider)}\n              />\n            ))}\n          </div>\n        )}\n        {!enabledProviders?.length && firstAvailableProvider && !isEmpty(providerStatuses) && (\n          <ConfigureAuthCTA\n            title={`You have no ${firstAvailableProvider.type} configuration created at the moment`}\n            buttonIcon=\"plus-circle\"\n            buttonLink={getProviderUrl(firstAvailableProvider)}\n            buttonTitle={`Configure ${firstAvailableProvider.type}`}\n            onClick={onCTAClick}\n          />\n        )}\n        {!!configuresProviders?.length && (\n          <div className={styles.cardsContainer}>\n            {configuresProviders.map((provider) => (\n              <ProviderCard\n                key={provider.id}\n                providerId={provider.id}\n                displayName={providerStatuses[provider.id]?.name || provider.displayName}\n                authType={provider.protocol}\n                enabled={providerStatuses[provider.id]?.enabled}\n                configPath={provider.configPath}\n                onClick={() => onProviderCardClick(provider)}\n              />\n            ))}\n          </div>\n        )}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    cardsContainer: css`\n      display: grid;\n      grid-template-columns: repeat(auto-fill, minmax(288px, 1fr));\n      gap: ${theme.spacing(3)};\n      margin-bottom: ${theme.spacing(3)};\n      margin-top: ${theme.spacing(2)};\n    `,\n    sectionHeader: css`\n      margin-bottom: ${theme.spacing(3)};\n    `,\n    settingsSection: css`\n      margin-top: ${theme.spacing(4)};\n    `,\n    settingName: css`\n      padding-left: 25px;\n    `,\n    doclink: css`\n      padding-bottom: 5px;\n      padding-top: -5px;\n      font-size: ${theme.typography.bodySmall.fontSize};\n      a {\n        color: ${theme.colors.info.name}; // use theme link color or any other color\n        text-decoration: underline; // underline or none, as you prefer\n      }\n    `,\n    settingValue: css`\n      white-space: break-spaces;\n    `,\n  };\n};\n\nexport default connector(AuthConfigPageUnconnected);\n"],"names":["ConfigureAuthCTA","title","buttonIcon","buttonLink","buttonTitle","buttonDisabled","description","onClick","styles","getStyles","footer","ctaElementClassName","ctaElement","selectors","CallToActionCard","theme","BASE_PATH","LOGO_SIZE","ProviderCard","providerId","displayName","enabled","configPath","authType","badges","Card","Badge","Icon","loadSettings","dispatch","result","loadProviderStatuses","registeredProviders","providerStatuses","getStatusPromises","provider","statuses","status","saveSettings","data","error","updateErr","getProviderUrl","mapStateToProps","state","isLoading","mapDispatchToProps","connector","AuthConfigPageUnconnected","authProviders","enabledProviders","p","configuresProviders","availableProviders","firstAvailableProvider","docsLink","subTitle","onCTAClick","onProviderCardClick","Page"],"sourceRoot":""}