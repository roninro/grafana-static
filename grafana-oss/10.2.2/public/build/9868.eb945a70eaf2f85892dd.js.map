{"version":3,"file":"9868.eb945a70eaf2f85892dd.js","mappings":"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","sources":["webpack://grafana/./.yarn/__virtual__/@grafana-google-sdk-virtual-ad7df0fc72/0/cache/@grafana-google-sdk-npm-0.1.1-7f95046cde-a49e8b09ee.zip/node_modules/@grafana/google-sdk/dist/index.production.js","webpack://grafana/./.yarn/__virtual__/@grafana-google-sdk-virtual-ad7df0fc72/0/cache/@grafana-google-sdk-npm-0.1.1-7f95046cde-a49e8b09ee.zip/node_modules/@grafana/google-sdk/index.js","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/CloudMonitoringCheatSheet.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/ConfigEditor/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/VariableQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/AnnotationQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/annotationSupport.ts","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/CloudMonitoringMetricFindQuery.ts","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/variables.ts","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/datasource.ts","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/tracking.ts","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/module.ts"],"sourcesContent":["Object.defineProperty(exports,\"__esModule\",{value:!0});var e=require(\"@grafana/data\"),t=require(\"@grafana/ui\"),a=require(\"react\"),n=require(\"lodash\");function l(e){return e&&\"object\"==typeof e&&\"default\"in e?e:{default:e}}var o=l(a);const i={JWT:\"jwt\",GCE:\"gce\"},r=\"Configuration help box\",s=\"Configuration drop zone\",c=\"Configuration text area\",u=\"Paste JWT button\",d=\"JWT form\",p=\"JWT button\",f=\"GCE button\",m=\"Private Key Path Input\",g=\"Private Key Input\",h=\"Fill JWT info manually\",y=\"Show private key path input\",E=\"Show private key input\",v=[\"private_key\",\"token_uri\",\"client_email\",\"project_id\"],T=({onChange:e,showConfigEditor:n})=>{const[l,i]=a.useState(),[r,d]=a.useState(null),p=t.useTheme2(),f=a.useCallback((e=>{i(null),d(!0)}),[d]),m=a.useCallback((e=>{d(null),i(null)}),[d]),g=a.useCallback((t=>{if(\"\"!==t.trim()){let a;try{a=JSON.parse(t)}catch(e){i(\"Invalid JWT token\")}const l=b(a);l.isValid?(n(),e({privateKey:a.private_key,tokenUri:a.token_uri,clientEmail:a.client_email,projectId:a.project_id})):i(l.error)}}),[i,e,n]);return o.default.createElement(o.default.Fragment,null,o.default.createElement(t.Field,{label:\"JWT token\",invalid:Boolean(l),description:r?\"Paste JWT token below\":\"Upload or paste Google JWT token\",error:l},o.default.createElement(o.default.Fragment,null,!0!==r&&o.default.createElement(\"div\",{\"data-testid\":s},t.FileDropzone&&o.default.createElement(t.FileDropzone,{options:{multiple:!1,accept:\".json\"},readAs:\"readAsText\",onLoad:e=>{g(e),d(!1)}},o.default.createElement(\"p\",{style:{margin:0,fontSize:`${p.typography.h4.fontSize}`,textAlign:\"center\"}},\"Drop the Google JWT file here\",o.default.createElement(\"br\",null),o.default.createElement(\"br\",null),o.default.createElement(t.Button,{fill:\"outline\"},\"Click to browse files\")))),r&&o.default.createElement(t.TextArea,{\"data-testid\":c,autoFocus:!0,invalid:Boolean(l),placeholder:\"Paste Google JWT token here\",onBlur:e=>g(e.currentTarget.value),rows:12}))),!r&&o.default.createElement(o.default.Fragment,null,o.default.createElement(t.Button,{\"data-testid\":u,type:\"button\",fill:\"outline\",style:{color:`${p.colors.primary.text}`},onClick:f},\"Paste JWT Token\"),o.default.createElement(\"span\",{style:{paddingRight:\"10px\",paddingLeft:\"10px\"}},\"or\"),o.default.createElement(t.Button,{\"data-testid\":h,type:\"button\",fill:\"outline\",style:{color:`${p.colors.primary.text}`},onClick:n},\"Fill In JWT Token manually\")),r&&l&&o.default.createElement(t.Field,null,o.default.createElement(t.Button,{type:\"button\",fill:\"outline\",style:{color:`${p.colors.primary.text}`},onClick:m},\"Upload JWT Token\")))},b=e=>{if(!n.isObject(e))return{isValid:!1,error:\"Invalid JWT token\"};const t=v.filter((t=>!e[t]));return t.length>0?{isValid:!1,error:`Missing keys: ${t.join(\", \")}`}:{isValid:!0}},{SecretFormField:j}=t.LegacyForms;var k;!function(e){e.PATH=\"path\",e.JWT=\"jwt\"}(k||(k={}));const J=({options:a,onReset:n,onOptionsChange:l})=>{var i;const[r,s]=o.default.useState((e=>\"privateKeyPath\"in e&&\"\"!==e.privateKeyPath?k.PATH:k.JWT)(a.jsonData)),c=t=>e.onUpdateDatasourceJsonDataOption({options:a,onOptionsChange:l},t),u=()=>{r===k.JWT?s(k.PATH):s(k.JWT)},p=o.default.createElement(\"span\",null,r===k.PATH?o.default.createElement(\"a\",{className:\"external-link\",onClick:u,\"data-testid\":E},\"Paste private key\"):\"Paste private key\",\" \",\"or  \",r===k.JWT?o.default.createElement(\"a\",{className:\"external-link\",onClick:u,\"data-testid\":y},\"provide path to private file\"):\"provide path to private key file\"),f={isConfigured:Boolean(a.secureJsonFields.privateKey),value:(null===(i=a.secureJsonData)||void 0===i?void 0:i.privateKey)||\"\",placeholder:\"Enter Private key\",onReset:()=>n(),onChange:e.onUpdateDatasourceSecureJsonDataOption({options:a,onOptionsChange:l},\"privateKey\"),\"data-testid\":g};return o.default.createElement(\"div\",{\"data-testid\":d},o.default.createElement(t.Field,{label:\"Project ID\"},o.default.createElement(t.Input,{id:\"defaultProject\",width:60,value:a.jsonData.defaultProject||\"\",onChange:c(\"defaultProject\")})),o.default.createElement(t.Field,{label:\"Client email\"},o.default.createElement(t.Input,{width:60,id:\"clientEmail\",value:a.jsonData.clientEmail||\"\",onChange:c(\"clientEmail\")})),o.default.createElement(t.Field,{label:\"Token URI\"},o.default.createElement(t.Input,{width:60,id:\"tokenUri\",value:a.jsonData.tokenUri||\"\",onChange:c(\"tokenUri\")})),r===k.PATH&&o.default.createElement(t.Field,{label:\"Private key path\",description:p},o.default.createElement(t.Input,{width:60,id:\"privateKeyPath\",value:a.jsonData.privateKeyPath||\"\",placeholder:\"File location of your private key (e.g. /etc/secrets/gce.pem)\",onChange:c(\"privateKeyPath\"),\"data-testid\":m})),r===k.JWT&&o.default.createElement(o.default.Fragment,null,t.SecretInput?o.default.createElement(t.Field,{label:\"Private key\",description:p},o.default.createElement(t.SecretInput,Object.assign({},f,{width:60}))):o.default.createElement(j,Object.assign({},f,{label:\"Private key\",labelWidth:10,inputWidth:20}))))};function C(n){const{options:l,onOptionsChange:r,authOptions:s}=n,{jsonData:c,secureJsonFields:u,secureJsonData:d}=l,p=()=>Boolean(c.clientEmail&&c.defaultProject&&c.tokenUri&&(u&&u.privateKey||c.privateKeyPath));c.authenticationType||(c.authenticationType=i.JWT);const[f,m]=a.useState(O(c.authenticationType)),[g,h]=a.useState(p());return o.default.createElement(o.default.Fragment,null,o.default.createElement(t.FieldSet,{label:\"Authentication\"},o.default.createElement(t.Field,{label:\"Authentication type\"},o.default.createElement(t.RadioButtonGroup,{options:s,value:c.authenticationType||i.JWT,onChange:e=>{h(p()),r(Object.assign(Object.assign({},l),{jsonData:Object.assign(Object.assign({},l.jsonData),{authenticationType:e})})),m(O(e))}}))),f&&o.default.createElement(t.FieldSet,{label:\"JWT Key Details\"},g?o.default.createElement(J,{options:l,onReset:()=>(e=>{const t=Object.assign({},d),a=e?Object.assign(Object.assign({},l.jsonData),e):Object.assign({},l.jsonData);delete a.clientEmail,delete a.defaultProject,delete a.tokenUri,delete a.privateKeyPath,delete t.privateKey,m(!0),h(!1),r(Object.assign(Object.assign({},l),{secureJsonFields:Object.assign(Object.assign({},l.secureJsonFields),{privateKey:!1}),secureJsonData:t,jsonData:a}))})(),onOptionsChange:r}):o.default.createElement(T,{showConfigEditor:()=>{h(!0)},onChange:e=>{r(Object.assign(Object.assign({},l),{secureJsonFields:Object.assign(Object.assign({},u),{privateKey:!0}),secureJsonData:Object.assign(Object.assign({},d),{privateKey:e.privateKey}),jsonData:Object.assign(Object.assign({},c),{clientEmail:e.clientEmail,defaultProject:e.projectId,tokenUri:e.tokenUri})}))}}),\" \"),c.authenticationType===i.GCE&&o.default.createElement(t.Field,{label:\"Default project\"},o.default.createElement(t.Input,{id:\"defaultProject\",width:60,value:l.jsonData.defaultProject||\"\",onChange:e.onUpdateDatasourceJsonDataOption(n,\"defaultProject\")})))}const O=e=>e===i.JWT||void 0===e,P=[{label:\"Google JWT File\",value:i.JWT,ariaLabel:p},{label:\"GCE Default Service Account\",value:i.GCE,ariaLabel:f}];exports.AuthConfig=C,exports.ConnectionConfig=e=>{const{options:{jsonData:a}}=e;a.authenticationType||(a.authenticationType=i.JWT);const n=a.authenticationType===i.JWT||void 0===a.authenticationType;return o.default.createElement(o.default.Fragment,null,o.default.createElement(C,Object.assign({authOptions:P},e)),o.default.createElement(\"div\",{className:\"grafana-info-box\",style:{marginTop:\"16px\"},\"data-testid\":r},o.default.createElement(\"p\",null,\"Don’t know how to get a service account key file or create a service account? Read more\",\" \",o.default.createElement(\"a\",{className:\"external-link\",target:\"_blank\",rel:\"noopener noreferrer\",href:\"https://grafana.com/docs/grafana/latest/datasources/google-cloud-monitoring/google-authentication/\"},\"in the documentation.\"))),!n&&o.default.createElement(t.Alert,{title:\"\",severity:\"info\"},\"Verify GCE default service account by clicking Save & Test\"))},exports.GOOGLE_AUTH_TYPE_OPTIONS=P,exports.GoogleAuthType=i,exports.JWTConfigEditor=T,exports.JWTForm=J;\n//# sourceMappingURL=index.production.js.map\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./dist/index.production.js');\n} else {\n  module.exports = require('./dist/index.development.js');\n}\n","import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\n\nimport { QueryEditorHelpProps } from '@grafana/data';\n\nimport { CloudMonitoringQuery } from '../types/query';\n\nexport default class CloudMonitoringCheatSheet extends PureComponent<\n  QueryEditorHelpProps<CloudMonitoringQuery>,\n  { userExamples: string[] }\n> {\n  render() {\n    return (\n      <div>\n        <h2>Cloud Monitoring alias patterns</h2>\n        <div>\n          <p>\n            Format the legend keys any way you want by using alias patterns. Format the legend keys any way you want by\n            using alias patterns.\n          </p>\n          Example:\n          <code>{`${'{{metric.name}} - {{metric.label.instance_name}}'}`}</code>\n          <br />\n          Result: &nbsp;&nbsp;<code>cpu/usage_time - server1-europe-west-1</code>\n          <br />\n          <br />\n          <span>Patterns:</span>\n          <br />\n          <ul\n            className={css`\n              list-style: none;\n            `}\n          >\n            <li>\n              <code>{`${'{{metric.type}}'}`}</code> = metric type e.g. compute.googleapis.com/instance/cpu/usage_time\n            </li>\n            <li>\n              <code>{`${'{{metric.name}}'}`}</code> = name part of metric e.g. instance/cpu/usage_time\n            </li>\n            <li>\n              <code>{`${'{{metric.service}}'}`}</code> = service part of metric e.g. compute\n            </li>\n            <li>\n              <code>{`${'{{metric.label.label_name}}'}`}</code> = Metric label metadata e.g. metric.label.instance_name\n            </li>\n            <li>\n              <code>{`${'{{resource.label.label_name}}'}`}</code> = Resource label metadata e.g. resource.label.zone\n            </li>\n            <li>\n              <code>{`${'{{metadata.system_labels.name}}'}`}</code> = Meta data system labels e.g.\n              metadata.system_labels.name. For this to work, the needs to be included in the group by\n            </li>\n            <li>\n              <code>{`${'{{metadata.user_labels.name}}'}`}</code> = Meta data user labels e.g.\n              metadata.user_labels.name. For this to work, the needs to be included in the group by\n            </li>\n            <li>\n              <code>{`${'{{bucket}}'}`}</code> = bucket boundary for distribution metrics when using a heatmap in\n              Grafana\n            </li>\n            <li>\n              <code>{`${'{{project}}'}`}</code> = The project name that was specified in the query editor\n            </li>\n            <li>\n              <code>{`${'{{service}}'}`}</code> = The service id that was specified in the SLO query editor\n            </li>\n            <li>\n              <code>{`${'{{slo}}'}`}</code> = The SLO id that was specified in the SLO query editor\n            </li>\n            <li>\n              <code>{`${'{{selector}}'}`}</code> = The Selector function that was specified in the SLO query editor\n            </li>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\n\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { ConfigSection, DataSourceDescription } from '@grafana/experimental';\nimport { ConnectionConfig } from '@grafana/google-sdk';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Divider, SecureSocksProxySettings } from '@grafana/ui';\nimport { config } from 'app/core/config';\n\nimport { CloudMonitoringOptions, CloudMonitoringSecureJsonData } from '../../types/types';\n\nexport type Props = DataSourcePluginOptionsEditorProps<CloudMonitoringOptions, CloudMonitoringSecureJsonData>;\n\nexport class ConfigEditor extends PureComponent<Props> {\n  handleOnOptionsChange = (options: Props['options']) => {\n    if (options.jsonData.privateKeyPath || options.secureJsonFields['privateKey']) {\n      reportInteraction('grafana_cloud_monitoring_config_changed', {\n        authenticationType: 'JWT',\n        privateKey: options.secureJsonFields['privateKey'],\n        privateKeyPath: !!options.jsonData.privateKeyPath,\n      });\n    }\n    this.props.onOptionsChange(options);\n  };\n\n  render() {\n    const { options, onOptionsChange } = this.props;\n    return (\n      <>\n        <DataSourceDescription\n          dataSourceName=\"Google Cloud Monitoring\"\n          docsLink=\"https://grafana.com/docs/grafana/latest/datasources/google-cloud-monitoring/\"\n          hasRequiredFields\n        />\n        <Divider />\n        <ConnectionConfig {...this.props} onOptionsChange={this.handleOnOptionsChange}></ConnectionConfig>\n        {config.secureSocksDSProxyEnabled && (\n          <>\n            <Divider />\n            <ConfigSection\n              title=\"Additional settings\"\n              description=\"Additional settings are optional settings that can be configured for more control over your data source. This includes Secure Socks Proxy.\"\n              isCollapsible={true}\n              isInitiallyOpen={options.jsonData.enableSecureSocksProxy !== undefined}\n            >\n              <SecureSocksProxySettings options={options} onOptionsChange={onOptionsChange} />\n            </ConfigSection>\n          </>\n        )}\n      </>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\n\nimport CloudMonitoringDatasource from '../datasource';\nimport { extractServicesFromMetricDescriptors, getLabelKeys, getMetricTypes } from '../functions';\nimport { CloudMonitoringQuery, MetricFindQueryTypes } from '../types/query';\nimport {\n  CloudMonitoringOptions,\n  CloudMonitoringVariableQuery,\n  MetricDescriptor,\n  VariableQueryData,\n} from '../types/types';\n\nimport { VariableQueryField } from './';\n\nexport type Props = QueryEditorProps<\n  CloudMonitoringDatasource,\n  CloudMonitoringQuery,\n  CloudMonitoringOptions,\n  CloudMonitoringVariableQuery\n>;\n\nexport class CloudMonitoringVariableQueryEditor extends PureComponent<Props, VariableQueryData> {\n  queryTypes: Array<{ value: string; label: string }> = [\n    { value: MetricFindQueryTypes.Projects, label: 'Projects' },\n    { value: MetricFindQueryTypes.Services, label: 'Services' },\n    { value: MetricFindQueryTypes.MetricTypes, label: 'Metric Types' },\n    { value: MetricFindQueryTypes.LabelKeys, label: 'Label Keys' },\n    { value: MetricFindQueryTypes.LabelValues, label: 'Label Values' },\n    { value: MetricFindQueryTypes.ResourceTypes, label: 'Resource Types' },\n    { value: MetricFindQueryTypes.Aggregations, label: 'Aggregations' },\n    { value: MetricFindQueryTypes.Aligners, label: 'Aligners' },\n    { value: MetricFindQueryTypes.AlignmentPeriods, label: 'Alignment Periods' },\n    { value: MetricFindQueryTypes.Selectors, label: 'Selectors' },\n    { value: MetricFindQueryTypes.SLOServices, label: 'SLO Services' },\n    { value: MetricFindQueryTypes.SLO, label: 'Service Level Objectives (SLO)' },\n  ];\n\n  defaults: VariableQueryData = {\n    selectedQueryType: this.queryTypes[0].value,\n    metricDescriptors: [],\n    selectedService: '',\n    selectedMetricType: '',\n    labels: [],\n    labelKey: '',\n    metricTypes: [],\n    services: [],\n    sloServices: [],\n    selectedSLOService: '',\n    projects: [],\n    projectName: '',\n    loading: true,\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state = Object.assign(this.defaults, this.props.query);\n  }\n\n  async componentDidMount() {\n    await this.props.datasource.ensureGCEDefaultProject();\n    const projectName = this.props.query.projectName || this.props.datasource.getDefaultProject();\n    const projects = (await this.props.datasource.getProjects()) as MetricDescriptor[];\n    const metricDescriptors = await this.props.datasource.getMetricTypes(\n      this.props.query.projectName || this.props.datasource.getDefaultProject()\n    );\n    const services = extractServicesFromMetricDescriptors(metricDescriptors).map((m: any) => ({\n      value: m.service,\n      label: m.serviceShortName,\n    }));\n\n    let selectedService = '';\n    if (services.some((s) => s.value === getTemplateSrv().replace(this.state.selectedService))) {\n      selectedService = this.state.selectedService;\n    } else if (services && services.length > 0) {\n      selectedService = services[0].value;\n    }\n\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      metricDescriptors,\n      this.state.selectedMetricType,\n      getTemplateSrv().replace(this.state.selectedMetricType),\n      getTemplateSrv().replace(selectedService)\n    );\n\n    const sloServices = await this.props.datasource.getSLOServices(projectName);\n\n    const state: any = {\n      services,\n      selectedService,\n      metricTypes,\n      selectedMetricType,\n      metricDescriptors,\n      projects,\n      ...(await this.getLabels(selectedMetricType, projectName)),\n      sloServices,\n      loading: false,\n      projectName,\n    };\n    this.setState(state, () => this.onPropsChange());\n  }\n\n  onPropsChange = () => {\n    const { metricDescriptors, labels, metricTypes, services, ...queryModel } = this.state;\n    this.props.onChange({ ...queryModel, refId: 'CloudMonitoringVariableQueryEditor-VariableQuery' });\n  };\n\n  async onQueryTypeChange(queryType: string) {\n    const state: any = {\n      selectedQueryType: queryType,\n      ...(await this.getLabels(this.state.selectedMetricType, this.state.projectName, queryType)),\n    };\n\n    this.setState(state);\n  }\n\n  async onProjectChange(projectName: string) {\n    const metricDescriptors = await this.props.datasource.getMetricTypes(projectName);\n    const labels = await this.getLabels(this.state.selectedMetricType, projectName);\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      metricDescriptors,\n      this.state.selectedMetricType,\n      getTemplateSrv().replace(this.state.selectedMetricType),\n      getTemplateSrv().replace(this.state.selectedService)\n    );\n\n    const sloServices = await this.props.datasource.getSLOServices(projectName);\n\n    this.setState(\n      {\n        ...labels,\n        metricTypes,\n        selectedMetricType,\n        metricDescriptors,\n        projectName,\n        sloServices,\n      },\n      () => this.onPropsChange()\n    );\n  }\n\n  async onServiceChange(service: string) {\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      this.state.metricDescriptors,\n      this.state.selectedMetricType,\n      getTemplateSrv().replace(this.state.selectedMetricType),\n      getTemplateSrv().replace(service)\n    );\n    const state: any = {\n      selectedService: service,\n      metricTypes,\n      selectedMetricType,\n      ...(await this.getLabels(selectedMetricType, this.state.projectName)),\n    };\n    this.setState(state, () => this.onPropsChange());\n  }\n\n  async onMetricTypeChange(metricType: string) {\n    const state: any = {\n      selectedMetricType: metricType,\n      ...(await this.getLabels(metricType, this.state.projectName)),\n    };\n    this.setState(state, () => this.onPropsChange());\n  }\n\n  onLabelKeyChange(labelKey: string) {\n    this.setState({ labelKey }, () => this.onPropsChange());\n  }\n\n  componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<VariableQueryData>) {\n    const selecQueryTypeChanged = prevState.selectedQueryType !== this.state.selectedQueryType;\n    const selectSLOServiceChanged = this.state.selectedSLOService !== prevState.selectedSLOService;\n    if (selecQueryTypeChanged || selectSLOServiceChanged) {\n      this.onPropsChange();\n    }\n  }\n\n  async getLabels(selectedMetricType: string, projectName: string, selectedQueryType = this.state.selectedQueryType) {\n    let result = { labels: this.state.labels, labelKey: this.state.labelKey };\n    if (selectedMetricType && selectedQueryType === MetricFindQueryTypes.LabelValues) {\n      const labels = await getLabelKeys(this.props.datasource, selectedMetricType, projectName);\n      const labelKey = labels.some((l) => l === getTemplateSrv().replace(this.state.labelKey))\n        ? this.state.labelKey\n        : labels[0];\n      result = { labels, labelKey };\n    }\n    return result;\n  }\n\n  renderQueryTypeSwitch(queryType: string) {\n    const variableOptionGroup = {\n      label: 'Template Variables',\n      expanded: false,\n      options: getTemplateSrv()\n        .getVariables()\n        .map((v: any) => ({\n          value: `$${v.name}`,\n          label: `$${v.name}`,\n        })),\n    };\n\n    switch (queryType) {\n      case MetricFindQueryTypes.MetricTypes:\n        return (\n          <>\n            <VariableQueryField\n              allowCustomValue={true}\n              value={this.state.projectName}\n              options={[variableOptionGroup, ...this.state.projects]}\n              onChange={(value) => this.onProjectChange(value)}\n              label=\"Project\"\n            />\n            <VariableQueryField\n              value={this.state.selectedService}\n              options={[variableOptionGroup, ...this.state.services]}\n              onChange={(value) => this.onServiceChange(value)}\n              label=\"Service\"\n            />\n          </>\n        );\n      case MetricFindQueryTypes.LabelKeys:\n      case MetricFindQueryTypes.LabelValues:\n      case MetricFindQueryTypes.ResourceTypes:\n        return (\n          <>\n            <VariableQueryField\n              allowCustomValue={true}\n              value={this.state.projectName}\n              options={[variableOptionGroup, ...this.state.projects]}\n              onChange={(value) => this.onProjectChange(value)}\n              label=\"Project\"\n            />\n            <VariableQueryField\n              value={this.state.selectedService}\n              options={[variableOptionGroup, ...this.state.services]}\n              onChange={(value) => this.onServiceChange(value)}\n              label=\"Service\"\n            />\n            <VariableQueryField\n              value={this.state.selectedMetricType}\n              options={[\n                variableOptionGroup,\n                ...this.state.metricTypes.map(({ value, name }) => ({ value, label: name })),\n              ]}\n              onChange={(value) => this.onMetricTypeChange(value)}\n              label=\"Metric Type\"\n            />\n            {queryType === MetricFindQueryTypes.LabelValues && (\n              <VariableQueryField\n                value={this.state.labelKey}\n                options={[variableOptionGroup, ...this.state.labels.map((l) => ({ value: l, label: l }))]}\n                onChange={(value) => this.onLabelKeyChange(value)}\n                label=\"Label Key\"\n              />\n            )}\n          </>\n        );\n      case MetricFindQueryTypes.Aligners:\n      case MetricFindQueryTypes.Aggregations:\n        return (\n          <>\n            <VariableQueryField\n              value={this.state.selectedService}\n              options={[variableOptionGroup, ...this.state.services]}\n              onChange={(value) => this.onServiceChange(value)}\n              label=\"Service\"\n            />\n            <VariableQueryField\n              value={this.state.selectedMetricType}\n              options={[\n                variableOptionGroup,\n                ...this.state.metricTypes.map(({ value, name }) => ({ value, label: name })),\n              ]}\n              onChange={(value) => this.onMetricTypeChange(value)}\n              label=\"Metric Type\"\n            />\n          </>\n        );\n      case MetricFindQueryTypes.SLOServices:\n        return (\n          <>\n            <VariableQueryField\n              allowCustomValue={true}\n              value={this.state.projectName}\n              options={[variableOptionGroup, ...this.state.projects]}\n              onChange={(value) => this.onProjectChange(value)}\n              label=\"Project\"\n            />\n          </>\n        );\n\n      case MetricFindQueryTypes.SLO:\n        return (\n          <>\n            <VariableQueryField\n              allowCustomValue={true}\n              value={this.state.projectName}\n              options={[variableOptionGroup, ...this.state.projects]}\n              onChange={(value) => this.onProjectChange(value)}\n              label=\"Project\"\n            />\n            <VariableQueryField\n              value={this.state.selectedSLOService}\n              options={[variableOptionGroup, ...this.state.sloServices]}\n              onChange={(value) => {\n                this.setState({\n                  ...this.state,\n                  selectedSLOService: value,\n                });\n              }}\n              label=\"SLO Service\"\n            />\n          </>\n        );\n      default:\n        return '';\n    }\n  }\n\n  render() {\n    if (this.state.loading) {\n      return (\n        <VariableQueryField\n          value={'loading'}\n          options={[{ value: 'loading', label: 'Loading...' }]}\n          onChange={(value) => null}\n          label=\"Query Type\"\n        />\n      );\n    }\n\n    return (\n      <>\n        <VariableQueryField\n          value={this.state.selectedQueryType}\n          options={this.queryTypes}\n          onChange={(value) => this.onQueryTypeChange(value)}\n          label=\"Query Type\"\n        />\n        {this.renderQueryTypeSwitch(this.state.selectedQueryType)}\n      </>\n    );\n  }\n}\n","import React, { useEffect, useState } from 'react';\nimport { useDebounce } from 'react-use';\n\nimport { QueryEditorProps, toOption } from '@grafana/data';\nimport { EditorField, EditorRows } from '@grafana/experimental';\nimport { Input } from '@grafana/ui';\n\nimport CloudMonitoringDatasource from '../datasource';\nimport { TimeSeriesList, CloudMonitoringQuery, QueryType } from '../types/query';\nimport { CloudMonitoringOptions } from '../types/types';\n\nimport { MetricQueryEditor, defaultTimeSeriesList } from './MetricQueryEditor';\n\nimport { AnnotationsHelp } from './';\n\nexport type Props = QueryEditorProps<CloudMonitoringDatasource, CloudMonitoringQuery, CloudMonitoringOptions>;\n\nexport const defaultQuery: (datasource: CloudMonitoringDatasource) => TimeSeriesList = (datasource) => ({\n  ...defaultTimeSeriesList(datasource),\n  title: '',\n  text: '',\n});\n\nexport const AnnotationQueryEditor = (props: Props) => {\n  const { datasource, query, onRunQuery, data, onChange } = props;\n  const meta = data?.series.length ? data?.series[0].meta : {};\n  const customMetaData = meta?.custom ?? {};\n  const timeSeriesList = { ...defaultQuery(datasource), ...query.timeSeriesList };\n  const [title, setTitle] = useState(timeSeriesList.title || '');\n  const [text, setText] = useState(timeSeriesList.text || '');\n  const variableOptionGroup = {\n    label: 'Template Variables',\n    options: datasource.getVariables().map(toOption),\n  };\n\n  const handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  };\n  const handleTextChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setText(e.target.value);\n  };\n\n  useDebounce(\n    () => {\n      onChange({ ...query, timeSeriesList: { ...timeSeriesList, title } });\n    },\n    1000,\n    [title, onChange]\n  );\n  useDebounce(\n    () => {\n      onChange({ ...query, timeSeriesList: { ...timeSeriesList, text } });\n    },\n    1000,\n    [text, onChange]\n  );\n\n  // Use a known query type\n  useEffect(() => {\n    if (!query.queryType || !Object.values(QueryType).includes(query.queryType)) {\n      onChange({ ...query, queryType: QueryType.TIME_SERIES_LIST });\n    }\n  });\n\n  return (\n    <EditorRows>\n      <>\n        <MetricQueryEditor\n          refId={query.refId}\n          variableOptionGroup={variableOptionGroup}\n          customMetaData={customMetaData}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          datasource={datasource}\n          query={query}\n        />\n        <EditorField label=\"Title\" htmlFor=\"annotation-query-title\">\n          <Input id=\"annotation-query-title\" value={title} onChange={handleTitleChange} />\n        </EditorField>\n        <EditorField label=\"Text\" htmlFor=\"annotation-query-text\">\n          <Input id=\"annotation-query-text\" value={text} onChange={handleTextChange} />\n        </EditorField>\n      </>\n      <AnnotationsHelp />\n    </EditorRows>\n  );\n};\n","import { AnnotationSupport, AnnotationQuery } from '@grafana/data';\n\nimport { AnnotationQueryEditor } from './components/AnnotationQueryEditor';\nimport CloudMonitoringDatasource from './datasource';\nimport { AlignmentTypes, CloudMonitoringQuery, QueryType, LegacyCloudMonitoringAnnotationQuery } from './types/query';\n\n// The legacy query format sets the title and text values to empty strings by default.\n// If the title or text is not undefined at the top-level of the annotation target,\n// then it is a legacy query.\nconst isLegacyCloudMonitoringAnnotation = (\n  query: unknown\n): query is AnnotationQuery<LegacyCloudMonitoringAnnotationQuery> =>\n  (query as AnnotationQuery<LegacyCloudMonitoringAnnotationQuery>).target?.title !== undefined ||\n  (query as AnnotationQuery<LegacyCloudMonitoringAnnotationQuery>).target?.text !== undefined;\n\nexport const CloudMonitoringAnnotationSupport: (\n  ds: CloudMonitoringDatasource\n) => AnnotationSupport<CloudMonitoringQuery> = (ds: CloudMonitoringDatasource) => {\n  return {\n    prepareAnnotation: (\n      query: AnnotationQuery<LegacyCloudMonitoringAnnotationQuery> | AnnotationQuery<CloudMonitoringQuery>\n    ): AnnotationQuery<CloudMonitoringQuery> => {\n      if (!isLegacyCloudMonitoringAnnotation(query)) {\n        return query;\n      }\n\n      const { enable, name, iconColor } = query;\n      const { target } = query;\n      const result: AnnotationQuery<CloudMonitoringQuery> = {\n        datasource: query.datasource,\n        enable,\n        name,\n        iconColor,\n        target: {\n          intervalMs: ds.intervalMs,\n          refId: target?.refId || 'annotationQuery',\n          queryType: QueryType.ANNOTATION,\n          timeSeriesList: {\n            projectName: target?.projectName || ds.getDefaultProject(),\n            filters: target?.filters || [],\n            crossSeriesReducer: 'REDUCE_NONE',\n            perSeriesAligner: AlignmentTypes.ALIGN_NONE,\n            title: target?.title || '',\n            text: target?.text || '',\n          },\n        },\n      };\n      return result;\n    },\n    prepareQuery: (anno: AnnotationQuery<CloudMonitoringQuery>) => {\n      if (!anno.target) {\n        return undefined;\n      }\n\n      return {\n        ...anno.target,\n        queryType: QueryType.ANNOTATION,\n        type: 'annotationQuery',\n      };\n    },\n    QueryEditor: AnnotationQueryEditor,\n  };\n};\n","import { isString } from 'lodash';\n\nimport { SelectableValue } from '@grafana/data';\n\nimport { ALIGNMENT_PERIODS, SELECTORS } from './constants';\nimport CloudMonitoringDatasource from './datasource';\nimport {\n  extractServicesFromMetricDescriptors,\n  getAggregationOptionsByMetric,\n  getAlignmentOptionsByMetric,\n  getLabelKeys,\n  getMetricTypesByService,\n} from './functions';\nimport { ValueTypes, MetricFindQueryTypes } from './types/query';\nimport { CloudMonitoringVariableQuery, MetricDescriptor } from './types/types';\n\nexport default class CloudMonitoringMetricFindQuery {\n  constructor(private datasource: CloudMonitoringDatasource) {}\n\n  async execute(query: CloudMonitoringVariableQuery) {\n    try {\n      if (!query.projectName) {\n        query.projectName = this.datasource.getDefaultProject();\n      }\n\n      switch (query.selectedQueryType) {\n        case MetricFindQueryTypes.Projects:\n          return this.handleProjectsQuery();\n        case MetricFindQueryTypes.Services:\n          return this.handleServiceQuery(query);\n        case MetricFindQueryTypes.MetricTypes:\n          return this.handleMetricTypesQuery(query);\n        case MetricFindQueryTypes.LabelKeys:\n          return this.handleLabelKeysQuery(query);\n        case MetricFindQueryTypes.LabelValues:\n          return this.handleLabelValuesQuery(query);\n        case MetricFindQueryTypes.ResourceTypes:\n          return this.handleResourceTypeQuery(query);\n        case MetricFindQueryTypes.Aligners:\n          return this.handleAlignersQuery(query);\n        case MetricFindQueryTypes.AlignmentPeriods:\n          return this.handleAlignmentPeriodQuery();\n        case MetricFindQueryTypes.Aggregations:\n          return this.handleAggregationQuery(query);\n        case MetricFindQueryTypes.SLOServices:\n          return this.handleSLOServicesQuery(query);\n        case MetricFindQueryTypes.SLO:\n          return this.handleSLOQuery(query);\n        case MetricFindQueryTypes.Selectors:\n          return this.handleSelectorQuery();\n        default:\n          return [];\n      }\n    } catch (error) {\n      console.error(`Could not run CloudMonitoringMetricFindQuery ${query}`, error);\n      return [];\n    }\n  }\n\n  async handleProjectsQuery() {\n    const projects = await this.datasource.getProjects();\n    return (projects as SelectableValue<string>).map((s: { label: string; value: string }) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleServiceQuery({ projectName }: CloudMonitoringVariableQuery) {\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const services: MetricDescriptor[] = extractServicesFromMetricDescriptors(metricDescriptors);\n    return services.map((s) => ({\n      text: s.serviceShortName,\n      value: s.service,\n      expandable: true,\n    }));\n  }\n\n  async handleMetricTypesQuery({ selectedService, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedService) {\n      return [];\n    }\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    return getMetricTypesByService(metricDescriptors, this.datasource.templateSrv.replace(selectedService)).map(\n      (s) => ({\n        text: s.displayName,\n        value: s.type,\n        expandable: true,\n      })\n    );\n  }\n\n  async handleLabelKeysQuery({ selectedMetricType, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const labelKeys = await getLabelKeys(this.datasource, selectedMetricType, projectName);\n    return labelKeys.map(this.toFindQueryResult);\n  }\n\n  async handleLabelValuesQuery({ selectedMetricType, labelKey, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const refId = 'handleLabelValuesQuery';\n    // REDUCE_MEAN is needed so the groupBy is not ignored\n    const labels = await this.datasource.getLabels(selectedMetricType, refId, projectName, {\n      groupBys: [labelKey],\n      crossSeriesReducer: 'REDUCE_MEAN',\n    });\n    const interpolatedKey = this.datasource.templateSrv.replace(labelKey);\n    const values = labels.hasOwnProperty(interpolatedKey) ? labels[interpolatedKey] : [];\n    return values.map(this.toFindQueryResult);\n  }\n\n  async handleResourceTypeQuery({ selectedMetricType, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const refId = 'handleResourceTypeQueryQueryType';\n    const labels = await this.datasource.getLabels(selectedMetricType, refId, projectName);\n    return labels['resource.type']?.map(this.toFindQueryResult) ?? [];\n  }\n\n  async handleAlignersQuery({ selectedMetricType, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const descriptor = metricDescriptors.find(\n      (m) => m.type === this.datasource.templateSrv.replace(selectedMetricType)\n    );\n\n    if (!descriptor) {\n      return [];\n    }\n\n    return getAlignmentOptionsByMetric(descriptor.valueType, descriptor.metricKind).map(this.toFindQueryResult);\n  }\n\n  async handleAggregationQuery({ selectedMetricType, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const descriptor = metricDescriptors.find(\n      (m) => m.type === this.datasource.templateSrv.replace(selectedMetricType)\n    );\n\n    if (!descriptor) {\n      return [];\n    }\n\n    return getAggregationOptionsByMetric(descriptor.valueType as ValueTypes, descriptor.metricKind).map(\n      this.toFindQueryResult\n    );\n  }\n\n  async handleSLOServicesQuery({ projectName }: CloudMonitoringVariableQuery) {\n    const services = await this.datasource.getSLOServices(projectName);\n    return services.map(this.toFindQueryResult);\n  }\n\n  async handleSLOQuery({ selectedSLOService, projectName }: CloudMonitoringVariableQuery) {\n    const slos = await this.datasource.getServiceLevelObjectives(projectName, selectedSLOService);\n    return slos.map(this.toFindQueryResult);\n  }\n\n  async handleSelectorQuery() {\n    return SELECTORS.map(this.toFindQueryResult);\n  }\n\n  handleAlignmentPeriodQuery() {\n    return ALIGNMENT_PERIODS.map(this.toFindQueryResult);\n  }\n\n  toFindQueryResult(x: any) {\n    return isString(x) ? { text: x, expandable: true } : { ...x, expandable: true };\n  }\n}\n","import { from, Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\n\nimport { CustomVariableSupport, DataQueryRequest, DataQueryResponse } from '@grafana/data';\n\nimport CloudMonitoringMetricFindQuery from './CloudMonitoringMetricFindQuery';\nimport { CloudMonitoringVariableQueryEditor } from './components/VariableQueryEditor';\nimport CloudMonitoringDatasource from './datasource';\nimport { CloudMonitoringVariableQuery } from './types/types';\n\nexport class CloudMonitoringVariableSupport extends CustomVariableSupport<\n  CloudMonitoringDatasource,\n  CloudMonitoringVariableQuery\n> {\n  private readonly metricFindQuery: CloudMonitoringMetricFindQuery;\n\n  constructor(private readonly datasource: CloudMonitoringDatasource) {\n    super();\n    this.metricFindQuery = new CloudMonitoringMetricFindQuery(datasource);\n  }\n\n  editor = CloudMonitoringVariableQueryEditor;\n\n  query(request: DataQueryRequest<CloudMonitoringVariableQuery>): Observable<DataQueryResponse> {\n    const executeObservable = from(this.metricFindQuery.execute(request.targets[0]));\n    return from(this.datasource.ensureGCEDefaultProject()).pipe(\n      mergeMap(() => executeObservable),\n      map((data) => ({ data }))\n    );\n  }\n}\n","import { chunk, flatten, isString, isArray, has, get, omit } from 'lodash';\nimport { from, lastValueFrom, Observable, of } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\n\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  ScopedVars,\n  SelectableValue,\n  TimeRange,\n} from '@grafana/data';\nimport { DataSourceWithBackend, getBackendSrv, toDataQueryResponse, BackendSrv } from '@grafana/runtime';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\n\nimport { CloudMonitoringAnnotationSupport } from './annotationSupport';\nimport { SLO_BURN_RATE_SELECTOR_NAME } from './constants';\nimport { getMetricType, setMetricType } from './functions';\nimport { CloudMonitoringQuery, QueryType, MetricQuery, Filter } from './types/query';\nimport { CloudMonitoringOptions, MetricDescriptor, PostResponse, Aggregation } from './types/types';\nimport { CloudMonitoringVariableSupport } from './variables';\n\nexport default class CloudMonitoringDatasource extends DataSourceWithBackend<\n  CloudMonitoringQuery,\n  CloudMonitoringOptions\n> {\n  authenticationType: string;\n  intervalMs: number;\n  backendSrv: BackendSrv;\n\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings<CloudMonitoringOptions>,\n    public templateSrv: TemplateSrv = getTemplateSrv(),\n    readonly timeSrv: TimeSrv = getTimeSrv()\n  ) {\n    super(instanceSettings);\n    this.authenticationType = instanceSettings.jsonData.authenticationType || 'jwt';\n    this.variables = new CloudMonitoringVariableSupport(this);\n    this.intervalMs = 0;\n    this.annotations = CloudMonitoringAnnotationSupport(this);\n    this.backendSrv = getBackendSrv();\n  }\n\n  getVariables() {\n    return this.templateSrv.getVariables().map((v) => `$${v.name}`);\n  }\n\n  query(request: DataQueryRequest<CloudMonitoringQuery>): Observable<DataQueryResponse> {\n    request.targets = request.targets.map((t) => ({\n      ...this.migrateQuery(t),\n      intervalMs: request.intervalMs,\n    }));\n    return super.query(request);\n  }\n\n  applyTemplateVariables(target: CloudMonitoringQuery, scopedVars: ScopedVars): Record<string, any> {\n    const { timeSeriesList, timeSeriesQuery, sloQuery, promQLQuery } = target;\n\n    return {\n      ...target,\n      datasource: this.getRef(),\n      intervalMs: this.intervalMs,\n      timeSeriesList: timeSeriesList && {\n        ...this.interpolateProps(timeSeriesList, scopedVars),\n        projectName: this.templateSrv.replace(\n          timeSeriesList.projectName ? timeSeriesList.projectName : this.getDefaultProject(),\n          scopedVars\n        ),\n        filters: this.interpolateFilters(timeSeriesList.filters || [], scopedVars),\n        groupBys: this.interpolateGroupBys(timeSeriesList.groupBys || [], scopedVars),\n        view: timeSeriesList.view || 'FULL',\n      },\n      timeSeriesQuery: timeSeriesQuery && {\n        ...this.interpolateProps(timeSeriesQuery, scopedVars),\n        projectName: this.templateSrv.replace(\n          timeSeriesQuery.projectName ? timeSeriesQuery.projectName : this.getDefaultProject(),\n          scopedVars\n        ),\n      },\n      sloQuery: sloQuery && this.interpolateProps(sloQuery, scopedVars),\n      promQLQuery: promQLQuery && this.interpolateProps(promQLQuery, scopedVars),\n    };\n  }\n\n  async getLabels(\n    metricType: string,\n    refId: string,\n    projectName: string,\n    aggregation?: Aggregation,\n    timeRange?: TimeRange\n  ) {\n    const options = {\n      targets: [\n        {\n          refId,\n          datasource: this.getRef(),\n          queryType: QueryType.TIME_SERIES_LIST,\n          timeSeriesList: setMetricType(\n            {\n              projectName: this.templateSrv.replace(projectName),\n              groupBys: this.interpolateGroupBys(aggregation?.groupBys || [], {}),\n              crossSeriesReducer: aggregation?.crossSeriesReducer ?? 'REDUCE_NONE',\n              view: 'HEADERS',\n            },\n            metricType\n          ),\n        },\n      ],\n      range: timeRange ?? this.timeSrv.timeRange(),\n    };\n\n    const queries = options.targets;\n\n    if (!queries.length) {\n      return lastValueFrom(of({ results: [] }));\n    }\n\n    return lastValueFrom(\n      from(this.ensureGCEDefaultProject()).pipe(\n        mergeMap(() => {\n          return this.backendSrv.fetch<PostResponse>({\n            url: '/api/ds/query',\n            method: 'POST',\n            headers: this.getRequestHeaders(),\n            data: {\n              from: options.range.from.valueOf().toString(),\n              to: options.range.to.valueOf().toString(),\n              queries,\n            },\n          });\n        }),\n        map(({ data }) => {\n          const dataQueryResponse = toDataQueryResponse({\n            data: data,\n          });\n          const labels = dataQueryResponse?.data\n            .map((f) => f.meta?.custom?.labels)\n            .filter((p) => !!p)\n            .reduce((acc, labels) => {\n              for (let key in labels) {\n                if (!acc[key]) {\n                  acc[key] = new Set<string>();\n                }\n                if (labels[key]) {\n                  acc[key].add(labels[key]);\n                }\n              }\n              return acc;\n            }, {});\n          return Object.fromEntries(\n            Object.entries(labels).map((l: any) => {\n              l[1] = Array.from(l[1]);\n              return l;\n            })\n          );\n        })\n      )\n    );\n  }\n\n  async getGCEDefaultProject() {\n    return this.getResource(`gceDefaultProject`);\n  }\n\n  getDefaultProject(): string {\n    const { defaultProject, authenticationType, gceDefaultProject } = this.instanceSettings.jsonData;\n    if (authenticationType === 'gce') {\n      return gceDefaultProject || '';\n    }\n\n    return defaultProject || '';\n  }\n\n  async ensureGCEDefaultProject() {\n    const { authenticationType, gceDefaultProject } = this.instanceSettings.jsonData;\n    if (authenticationType === 'gce' && !gceDefaultProject) {\n      this.instanceSettings.jsonData.gceDefaultProject = await this.getGCEDefaultProject();\n    }\n  }\n\n  async getMetricTypes(projectName: string): Promise<MetricDescriptor[]> {\n    if (!projectName) {\n      return [];\n    }\n\n    return this.getResource(`metricDescriptors/v3/projects/${this.templateSrv.replace(projectName)}/metricDescriptors`);\n  }\n\n  async filterMetricsByType(projectName: string, filter: string): Promise<MetricDescriptor[]> {\n    if (!projectName) {\n      return [];\n    }\n\n    return this.getResource(\n      `metricDescriptors/v3/projects/${this.templateSrv.replace(projectName)}/metricDescriptors`,\n      { filter: `metric.type : \"${filter}\"` }\n    );\n  }\n\n  async getSLOServices(projectName: string): Promise<Array<SelectableValue<string>>> {\n    return this.getResource(`services/v3/projects/${this.templateSrv.replace(projectName)}/services?pageSize=1000`);\n  }\n\n  async getServiceLevelObjectives(projectName: string, serviceId: string): Promise<Array<SelectableValue<string>>> {\n    if (!serviceId) {\n      return Promise.resolve([]);\n    }\n    let { projectName: p, serviceId: s } = this.interpolateProps({ projectName, serviceId });\n    return this.getResource(`slo-services/v3/projects/${p}/services/${s}/serviceLevelObjectives`);\n  }\n\n  getProjects(): Promise<Array<SelectableValue<string>>> {\n    return this.getResource(`projects`);\n  }\n\n  migrateMetricTypeFilter(metricType: string, filters?: string[]) {\n    const metricTypeFilterArray = ['metric.type', '=', metricType];\n    if (filters?.length) {\n      return filters.concat('AND', metricTypeFilterArray);\n    }\n    return metricTypeFilterArray;\n  }\n\n  // This is a manual port of the migration code in cloudmonitoring.go\n  // DO NOT UPDATE THIS CODE WITHOUT UPDATING THE BACKEND CODE\n  migrateQuery(query: CloudMonitoringQuery): CloudMonitoringQuery {\n    const { hide, refId, datasource, key, queryType, maxLines, metric, intervalMs, type, ...rest } = query as any;\n    if (\n      !query.hasOwnProperty('metricQuery') &&\n      !query.hasOwnProperty('sloQuery') &&\n      !query.hasOwnProperty('timeSeriesQuery') &&\n      !query.hasOwnProperty('timeSeriesList')\n    ) {\n      return {\n        datasource,\n        key,\n        refId,\n        intervalMs,\n        hide,\n        queryType: type === 'annotationQuery' ? QueryType.ANNOTATION : QueryType.TIME_SERIES_LIST,\n        timeSeriesList: {\n          ...rest,\n          view: rest.view || 'FULL',\n        },\n      };\n    }\n\n    if (has(query, 'metricQuery') && ['metrics', QueryType.ANNOTATION].includes(query.queryType ?? '')) {\n      const metricQuery: MetricQuery = get(query, 'metricQuery')!;\n      if (metricQuery.editorMode === 'mql') {\n        query.timeSeriesQuery = {\n          projectName: metricQuery.projectName,\n          query: metricQuery.query,\n          graphPeriod: metricQuery.graphPeriod,\n        };\n        query.queryType = QueryType.TIME_SERIES_QUERY;\n      } else {\n        query.timeSeriesList = {\n          projectName: metricQuery.projectName,\n          crossSeriesReducer: metricQuery.crossSeriesReducer,\n          alignmentPeriod: metricQuery.alignmentPeriod,\n          perSeriesAligner: metricQuery.perSeriesAligner,\n          groupBys: metricQuery.groupBys,\n          filters: metricQuery.filters,\n          view: metricQuery.view,\n          preprocessor: metricQuery.preprocessor,\n        };\n        query.queryType = QueryType.TIME_SERIES_LIST;\n        if (metricQuery.metricType) {\n          query.timeSeriesList.filters = this.migrateMetricTypeFilter(\n            metricQuery.metricType,\n            query.timeSeriesList.filters\n          );\n        }\n      }\n      query.aliasBy = metricQuery.aliasBy;\n      query = omit(query, 'metricQuery');\n    }\n\n    if (query.queryType === QueryType.SLO && has(query, 'sloQuery.aliasBy')) {\n      query.aliasBy = get(query, 'sloQuery.aliasBy');\n      query = omit(query, 'sloQuery.aliasBy');\n    }\n\n    return query;\n  }\n\n  interpolateProps<T extends Record<string, any>>(object: T, scopedVars: ScopedVars = {}): T {\n    return Object.entries(object).reduce((acc, [key, value]) => {\n      return {\n        ...acc,\n        [key]: value && isString(value) ? this.templateSrv.replace(value, scopedVars) : value,\n      };\n    }, {} as T);\n  }\n\n  filterQuery(query: CloudMonitoringQuery): boolean {\n    if (query.hide) {\n      return false;\n    }\n\n    if (query.queryType === QueryType.SLO) {\n      if (!query.sloQuery) {\n        return false;\n      }\n      const { selectorName, serviceId, sloId, projectName, lookbackPeriod } = query.sloQuery;\n      return (\n        !!selectorName &&\n        !!serviceId &&\n        !!sloId &&\n        !!projectName &&\n        (selectorName !== SLO_BURN_RATE_SELECTOR_NAME || !!lookbackPeriod)\n      );\n    }\n\n    if (query.queryType === QueryType.TIME_SERIES_QUERY) {\n      return !!query.timeSeriesQuery && !!query.timeSeriesQuery.projectName && !!query.timeSeriesQuery.query;\n    }\n\n    if (query.queryType && [QueryType.TIME_SERIES_LIST, QueryType.ANNOTATION].includes(query.queryType)) {\n      return !!query.timeSeriesList && !!query.timeSeriesList.projectName && !!getMetricType(query.timeSeriesList);\n    }\n\n    if (query.queryType === QueryType.PROMQL) {\n      return (\n        !!query.promQLQuery && !!query.promQLQuery.projectName && !!query.promQLQuery.expr && !!query.promQLQuery.step\n      );\n    }\n\n    return false;\n  }\n\n  interpolateVariablesInQueries(queries: CloudMonitoringQuery[], scopedVars: ScopedVars): CloudMonitoringQuery[] {\n    return queries.map(\n      (query) => this.applyTemplateVariables(this.migrateQuery(query), scopedVars) as CloudMonitoringQuery\n    );\n  }\n\n  interpolateFilters(filters: string[], scopedVars: ScopedVars) {\n    const completeFilter: Filter[] = chunk(filters, 4)\n      .map(([key, operator, value, condition]) => ({\n        key,\n        operator,\n        value,\n        ...(condition && { condition }),\n      }))\n      .filter((item) => item.value);\n\n    const filterArray = flatten(\n      completeFilter.map(({ key, operator, value, condition }: Filter) => [\n        this.templateSrv.replace(key, scopedVars || {}),\n        operator,\n        this.templateSrv.replace(value, scopedVars || {}, (value: string | string[]) => {\n          return isArray(value) && value.length ? `(${value.join('|')})` : value;\n        }),\n        ...(condition ? [condition] : []),\n      ])\n    );\n\n    return filterArray || [];\n  }\n\n  interpolateGroupBys(groupBys: string[], scopedVars: {}): string[] {\n    let interpolatedGroupBys: string[] = [];\n    (groupBys || []).forEach((gb) => {\n      const interpolated = this.templateSrv.replace(gb, scopedVars || {}, 'csv').split(',');\n      if (Array.isArray(interpolated)) {\n        interpolatedGroupBys = interpolatedGroupBys.concat(interpolated);\n      } else {\n        interpolatedGroupBys.push(interpolated);\n      }\n    });\n    return interpolatedGroupBys;\n  }\n}\n","import { reportInteraction } from '@grafana/runtime';\n\n/**\n * Loaded the first time a dashboard containing Cloudmonitoring queries is loaded (not on every render)\n * Note: The queries used here are the ones pre-migration and pre-filterQuery\n */\nexport const trackCloudMonitoringDashboardLoaded = (props: CloudMonitoringDashboardLoadedProps) => {\n  reportInteraction('grafana_ds_cloudmonitoring_dashboard_loaded', props);\n};\n\nexport type CloudMonitoringDashboardLoadedProps = {\n  grafana_version?: string;\n  dashboard_id: string;\n  org_id?: number;\n  /** number of non hidden queries of type TimeSeriesQuery (MQL) if any  */\n  mql_queries: number;\n  /** number of non hidden queries of type TimeSeriesFilter (Builder) if any  */\n  time_series_filter_queries: number;\n  /** number of non hidden queries of type SLO if any  */\n  slo_queries: number;\n  /** number of non hidden queries of type annotation if any  */\n  annotation_queries: number;\n  /** number of non hidden queries of type PromQL if any  */\n  promQL_queries: number;\n};\n","import { get } from 'lodash';\n\nimport { DataSourcePlugin, DashboardLoadedEvent } from '@grafana/data';\nimport { getAppEvents } from '@grafana/runtime';\n\nimport CloudMonitoringCheatSheet from './components/CloudMonitoringCheatSheet';\nimport { ConfigEditor } from './components/ConfigEditor/ConfigEditor';\nimport { QueryEditor } from './components/QueryEditor';\nimport { CloudMonitoringVariableQueryEditor } from './components/VariableQueryEditor';\nimport CloudMonitoringDatasource from './datasource';\nimport pluginJson from './plugin.json';\nimport { trackCloudMonitoringDashboardLoaded } from './tracking';\nimport { CloudMonitoringQuery, QueryType } from './types/query';\n\nexport const plugin = new DataSourcePlugin<CloudMonitoringDatasource, CloudMonitoringQuery>(CloudMonitoringDatasource)\n  .setQueryEditorHelp(CloudMonitoringCheatSheet)\n  .setQueryEditor(QueryEditor)\n  .setConfigEditor(ConfigEditor)\n  .setVariableQueryEditor(CloudMonitoringVariableQueryEditor);\n\n// Track dashboard loads to RudderStack\ngetAppEvents().subscribe<DashboardLoadedEvent<CloudMonitoringQuery>>(\n  DashboardLoadedEvent,\n  ({ payload: { dashboardId, orgId, grafanaVersion, queries } }) => {\n    const cloudmonitorQueries = queries[pluginJson.id];\n    let stats = {\n      [QueryType.TIME_SERIES_QUERY]: 0,\n      [QueryType.TIME_SERIES_LIST]: 0,\n      [QueryType.SLO]: 0,\n      [QueryType.ANNOTATION]: 0,\n      [QueryType.PROMQL]: 0,\n    };\n    cloudmonitorQueries.forEach((query) => {\n      if (\n        query.queryType === QueryType.TIME_SERIES_QUERY ||\n        query.queryType === QueryType.TIME_SERIES_LIST ||\n        query.queryType === QueryType.SLO ||\n        query.queryType === QueryType.ANNOTATION ||\n        query.queryType === QueryType.PROMQL\n      ) {\n        stats[query.queryType]++;\n      } else if (query.queryType === 'metrics') {\n        if (query.hasOwnProperty('type') && get(query, 'type') === 'annotationQuery') {\n          stats.annotation++;\n        }\n        if (get(query, 'metricQuery.editorMode') === 'mql') {\n          stats.timeSeriesQuery++;\n        } else {\n          stats.timeSeriesList++;\n        }\n      }\n    });\n\n    if (cloudmonitorQueries && cloudmonitorQueries.length > 0) {\n      trackCloudMonitoringDashboardLoaded({\n        grafana_version: grafanaVersion,\n        dashboard_id: dashboardId,\n        org_id: orgId,\n        mql_queries: stats[QueryType.TIME_SERIES_QUERY],\n        time_series_filter_queries: stats[QueryType.TIME_SERIES_LIST],\n        slo_queries: stats[QueryType.SLO],\n        annotation_queries: stats[QueryType.ANNOTATION],\n        promQL_queries: stats[QueryType.PROMQL],\n      });\n    }\n  }\n);\n"],"names":["e","t","a","n","l","o","i","r","s","c","u","d","p","f","m","g","h","y","E","v","T","b","j","k","J","C","O","P","exports","module","CloudMonitoringCheatSheet","ConfigEditor","options","onOptionsChange","DataSourceDescription","Divider","config","ConfigSection","SecureSocksProxySettings","CloudMonitoringVariableQueryEditor","props","metricDescriptors","labels","metricTypes","services","queryModel","projectName","projects","selectedService","selectedMetricType","sloServices","state","queryType","service","metricType","labelKey","prevProps","prevState","selecQueryTypeChanged","selectSLOServiceChanged","selectedQueryType","result","variableOptionGroup","value","name","defaultQuery","datasource","AnnotationQueryEditor","query","onRunQuery","data","onChange","customMetaData","timeSeriesList","title","setTitle","text","setText","handleTitleChange","handleTextChange","useDebounce","EditorRows","MetricQueryEditor","EditorField","Input","isLegacyCloudMonitoringAnnotation","CloudMonitoringAnnotationSupport","ds","enable","iconColor","target","anno","CloudMonitoringMetricFindQuery","error","refId","interpolatedKey","descriptor","selectedSLOService","x","CloudMonitoringVariableSupport","request","executeObservable","from","mergeMap","map","CloudMonitoringDatasource","DataSourceWithBackend","instanceSettings","templateSrv","timeSrv","scopedVars","timeSeriesQuery","sloQuery","promQLQuery","aggregation","timeRange","queries","lastValueFrom","acc","key","of","defaultProject","authenticationType","gceDefaultProject","filter","serviceId","filters","metricTypeFilterArray","hide","maxLines","metric","intervalMs","type","rest","metricQuery","object","selectorName","sloId","lookbackPeriod","completeFilter","operator","condition","item","groupBys","interpolatedGroupBys","gb","interpolated","trackCloudMonitoringDashboardLoaded","QueryEditor","dashboardId","orgId","grafanaVersion","cloudmonitorQueries","stats"],"sourceRoot":""}