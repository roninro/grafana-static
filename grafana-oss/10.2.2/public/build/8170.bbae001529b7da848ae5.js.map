{"version":3,"file":"8170.bbae001529b7da848ae5.js","mappings":"0LAoCA,QAzB2B,CAAC,CAAE,MAAAA,CAAM,IAAa,CAC/C,KAAM,CAAE,qBAAAC,CAAqB,KAAI,MAAgB,EAC3C,CAAE,KAAAC,EAAM,UAAAC,EAAW,MAAAC,CAAM,KAAI,KAAsBH,CAAoB,EAEvEI,EAAOL,GAAO,OAAO,KAC3B,OAAKK,EAIDF,GAAa,CAACD,EACT,aAILE,EACK,OAAOA,CAAK,EAGhBF,EAIE,gBAAC,IAAqB,CAAC,uBAAwBD,EAAuB,OAAQC,EAAM,aAAcG,CAAA,CAAM,EAHtG,KAbA,gBAAC,IAAc,CAAC,OAAO,kBAAmB,EAiBrD,C,4FClBO,MAAMC,EAAwB,CAAC,CAAE,OAAAC,EAAQ,aAAAC,EAAc,uBAAAC,CAAuB,IAAa,CAChG,MAAMC,EAAWH,EAAO,iBAAiBC,CAAY,EAErD,GAAI,CAACE,EACH,OACE,gBAAC,IAAK,CAAC,SAAS,QAAQ,MAAM,sBAAqB,+CAEnD,EAIJ,MAAMC,KAAiB,KAAmBH,EAAc,OAAO,KAAKD,EAAO,cAAc,CAAC,EAE1F,OACE,gBAAC,MACC,uBAAAE,EACA,OAAAF,EACA,SAAU,CAAE,KAAMI,EAAgB,WAAS,KAA6BD,CAAQ,CAAE,EACpF,CAEJ,C,mCCpCO,SAASE,EAAmBC,EAAsBC,EAA0B,CACjF,MAAMC,EAAmBF,EAAa,QAAQ,sBAAuB,EAAE,EAAE,KAAK,EAE9E,IAAIG,EAAU,GAAGD,WAEjB,QAASE,EAAI,EAAGH,EAAe,SAASE,CAAO,EAAGC,IAChDD,EAAU,GAAGD,WAA0BE,KAGzC,OAAOD,CACT,C","sources":["webpack://grafana/./public/app/features/alerting/unified/components/contact-points/DuplicateMessageTemplate.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/DuplicateTemplateView.tsx","webpack://grafana/./public/app/features/alerting/unified/utils/duplicate.ts"],"sourcesContent":["import React from 'react';\nimport { RouteChildrenProps } from 'react-router-dom';\n\nimport { EntityNotFound } from 'app/core/components/PageNotFound/EntityNotFound';\n\nimport { useAlertmanagerConfig } from '../../hooks/useAlertmanagerConfig';\nimport { useAlertmanager } from '../../state/AlertmanagerContext';\nimport { DuplicateTemplateView } from '../receivers/DuplicateTemplateView';\n\ntype Props = RouteChildrenProps<{ name: string }>;\n\nconst NewMessageTemplate = ({ match }: Props) => {\n  const { selectedAlertmanager } = useAlertmanager();\n  const { data, isLoading, error } = useAlertmanagerConfig(selectedAlertmanager);\n\n  const name = match?.params.name;\n  if (!name) {\n    return <EntityNotFound entity=\"Message template\" />;\n  }\n\n  if (isLoading && !data) {\n    return 'loading...';\n  }\n\n  // TODO decent error handling\n  if (error) {\n    return String(error);\n  }\n\n  if (!data) {\n    return null;\n  }\n\n  return <DuplicateTemplateView alertManagerSourceName={selectedAlertmanager!} config={data} templateName={name} />;\n};\n\nexport default NewMessageTemplate;\n","import React from 'react';\n\nimport { Alert } from '@grafana/ui';\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\n\nimport { generateCopiedName } from '../../utils/duplicate';\nimport { updateDefinesWithUniqueValue } from '../../utils/templates';\n\nimport { TemplateForm } from './TemplateForm';\n\ninterface Props {\n  templateName: string;\n  config: AlertManagerCortexConfig;\n  alertManagerSourceName: string;\n}\n\nexport const DuplicateTemplateView = ({ config, templateName, alertManagerSourceName }: Props) => {\n  const template = config.template_files?.[templateName];\n\n  if (!template) {\n    return (\n      <Alert severity=\"error\" title=\"Template not found\">\n        Sorry, this template does not seem to exists.\n      </Alert>\n    );\n  }\n\n  const duplicatedName = generateCopiedName(templateName, Object.keys(config.template_files));\n\n  return (\n    <TemplateForm\n      alertManagerSourceName={alertManagerSourceName}\n      config={config}\n      existing={{ name: duplicatedName, content: updateDefinesWithUniqueValue(template) }}\n    />\n  );\n};\n","export function generateCopiedName(originalName: string, exisitingNames: string[]) {\n  const nonDuplicateName = originalName.replace(/\\(copy( [0-9]+)?\\)$/, '').trim();\n\n  let newName = `${nonDuplicateName} (copy)`;\n\n  for (let i = 2; exisitingNames.includes(newName); i++) {\n    newName = `${nonDuplicateName} (copy ${i})`;\n  }\n\n  return newName;\n}\n"],"names":["match","selectedAlertmanager","data","isLoading","error","name","DuplicateTemplateView","config","templateName","alertManagerSourceName","template","duplicatedName","generateCopiedName","originalName","exisitingNames","nonDuplicateName","newName","i"],"sourceRoot":""}