{"version":3,"file":"5580.9ac8d33527534a504237.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/receivers/editor/alertManagerSuggestions.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/editor/autocomplete.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/editor/definition.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/editor/register.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/TemplateEditor.tsx","webpack://grafana/./.yarn/cache/date-fns-npm-2.30.0-895c790e0f-f7be015232.zip/node_modules/date-fns/esm/subDays/index.js","webpack://grafana/./public/app/features/alerting/unified/api/templateApi.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/AlertInstanceModalSelector.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/TemplateData.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/TemplateDataDocs.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/GenerateAlertDataModal.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/PayloadEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/TemplateForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/editor/snippets.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/editor/templateDataSuggestions.ts","webpack://grafana/./public/app/features/alerting/unified/components/rules/state-history/common.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertmanagerConfig.ts","webpack://grafana/./public/app/features/alerting/unified/utils/templates.ts"],"sourcesContent":["import type { Monaco } from '@grafana/ui';\n\nimport { AlertmanagerTemplateFunction } from './language';\nimport { SuggestionDefinition } from './suggestionDefinition';\n\nexport function getAlertManagerSuggestions(monaco: Monaco): SuggestionDefinition[] {\n  const kind = monaco.languages.CompletionItemKind.Function;\n  return [\n    {\n      label: AlertmanagerTemplateFunction.toUpper,\n      detail: 'function(s string)',\n      kind,\n    },\n    {\n      label: AlertmanagerTemplateFunction.toLower,\n      detail: 'function(s string)',\n      kind,\n    },\n    {\n      label: AlertmanagerTemplateFunction.title,\n      documentation: 'Capitalizes the first letter of each word',\n      detail: 'function(s string)',\n      kind,\n    },\n    {\n      label: AlertmanagerTemplateFunction.join,\n      documentation: { value: 'Joins an array of strings using the separator provided.' },\n      detail: 'function(separator string, s []string)',\n      kind,\n    },\n    {\n      label: AlertmanagerTemplateFunction.match,\n      detail: 'function',\n      kind,\n    },\n    {\n      label: AlertmanagerTemplateFunction.safeHtml,\n      detail: 'function(pattern, repl, text)',\n      kind,\n    },\n    {\n      label: AlertmanagerTemplateFunction.reReplaceAll,\n      detail: 'function(pattern, repl, text)',\n      kind,\n    },\n    {\n      label: AlertmanagerTemplateFunction.stringSlice,\n      detail: 'function(s ...string)',\n      kind,\n    },\n  ];\n}\n","import { concat } from 'lodash';\nimport type { languages, editor, Position, IRange, IDisposable } from 'monaco-editor/esm/vs/editor/editor.api';\n\nimport type { Monaco } from '@grafana/ui';\n\nimport { getAlertManagerSuggestions } from './alertManagerSuggestions';\nimport { SuggestionDefinition } from './suggestionDefinition';\nimport {\n  getAlertsSuggestions,\n  getAlertSuggestions,\n  getGlobalSuggestions,\n  getKeyValueSuggestions,\n  getSnippetsSuggestions,\n} from './templateDataSuggestions';\n\nexport function registerGoTemplateAutocomplete(monaco: Monaco): IDisposable {\n  const goTemplateAutocompleteProvider: languages.CompletionItemProvider = {\n    triggerCharacters: ['.'],\n    provideCompletionItems(model, position, context): languages.ProviderResult<languages.CompletionList> {\n      const word = model.getWordUntilPosition(position);\n      const range = {\n        startLineNumber: position.lineNumber,\n        endLineNumber: position.lineNumber,\n        startColumn: word.startColumn,\n        endColumn: word.endColumn,\n      };\n\n      const completionProvider = new CompletionProvider(monaco, range);\n\n      const insideExpression = isInsideGoExpression(model, position);\n      if (!insideExpression) {\n        return completionProvider.getSnippetsSuggestions();\n      }\n\n      if (context.triggerKind === monaco.languages.CompletionTriggerKind.Invoke && !context.triggerCharacter) {\n        return completionProvider.getFunctionsSuggestions();\n      }\n\n      const wordBeforeDot = model.getWordUntilPosition({\n        lineNumber: position.lineNumber,\n        column: position.column - 1,\n      });\n\n      return completionProvider.getTemplateDataSuggestions(wordBeforeDot.word);\n    },\n  };\n\n  return monaco.languages.registerCompletionItemProvider('go-template', goTemplateAutocompleteProvider);\n}\n\nfunction isInsideGoExpression(model: editor.ITextModel, position: Position) {\n  const searchRange = {\n    startLineNumber: position.lineNumber,\n    endLineNumber: position.lineNumber,\n    startColumn: model.getLineMinColumn(position.lineNumber),\n    endColumn: model.getLineMaxColumn(position.lineNumber),\n  };\n\n  const goSyntaxRegex = '\\\\{\\\\{[a-zA-Z0-9._() \"]+\\\\}\\\\}';\n  const matches = model.findMatches(goSyntaxRegex, searchRange, true, false, null, true);\n\n  return matches.some((match) => match.range.containsPosition(position));\n}\n\nexport class CompletionProvider {\n  constructor(\n    private readonly monaco: Monaco,\n    private readonly range: IRange\n  ) {}\n\n  getSnippetsSuggestions = (): languages.ProviderResult<languages.CompletionList> => {\n    return this.getCompletionsFromDefinitions(getSnippetsSuggestions(this.monaco));\n  };\n\n  getFunctionsSuggestions = (): languages.ProviderResult<languages.CompletionList> => {\n    return this.getCompletionsFromDefinitions(getAlertManagerSuggestions(this.monaco));\n  };\n\n  getTemplateDataSuggestions = (wordContext: string): languages.ProviderResult<languages.CompletionList> => {\n    switch (wordContext) {\n      case '':\n        return this.getCompletionsFromDefinitions(getGlobalSuggestions(this.monaco), getAlertSuggestions(this.monaco));\n      case 'Alerts':\n        return this.getCompletionsFromDefinitions(getAlertsSuggestions(this.monaco));\n      case 'GroupLabels':\n      case 'CommonLabels':\n      case 'CommonAnnotations':\n      case 'Labels':\n      case 'Annotations':\n        return this.getCompletionsFromDefinitions(getKeyValueSuggestions(this.monaco));\n      default:\n        return { suggestions: [] };\n    }\n  };\n\n  private getCompletionsFromDefinitions = (...args: SuggestionDefinition[][]): languages.CompletionList => {\n    const allDefinitions = concat(...args);\n\n    return {\n      suggestions: allDefinitions.map((definition) => buildAutocompleteSuggestion(definition, this.range)),\n    };\n  };\n}\n\nfunction buildAutocompleteSuggestion(\n  { label, detail, documentation, kind, insertText }: SuggestionDefinition,\n  range: IRange\n): languages.CompletionItem {\n  const insertFallback = typeof label === 'string' ? label : label.label;\n  const labelObject = typeof label === 'string' ? { label: label, description: detail } : { ...label };\n\n  labelObject.description ??= detail;\n\n  return {\n    label: labelObject,\n    kind: kind,\n    insertText: insertText ?? insertFallback,\n    range,\n    documentation: documentation,\n    detail: detail,\n  };\n}\n","import { LanguageDefinition } from './register';\n\nexport const GO_TEMPLATE_LANGUAGE_ID = 'go-template';\n\nconst goTemplateLanguageDefinition: LanguageDefinition = {\n  id: GO_TEMPLATE_LANGUAGE_ID,\n  extensions: [],\n  aliases: [],\n  mimetypes: [],\n  loader: () => import('./language'),\n};\nexport default goTemplateLanguageDefinition;\n","import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\n\nimport { Monaco } from '@grafana/ui';\n\nexport type LanguageDefinition = {\n  id: string;\n  extensions: string[];\n  aliases: string[];\n  mimetypes: string[];\n  loader: () => Promise<{\n    language: monacoType.languages.IMonarchLanguage;\n    conf: monacoType.languages.LanguageConfiguration;\n  }>;\n};\n\nexport const registerLanguage = (\n  monaco: Monaco,\n  language: LanguageDefinition\n  // completionItemProvider: Completeable\n) => {\n  const { id, loader } = language;\n\n  const languages = monaco.languages.getLanguages();\n  if (languages.find((l) => l.id === id)) {\n    return;\n  }\n\n  monaco.languages.register({ id });\n  loader().then((monarch) => {\n    monaco.languages.setMonarchTokensProvider(id, monarch.language);\n    monaco.languages.setLanguageConfiguration(id, monarch.conf);\n    // monaco.languages.registerCompletionItemProvider(id, completionItemProvider.getCompletionProvider(monaco, language));\n  });\n};\n","/**\n * This file contains the template editor we'll be using for alertmanager templates.\n *\n * It includes auto-complete for template data and syntax highlighting\n */\nimport { editor, IDisposable } from 'monaco-editor';\nimport React, { useEffect, useRef } from 'react';\n\nimport { CodeEditor } from '@grafana/ui';\nimport { CodeEditorProps } from '@grafana/ui/src/components/Monaco/types';\n\nimport { registerGoTemplateAutocomplete } from './editor/autocomplete';\nimport goTemplateLanguageDefinition, { GO_TEMPLATE_LANGUAGE_ID } from './editor/definition';\nimport { registerLanguage } from './editor/register';\n\ntype TemplateEditorProps = Omit<CodeEditorProps, 'language' | 'theme'> & {\n  autoHeight?: boolean;\n};\n\nconst TemplateEditor = (props: TemplateEditorProps) => {\n  const shouldAutoHeight = Boolean(props.autoHeight);\n  const disposeSuggestions = useRef<IDisposable | null>(null);\n\n  const onEditorDidMount = (editor: editor.IStandaloneCodeEditor) => {\n    if (shouldAutoHeight) {\n      const contentHeight = editor.getContentHeight();\n\n      try {\n        // we're passing NaN in to the width because the type definition wants a number (NaN is a number, go figure)\n        // but the width could be defined as a string \"auto\", passing NaN seems to just ignore our width update here\n        editor.layout({ height: contentHeight, width: NaN });\n      } catch (err) {}\n    }\n  };\n\n  useEffect(() => {\n    return () => {\n      disposeSuggestions.current?.dispose();\n    };\n  }, []);\n\n  return (\n    <CodeEditor\n      showLineNumbers={true}\n      showMiniMap={false}\n      {...props}\n      onEditorDidMount={onEditorDidMount}\n      onBeforeEditorMount={(monaco) => {\n        registerLanguage(monaco, goTemplateLanguageDefinition);\n        disposeSuggestions.current = registerGoTemplateAutocomplete(monaco);\n      }}\n      language={GO_TEMPLATE_LANGUAGE_ID}\n    />\n  );\n};\n\nexport { TemplateEditor };\n","import addDays from \"../addDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name subDays\n * @category Day Helpers\n * @summary Subtract the specified number of days from the given date.\n *\n * @description\n * Subtract the specified number of days from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the days subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 10 days from 1 September 2014:\n * const result = subDays(new Date(2014, 8, 1), 10)\n * //=> Fri Aug 22 2014 00:00:00\n */\nexport default function subDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addDays(dirtyDate, -amount);\n}","import { alertingApi } from './alertingApi';\n\nexport const previewTemplateUrl = `/api/alertmanager/grafana/config/api/v1/templates/test`;\n\nexport interface TemplatePreviewResult {\n  name: string;\n  text: string;\n}\nexport interface TemplatePreviewErrors {\n  name?: string;\n  message: string;\n  kind: string;\n}\nexport interface TemplatePreviewResponse {\n  results?: TemplatePreviewResult[];\n  errors?: TemplatePreviewErrors[];\n}\n\nexport interface KeyValueField {\n  key: string;\n  value: string;\n}\nexport interface AlertField {\n  annotations: KeyValueField[];\n  labels: KeyValueField[];\n}\n\nexport const templatesApi = alertingApi.injectEndpoints({\n  endpoints: (build) => ({\n    previewTemplate: build.mutation<TemplatePreviewResponse, { template: string; alerts: AlertField[]; name: string }>({\n      query: ({ template, alerts, name }) => ({\n        url: previewTemplateUrl,\n        data: { template: template, alerts: alerts, name: name },\n        method: 'POST',\n      }),\n    }),\n  }),\n});\n\nexport const { usePreviewTemplateMutation } = templatesApi;\n","import { css, cx } from '@emotion/css';\nimport React, { CSSProperties, useCallback, useMemo, useState } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { FixedSizeList } from 'react-window';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport {\n  Button,\n  clearButtonStyles,\n  FilterInput,\n  LoadingPlaceholder,\n  Modal,\n  Tooltip,\n  useStyles2,\n  Icon,\n  Tag,\n} from '@grafana/ui';\nimport { AlertmanagerAlert, TestTemplateAlert } from 'app/plugins/datasource/alertmanager/types';\n\nimport { alertmanagerApi } from '../../api/alertmanagerApi';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { arrayLabelsToObject, labelsToTags, objectLabelsToArray } from '../../utils/labels';\nimport { extractCommonLabels, omitLabels } from '../rules/state-history/common';\n\nexport function AlertInstanceModalSelector({\n  onSelect,\n  isOpen,\n  onClose,\n}: {\n  onSelect: (alerts: TestTemplateAlert[]) => void;\n  isOpen: boolean;\n  onClose: () => void;\n}) {\n  const styles = useStyles2(getStyles);\n\n  const [selectedRule, setSelectedRule] = useState<string>();\n  const [selectedInstances, setSelectedInstances] = useState<AlertmanagerAlert[] | null>(null);\n  const { useGetAlertmanagerAlertsQuery } = alertmanagerApi;\n\n  const {\n    currentData: result = [],\n    isFetching: loading,\n    isError: error,\n  } = useGetAlertmanagerAlertsQuery({\n    amSourceName: GRAFANA_RULES_SOURCE_NAME,\n    filter: {\n      inhibited: true,\n      silenced: true,\n      active: true,\n    },\n  });\n\n  const [ruleFilter, setRuleFilter] = useState('');\n\n  const rulesWithInstances: Record<string, AlertmanagerAlert[]> = useMemo(() => {\n    const rules: Record<string, AlertmanagerAlert[]> = {};\n    if (!loading && result) {\n      result.forEach((instance) => {\n        if (!rules[instance.labels['alertname']]) {\n          rules[instance.labels['alertname']] = [];\n        }\n        rules[instance.labels['alertname']].push(instance);\n      });\n    }\n    return rules;\n  }, [loading, result]);\n\n  const handleRuleChange = useCallback((rule: string) => {\n    setSelectedRule(rule);\n    setSelectedInstances(null);\n  }, []);\n\n  const filteredRules: Record<string, AlertmanagerAlert[]> = useMemo(() => {\n    const filteredRules = Object.keys(rulesWithInstances).filter((rule) =>\n      rule.toLowerCase().includes(ruleFilter.toLowerCase())\n    );\n    const filteredRulesObject: Record<string, AlertmanagerAlert[]> = {};\n    filteredRules.forEach((rule) => {\n      filteredRulesObject[rule] = rulesWithInstances[rule];\n    });\n    return filteredRulesObject;\n  }, [rulesWithInstances, ruleFilter]);\n\n  if (error) {\n    return null;\n  }\n\n  const filteredRulesKeys = Object.keys(filteredRules || []);\n\n  const RuleRow = ({ index, style }: { index: number; style?: CSSProperties }) => {\n    if (!filteredRules) {\n      return null;\n    }\n    const ruleName = filteredRulesKeys[index];\n\n    const isSelected = ruleName === selectedRule;\n\n    return (\n      <button\n        type=\"button\"\n        title={ruleName}\n        style={style}\n        className={cx(styles.rowButton, { [styles.rowOdd]: index % 2 === 1, [styles.rowSelected]: isSelected })}\n        onClick={() => handleRuleChange(ruleName)}\n      >\n        <div className={cx(styles.ruleTitle, styles.rowButtonTitle)}>{ruleName}</div>\n        <div className={styles.alertFolder}>\n          <>\n            <Icon name=\"folder\" /> {filteredRules[ruleName][0].labels['grafana_folder'] ?? ''}\n          </>\n        </div>\n      </button>\n    );\n  };\n\n  const getAlertUniqueLabels = (allAlerts: AlertmanagerAlert[], currentAlert: AlertmanagerAlert) => {\n    const allLabels = allAlerts.map((alert) => alert.labels);\n    const labelsAsArray = allLabels.map(objectLabelsToArray);\n\n    const ruleCommonLabels = extractCommonLabels(labelsAsArray);\n    const alertUniqueLabels = omitLabels(objectLabelsToArray(currentAlert.labels), ruleCommonLabels);\n\n    const tags = alertUniqueLabels.length\n      ? labelsToTags(arrayLabelsToObject(alertUniqueLabels))\n      : labelsToTags(currentAlert.labels);\n\n    return tags;\n  };\n\n  const InstanceRow = ({ index, style }: { index: number; style: CSSProperties }) => {\n    const alerts = useMemo(() => (selectedRule ? rulesWithInstances[selectedRule] : []), []);\n    const alert = alerts[index];\n    const isSelected = selectedInstances?.includes(alert);\n    const tags = useMemo(() => getAlertUniqueLabels(alerts, alert), [alerts, alert]);\n\n    const handleSelectInstances = () => {\n      if (isSelected && selectedInstances) {\n        setSelectedInstances(selectedInstances.filter((instance) => instance !== alert));\n        return;\n      }\n      setSelectedInstances([...(selectedInstances || []), alert]);\n    };\n\n    return (\n      <button\n        type=\"button\"\n        style={style}\n        className={cx(styles.rowButton, styles.instanceButton, {\n          [styles.rowOdd]: index % 2 === 1,\n          [styles.rowSelected]: isSelected,\n        })}\n        onClick={handleSelectInstances}\n      >\n        <div className={styles.rowButtonTitle} title={alert.labels['alertname']}>\n          <Tooltip placement=\"bottom\" content={<pre>{JSON.stringify(alert, null, 2)}</pre>} theme={'info'}>\n            <div>\n              {tags.map((tag, index) => (\n                <Tag key={index} name={tag} className={styles.tag} />\n              ))}\n            </div>\n          </Tooltip>\n        </div>\n      </button>\n    );\n  };\n\n  const handleConfirm = () => {\n    const instances: TestTemplateAlert[] =\n      selectedInstances?.map((instance: AlertmanagerAlert) => {\n        const alert: TestTemplateAlert = {\n          annotations: instance.annotations,\n          labels: instance.labels,\n          startsAt: instance.startsAt,\n          endsAt: instance.endsAt,\n        };\n        return alert;\n      }) || [];\n\n    onSelect(instances);\n    resetState();\n  };\n\n  const resetState = () => {\n    setSelectedRule(undefined);\n    setSelectedInstances(null);\n    setRuleFilter('');\n    handleSearchRules('');\n  };\n\n  const onDismiss = () => {\n    resetState();\n    onClose();\n  };\n\n  const handleSearchRules = (filter: string) => {\n    setRuleFilter(filter);\n  };\n\n  return (\n    <div>\n      <Modal\n        title=\"Select alert instances\"\n        className={styles.modal}\n        closeOnEscape\n        isOpen={isOpen}\n        onDismiss={onDismiss}\n        contentClassName={styles.modalContent}\n      >\n        <div className={styles.container}>\n          <FilterInput\n            value={ruleFilter}\n            onChange={handleSearchRules}\n            title=\"Search alert rule\"\n            placeholder=\"Search alert rule\"\n            autoFocus\n          />\n          <div>{(selectedRule && 'Select one or more instances from the list below') || ''}</div>\n\n          <div className={styles.column}>\n            {loading && <LoadingPlaceholder text=\"Loading rules...\" className={styles.loadingPlaceholder} />}\n\n            {!loading && (\n              <AutoSizer>\n                {({ height, width }) => (\n                  <FixedSizeList itemSize={50} height={height} width={width} itemCount={filteredRulesKeys.length}>\n                    {RuleRow}\n                  </FixedSizeList>\n                )}\n              </AutoSizer>\n            )}\n          </div>\n\n          <div className={styles.column}>\n            {!selectedRule && !loading && (\n              <div className={styles.selectedRulePlaceholder}>\n                <div>Select an alert rule to get a list of available firing instances</div>\n              </div>\n            )}\n            {loading && <LoadingPlaceholder text=\"Loading rule...\" className={styles.loadingPlaceholder} />}\n\n            {selectedRule && rulesWithInstances[selectedRule].length && !loading && (\n              <AutoSizer>\n                {({ width, height }) => (\n                  <FixedSizeList\n                    itemSize={32}\n                    height={height}\n                    width={width}\n                    itemCount={rulesWithInstances[selectedRule].length || 0}\n                  >\n                    {InstanceRow}\n                  </FixedSizeList>\n                )}\n              </AutoSizer>\n            )}\n          </div>\n        </div>\n        <Modal.ButtonRow>\n          <Button type=\"button\" variant=\"secondary\" onClick={onDismiss}>\n            Cancel\n          </Button>\n          <Button\n            type=\"button\"\n            variant=\"primary\"\n            disabled={!(selectedRule && selectedInstances)}\n            onClick={() => {\n              if (selectedRule && selectedInstances) {\n                handleConfirm();\n              }\n            }}\n          >\n            Add alert data to payload\n          </Button>\n        </Modal.ButtonRow>\n      </Modal>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const clearButton = clearButtonStyles(theme);\n\n  return {\n    container: css`\n      display: grid;\n      grid-template-columns: 1fr 1.5fr;\n      grid-template-rows: min-content auto;\n      gap: ${theme.spacing(2)};\n      flex: 1;\n    `,\n\n    tag: css`\n      margin: 5px;\n    `,\n\n    column: css`\n      flex: 1 1 auto;\n    `,\n\n    alertLabels: css`\n      overflow-x: auto;\n      height: 32px;\n    `,\n    ruleTitle: css`\n      height: 22px;\n      font-weight: ${theme.typography.fontWeightBold};\n    `,\n    rowButton: css`\n      ${clearButton};\n      padding: ${theme.spacing(0.5)};\n      overflow: hidden;\n      text-overflow: ellipsis;\n      text-align: left;\n      white-space: nowrap;\n      cursor: pointer;\n      border: 2px solid transparent;\n\n      &:disabled {\n        cursor: not-allowed;\n        color: ${theme.colors.text.disabled};\n      }\n    `,\n    rowButtonTitle: css`\n      overflow-x: auto;\n    `,\n    rowSelected: css`\n      border-color: ${theme.colors.primary.border};\n    `,\n    rowOdd: css`\n      background-color: ${theme.colors.background.secondary};\n    `,\n    instanceButton: css`\n      display: flex;\n      gap: ${theme.spacing(1)};\n      justify-content: space-between;\n      align-items: center;\n    `,\n    loadingPlaceholder: css`\n      height: 100%;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n    `,\n    selectedRulePlaceholder: css`\n      width: 100%;\n      height: 100%;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      text-align: center;\n      font-weight: ${theme.typography.fontWeightBold};\n    `,\n    modal: css`\n      height: 100%;\n    `,\n    modalContent: css`\n      flex: 1;\n      display: flex;\n      flex-direction: column;\n    `,\n    modalAlert: css`\n      flex-grow: 0;\n    `,\n    warnIcon: css`\n      fill: ${theme.colors.warning.main};\n    `,\n    labels: css`\n      justify-content: flex-start;\n    `,\n    alertFolder: css`\n      height: 20px;\n      font-size: ${theme.typography.bodySmall.fontSize};\n      color: ${theme.colors.text.secondary};\n      display: flex;\n      flex-direction: row;\n      justify-content: flex-start;\n      column-gap: ${theme.spacing(1)};\n      align-items: center;\n    `,\n  };\n};\n","export interface TemplateDataItem {\n  name: string;\n  type: 'string' | '[]Alert' | 'KeyValue' | 'time.Time';\n  notes: string;\n}\n\ninterface TemplateFunctionItem {\n  name: string;\n  args?: '[]string';\n  returns: 'KeyValue' | '[]string';\n  notes?: string;\n}\n\nexport const GlobalTemplateData: TemplateDataItem[] = [\n  {\n    name: 'Receiver',\n    type: 'string',\n    notes: 'Name of the contact point that the notification is being sent to.',\n  },\n  {\n    name: 'Status',\n    type: 'string',\n    notes: 'firing if at least one alert is firing, otherwise resolved',\n  },\n  {\n    name: 'Alerts',\n    type: '[]Alert',\n    notes: 'List of alert objects that are included in this notification.',\n  },\n  {\n    name: 'Alerts.Firing',\n    type: '[]Alert',\n    notes: 'List of firing alerts',\n  },\n  {\n    name: 'Alerts.Resolved',\n    type: '[]Alert',\n    notes: 'List of resolved alerts',\n  },\n  {\n    name: 'GroupLabels',\n    type: 'KeyValue',\n    notes: 'Labels these alerts were grouped by.',\n  },\n  {\n    name: 'CommonLabels',\n    type: 'KeyValue',\n    notes: 'Labels common to all the alerts included in this notification.',\n  },\n  {\n    name: 'CommonAnnotations',\n    type: 'KeyValue',\n    notes: 'Annotations common to all the alerts included in this notification.',\n  },\n  {\n    name: 'ExternalURL',\n    type: 'string',\n    notes: 'Back link to the Grafana that sent the notification.',\n  },\n];\n\nexport const AlertTemplatePreviewData: TemplateDataItem[] = [\n  {\n    name: 'Labels',\n    type: 'KeyValue',\n    notes: 'Set of labels attached to the alert.',\n  },\n  {\n    name: 'Annotations',\n    type: 'KeyValue',\n    notes: 'Set of annotations attached to the alert.',\n  },\n  {\n    name: 'StartsAt',\n    type: 'time.Time',\n    notes: 'Time the alert started firing.',\n  },\n  {\n    name: 'EndsAt',\n    type: 'time.Time',\n    notes: 'Time the alert ends firing.',\n  },\n];\n\nexport const AlertTemplateData: TemplateDataItem[] = [\n  {\n    name: 'Status',\n    type: 'string',\n    notes: 'firing or resolved.',\n  },\n  {\n    name: 'Labels',\n    type: 'KeyValue',\n    notes: 'Set of labels attached to the alert.',\n  },\n  {\n    name: 'Annotations',\n    type: 'KeyValue',\n    notes: 'Set of annotations attached to the alert.',\n  },\n  {\n    name: 'Values',\n    type: 'KeyValue',\n    notes:\n      'The values of all instant queries, reduce and math expressions, and classic conditions for the alert. It does not contain time series data.',\n  },\n  {\n    name: 'StartsAt',\n    type: 'time.Time',\n    notes: 'Time the alert started firing.',\n  },\n  {\n    name: 'EndsAt',\n    type: 'time.Time',\n    notes:\n      'Only set if the end time of an alert is known. Otherwise set to a configurable timeout period from the time since the last alert was received.',\n  },\n  {\n    name: 'GeneratorURL',\n    type: 'string',\n    notes: 'A back link to Grafana or external Alertmanager.',\n  },\n  {\n    name: 'SilenceURL',\n    type: 'string',\n    notes: 'Link to Grafana silence for with labels for this alert pre-filled. Only for Grafana managed alerts.',\n  },\n  {\n    name: 'DashboardURL',\n    type: 'string',\n    notes: 'Link to Grafana dashboard, if alert rule belongs to one. Only for Grafana managed alerts.',\n  },\n  {\n    name: 'PanelURL',\n    type: 'string',\n    notes: 'Link to Grafana dashboard panel, if alert rule belongs to one. Only for Grafana managed alerts.',\n  },\n  {\n    name: 'Fingerprint',\n    type: 'string',\n    notes: 'Fingerprint that can be used to identify the alert.',\n  },\n  {\n    name: 'ValueString',\n    type: 'string',\n    notes: 'String that contains the labels and value of each reduced expression in the alert.',\n  },\n];\n\nexport const KeyValueTemplateFunctions: TemplateFunctionItem[] = [\n  {\n    name: 'SortedPairs',\n    returns: 'KeyValue',\n    notes: 'Returns sorted list of key & value string pairs',\n  },\n  {\n    name: 'Remove',\n    args: '[]string',\n    returns: 'KeyValue',\n    notes: 'Returns a copy of the Key/Value map without the given keys.',\n  },\n  {\n    name: 'Names',\n    returns: '[]string',\n    notes: 'List of label names',\n  },\n  {\n    name: 'Values',\n    returns: '[]string',\n    notes: 'List of label values',\n  },\n];\n\nexport const KeyValueCodeSnippet = `{\n  \"summary\": \"alert summary\",\n  \"description\": \"alert description\"\n}\n`;\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { HoverCard } from '../HoverCard';\n\nimport {\n  AlertTemplateData,\n  GlobalTemplateData,\n  KeyValueCodeSnippet,\n  KeyValueTemplateFunctions,\n  TemplateDataItem,\n} from './TemplateData';\n\nexport function TemplateDataDocs() {\n  const styles = useStyles2(getTemplateDataDocsStyles);\n\n  const AlertTemplateDataTable = (\n    <TemplateDataTable\n      caption={\n        <h4 className={styles.header}>\n          Alert template data <span>Available only when in the context of an Alert (e.g. inside .Alerts loop)</span>\n        </h4>\n      }\n      dataItems={AlertTemplateData}\n    />\n  );\n\n  return (\n    <Stack gap={2} flexGrow={1}>\n      <TemplateDataTable\n        caption={<h4 className={styles.header}>Template Data</h4>}\n        dataItems={GlobalTemplateData}\n        typeRenderer={(type) =>\n          type === '[]Alert' ? (\n            <HoverCard content={AlertTemplateDataTable}>\n              <div className={styles.interactiveType}>{type}</div>\n            </HoverCard>\n          ) : type === 'KeyValue' ? (\n            <HoverCard content={<KeyValueTemplateDataTable />}>\n              <div className={styles.interactiveType}>{type}</div>\n            </HoverCard>\n          ) : (\n            type\n          )\n        }\n      />\n    </Stack>\n  );\n}\n\nconst getTemplateDataDocsStyles = (theme: GrafanaTheme2) => ({\n  header: css`\n    color: ${theme.colors.text.primary};\n\n    span {\n      color: ${theme.colors.text.secondary};\n      font-size: ${theme.typography.bodySmall.fontSize};\n    }\n  `,\n  interactiveType: css`\n    color: ${theme.colors.text.link};\n  `,\n});\n\ninterface TemplateDataTableProps {\n  dataItems: TemplateDataItem[];\n  caption: JSX.Element | string;\n  typeRenderer?: (type: TemplateDataItem['type']) => React.ReactNode;\n}\n\nexport function TemplateDataTable({ dataItems, caption, typeRenderer }: TemplateDataTableProps) {\n  const styles = useStyles2(getTemplateDataTableStyles);\n\n  return (\n    <table className={styles.table}>\n      <caption>{caption}</caption>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Type</th>\n          <th>Notes</th>\n        </tr>\n      </thead>\n      <tbody>\n        {dataItems.map(({ name, type, notes }, index) => (\n          <tr key={index}>\n            <td>{name}</td>\n            <td>{typeRenderer ? typeRenderer(type) : type}</td>\n            <td>{notes}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nfunction KeyValueTemplateDataTable() {\n  const tableStyles = useStyles2(getTemplateDataTableStyles);\n\n  return (\n    <div>\n      KeyValue is a set of key/value string pairs that represent labels and annotations.\n      <pre>\n        <code>{KeyValueCodeSnippet}</code>\n      </pre>\n      <table className={tableStyles.table}>\n        <caption>Key-value methods</caption>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Arguments</th>\n            <th>Returns</th>\n            <th>Notes</th>\n          </tr>\n        </thead>\n        <tbody>\n          {KeyValueTemplateFunctions.map(({ name, args, returns, notes }) => (\n            <tr key={name}>\n              <td>{name}</td>\n              <td>{args}</td>\n              <td>{returns}</td>\n              <td>{notes}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nconst getTemplateDataTableStyles = (theme: GrafanaTheme2) => ({\n  table: css`\n    border-collapse: collapse;\n    width: 100%;\n\n    caption {\n      caption-side: top;\n    }\n\n    td,\n    th {\n      padding: ${theme.spacing(1, 1)};\n    }\n\n    thead {\n      font-weight: ${theme.typography.fontWeightBold};\n    }\n\n    tbody tr:nth-child(2n + 1) {\n      background-color: ${theme.colors.background.secondary};\n    }\n\n    tbody td:nth-child(1) {\n      font-weight: ${theme.typography.fontWeightBold};\n    }\n\n    tbody td:nth-child(2) {\n      font-style: italic;\n    }\n  `,\n});\n","import { css } from '@emotion/css';\nimport { addDays, subDays } from 'date-fns';\nimport React, { useState } from 'react';\nimport { FormProvider, useForm } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Button, Card, Modal, RadioButtonGroup, useStyles2 } from '@grafana/ui';\nimport { TestTemplateAlert } from 'app/plugins/datasource/alertmanager/types';\n\nimport { KeyValueField } from '../../../api/templateApi';\nimport AnnotationsStep from '../../rule-editor/AnnotationsStep';\nimport LabelsField from '../../rule-editor/LabelsField';\n\ninterface Props {\n  isOpen: boolean;\n  onDismiss: () => void;\n  onAccept: (alerts: TestTemplateAlert[]) => void;\n}\n\ninterface FormFields {\n  annotations: KeyValueField[];\n  labels: KeyValueField[];\n  status: 'firing' | 'resolved';\n}\n\nconst defaultValues: FormFields = {\n  annotations: [{ key: '', value: '' }],\n  labels: [{ key: '', value: '' }],\n  status: 'firing',\n};\n\nexport const GenerateAlertDataModal = ({ isOpen, onDismiss, onAccept }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const [alerts, setAlerts] = useState<TestTemplateAlert[]>([]);\n\n  const formMethods = useForm<FormFields>({ defaultValues, mode: 'onBlur' });\n  const annotations = formMethods.watch('annotations');\n  const labels = formMethods.watch('labels');\n  const [status, setStatus] = useState<'firing' | 'resolved'>('firing');\n\n  const onAdd = () => {\n    const alert: TestTemplateAlert = {\n      annotations: annotations\n        .filter(({ key, value }) => !!key && !!value)\n        .reduce((acc, { key, value }) => {\n          return { ...acc, [key]: value };\n        }, {}),\n      labels: labels\n        .filter(({ key, value }) => !!key && !!value)\n        .reduce((acc, { key, value }) => {\n          return { ...acc, [key]: value };\n        }, {}),\n      startsAt: '2023-04-01T00:00:00Z',\n      endsAt: status === 'firing' ? addDays(new Date(), 1).toISOString() : subDays(new Date(), 1).toISOString(),\n    };\n    setAlerts((alerts) => [...alerts, alert]);\n    formMethods.reset();\n  };\n\n  const onSubmit = () => {\n    onAccept(alerts);\n    setAlerts([]);\n    formMethods.reset();\n    setStatus('firing');\n  };\n\n  const labelsOrAnnotationsAdded = () => {\n    const someLabels = labels.some((lb) => lb.key !== '' && lb.value !== '');\n    const someAnnotations = annotations.some((ann) => ann.key !== '' && ann.value !== '');\n    return someLabels || someAnnotations;\n  };\n\n  type AlertOption = {\n    label: string;\n    value: 'firing' | 'resolved';\n  };\n  const alertOptions: AlertOption[] = [\n    {\n      label: 'Firing',\n      value: 'firing',\n    },\n    { label: 'Resolved', value: 'resolved' },\n  ];\n\n  return (\n    <Modal onDismiss={onDismiss} isOpen={isOpen} title={'Add custom alerts'}>\n      <FormProvider {...formMethods}>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            formMethods.reset();\n            setStatus('firing');\n          }}\n        >\n          <>\n            <Card>\n              <Stack direction=\"column\" gap={1}>\n                <div className={styles.section}>\n                  <AnnotationsStep />\n                </div>\n                <div className={styles.section}>\n                  <LabelsField />\n                </div>\n                <div className={styles.flexWrapper}>\n                  <RadioButtonGroup value={status} options={alertOptions} onChange={(value) => setStatus(value)} />\n                  <Button\n                    onClick={onAdd}\n                    className={styles.onAddButton}\n                    icon=\"plus-circle\"\n                    type=\"button\"\n                    variant=\"secondary\"\n                    disabled={!labelsOrAnnotationsAdded()}\n                  >\n                    Add alert data\n                  </Button>\n                </div>\n              </Stack>\n            </Card>\n          </>\n          <div className={styles.onSubmitWrapper}></div>\n          {alerts.length > 0 && (\n            <Stack direction=\"column\" gap={1}>\n              <h5> Review alert data to add to the payload:</h5>\n              <pre className={styles.result} data-testid=\"payloadJSON\">\n                {JSON.stringify(alerts, null, 2)}\n              </pre>\n            </Stack>\n          )}\n          <div className={styles.onSubmitWrapper}>\n            <Modal.ButtonRow>\n              <Button onClick={onSubmit} disabled={alerts.length === 0} className={styles.onSubmitButton}>\n                Add alert data to payload\n              </Button>\n            </Modal.ButtonRow>\n          </div>\n        </form>\n      </FormProvider>\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  section: css`\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  onAddButton: css`\n    flex: none;\n    width: fit-content;\n    padding-right: ${theme.spacing(1)};\n    margin-left: auto;\n  `,\n  flexWrapper: css`\n    display: flex;\n    flex-direction: row,\n    justify-content: space-between;\n  `,\n  onSubmitWrapper: css`\n    display: flex;\n    flex-direction: row;\n    align-items: baseline;\n    justify-content: flex-end;\n  `,\n  onSubmitButton: css`\n    margin-left: ${theme.spacing(2)};\n  `,\n  result: css`\n    width: 570px;\n    height: 363px;\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Badge, Button, CodeEditor, Icon, Tooltip, useStyles2 } from '@grafana/ui';\nimport { TestTemplateAlert } from 'app/plugins/datasource/alertmanager/types';\n\nimport { AlertInstanceModalSelector } from './AlertInstanceModalSelector';\nimport { AlertTemplatePreviewData } from './TemplateData';\nimport { TemplateDataTable } from './TemplateDataDocs';\nimport { GenerateAlertDataModal } from './form/GenerateAlertDataModal';\n\nexport const RESET_TO_DEFAULT = 'Reset to default';\n\nexport function PayloadEditor({\n  payload,\n  setPayload,\n  defaultPayload,\n  setPayloadFormatError,\n  payloadFormatError,\n  onPayloadError,\n}: {\n  payload: string;\n  defaultPayload: string;\n  setPayload: React.Dispatch<React.SetStateAction<string>>;\n  setPayloadFormatError: (value: React.SetStateAction<string | null>) => void;\n  payloadFormatError: string | null;\n  onPayloadError: () => void;\n}) {\n  const styles = useStyles2(getStyles);\n  const onReset = () => {\n    setPayload(defaultPayload);\n  };\n\n  const [isEditingAlertData, setIsEditingAlertData] = useState(false);\n\n  const onCloseEditAlertModal = () => {\n    setIsEditingAlertData(false);\n  };\n\n  const errorInPayloadJson = payloadFormatError !== null;\n\n  const validatePayload = () => {\n    try {\n      const payloadObj = JSON.parse(payload);\n      JSON.stringify([...payloadObj]); // check if it's iterable, in order to be able to add more data\n      setPayloadFormatError(null);\n    } catch (e) {\n      setPayloadFormatError(e instanceof Error ? e.message : 'Invalid JSON.');\n      onPayloadError();\n      throw e;\n    }\n  };\n\n  const onOpenEditAlertModal = () => {\n    try {\n      validatePayload();\n      setIsEditingAlertData(true);\n    } catch (e) {}\n  };\n\n  const onOpenAlertSelectorModal = () => {\n    try {\n      validatePayload();\n      setIsAlertSelectorOpen(true);\n    } catch (e) {}\n  };\n\n  const onAddAlertList = (alerts: TestTemplateAlert[]) => {\n    onCloseEditAlertModal();\n    setIsAlertSelectorOpen(false);\n    setPayload((payload) => {\n      const payloadObj = JSON.parse(payload);\n      return JSON.stringify([...payloadObj, ...alerts], undefined, 2);\n    });\n  };\n\n  const [isAlertSelectorOpen, setIsAlertSelectorOpen] = useState(false);\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.editor}>\n        <div className={styles.title}>\n          Payload data\n          <Tooltip placement=\"top\" content={<AlertTemplateDataTable />} theme=\"info\">\n            <Icon name=\"info-circle\" className={styles.tooltip} size=\"xl\" />\n          </Tooltip>\n        </div>\n        <AutoSizer disableHeight>\n          {({ width }) => (\n            <div className={styles.editorWrapper}>\n              <CodeEditor\n                width={width}\n                height={362}\n                language={'json'}\n                showLineNumbers={true}\n                showMiniMap={false}\n                value={payload}\n                readOnly={false}\n                onBlur={setPayload}\n              />\n            </div>\n          )}\n        </AutoSizer>\n\n        <div className={styles.buttonsWrapper}>\n          <Button\n            type=\"button\"\n            variant=\"secondary\"\n            className={styles.button}\n            icon=\"bell\"\n            disabled={errorInPayloadJson}\n            onClick={onOpenAlertSelectorModal}\n          >\n            Select alert instances\n          </Button>\n\n          <Button\n            onClick={onOpenEditAlertModal}\n            className={styles.button}\n            icon=\"plus-circle\"\n            type=\"button\"\n            variant=\"secondary\"\n            disabled={errorInPayloadJson}\n          >\n            Add custom alerts\n          </Button>\n          <Button onClick={onReset} className={styles.button} icon=\"arrow-up\" type=\"button\" variant=\"destructive\">\n            {RESET_TO_DEFAULT}\n          </Button>\n\n          {payloadFormatError !== null && (\n            <Badge\n              color=\"orange\"\n              icon=\"exclamation-triangle\"\n              text={'JSON Error'}\n              tooltip={'Fix errors in payload, and click Refresh preview button'}\n            />\n          )}\n        </div>\n      </div>\n      <GenerateAlertDataModal isOpen={isEditingAlertData} onDismiss={onCloseEditAlertModal} onAccept={onAddAlertList} />\n\n      <AlertInstanceModalSelector\n        onSelect={onAddAlertList}\n        isOpen={isAlertSelectorOpen}\n        onClose={() => setIsAlertSelectorOpen(false)}\n      />\n    </div>\n  );\n}\nconst AlertTemplateDataTable = () => {\n  const styles = useStyles2(getStyles);\n  return (\n    <TemplateDataTable\n      caption={\n        <h4 className={styles.templateDataDocsHeader}>\n          Alert template data <span>This is the list of alert data fields used in the preview.</span>\n        </h4>\n      }\n      dataItems={AlertTemplatePreviewData}\n    />\n  );\n};\nconst getStyles = (theme: GrafanaTheme2) => ({\n  jsonEditor: css`\n    width: 100%;\n    height: 100%;\n  `,\n  buttonsWrapper: css`\n    margin-top: ${theme.spacing(1)};\n    display: flex;\n    flex-wrap: wrap;\n  `,\n  button: css`\n    flex: none;\n    width: fit-content;\n    padding-right: ${theme.spacing(1)};\n    margin-right: ${theme.spacing(1)};\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  title: css`\n    font-weight: ${theme.typography.fontWeightBold};\n    heigth: 41px;\n    padding-top: 10px;\n    padding-left: ${theme.spacing(2)};\n    margin-top: 19px;\n  `,\n  wrapper: css`\n    flex: 1;\n    min-width: 450px;\n  `,\n  tooltip: css`\n    padding-left: ${theme.spacing(1)};\n  `,\n  editorWrapper: css`\n    width: min-content;\n    padding-top: 7px;\n  `,\n  editor: css`\n    display: flex;\n    flex-direction: column;\n    margin-top: ${theme.spacing(-1)};\n  `,\n  templateDataDocsHeader: css`\n    color: ${theme.colors.text.primary};\n\n    span {\n      color: ${theme.colors.text.secondary};\n      font-size: ${theme.typography.bodySmall.fontSize};\n    }\n  `,\n});\n","import { css } from '@emotion/css';\nimport { subDays } from 'date-fns';\nimport { Location } from 'history';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { FormProvider, useForm, useFormContext, Validate } from 'react-hook-form';\nimport { useLocation } from 'react-router-dom';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { isFetchError } from '@grafana/runtime';\nimport {\n  Alert,\n  Button,\n  CollapsableSection,\n  Field,\n  FieldSet,\n  Input,\n  LinkButton,\n  Spinner,\n  Tab,\n  TabsBar,\n  useStyles2,\n} from '@grafana/ui';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport {\n  AlertField,\n  TemplatePreviewErrors,\n  TemplatePreviewResponse,\n  TemplatePreviewResult,\n  usePreviewTemplateMutation,\n} from '../../api/templateApi';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { updateAlertManagerConfigAction } from '../../state/actions';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { makeAMLink } from '../../utils/misc';\nimport { initialAsyncRequestState } from '../../utils/redux';\nimport { ensureDefine } from '../../utils/templates';\nimport { ProvisionedResource, ProvisioningAlert } from '../Provisioning';\n\nimport { PayloadEditor } from './PayloadEditor';\nimport { TemplateDataDocs } from './TemplateDataDocs';\nimport { TemplateEditor } from './TemplateEditor';\nimport { snippets } from './editor/templateDataSuggestions';\n\nexport interface TemplateFormValues {\n  name: string;\n  content: string;\n}\n\nexport const defaults: TemplateFormValues = Object.freeze({\n  name: '',\n  content: '',\n});\n\ninterface Props {\n  existing?: TemplateFormValues;\n  config: AlertManagerCortexConfig;\n  alertManagerSourceName: string;\n  provenance?: string;\n}\nexport const isDuplicating = (location: Location) => location.pathname.endsWith('/duplicate');\n\nconst DEFAULT_PAYLOAD = `[\n  {\n    \"annotations\": {\n      \"summary\": \"Instance instance1 has been down for more than 5 minutes\"\n    },\n    \"labels\": {\n      \"instance\": \"instance1\"\n    },\n    \"startsAt\": \"${subDays(new Date(), 1).toISOString()}\"\n  }]\n`;\n\nexport const TemplateForm = ({ existing, alertManagerSourceName, config, provenance }: Props) => {\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n\n  useCleanup((state) => (state.unifiedAlerting.saveAMConfig = initialAsyncRequestState));\n\n  const { loading, error } = useUnifiedAlertingSelector((state) => state.saveAMConfig);\n\n  const location = useLocation();\n  const isduplicating = isDuplicating(location);\n\n  const [payload, setPayload] = useState(DEFAULT_PAYLOAD);\n  const [payloadFormatError, setPayloadFormatError] = useState<string | null>(null);\n\n  const [view, setView] = useState<'content' | 'preview'>('content');\n\n  const onPayloadError = () => setView('preview');\n\n  const submit = (values: TemplateFormValues) => {\n    // wrap content in \"define\" if it's not already wrapped, in case user did not do it/\n    // it's not obvious that this is needed for template to work\n    const content = ensureDefine(values.name, values.content);\n\n    // add new template to template map\n    const template_files = {\n      ...config.template_files,\n      [values.name]: content,\n    };\n\n    // delete existing one (if name changed, otherwise it was overwritten in previous step)\n    if (existing && existing.name !== values.name) {\n      delete template_files[existing.name];\n    }\n\n    // make sure name for the template is configured on the alertmanager config object\n    const templates = [\n      ...(config.alertmanager_config.templates ?? []).filter((name) => name !== existing?.name),\n      values.name,\n    ];\n\n    const newConfig: AlertManagerCortexConfig = {\n      template_files,\n      alertmanager_config: {\n        ...config.alertmanager_config,\n        templates,\n      },\n    };\n    dispatch(\n      updateAlertManagerConfigAction({\n        alertManagerSourceName,\n        newConfig,\n        oldConfig: config,\n        successMessage: 'Template saved.',\n        redirectPath: '/alerting/notifications',\n      })\n    );\n  };\n\n  const formApi = useForm<TemplateFormValues>({\n    mode: 'onSubmit',\n    defaultValues: existing ?? defaults,\n  });\n  const {\n    handleSubmit,\n    register,\n    formState: { errors },\n    getValues,\n    setValue,\n    watch,\n  } = formApi;\n\n  const validateNameIsUnique: Validate<string> = (name: string) => {\n    return !config.template_files[name] || existing?.name === name\n      ? true\n      : 'Another template with this name already exists.';\n  };\n  const isGrafanaAlertManager = alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME;\n\n  return (\n    <FormProvider {...formApi}>\n      <form onSubmit={handleSubmit(submit)}>\n        <h4>{existing && !isduplicating ? 'Edit notification template' : 'Create notification template'}</h4>\n        {error && (\n          <Alert severity=\"error\" title=\"Error saving template\">\n            {error.message || (isFetchError(error) && error.data?.message) || String(error)}\n          </Alert>\n        )}\n        {provenance && <ProvisioningAlert resource={ProvisionedResource.Template} />}\n        <FieldSet disabled={Boolean(provenance)}>\n          <Field label=\"Template name\" error={errors?.name?.message} invalid={!!errors.name?.message} required>\n            <Input\n              {...register('name', {\n                required: { value: true, message: 'Required.' },\n                validate: { nameIsUnique: validateNameIsUnique },\n              })}\n              placeholder=\"Give your template a name\"\n              width={42}\n              autoFocus={true}\n            />\n          </Field>\n          <TemplatingGuideline />\n          <div className={styles.editorsWrapper}>\n            <div className={styles.contentContainer}>\n              <TabsBar>\n                <Tab label=\"Content\" active={view === 'content'} onChangeTab={() => setView('content')} />\n                {isGrafanaAlertManager && (\n                  <Tab label=\"Preview\" active={view === 'preview'} onChangeTab={() => setView('preview')} />\n                )}\n              </TabsBar>\n              <div className={styles.contentContainerEditor}>\n                <AutoSizer>\n                  {({ width }) => (\n                    <>\n                      {view === 'content' ? (\n                        <div>\n                          <Field error={errors?.content?.message} invalid={!!errors.content?.message} required>\n                            <div className={styles.editWrapper}>\n                              <TemplateEditor\n                                value={getValues('content')}\n                                width={width}\n                                height={363}\n                                onBlur={(value) => setValue('content', value)}\n                              />\n                            </div>\n                          </Field>\n                          <div className={styles.buttons}>\n                            {loading && (\n                              <Button disabled={true} icon=\"fa fa-spinner\" variant=\"primary\">\n                                Saving...\n                              </Button>\n                            )}\n                            {!loading && (\n                              <Button type=\"submit\" variant=\"primary\">\n                                Save template\n                              </Button>\n                            )}\n                            <LinkButton\n                              disabled={loading}\n                              href={makeAMLink('alerting/notifications', alertManagerSourceName)}\n                              variant=\"secondary\"\n                              type=\"button\"\n                            >\n                              Cancel\n                            </LinkButton>\n                          </div>\n                        </div>\n                      ) : (\n                        <TemplatePreview\n                          width={width}\n                          payload={payload}\n                          templateName={watch('name')}\n                          setPayloadFormatError={setPayloadFormatError}\n                          payloadFormatError={payloadFormatError}\n                        />\n                      )}\n                    </>\n                  )}\n                </AutoSizer>\n              </div>\n            </div>\n            {isGrafanaAlertManager && (\n              <PayloadEditor\n                payload={payload}\n                setPayload={setPayload}\n                defaultPayload={DEFAULT_PAYLOAD}\n                setPayloadFormatError={setPayloadFormatError}\n                payloadFormatError={payloadFormatError}\n                onPayloadError={onPayloadError}\n              />\n            )}\n          </div>\n        </FieldSet>\n        <CollapsableSection label=\"Data cheat sheet\" isOpen={false} className={styles.collapsableSection}>\n          <TemplateDataDocs />\n        </CollapsableSection>\n      </form>\n    </FormProvider>\n  );\n};\n\nfunction TemplatingGuideline() {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Alert title=\"Templating guideline\" severity=\"info\">\n      <Stack direction=\"row\">\n        <div>\n          Grafana uses Go templating language to create notification messages.\n          <br />\n          To find out more about templating please visit our documentation.\n        </div>\n        <div>\n          <LinkButton\n            href=\"https://grafana.com/docs/grafana/latest/alerting/manage-notifications/template-notifications/\"\n            target=\"_blank\"\n            icon=\"external-link-alt\"\n            variant=\"secondary\"\n          >\n            Templating documentation\n          </LinkButton>\n        </div>\n      </Stack>\n\n      <div className={styles.snippets}>\n        To make templating easier, we provide a few snippets in the content editor to help you speed up your workflow.\n        <div className={styles.code}>\n          {Object.values(snippets)\n            .map((s) => s.label)\n            .join(', ')}\n        </div>\n      </div>\n    </Alert>\n  );\n}\n\nfunction getResultsToRender(results: TemplatePreviewResult[]) {\n  const filteredResults = results.filter((result) => result.text.trim().length > 0);\n\n  const moreThanOne = filteredResults.length > 1;\n\n  const preview = (result: TemplatePreviewResult) => {\n    const previewForLabel = `Preview for ${result.name}:`;\n    const separatorStart = '='.repeat(previewForLabel.length).concat('>');\n    const separatorEnd = '<'.concat('='.repeat(previewForLabel.length));\n    if (moreThanOne) {\n      return `${previewForLabel}\\n${separatorStart}${result.text}${separatorEnd}\\n`;\n    } else {\n      return `${separatorStart}${result.text}${separatorEnd}\\n`;\n    }\n  };\n\n  return filteredResults\n    .map((result: TemplatePreviewResult) => {\n      return preview(result);\n    })\n    .join(`\\n`);\n}\n\nfunction getErrorsToRender(results: TemplatePreviewErrors[]) {\n  return results\n    .map((result: TemplatePreviewErrors) => {\n      if (result.name) {\n        return `ERROR in ${result.name}:\\n`.concat(`${result.kind}\\n${result.message}\\n`);\n      } else {\n        return `ERROR:\\n${result.kind}\\n${result.message}\\n`;\n      }\n    })\n    .join(`\\n`);\n}\n\nexport const PREVIEW_NOT_AVAILABLE = 'Preview request failed. Check if the payload data has the correct structure.';\n\nfunction getPreviewTorender(\n  isPreviewError: boolean,\n  payloadFormatError: string | null,\n  data: TemplatePreviewResponse | undefined\n) {\n  // ERRORS IN JSON OR IN REQUEST (endpoint not available, for example)\n  const previewErrorRequest = isPreviewError ? PREVIEW_NOT_AVAILABLE : undefined;\n  const somethingWasWrong: boolean = isPreviewError || Boolean(payloadFormatError);\n  const errorToRender = payloadFormatError || previewErrorRequest;\n\n  //PREVIEW : RESULTS AND ERRORS\n  const previewResponseResults = data?.results;\n  const previewResponseErrors = data?.errors;\n\n  const previewResultsToRender = previewResponseResults ? getResultsToRender(previewResponseResults) : '';\n  const previewErrorsToRender = previewResponseErrors ? getErrorsToRender(previewResponseErrors) : '';\n\n  if (somethingWasWrong) {\n    return errorToRender;\n  } else {\n    return `${previewResultsToRender}\\n${previewErrorsToRender}`;\n  }\n}\n\nexport function TemplatePreview({\n  payload,\n  templateName,\n  payloadFormatError,\n  setPayloadFormatError,\n  width,\n}: {\n  payload: string;\n  templateName: string;\n  payloadFormatError: string | null;\n  setPayloadFormatError: (value: React.SetStateAction<string | null>) => void;\n  width: number;\n}) {\n  const styles = useStyles2(getStyles);\n\n  const { watch } = useFormContext<TemplateFormValues>();\n\n  const templateContent = watch('content');\n\n  const [trigger, { data, isError: isPreviewError, isLoading }] = usePreviewTemplateMutation();\n\n  const previewToRender = getPreviewTorender(isPreviewError, payloadFormatError, data);\n\n  const onPreview = useCallback(() => {\n    try {\n      const alertList: AlertField[] = JSON.parse(payload);\n      JSON.stringify([...alertList]); // check if it's iterable, in order to be able to add more data\n      trigger({ template: templateContent, alerts: alertList, name: templateName });\n      setPayloadFormatError(null);\n    } catch (e) {\n      setPayloadFormatError(e instanceof Error ? e.message : 'Invalid JSON.');\n    }\n  }, [templateContent, templateName, payload, setPayloadFormatError, trigger]);\n\n  useEffect(() => onPreview(), [onPreview]);\n\n  return (\n    <div style={{ width: `${width}px` }} className={styles.preview.wrapper}>\n      {isLoading && (\n        <>\n          <Spinner inline={true} /> Loading preview...\n        </>\n      )}\n      <pre className={styles.preview.result} data-testid=\"payloadJSON\">\n        {previewToRender}\n      </pre>\n      <Button onClick={onPreview} className={styles.preview.button} icon=\"arrow-up\" type=\"button\" variant=\"secondary\">\n        Refresh preview\n      </Button>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  contentContainer: css`\n    flex: 1;\n    margin-bottom: ${theme.spacing(6)};\n  `,\n  contentContainerEditor: css`\n      flex:1;\n      display: flex;\n      padding-top: 10px;\n      gap: ${theme.spacing(2)};\n      flex-direction: row;\n      align-items: flex-start;\n      flex-wrap: wrap;\n      ${theme.breakpoints.up('xxl')} {\n        flex - wrap: nowrap;\n    }\n      min-width: 450px;\n      height: 363px;\n      `,\n  snippets: css`\n    margin-top: ${theme.spacing(2)};\n    font-size: ${theme.typography.bodySmall.fontSize};\n  `,\n  code: css`\n    color: ${theme.colors.text.secondary};\n    font-weight: ${theme.typography.fontWeightBold};\n  `,\n  buttons: css`\n    display: flex;\n    & > * + * {\n      margin-left: ${theme.spacing(1)};\n    }\n    margin-top: -7px;\n  `,\n  textarea: css`\n    max-width: 758px;\n  `,\n  editWrapper: css`\n      display: flex;\n      width: 100%\n      heigth:100%;\n      position: relative;\n      `,\n  toggle: css`\n      color: theme.colors.text.secondary,\n      marginRight: ${theme.spacing(1)}`,\n  preview: {\n    wrapper: css`\n      display: flex;\n      width: 100%\n      heigth:100%;\n      position: relative;\n      flex-direction: column;\n      `,\n    result: css`\n      width: 100%;\n      height: 363px;\n    `,\n    button: css`\n      flex: none;\n      width: fit-content;\n      margin-top: -6px;\n    `,\n  },\n  collapsableSection: css`\n    width: fit-content;\n  `,\n  editorsWrapper: css`\n    display: flex;\n    flex: 1;\n    flex-wrap: wrap;\n    gap: ${theme.spacing(1)};\n  `,\n});\n","export const alertsLoopSnippet = `\n{{ range .Alerts }}\n  Status: {{ .Status }}\n  Starts at: {{ .StartsAt }}\n{{ end }}\n`;\n\nexport const alertDetailsSnippet = `\n[{{.Status}}] {{ .Labels.alertname }}\n\nLabels:\n{{ range .Labels.SortedPairs }}\n  {{ .Name }}: {{ .Value }}\n{{ end }}\n\n{{ if gt (len .Annotations) 0 }}\nAnnotations:\n{{ range .Annotations.SortedPairs }}\n  {{ .Name }}: {{ .Value }}\n{{ end }}\n{{ end }}\n\n{{ if gt (len .SilenceURL ) 0 }}\n  Silence alert: {{ .SilenceURL }}\n{{ end }}\n{{ if gt (len .DashboardURL ) 0 }}\n  Go to dashboard: {{ .DashboardURL }}\n{{ end }}\n`;\n\nexport const groupLabelsLoopSnippet = getKeyValueTemplate('GroupLabels.SortedPairs');\nexport const commonLabelsLoopSnippet = getKeyValueTemplate('CommonLabels.SortedPairs');\nexport const commonAnnotationsLoopSnippet = getKeyValueTemplate('CommonAnnotations.SortedPairs');\nexport const labelsLoopSnippet = getKeyValueTemplate('Labels.SortedPairs');\nexport const annotationsLoopSnippet = getKeyValueTemplate('Annotations.SortedPairs');\n\nfunction getKeyValueTemplate(arrayName: string) {\n  return `\n{{ range .${arrayName} }}\n  {{ .Name }} = {{ .Value }}\n{{ end }}`;\n}\n","import type { Monaco } from '@grafana/ui';\n\nimport {\n  alertDetailsSnippet,\n  alertsLoopSnippet,\n  annotationsLoopSnippet,\n  commonAnnotationsLoopSnippet,\n  commonLabelsLoopSnippet,\n  groupLabelsLoopSnippet,\n  labelsLoopSnippet,\n} from './snippets';\nimport { SuggestionDefinition } from './suggestionDefinition';\n\n// Suggestions available at the top level of a template\nexport function getGlobalSuggestions(monaco: Monaco): SuggestionDefinition[] {\n  const kind = monaco.languages.CompletionItemKind.Field;\n\n  return [\n    {\n      label: 'Alerts',\n      kind,\n      detail: 'Alert[]',\n      documentation: { value: 'An Array containing all alerts' },\n    },\n    { label: 'Receiver', kind, detail: 'string' },\n    { label: 'Status', kind, detail: 'string' },\n    { label: 'GroupLabels', kind, detail: '[]KeyValue' },\n    { label: 'CommonLabels', kind, detail: '[]KeyValue' },\n    { label: 'CommonAnnotations', kind, detail: '[]KeyValue' },\n    { label: 'ExternalURL', kind, detail: 'string' },\n  ];\n}\n\n// Suggestions that are valid only in the scope of an alert (e.g. in the .Alerts loop)\nexport function getAlertSuggestions(monaco: Monaco): SuggestionDefinition[] {\n  const kind = monaco.languages.CompletionItemKind.Field;\n\n  return [\n    {\n      label: { label: 'Status', detail: '(Alert)', description: 'string' },\n      kind,\n      detail: 'string',\n      documentation: { value: 'Status of the alert. It can be `firing` or `resolved`' },\n    },\n    {\n      label: { label: 'Labels', detail: '(Alert)' },\n      kind,\n      detail: '[]KeyValue',\n      documentation: { value: 'A set of labels attached to the alert.' },\n    },\n    {\n      label: { label: 'Annotations', detail: '(Alert)' },\n      kind,\n      detail: '[]KeyValue',\n      documentation: 'A set of annotations attached to the alert.',\n    },\n    {\n      label: { label: 'StartsAt', detail: '(Alert)' },\n      kind,\n      detail: 'time.Time',\n      documentation: 'Time the alert started firing.',\n    },\n    {\n      label: { label: 'EndsAt', detail: '(Alert)' },\n      kind,\n      detail: 'time.Time',\n      documentation:\n        'Only set if the end time of an alert is known. Otherwise set to a configurable timeout period from the time since the last alert was received.',\n    },\n    {\n      label: { label: 'GeneratorURL', detail: '(Alert)' },\n      kind,\n      detail: 'string',\n      documentation: 'Back link to Grafana or external Alertmanager.',\n    },\n    {\n      label: { label: 'SilenceURL', detail: '(Alert)' },\n      kind,\n      detail: 'string',\n      documentation:\n        'Link to Grafana silence for with labels for this alert pre-filled. Only for Grafana managed alerts.',\n    },\n    {\n      label: { label: 'DashboardURL', detail: '(Alert)' },\n      kind,\n      detail: 'string',\n      documentation: 'Link to Grafana dashboard, if alert rule belongs to one. Only for Grafana managed alerts.',\n    },\n    {\n      label: { label: 'PanelURL', detail: '(Alert)' },\n      kind,\n      detail: 'string',\n      documentation: 'Link to Grafana dashboard panel, if alert rule belongs to one. Only for Grafana managed alerts.',\n    },\n    {\n      label: { label: 'Fingerprint', detail: '(Alert)' },\n      kind,\n      detail: 'string',\n      documentation: 'Fingerprint that can be used to identify the alert.',\n    },\n    {\n      label: { label: 'ValueString', detail: '(Alert)' },\n      kind,\n      detail: 'string',\n      documentation: 'String that contains labels and values of each reduced expression in the alert.',\n    },\n  ];\n}\n\n// Suggestions for .Alerts\nexport function getAlertsSuggestions(monaco: Monaco): SuggestionDefinition[] {\n  const kind = monaco.languages.CompletionItemKind.Field;\n\n  return [\n    { label: 'Firing', kind, detail: 'Alert[]' },\n    { label: 'Resolved', kind, detail: 'Alert[]' },\n  ];\n}\n\n// Suggestions for the KeyValue types\nexport function getKeyValueSuggestions(monaco: Monaco): SuggestionDefinition[] {\n  const kind = monaco.languages.CompletionItemKind.Field;\n\n  return [\n    { label: 'SortedPairs', kind, detail: '[]KeyValue' },\n    { label: 'Names', kind, detail: '[]string' },\n    { label: 'Values', kind, detail: '[]string' },\n    {\n      label: 'Remove',\n      detail: 'KeyValue[] function(keys []string)',\n      kind: monaco.languages.CompletionItemKind.Method,\n    },\n  ];\n}\n\nexport const snippets = {\n  alerts: {\n    label: 'alertsloop',\n    description: 'Renders a loop through alerts',\n    snippet: alertsLoopSnippet,\n  },\n  alertDetails: {\n    label: 'alertdetails',\n    description: 'Renders all information available about the alert',\n    snippet: alertDetailsSnippet,\n  },\n  groupLabels: {\n    label: 'grouplabelsloop',\n    description: 'Renders a loop through group labels',\n    snippet: groupLabelsLoopSnippet,\n  },\n  commonLabels: {\n    label: 'commonlabelsloop',\n    description: 'Renders a loop through common labels',\n    snippet: commonLabelsLoopSnippet,\n  },\n  commonAnnotations: {\n    label: 'commonannotationsloop',\n    description: 'Renders a loop through common annotations',\n    snippet: commonAnnotationsLoopSnippet,\n  },\n  labels: {\n    label: 'labelsloop',\n    description: 'Renders a loop through labels',\n    snippet: labelsLoopSnippet,\n  },\n  annotations: {\n    label: 'annotationsloop',\n    description: 'Renders a loop through annotations',\n    snippet: annotationsLoopSnippet,\n  },\n};\n\n// Snippets\nexport function getSnippetsSuggestions(monaco: Monaco): SuggestionDefinition[] {\n  const snippetKind = monaco.languages.CompletionItemKind.Snippet;\n  const snippetInsertRule = monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet;\n\n  const { alerts, alertDetails, groupLabels, commonLabels, commonAnnotations, labels, annotations } = snippets;\n\n  return [\n    {\n      label: alerts.label,\n      documentation: alerts.description,\n      kind: snippetKind,\n      insertText: alerts.snippet,\n      insertTextRules: snippetInsertRule,\n    },\n    {\n      label: {\n        label: alertDetails.label,\n        detail: '(Alert)',\n      },\n      documentation: alertDetails.description,\n      kind: snippetKind,\n      insertText: alertDetails.snippet,\n      insertTextRules: snippetInsertRule,\n    },\n    {\n      label: groupLabels.label,\n      documentation: groupLabels.description,\n      kind: snippetKind,\n      insertText: groupLabels.snippet,\n      insertTextRules: snippetInsertRule,\n    },\n    {\n      label: commonLabels.label,\n      documentation: commonLabels.description,\n      kind: snippetKind,\n      insertText: commonLabels.snippet,\n      insertTextRules: snippetInsertRule,\n    },\n    {\n      label: commonAnnotations.label,\n      documentation: commonAnnotations.description,\n      kind: snippetKind,\n      insertText: commonAnnotations.snippet,\n      insertTextRules: snippetInsertRule,\n    },\n    {\n      label: { label: labels.label, detail: '(Alert)' },\n      documentation: labels.description,\n      kind: snippetKind,\n      insertText: labels.snippet,\n      insertTextRules: snippetInsertRule,\n    },\n    {\n      label: { label: annotations.label, detail: '(Alert)' },\n      documentation: annotations.description,\n      kind: snippetKind,\n      insertText: annotations.snippet,\n      insertTextRules: snippetInsertRule,\n    },\n  ];\n}\n","import { isEqual, uniqBy } from 'lodash';\n\nimport { GrafanaAlertStateWithReason } from 'app/types/unified-alerting-dto';\n\nexport interface Line {\n  previous: GrafanaAlertStateWithReason;\n  current: GrafanaAlertStateWithReason;\n  values?: Record<string, number>;\n  labels?: Record<string, string>;\n}\n\nexport interface LogRecord {\n  timestamp: number;\n  line: Line;\n}\n\nexport type Label = [string, string];\n\n// omit \"common\" labels from \"labels\"\nexport function omitLabels(labels: Label[], common: Label[]): Label[] {\n  return labels.filter((label) => {\n    return !common.find((commonLabel) => JSON.stringify(commonLabel) === JSON.stringify(label));\n  });\n}\n\n// find all common labels by looking at which ones occur in every record, then create a unique array of items for those\nexport function extractCommonLabels(labels: Label[][]): Label[] {\n  const flatLabels = labels.flatMap((label) => label);\n\n  const commonLabels = uniqBy(\n    flatLabels.filter((label) => {\n      const count = flatLabels.filter((l) => isEqual(label, l)).length;\n      return count === Object.keys(labels).length;\n    }),\n    (label) => JSON.stringify(label)\n  );\n\n  return commonLabels;\n}\n","import { SerializedError } from '@reduxjs/toolkit';\n\nimport { alertmanagerApi } from '../api/alertmanagerApi';\n\ntype Options = {\n  refetchOnFocus: boolean;\n  refetchOnReconnect: boolean;\n};\n\n// TODO refactor this so we can just call \"alertmanagerApi.endpoints.getAlertmanagerConfiguration\" everywhere\n// and remove this hook since it adds little value\nexport function useAlertmanagerConfig(amSourceName?: string, options?: Options) {\n  const fetchConfig = alertmanagerApi.endpoints.getAlertmanagerConfiguration.useQuery(amSourceName ?? '', {\n    ...options,\n    skip: !amSourceName,\n  });\n\n  return {\n    ...fetchConfig,\n    // TODO refactor to get rid of this type assertion\n    error: fetchConfig.error as SerializedError,\n  };\n}\n","import { now } from 'lodash';\n\nexport function ensureDefine(templateName: string, templateContent: string): string {\n  // notification template content must be wrapped in {{ define \"name\" }} tag,\n  // but this is not obvious because user also has to provide name separately in the form.\n  // so if user does not manually add {{ define }} tag, we do it automatically\n  let content = templateContent.trim();\n  if (!content.match(/\\{\\{\\s*define/)) {\n    const indentedContent = content\n      .split('\\n')\n      .map((line) => '  ' + line)\n      .join('\\n');\n    content = `{{ define \"${templateName}\" }}\\n${indentedContent}\\n{{ end }}`;\n  }\n  return content;\n}\nexport function updateDefinesWithUniqueValue(templateContent: string): string {\n  const getNewValue = (match_: string, originalDefineName: string) => {\n    return `{{ define \"${originalDefineName}_NEW_${now()}\" }}`;\n  };\n  return templateContent.replace(/\\{\\{\\s*define\\s*\\\"(?<defineName>.*)\\\"\\s*\\}\\}/g, getNewValue);\n}\n"],"names":["getAlertManagerSuggestions","monaco","kind","registerGoTemplateAutocomplete","goTemplateAutocompleteProvider","model","position","context","word","range","completionProvider","CompletionProvider","isInsideGoExpression","wordBeforeDot","searchRange","goSyntaxRegex","match","wordContext","args","definition","buildAutocompleteSuggestion","label","detail","documentation","insertText","insertFallback","labelObject","GO_TEMPLATE_LANGUAGE_ID","registerLanguage","language","id","loader","l","monarch","TemplateEditor","props","shouldAutoHeight","disposeSuggestions","onEditorDidMount","editor","contentHeight","CodeEditor","subDays","dirtyDate","dirtyAmount","requiredArgs","amount","toInteger","addDays","previewTemplateUrl","templatesApi","alertingApi","build","template","alerts","name","usePreviewTemplateMutation","AlertInstanceModalSelector","onSelect","isOpen","onClose","styles","getStyles","selectedRule","setSelectedRule","selectedInstances","setSelectedInstances","useGetAlertmanagerAlertsQuery","alertmanagerApi","result","loading","error","ruleFilter","setRuleFilter","rulesWithInstances","rules","instance","handleRuleChange","rule","filteredRules","filteredRulesObject","filteredRulesKeys","RuleRow","index","style","ruleName","isSelected","Icon","getAlertUniqueLabels","allAlerts","currentAlert","labelsAsArray","alert","ruleCommonLabels","alertUniqueLabels","labels","InstanceRow","tags","handleSelectInstances","Tooltip","tag","Tag","handleConfirm","instances","resetState","handleSearchRules","onDismiss","filter","Modal","FilterInput","LoadingPlaceholder","height","width","Button","theme","clearButton","GlobalTemplateData","AlertTemplatePreviewData","AlertTemplateData","KeyValueTemplateFunctions","KeyValueCodeSnippet","TemplateDataDocs","getTemplateDataDocsStyles","AlertTemplateDataTable","TemplateDataTable","Stack","type","HoverCard","KeyValueTemplateDataTable","dataItems","caption","typeRenderer","getTemplateDataTableStyles","notes","tableStyles","returns","defaultValues","GenerateAlertDataModal","onAccept","setAlerts","formMethods","annotations","status","setStatus","onAdd","key","value","acc","onSubmit","labelsOrAnnotationsAdded","someLabels","lb","someAnnotations","ann","alertOptions","e","Card","AnnotationsStep","LabelsField","RadioButtonGroup","RESET_TO_DEFAULT","PayloadEditor","payload","setPayload","defaultPayload","setPayloadFormatError","payloadFormatError","onPayloadError","onReset","isEditingAlertData","setIsEditingAlertData","onCloseEditAlertModal","errorInPayloadJson","validatePayload","payloadObj","onOpenEditAlertModal","onOpenAlertSelectorModal","setIsAlertSelectorOpen","onAddAlertList","isAlertSelectorOpen","Badge","defaults","isDuplicating","location","DEFAULT_PAYLOAD","TemplateForm","existing","alertManagerSourceName","config","provenance","dispatch","useCleanup","state","useUnifiedAlertingSelector","isduplicating","view","setView","submit","values","content","template_files","templates","newConfig","formApi","handleSubmit","register","errors","getValues","setValue","watch","validateNameIsUnique","isGrafanaAlertManager","Alert","Provisioning","FieldSet","Field","Input","TemplatingGuideline","TabsBar","Tab","TemplatePreview","CollapsableSection","s","getResultsToRender","results","filteredResults","moreThanOne","preview","previewForLabel","separatorStart","separatorEnd","getErrorsToRender","PREVIEW_NOT_AVAILABLE","getPreviewTorender","isPreviewError","data","previewErrorRequest","somethingWasWrong","errorToRender","previewResponseResults","previewResponseErrors","previewResultsToRender","previewErrorsToRender","templateName","templateContent","trigger","isLoading","previewToRender","onPreview","alertList","Spinner","alertsLoopSnippet","alertDetailsSnippet","groupLabelsLoopSnippet","getKeyValueTemplate","commonLabelsLoopSnippet","commonAnnotationsLoopSnippet","labelsLoopSnippet","annotationsLoopSnippet","arrayName","getGlobalSuggestions","getAlertSuggestions","getAlertsSuggestions","getKeyValueSuggestions","snippets","getSnippetsSuggestions","snippetKind","snippetInsertRule","alertDetails","groupLabels","commonLabels","commonAnnotations","omitLabels","common","commonLabel","extractCommonLabels","flatLabels","useAlertmanagerConfig","amSourceName","options","fetchConfig","ensureDefine","indentedContent","line","updateDefinesWithUniqueValue","getNewValue","match_","originalDefineName"],"sourceRoot":""}