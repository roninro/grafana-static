{"version":3,"file":"AdminFeatureTogglesPage.4dcf409f913814f74a17.js","mappings":"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","sources":["webpack://grafana/./public/app/features/admin/AdminFeatureTogglesTable.tsx","webpack://grafana/./public/app/features/admin/AdminFeatureTogglesPage.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\nimport { Switch, InteractiveTable, type CellProps, Button, type SortByFn } from '@grafana/ui';\n\nimport { type FeatureToggle, useUpdateFeatureTogglesMutation } from './AdminFeatureTogglesAPI';\n\ninterface Props {\n  featureToggles: FeatureToggle[];\n  onUpdateSuccess: () => void;\n}\n\nconst sortByName: SortByFn<FeatureToggle> = (a, b) => {\n  return a.original.name.localeCompare(b.original.name);\n};\n\nconst sortByDescription: SortByFn<FeatureToggle> = (a, b) => {\n  if (!a.original.description && !b.original.description) {\n    return 0;\n  } else if (!a.original.description) {\n    return 1;\n  } else if (!b.original.description) {\n    return -1;\n  }\n  return a.original.description.localeCompare(b.original.description);\n};\n\nconst sortByEnabled: SortByFn<FeatureToggle> = (a, b) => {\n  return a.original.enabled === b.original.enabled ? 0 : a.original.enabled ? 1 : -1;\n};\n\nexport function AdminFeatureTogglesTable({ featureToggles, onUpdateSuccess }: Props) {\n  const [localToggles, setLocalToggles] = useState<FeatureToggle[]>(featureToggles);\n  const [updateFeatureToggles] = useUpdateFeatureTogglesMutation();\n  const [modifiedToggles, setModifiedToggles] = useState<FeatureToggle[]>([]);\n  const [isSaving, setIsSaving] = useState(false);\n\n  const handleToggleChange = (toggle: FeatureToggle, newValue: boolean) => {\n    const updatedToggle = { ...toggle, enabled: newValue };\n\n    // Update the local state\n    const updatedToggles = localToggles.map((t) => (t.name === toggle.name ? updatedToggle : t));\n    setLocalToggles(updatedToggles);\n\n    // Check if the toggle exists in modifiedToggles\n    const existingToggle = modifiedToggles.find((t) => t.name === toggle.name);\n\n    // If it exists and its state is the same as the updated one, remove it from modifiedToggles\n    if (existingToggle && existingToggle.enabled === newValue) {\n      setModifiedToggles((prev) => prev.filter((t) => t.name !== toggle.name));\n    } else {\n      // Else, add/update the toggle in modifiedToggles\n      setModifiedToggles((prev) => {\n        const newToggles = prev.filter((t) => t.name !== toggle.name);\n        newToggles.push(updatedToggle);\n        return newToggles;\n      });\n    }\n  };\n\n  const handleSaveChanges = async () => {\n    setIsSaving(true);\n    try {\n      const resp = await updateFeatureToggles(modifiedToggles);\n      // Reset modifiedToggles after successful update\n      if (!('error' in resp)) {\n        onUpdateSuccess();\n        setModifiedToggles([]);\n      }\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const hasModifications = () => {\n    // Check if there are any differences between the original toggles and the local toggles\n    return featureToggles.some((originalToggle) => {\n      const modifiedToggle = localToggles.find((t) => t.name === originalToggle.name);\n      return modifiedToggle && modifiedToggle.enabled !== originalToggle.enabled;\n    });\n  };\n\n  const columns = [\n    {\n      id: 'name',\n      header: 'Name',\n      cell: ({ cell: { value } }: CellProps<FeatureToggle, string>) => <div>{value}</div>,\n      sortType: sortByName,\n    },\n    {\n      id: 'description',\n      header: 'Description',\n      cell: ({ cell: { value } }: CellProps<FeatureToggle, string>) => <div>{value}</div>,\n      sortType: sortByDescription,\n    },\n    {\n      id: 'enabled',\n      header: 'State',\n      cell: ({ row }: CellProps<FeatureToggle, boolean>) => (\n        <div>\n          <Switch\n            value={row.original.enabled}\n            disabled={row.original.readOnly}\n            onChange={(e) => handleToggleChange(row.original, e.currentTarget.checked)}\n          />\n        </div>\n      ),\n      sortType: sortByEnabled,\n    },\n  ];\n\n  return (\n    <>\n      <div style={{ display: 'flex', justifyContent: 'flex-end', padding: '0 0 5px 0' }}>\n        <Button disabled={!hasModifications() || isSaving} onClick={handleSaveChanges}>\n          {isSaving ? 'Saving...' : 'Save Changes'}\n        </Button>\n      </div>\n      <InteractiveTable columns={columns} data={localToggles} getRowId={(featureToggle) => featureToggle.name} />\n    </>\n  );\n}\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, Icon } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { useGetFeatureTogglesQuery, useGetManagerStateQuery } from './AdminFeatureTogglesAPI';\nimport { AdminFeatureTogglesTable } from './AdminFeatureTogglesTable';\n\nexport default function AdminFeatureTogglesPage() {\n  const { data: featureToggles, isLoading, isError } = useGetFeatureTogglesQuery();\n  const { data: featureMgmtState } = useGetManagerStateQuery();\n  const [updateSuccessful, setUpdateSuccessful] = useState(false);\n\n  const styles = useStyles2(getStyles);\n\n  const getErrorMessage = () => {\n    return 'Error fetching feature toggles';\n  };\n\n  const handleUpdateSuccess = () => {\n    setUpdateSuccessful(true);\n  };\n\n  const AlertMessage = () => {\n    return (\n      <div className={styles.warning}>\n        <div className={styles.icon}>\n          <Icon name=\"exclamation-triangle\" />\n        </div>\n        <span className={styles.message}>\n          {featureMgmtState?.restartRequired || updateSuccessful\n            ? 'A restart is pending for your Grafana instance to apply the latest feature toggle changes'\n            : 'Saving feature toggle changes will prompt a restart of the instance, which may take a few minutes'}\n        </span>\n      </div>\n    );\n  };\n\n  return (\n    <Page navId=\"feature-toggles\">\n      <Page.Contents>\n        <>\n          {isError && getErrorMessage()}\n          {isLoading && 'Fetching feature toggles'}\n          <AlertMessage />\n          {featureToggles && (\n            <AdminFeatureTogglesTable featureToggles={featureToggles} onUpdateSuccess={handleUpdateSuccess} />\n          )}\n        </>\n      </Page.Contents>\n    </Page>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    warning: css({\n      display: 'flex',\n      marginTop: theme.spacing(3),\n    }),\n    icon: css({\n      color: theme.colors.warning.main,\n      paddingRight: theme.spacing(),\n    }),\n    message: css({\n      color: theme.colors.text.secondary,\n      marginTop: theme.spacing(0.25),\n    }),\n  };\n}\n"],"names":["sortByName","a","b","sortByDescription","sortByEnabled","AdminFeatureTogglesTable","featureToggles","onUpdateSuccess","localToggles","setLocalToggles","updateFeatureToggles","modifiedToggles","setModifiedToggles","isSaving","setIsSaving","handleToggleChange","toggle","newValue","updatedToggle","updatedToggles","t","existingToggle","prev","newToggles","handleSaveChanges","hasModifications","originalToggle","modifiedToggle","columns","value","row","Switch","e","Button","InteractiveTable","featureToggle","AdminFeatureTogglesPage","isLoading","isError","featureMgmtState","updateSuccessful","setUpdateSuccessful","styles","getStyles","getErrorMessage","handleUpdateSuccess","AlertMessage","Icon","Page","theme"],"sourceRoot":""}