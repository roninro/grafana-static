{"version":3,"file":"jaegerPlugin.2d4828f82cbd1c93c267.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/Divider.tsx","webpack://grafana/./public/app/core/components/NodeGraphSettings.tsx","webpack://grafana/./public/app/core/components/TraceToMetrics/TraceToMetricsSettings.tsx","webpack://grafana/./public/app/plugins/datasource/jaeger/CheatSheet.tsx","webpack://grafana/./public/app/plugins/datasource/jaeger/util.ts","webpack://grafana/./public/app/plugins/datasource/jaeger/components/SearchForm.tsx","webpack://grafana/./public/app/plugins/datasource/jaeger/components/QueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/jaeger/configuration/TraceIdTimeParams.tsx","webpack://grafana/./public/app/plugins/datasource/jaeger/configuration/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/jaeger/graphTransform.ts","webpack://grafana/./public/app/plugins/datasource/jaeger/datasource.ts","webpack://grafana/./public/app/plugins/datasource/jaeger/module.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nexport const Divider = ({ hideLine = false }) => {\n  const styles = useStyles2(getStyles);\n\n  if (hideLine) {\n    return <hr className={styles.dividerHideLine} />;\n  }\n\n  return <hr className={styles.divider} />;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  divider: css`\n    margin: ${theme.spacing(4, 0)};\n  `,\n  dividerHideLine: css`\n    border: none;\n    margin: ${theme.spacing(3, 0)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport {\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme2,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { ConfigSubSection } from '@grafana/experimental';\nimport { InlineField, InlineFieldRow, InlineSwitch, useStyles2 } from '@grafana/ui';\n\nimport { ConfigDescriptionLink } from './ConfigDescriptionLink';\n\nexport interface NodeGraphOptions {\n  enabled?: boolean;\n}\n\nexport interface NodeGraphData extends DataSourceJsonData {\n  nodeGraph?: NodeGraphOptions;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<NodeGraphData> {}\n\nexport function NodeGraphSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <InlineFieldRow className={styles.row}>\n        <InlineField\n          tooltip=\"Displays the node graph above the trace view. Default: disabled\"\n          label=\"Enable node graph\"\n          labelWidth={26}\n        >\n          <InlineSwitch\n            id=\"enableNodeGraph\"\n            value={options.jsonData.nodeGraph?.enabled}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'nodeGraph', {\n                ...options.jsonData.nodeGraph,\n                enabled: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </div>\n  );\n}\n\nexport const NodeGraphSection = ({ options, onOptionsChange }: DataSourcePluginOptionsEditorProps) => {\n  return (\n    <ConfigSubSection\n      title=\"Node graph\"\n      description={\n        <ConfigDescriptionLink\n          description=\"Show or hide the node graph visualization.\"\n          suffix={`${options.type}/#node-graph`}\n          feature=\"the node graph\"\n        />\n      }\n    >\n      <NodeGraphSettings options={options} onOptionsChange={onOptionsChange} />\n    </ConfigSubSection>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  infoText: css`\n    label: infoText;\n    padding-bottom: ${theme.spacing(2)};\n    color: ${theme.colors.text.secondary};\n  `,\n  container: css`\n    label: container;\n    width: 100%;\n  `,\n  row: css`\n    label: row;\n    align-items: baseline;\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport {\n  DataSourceInstanceSettings,\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme2,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { ConfigSection } from '@grafana/experimental';\nimport { Button, InlineField, InlineFieldRow, Input, useStyles2 } from '@grafana/ui';\nimport { DataSourcePicker } from 'app/features/datasources/components/picker/DataSourcePicker';\n\nimport { ConfigDescriptionLink } from '../ConfigDescriptionLink';\nimport { IntervalInput } from '../IntervalInput/IntervalInput';\nimport { TagMappingInput } from '../TraceToLogs/TagMappingInput';\nimport { getTimeShiftLabel, getTimeShiftTooltip, invalidTimeShiftError } from '../TraceToLogs/TraceToLogsSettings';\n\nexport interface TraceToMetricsOptions {\n  datasourceUid?: string;\n  tags?: Array<{ key: string; value: string }>;\n  queries: TraceToMetricQuery[];\n  spanStartTimeShift?: string;\n  spanEndTimeShift?: string;\n}\n\nexport interface TraceToMetricQuery {\n  name?: string;\n  query?: string;\n}\n\nexport interface TraceToMetricsData extends DataSourceJsonData {\n  tracesToMetrics?: TraceToMetricsOptions;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TraceToMetricsData> {}\n\nexport function TraceToMetricsSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={css({ width: '100%' })}>\n      <InlineFieldRow className={styles.row}>\n        <InlineField\n          tooltip=\"The Prometheus data source the trace is going to navigate to\"\n          label=\"Data source\"\n          labelWidth={26}\n        >\n          <DataSourcePicker\n            inputId=\"trace-to-metrics-data-source-picker\"\n            pluginId=\"prometheus\"\n            current={options.jsonData.tracesToMetrics?.datasourceUid}\n            noDefault={true}\n            width={40}\n            onChange={(ds: DataSourceInstanceSettings) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                ...options.jsonData.tracesToMetrics,\n                datasourceUid: ds.uid,\n              })\n            }\n          />\n        </InlineField>\n        {options.jsonData.tracesToMetrics?.datasourceUid ? (\n          <Button\n            type=\"button\"\n            variant=\"secondary\"\n            size=\"sm\"\n            fill=\"text\"\n            onClick={() => {\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                ...options.jsonData.tracesToMetrics,\n                datasourceUid: undefined,\n              });\n            }}\n          >\n            Clear\n          </Button>\n        ) : null}\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <IntervalInput\n          label={getTimeShiftLabel('start')}\n          tooltip={getTimeShiftTooltip('start', '-2m')}\n          value={options.jsonData.tracesToMetrics?.spanStartTimeShift || ''}\n          onChange={(val) => {\n            updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n              ...options.jsonData.tracesToMetrics,\n              spanStartTimeShift: val,\n            });\n          }}\n          placeholder={'-2m'}\n          isInvalidError={invalidTimeShiftError}\n        />\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <IntervalInput\n          label={getTimeShiftLabel('end')}\n          tooltip={getTimeShiftTooltip('end', '2m')}\n          value={options.jsonData.tracesToMetrics?.spanEndTimeShift || ''}\n          onChange={(val) => {\n            updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n              ...options.jsonData.tracesToMetrics,\n              spanEndTimeShift: val,\n            });\n          }}\n          placeholder={'2m'}\n          isInvalidError={invalidTimeShiftError}\n        />\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField tooltip=\"Tags that will be used in the metrics query\" label=\"Tags\" labelWidth={26}>\n          <TagMappingInput\n            values={options.jsonData.tracesToMetrics?.tags ?? []}\n            onChange={(v) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                ...options.jsonData.tracesToMetrics,\n                tags: v,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      {options.jsonData.tracesToMetrics?.queries?.map((query, i) => (\n        <div key={i} className={styles.queryRow}>\n          <InlineField label=\"Link Label\" labelWidth={26} tooltip=\"Descriptive label for the linked query\">\n            <Input\n              label=\"Link Label\"\n              type=\"text\"\n              allowFullScreen\n              value={query.name}\n              width={40}\n              onChange={(e) => {\n                let newQueries = options.jsonData.tracesToMetrics?.queries.slice() ?? [];\n                newQueries[i].name = e.currentTarget.value;\n                updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                  ...options.jsonData.tracesToMetrics,\n                  queries: newQueries,\n                });\n              }}\n            />\n          </InlineField>\n          <InlineField\n            label=\"Query\"\n            labelWidth={10}\n            tooltip=\"The Prometheus query that will run when navigating from a trace to metrics. Interpolate tags using the `$__tags` keyword\"\n            grow\n          >\n            <Input\n              label=\"Query\"\n              type=\"text\"\n              allowFullScreen\n              value={query.query}\n              onChange={(e) => {\n                let newQueries = options.jsonData.tracesToMetrics?.queries.slice() ?? [];\n                newQueries[i].query = e.currentTarget.value;\n                updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                  ...options.jsonData.tracesToMetrics,\n                  queries: newQueries,\n                });\n              }}\n            />\n          </InlineField>\n\n          <Button\n            variant=\"destructive\"\n            title=\"Remove query\"\n            icon=\"times\"\n            type=\"button\"\n            onClick={() => {\n              let newQueries = options.jsonData.tracesToMetrics?.queries.slice();\n              newQueries?.splice(i, 1);\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                ...options.jsonData.tracesToMetrics,\n                queries: newQueries,\n              });\n            }}\n          />\n        </div>\n      ))}\n\n      <Button\n        variant=\"secondary\"\n        title=\"Add query\"\n        icon=\"plus\"\n        type=\"button\"\n        onClick={() => {\n          updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n            ...options.jsonData.tracesToMetrics,\n            queries: [...(options.jsonData.tracesToMetrics?.queries ?? []), { query: '' }],\n          });\n        }}\n      >\n        Add query\n      </Button>\n    </div>\n  );\n}\n\nexport const TraceToMetricsSection = ({ options, onOptionsChange }: DataSourcePluginOptionsEditorProps) => {\n  return (\n    <ConfigSection\n      title=\"Trace to metrics\"\n      description={\n        <ConfigDescriptionLink\n          description=\"Navigate from a trace span to the selected data source's metrics.\"\n          suffix={`${options.type}/#trace-to-metrics`}\n          feature=\"trace to metrics\"\n        />\n      }\n      isCollapsible={true}\n      isInitiallyOpen={true}\n    >\n      <TraceToMetricsSettings options={options} onOptionsChange={onOptionsChange} />\n    </ConfigSection>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing(2)};\n    color: ${theme.colors.text.secondary};\n  `,\n  row: css`\n    label: row;\n    align-items: baseline;\n  `,\n  queryRow: css`\n    label: queryRow;\n    display: flex;\n    flex-flow: wrap;\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nexport default function CheatSheet() {\n  const styles = useStyles2(getStyles);\n  return (\n    <>\n      <h2 id=\"jaeger-cheat-sheet\">Jaeger Cheat Sheet</h2>\n      <p>\n        This cheat sheet provides a quick overview of the query types that are available. For more details about the\n        Jaeger data source, check out{' '}\n        <a\n          href=\"https://grafana.com/docs/grafana/latest/datasources/jaeger\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          className={styles.anchorTag}\n        >\n          the documentation\n        </a>\n        .\n      </p>\n\n      <hr />\n      <ul className={styles.unorderedList}>\n        <li>\n          Search - filter traces by service name. Addtionally, you can filter by tags or min/max duration, as well as\n          limit the number of traces that are returned.\n        </li>\n        <li>TraceID - if you have a trace ID, simply enter the trace ID to see the trace.</li>\n        <li>\n          JSON File - you can upload a JSON file that contains a single trace to visualize it. If the file has multiple\n          traces then the first trace is used for visualization. An example of a valid JSON file can be found in{' '}\n          <a\n            href=\"https://grafana.com/docs/grafana/latest/datasources/jaeger/#upload-json-trace-file\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            className={styles.anchorTag}\n          >\n            this section\n          </a>{' '}\n          of the documentation.\n        </li>\n      </ul>\n    </>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  anchorTag: css`\n    color: ${theme.colors.text.link};\n  `,\n  unorderedList: css`\n    list-style-type: none;\n  `,\n});\n","import logfmt from 'logfmt';\n\nexport function convertTagsLogfmt(tags: string | undefined) {\n  if (!tags) {\n    return '';\n  }\n  const data: any = logfmt.parse(tags);\n  Object.keys(data).forEach((key) => {\n    const value = data[key];\n    if (typeof value !== 'string') {\n      data[key] = String(value);\n    }\n  });\n  return JSON.stringify(data);\n}\n\nexport function transformToLogfmt(tags: string | undefined) {\n  if (!tags) {\n    return '';\n  }\n  try {\n    return logfmt.stringify(JSON.parse(tags));\n  } catch {\n    return tags;\n  }\n}\n","import { css } from '@emotion/css';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { fuzzyMatch, InlineField, InlineFieldRow, Input, Select } from '@grafana/ui';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { dispatch } from 'app/store/store';\n\nimport { JaegerDatasource } from '../datasource';\nimport { JaegerQuery } from '../types';\nimport { transformToLogfmt } from '../util';\n\nconst durationPlaceholder = 'e.g. 1.2s, 100ms, 500us';\n\ntype Props = {\n  datasource: JaegerDatasource;\n  query: JaegerQuery;\n  onChange: (value: JaegerQuery) => void;\n};\n\nexport const ALL_OPERATIONS_KEY = 'All';\nconst allOperationsOption: SelectableValue<string> = {\n  label: ALL_OPERATIONS_KEY,\n  value: undefined,\n};\n\nexport function SearchForm({ datasource, query, onChange }: Props) {\n  const [serviceOptions, setServiceOptions] = useState<Array<SelectableValue<string>>>();\n  const [operationOptions, setOperationOptions] = useState<Array<SelectableValue<string>>>();\n  const [isLoading, setIsLoading] = useState<{\n    services: boolean;\n    operations: boolean;\n  }>({\n    services: false,\n    operations: false,\n  });\n\n  const loadOptions = useCallback(\n    async (url: string, loaderOfType: string, query = ''): Promise<Array<SelectableValue<string>>> => {\n      setIsLoading((prevValue) => ({ ...prevValue, [loaderOfType]: true }));\n\n      try {\n        const values: string[] | null = await datasource.metadataRequest(url);\n        if (!values) {\n          return [{ label: `No ${loaderOfType} found`, value: `No ${loaderOfType} found` }];\n        }\n\n        const options: SelectableValue[] = values.sort().map((option) => ({\n          label: option,\n          value: option,\n        }));\n\n        const filteredOptions = options.filter((item) => (item.value ? fuzzyMatch(item.value, query).found : false));\n        return filteredOptions;\n      } catch (error) {\n        if (error instanceof Error) {\n          dispatch(notifyApp(createErrorNotification('Error', error)));\n        }\n        return [];\n      } finally {\n        setIsLoading((prevValue) => ({ ...prevValue, [loaderOfType]: false }));\n      }\n    },\n    [datasource]\n  );\n\n  useEffect(() => {\n    const getServices = async () => {\n      const services = await loadOptions('/api/services', 'services');\n      if (query.service && getTemplateSrv().containsTemplate(query.service)) {\n        services.push(toOption(query.service));\n      }\n      setServiceOptions(services);\n    };\n    getServices();\n  }, [datasource, loadOptions, query.service]);\n\n  useEffect(() => {\n    const getOperations = async () => {\n      const operations = await loadOptions(\n        `/api/services/${encodeURIComponent(getTemplateSrv().replace(query.service!))}/operations`,\n        'operations'\n      );\n      if (query.operation && getTemplateSrv().containsTemplate(query.operation)) {\n        operations.push(toOption(query.operation));\n      }\n      setOperationOptions([allOperationsOption, ...operations]);\n    };\n    if (query.service) {\n      getOperations();\n    }\n  }, [datasource, query.service, loadOptions, query.operation]);\n\n  return (\n    <div className={css({ maxWidth: '500px' })}>\n      <InlineFieldRow>\n        <InlineField label=\"Service Name\" labelWidth={14} grow>\n          <Select\n            inputId=\"service\"\n            options={serviceOptions}\n            onOpenMenu={() => loadOptions('/api/services', 'services')}\n            isLoading={isLoading.services}\n            value={serviceOptions?.find((v) => v?.value === query.service) || undefined}\n            placeholder=\"Select a service\"\n            onChange={(v) =>\n              onChange({\n                ...query,\n                service: v?.value!,\n                operation: query.service !== v?.value ? undefined : query.operation,\n              })\n            }\n            menuPlacement=\"bottom\"\n            isClearable\n            aria-label={'select-service-name'}\n            allowCustomValue={true}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField label=\"Operation Name\" labelWidth={14} grow disabled={!query.service}>\n          <Select\n            inputId=\"operation\"\n            options={operationOptions}\n            onOpenMenu={() =>\n              loadOptions(\n                `/api/services/${encodeURIComponent(getTemplateSrv().replace(query.service!))}/operations`,\n                'operations'\n              )\n            }\n            isLoading={isLoading.operations}\n            value={operationOptions?.find((v) => v.value === query.operation) || null}\n            placeholder=\"Select an operation\"\n            onChange={(v) =>\n              onChange({\n                ...query,\n                operation: v?.value! || undefined,\n              })\n            }\n            menuPlacement=\"bottom\"\n            isClearable\n            aria-label={'select-operation-name'}\n            allowCustomValue={true}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField label=\"Tags\" labelWidth={14} grow tooltip=\"Values should be in logfmt.\">\n          <Input\n            id=\"tags\"\n            value={transformToLogfmt(query.tags)}\n            placeholder=\"http.status_code=200 error=true\"\n            onChange={(v) =>\n              onChange({\n                ...query,\n                tags: v.currentTarget.value,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField label=\"Min Duration\" labelWidth={14} grow>\n          <Input\n            id=\"minDuration\"\n            name=\"minDuration\"\n            value={query.minDuration || ''}\n            placeholder={durationPlaceholder}\n            onChange={(v) =>\n              onChange({\n                ...query,\n                minDuration: v.currentTarget.value,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField label=\"Max Duration\" labelWidth={14} grow>\n          <Input\n            id=\"maxDuration\"\n            name=\"maxDuration\"\n            value={query.maxDuration || ''}\n            placeholder={durationPlaceholder}\n            onChange={(v) =>\n              onChange({\n                ...query,\n                maxDuration: v.currentTarget.value,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField label=\"Limit\" labelWidth={14} grow tooltip=\"Maximum number of returned results\">\n          <Input\n            id=\"limit\"\n            name=\"limit\"\n            value={query.limit || ''}\n            type=\"number\"\n            onChange={(v) =>\n              onChange({\n                ...query,\n                limit: v.currentTarget.value ? parseInt(v.currentTarget.value, 10) : undefined,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </div>\n  );\n}\n\nexport default SearchForm;\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\nimport {\n  Button,\n  FileDropzone,\n  HorizontalGroup,\n  InlineField,\n  InlineFieldRow,\n  Modal,\n  QueryField,\n  RadioButtonGroup,\n  useStyles2,\n  useTheme2,\n} from '@grafana/ui';\n\nimport { JaegerDatasource } from '../datasource';\nimport { JaegerQuery, JaegerQueryType } from '../types';\n\nimport { SearchForm } from './SearchForm';\n\ntype Props = QueryEditorProps<JaegerDatasource, JaegerQuery>;\n\nexport function QueryEditor({ datasource, query, onChange, onRunQuery }: Props) {\n  const [uploadModalOpen, setUploadModalOpen] = useState(false);\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n\n  const onChangeQuery = (value: string) => {\n    const nextQuery: JaegerQuery = { ...query, query: value };\n    onChange(nextQuery);\n  };\n\n  const renderEditorBody = () => {\n    switch (query.queryType) {\n      case 'search':\n        return <SearchForm datasource={datasource} query={query} onChange={onChange} />;\n      default:\n        return (\n          <InlineFieldRow>\n            <InlineField label=\"Trace ID\" labelWidth={14} grow>\n              <QueryField\n                query={query.query}\n                onChange={onChangeQuery}\n                onRunQuery={onRunQuery}\n                placeholder={'Enter a Trace ID (run with Shift+Enter)'}\n                portalOrigin=\"jaeger\"\n              />\n            </InlineField>\n          </InlineFieldRow>\n        );\n    }\n  };\n\n  return (\n    <>\n      <Modal title={'Upload trace'} isOpen={uploadModalOpen} onDismiss={() => setUploadModalOpen(false)}>\n        <div className={css({ padding: theme.spacing(2) })}>\n          <FileDropzone\n            options={{ multiple: false }}\n            onLoad={(result) => {\n              datasource.uploadedJson = result;\n              onChange({\n                ...query,\n                queryType: 'upload',\n              });\n              setUploadModalOpen(false);\n              onRunQuery();\n            }}\n          />\n        </div>\n      </Modal>\n      <div className={styles.container}>\n        <InlineFieldRow>\n          <InlineField label=\"Query type\" grow={true}>\n            <HorizontalGroup spacing={'sm'} align={'center'} justify={'space-between'}>\n              <RadioButtonGroup<JaegerQueryType>\n                options={[\n                  { value: 'search', label: 'Search' },\n                  { value: undefined, label: 'TraceID' },\n                ]}\n                value={query.queryType}\n                onChange={(v) =>\n                  onChange({\n                    ...query,\n                    queryType: v,\n                  })\n                }\n                size=\"md\"\n              />\n              <Button\n                variant=\"secondary\"\n                size=\"sm\"\n                onClick={() => {\n                  setUploadModalOpen(true);\n                }}\n              >\n                Import trace\n              </Button>\n            </HorizontalGroup>\n          </InlineField>\n        </InlineFieldRow>\n        {renderEditorBody()}\n      </div>\n    </>\n  );\n}\n\nconst getStyles = () => ({\n  container: css`\n    width: 100%;\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport {\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { InlineField, InlineFieldRow, InlineSwitch } from '@grafana/ui';\n\nexport interface TraceIdTimeParamsOptions {\n  enabled?: boolean;\n}\n\nexport interface TraceIdTimeParamsData extends DataSourceJsonData {\n  traceIdTimeParams?: TraceIdTimeParamsOptions;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TraceIdTimeParamsData> {}\n\nexport function TraceIdTimeParams({ options, onOptionsChange }: Props) {\n  return (\n    <div className={styles.container}>\n      <h3 className=\"page-heading\">Query Trace by ID with Time Params</h3>\n      <InlineFieldRow className={styles.row}>\n        <InlineField\n          tooltip=\"pass time parameters when querying trace by ID\"\n          label=\"Enable Time Parameters\"\n          labelWidth={26}\n        >\n          <InlineSwitch\n            id=\"enableTraceIdTimeParams\"\n            value={options.jsonData.traceIdTimeParams?.enabled}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'traceIdTimeParams', {\n                ...options.jsonData.traceIdTimeParams,\n                enabled: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </div>\n  );\n}\n\nconst styles = {\n  container: css`\n    label: container;\n    width: 100%;\n  `,\n  row: css`\n    label: row;\n    align-items: baseline;\n  `,\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { DataSourcePluginOptionsEditorProps, GrafanaTheme2 } from '@grafana/data';\nimport { ConfigSection, DataSourceDescription } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { DataSourceHttpSettings, useStyles2 } from '@grafana/ui';\nimport { Divider } from 'app/core/components/Divider';\nimport { NodeGraphSection } from 'app/core/components/NodeGraphSettings';\nimport { TraceToLogsSection } from 'app/core/components/TraceToLogs/TraceToLogsSettings';\nimport { TraceToMetricsSection } from 'app/core/components/TraceToMetrics/TraceToMetricsSettings';\nimport { SpanBarSection } from 'app/features/explore/TraceView/components/settings/SpanBarSettings';\n\nimport { TraceIdTimeParams } from './TraceIdTimeParams';\n\nexport type Props = DataSourcePluginOptionsEditorProps;\n\nexport const ConfigEditor = ({ options, onOptionsChange }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <DataSourceDescription\n        dataSourceName=\"Jaeger\"\n        docsLink=\"https://grafana.com/docs/grafana/latest/datasources/jaeger\"\n        hasRequiredFields={false}\n      />\n\n      <Divider />\n\n      <DataSourceHttpSettings\n        defaultUrl=\"http://localhost:16686\"\n        dataSourceConfig={options}\n        showAccessOptions={false}\n        onChange={onOptionsChange}\n        secureSocksDSProxyEnabled={config.secureSocksDSProxyEnabled}\n      />\n\n      <TraceToLogsSection options={options} onOptionsChange={onOptionsChange} />\n\n      <Divider />\n\n      {config.featureToggles.traceToMetrics ? (\n        <>\n          <TraceToMetricsSection options={options} onOptionsChange={onOptionsChange} />\n          <Divider />\n        </>\n      ) : null}\n\n      <ConfigSection\n        title=\"Additional settings\"\n        description=\"Additional settings are optional settings that can be configured for more control over your data source.\"\n        isCollapsible={true}\n        isInitiallyOpen={false}\n      >\n        <NodeGraphSection options={options} onOptionsChange={onOptionsChange} />\n        <Divider hideLine={true} />\n        <SpanBarSection options={options} onOptionsChange={onOptionsChange} />\n        <Divider hideLine={true} />\n        <TraceIdTimeParams options={options} onOptionsChange={onOptionsChange} />\n      </ConfigSection>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    label: container;\n    margin-bottom: ${theme.spacing(2)};\n    max-width: 900px;\n  `,\n});\n","import { DataFrame, NodeGraphDataFrameFieldNames as Fields } from '@grafana/data';\n\nimport { getNonOverlappingDuration, getStats, makeFrames, makeSpanMap } from '../../../core/utils/tracing';\n\nimport { Span, TraceResponse } from './types';\n\ninterface Node {\n  [Fields.id]: string;\n  [Fields.title]: string;\n  [Fields.subTitle]: string;\n  [Fields.mainStat]: string;\n  [Fields.secondaryStat]: string;\n  [Fields.color]: number;\n}\n\ninterface Edge {\n  [Fields.id]: string;\n  [Fields.target]: string;\n  [Fields.source]: string;\n}\n\nexport function createGraphFrames(data: TraceResponse): DataFrame[] {\n  const { nodes, edges } = convertTraceToGraph(data);\n  const [nodesFrame, edgesFrame] = makeFrames();\n\n  for (const node of nodes) {\n    nodesFrame.add(node);\n  }\n\n  for (const edge of edges) {\n    edgesFrame.add(edge);\n  }\n\n  return [nodesFrame, edgesFrame];\n}\n\nfunction convertTraceToGraph(data: TraceResponse): { nodes: Node[]; edges: Edge[] } {\n  const nodes: Node[] = [];\n  const edges: Edge[] = [];\n\n  const traceDuration = findTraceDuration(data.spans);\n\n  const spanMap = makeSpanMap((index) => {\n    if (index >= data.spans.length) {\n      return undefined;\n    }\n    const span = data.spans[index];\n    return {\n      span,\n      id: span.spanID,\n      parentIds: span.references?.filter((r) => r.refType === 'CHILD_OF').map((r) => r.spanID) || [],\n    };\n  });\n\n  for (const span of data.spans) {\n    const process = data.processes[span.processID];\n\n    const ranges: Array<[number, number]> = spanMap[span.spanID].children.map((c) => {\n      const span = spanMap[c].span;\n      return [span.startTime, span.startTime + span.duration];\n    });\n    const childrenDuration = getNonOverlappingDuration(ranges);\n    const selfDuration = span.duration - childrenDuration;\n    const stats = getStats(span.duration / 1000, traceDuration / 1000, selfDuration / 1000);\n\n    nodes.push({\n      [Fields.id]: span.spanID,\n      [Fields.title]: process?.serviceName ?? '',\n      [Fields.subTitle]: span.operationName,\n      [Fields.mainStat]: stats.main,\n      [Fields.secondaryStat]: stats.secondary,\n      [Fields.color]: selfDuration / traceDuration,\n    });\n\n    const parentSpanID = span.references?.find((r) => r.refType === 'CHILD_OF')?.spanID;\n    // Sometimes some span can be missing. Don't add edges for those.\n    if (parentSpanID && spanMap[parentSpanID].span) {\n      edges.push({\n        [Fields.id]: parentSpanID + '--' + span.spanID,\n        [Fields.target]: span.spanID,\n        [Fields.source]: parentSpanID,\n      });\n    }\n  }\n\n  return { nodes, edges };\n}\n\n/**\n * Get the duration of the whole trace as it isn't a part of the response data.\n * Note: Seems like this should be the same as just longest span, but this is probably safer.\n */\nfunction findTraceDuration(spans: Span[]): number {\n  let traceEndTime = 0;\n  let traceStartTime = Infinity;\n\n  for (const span of spans) {\n    if (span.startTime < traceStartTime) {\n      traceStartTime = span.startTime;\n    }\n\n    if (span.startTime + span.duration > traceEndTime) {\n      traceEndTime = span.startTime + span.duration;\n    }\n  }\n\n  return traceEndTime - traceStartTime;\n}\n","import { identity, omit, pick, pickBy } from 'lodash';\nimport { lastValueFrom, Observable, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  DataSourceJsonData,\n  dateMath,\n  DateTime,\n  FieldType,\n  MutableDataFrame,\n  ScopedVars,\n} from '@grafana/data';\nimport { BackendSrvRequest, getBackendSrv, getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport { NodeGraphOptions } from 'app/core/components/NodeGraphSettings';\nimport { serializeParams } from 'app/core/utils/fetch';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { SpanBarOptions } from 'app/features/explore/TraceView/components';\n\nimport { ALL_OPERATIONS_KEY } from './components/SearchForm';\nimport { TraceIdTimeParamsOptions } from './configuration/TraceIdTimeParams';\nimport { createGraphFrames } from './graphTransform';\nimport { createTableFrame, createTraceFrame } from './responseTransform';\nimport { JaegerQuery } from './types';\nimport { convertTagsLogfmt } from './util';\n\nexport interface JaegerJsonData extends DataSourceJsonData {\n  nodeGraph?: NodeGraphOptions;\n  traceIdTimeParams?: TraceIdTimeParamsOptions;\n}\n\nexport class JaegerDatasource extends DataSourceApi<JaegerQuery, JaegerJsonData> {\n  uploadedJson: string | ArrayBuffer | null = null;\n  nodeGraph?: NodeGraphOptions;\n  traceIdTimeParams?: TraceIdTimeParamsOptions;\n  spanBar?: SpanBarOptions;\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings<JaegerJsonData>,\n    private readonly timeSrv: TimeSrv = getTimeSrv(),\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n    this.nodeGraph = instanceSettings.jsonData.nodeGraph;\n    this.traceIdTimeParams = instanceSettings.jsonData.traceIdTimeParams;\n  }\n\n  async metadataRequest(url: string, params?: Record<string, any>): Promise<any> {\n    const res = await lastValueFrom(this._request(url, params, { hideFromInspector: true }));\n    return res.data.data;\n  }\n\n  isSearchFormValid(query: JaegerQuery): boolean {\n    return !!query.service;\n  }\n\n  query(options: DataQueryRequest<JaegerQuery>): Observable<DataQueryResponse> {\n    // At this moment we expect only one target. In case we somehow change the UI to be able to show multiple\n    // traces at one we need to change this.\n    const target: JaegerQuery = options.targets[0];\n\n    if (!target) {\n      return of({ data: [emptyTraceDataFrame] });\n    }\n\n    if (target.queryType === 'search' && !this.isSearchFormValid(target)) {\n      return of({ error: { message: 'You must select a service.' }, data: [] });\n    }\n\n    let { start, end } = this.getTimeRange();\n\n    if (target.queryType !== 'search' && target.query) {\n      let url = `/api/traces/${encodeURIComponent(this.templateSrv.replace(target.query, options.scopedVars))}`;\n      if (this.traceIdTimeParams) {\n        url += `?start=${start}&end=${end}`;\n      }\n\n      return this._request(url).pipe(\n        map((response) => {\n          const traceData = response?.data?.data?.[0];\n          if (!traceData) {\n            return { data: [emptyTraceDataFrame] };\n          }\n          let data = [createTraceFrame(traceData)];\n          if (this.nodeGraph?.enabled) {\n            data.push(...createGraphFrames(traceData));\n          }\n          return {\n            data,\n          };\n        })\n      );\n    }\n\n    if (target.queryType === 'upload') {\n      if (!this.uploadedJson) {\n        return of({ data: [] });\n      }\n\n      try {\n        const traceData = JSON.parse(this.uploadedJson as string).data[0];\n        let data = [createTraceFrame(traceData)];\n        if (this.nodeGraph?.enabled) {\n          data.push(...createGraphFrames(traceData));\n        }\n        return of({ data });\n      } catch (error) {\n        return of({ error: { message: 'The JSON file uploaded is not in a valid Jaeger format' }, data: [] });\n      }\n    }\n\n    let jaegerInterpolated = pick(this.applyVariables(target, options.scopedVars), [\n      'service',\n      'operation',\n      'tags',\n      'minDuration',\n      'maxDuration',\n      'limit',\n    ]);\n    // remove empty properties\n    let jaegerQuery = pickBy(jaegerInterpolated, identity);\n\n    if (jaegerQuery.operation === ALL_OPERATIONS_KEY) {\n      jaegerQuery = omit(jaegerQuery, 'operation');\n    }\n\n    if (jaegerQuery.tags) {\n      jaegerQuery = {\n        ...jaegerQuery,\n        tags: convertTagsLogfmt(jaegerQuery.tags.toString()),\n      };\n    }\n\n    // TODO: this api is internal, used in jaeger ui. Officially they have gRPC api that should be used.\n    return this._request(`/api/traces`, {\n      ...jaegerQuery,\n      ...this.getTimeRange(),\n      lookback: 'custom',\n    }).pipe(\n      map((response) => {\n        return {\n          data: [createTableFrame(response.data.data, this.instanceSettings)],\n        };\n      })\n    );\n  }\n\n  interpolateVariablesInQueries(queries: JaegerQuery[], scopedVars: ScopedVars): JaegerQuery[] {\n    if (!queries || queries.length === 0) {\n      return [];\n    }\n\n    return queries.map((query) => {\n      return {\n        ...query,\n        datasource: this.getRef(),\n        ...this.applyVariables(query, scopedVars),\n      };\n    });\n  }\n\n  applyVariables(query: JaegerQuery, scopedVars: ScopedVars) {\n    let expandedQuery = { ...query };\n\n    if (query.tags && this.templateSrv.containsTemplate(query.tags)) {\n      expandedQuery = {\n        ...query,\n        tags: this.templateSrv.replace(query.tags, scopedVars),\n      };\n    }\n\n    return {\n      ...expandedQuery,\n      service: this.templateSrv.replace(query.service ?? '', scopedVars),\n      operation: this.templateSrv.replace(query.operation ?? '', scopedVars),\n      minDuration: this.templateSrv.replace(query.minDuration ?? '', scopedVars),\n      maxDuration: this.templateSrv.replace(query.maxDuration ?? '', scopedVars),\n    };\n  }\n\n  async testDatasource(): Promise<any> {\n    return lastValueFrom(\n      this._request('/api/services').pipe(\n        map((res) => {\n          const values: any[] = res?.data?.data || [];\n          const testResult =\n            values.length > 0\n              ? { status: 'success', message: 'Data source connected and services found.' }\n              : {\n                  status: 'error',\n                  message:\n                    'Data source connected, but no services received. Verify that Jaeger is configured properly.',\n                };\n          return testResult;\n        }),\n        catchError((err: any) => {\n          let message = 'Jaeger: ';\n          if (err.statusText) {\n            message += err.statusText;\n          } else {\n            message += 'Cannot connect to Jaeger';\n          }\n\n          if (err.status) {\n            message += `. ${err.status}`;\n          }\n\n          if (err.data && err.data.message) {\n            message += `. ${err.data.message}`;\n          } else if (err.data) {\n            message += `. ${JSON.stringify(err.data)}`;\n          }\n          return of({ status: 'error', message: message });\n        })\n      )\n    );\n  }\n\n  getTimeRange(): { start: number; end: number } {\n    const range = this.timeSrv.timeRange();\n    return {\n      start: getTime(range.from, false),\n      end: getTime(range.to, true),\n    };\n  }\n\n  getQueryDisplayText(query: JaegerQuery) {\n    return query.query || '';\n  }\n\n  private _request(apiUrl: string, data?: any, options?: Partial<BackendSrvRequest>): Observable<Record<string, any>> {\n    const params = data ? serializeParams(data) : '';\n    const url = `${this.instanceSettings.url}${apiUrl}${params.length ? `?${params}` : ''}`;\n    const req = {\n      ...options,\n      url,\n    };\n\n    return getBackendSrv().fetch(req);\n  }\n}\n\nfunction getTime(date: string | DateTime, roundUp: boolean) {\n  if (typeof date === 'string') {\n    date = dateMath.parse(date, roundUp)!;\n  }\n  return date.valueOf() * 1000;\n}\n\nconst emptyTraceDataFrame = new MutableDataFrame({\n  fields: [\n    {\n      name: 'trace',\n      type: FieldType.trace,\n      values: [],\n    },\n  ],\n  meta: {\n    preferredVisualisationType: 'trace',\n    custom: {\n      traceFormat: 'jaeger',\n    },\n  },\n});\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport CheatSheet from './CheatSheet';\nimport { QueryEditor } from './components/QueryEditor';\nimport { ConfigEditor } from './configuration/ConfigEditor';\nimport { JaegerDatasource } from './datasource';\n\nexport const plugin = new DataSourcePlugin(JaegerDatasource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor)\n  .setQueryEditorHelp(CheatSheet);\n"],"names":["Divider","hideLine","styles","getStyles","theme","NodeGraphSettings","options","onOptionsChange","event","NodeGraphSection","TraceToMetricsSettings","ds","val","v","query","i","e","newQueries","TraceToMetricsSection","CheatSheet","convertTagsLogfmt","tags","data","key","value","transformToLogfmt","durationPlaceholder","ALL_OPERATIONS_KEY","allOperationsOption","SearchForm","datasource","onChange","serviceOptions","setServiceOptions","operationOptions","setOperationOptions","isLoading","setIsLoading","loadOptions","url","loaderOfType","prevValue","values","option","item","fuzzy","error","services","getOperations","operations","InlineFieldRow","InlineField","Select","Input","QueryEditor","onRunQuery","uploadModalOpen","setUploadModalOpen","onChangeQuery","nextQuery","renderEditorBody","QueryField","Modal","FileDropzone","result","RadioButtonGroup","Button","TraceIdTimeParams","ConfigEditor","DataSourceDescription","DataSourceHttpSettings","config","ConfigSection","createGraphFrames","nodes","edges","convertTraceToGraph","nodesFrame","edgesFrame","node","edge","traceDuration","findTraceDuration","spanMap","index","span","r","process","ranges","c","childrenDuration","selfDuration","stats","parentSpanID","spans","traceEndTime","traceStartTime","JaegerDatasource","instanceSettings","timeSrv","templateSrv","params","lastValueFrom","target","of","emptyTraceDataFrame","start","end","map","response","traceData","jaegerInterpolated","jaegerQuery","queries","scopedVars","expandedQuery","res","catchError","err","message","range","getTime","apiUrl","req","date","roundUp","MutableDataFrame"],"sourceRoot":""}